/*! For license information please see idea-image.js.LICENSE.txt */
window.OpenStadComponents=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=23)}([function(t,e){t.exports=window.React},function(t,e,r){"use strict";r.d(e,"a",(function(){return d}));var n=r(3),o=r.n(n),i=r(0),u=r.n(i);r(75);function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=y(t);if(e){var o=y(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return p(this,r)}}function p(t,e){return!e||"object"!==c(e)&&"function"!=typeof e?h(t):e}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var d=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(u,t);var e,r,n,i=l(u);function u(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};a(this,u);var c=h(e=i.call(this,t));if(t.attributes&&Object.keys(t.attributes).forEach((function(e){var r=t.attributes[e];c[r.name]=r.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(t){}var s=t.config||{};return s=v(s),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},r,n,s),c.divId=c.divId||c.config&&c.config.divId||t.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,e}return e=u,(r=[{key:"componentDidMount",value:function(t,e){}}])&&s(e.prototype,r),n&&s(e,n),u}(u.a.Component);function v(t){return"object"!=c(t)||Object.keys(t).forEach((function(e){void 0!==t[e]&&null!=t[e]||delete t[e],"object"==c(t[e])&&(t[e]=v(t[e]))})),t}},,function(t,e,r){(function(t){!function(e){var r=function(t){return o(!0===t,!1,arguments)};function n(t,e){if("object"!==i(t))return e;for(var r in e)"object"===i(t[r])&&"object"===i(e[r])?t[r]=n(t[r],e[r]):t[r]=e[r];return t}function o(t,e,o){var u=o[0],c=o.length;(t||"object"!==i(u))&&(u={});for(var a=0;a<c;++a){var s=o[a];if("object"===i(s))for(var f in s)if("__proto__"!==f){var l=t?r.clone(s[f]):s[f];u[f]=e?n(u[f],l):l}}return u}function i(t){return{}.toString.call(t).slice(8,-1).toLowerCase()}r.recursive=function(t){return o(!0===t,!0,arguments)},r.clone=function(t){var e,n,o=t,u=i(t);if("array"===u)for(o=[],n=t.length,e=0;e<n;++e)o[e]=r.clone(t[e]);else if("object"===u)for(e in o={},t)o[e]=r.clone(t[e]);return o},e?t.exports=r:window.merge=r}(t&&"object"==typeof t.exports&&t.exports)}).call(this,r(74)(t))},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(22))},,function(t,e){t.exports=window.ReactDOM},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(9);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){t.exports=r(51).Promise},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){"use strict";(function(t){var e="URLSearchParams"in self,r="Symbol"in self&&"iterator"in Symbol,n="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function a(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function s(t){return"string"!=typeof t&&(t=String(t)),t}function f(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r&&(e[Symbol.iterator]=function(){return e}),e}function l(t){this.map={},t instanceof l?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(e){if(e.bodyUsed)return t.reject(new TypeError("Already read"));e.bodyUsed=!0}function h(e){return new t((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function y(t){var e=new FileReader,r=h(e);return e.readAsArrayBuffer(t),r}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var r;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:o&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:e&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():i&&n&&((r=t)&&DataView.prototype.isPrototypeOf(r))?(this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(t)||c(t))?this._bodyArrayBuffer=d(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var e=p(this);if(e)return e;if(this._bodyBlob)return t.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return t.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return t.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||t.resolve(this._bodyArrayBuffer):this.blob().then(y)}),this.text=function(){var e,r,n,o=p(this);if(o)return o;if(this._bodyBlob)return e=this._bodyBlob,r=new FileReader,n=h(r),r.readAsText(e),n;if(this._bodyArrayBuffer)return t.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return t.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}l.prototype.append=function(t,e){t=a(t),e=s(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},l.prototype.delete=function(t){delete this.map[a(t)]},l.prototype.get=function(t){return t=a(t),this.has(t)?this.map[t]:null},l.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},l.prototype.set=function(t,e){this.map[a(t)]=s(e)},l.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},l.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),f(t)},l.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),f(t)},l.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),f(t)},r&&(l.prototype[Symbol.iterator]=l.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function m(t,e){var r,n,o=(e=e||{}).body;if(t instanceof m){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new l(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new l(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),b.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function g(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function w(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new l(e.headers),this.url=e.url||"",this._initBody(t)}m.prototype.clone=function(){return new m(this,{body:this._bodyInit})},v.call(m.prototype),v.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new l(this.headers),url:this.url})},w.error=function(){var t=new w(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];w.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new w(null,{status:e,headers:{location:t}})};var x=self.DOMException;try{new x}catch(t){(x=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),x.prototype.constructor=x}function O(e,r){return new t((function(t,o){var i=new m(e,r);if(i.signal&&i.signal.aborted)return o(new x("Aborted","AbortError"));var u=new XMLHttpRequest;function c(){u.abort()}u.onload=function(){var e,r,n={status:u.status,statusText:u.statusText,headers:(e=u.getAllResponseHeaders()||"",r=new l,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var e=t.split(":"),n=e.shift().trim();if(n){var o=e.join(":").trim();r.append(n,o)}})),r)};n.url="responseURL"in u?u.responseURL:n.headers.get("X-Request-URL");var o="response"in u?u.response:u.responseText;t(new w(o,n))},u.onerror=function(){o(new TypeError("Network request failed"))},u.ontimeout=function(){o(new TypeError("Network request failed"))},u.onabort=function(){o(new x("Aborted","AbortError"))},u.open(i.method,i.url,!0),"include"===i.credentials?u.withCredentials=!0:"omit"===i.credentials&&(u.withCredentials=!1),"responseType"in u&&n&&(u.responseType="blob"),i.headers.forEach((function(t,e){u.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",c),u.onreadystatechange=function(){4===u.readyState&&i.signal.removeEventListener("abort",c)}),u.send(void 0===i._bodyInit?null:i._bodyInit)}))}O.polyfill=!0,self.fetch||(self.fetch=O,self.Headers=l,self.Request=m,self.Response=w)}).call(this,r(10))},function(t,e,r){var n=r(8),o=r(14),i=r(25);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(8),o=r(27),i=r(15),u=r(26),c=Object.defineProperty;e.f=n?c:function(t,e,r){if(i(t),e=u(e,!0),i(r),o)try{return c(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(11);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},,function(t,e,r){var n=r(45),o=r(47);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(4),o=r(13);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},function(t,e){t.exports={}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";r.r(e),r.d(e,"default",(function(){return b})),r.d(e,"Image",(function(){return b})),r.d(e,"IdeaImage",(function(){return j}));r(12);var n=r(0),o=r.n(n),i=r(6),u=r.n(i),c=(r(95),r(3)),a=r.n(c);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(n=(u=c.next()).done)&&(r.push(u.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==c.return||c.return()}finally{if(o)throw i}}return r}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return f(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return f(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function l(t){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=v(t);if(e){var o=v(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return d(this,r)}}function d(t,e){return!e||"object"!==l(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function v(t){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var b=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(u,t);var e,r,n,i=y(u);function u(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u);return(e=i.call(this,t)).config=a.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},e.config,e.props.config||{}),e.state={currentImageIndex:0,width:0},e}return e=u,(r=[{key:"componentDidMount",value:function(){var t=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:t.offsetWidth})}},{key:"setCurrentImageIndex",value:function(t){this.setState({currentImageIndex:t})}},{key:"getImagesFromProps",value:function(){var t=this.props.images||[];return this.props.image||t[this.state.currentImageIndex],[this.props.image,t]}},{key:"getImageSrc",value:function(t){var e=t;return"object"==l(t)&&t.src&&(e=t.src),e}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var t=this.config.aspectRatio.match(/(\d+)x(\d+)/);return t?t[1]/t[2]:16/9}},{key:"getWidthHeight",value:function(){var t=this.props.width||this.state.width;return[t,this.props.height||t*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var t,e,r,n,i=this,u=s(i.getImagesFromProps(),2);e=u[0],t=u[1];var c=s(i.getWidthHeight(),2);return r=c[0],n=c[1],i.config.allowMultipleImages&&t.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:r,height:n}},o.a.createElement("div",{className:"osc-image",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},t.map((function(t,e){var n=.1*r,u=n*i.getAspectRatioFactor(),c=1.05*u*e;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(e),style:{left:c,width:u,height:n}},o.a.createElement("div",{className:"osc-image-thumb",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")"),zIndex:10-e}:{},onClick:function(t){return i.setCurrentImageIndex(e)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:r,height:n}},o.a.createElement("div",{className:"osc-image",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(e.prototype,r),n&&p(e,n),u}(r(1).a);function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function w(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _(t,e){return(_=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function x(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=S(t);if(e){var o=S(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return O(this,r)}}function O(t,e){return!e||"object"!==m(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function S(t){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var j=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_(t,e)}(i,t);var e,r,n,o=x(i);function i(){return g(this,i),o.apply(this,arguments)}return e=i,(r=[{key:"getImagesFromProps",value:function(){var t=this.props.idea;if(!t)return["",[""]];var e=t.extraData&&t.extraData.images||[];return[t.posterImage&&t.posterImage.key||t.extraData&&t.extraData.images&&t.extraData.images[this.state.currentImageIndex],e]}}])&&w(e.prototype,r),n&&w(e,n),i}(b);j.renderElement=function(t,e){var r=t.attributes;u.a.render(o.a.createElement(j,{attributes:r,config:e}),t)}},function(t,e,r){var n=r(8),o=r(56),i=r(25),u=r(17),c=r(26),a=r(7),s=r(27),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=u(t),e=c(e,!0),s)try{return f(t,e)}catch(t){}if(a(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(11);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(8),o=r(9),i=r(28);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(4),o=r(11),i=n.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,e,r){var n=r(30),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},function(t,e,r){var n=r(4),o=r(18),i="__core-js_shared__",u=n[i]||o(i,{});t.exports=u},function(t,e,r){var n=r(32),o=r(33),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,r){var n=r(60),o=r(30);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e,r){var n=r(63),o=r(4),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},function(t,e,r){var n=r(7),o=r(17),i=r(36).indexOf,u=r(19);t.exports=function(t,e){var r,c=o(t),a=0,s=[];for(r in c)!n(u,r)&&n(c,r)&&s.push(r);for(;e.length>a;)n(c,r=e[a++])&&(~i(s,r)||s.push(r));return s}},function(t,e,r){var n=r(17),o=r(48),i=r(65),u=function(t){return function(e,r,u){var c,a=n(e),s=o(a.length),f=i(u,s);if(t&&r!=r){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(9);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},,function(t,e,r){var n=r(4),o=r(24).f,i=r(13),u=r(57),c=r(18),a=r(61),s=r(67);t.exports=function(t,e){var r,f,l,p,h,y=t.target,d=t.global,v=t.stat;if(r=d?n:v?n[y]||c(y,{}):(n[y]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(h=o(r,f))&&h.value:r[f],!s(d?f:y+(v?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(r,f,p,t)}}},function(t,e,r){var n=r(50),o=r(70),i=r(14),u=n("unscopables"),c=Array.prototype;null==c[u]&&i.f(c,u,{configurable:!0,value:o(null)}),t.exports=function(t){c[u][t]=!0}},function(t,e,r){var n=r(8),o=r(9),i=r(7),u=Object.defineProperty,c={},a=function(t){throw t};t.exports=function(t,e){if(i(c,t))return c[t];e||(e={});var r=[][t],s=!!i(e,"ACCESSORS")&&e.ACCESSORS,f=i(e,0)?e[0]:a,l=i(e,1)?e[1]:void 0;return c[t]=!!r&&!o((function(){if(s&&!n)return!0;var t={length:-1};s?u(t,1,{enumerable:!0,get:a}):t[1]=1,r.call(t,f,l)}))}},function(t,e,r){var n=r(4),o=r(49),i=Function.call;t.exports=function(t,e,r){return o(i,n[t].prototype[e],r)}},,function(t,e,r){var n=r(9),o=r(46),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(37),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e,r){var n=r(68);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(4),o=r(32),i=r(7),u=r(33),c=r(38),a=r(69),s=o("wks"),f=n.Symbol,l=a?f:f&&f.withoutSetter||u;t.exports=function(t){return i(s,t)||(c&&i(f,t)?s[t]=f[t]:s[t]=l("Symbol."+t)),s[t]}},function(t,e,r){(function(e,n){var o;o=function(){"use strict";function t(t){return"function"==typeof t}var o=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},i=0,u=void 0,c=void 0,a=function(t,e){d[i]=t,d[i+1]=e,2===(i+=2)&&(c?c(v):_())},s="undefined"!=typeof window?window:void 0,f=s||{},l=f.MutationObserver||f.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),h="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function y(){var t=setTimeout;return function(){return t(v,1)}}var d=new Array(1e3);function v(){for(var t=0;t<i;t+=2)(0,d[t])(d[t+1]),d[t]=void 0,d[t+1]=void 0;i=0}var b,m,g,w,_=void 0;function x(t,e){var r=arguments,n=this,o=new this.constructor(j);void 0===o[S]&&N(o);var i,u=n._state;return u?(i=r[u-1],a((function(){return U(u,o,i,n._result)}))):D(n,o,t,e),o}function O(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(j);return I(e,t),e}p?_=function(){return e.nextTick(v)}:l?(m=0,g=new l(v),w=document.createTextNode(""),g.observe(w,{characterData:!0}),_=function(){w.data=m=++m%2}):h?((b=new MessageChannel).port1.onmessage=v,_=function(){return b.port2.postMessage(0)}):_=void 0===s?function(){try{var t=r(53);return u=t.runOnLoop||t.runOnContext,function(){u(v)}}catch(t){return y()}}():y();var S=Math.random().toString(36).substring(16);function j(){}var E=void 0,A=new F;function T(t){try{return t.then}catch(t){return A.error=t,A}}function P(e,r,n){r.constructor===e.constructor&&n===x&&r.constructor.resolve===O?function(t,e){1===e._state?k(t,e._result):2===e._state?C(t,e._result):D(e,void 0,(function(e){return I(t,e)}),(function(e){return C(t,e)}))}(e,r):n===A?C(e,A.error):void 0===n?k(e,r):t(n)?function(t,e,r){a((function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,(function(r){n||(n=!0,e!==r?I(t,r):k(t,r))}),(function(e){n||(n=!0,C(t,e))}),t._label);!n&&o&&(n=!0,C(t,o))}),t)}(e,r,n):k(e,r)}function I(t,e){var r;t===e?C(t,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(r=e)||"object"==typeof r&&null!==r?P(t,e,T(e)):k(t,e)}function R(t){t._onerror&&t._onerror(t._result),B(t)}function k(t,e){t._state===E&&(t._result=e,t._state=1,0!==t._subscribers.length&&a(B,t))}function C(t,e){t._state===E&&(t._state=2,t._result=e,a(R,t))}function D(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+1]=r,o[i+2]=n,0===i&&t._state&&a(B,t)}function B(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,u=0;u<e.length;u+=3)n=e[u],o=e[u+r],n?U(r,n,o,i):o(i);t._subscribers.length=0}}function F(){this.error=null}var M=new F;function U(e,r,n,o){var i=t(n),u=void 0,c=void 0,a=void 0,s=void 0;if(i){if((u=function(t,e){try{return t(e)}catch(t){return M.error=t,M}}(n,o))===M?(s=!0,c=u.error,u=null):a=!0,r===u)return void C(r,new TypeError("A promises callback cannot return that same promise."))}else u=o,a=!0;r._state!==E||(i&&a?I(r,u):s?C(r,c):1===e?k(r,u):2===e&&C(r,u))}var L=0;function N(t){t[S]=L++,t._state=void 0,t._result=void 0,t._subscribers=[]}function q(t,e){this._instanceConstructor=t,this.promise=new t(j),this.promise[S]||N(this.promise),o(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?k(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&k(this.promise,this._result))):C(this.promise,new Error("Array Methods must be provided an Array"))}function H(t){this[S]=L++,this._result=this._state=void 0,this._subscribers=[],j!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof H?function(t,e){try{e((function(e){I(t,e)}),(function(e){C(t,e)}))}catch(e){C(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function W(){var t=void 0;if(void 0!==n)t=n;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=H}return q.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===E&&r<t;r++)this._eachEntry(e[r],r)},q.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===O){var o=T(t);if(o===x&&t._state!==E)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===H){var i=new r(j);P(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},q.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===E&&(this._remaining--,2===t?C(n,r):this._result[e]=r),0===this._remaining&&k(n,this._result)},q.prototype._willSettleAt=function(t,e){var r=this;D(t,void 0,(function(t){return r._settledAt(1,e,t)}),(function(t){return r._settledAt(2,e,t)}))},H.all=function(t){return new q(this,t).promise},H.race=function(t){var e=this;return o(t)?new e((function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},H.resolve=O,H.reject=function(t){var e=new this(j);return C(e,t),e},H._setScheduler=function(t){c=t},H._setAsap=function(t){a=t},H._asap=a,H.prototype={constructor:H,then:x,catch:function(t){return this.then(null,t)}},W(),H.polyfill=W,H.Promise=H,H},t.exports=o()}).call(this,r(52),r(22))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(t){n=u}}();var a,s=[],f=!1,l=-1;function p(){f&&a&&(f=!1,a.length?s=a.concat(s):l=-1,s.length&&h())}function h(){if(!f){var t=c(p);f=!0;for(var e=s.length;e;){for(a=s,s=[];++l<e;)a&&a[l].run();l=-1,e=s.length}a=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new y(t,e)),1!==s.length||f||c(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){},,,function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(4),o=r(13),i=r(7),u=r(18),c=r(29),a=r(58),s=a.get,f=a.enforce,l=String(String).split("String");(t.exports=function(t,e,r,c){var a=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof r&&("string"!=typeof e||i(r,"name")||o(r,"name",e),f(r).source=l.join("string"==typeof e?e:"")),t!==n?(a?!p&&t[e]&&(s=!0):delete t[e],s?t[e]=r:o(t,e,r)):s?t[e]=r:u(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(t,e,r){var n,o,i,u=r(59),c=r(4),a=r(11),s=r(13),f=r(7),l=r(31),p=r(19),h=c.WeakMap;if(u){var y=new h,d=y.get,v=y.has,b=y.set;n=function(t,e){return b.call(y,t,e),e},o=function(t){return d.call(y,t)||{}},i=function(t){return v.call(y,t)}}else{var m=l("state");p[m]=!0,n=function(t,e){return s(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!a(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){var n=r(4),o=r(29),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e){t.exports=!1},function(t,e,r){var n=r(7),o=r(62),i=r(24),u=r(14);t.exports=function(t,e){for(var r=o(e),c=u.f,a=i.f,s=0;s<r.length;s++){var f=r[s];n(t,f)||c(t,f,a(e,f))}}},function(t,e,r){var n=r(34),o=r(64),i=r(66),u=r(15);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(u(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){var n=r(4);t.exports=n},function(t,e,r){var n=r(35),o=r(20).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(37),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(9),o=/#|\.prototype\./,i=function(t,e){var r=c[u(t)];return r==s||r!=a&&("function"==typeof e?n(e):!!e)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},a=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){var n=r(38);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n,o=r(15),i=r(71),u=r(20),c=r(19),a=r(73),s=r(28),f=r(31),l=f("IE_PROTO"),p=function(){},h=function(t){return"<script>"+t+"</"+"script>"},y=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;y=n?function(t){t.write(h("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=s("iframe")).style.display="none",a.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(h("document.F=Object")),t.close(),t.F);for(var r=u.length;r--;)delete y.prototype[u[r]];return y()};c[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(p.prototype=o(t),r=new p,p.prototype=null,r[l]=t):r=y(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(8),o=r(14),i=r(15),u=r(72);t.exports=n?Object.defineProperties:function(t,e){i(t);for(var r,n=u(e),c=n.length,a=0;c>a;)o.f(t,r=n[a++],e[r]);return t}},function(t,e,r){var n=r(35),o=r(20);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(34);t.exports=n("document","documentElement")},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){r(76);var n=r(43);t.exports=n("Array","includes")},function(t,e,r){"use strict";var n=r(40),o=r(36).includes,i=r(41);n({target:"Array",proto:!0,forced:!r(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,,,,,,,,,,,,,,,,,function(t,e,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,