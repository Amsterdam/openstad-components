/*! For license information please see ideas-on-map.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=128)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(4),o=n.n(r),i=n(0),a=n.n(i);n(74);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?p(e):t}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(this,a);var c=p(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var u=e.config||{};return u=m(u),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,u),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&u(t.prototype,n),r&&u(t,r),a}(a.a.Component);function m(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=m(e[t]))})),e}},function(e,t,n){"use strict";n(11),n(0),n(5),n(83);var r=n(4),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,s=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},u={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},d={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=s();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:s,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(u).includes(n)||(n="all"),u[n].includes(t)}},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=d},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<c;++s){var u=o[s];if("object"===i(u))for(var l in u)if("__proto__"!==l){var f=e?n.clone(u[l]):u[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(73)(e))},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";n(11),n(0),n(5),n(88);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(u,e);var t,n,r,o=s(u);function u(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,u);var r=l(t=o.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:e.value,error:null},t.onChange=e.onChange,t}return t=u,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),u}(r.a);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=g(e);if(t){var o=g(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return b(this,n)}}function b(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=v(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&y(t.prototype,n),r&&y(t,r),i}(d);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=P(e);if(t){var o=P(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{allowMultiple:!1,imageserver:{process:"",fetch:""}});var n=[];return(e.value||[]).forEach((function(e){n.push({source:{url:e},options:{type:"local",file:{name:e},metadata:{poster:e}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this._loadedFiles=0,this.files=["https://unpkg.com/filepond/dist/filepond.js","https://unpkg.com/filepond-polyfill/dist/filepond-polyfill.js","https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js","https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js","https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js","https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.js"],this.loadNextFile()}},{key:"loadNextFile",value:function(){var e,t=this,n=t.files[t._loadedFiles];n&&((e=document.createElement("script")).src=n,e.async=!0,e&&(e.onload=function(){t.loadNextFile()},document.body.appendChild(e))),t._loadedFiles==t.files.length&&t.fileUploaderInit(),t._loadedFiles++}},{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"fileUploaderInit",value:function(){var e=this,t=document.querySelector(".osc-image-upload-container");if(t){FilePond.registerPlugin(FilePondPluginImagePreview),FilePond.registerPlugin(FilePondPluginFileValidateSize),FilePond.registerPlugin(FilePondPluginFileValidateType),FilePond.registerPlugin(FilePondPluginFilePoster);var n={acceptedFileTypes:["image/*"],allowFileSizeValidation:!0,allowMultiple:this.config.allowMultiple,allowReorder:!0,styleItemPanelAspectRatio:1,maxFileSize:"8mb",name:"image",maxFiles:5,allowBrowse:!0,files:this.state.uploadedFiles,server:{process:this.config.imageserver.process,fetch:this.config.imageserver.fetch},imageResizeTargetWidth:80,imageResizeTargetHeight:80,imageCropAspectRatio:"1:1",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"};e.imageuploader=FilePond.create(t,n),document.querySelector(".filepond--root"),document.querySelector(".filepond--root").addEventListener("FilePond:processfile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),document.querySelector(".filepond--root").addEventListener("FilePond:removefile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),e.state.formfields&&e.imageuploader.addFiles(e.state.formfields.images)}}},{key:"fileUploaderUpdateCurrentInput",value:function(){var e=this;e.state.value=[],this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){try{var n="string"==typeof t.serverId?JSON.parse(t.serverId):t.serverId;e.state.value.push(n.url)}catch(e){console.log(e)}})),e.props.onChange({name:e.config.name,value:e.state.value})}},{key:"fileUploaderUploaderAddImages",value:function(e){this.imageuploader&&this.imageuploader.addFiles(e)}},{key:"render",value:function(){var e=null;return this.state.error&&(e=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen afbeelding geupload")),React.createElement("div",{className:"osc-image-upload-container"},React.createElement("input",{type:"file",className:"imageUploader-gebiedstool filepond-gebiedstool"}),e)}}])&&O(t.prototype,n),r&&O(t,r),i}(d);function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=D(e);if(t){var o=D(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return M(this,n)}}function M(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?T(e):t}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(i,e);var t,n,r,o=L(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(T(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&C(t.prototype,n),r&&C(t,r),i}(r.a);function N(e){return(N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==N(t)&&"function"!=typeof t?H(e):t}function H(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(i,e);var t,n,r,o=B(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=H(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(H(t)),n.onInputFocus=n.onInputFocus.bind(H(t)),n.onInputBlur=n.onInputBlur.bind(H(t)),n.onInputKeyUp=n.onInputKeyUp.bind(H(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(x,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&A(t.prototype,n),r&&A(t,r),i}(r.a);function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Z(e);if(t){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return J(this,n)}}function J(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(i,e);var t,n,r,o=G(i);function i(){return q(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&z(t.prototype,n),r&&z(t,r),i}(d);function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=oe(e);if(t){var o=oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return re(this,n)}}function re(e,t){return!t||"object"!==Y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(i,e);var t,n,r,o=ne(i);function i(){return Q(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ee(t.prototype,n),r&&ee(t,r),i}(d);function ae(e){return(ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ce(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e,t){return(ue=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=de(e);if(t){var o=de(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return fe(this,n)}}function fe(e,t){return!t||"object"!==ae(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ue(e,t)}(i,e);var t,n,r,o=le(i);function i(){return ce(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e){return React.createElement("option",{value:e.value||"",key:e.value},e.description||e.title||e.value)}))),t)}}])&&se(t.prototype,n),r&&se(t,r),i}(d);function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ve(e,t){return(ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ge(this,n)}}function ge(e,t){return!t||"object"!==he(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ve(e,t)}(i,e);var t,n,r,o=be(i);function i(){return ye(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&me(t.prototype,n),r&&me(t,r),i}(d);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=je(e);if(t){var o=je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Re(this,n)}}function Re(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function je(e){return(je=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}(i,e);var t,n,r,o=Pe(i);function i(){return Ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Se(t.prototype,n),r&&Se(t,r),i}(d);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Le(Object(n),!0).forEach((function(t){Te(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function De(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xe(e,t){return(xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Be(e);if(t){var o=Be(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ae(this,n)}}function Ae(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?Fe(e):t}function Fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Be(e){return(Be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xe(e,t)}(i,e);var t,n,r,o=Ne(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Fe(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.value||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(_,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(W,{config:Me(Me({},e.config),{},{inputType:"htmlarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(R,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(W,{config:Me({inputType:"input"},e.config),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(ie,{config:e.config,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(X,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(pe,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(we,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(Ce,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(W,{config:Me(Me({},e.config),{},{inputType:"textarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}})}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&De(t.prototype,n),r&&De(t,r),i}(r.a);function He(e){return(He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function We(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qe(e,t){return(qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ze(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Je(e);if(t){var o=Je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return $e(this,n)}}function $e(e,t){return!t||"object"!==He(t)&&"function"!=typeof t?Ge(e):t}function Ge(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Je(e){return(Je=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ze=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&qe(e,t)}(i,e);var t,n,r,o=ze(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ge(t=o.call(this,e,{title:null,intro:null,fields:[]}));return n.state={values:e.values||{}},n.handleOnChange=n.handleOnChange.bind(Ge(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ve(Object(n),!0).forEach((function(t){We(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);t[e.name]=e.value,this.setState({values:t})}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Ue,We({config:t,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&Ke(t.prototype,n),r&&Ke(t,r),i}(r.a);function Xe(e){return(Xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qe(e,t){return(Qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=rt(e);if(t){var o=rt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tt(this,n)}}function tt(e,t){return!t||"object"!==Xe(t)&&"function"!=typeof t?nt(e):t}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qe(e,t)}(i,e);var t,n,r,o=et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(nt(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&Ye(t.prototype,n),r&&Ye(t,r),i}(r.a);t.a={Form:Ze,FormField:Ue,Hidden:_,ImageUpload:R,InputWithCounter:W,Postcode:ie,Radios:X,Select:pe,Text:we,Textarea:Ce,Slider:ot}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function d(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function p(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=d(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=p(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=s(e),t=u(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[s(e)]},f.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},f.prototype.set=function(e,t){this.map[s(e)]=u(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(e,t){var n,r,o=(t=t||{}).body;if(e instanceof b){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),v.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function g(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function _(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},m.call(b.prototype),m.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var e=new _(null,{status:0,statusText:""});return e.type="error",e};var w=[301,302,303,307,308];_.redirect=function(e,t){if(-1===w.indexOf(t))throw new RangeError("Invalid status code");return new _(null,{status:t,headers:{location:e}})};var O=self.DOMException;try{new O}catch(e){(O=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function E(t,n){return new e((function(e,o){var i=new b(t,n);if(i.signal&&i.signal.aborted)return o(new O("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new _(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new O("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=f,self.Request=b,self.Response=_)}).call(this,n(23))},function(e,t,n){var r=n(8),o=n(13),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(14),a=n(26),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return y})),n.d(t,"e",(function(){return c}));var r=n(92),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,u=t,l=[],f=l,d=!1;function p(){f===l&&(f=l.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function m(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,u=s(u,e)}finally{d=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,m({type:i.REPLACE})}function b(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return m({type:i.INIT}),(o={dispatch:m,subscribe:y,getState:h,replaceReducer:v})[r.a]=b,o}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function u(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,c=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<c.length;i++){var u=c[i],l=n[u],f=e[u],d=l(f,t);if(void 0===d){var p=s(u,t);throw new Error(p)}o[u]=d,r=r||d!==f}return(r=r||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=y.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(3),o=n(12);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){"use strict";(function(e){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[$]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[z]||!!e.constructor[z]||d(e)||p(e))}function a(e,t,n){void 0===n&&(n=!1),0===c(e)?(n?Object.keys:G)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function c(e){var t=e[$];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:d(e)?2:p(e)?3:0}function s(e,t){return 2===c(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){return 2===c(e)?e.get(t):e[t]}function l(e,t,n){var r=c(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){return V&&e instanceof Map}function p(e){return W&&e instanceof Set}function h(e){return e.o||e.t}function y(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=J(e);delete t[$];for(var n=G(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function m(e,t){return void 0===t&&(t=!1),b(e)||o(e)||!i(e)||(c(e)>1&&(e.set=e.add=e.clear=e.delete=v),Object.freeze(e),t&&a(e,(function(e,t){return m(t,!0)}),!0)),e}function v(){r(2)}function b(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=Z[e];return t||r(18,e),t}function _(e,t){Z[e]||(Z[e]=t)}function w(){return U}function O(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function E(e){S(e),e.p.forEach(P),e.p=null}function S(e){e===U&&(U=e.l)}function k(e){return U={p:[],l:U,h:e,m:!0,_:0}}function P(e){var t=e[$];0===t.i||1===t.i?t.j():t.g=!0}function R(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||g("ES5").S(t,e,o),o?(n[$].P&&(E(t),r(4)),i(e)&&(e=j(t,e),t.l||I(t,e)),t.u&&g("Patches").M(n[$],e,t.u,t.s)):e=j(t,n,[]),E(t),t.u&&t.v(t.u,t.s),e!==q?e:void 0}function j(e,t,n){if(b(t))return t;var r=t[$];if(!r)return a(t,(function(o,i){return C(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return I(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=y(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return C(e,r,o,t,i,n)})),I(e,o,!1),n&&e.u&&g("Patches").R(r,n,e.u,e.s)}return r.o}function C(e,t,n,r,a,c){if(o(a)){var u=j(e,a,c&&t&&3!==t.i&&!s(t.D,r)?c.concat(r):void 0);if(l(n,r,u),!o(u))return;e.m=!1}if(i(a)&&!b(a)){if(!e.h.N&&e._<1)return;j(e,a),t&&t.A.l||I(e,a)}}function I(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&m(t,n)}function L(e,t){var n=e[$];return(n?h(n):e)[t]}function M(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function T(e){e.P||(e.P=!0,e.l&&T(e.l))}function D(e){e.o||(e.o=y(e.t))}function x(e,t,n){var r=d(t)?g("MapSet").T(t,n):p(t)?g("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:w(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=X;n&&(o=[r],i=Y);var a=Proxy.revocable(o,i),c=a.revoke,s=a.proxy;return r.k=s,r.j=c,s}(t,n):g("ES5").J(t,n);return(n?n.A:w()).p.push(r),r}function N(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[$],o=c(t);if(r){if(!r.P&&(r.i<4||!g("ES5").K(r)))return r.t;r.I=!0,n=A(t,o),r.I=!1}else n=A(t,o);return a(n,(function(t,o){r&&u(r.t,t)===o||l(n,t,e(o))})),3===o?new Set(n):n}(e)}function A(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return y(e)}function F(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[$];return X.get(t,e)},set:function(t){var n=this[$];X.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][$];if(!o.P)switch(o.i){case 5:r(o)&&T(o);break;case 4:n(o)&&T(o)}}}function n(e){for(var t=e.t,n=e.k,r=G(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==$){var a=t[i];if(void 0===a&&!s(t,i))return!0;var c=n[i],u=c&&c[$];if(u?u.t!==a:!f(c,a))return!0}}var l=!!t[$];return r.length!==G(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};_("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=J(n);delete i[$];for(var a=G(i),c=0;c<a.length;c++){var s=a[c];i[s]=e(s,t||!!i[s].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:w(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,$,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[$].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[$];if(n){var o=n.t,i=n.k,c=n.D,u=n.i;if(4===u)a(i,(function(t){t!==$&&(void 0!==o[t]||s(o,t)?c[t]||e(i[t]):(c[t]=!0,T(n)))})),a(o,(function(e){void 0!==i[e]||s(i,e)||(c[e]=!1,T(n))}));else if(5===u){if(r(n)&&(T(n),c.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)c[l]=!1;else for(var f=o.length;f<i.length;f++)c[f]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===c[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}n.d(t,"a",(function(){return N})),n.d(t,"c",(function(){return F})),n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return i}));var B,U,H="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),V="undefined"!=typeof Map,W="undefined"!=typeof Set,K="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,q=H?Symbol.for("immer-nothing"):((B={})["immer-nothing"]=!0,B),z=H?Symbol.for("immer-draftable"):"__$immer_draftable",$=H?Symbol.for("immer-state"):"__$immer_state",G=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),J=Object.getOwnPropertyDescriptors||function(e){var t={};return G(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Z={},X={get:function(e,t){if(t===$)return e;var n=h(e);if(!s(n,t))return function(e,t,n){var r,o=M(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===L(e.t,t)?(D(e),e.o[t]=x(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=M(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=L(h(e),t),i=null==o?void 0:o[$];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||s(e.t,t)))return!0;D(e),T(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==L(e.t,t)||t in e.t?(e.D[t]=!1,D(e),T(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},Y={};a(X,(function(e,t){Y[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Y.deleteProperty=function(e,t){return X.deleteProperty.call(this,e[0],t)},Y.set=function(e,t,n){return X.set.call(this,e[0],t,n,e[0])};var Q=new(function(){function t(e){this.O=K,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var n=t.prototype;return n.produce=function(t,n,o){if("function"==typeof t&&"function"!=typeof n){var a=n;n=t;var c=this;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return c.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var s;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),i(t)){var u=k(this),l=x(this,t,void 0),f=!0;try{s=n(l),f=!1}finally{f?E(u):S(u)}return void 0!==e&&s instanceof e?s.then((function(e){return O(u,o),R(e,u)}),(function(e){throw E(u),e})):(O(u,o),R(s,u))}if(!t||"object"!=typeof t){if((s=n(t))===q)return;return void 0===s&&(s=t),this.N&&m(s,!0),s}r(21,t)},n.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},n.createDraft=function(e){i(e)||r(8),o(e)&&(e=N(e));var t=k(this),n=x(this,e,void 0);return n[$].C=!0,S(t),n},n.finishDraft=function(e,t){var n=(e&&e[$]).A;return O(n,t),R(void 0,n)},n.setAutoFreeze=function(e){this.N=e},n.setUseProxies=function(e){e&&!K&&r(20),this.O=e},n.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=g("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},t}()),ee=Q.produce;Q.produceWithPatches.bind(Q),Q.setAutoFreeze.bind(Q),Q.setUseProxies.bind(Q),Q.applyPatches.bind(Q),Q.createDraft.bind(Q),Q.finishDraft.bind(Q);t.b=ee}).call(this,n(23))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return v})),n.d(t,"Image",(function(){return v})),n.d(t,"IdeaImage",(function(){return k}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(89),n(4)),s=n.n(c);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=s.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images;return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=u(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=u(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n;console.log(r);var a=r*i.getAspectRatioFactor();console.log(a);var c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&d(t.prototype,n),r&&d(t,r),a}(n(1).a);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=S(e);if(t){var o=S(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return E(this,n)}}function E(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(){return g(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&_(t.prototype,n),r&&_(t,r),i}(v);k.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(k,{attributes:n,config:t}),e)}},function(e,t,n){e.exports=n(51).Promise},function(e,t,n){var r=n(8),o=n(55),i=n(25),a=n(16),c=n(26),s=n(7),u=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),o=n(10),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(3),o=n(17),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(59),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(62),o=n(3),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(16),i=n(36).indexOf,a=n(18);e.exports=function(e,t){var n,c=o(e),s=0,u=[];for(n in c)!r(a,n)&&r(c,n)&&u.push(n);for(;t.length>s;)r(c,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(16),o=n(48),i=n(64),a=function(e){return function(t,n,a){var c,s=r(t),u=o(s.length),l=i(a,u);if(e&&n!=n){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return E})),n.d(t,"c",(function(){return g}));var r=n(20),o=n(15),i=(n(77),n(93));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return(l=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&s(o,n.prototype),o}).apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return(f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,c(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,e)})(e)}var d="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?o.d:o.d.apply(null,arguments)};function p(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var h=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return l(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?l(r,t[0].concat(this)):l(r,t.concat(this))},r}(f(Array));function y(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new h);r&&("boolean"==typeof r?o.push(i.a):o.push(i.a.withExtraArgument(r.extraArgument)));0;return o}(e)}}function m(e){var t,n=y(),r=e||{},i=r.reducer,c=void 0===i?void 0:i,s=r.middleware,u=void 0===s?n():s,l=r.devTools,f=void 0===l||l,h=r.preloadedState,m=void 0===h?void 0:h,v=r.enhancers,b=void 0===v?void 0:v;if("function"==typeof c)t=c;else{if(!p(c))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Object(o.c)(c)}var g=o.a.apply(void 0,"function"==typeof u?u(n):u),_=o.d;f&&(_=d(a({trace:!1},"object"==typeof f&&f)));var w=[g];Array.isArray(b)?w=[g].concat(b):"function"==typeof b&&(w=b(w));var O=_.apply(void 0,w);return Object(o.e)(t,m,O)}function v(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return a({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function b(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function g(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var o=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?b(e.extraReducers):[e.extraReducers],c=i[0],s=void 0===c?{}:c,u=i[1],l=void 0===u?[]:u,f=i[2],d=void 0===f?void 0:f,p=Object.keys(o),h={},y={},m={};p.forEach((function(e){var n,r,i=o[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,h[e]=n,y[a]=n,m[e]=r?v(a,r):v(a)}));var g=function(e,t,n,o){void 0===n&&(n=[]);var i="function"==typeof t?b(t):[t,n,o],a=i[0],c=i[1],s=i[2];return function(t,n){void 0===t&&(t=e);var o=[a[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===o.filter((function(e){return!!e})).length&&(o=[s]),o.reduce((function(e,t){if(t){if(Object(r.d)(e)){var o=t(e,n);return void 0===o?e:o}if(Object(r.e)(e))return Object(r.b)(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return e}),t)}}(n,a({},s,{},y),l,d);return{name:t,reducer:g,actions:m,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var _=["name","message","stack","code"],w=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},O=function(e){if("object"==typeof e&&null!==e){var t={},n=_,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function E(t,n,r){var o=v(t+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),i=v(t+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),a=v(t+"/rejected",(function(e,t,n){var o=e instanceof w,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof w?e.payload:void 0,error:(r&&r.serializeError||O)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),c="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){0},e}();return Object.assign((function(t){return function(s,u,l){var f,d=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),p=new c,h=new e((function(e,t){return p.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:f||"Aborted"})}))})),y=!1;var m=function(){try{var c,f=function(e){return m?e:(r&&!r.dispatchConditionRejection&&a.match(c)&&c.meta.condition||s(c),c)},m=!1,v=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){if(r&&r.condition&&!1===r.condition(t,{getState:u,extra:l}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=!0,s(i(d,t)),e.resolve(e.race([h,e.resolve(n(t,{dispatch:s,getState:u,extra:l,requestId:d,signal:p.signal,rejectWithValue:function(e){return new w(e)}})).then((function(e){return e instanceof w?a(e,d,t):o(e,d,t)}))])).then((function(e){c=e}))}),(function(e){c=a(e,d,t)}));return e.resolve(v&&v.then?v.then(f):f(v))}catch(t){return e.reject(t)}}();return Object.assign(m,{abort:function(e){y&&(f=e,p.abort())},requestId:d,arg:t})}}),{pending:i,rejected:a,fulfilled:o,typePrefix:t})}Object(r.c)()}).call(this,n(23))},function(e,t,n){var r=n(3),o=n(24).f,i=n(12),a=n(56),c=n(17),s=n(60),u=n(66);e.exports=function(e,t){var n,l,f,d,p,h=e.target,y=e.global,m=e.stat;if(n=y?r:m?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(p=o(n,l))&&p.value:n[l],!u(y?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;s(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,l,d,e)}}},function(e,t,n){var r=n(50),o=n(69),i=n(13),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),a=Object.defineProperty,c={},s=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],u=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:s,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(u&&!r)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:s}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(3),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},,function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(67);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(3),o=n(32),i=n(7),a=n(33),c=n(38),s=n(68),u=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(c&&i(l,e)?u[e]=l[e]:u[e]=f("Symbol."+e)),u[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,s=function(e,t){y[i]=e,y[i+1]=t,2===(i+=2)&&(c?c(m):w())},u="undefined"!=typeof window?window:void 0,l=u||{},f=l.MutationObserver||l.WebKitMutationObserver,d="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(m,1)}}var y=new Array(1e3);function m(){for(var e=0;e<i;e+=2)(0,y[e])(y[e+1]),y[e]=void 0,y[e+1]=void 0;i=0}var v,b,g,_,w=void 0;function O(e,t){var n=arguments,r=this,o=new this.constructor(k);void 0===o[S]&&U(o);var i,a=r._state;return a?(i=n[a-1],s((function(){return F(a,o,i,r._result)}))):D(r,o,e,t),o}function E(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(k);return I(t,e),t}d?w=function(){return t.nextTick(m)}:f?(b=0,g=new f(m),_=document.createTextNode(""),g.observe(_,{characterData:!0}),w=function(){_.data=b=++b%2}):p?((v=new MessageChannel).port1.onmessage=m,w=function(){return v.port2.postMessage(0)}):w=void 0===u?function(){try{var e=n(53);return a=e.runOnLoop||e.runOnContext,function(){a(m)}}catch(e){return h()}}():h();var S=Math.random().toString(36).substring(16);function k(){}var P=void 0,R=new N;function j(e){try{return e.then}catch(e){return R.error=e,R}}function C(t,n,r){n.constructor===t.constructor&&r===O&&n.constructor.resolve===E?function(e,t){1===t._state?M(e,t._result):2===t._state?T(e,t._result):D(t,void 0,(function(t){return I(e,t)}),(function(t){return T(e,t)}))}(t,n):r===R?T(t,R.error):void 0===r?M(t,n):e(r)?function(e,t,n){s((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?I(e,n):M(e,n))}),(function(t){r||(r=!0,T(e,t))}),e._label);!r&&o&&(r=!0,T(e,o))}),e)}(t,n,r):M(t,n)}function I(e,t){var n;e===t?T(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?C(e,t,j(t)):M(e,t)}function L(e){e._onerror&&e._onerror(e._result),x(e)}function M(e,t){e._state===P&&(e._result=t,e._state=1,0!==e._subscribers.length&&s(x,e))}function T(e,t){e._state===P&&(e._state=2,e._result=t,s(L,e))}function D(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&s(x,e)}function x(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?F(n,r,o,i):o(i);e._subscribers.length=0}}function N(){this.error=null}var A=new N;function F(t,n,r,o){var i=e(r),a=void 0,c=void 0,s=void 0,u=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return A.error=e,A}}(r,o))===A?(u=!0,c=a.error,a=null):s=!0,n===a)return void T(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,s=!0;n._state!==P||(i&&s?I(n,a):u?T(n,c):1===t?M(n,a):2===t&&T(n,a))}var B=0;function U(e){e[S]=B++,e._state=void 0,e._result=void 0,e._subscribers=[]}function H(e,t){this._instanceConstructor=e,this.promise=new e(k),this.promise[S]||U(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?M(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&M(this.promise,this._result))):T(this.promise,new Error("Array Methods must be provided an Array"))}function V(e){this[S]=B++,this._result=this._state=void 0,this._subscribers=[],k!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof V?function(e,t){try{t((function(t){I(e,t)}),(function(t){T(e,t)}))}catch(t){T(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function W(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=V}return H.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===P&&n<e;n++)this._eachEntry(t[n],n)},H.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===E){var o=j(e);if(o===O&&e._state!==P)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===V){var i=new n(k);C(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},H.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===P&&(this._remaining--,2===e?T(r,n):this._result[t]=n),0===this._remaining&&M(r,this._result)},H.prototype._willSettleAt=function(e,t){var n=this;D(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},V.all=function(e){return new H(this,e).promise},V.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},V.resolve=E,V.reject=function(e){var t=new this(k);return T(t,e),t},V._setScheduler=function(e){c=e},V._setAsap=function(e){s=e},V._asap=s,V.prototype={constructor:V,then:O,catch:function(e){return this.then(null,e)}},W(),V.polyfill=W,V.Promise=V,V},e.exports=o()}).call(this,n(52),n(21))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&p())}function p(){if(!l){var e=c(d);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r,o=n(39),i=n(102),a=Object(o.c)({name:"ideas",initialState:{ideas:[]},reducers:{setIdeas:function(e,t){e.ideas=t.payload},addIdea:function(e,t){var n=t.payload;e.ideas.push(n)},removeIdea:function(e,t){e.ideas.splice(e.ideas.findIndex((function(e){return e.id===t.payload})),1)}},extraReducers:function(e){e.addCase(i.a.fulfilled,(function(e,t){e.ideas=t.payload}))}}),c=((r=a.actions).setIdeas,r.addIdea);t.b=a.reducer},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(3),o=n(12),i=n(7),a=n(17),c=n(29),s=n(57),u=s.get,l=s.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var s=!!c&&!!c.unsafe,u=!!c&&!!c.enumerable,d=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(s?!d&&e[t]&&(u=!0):delete e[t],u?e[t]=n:o(e,t,n)):u?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(58),c=n(3),s=n(10),u=n(12),l=n(7),f=n(31),d=n(18),p=c.WeakMap;if(a){var h=new p,y=h.get,m=h.has,v=h.set;r=function(e,t){return v.call(h,e,t),t},o=function(e){return y.call(h,e)||{}},i=function(e){return m.call(h,e)}}else{var b=f("state");d[b]=!0,r=function(e,t){return u(e,b,t),t},o=function(e){return l(e,b)?e[b]:{}},i=function(e){return l(e,b)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(3),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(61),i=n(24),a=n(13);e.exports=function(e,t){for(var n=o(t),c=a.f,s=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||c(e,l,s(t,l))}}},function(e,t,n){var r=n(34),o=n(63),i=n(65),a=n(14);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(3);e.exports=r},function(e,t,n){var r=n(35),o=n(19).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==u||n!=s&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(14),i=n(70),a=n(19),c=n(18),s=n(72),u=n(28),l=n(31),f=l("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=u("iframe")).style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=o(e),n=new d,d.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(13),i=n(14),a=n(71);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,s=0;c>s;)o.f(e,n=r[s++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(19);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(75);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return W})),n.d(t,"IdeasList",(function(){return m})),n.d(t,"IdeasOverview",(function(){return W})),n.d(t,"IdeasFilterbar",(function(){return P})),n.d(t,"IdeasFilter",(function(){return v.a})),n.d(t,"IdeasSort",(function(){return T})),n.d(t,"IdeasSearch",(function(){return b.a}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(121),n(1)),s=n(2),u=n(90);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{title:"Inzendingen",type:"tiles",columns:3,onMouseOverTileFadeOthers:!1},idea:{titleField:"title",summaryField:"summary"},sort:{sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"}],showSort:!0,defaultValue:"createdtime,desc"},types:[]})).state={highLightIdeaId:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideaTileMouseOverListener=function(e){n.onTileMouseOver(e.detail)},document.addEventListener("osc-idea-tile-mouse-over",n.ideaTileMouseOverListener),n.ideaTileMouseOutListener=function(e){n.onTileMouseOut(e.detail)},document.addEventListener("osc-idea-tile-mouse-out",n.ideaTileMouseOutListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-idea-tile-mouse-over",this.ideaTileMouseOverListener),document.removeEventListener("osc-idea-tile-mouse-out",this.ideaTileMouseOutListener)}},{key:"onTileMouseOver",value:function(e){var t=e.idea;this.setState({highLightIdeaId:t.id})}},{key:"onTileMouseOut",value:function(e){e.idea,this.setState({highLightIdeaId:null})}},{key:"render",value:function(){var e=this,t=this,n=t.props.ideas||[];return React.createElement("div",{className:"osc-tile-list-container ".concat(t.props.className||"")},React.createElement("div",{className:"osc-tile-list"},n.map((function(n,r){return React.createElement(u.a,{config:t.config,idea:n,className:"osc-".concat(t.config.display.columns,"-columns").concat(e.config.display.onMouseOverTileFadeOthers&&t.state.highLightIdeaId&&t.state.highLightIdeaId!=n.id?" osc-opacity-65":""),key:"osc-idea-tile-".concat(n.id)})}))))}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a),v=n(81),b=n(82);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=k(e);if(t){var o=k(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return E(this,n)}}function E(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?S(e):t}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{}})).doNextPendingResetAction=t.doNextPendingResetAction.bind(S(t)),t.state={pendingResetActions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasSearchOnchangeListener=function(e){n.doNextPendingResetAction()},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasFilterOnchangeListener=function(e){n.hideMobileActiveSelector(),n.doNextPendingResetAction()},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener)}},{key:"toggleMobileActiveSelector",value:function(e){this.state.mobileActiveSelector!=e?this.showMobileActiveSelector(e):this.hideMobileActiveSelector()}},{key:"showMobileActiveSelector",value:function(e){this.setState({mobileActiveSelector:e})}},{key:"hideMobileActiveSelector",value:function(){this.setState({mobileActiveSelector:null})}},{key:"resetAll",value:function(){var e=this;e.search&&e.state.pendingResetActions.push(e.search.setSearch),e.filters&&e.filters.forEach((function(t){e.state.pendingResetActions.push(t.setFilter)}));var t=new window.CustomEvent("osc-ideas-filter-reset-all",{detail:{}});document.dispatchEvent(t),e.doNextPendingResetAction()}},{key:"doNextPendingResetAction",value:function(){var e=this.state.pendingResetActions.shift();e&&e({value:""})}},{key:"render",value:function(){var e=this;if(!(void 0!==e.props.showFilterbar?e.props.showFilterbar:e.config.display.showFilterbar))return null;var t,n=null;e.config.search&&(n=React.createElement("div",{className:"osc-ideas-search-container"},React.createElement("div",{className:"osc-ideas-search-button",onClick:function(){return e.toggleMobileActiveSelector("search")}}),React.createElement(b.a,{config:e.config.search,className:"".concat("search"==e.state.mobileActiveSelector?" osc-is-active":""),ref:function(t){return e.search=t}}))),t=React.createElement("button",{value:"reset",onClick:function(){return e.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,o=null;if(e.config.filter.length){var i=e.filters&&e.filters.find((function(e){return e.state.currentValue}));e.filters=[],o=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(i?" osc-active":""),onClick:function(){return e.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==e.state.mobileActiveSelector?" osc-is-active":"")},e.config.filter.map((function(t,n){return React.createElement(v.a,{config:t,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(t){return e.filters[n]=t}})}))),t)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},o),React.createElement("div",{className:"osc-ideas-filterbar ".concat(e.props.className||"")},n,r)}}])&&_(t.prototype,n),r&&_(t,r),i}(c.a);function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=M(e);if(t){var o=M(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return L(this,n)}}function L(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(i,e);var t,n,r,o=I(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{label:null,sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"},{value:"title",label:"Titel"},{value:"random",label:"Willekeurig"},{value:"likes,desc",label:"Meeste likes"},{value:"likes,asc",label:"Minste likes"},{value:"args,desc",label:"Meeste reacties"},{value:"args,asc",label:"Minste reacties"},{value:"ranking,asc",label:"Ranglijst"}],defaultValue:"createdtime,desc",showSort:!0,center:{latitude:52.37104644463586,longitude:4.900402911007405}})).state={currentValue:t.config.defaultValue},t}return t=i,(n=[{key:"doSort",value:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||this.state.currentValue){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":r=r||this.config.center,t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t}},{key:"setSortOrder",value:function(e){var t=e.sortOrder,n=this.props.ideas||[];n=this.doSort({ideas:n,sortOrder:t}),this.setState({ideas:n,currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-sort-onchange",{detail:n});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(e.props.ideas,!(void 0!==e.props.showSort?e.props.showSort:e.config.showSort))return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-sort-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-sort ".concat(e.props.className||"")},t,React.createElement("select",{defaultValue:e.state.currentValue,onChange:function(){return e.setSortOrder({sortOrder:e.sortSelector.value})},className:"osc-default-select",ref:function(t){return e.sortSelector=t}},e.config.sortOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"sort-option-"+t},e.label)}))))}}])&&j(t.prototype,n),r&&j(t,r),i}(c.a);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return H(this,n)}}function H(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(i,e);var t,n,r,o=U(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,title:"Inzendingen",display:{showFilterbar:!0},idea:{titleField:"title",summaryField:"summary"},sort:{showSort:!0,defaultValue:"createdtime,desc"},filter:[],types:[],typeLabel:"Thema"})).state={ideas:t.props.ideas||[],filters:{},search:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasFilterOnchangeListener=function(e){n.updateFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasSearchOnchangeListener=function(e){n.updateSearch(e.detail)},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasSortOnchangeListener=function(e){n.updateSort(e.detail)},document.addEventListener("osc-ideas-sort-onchange",n.ideasSortOnchangeListener),void 0===n.props.ideas&&n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-sort-onchange",this.ideasSortOnchangeListener)}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea?summary=1&includeVoteCount=1&includeArgsCount=1"),n=s.a.api.getHeaders(e.config);fetch(t,{headers:n}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;n=e.sorter.doSort({ideas:n}),e.setState({ideas:n},(function(){}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"updateFilter",value:function(e){var t=N({},this.state.filters);e.value?t[e.fieldName]={value:e.value,doFilter:e.doFilter}:delete t[e.fieldName],this.setState({filters:t})}},{key:"updateSearch",value:function(e){e=e.value?{value:e.value,doSearch:e.doSearch}:null,this.setState({search:e})}},{key:"updateSort",value:function(e){this.setState({ideas:e})}},{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=t;Object.keys(e.state.filters).forEach((function(t){var r=e.state.filters[t];n=r.doFilter(n)})),e.state.search&&(n=e.state.search.doSearch(n)),this.props.maxLength&&(n=t.slice(0,this.props.maxLength));var r=React.createElement("h3",{className:"osc-title"},e.config.title," (",n.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(P,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(T,{config:N({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),r,React.createElement(m,{config:e.config,ideas:n,className:""}))}}])&&F(t.prototype,n),r&&F(t,r),i}(c.a);W.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(W,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";function r(e,t){return e===t}function o(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function i(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}n.d(t,"a",(function(){return a}));var a=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=0,c=r.pop(),s=i(r),u=e.apply(void 0,[function(){return a++,c.apply(null,arguments)}].concat(n)),l=e((function(){for(var e=[],t=s.length,n=0;n<t;n++)e.push(s[n].apply(null,arguments));return u.apply(null,e)}));return l.resultFunc=c,l.dependencies=s,l.recomputations=function(){return a},l.resetRecomputations=function(){return a=0},l}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,i=null;return function(){return o(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}))},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentNLMap}));var merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4),merge__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(merge__WEBPACK_IMPORTED_MODULE_0__),_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(100);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentNLMap=function(_OpenStadComponent){_inherits(OpenStadComponentNLMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentNLMap);function OpenStadComponentNLMap(e){var t;_classCallCheck(this,OpenStadComponentNLMap);var n=_assertThisInitialized(t=_super.call(this,e,{style:"standaard",marker:!1,search:!1,center:{latitude:52.37104644463586,longitude:4.900402911007405},zoom:14,zoomposition:"bottomleft",disableDefaultUI:!0,polygon:null,autoZoomAndCenter:!1}));switch(n.config.target=n.divId,n._loadedFiles=0,n.files=[{type:"css",href:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"},{type:"script",src:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"}],n.config.variant){case"amaps":n.files.push({type:"script",src:"https://map.data.amsterdam.nl/dist/amaps.iife.js"});break;default:n.files.push({type:"css",href:"https://nlmaps.nl/dist/assets/css/nlmaps.css"}),n.files.push({type:"script",src:"https://nlmaps.nl/dist/nlmaps.iife.js"})}return n.files.push({type:"css",href:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"}),n.files.push({type:"script",src:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"}),n.markers=n.config.markers||[],t}return _createClass(OpenStadComponentNLMap,[{key:"componentDidMount",value:function(e,t){var n=this;n.loadNextFile((function(){n.createMap(),n.mapIsReady=!0;var e=new CustomEvent("osc-map-is-ready",{detail:{id:n.divId}});document.dispatchEvent(e)}))}},{key:"loadNextFile",value:function(e){var t,n=this,r=n.files[n._loadedFiles];r&&("script"===r.type&&((t=document.createElement("script")).src=r.src,t.async=!0),"css"===r.type&&((t=document.createElement("link")).href=r.href,t.rel="stylesheet"),t&&(t.onload=function(){n.loadNextFile(e)},this.instance.appendChild(t)));n._loadedFiles==n.files.length&&e(),n._loadedFiles++}},{key:"createMap",value:function createMap(){var self=this;switch(self.config.variant){case"amaps":self.map=amaps.createMap(_objectSpread({},self.config));break;default:self.map=nlmaps.createMap(self.config)}if(0==self.config.zoomControl&&self.map.removeControl(self.map.zoomControl),self.config.clustering&&self.config.clustering.isActive&&L.markerClusterGroup){var iconCreateFunction=self.config.clustering.iconCreateFunction||_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__.a.bind(self);iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction)),self.markerClusterGroup=L.markerClusterGroup({iconCreateFunction:iconCreateFunction,showCoverageOnHover:self.config.clustering.showCoverageOnHover,maxClusterRadius:self.config.clustering.maxClusterRadius||80}),self.markerClusterGroup.on("clusterclick",self.onClusterClick),self.markerClusterGroup.on("animationend",self.onClusterAnimationEnd),self.map.addLayer(self.markerClusterGroup)}if(self.map.on("click",self.onMapClick),self.config.polygon&&self.createCutoutPolygon(self.config.polygon),self.markers.length&&self.markers.forEach((function(e){self.addMarker(e)})),self.config.autoZoomAndCenter){var centerOn="polygon"==self.config.autoZoomAndCenter&&self.config.polygon||self.markers&&self.markers.length&&self.markers;self.editorMarker&&(centerOn=self.editorMarker.position?[self.editorMarker]:self.config.polygon),centerOn&&self.setBoundsAndCenter(centerOn)}}},{key:"addMarkers",value:function(e){var t=this;e.forEach((function(e){t.addMarker(e)}))}},{key:"addMarker",value:function addMarker(markerData){var self=this,icon=markerData.icon,marker;if(!icon){var iconCreateFunction=self.config.iconCreateFunction;iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction),icon=iconCreateFunction())}marker=icon?L.marker([markerData.lat,markerData.lng],{icon:icon}):L.marker([markerData.lat,markerData.lng]),marker.visible=!0,marker.data=markerData.data,marker.doNotCluster=markerData.doNotCluster,markerData.href&&(markerData.onClick=function(){document.location.href=markerData.href});var onClick=self.onMarkerClick;return onClick&&("string"==typeof onClick&&(onClick=eval(onClick)),marker.on("click",onClick)),self.markerClusterGroup&&!markerData.doNotCluster?self.markerClusterGroup.addLayer(marker):self.map.addLayer(marker),self.markers.push(marker),marker}},{key:"removeMarker",value:function(e){if(e){var t=this.markers.indexOf(e);t>-1&&(this.markers.splice(t,1),this.map.removeLayer(e),this.markerClusterGroup.removeLayer(e))}}},{key:"updateMarker",value:function(e,t){if(t.location){var n=new L.LatLng(t.location.lat,t.location.lng);e.setLatLng(n)}}},{key:"createClusterIcon",value:function(e){var t=e.getChildCount();return L.divIcon({html:t,className:"osc-nlmap-icon-cluster",iconSize:L.point(20,20),iconAnchor:[20,10]})}},{key:"createCutoutPolygon",value:function(e){var t=L.polygon(e).getBounds().getCenter(),n=0,r=0;e.forEach((function(e,o){var i=Math.sin(e.lng-t.lng)*Math.cos(e.lat),a=Math.cos(t.lat)*Math.sin(e.lat)-Math.sin(t.lat)*Math.cos(e.lat)*Math.cos(e.lng-t.lng),c=180*Math.atan2(i,a)/Math.PI;45-c<n&&(n=45-c,r=o)}));var o=e.slice(0,r),i=e.slice(r,e.length);e=i.concat(o);var a=[{lat:-85,lng:-179.99},{lat:-85,lng:0},{lat:-85,lng:179.99},{lat:0,lng:179.99},{lat:85,lng:179.99},{lat:85,lng:0},{lat:85,lng:-179.99},{lat:85,lng:-179.99},{lat:0,lng:-179.99}],c=merge__WEBPACK_IMPORTED_MODULE_0___default()({color:"#d00",fillColor:"#000",fillOpacity:.15},this.config.polygonStyle),s=L.polygon([a,e],c);return this.map.addLayer(s),s}},{key:"removePolygon",value:function(e){e&&this.map.removeLayer(e)}},{key:"setBoundsAndCenter",value:function(e){var t=this;if(Array.isArray(e)){var n=[];if(e.forEach((function(e){e._latlng?e=e._latlng:e.position&&(e=e.position.coordinates?{lat:e.position.coordinates[0],lng:e.position.coordinates[1]}:e.position),n.push(e)})),1==n.length)t.map.panTo(new L.LatLng(n[0].lat,n[0].lng));else{var r=L.latLngBounds(n);t.map.fitBounds(r)}}else t.map.panTo(new L.LatLng(t.config.center.latitude,t.config.center.longitude))}},{key:"showMarkers",value:function(e){var t=this;e.forEach((function(e){t.showMarker(e)}))}},{key:"showMarker",value:function(e){var t=this;e.visible=!0,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.addLayer(e):e.addTo(t.map)}},{key:"hideMarkers",value:function(e){var t=this;e.forEach((function(e){t.hideMarker(e)}))}},{key:"hideMarker",value:function(e){var t=this;e.visible=!1,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.removeLayer(e):e.remove(t.map)}},{key:"setFilter",value:function(e){this.filterFunction=e,this.applyFilter()}},{key:"applyFilter",value:function(){var e=this;e.filterFunction?e.markers.forEach((function(t){e.filterFunction(t)?e.showMarker(t):e.hideMarker(t)})):e.markers.forEach((function(t){e.showMarker(t)}))}},{key:"isPointInPolygon",value:function(e,t){if(!e)return!1;if(!t)return!0;for(var n=e.lat,r=e.lng,o=!1,i=0,a=t.length-1;i<t.length;a=i++){var c=t[i].lat,s=t[i].lng,u=t[a].lat,l=t[a].lng;s>r!=l>r&&n<(u-c)*(r-s)/(l-s)+c&&(o=!o)}return o}},{key:"getPointInfo",value:function(e,t,n){var r="https://api.data.amsterdam.nl/bag/nummeraanduiding/?format=json&locatie=[[lat]],[[lng]],50".replace(/\[\[lat\]\]/,(e=e||{}).lat).replace(/\[\[lng\]\]/,e.lng);fetch(r).then((function(e){return e.json()})).then((function(r){var o=r&&r.results&&r.results[0]&&r.results[0].landelijk_id,i="https://api.data.amsterdam.nl/bag/nummeraanduiding/[[id]]/?format=json".replace(/\[\[id\]\]/,o);fetch(i).then((function(e){return e.json()})).then((function(r){r.lat=e.lat,r.lng=e.lng,n&&n(r,t)}))})).catch((function(e){console.log("Zoek adres: niet goed"),console.log(e),n&&n({},t)}))}},{key:"onMapClick",value:function(e){var t=new CustomEvent("osc-map-click",{detail:e});document.dispatchEvent(t)}},{key:"onMarkerClick",value:function(e){var t=new CustomEvent("osc-map-marker-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterClick",value:function(e){var t=new CustomEvent("osc-map-cluster-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterAnimationEnd",value:function(e){var t=new CustomEvent("osc-map-cluster-animation-end",{detail:e});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this;return React.createElement("div",{id:this.divId,className:this.props.className||"osc-nlmap",ref:function(t){return e.instance=t}},React.createElement("div",{id:this.divId+"-map"}))}}]),OpenStadComponentNLMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasDetails}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(87),_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(86),_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(103),_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasDetails=function(_OpenStadComponent){_inherits(IdeasDetails,_OpenStadComponent);var _super=_createSuper(IdeasDetails);function IdeasDetails(e){var t;return _classCallCheck(this,IdeasDetails),(t=_super.call(this,e,{siteId:null,ideaId:null,idea:{showVoteButtons:!0,showLabels:!1,allowMultipleImages:!1,shareChannelsSelection:["facebook","twitter","mail","whatsapp"],metaDataTemplate:null},argument:{isActive:!0,formIntro:"Mijn reactie op deze inzending is ...",ignoreReactionsForIdeaIds:"",closeReactionsForIdeaIds:""},poll:{canAddPolls:!1},labels:{},types:null,typeField:"typeId",typeLabel:"Thema"})).state={idea:t.props.idea,ideaId:e.idea&&e.idea.id||t.config.ideaId,showPollForm:!1},t}return _createClass(IdeasDetails,[{key:"componentDidMount",value:function(e,t){var n=this;n.reactionAddedListener=function(e){n.onReactionStored(e.detail,!0)},document.addEventListener("osc-new-reaction-stored",n.reactionAddedListener),n.reactionEditedListener=function(e){n.onReactionStored(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener),n.pollCreatedListener=function(e){n.onPollCreated(e.detail)},document.addEventListener("osc-new-poll-stored",n.pollCreatedListener),n.pollDeletedListener=function(e){n.onPollDeleted(e.detail)},document.addEventListener("osc-poll-deleted",n.pollDeletedListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.reactionAddedListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener),document.removeEventListener("osc-new-poll-stored",this.pollCreatedListener),document.removeEventListener("osc-poll-deleted",this.pollDeletedListener)}},{key:"dispatchEditIdeaClick",value:function(e){if(e.stopPropagation(),this.config.editIdeaLink)document.location.href=this.config.editIdeaLink;else{var t=new window.CustomEvent("osc-edit-idea-click",{detail:this.state.idea});document.dispatchEvent(t)}}},{key:"showPollForm",value:function(){this.setState({showPollForm:!0})}},{key:"hidePollForm",value:function(){this.setState({showPollForm:!1})}},{key:"dispatchAddPollClick",value:function(e){e.stopPropagation(),this.showPollForm()}},{key:"onReactionStored",value:function(e,t){t&&this.state.idea.argCount++,this.setState({idea:this.state.idea})}},{key:"onReactionDeleted",value:function(e){this.state.idea.argCount--,this.setState({idea:this.state.idea})}},{key:"onPollCreated",value:function(){this.hidePollForm(),this.fetchData()}},{key:"onPollDeleted",value:function(){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t=e.state.ideaId||this.state.idea&&this.state.idea.id;if(t){var n="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(t,"?includeVoteCount=1&includeArguments=1&includeArgsCount=1&includeUser=1&includeUserVote=1");e.config.poll.canAddPolls&&(n+="&includePoll=1");var r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(e.config);fetch(n,{headers:r}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;e.setState({idea:n},(function(){_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.get("osc-reactions-login-pending")&&(window.location.hash="#reactions",_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.set("osc-reactions-login-pending",!1))}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"deleteIdea",value:function(){var e=this,t=this;if(t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(this.state.idea||this.state.idea.id)){var n="".concat(t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(this.state.idea.id),r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),o=this.state.idea.id;fetch(n,{method:"DELETE",headers:r}).then((function(e){if(!e.ok)throw Error("Error deleting idea");return e.json()})).then((function(t){if(e.config.afterDeleteIdeaLink)document.location.href=e.config.afterDeleteIdeaLink;else{var n=new window.CustomEvent("osc-idea-deleted",{detail:{ideaId:o}});document.dispatchEvent(n)}})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"render",value:function render(){var self=this,idea=self.state.idea;if(!idea)return null;var labelHTML=null;if(self.config.idea.showLabels){var typeId=eval("idea.".concat(self.config.typeField)),typeDef=self.config.types&&self.config.types.find((function(e){return e.id==typeId||e.value==typeId}));if(typeDef){var labelText=typeDef.label,backgroundColor=typeDef.backgroundColor,textColor=typeDef.textColor;labelHTML=React.createElement("div",{className:"osc-idea-label",style:{color:textColor,backgroundColor:backgroundColor}},labelText)}}var pollHTML=null,addPollButtonHTML=null;self.config.poll.canAddPolls&&(idea.poll||self.state.showPollForm?pollHTML=React.createElement("div",null,React.createElement("div",{id:"poll",className:"osc-poll-header"},React.createElement("h3",null,self.config.poll.title||"Poll")),React.createElement(_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__.default,{config:_objectSpread(_objectSpread(_objectSpread({},self.config),self.config.poll),{},{ideaId:self.state.ideaId}),poll:idea.poll})):idea.can&&idea.can.edit&&(addPollButtonHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchAddPollClick(e)}},"Poll toevoegen"))));var voteButtonsHTML=null;self.config.idea.showVoteButtons&&(voteButtonsHTML=React.createElement("div",{className:"osc-details-vote-buttons-container"},React.createElement("h3",null,"Likes"),React.createElement(_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__.a,{config:{text:"eens",opinion:"yes",api:this.config.api,user:this.config.user,siteId:this.config.siteId},idea:this.state.idea,name:"likebutton",value:idea.yes})));var editButtonsHTML=null;idea.can&&idea.can.edit&&(editButtonsHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchEditIdeaClick(e)}},"Bewerk idee"),React.createElement("button",{className:"osc-idea-details-editbutton osc-delete",onClick:function(e){confirm("Weet je het zeker")&&self.deleteIdea(e)}},"Verwijder idee")));var modBreakHTML=null;idea&&idea.modBreak&&(modBreakHTML=React.createElement("div",{className:"osc-modbreak"},idea.modBreakDateHumanized,React.createElement("br",null),React.createElement("br",null),idea.modBreak));var reactionsCountHTML=null;self.config.argument.isActive&&(reactionsCountHTML=React.createElement("div",null,React.createElement("h3",null,"Reacties"),React.createElement("a",{href:"#reactions",className:"osc-no-of-reactions"},idea.argCount||0," reacties")));var reactionsHTML=null;if(self.config.argument.isActive){var config=_objectSpread({},self.config);config.argument.isActive=this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),config.argument.isClosed=this.config.argument.isClosed||this.config.argument.closeReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),reactionsHTML=React.createElement("div",null,React.createElement("div",{id:"reactions",className:"osc-reactions-header"},React.createElement("h3",null,self.config.argument.title||"Reacties")),React.createElement(_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__.default,{config:_objectSpread(_objectSpread({},self.config.argument),{},{title:void 0,api:self.config.api,user:self.config.user,siteId:self.config.siteId,ideaId:idea.id,loginUrl:self.config.loginUrl})}))}var shareButtonsHTML=null;if(self.config.idea.shareChannelsSelection.length){var facebookButtonHTML=self.config.idea.shareChannelsSelection.includes("facebook")?React.createElement("li",null,React.createElement("a",{className:"osc-share-facebook",target:"_blank",href:"https://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(document.location.href)},"Facebook")):null,twitterButtonHTML=self.config.idea.shareChannelsSelection.includes("twitter")?React.createElement("li",null,React.createElement("a",{className:"osc-share-twitter",target:"_blank",href:"https://twitter.com/intent/tweet?text="+encodeURIComponent(document.location.href)},"Twitter")):null,mailButtonHTML=self.config.idea.shareChannelsSelection.includes("mail")?React.createElement("li",null,React.createElement("a",{className:"osc-share-email",target:"_blank",href:"mailto:?subject="+encodeURIComponent(eval("idea.".concat(self.config.titleField)))+"&body="+encodeURIComponent(document.location.href)},"Email")):null,whatsappButtonHTML=self.config.idea.shareChannelsSelection.includes("whatsapp")?React.createElement("li",null,React.createElement("a",{className:"osc-share-whatsapp",target:"_blank",href:"https://wa.me/?text="+encodeURIComponent(document.location.href)},"WhatsApp")):null;shareButtonsHTML=React.createElement("div",{className:"osc-details-sharebuttons"},React.createElement("ul",null,facebookButtonHTML,twitterButtonHTML,mailButtonHTML,whatsappButtonHTML))}var authorHTML=idea.user.nickName||idea.user.fullName||idea.user.firstName+" "+idea.user.lastName;this.config.linkToUserPageUrl&&(authorHTML=React.createElement("a",{href:this.config.linkToUserPageUrl+"/"+idea.user.id,className:"osc-author-link"},authorHTML));var metaDataHTML=self.config.idea.metaDataTemplate;return metaDataHTML&&(metaDataHTML=metaDataHTML.replace(/\{createDate\}/,idea.createDateHumanized),metaDataHTML=metaDataHTML.replace(/\{theme\}/,idea.extraData.theme),console.log("xx"),console.log(metaDataHTML),metaDataHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:metaDataHTML,username:authorHTML}),console.log(metaDataHTML)),React.createElement("div",{id:self.id,className:self.props.className||"osc-info-block-idea-details",ref:function(e){return self.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("div",{className:"osc-idea-details-container"},React.createElement("div",{className:"osc-idea-details"},React.createElement("h2",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-details-image-and-stats"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__.IdeaImage,{config:{allowMultipleImages:self.config.idea.allowMultipleImages},idea:idea})),labelHTML,shareButtonsHTML,React.createElement("div",{className:"osc-details-stats"},voteButtonsHTML,reactionsCountHTML,editButtonsHTML)),React.createElement("p",{className:""},metaDataHTML),modBreakHTML,React.createElement("p",{className:"osc-details-summary"},idea.summary),React.createElement("p",{className:"osc-details-description",dangerouslySetInnerHTML:{__html:idea.description}}),addPollButtonHTML),pollHTML,reactionsHTML,React.createElement("div",{className:"osc-bottom-spacer"})))}}]),IdeasDetails}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasFilter}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasFilter=function(_OpenStadComponent){_inherits(IdeasFilter,_OpenStadComponent);var _super=_createSuper(IdeasFilter);function IdeasFilter(e){var t;return _classCallCheck(this,IdeasFilter),(t=_super.call(this,e)).doFilter=t.doFilter.bind(_assertThisInitialized(t)),t.setFilter=t.setFilter.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasFilter,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doFilter",value:function doFilter(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var fieldName=self.config.fieldName,fieldValue=eval("idea.".concat(fieldName));return fieldValue==value})),ideas}},{key:"setFilter",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-filter-onchange",{detail:{fieldName:n.config.fieldName,value:t,doFilter:n.doFilter}});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(0==e.config.showFilter)return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-filter-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-filter ".concat(e.props.className||"")},t,React.createElement("select",{value:e.state.currentValue,onChange:function(){return e.setFilter({value:e.filterSelector.value})},className:"osc-default-select",ref:function(t){return e.filterSelector=t}},e.config.filterOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"filter-option-"+t},e.label)}))))}}]),IdeasFilter}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasSearch}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasSearch=function(_OpenStadComponent){_inherits(IdeasSearch,_OpenStadComponent);var _super=_createSuper(IdeasSearch);function IdeasSearch(e){var t;return _classCallCheck(this,IdeasSearch),(t=_super.call(this,e,{placeholder:"Zoeken",fieldNames:["title","summary"],showSearch:!0,showButton:!1,showSuggestions:!1,defaultValue:""})).doSearch=t.doSearch.bind(_assertThisInitialized(t)),t.setSearch=t.setSearch.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasSearch,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doSearch",value:function doSearch(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var found=!1;return self.config.fieldNames.forEach((function(fieldName){var fieldValue=eval("idea.".concat(fieldName));fieldValue.match(new RegExp(value,"i"))&&(found=!0)})),found})),ideas}},{key:"setSearch",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-search-onchange",{detail:{value:t,doSearch:n.doSearch}});document.dispatchEvent(e)}))}},{key:"showSuggestions",value:function(){}},{key:"hideSuggestions",value:function(){}},{key:"render",value:function(){var e=this;if(0==e.config.showSearch)return null;var t=null;e.config.label&&(t=React.createElement("div",{className:"osc-search-label"},e.config.label,":"));return React.createElement("div",{className:"osc-ideas-search ".concat(e.props.className||"")},t,null,React.createElement("input",{type:"text",value:this.state.currentValue,placeholder:e.config.placeholder,onChange:function(){return e.setSearch({value:e.searchInput.value})},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-ideas-search-input",ref:function(t){return e.searchInput=t}}),React.createElement("button",{className:"osc-ideas-search-button".concat(this.state.currentValue?" osc-active":""),onClick:function(t){return e.setSearch({value:""})},ref:function(t){return e.resetButton=t}}))}}]),IdeasSearch}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){},,function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return H}));var r=n(0),o=n.n(r),i=(n(131),o.a.createContext(null));var a=function(e){e()},c={notify:function(){}};function s(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var u=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var l=function(e){var t=e.store,n=e.context,a=e.children,c=Object(r.useMemo)((function(){var e=new u(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=c.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[c,s]);var l=n||i;return o.a.createElement(l.Provider,{value:c},a)};function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var p=n(109),h=n.n(p),y=n(108),m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,v=[],b=[null,null];function g(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){m((function(){return e.apply(void 0,t)}),n)}function w(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function O(e,t,n,r,o,i,a,c,s,u){if(e){var l=!1,f=null,d=function(){if(!l){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||s():(i.current=e,c.current=e,a.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var E=function(){return[null,0]};function S(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,c=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=n.methodName,l=void 0===s?"connectAdvanced":s,p=n.renderCountProp,m=void 0===p?void 0:p,S=n.shouldHandleStateChanges,k=void 0===S||S,P=n.storeKey,R=void 0===P?"store":P,j=(n.withRef,n.forwardRef),C=void 0!==j&&j,I=n.context,L=void 0===I?i:I,M=d(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),T=L;return function(t){var n=t.displayName||t.name||"Component",i=c(n),a=f({},M,{getDisplayName:c,methodName:l,renderCountProp:m,shouldHandleStateChanges:k,storeKey:R,displayName:i,wrappedComponentName:n,WrappedComponent:t}),s=M.pure;var p=s?r.useMemo:function(e){return e()};function S(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=d(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),c=i[0],s=i[1],l=i[2],h=Object(r.useMemo)((function(){return c&&c.Consumer&&Object(y.isContextConsumer)(o.a.createElement(c.Consumer,null))?c:T}),[c,T]),m=Object(r.useContext)(h),S=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(m)&&Boolean(m.store);var P=S?n.store:m.store,R=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(P)}),[P]),j=Object(r.useMemo)((function(){if(!k)return b;var e=new u(P,S?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[P,S,m]),C=j[0],I=j[1],L=Object(r.useMemo)((function(){return S?m:f({},m,{subscription:C})}),[S,m,C]),M=Object(r.useReducer)(g,v,E),D=M[0][0],x=M[1];if(D&&D.error)throw D.error;var N=Object(r.useRef)(),A=Object(r.useRef)(l),F=Object(r.useRef)(),B=Object(r.useRef)(!1),U=p((function(){return F.current&&l===A.current?F.current:R(P.getState(),l)}),[P,D,l]);_(w,[A,N,B,l,U,F,I]),_(O,[k,P,C,R,A,N,B,F,I,x],[P,C,R]);var H=Object(r.useMemo)((function(){return o.a.createElement(t,f({},U,{ref:s}))}),[s,t,U]);return Object(r.useMemo)((function(){return k?o.a.createElement(h.Provider,{value:L},H):H}),[h,H,L])}var P=s?o.a.memo(S):S;if(P.WrappedComponent=t,P.displayName=i,C){var j=o.a.forwardRef((function(e,t){return o.a.createElement(P,f({},e,{reactReduxForwardedRef:t}))}));return j.displayName=i,j.WrappedComponent=t,h()(j,t)}return h()(P,t)}}function k(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function P(e,t){if(k(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!k(e[n[o]],t[n[o]]))return!1;return!0}var R=n(15);function j(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function C(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function I(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=C(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=C(o),o=r(t,n)),o},r}}var L=[function(e){return"function"==typeof e?I(e):void 0},function(e){return e?void 0:j((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?j((function(t){return Object(R.b)(e,t)})):void 0}];var M=[function(e){return"function"==typeof e?I(e):void 0},function(e){return e?void 0:j((function(){return{}}))}];function T(e,t,n){return f({},n,e,t)}var D=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return T}}];function x(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function N(e,t,n,r,o){var i,a,c,s,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,y,m=!f(p,a),v=!l(o,i);return i=o,a=p,m&&v?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):m?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):v?(h=e(i,a),y=!d(h,c),c=h,y&&(u=n(c,s,a)),u):u}return function(o,l){return p?h(o,l):(c=e(i=o,a=l),s=t(r,a),u=n(c,s,a),p=!0,u)}}function A(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=d(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?N:x)(a,c,s,e,i)}function F(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function B(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?S:n,o=t.mapStateToPropsFactories,i=void 0===o?M:o,a=t.mapDispatchToPropsFactories,c=void 0===a?L:a,s=t.mergePropsFactories,u=void 0===s?D:s,l=t.selectorFactory,p=void 0===l?A:l;return function(e,t,n,o){void 0===o&&(o={});var a=o,s=a.pure,l=void 0===s||s,h=a.areStatesEqual,y=void 0===h?B:h,m=a.areOwnPropsEqual,v=void 0===m?P:m,b=a.areStatePropsEqual,g=void 0===b?P:b,_=a.areMergedPropsEqual,w=void 0===_?P:_,O=d(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=F(e,i,"mapStateToProps"),S=F(t,c,"mapDispatchToProps"),k=F(n,u,"mergeProps");return r(p,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:S,initMergeProps:k,pure:l,areStatesEqual:y,areOwnPropsEqual:v,areStatePropsEqual:g,areMergedPropsEqual:w},O))}}var H=U();var V,W=n(5);V=W.unstable_batchedUpdates,a=V},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N})),n.d(t,"Reactions",(function(){return N}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(106),n(1)),s=n(2),u=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return s.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=s.a.api.getHeaders(e.config),r=e.config.argumentId?"PUT":"POST",o={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:r,headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var r=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(r)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var r=null;return r=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(u.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),r)}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=k(e);if(t){var o=k(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(i,e);var t,n,r,o=E(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=s.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=s.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=s.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",r=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),o=null;e.canEdit()&&e.canDelete()&&(o=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var a=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(a=React.createElement("div",{className:"osc-reaction-description"},React.createElement(m,{config:g(g({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var c=null;t.parentId||(c=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var u=null,l=null;if(e.canReply()&&!e.config.isClosed&&(u=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=g(g({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(m,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var d=null;return t.reactions&&t.reactions.length&&(d=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},o,r,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),a,c,u),l,d)}}])&&w(t.prototype,n),r&&w(t,r),i}(c.a);function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return D(this,n)}}function D(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r,o=T(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=C({},t.state);r.reactions=n,r.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(P,{config:t.config,user:t.state.user,data:C({},e)}))}))),r=t.config.title?React.createElement("h3",null,t.config.title):null,o=React.createElement(m,{config:t.config,user:t.state.user});return t.config.isClosed&&(o=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},r,o,n,React.createElement("br",null),React.createElement("br",null))}}])&&L(t.prototype,n),r&&L(t,r),i}(c.a);N.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(N,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return I})),n.d(t,"Poll",(function(){return I}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(105),n(1)),s=n(2),u=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(i,e);var t,n,r,o=m(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{user:{},questionMinLength:30,questionMaxLength:500,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,allowChoiceTitles:!0})).state={user:e.user,pollId:e.pollId,poll:e.poll,isBusy:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.state.poll||n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.state.poll||n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({poll:{question:"",choices:{1:{},2:{}}}});var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.config.pollId,"?withUser=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=d({},t.state);r.poll=n,t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"validatedResult",value:function(){var e=this,t=e.state.poll,n=e["question-input"],r=n.validate(),o={question:n.state.value,choices:{}};return Object.keys(t.choices).forEach((function(t){var n=e["title-input-".concat(t)],i=e["description-input-".concat(t)];(n&&n.state.value||i.state.value)&&(o.choices[t]={},e.config.allowChoiceTitles&&n.state.value&&(o.choices[t].title=n.state.value,n.validate()||(r=!1)),i.state.value&&(o.choices[t].description=i.state.value,i.validate()||(r=!1)))})),r?Object.keys(o.choices).length<2?null:o:null}},{key:"handleOnChange",value:function(e){var t=d({},this.state.poll);e.choice&&(t.choices[e.choice.id]={title:this.config.allowChoiceTitles&&e.choice.title,description:e.choice.description}),e.question&&(t.question=e.question),this.setState({poll:t},(function(){}))}},{key:"addChoice",value:function(){var e=d({},this.state.poll),t=Object.keys(e.choices).sort(),n=parseInt(t[t.length-1])+1;e.choices[n]={},this.setState({poll:e})}},{key:"canSubmit",value:function(){if(this.state.poll&&this.state.poll.can)return this.state.poll.can.edit;var e=this.config.requiredUserRole,t="moderator";return("anonymous"==e?t:"member"==e&&!0)||"editor"==e&&!0||"moderator"==e&&!0||"admin"==e&&!1}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.validatedResult();if(t){if(!e.canSubmit())return alert("Je bent niet ingelogd");var n=!0,r="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll"),o="POST";e.state.poll&&e.state.poll.id&&(r+="/".concat(e.state.poll.id),o="PUT",n=!1);var i=s.a.api.getHeaders(e.config),a=t;fetch(r,{method:o,headers:i,body:JSON.stringify(a)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(r){var o=new CustomEvent("osc-new-poll-stored",{detail:r});n||(o=new CustomEvent("osc-poll-edited",{detail:r})),document.dispatchEvent(o),"function"==typeof e.config.onFinished&&e.config.onFinished(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}else e.setState({isBusy:!1})}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{},r=null;t.config.formIntro&&(r=React.createElement("div",{className:"osc-intro"},t.config.formIntro));var o=null;return o=t.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitForm()},className:"osc-button-blue osc-margin-left".concat(t.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button osc-margin-left"},"Inloggen")),React.createElement("div",{id:t.divId,className:"osc-form",ref:function(e){return t.instance=e}},r,React.createElement("h4",null,"Vraag"),React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.questionMinLength,maxLength:t.config.questionMaxLength,placeholder:"Vraag"},value:n.question,onChange:function(e){return t.handleOnChange({question:e.value})},ref:function(e){return t["question-input"]=e}}),React.createElement("h4",null,"Keuzemogelijkheden"),React.createElement("ol",{className:"osc-poll-form-choices"},n&&n.choices&&Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;return t.config.allowChoiceTitles&&(o=React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.titleMinLength,maxLength:t.config.titleMaxLength,placeholder:"Titel"},value:r.title,onChange:function(n){return t.handleOnChange({choice:{id:e,title:n.value}})},ref:function(n){return t["title-input-".concat(e)]=n}})),React.createElement("li",{className:"osc-poll-form-choice",key:"osc-key-".concat(e)},o,React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.descriptionMinLength,maxLength:t.config.descriptionMaxLength,placeholder:"Beschrijving"},value:r.description,onChange:function(n){return t.handleOnChange({choice:{id:e,description:n.value}})},ref:function(n){return t["description-input-".concat(e)]=n}}))}))),React.createElement("a",{className:"osc-add-choice-button",onClick:function(t){return e.addChoice()}},"Nog een keuzemogelijkheid toevoegen"),o)}}])&&h(t.prototype,n),r&&h(t,r),i}(c.a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function P(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return R(this,n)}}function R(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?j(e):t}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(i,e);var t,n,r,o=P(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=j(t=o.call(this,e,{siteId:null,ideaId:null,title:null,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",withPercentage:!0,allowChoiceTitles:!0,allowShowResultsIfNotVoted:!1}));return n.config.loginUrl=n.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),n.hideEditForm=n.hideEditForm.bind(n),n.state={user:n.config.user,poll:e.poll,pollId:e.poll&&e.poll.id||n.config.pollId,selectedChoice:null,showResult:!1,showQuestion:!1,editMode:!1,showVoteSucceeded:!1},n.state.poll&&(n.parseVoteCount(n.state.poll),n.state.poll.userVote&&(n.state.selectedChoice=n.state.poll.userVote)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?!n.state.poll&&n.config.ideaId&&n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){!n.state.poll&&n.config.ideaId&&n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({editMode:!0},(function(){}));var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.state.pollId,"?withUser=1&withUserVote=1&withVoteCount=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=O(O({},t.state),{},{showResult:!1,showQuestion:!1});r.poll=n,r.pollId=n.id,t.parseVoteCount(r.poll),r.poll.userVote&&(r.selectedChoice=r.poll.userVote),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"parseVoteCount",value:function(e){e.voteCount&&Object.keys(e.choices).sort().forEach((function(t){var n=e.choices[t];n.votesAbs=e.voteCount[t],n.votesPrc=parseInt(e.voteCount[t]/e.voteCount.total*100),n.votesPrc=n.votesPrc||0}))}},{key:"showEditForm",value:function(){this.setState({editMode:!0})}},{key:"hideEditForm",value:function(){this.setState({editMode:!1},(function(){this.fetchData()}))}},{key:"setShowResult",value:function(){this.setState({showResult:!0})}},{key:"setShowQuestion",value:function(){this.setState({showQuestion:!0})}},{key:"selectChoice",value:function(e){this.setState({selectedChoice:e.choice})}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"isValid",value:function(){return!!this.state.selectedChoice}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.state.user&&this.state.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"submitVote",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.isValid()){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id,"/vote"),n=s.a.api.getHeaders(e.config),r={choice:e.state.selectedChoice};fetch(t,{method:"POST",headers:n,body:JSON.stringify(r)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData((function(){e.setState({isBusy:!1,showVoteSucceeded:!0},(function(){var e=new CustomEvent("osc-poll-voted",{detail:t});document.dispatchEvent(e)}))})),"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description})})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"deletePoll",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.state.poll;if(!(t&&t.can&&t.can.delete))return alert("U kunt deze poll niet verwijderen");if(!t||!t.id)return alert("U kunt deze poll niet verwijderen");var n="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id),r=s.a.api.getHeaders(e.config);fetch(n,{method:"DELETE",headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){var t=new CustomEvent("osc-poll-deleted",{detail:e});document.dispatchEvent(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{};if(t.state.editMode)return React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},React.createElement(g,{config:O(O({},t.config),{},{onFinished:t.hideEditForm}),pollId:t.state.poll&&t.state.poll.id,poll:t.state.poll,user:t.state.user}));var r=null;if(n&&n.choices&&!n.userVote||t.state.showQuestion){var o={name:"pollChoice",choices:[]};Object.keys(n.choices).sort().map((function(e){var r=t.config.allowChoiceTitles&&n.choices[e].title?"<h4>".concat(n.choices[e].title,"</h4>"):"";r+=n.choices[e].description||"",o.choices.push({dangerousDescription:r,value:e})}));var i=null;i=t.canSubmit()?React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitVote()},className:"osc-button-blue".concat(t.isValid()?"":" osc-disabled")},"Stemmen"):React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-poll-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen");var a=null;!t.config.allowShowResultsIfNotVoted||n.userVote||t.state.showResult||(a=React.createElement("a",{className:"osc-show-result-button",onClick:function(t){return e.setShowResult()}},"Resultaat bekijken")),r=React.createElement("div",{className:"osc-poll-question osc-form"},React.createElement(u.a.Radios,{config:o,value:t.state.selectedChoice,onChange:function(e){return t.selectChoice({choice:e.value})},ref:function(e){return t.description=e}}),React.createElement("div",{className:"osc-poll-question-buttons"},i,a))}var c=null;if(n&&(n.userVote||t.state.showResult)){var l=null;t.state.showQuestion||n&&n.choices&&!n.userVote||(l=React.createElement("a",{className:"osc-show-question-button",onClick:function(t){return e.setShowQuestion()}},"Stem aanpassen"));var f=null;if(n.voteCount&&n.voteCount.total){var d=1==n.voteCount.total?"stem":"stemmen";f=React.createElement("div",null,"Totaal ",n.voteCount.total," ",d,React.createElement("br",null),React.createElement("br",null))}c=React.createElement("ul",{className:"osc-choices"},Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;t.config.allowChoiceTitles&&r.title&&(o=React.createElement("h4",null,r.title));var i=null;r.description&&(i=React.createElement("div",null,r.description));var a=null;t.config.withPercentage&&(a=React.createElement("div",{className:"osc-percentage"},r.votesPrc,"%"));var c=React.createElement("div",{className:"osc-choice-default"},o,i,React.createElement("div",{className:"osc-choice-bar".concat(t.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:{width:(r.votesPrc||0)+"%"}})),a);return React.createElement("li",{className:"osc-choice",key:"osc-key-".concat(e)},c)})),f,l)}var p=null;t.state.poll&&t.state.poll.can&&t.state.poll.can.edit&&(p=React.createElement("div",{className:"osc-editbuttons"},React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk poll"),React.createElement("button",{className:"osc-editbutton osc-delete",onClick:function(e){confirm("Weet u het zeker")&&t.deletePoll()}},"Verwijder poll")));var h=null;return t.state.showVoteSucceeded&&(h=React.createElement("div",{className:"osc-vote-succeeded"},"Uw stem is opgeslagen")),React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},p,h,React.createElement("h4",null,n.question),r,c,React.createElement("br",null),React.createElement("br",null))}}])&&S(t.prototype,n),r&&S(t,r),i}(c.a);I.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(I,{attributes:n,config:t}),e)}},function(e,t,n){},function(e,t,n){},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasOverview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasOverview=function(_OpenStadComponent){_inherits(IdeasOverview,_OpenStadComponent);var _super=_createSuper(IdeasOverview);function IdeasOverview(e){var t;_classCallCheck(this,IdeasOverview);var n={idea:{showVoteButtons:!0,titleField:"title",summaryField:"summary"},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},vote:{isViewable:!0,voteValues:[{value:"yes"},{value:"no"}]},types:[],typeField:"typeId"};switch(e.config.display&&e.config.display.type){case"list":n.display={columns:1,showStatusLabel:!1,showTheme:!1,showArea:!1,showVoteProgressbar:!1,showStats:!0,showTypeIcon:!0};break;case"grid":n.display={columns:3,showStatusLabel:!1,showTheme:!0,showArea:!0,showVoteProgressbar:!1,showStats:!1,showTypeIcon:!1};break;default:n.display={type:"tiles",columns:4,showStatusLabel:!0,showTheme:!1,showArea:!1,showVoteProgressbar:!0,showStats:!0,showTypeIcon:!1}}return(t=_super.call(this,e,n)).state={idea:t.props.idea||{}},t}return _createClass(IdeasOverview,[{key:"dispatchIdeaTileClick",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOver",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-over",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOut",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-out",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"render",value:function render(){var self=this,idea=self.state.idea,statusLabelHTML=null;self.config.display.showStatusLabel;var themeAndAreaHTML=null;if(self.config.display.showTheme||self.config.display.showArea){var areaHTML=null;self.config.display.showArea&&idea.extraData.area&&(areaHTML=React.createElement("div",{className:"osc-area"},idea.extraData.area)),themeAndAreaHTML=React.createElement("div",{className:"osc-theme-and-area"},self.config.display.showTheme&&idea.extraData.theme&&React.createElement("div",{className:"osc-theme"},idea.extraData.theme),self.config.display.showTheme&&idea.extraData.theme&&self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-divider"}),self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-area"},idea.extraData.area))}var statsHTML=null;if(self.config.display.showStats){var stats=[];this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"yes"===e.value}))&&stats.push(React.createElement("div",{className:"osc-yes-votes"},idea.yes||0)),this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"no"===e.value}))&&stats.push(React.createElement("div",{className:"osc-no-votes"},idea.no||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&stats.push(React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),statsHTML=React.createElement("div",{className:"osc-idea-stats-container"},stats.map((function(e,t){return React.createElement("div",{className:"osc-stat",key:"osc-stat-".concat(idea.id,"-").concat(t)},e)})))}var voteProgressHTML=null;self.config.display.showVoteProgressbar&&(voteProgressHTML=React.createElement("div",null,"GENOEGSTEMMNBALK"));var typeIconHTML=null;if(self.config.display.showTypeIcon){var ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return ideaTypeValue&&(e.id==ideaTypeValue||e.name==ideaTypeValue)}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});try{"string"==typeof typeDef.listicon&&(typeDef.listicon=JSON.parse(typeDef.listicon))}catch(e){}typeDef.listicon.html&&(typeIconHTML=React.createElement("div",{className:"osc-typeicon"},React.createElement("div",{className:"osc-typeicon-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))}return React.createElement("div",{id:self.divId,className:"osc-idea-tile osc-displaytype-".concat(self.config.display.type," ").concat(self.props.className||""),onClick:function(e){return self.dispatchIdeaTileClick(e,idea)},onMouseOver:function(e){return self.dispatchIdeaTileMouseOver(e,idea)},onMouseOut:function(e){return self.dispatchIdeaTileMouseOut(e,idea)}},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-idea-tile-content"},statusLabelHTML,React.createElement("h4",{className:"osc-title"},eval("idea.".concat(self.config.idea.titleField))),themeAndAreaHTML,React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.idea.summaryField))),voteProgressHTML,statsHTML),typeIconHTML)}}]),IdeasOverview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var _filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(110),_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(94),_preview_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(98),_map_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(126),_component_index_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(54),react_redux__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(85),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(99),redux__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(15);function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var mapDispatch={addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.a},OpenStadComponentIdeasOnMap=function(_OpenStadComponent){_inherits(OpenStadComponentIdeasOnMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentIdeasOnMap);function OpenStadComponentIdeasOnMap(e){var t;_classCallCheck(this,OpenStadComponentIdeasOnMap);var n=_assertThisInitialized(t=_super.call(this,e,{display:{type:"complete",width:null,height:null},canSelectLocation:!0,types:[],typeField:null,titleField:"title",summaryField:"summary",user:{},api:{url:null,headers:null,isUserLoggedIn:!1},idea:{canAddNewIdeas:!0},content:{}}));return n.config.ideaName=n.config.ideaName||"Inzendingen",n.config.doSearchFunction=n.config.doSearchFunction||n.doSearch.bind(n),n.config.typeField=n.config.typeField||"extraData.theme",n.config.types&&n.config.types.length&&n.config.types.forEach((function(e){if(e.value&&!e.name&&(e.name=e.value),e.mapicon&&"string"==typeof e.mapicon)try{e.mapicon=JSON.parse(e.mapicon)}catch(t){console.log(e),console.log(t)}if(e.listicon&&"string"==typeof e.listicon)try{e.listicon=JSON.parse(e.listicon)}catch(t){console.log(e),console.log(t)}if(e.buttonicon&&"string"==typeof e.buttonicon)try{e.buttonicon=JSON.parse(e.buttonicon)}catch(t){console.log(e),console.log(t)}})),n.state={ideas:[],visibleIdeas:[],listedIdeas:[],status:"default",mobileState:"closed",editIdea:null,selectedIdea:null,selectedLocation:null},t}return _createClass(OpenStadComponentIdeasOnMap,[{key:"componentDidMount",value:function(){var e=this;window.addEventListener("hashchange",(function(t){e.hideIdeaDetails();var n=window.location.hash.match(/(\w)(\d+)/);if(n){var r=n[2],o=e.state.ideas&&e.state.ideas.find((function(e){return e.id==r}));"D"==n[1]&&e.showIdeaDetails(o)}}),!1),document.addEventListener("osc-map-is-ready",(function(t){e.fetchData({}),e.map.map.on("zoomend",(function(){e.onChangeMapBoundaries()})),e.map.map.on("moveend",(function(){e.onChangeMapBoundaries()}))})),document.addEventListener("osc-map-click",(function(t){e.onMapClick(t.detail)})),document.addEventListener("osc-map-marker-click",(function(t){e.onMarkerClick(t.detail)})),document.addEventListener("osc-map-cluster-click",(function(t){e.onClusterClick(t.detail)})),document.addEventListener("osc-ideas-filter-onchange",(function(t){e.onChangeFilter(t.detail)})),document.addEventListener("osc-set-selected-idea",(function(t){e.onUpdateSelectedIdea(t.detail)})),document.addEventListener("osc-set-selected-location",(function(t){e.setSelectedLocation(t.detail)})),document.addEventListener("osc-new-idea-click",(function(t){e.onNewIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-selected-idea-click",(function(t){e.onSelectedIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-click-mobile-switcher",(function(t){e.onClickMobileSwitcher()})),document.addEventListener("osc-idea-tile-click",(function(t){e.onIdeaClick(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-over",(function(t){e.onTileMouseOver(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-out",(function(t){e.onTileMouseOut(t.detail.idea)})),document.addEventListener("osc-idea-liked",(function(t){e.onIdeaLiked(t.detail)})),document.addEventListener("osc-new-reaction-stored",(function(t){e.onReactionStored(t.detail,!0)})),document.addEventListener("osc-reaction-edited",(function(t){e.onReactionStored(t.detail)})),document.addEventListener("osc-reaction-deleted",(function(t){e.onReactionDeleted(t.detail)})),document.addEventListener("osc-edit-idea-click",(function(t){e.onEditIdeaClick(t.detail)})),document.addEventListener("osc-idea-deleted",(function(t){e.onIdeaDeleted(t.detail)})),document.addEventListener("osc-idea-stored",(function(t){document.location.href="#",e.onIdeaStored(t.detail.idea)})),document.addEventListener("osc-update-edit-idea",(function(t){e.onUpdateEditIdea(t.detail.idea)}))}},{key:"fetchData",value:function(e){for(var t=e.showIdeaDetails,n=e.showIdeaSelected,r=this,o="".concat(r.config.api.url,"/api/site/").concat(r.config.siteId,"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1"),i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_5__.a.api.getHeaders(r.config);r.map.markers.length>0;){var a=r.map.markers[0];r.map.removeMarker(a)}r.map.markers=[],fetch(o,{headers:i}).then((function(e){return e.json()})).then((function(e){t=t||window.location.hash.match(/^#D(\d+)/)&&window.location.hash.match(/^#D(\d+)/)[1],n=n||window.location.hash.match(/^#S(\d+)/)&&window.location.hash.match(/^#S(\d+)/)[1];var o=e.filter((function(e){return e.location}));o.map((function(e){e.id==t&&(t=e),e.id==n&&(n=e),e.image=e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[0]||"https://stemvanwest.amsterdam.nl/img/placeholders/idea.jpg",r.map.addIdea(e)})),r.map.setBoundsAndCenter(),r.setState({ideas:o},(function(){if("object"==_typeof(n)&&null!=n&&(r.setNewIdea(null),r.setSelectedIdea(n,(function(){r.setState({status:"idea-selected"}),r.map.map.invalidateSize(),r.map.showMarkers({})}))),"object"==_typeof(t)&&null!=t&&(r.setNewIdea(null),r.showIdeaDetails(t)),window.location.hash.match(/^#newidea/)){var e=window.location.hash.match(/&([^&]+)=([^&]+)/g),o={};e&&e.forEach((function(e){var t=_slicedToArray(e.split("="),2),n=t[0],r=t[1];n=n.substring(1,n.length),o[n]=decodeURIComponent(r)})),r.setNewIdea(o),r.showIdeaForm(o)}r.onChangeMapBoundaries()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"showIdeaDetails",value:function(e){var t=this;t.setSelectedIdea(e),t.setState({status:"idea-details"},(function(){t.map.map.invalidateSize(),t.map.hideMarkers({exception:{location:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]}}})}))}},{key:"hideIdeaDetails",value:function(){var e=this;e.setState({status:"idea-selected"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({})}))}},{key:"showIdeaForm",value:function(e,t){var n=this;if(n.config.idea.formUrl){var r=n.config.idea.formUrl;r=(r=(r=(r=r.replace(/:ideaId/,"number"==typeof e.id?e.id:"")).replace(/:location/,e.location?JSON.stringify({lat:e.location.coordinates[0],lng:e.location.coordinates[1]}):"")).replace(/:typeId/,e.typeId)).replace(/:address/,e.address),document.location.href=r}else n.setState({status:"idea-form",editIdea:e},(function(){n.map.map.invalidateSize(),n.map.hideMarkers({exception:{location:e&&e.location&&{lat:e.location.coordinates[0],lng:e.location.coordinates[1]}||n.map.selectedLocation}}),t&&t()}))}},{key:"hideIdeaForm",value:function(){var e=this;if(this.state.editIdea&&"number"==typeof this.state.editIdea.id){var t=e.state.ideas.find((function(t){return t.id==e.state.editIdea.id}));e.showIdeaDetails(t),document.location.href="#D"+t.id}else document.location.href="#",e.state.editIdea&&e.state.editIdea.location?e.setState({status:"location-selected"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({}),e.setNewIdea(e.state.editIdea)})):e.setState({status:"default"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({}),e.setNewIdea(null)}))}},{key:"doSearch",value:function doSearch(searchValue,callback){var self=this,searchValueLc=searchValue.toLowerCase(),searchResult={ideas:[],locations:[]};function onClickAddress(e){fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/lookup?fq=gemeentenaam:amsterdam&&id="+e,{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){if(e&&e.response&&e.response.docs&&e.response.docs[0]){var t=e.response.docs[0].centroide_ll.match(/POINT\((\d+\.\d+) (\d+\.\d+)\)/);self.map.map.panTo(new L.LatLng(t[2],t[1])),self.onMapClick({latlng:{lat:t[2],lng:t[1]}},!0)}})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}this.state.ideas.forEach((function(idea){var title=eval("idea.".concat(self.config.titleField))||"",titlelLc=title.toLowerCase(),summary=eval("idea.".concat(self.config.summaryField))||"",summaryLc=summary.toLowerCase();(titlelLc.match(searchValueLc)||summaryLc.match(searchValueLc))&&searchResult.ideas.push({text:title,onClick:function(){self.onUpdateSelectedIdea(idea)}})})),fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?rows=5&fq=gemeentenaam:amsterdam&fq=*:*&q="+searchValueLc,{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){e&&e.response&&e.response.docs&&e.response.docs.length&&(searchResult.locations=e.response.docs.map((function(e){return{text:e.weergavenaam,onClick:function(){onClickAddress(e.id)}}}))),callback(searchValue,searchResult)})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}},{key:"getVisibleIdeas",value:function(){if("opened"==this.state.mobileState)return console.log(1),this.state.visibleIdeas;console.log(2);var e=this.map.getVisibleIdeas();return this.setState({visibleIdeas:e}),e}},{key:"setSelectedLocation",value:function(e){var t=this;t.map&&t.map.setSelectedLocation(e),e?t.infobar.ideaform&&(t.infobar.ideaform.handleLocationChange({location:e,address:"Bezig met adresgegevens ophalen..."}),t.map.getPointInfo(e,null,(function(n,r){var o=n&&n._display||"Geen adres gevonden";t.state.editIdea.address=o,t.infobar.ideaform.handleLocationChange({location:e,address:o})}))):(t.map&&t.map.unfadeAllMarkers(),t.setSelectedIdea(null),this.setState({status:"default",newIdea:null,editIdea:null},(function(){})))}},{key:"setNewIdea",value:function(e){var t=this;e&&(e.isPointInPolygon=e.location&&t.map.isPointInPolygon({lat:e.location.coordinates[0],lng:e.location.coordinates[1]},t.config.map.polygon)),t.setState({editIdea:e},(function(){e?(t.map.fadeMarkers({exception:[e.location]}),e.location&&t.setSelectedLocation({lat:e.location.coordinates[0],lng:e.location.coordinates[1]}),t.infobar&&(t.setState({editIdea:t.state.editIdea}),e.location?(t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:"Bezig met adresgegevens ophalen..."})),t.map.getPointInfo({lat:e.location.coordinates[0],lng:e.location.coordinates[1]},null,(function(e,n){var r=e&&e._display||"Geen adres gevonden",o=t.state.editIdea;o.address=r,t.setState({editIdea:o}),t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:r}))}))):t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:"Geen locatie geselecteerd..."})),t.infobar.updateIdeas({ideas:t.state.ideas.filter((function(t){return t.id!=e.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]},maxLength:5}))):(t.map.unfadeAllMarkers(),t.infobar&&(t.infobar.setNewIdea(null),t.infobar.updateIdeas({ideas:t.getVisibleIdeas(),hideSortButton:!1})))}))}},{key:"setSelectedIdea",value:function(e,t){var n=this;n.setState({selectedIdea:e},(function(){if(e?(n.map.fadeMarkers({exception:e}),n.infobar&&(n.infobar.setSelectedIdea(e),n.infobar.updateIdeas({ideas:n.state.ideas.filter((function(t){return t.id!=e.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]},maxLength:5}))):(n.map&&n.map.unfadeAllMarkers(),n.infobar&&(n.infobar.setSelectedIdea(null),n.infobar.updateIdeas({ideas:n.getVisibleIdeas(),hideSortButton:!1}))),"function"==typeof t)return t()}))}},{key:"onMapClick",value:function(e,t){if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));switch(this.state.status){case"idea-details":break;case"idea-form":this.map.isPointInPolygon(e.latlng,this.config.map.polygon)&&this.setSelectedLocation(e.latlng);break;default:if(this.setSelectedIdea(null),!this.state.selectedIdea&&!this.map.selectedLocation||t){if(!this.config.canSelectLocation)break;this.setState(_objectSpread(_objectSpread({},this.state),{},{status:"location-selected"}));var n={id:"New Idea",location:{coordinates:[e.latlng.lat,e.latlng.lng]}};this.setNewIdea(n)}else this.setState(_objectSpread(_objectSpread({},this.state),{},{status:"default"})),document.location.href="#",this.setSelectedLocation(null),this.setNewIdea(null),this.infobar.updateIdeas({ideas:this.getVisibleIdeas(),hideSortButton:!1});this.map.updateFading(),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onMarkerClick",value:function(e){var t=this;if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));switch(this.state.status){case"idea-details":case"idea-form":break;default:this.state.editIdea?(this.setSelectedIdea(null),this.setState({status:"default"}),this.setNewIdea(null),this.onUpdateSelectedIdea(null)):this.setSelectedIdea(e.target.data,(function(){t.setState({status:"idea-selected"}),t.setNewIdea(null),t.onUpdateSelectedIdea(e.target.data)})),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onClusterClick",value:function(e){if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));this.setState({status:"default"}),this.setNewIdea(null),this.setSelectedIdea(null)}},{key:"onChangeMapBoundaries",value:function(){var e=this;if(console.log("change",e.state.status,e.map),e.map)switch(e.map.updateFading(),e.state.status){case"idea-details":case"idea-form":break;case"idea-selected":case"location-selected":if(e.infobar){var t=e.state.selectedIdea||e.state.editIdea;t&&e.infobar.updateIdeas({ideas:e.state.ideas.filter((function(e){return e.id!=t.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:t.location.coordinates[0],lng:t.location.coordinates[1]},maxLength:5})}break;default:e.infobar&&e.infobar.updateIdeas({ideas:e.getVisibleIdeas(),hideSortButton:!1})}}},{key:"onUpdateEditIdea",value:function(e){this.setSelectedIdea(e),this.setState({editIdea:_objectSpread({},e)})}},{key:"onUpdateSelectedIdea",value:function(e){this.state.editIdea&&this.setNewIdea(null);var t=e?"idea-selected":"default";document.location.href=e?"#S"+e.id:"#",this.setState({status:t},(function(){this.setSelectedIdea(e)}))}},{key:"onIdeaClick",value:function(e){var t=this;this.state.editIdea&&this.setNewIdea(null),this.setSelectedIdea(e,(function(){t.setState({status:"idea-selected"},(function(){document.location.href="#D"+e.id}))}))}},{key:"onEditIdeaClick",value:function(e){var t=this,n={lat:e.location.coordinates[0],lng:e.location.coordinates[1]};t.showIdeaForm(e,(function(){t.infobar.ideaform.handleLocationChange({location:n,address:"Bezig met adresgegevens ophalen..."}),t.map.getPointInfo(n,null,(function(e,r){var o=e&&e._display||"Geen adres gevonden";t.state.editIdea.address=o,t.infobar.ideaform.handleLocationChange({location:n,address:o})}))}))}},{key:"onIdeaDeleted",value:function(e){var t=this;t.setNewIdea(null),t.setSelectedIdea(null),t.setSelectedLocation(null),t.setState({status:"default"},(function(){t.map.map.invalidateSize(),t.map.setBoundsAndCenter(),t.fetchData({})}))}},{key:"onDeleteIdeaClick",value:function(e){console.log("Delete idea",e.id),alert("TODO")}},{key:"onSelectedIdeaClick",value:function(e){var t=e.idea;document.location.href="#D"+t.id}},{key:"onNewIdeaClick",value:function(e){var t=this,n=e.idea,r=this,o=this.state.editIdea||{};o.typeId=n.typeId,r.showIdeaForm(o,(function(){if(t.state.editIdea&&t.state.editIdea.location){var e={lat:t.state.editIdea.location.coordinates[0],lng:t.state.editIdea.location.coordinates[1]};r.infobar.ideaform.handleLocationChange({location:e,address:"Bezig met adresgegevens ophalen..."}),r.map.getPointInfo(e,null,(function(t,n){var o=t&&t._display||"Geen adres gevonden";r.state.editIdea.address=o,r.infobar.ideaform.handleLocationChange({location:e,address:o})}))}}))}},{key:"onIdeaStored",value:function(e){this.setNewIdea(null),this.fetchData({showIdeaDetails:e.id})}},{key:"onIdeaLiked",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).yes+=e.change}},{key:"onReactionStored",value:function(e,t){t&&this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount++}},{key:"onReactionDeleted",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount--}},{key:"onChangeFilter",value:function(e){console.log(e),this.setSelectedIdea(null),this.setNewIdea(null),this.setSelectedLocation(null),this.setState({status:"default"}),this.onChangeMapBoundaries()}},{key:"onTileMouseOver",value:function(e){this.map.fadeMarkers({exception:e}),this.map.updateFading()}},{key:"onTileMouseOut",value:function(e){this.map.unfadeAllMarkers(),this.state.selectedIdea&&this.map.fadeMarkers({exception:this.state.selectedIdea}),this.map.selectedLocation&&this.map.fadeMarkers({}),this.map.updateFading()}},{key:"onClickBackToOverview",value:function(e){document.location.href="#S"+this.state.selectedIdea.id}},{key:"onClickMobileSwitcher",value:function(){var e=this;e.infobar&&e.infobar.setState({mobileState:"closed"==e.state.mobileState?"opened":"closed"}),e.setState({mobileState:"closed"==e.state.mobileState?"opened":"closed"},(function(){if(e.map.map.invalidateSize(),"location-selected"==this.state.status||"idea-selected"==this.state.status){e.state.selectedIdea||e.state.editIdea;e.map.setBoundsAndCenter()}}))}},{key:"render",value:function render(){var _this5=this,infoHTML=null,filterHTML=null,mobilePopupHTML=null;switch(this.state.status){case"idea-details":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,displayType:"details",idea:this.state.selectedIdea,className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.onClickBackToOverview()}},"Terug naar overzicht"));break;case"idea-form":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,displayType:"form",idea:_objectSpread(_objectSpread({},this.state.editIdea),{},{user:this.state.editIdea&&this.state.editIdea.user||this.config.user}),className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.hideIdeaForm()}},"Terug naar ",this.state.editIdea&&"number"==typeof this.state.editIdea.id?"idee":"overzicht"));break;case"location-selected":case"idea-selected":"location-selected"==this.state.status?this.state.editIdea&&this.state.editIdea.isPointInPolygon&&(mobilePopupHTML=React.createElement(_preview_jsx__WEBPACK_IMPORTED_MODULE_2__.a,{config:_objectSpread(_objectSpread({},this.config),{},{display:{type:"mobilePreview"}}),selectedLocation:this.state.editIdea})):mobilePopupHTML=React.createElement("div",{className:"osc-mobile-popup osc-clickable",onClick:function(){_this5.setState({mobileState:"opened"}),_this5.infobar.setState({mobileState:"opened"}),document.location.href="#D"+_this5.state.selectedIdea.id}},React.createElement("div",{className:"osc-image",style:{backgroundImage:"url(".concat(this.state.selectedIdea&&this.state.selectedIdea.image,")")}}),eval(this.state.selectedIdea&&"this.state.selectedIdea.".concat(this.config.titleField))),infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",mobileState:this.state.mobileState,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__.a,{config:this.config,className:"osc-ideas-filterbar"});break;default:infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",mobileState:this.state.mobileState,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__.a,{config:this.config,className:"osc-ideas-filterbar"}),mobilePopupHTML=null}var divStyle={},simpleHTML=null;if("simple"==this.config.display.type){filterHTML=null,infoHTML=null,mobilePopupHTML=null;var buttonHTML=null;this.config.linkToCompleteUrl&&(buttonHTML=React.createElement("button",{onClick:function(){document.location.href=_this5.config.linkToCompleteUrl},className:"osc-button-blue",style:{position:"absolute",top:20,right:20}},"Bekijk de volledige kaart")),simpleHTML=React.createElement("div",{style:{position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1e3}},buttonHTML),this.config.display.width&&(divStyle.width=this.config.display.width),this.config.display.height&&(divStyle.height=this.config.display.height)}return React.createElement("div",{id:this.divId,className:"osc-ideas-on-map osc-ideas-on-map-".concat(this.state.status," osc-mobile-").concat(this.state.mobileState),style:divStyle,ref:function(e){return _this5.instance=e}},filterHTML,infoHTML,React.createElement("div",{className:"osc-ideas-on-map-map osc-ideas-on-map-map-".concat(this.config.display.type)},React.createElement(_map_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{id:this.divId+"-map",config:_objectSpread(_objectSpread({},this.config.map),{},{types:this.config.types,typeField:this.config.typeField,zoomControl:"simple"!=this.config.display.type}),ref:function(e){return _this5.map=e}})),simpleHTML,mobilePopupHTML)}}]),OpenStadComponentIdeasOnMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_4__.a),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_8__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_9__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_7__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(OpenStadComponentIdeasOnMap)},function(e,t,n){"use strict";(function(e,r){var o,i=n(101);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(21),n(120)(e))},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var r=n(1),o=n(76);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,i=d(a);function a(){return u(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=React.createElement("h3",{className:"osc-title"},e.config.title," (",t.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(o.IdeasFilterbar,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(o.IdeasSort,{config:c({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),n,React.createElement(o.IdeasList,{config:e.config,ideas:t,className:""}))}}])&&l(t.prototype,n),r&&l(t,r),a}(o.IdeasOverview),m=n(97),v=n(125),b=n(98);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(i,e);var t,n,r,o=k(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{columns:1,showFilterbar:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},types:[]})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(t.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(t.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),t.state={currentSortOrder:t.config.defaultValue,selectedIdea:void 0,newIdea:void 0,ideas:[],mobileState:e.mobileState||"closed"},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.setSelectedIdeaListener=function(e){n.setSelectedIdea(e.detail)},document.addEventListener("osc-set-selected-idea",n.setSelectedIdeaListener),n.setSelectedLocationListener=function(e){n.setNewIdea(e.detail)},document.addEventListener("osc-set-selected-location",n.setSelectedLocationListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-set-selected-idea",this.setSelectedIdeaListener),document.removeEventListener("osc-set-selected-location",this.setSelectedLocationListener)}},{key:"updateIdeas",value:function(e){var t=e.ideas,n=void 0===t?this.state.ideas:t,r=e.sortOrder,o=void 0===r?this.state.currentSortOrder:r,i=(e.hideSortButton,e.center),a=void 0===i?{lat:52.37104644463586,lng:4.900402911007405}:i,c=e.maxLength;n=this.list?this.list.sorter.doSort({ideas:n,sortOrder:o,center:a}):[],c&&(n=n.splice(0,c)),this.setState({ideas:n})}},{key:"setSelectedIdea",value:function(e){this.setState(w(w({},this.state),{},{selectedIdea:e,newIdea:null}))}},{key:"setNewIdea",value:function(e){this.setState(w(w({},this.state),{},{newIdea:e,selectedIdea:null}))}},{key:"dispatchClickMobileSwitcher",value:function(e){e.stopPropagation();var t=new window.CustomEvent("osc-click-mobile-switcher",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this,t=this,n=w({},t.config);if(n.display.type="list",this.props.idea&&this.props.idea.extraData&&this.props.idea.extraData.type&&("Kans"==this.props.idea.extraData.type||"Knelpunt"==this.props.idea.extraData.type)&&(n.types=[{name:"Kans",label:"Dit gaat goed",value:"Kans",buttonLabel:"Ik wil een idee posten",backgroundColor:"#bed200",textColor:"black"},{name:"Knelpunt",label:"Dit kan beter",value:"Knelpunt",backgroundColor:"#ff9100",textColor:"black"}],n.typeField="extraData.type",n.showLabels=!0),"details"==t.props.displayType)return React.createElement(m.default,{config:n,idea:this.props.idea,className:t.props.className||"osc-infobar-idea-details",ref:function(t){return e.ideadetails=t}});if("form"==t.props.displayType)return React.createElement(v.a,{config:n,idea:this.props.idea,className:"osc-ideas-on-map-info",ref:function(t){return e.ideaform=t}});t.state.ideas;var r,o="",i="",a=null,c=!1;t.state.newIdea&&(o="in de buurt",i="Meer details en acties",a=5,c=!0),t.state.selectedIdea&&(o="in de buurt",i="Meer details",a=5,c=!0),o||(o="in dit gebied"),t.state.newIdea||t.state.selectedIdea||(i="".concat(n.ideaName," in dit gebied (").concat(t.state.ideas&&t.state.ideas.length||0,")")),"opened"==t.state.mobileState&&(i="Terug naar de kaart"),r=React.createElement("div",{className:"osc-mobile-switcher",onClick:function(e){return t.dispatchClickMobileSwitcher(e)}},i);var s=n.ideaName+" "+o;return n.display.onMouseOverTileFadeOthers=!0,React.createElement("div",{id:t.props.id,className:t.props.className||"osc-infobar",ref:function(e){return t.instance=e}},r,React.createElement("div",{className:"osc-info-content"},React.createElement(b.a,{config:n,selectedIdea:t.state.selectedIdea,selectedLocation:t.state.newIdea}),React.createElement(y,{config:n,ideas:t.state.ideas,maxLength:a,hideSortButton:c,title:s,ref:function(e){return t.list=e}})))}}])&&E(t.prototype,n),r&&E(t,r),i}(r.a)},,function(e,t,n){"use strict";n.r(t);n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(119),n(79));n.d(t,"default",(function(){return c.a})),n.d(t,"NLMap",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t);n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(122),n(80));n.d(t,"default",(function(){return c.a})),n.d(t,"IdeaDetails",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Preview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Preview=function(_OpenStadComponent){_inherits(Preview,_OpenStadComponent);var _super=_createSuper(Preview);function Preview(e){var t;return _classCallCheck(this,Preview),(t=_super.call(this,e,{display:{type:"idea-selection"},api:{},content:{noSelectionLoggedInHTML:'<div class="osc-infobar-default-block"><div class="osc-infobar-default-block-line osc-line-1">Klik op een plek op de kaart om een nieuw punt toe te voegen.</div><div class="osc-infobar-default-block-line osc-line-2">Selecteer een inzending op de kaart om meer informatie over de inzending te bekijken.</div><div class="osc-infobar-default-block-line osc-line-3">Bekijk hieronder de inzendingen die nu zichtbaar zijn op de kaart.</div></div>',noSelectionNotLoggedInHTML:'<div class="osc-infobar-default-block"><div class="osc-infobar-default-block-line osc-line-1">Klik op een plek op de kaart om een nieuw punt toe te voegen.</div><div class="osc-infobar-default-block-line osc-line-2">Selecteer een inzending op de kaart om meer informatie over de inzending te bekijken.</div><div class="osc-infobar-default-block-line osc-line-3">Bekijk hieronder de inzendingen die nu zichtbaar zijn op de kaart.</div></div>',selectionActiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {addButton}.",selectionInactiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",selectionActiveNotLoggedInHTML:'Niet ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {loginButton} of <a href="{loginLink}">login link</a>.',selectionInactiveNotLoggedInHTML:"Niet ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",mobilePreviewLoggedInHTML:"Een locatie vlakbij <h4>{address}</h4>{addButton}",mobilePreviewNotLoggedInHTML:'Een locatie vlakbij <h4>{address}</h4><div>Wilt u een nieuw punt toevoegen? Dan moet u eerst <a href="{loginLink}">inloggen</a>.</div>',showNoSelectionOnMobile:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content=e.config.content||{},e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(t.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(t.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),t.state={},t}return _createClass(Preview,[{key:"dispatchOnButtonIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selection-button-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchNewIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-new-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchSelectedIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selected-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchClosePreview",value:function(e,t){var n;e.stopPropagation(),"idea"==t&&(n=new window.CustomEvent("osc-set-selected-idea",{detail:null})),"location"==t&&(n=new window.CustomEvent("osc-set-selected-location",{detail:null})),document.dispatchEvent(n)}},{key:"render",value:function render(){var _this2=this,self=this;if("mobilePreview"==self.config.display.type){var contentHTML=this.config.api.isUserLoggedIn?this.config.content.mobilePreviewLoggedInHTML:this.config.content.mobilePreviewNotLoggedInHTML,_addButton=null,_loginButton=null,_loginLink=null;return this.config.api.isUserLoggedIn?this.config.idea.canAddNewIdeas&&(_addButton=React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){_this2.onClickMobileSwitcher(e),_this2.onNewIdeaClick(e)},ref:function(e){return self.newIdeaButton=e}},"Nieuw punt toevoegen")):this.config.idea.canAddNewIdeas&&(_loginButton=React.createElement("button",{onClick:function(){document.location.href="/oauth/login?returnTo="+encodeURIComponent(document.location.href)},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),_loginLink="javascript: document.location.href = '/oauth/login?returnTo=' + encodeURIComponent(document.location.href)"),contentHTML=contentHTML.replace(/\{address\}/g,this.props.selectedLocation.address||""),contentHTML=contentHTML.replace(/\{loginLink\}/g,_loginLink),contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:contentHTML,addButton:_addButton,loginButton:_loginButton}),React.createElement("div",{className:"osc-mobile-popup"},contentHTML)}var selectedLocationHTML=null,selectedIdeaHTML=null,titleAddition="",mobileSwitcherHTML=null,mobileTitle="",addButton=null,loginButton=null,loginLink=null;if(self.config.idea.canAddNewIdeas&&(addButton=self.config.types&&"typeId"==self.config.typeField?React.createElement("span",{className:"osc-new-idea-buttons"},self.config.types.map((function(e,t){var n=e;if(!n.auth||n.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,n.auth.createableBy)){var r=n?React.createElement("div",{className:"osc-button-background-image",dangerouslySetInnerHTML:{__html:n.buttonicon&&n.buttonicon.html||""}}):null;return React.createElement("button",{className:"osc-button osc-button-white"+(n&&n.auth&&n.auth.createableBy?" osc-button-required-role-is-".concat(n.auth.createableBy):""),onClick:function(e){return self.dispatchNewIdeaClick(e,{typeId:n.id||n.name})},key:"osc-button-".concat(t)},r,n&&n.buttonLabel||"Nieuw punt toevoegen")}return null}))):React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){return self.dispatchNewIdeaClick(e)}},"Nieuw punt toevoegen"),loginButton=React.createElement("button",{onClick:function(){document.location.href=_this2.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),loginLink="javascript: document.location.href = '".concat(this.config.loginUrl,"'")),self.props.selectedLocation){var _contentHTML=null;_contentHTML=self.props.selectedLocation.isPointInPolygon?self.config.api.isUserLoggedIn?self.config.content.selectionActiveLoggedInHTML:self.config.content.selectionActiveNotLoggedInHTML:self.config.api.isUserLoggedIn?self.config.content.selectionInactiveLoggedInHTML:self.config.content.selectionInactiveNotLoggedInHTML,_contentHTML=_contentHTML.replace(/\{address\}/g,self.props.selectedLocation.address||""),_contentHTML=_contentHTML.replace(/\{loginLink\}/g,loginLink),_contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:_contentHTML,addButton:addButton,loginButton:loginButton}),selectedLocationHTML=React.createElement("div",{className:"osc-infobar-new-idea"},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"location")},ref:function(e){return self.resetButton=e}}),_contentHTML),titleAddition="in de buurt",mobileTitle="Meer details en acties"}if(self.props.selectedIdea){var idea=self.props.selectedIdea,ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return e.name==ideaTypeValue||e.id==ideaTypeValue}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});var voteCountHTML=null;this.config.idea.showVoteButtons&&(voteCountHTML=React.createElement("div",{className:"osc-likes"},idea.yes||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&(argcountHTML=React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),selectedIdeaHTML=React.createElement("div",{className:"osc-infobar-selected-idea",onClick:function(e){return self.dispatchSelectedIdeaClick(e,self.props.selectedIdea)}},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"idea")},ref:function(e){return self.resetButton=e}}),React.createElement("h3",null,"Geselecteerd"),React.createElement("div",{className:"osc-infobar-selected-idea-idea"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-content"},React.createElement("h4",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.summaryField))),React.createElement("div",{className:"osc-stats"},voteCountHTML,argcountHTML,React.createElement("div",{className:"osc-type"},React.createElement("div",{className:"osc-type-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))),React.createElement("div",{className:"osc-clear-both"}))),titleAddition="in de buurt",mobileTitle="Meer details"}var defaultBlockHTML=null;if(!selectedLocationHTML&&!selectedIdeaHTML){var noSelectionHTML=self.config.content.noSelectionNotLoggedInHTML;self.config.api.isUserLoggedIn&&(noSelectionHTML=self.config.content.noSelectionLoggedInHTML),noSelectionHTML=noSelectionHTML.replace(/\{loginLink\}/g,loginLink),noSelectionHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:noSelectionHTML,addButton:addButton,loginButton:loginButton}),defaultBlockHTML=React.createElement("div",{className:"osc-infobar-default-block".concat(self.config.content.showNoSelectionOnMobile?" osc-visible-on-mobile":"")},noSelectionHTML),mobileTitle="".concat(self.config.ideaName," in dit gebied (").concat(self.state.ideas&&self.state.ideas.length||0,")")}return React.createElement("div",{className:"osc-selection-block"},defaultBlockHTML,selectedLocationHTML,selectedIdeaHTML)}}]),Preview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(77),o=function(e){return e.ideas},i=Object(r.a)([o],(function(e){return e}));Object(r.a)([o],(function(e){return e})),Object(r.a)([o],(function(e){return e}))},function(module,__webpack_exports__,__webpack_require__){"use strict";function amapsCreateClusterIcon(cluster){var self=this,count=cluster.getChildCount(),markers=cluster.getAllChildMarkers(),colors={},total=markers.length,isFaded=!1;markers.forEach((function(entry){var type=entry.data&&eval("entry.data.".concat(self.config.typeField)),tmp=self.config.types.find((function(e){return type&&(e.id==type||e.name==type)})),color=tmp&&(tmp.color||tmp.backgroundColor)||"#164995";null==type&&(type="undef"),colors[color]||(colors[color]=0),colors[color]++,entry.data&&entry.data.isFaded&&(isFaded=!0)}));var html='<svg viewBox="0 0 36 36"><circle cx="18" cy="18" r="14" fill="white"/>',soFar=0;return Object.keys(colors).forEach((function(e){var t=e,n=100*colors[e]/total;html+='  <path\n             d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"\n             fill="none"\n             transform="rotate('.concat(soFar/100*360,', 18, 18)"\n             stroke="').concat(t,'"\n             stroke-width="4"\n             stroke-dasharray="').concat(n,', 100"\n             />'),soFar+=n})),html+='<text x="18" y="21" text-anchor="middle" class="openstad-component-ideas-on-map-icon openstad-component-ideas-on-map-icon-text">'+count+"</text></svg>",L.divIcon({html:html,className:"openstad-component-ideas-on-map-icon-cluster",iconSize:L.point(36,36),iconAnchor:[18,18],isFaded:isFaded})}__webpack_require__.d(__webpack_exports__,"a",(function(){return amapsCreateClusterIcon}))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(39),o=function(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}s((o=o.apply(t,n||[])).next())}))},i=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},a=Object(r.b)("ideas/fetchIdeas",(function(e,t){var n=t.getState;return o(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return console.log("fetch ideas async"),e=n(),[4,fetch(e.config.api+"/site/"+e.config.siteId+"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1")];case 1:return[2,t.sent().json()]}}))}))}))}).call(this,n(23))},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(1),o=n(2);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(u,e);var t,n,r,i=s(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e,{name:"likebutton",backgroundColor:"#164995",color:"#fff",text:"like",opinion:"yes"})).state={value:t.props.value,busy:!1},t}return t=u,(n=[{key:"componentDidMount",value:function(e,t){o.a.localStorage.get("osc-ideas-on-map-vote-pending")&&(this.doVote(),o.a.localStorage.remove("osc-ideas-on-map-vote-pending"))}},{key:"doVote",value:function(e){var t=this;if(e&&e.stopPropagation(),!this.state.busy){this.setState({busy:!0});var n=this,r="".concat(n.config.api.url,"/api/site/").concat(n.config.siteId,"/vote"),i=o.a.api.getHeaders(n.config);if(!n.config.user||!n.config.user.role){o.a.localStorage.set("osc-ideas-on-map-vote-pending",!0);var a="/oauth/login?returnTo="+encodeURIComponent(document.location.href)+"&useOauth=anonymous";return document.location.href=a}fetch(r,{method:"post",headers:i,body:JSON.stringify({ideaId:n.props.idea.id,opinion:n.config.opinion})}).then((function(e){if(!e.ok)throw Error("Stemmen is niet gelukt");return e.json()})).then((function(e){var r=e.length?1:-1,o=n.state.value+r;n.setState({value:o}),n.props.idea.userVote=e.length&&e||null,t.setState({busy:!1});var i=new window.CustomEvent("osc-idea-liked",{detail:{ideaId:n.props.idea.id,change:r}});document.dispatchEvent(i)})).catch((function(e){alert(e.message)}))}}},{key:"render",value:function(){var e=this,t=parseInt(e.state.value)||0,n=parseInt(t/100)||0,r=parseInt((t-100*n)/10)||0,o=t-100*n-10*r;return React.createElement("div",{id:e.id,className:e.props.className||"osc-vote-button osc-number-button",ref:function(t){return e.instance=t}},React.createElement("div",{className:"osc-number-plates",style:{color:this.config.color,backgroundColor:this.config.backgroundColor}},React.createElement("div",{id:"".concat(this.config.name,"-number-plate-000"),className:"osc-number-plate"},n),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-00"),className:"osc-number-plate"},r),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-0"),className:"osc-number-plate"},o)),React.createElement("div",{className:"osc-number-button-text ".concat(this.config.name,"-name ").concat(this.props.idea.userVote?" osc-user-has-voted":""," ").concat(this.state.busy?" osc-busy":""),style:{color:this.config.color,backgroundColor:this.config.backgroundColor},onClick:function(t){return e.doVote(t)}},e.config.text),React.createElement("div",{className:"osc-clear-both"}))}}])&&a(t.prototype,n),r&&a(t,r),u}(r.a)},,function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s})),n.d(t,"OpenstadStore",(function(){return s}));var r=n(39),o=n(15),i=Object(r.c)({name:"config",initialState:{api:{}},reducers:{}}).reducer,a=n(54),c=Object(o.c)({config:i,ideas:a.b}),s=function(e){return Object(r.a)({reducer:c,preloadedState:e})}},function(e,t,n){"use strict";e.exports=n(134)},function(e,t,n){"use strict";var r=n(108),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var u=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=s(t),y=s(n),m=0;m<a.length;++m){var v=a[m];if(!(i[v]||r&&r[v]||y&&y[v]||c&&c[v])){var b=d(n,v);try{u(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return j}));var r=n(1),o=n(76),i=(n(4),n(0)),a=n.n(i);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{searchIn:["ideas","addresses"]})).config.doSearchFunction=t.config.doSearchFunction||t.doSearchx.bind(y(t)),t.state={searchValue:"",searchResult:{locations:[],ideas:[]},showSuggestions:!1},t.updateSearchResult=t.updateSearchResult.bind(y(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"handleChange",value:function(e){this.updateSearchValue(e),e.length>=3&&this.config.doSearchFunction(e,this.updateSearchResult)}},{key:"handleButtonClick",value:function(e){var t=this;t.state.searchValue&&t.setState({searchValue:""},(function(){t.inputfield.focus()}))}},{key:"updateSearchValue",value:function(e){this.setState({searchValue:e,showSuggestions:e.length>=3})}},{key:"showSuggestions",value:function(){this.setState({showSuggestions:this.state.searchValue.length>=3})}},{key:"hideSuggestions",value:function(){var e=this;setTimeout((function(){e.setState({showSuggestions:!1})}),500)}},{key:"updateSearchResult",value:function(e,t){this.setState(u(u({},this.state),{},{searchResult:t,showSuggestions:e.length>=3}))}},{key:"doSearchx",value:function(e){console.log("search function not defined")}},{key:"onSuggestionClick",value:function(e,t,n){this.updateSearchValue(e),n&&n(t)}},{key:"render",value:function(){var e=this,t=null;if(e.state.showSuggestions){var n=null;this.config.searchIn.includes("ideas")&&this.config.searchIn.includes("addresses")&&(n=a.a.createElement("div",{className:"osc-search-suggestions-hr"}));var r=null;this.config.searchIn.includes("addresses")&&(r=a.a.createElement("div",null,"Adressen:",e.state.searchResult.locations.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})}))));var o=null;this.config.searchIn.includes("ideas")&&(o=a.a.createElement("div",null,this.config.ideaName,":",e.state.searchResult.ideas.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})})))),t=a.a.createElement("div",{className:"osc-search-suggestions",ref:function(t){return e.suggestions=t}},r,n,o)}return a.a.createElement("div",{id:e.id,className:e.props.className||"osc-search",ref:function(t){return e.instance=t}},t,a.a.createElement("input",{type:"text",value:this.state.searchValue,placeholder:e.config.placeholder,onChange:function(){return e.handleChange(e.inputfield.value)},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-search-input",ref:function(t){return e.inputfield=t}}),a.a.createElement("button",{className:"osc-search-button".concat(this.state.searchValue?" osc-active":""),onClick:function(t){return e.handleButtonClick(t)},ref:function(t){return e.resetButton=t}}))}}])&&f(t.prototype,n),r&&f(t,r),i}(r.a);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(a,e);var t,n,r,i=k(a);function a(){return O(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e,t=this,n=null;t.config.search&&(n=React.createElement("div",{className:"osc-search-container"},React.createElement("div",{className:"osc-search-button",onClick:function(){return t.toggleMobileActiveSelector("search")}}),React.createElement(v,{config:_({},this.config),className:"osc-search".concat("search"==t.state.mobileActiveSelector?" osc-is-active":"")}))),e=React.createElement("button",{value:"reset",onClick:function(){return t.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,i=null;if(t.config.filter.length){var a=t.filters&&t.filters.find((function(e){return e.state.currentValue}));t.filters=[],i=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(a?" osc-active":""),onClick:function(){return t.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==t.state.mobileActiveSelector?" osc-is-active":"")},t.config.filter.map((function(e,n){return React.createElement(o.IdeasFilter,{config:e,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(e){return t.filters[n]=e}})}))),e)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},i),React.createElement("div",{className:"osc-ideas-filterbar ".concat(t.props.className||"")},n,r)}}])&&E(t.prototype,n),r&&E(t,r),a}(o.IdeasFilterbar)},function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},,,,,,,,function(e,t,n){},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){},function(e,t,n){},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasForm}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(6);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasForm=function(_OpenStadComponent){_inherits(IdeasForm,_OpenStadComponent);var _super=_createSuper(IdeasForm);function IdeasForm(props){var _this;_classCallCheck(this,IdeasForm),_this=_super.call(this,props,{user:{},ideaId:null,idea:{titleMinLength:10,titleMaxLength:20,summaryMinLength:20,summaryMaxLength:140,descriptionMinLength:140,descriptionMaxLength:5e3,fields:[]}});var self=_assertThisInitialized(_this),fields=self.config.idea.fields=_toConsumableArray(self.config.idea.fields);self.props.idea.extraData||(self.props.idea.extraData={});var state={formfields:{id:self.props.idea.id||"",user:self.props.idea.user||{}},showFormErrorsWarning:!1,isBusy:!1};fields.forEach((function(field){field.name&&(state.formfields[field.name]=eval("self.props.idea."+field.name),field.value=eval("self.props.idea."+field.name))}));var titleField=fields.find((function(e){return"title"==e.name}));titleField&&(titleField.minLength=self.config.idea.titleMinLength,titleField.maxLength=self.config.idea.titleMaxLength);var summaryField=fields.find((function(e){return"summary"==e.name}));summaryField&&(summaryField.minLength=self.config.idea.summaryMinLength,summaryField.maxLength=self.config.idea.summaryMaxLength);var descriptionField=fields.find((function(e){return"description"==e.name}));descriptionField&&(descriptionField.minLength=self.config.idea.descriptionMinLength,descriptionField.maxLength=self.config.idea.descriptionMaxLength);var imageField=fields.find((function(e){return"image-upload"==e.inputType}));if(imageField&&(imageField.imageserver=self.config.imageserver),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,"editor")){if(self.config.types&&"typeId"==self.config.typeField){var choices=[];self.config.types.forEach((function(e){var t=e;(!t.auth||t.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,t.auth.createableBy))&&choices.push({title:t.name,value:t.id||t.value})})),self.config.idea.fields.push({name:"typeId",title:"Type inzending",value:self.props.idea.typeId,inputType:"multiple-choice",choices:choices}),state.formfields.typeId=self.props.idea.typeId}self.config.idea.fields.push({name:"modBreak",title:"Moderator reactie",value:self.props.idea.modBreak,inputType:"textarea-with-counter",minLength:0,maxLength:2e3}),state.formfields.modBreak=self.props.idea.modBreak}else self.config.types&&"typeId"==self.config.typeField&&(self.config.idea.fields.push({name:"typeId",value:self.props.idea.typeId,inputType:"hidden"}),state.formfields.typeId=self.props.idea.typeId);return self.state=state,_this}return _createClass(IdeasForm,[{key:"componentDidMount",value:function(e,t){}},{key:"handleLocationChange",value:function(e){var t=e.location,n=e.address,r=_objectSpread({},this.state);r.formfields.location={coordinates:[t.lat,t.lng]},r.formfields.address=n,this.setState(r),this.dispatchUpdateEditIdea(r.formfields)}},{key:"dispatchUpdateEditIdea",value:function(e){var t=new window.CustomEvent("osc-update-edit-idea",{detail:{idea:e}});document.dispatchEvent(t)}},{key:"validateIdea",value:function(){var e=this,t=!0;return e.state.formfields.location?e["form-warning-location"].style.display="none":(console.log("xxx"),e["form-warning-location"].style.display="block",t=!1),t}},{key:"submitIdea",value:function(){var e=this,t=this;t.setState({isBusy:!0},(function(){var n=t.form.getValues(),r=t.form.validate({showErrors:!0,scrollTo:!0});if(t.validateIdea()&&r){if(t.setState({showFormErrorsWarning:!1}),!t.config.api.isUserLoggedIn)return alert("Je bent niet ingelogd");var o=t.config.api.url+"/api/site/"+t.config.siteId+"/idea",i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),a={location:JSON.stringify(_objectSpread({type:"Point"},t.state.formfields.location))};Object.keys(n).forEach((function(e){var t=e.match(/^extraData\.(.+)/);t?(a.extraData||(a.extraData={}),a.extraData[t[1]]=n[e]):a[e]=n[e]}));var c="POST";"number"==typeof e.state.formfields.id&&(c="PUT",o=o+"/"+e.state.formfields.id),fetch(o,{method:c,headers:i,body:JSON.stringify(a)}).then((function(e){if(!e.ok)throw e;return e.json()})).then((function(e){t.setState({isBusy:!1},(function(){var t=new window.CustomEvent("osc-idea-stored",{detail:{idea:e}});document.dispatchEvent(t)}))})).catch((function(e){console.log("Niet goed"),console.log(e),"function"==typeof e.json?e.json().then((function(e){return t.setState({isBusy:!1,showFormErrorsWarning:e.message})})):t.setState({isBusy:!1,showFormErrorsWarning:e.message||e})}))}else t.setState({isBusy:!1,showFormErrorsWarning:!0})}))}},{key:"render",value:function(){var e=this,t=this,n=null;if(t.state.showFormErrorsWarning){var r="Niet alle velden zijn correct ingevuld. Scroll naar boven om te zien wat er mis gaat.";"string"==typeof t.state.showFormErrorsWarning&&(r=t.state.showFormErrorsWarning),n=React.createElement("div",{className:"osc-form-errors-warning"},r)}var o;return o=React.createElement(_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__.a.Form,{config:{fields:t.config.idea.fields},values:{typeId:t.state.formfields.typeId},ref:function(e){t.form=e}}),React.createElement("div",{id:t.id,className:t.props.className||"osc-infobar-idea-form",ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("form",{className:"osc-form"},React.createElement("h1",null,"Nieuw punt toevoegen"),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Naam"),t.state.formfields.user&&t.state.formfields.user.fullName),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Een locatie vlakbij"),t.state.formfields.address||"Geen adres gevonden",React.createElement("div",{className:"osc-form-warning",style:{display:"none"},ref:function(t){return e["form-warning-location"]=t}},"Geen locatie geselecteerd")),o,React.createElement("br",null),n,React.createElement("br",null),React.createElement("a",{className:"osc-button osc-button-blue".concat(t.state.isBusy?" osc-disabled":""),onClick:function(){t.state.isBusy||t.submitIdea()},ref:function(e){return t.submitButton=e}},"Versturen"),React.createElement("br",null),React.createElement("br",null),React.createElement("br",null)))}}]),IdeasForm}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var _nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(96),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(99),redux__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(15),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(54),react_redux__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(85);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_superPropBase(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Map=function(_OpenStadComponentNLM){_inherits(Map,_OpenStadComponentNLM);var _super=_createSuper(Map);function Map(e){var t;return _classCallCheck(this,Map),(t=_super.call(this,e,{clustering:{maxClusterRadius:100,showCoverageOnHover:!1},types:[]})).config.polygon=t.config.polygon,t.config.autoZoomAndCenter=t.config.autoZoomAndCenter||"polygon",t.ideas=[],t.state={filters:{}},t}return _createClass(Map,[{key:"componentDidMount",value:function(e,t){_get(_getPrototypeOf(Map.prototype),"componentDidMount",this).call(this,e,t);var n=this;n.mapClusterAnimationEndListener=function(e){n.onMapClusterAnimationEnd(e.detail)},document.addEventListener("osc-map-cluster-animation-end",n.mapClusterAnimationEndListener),n.ideasFilterOnchangeListener=function(e){n.onChangeFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasFilterResetAllListener=function(e){n.onResetFilters(e.detail)},document.addEventListener("osc-ideas-filter-reset-all",n.ideasFilterResetAllListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-map-cluster-animation-end",this.mapClusterAnimationEndListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-filter-reset-all",this.ideasFilterResetAllListener)}},{key:"addIdea",value:function addIdea(idea){var self=this;self.ideas.push(idea);var typename=idea&&self.config.typeField?eval("idea.".concat(self.config.typeField)):"typeId",typeDef=self.config.types.find((function(e){return typename&&(e.id==typename||e.name==typename)}));typeDef||(typeDef={});var color=typeDef.color||typeDef.backgroundColor||"#164995",icondef=typeDef.mapicon||typeDef.icon||{html:'<svg viewBox="0 0 26 26"><circle cx="13" cy="13" r="13" fill="'.concat(color,'"/></svg>'),width:26,height:26,anchor:[13,13]},icon=L.divIcon({html:icondef.html,className:"osc-ideas-on-map-icon",iconSize:L.point(icondef.width,icondef.height),iconAnchor:icondef.anchor});self.addMarker({lat:idea.location.coordinates[0],lng:idea.location.coordinates[1],data:idea,icon:icon})}},{key:"getVisibleIdeas",value:function(){var e=this;console.log("??");var t=e.markers.filter((function(t){return t.visible&&t.data&&e.map.getBounds().contains(t.getLatLng())})).map((function(e){return e.data}));return e.setState({visibleIdeas:t}),t}},{key:"setSelectedLocation",value:function(e){if(this.selectedLocation=e,this.selectedLocation)if(this.selectedLocationMarker)this.updateMarker(this.selectedLocationMarker,{location:e});else{var t=L.divIcon({html:'<svg width="39" height="50" viewBox="0 0 39 50" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.1038 0C29.6577 0 38.2075 8.46671 38.2075 18.9181C38.2075 33.1786 21.7544 47.7273 21.0432 48.3035L19.1038 50L17.1643 48.3035C16.4532 47.7273 0 33.1786 0 18.9181C0 8.46831 8.54983 0 19.1038 0ZM32.3245 18.9181C32.3083 11.6837 26.4091 5.84187 19.1038 5.82586C11.7984 5.84187 5.89922 11.6837 5.88306 18.9181C5.88306 27.3367 14.1581 37.2439 19.0876 42.1095C23.1767 38.1242 32.3245 27.993 32.3245 18.9181Z" fill="#EC0000"/><path d="M19.104 5.82568C26.4093 5.84169 32.3086 11.6836 32.3247 18.9179C32.3247 27.9928 23.1769 38.124 19.0879 42.1093C14.1584 37.2437 5.8833 27.3366 5.8833 18.9179C5.89946 11.6836 11.7987 5.84169 19.104 5.82568ZM25.5689 18.9179C25.5689 15.3807 22.6759 12.5158 19.104 12.5158C15.5322 12.5158 12.6391 15.3807 12.6391 18.9179C12.6391 22.455 15.5322 25.3199 19.104 25.3199C22.6759 25.3199 25.5689 22.455 25.5689 18.9179Z" fill="white"/><path d="M19.1038 25.3202C22.6743 25.3202 25.5687 22.4539 25.5687 18.9182C25.5687 15.3824 22.6743 12.5161 19.1038 12.5161C15.5333 12.5161 12.6389 15.3824 12.6389 18.9182C12.6389 22.4539 15.5333 25.3202 19.1038 25.3202Z" fill="#EC0000"/></svg>',className:"osc-ideas-on-map-icon",iconSize:L.point(39,50),iconAnchor:[20,50]});this.selectedLocationMarker=this.addMarker(_objectSpread(_objectSpread({},e),{},{icon:t,doNotCluster:!0}))}else this.selectedLocationMarker&&this.removeMarker(this.selectedLocationMarker),this.selectedLocationMarker=null}},{key:"setBoundsAndCenter",value:function(e){_get(_getPrototypeOf(Map.prototype),"setBoundsAndCenter",this).call(this,e||"polygon"==this.config.autoZoomAndCenter&&this.config.polygon||this.markers)}},{key:"showMarkers",value:function(e){e.keepCenter;var t=this;t.markers.forEach((function(e){t.showMarker(e)}))}},{key:"hideMarkers",value:function(e){var t=e.exception,n=this;t&&t.location&&n.setBoundsAndCenter([t.location]),n.markers.forEach((function(e){t&&t.location&&t.location.lat==e._latlng.lat&&t.location.lng==e._latlng.lng||n.hideMarker(e)}))}},{key:"fadeMarkers",value:function(e){var t=e.exception,n=this;n.markers.forEach((function(e){if(t&&e.data&&e.data.id&&t.id==e.data.id)e.data&&(e.data.isFaded=!1);else{e.data&&(e.data.isFaded=!0);var r=n.markerClusterGroup&&n.markerClusterGroup.getVisibleParent(e);!(r&&r.getAllChildMarkers&&r.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded})))&&r&&r.setOpacity(.3)}}))}},{key:"updateFading",value:function(){var e=this;e.markers.forEach((function(t){var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);if(n&&t.visible){var r=n&&n.getAllChildMarkers&&n.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded}));n.setOpacity(!r&&t.data&&t.data.isFaded?.3:1)}}))}},{key:"unfadeAllMarkers",value:function(){var e=this;e.markers.forEach((function(t){t.data&&(t.data.isFaded=!1);var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);n&&n.setOpacity(1)}))}},{key:"onMapClusterAnimationEnd",value:function(){this.updateFading()}},{key:"onChangeFilter",value:function onChangeFilter(filter){var self=this,filters=self.state.filters;filters[filter.fieldName]=filter,self.setState({filters:filters},(function(){self.setFilter((function(marker){var result=!0;return Object.keys(self.state.filters).forEach((function(fieldName){var filter=self.state.filters[fieldName];filter.value&&"0"!==filter.value&&(marker.data&&!eval("marker.data.".concat(filter.fieldName))||eval("marker.data.".concat(filter.fieldName))!=filter.value)&&(result=!1)})),result}))}))}},{key:"onResetFilters",value:function(e){this.setBoundsAndCenter()}}]),Map}(_nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__.default),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_2__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_4__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(Map)},,function(e,t,n){"use strict";n.r(t);n(11),n(111);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=n(85),s=(n(135),n(107));n.d(t,"OpenstadStore",(function(){return s.default}));var u=n(91);n.d(t,"default",(function(){return u.a})),n.d(t,"IdeasOnMap",(function(){return u.a})),u.a.renderElement=function(e,t,n){var r=e.attributes;a.a.render(o.a.createElement(c.a,{store:n}," ",o.a.createElement(u.a,{attributes:r,config:t})," "),e)}},,,function(e,t,n){e.exports=n(132)()},function(e,t,n){"use strict";var r=n(133);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,_=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case v:case m:case u:return e;default:return t}}case i:return t}}}function E(e){return O(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=u,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||O(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===l},t.isContextProvider=function(e){return O(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===a},t.isLazy=function(e){return O(e)===v},t.isMemo=function(e){return O(e)===m},t.isPortal=function(e){return O(e)===i},t.isProfiler=function(e){return O(e)===s},t.isStrictMode=function(e){return O(e)===c},t.isSuspense=function(e){return O(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===c||e===h||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===l||e.$$typeof===p||e.$$typeof===g||e.$$typeof===_||e.$$typeof===w||e.$$typeof===b)},t.typeOf=O},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,