/*! For license information please see ideas-overview.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=77)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(3),o=n.n(r),i=n(0),a=n.n(i);n(75);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(this,a);var c=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var u=e.config||{};return u=v(u),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,u),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&u(t.prototype,n),r&&u(t,r),a}(a.a.Component);function v(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=v(e[t]))})),e}},function(e,t,n){"use strict";n(12),n(0),n(6),n(88);var r=n(3),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,s=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},u={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=s();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:s,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(u).includes(n)||(n="all"),u[n].includes(t)}},ideasSort:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||"random"){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":(r=r||{lat:52.37104644463586,lng:900402911007405}).coordinates&&(r.lat=r.coordinates[0],r.lng=r.coordinates[1]),t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<c;++s){var u=o[s];if("object"===i(u))for(var l in u)if("__proto__"!==l){var f=e?n.clone(u[l]):u[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(74)(e))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(22))},,function(e,t){e.exports=window.ReactDOM},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(51).Promise},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=d(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=s(e),t=u(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[s(e)]},f.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},f.prototype.set=function(e,t){this.map[s(e)]=u(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(e,t){var n,r,o=(t=t||{}).body;if(e instanceof b){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),m.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function g(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function _(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},v.call(b.prototype),v.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var e=new _(null,{status:0,statusText:""});return e.type="error",e};var w=[301,302,303,307,308];_.redirect=function(e,t){if(-1===w.indexOf(t))throw new RangeError("Invalid status code");return new _(null,{status:t,headers:{location:e}})};var O=self.DOMException;try{new O}catch(e){(O=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function S(t,n){return new e((function(e,o){var i=new b(t,n);if(i.signal&&i.signal.aborted)return o(new O("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new _(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new O("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}S.polyfill=!0,self.fetch||(self.fetch=S,self.Headers=f,self.Request=b,self.Response=_)}).call(this,n(10))},function(e,t,n){var r=n(8),o=n(14),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(15),a=n(26),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(11);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(4),o=n(13);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return m})),n.d(t,"Image",(function(){return m})),n.d(t,"IdeaImage",(function(){return j}));n(12);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(95),n(3)),s=n.n(c);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=s.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images||[];return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=u(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=u(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n,a=r*i.getAspectRatioFactor(),c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(t.prototype,n),r&&p(t,r),a}(n(1).a);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(){return g(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&_(t.prototype,n),r&&_(t,r),i}(m);j.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(j,{attributes:n,config:t}),e)}},function(e,t,n){var r=n(8),o=n(56),i=n(25),a=n(17),c=n(26),s=n(7),u=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(11);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),o=n(11),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(4),o=n(18),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(60),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(63),o=n(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(17),i=n(36).indexOf,a=n(19);e.exports=function(e,t){var n,c=o(e),s=0,u=[];for(n in c)!r(a,n)&&r(c,n)&&u.push(n);for(;t.length>s;)r(c,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(17),o=n(48),i=n(65),a=function(e){return function(t,n,a){var c,s=r(t),u=o(s.length),l=i(a,u);if(e&&n!=n){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t,n){var r=n(4),o=n(24).f,i=n(13),a=n(57),c=n(18),s=n(61),u=n(67);e.exports=function(e,t){var n,l,f,p,d,h=e.target,y=e.global,v=e.stat;if(n=y?r:v?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=o(n,l))&&d.value:n[l],!u(y?l:h+(v?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;s(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,e)}}},function(e,t,n){var r=n(50),o=n(70),i=n(14),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),a=Object.defineProperty,c={},s=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],u=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:s,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(u&&!r)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:s}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(4),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},,function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(68);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4),o=n(32),i=n(7),a=n(33),c=n(38),s=n(69),u=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(c&&i(l,e)?u[e]=l[e]:u[e]=f("Symbol."+e)),u[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,s=function(e,t){y[i]=e,y[i+1]=t,2===(i+=2)&&(c?c(v):w())},u="undefined"!=typeof window?window:void 0,l=u||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(v,1)}}var y=new Array(1e3);function v(){for(var e=0;e<i;e+=2)(0,y[e])(y[e+1]),y[e]=void 0,y[e+1]=void 0;i=0}var m,b,g,_,w=void 0;function O(e,t){var n=arguments,r=this,o=new this.constructor(j);void 0===o[E]&&B(o);var i,a=r._state;return a?(i=n[a-1],s((function(){return F(a,o,i,r._result)}))):L(r,o,e,t),o}function S(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(j);return I(t,e),t}p?w=function(){return t.nextTick(v)}:f?(b=0,g=new f(v),_=document.createTextNode(""),g.observe(_,{characterData:!0}),w=function(){_.data=b=++b%2}):d?((m=new MessageChannel).port1.onmessage=v,w=function(){return m.port2.postMessage(0)}):w=void 0===u?function(){try{var e=n(53);return a=e.runOnLoop||e.runOnContext,function(){a(v)}}catch(e){return h()}}():h();var E=Math.random().toString(36).substring(16);function j(){}var P=void 0,x=new N;function R(e){try{return e.then}catch(e){return x.error=e,x}}function T(t,n,r){n.constructor===t.constructor&&r===O&&n.constructor.resolve===S?function(e,t){1===t._state?A(e,t._result):2===t._state?C(e,t._result):L(t,void 0,(function(t){return I(e,t)}),(function(t){return C(e,t)}))}(t,n):r===x?C(t,x.error):void 0===r?A(t,n):e(r)?function(e,t,n){s((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?I(e,n):A(e,n))}),(function(t){r||(r=!0,C(e,t))}),e._label);!r&&o&&(r=!0,C(e,o))}),e)}(t,n,r):A(t,n)}function I(e,t){var n;e===t?C(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?T(e,t,R(t)):A(e,t)}function k(e){e._onerror&&e._onerror(e._result),M(e)}function A(e,t){e._state===P&&(e._result=t,e._state=1,0!==e._subscribers.length&&s(M,e))}function C(e,t){e._state===P&&(e._state=2,e._result=t,s(k,e))}function L(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&s(M,e)}function M(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?F(n,r,o,i):o(i);e._subscribers.length=0}}function N(){this.error=null}var D=new N;function F(t,n,r,o){var i=e(r),a=void 0,c=void 0,s=void 0,u=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return D.error=e,D}}(r,o))===D?(u=!0,c=a.error,a=null):s=!0,n===a)return void C(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,s=!0;n._state!==P||(i&&s?I(n,a):u?C(n,c):1===t?A(n,a):2===t&&C(n,a))}var V=0;function B(e){e[E]=V++,e._state=void 0,e._result=void 0,e._subscribers=[]}function U(e,t){this._instanceConstructor=e,this.promise=new e(j),this.promise[E]||B(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?A(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&A(this.promise,this._result))):C(this.promise,new Error("Array Methods must be provided an Array"))}function H(e){this[E]=V++,this._result=this._state=void 0,this._subscribers=[],j!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof H?function(e,t){try{t((function(t){I(e,t)}),(function(t){C(e,t)}))}catch(t){C(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function z(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=H}return U.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===P&&n<e;n++)this._eachEntry(t[n],n)},U.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===S){var o=R(e);if(o===O&&e._state!==P)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===H){var i=new n(j);T(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},U.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===P&&(this._remaining--,2===e?C(r,n):this._result[t]=n),0===this._remaining&&A(r,this._result)},U.prototype._willSettleAt=function(e,t){var n=this;L(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},H.all=function(e){return new U(this,e).promise},H.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},H.resolve=S,H.reject=function(e){var t=new this(j);return C(t,e),t},H._setScheduler=function(e){c=e},H._setAsap=function(e){s=e},H._asap=s,H.prototype={constructor:H,then:O,catch:function(e){return this.then(null,e)}},z(),H.polyfill=z,H.Promise=H,H},e.exports=o()}).call(this,n(52),n(22))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function p(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},,,function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(4),o=n(13),i=n(7),a=n(18),c=n(29),s=n(58),u=s.get,l=s.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var s=!!c&&!!c.unsafe,u=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(s?!p&&e[t]&&(u=!0):delete e[t],u?e[t]=n:o(e,t,n)):u?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(59),c=n(4),s=n(11),u=n(13),l=n(7),f=n(31),p=n(19),d=c.WeakMap;if(a){var h=new d,y=h.get,v=h.has,m=h.set;r=function(e,t){return m.call(h,e,t),t},o=function(e){return y.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var b=f("state");p[b]=!0,r=function(e,t){return u(e,b,t),t},o=function(e){return l(e,b)?e[b]:{}},i=function(e){return l(e,b)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(4),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(62),i=n(24),a=n(14);e.exports=function(e,t){for(var n=o(t),c=a.f,s=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||c(e,l,s(t,l))}}},function(e,t,n){var r=n(34),o=n(64),i=n(66),a=n(15);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(35),o=n(20).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==u||n!=s&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(15),i=n(71),a=n(20),c=n(19),s=n(73),u=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=u("iframe")).style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(14),i=n(15),a=n(72);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,s=0;c>s;)o.f(e,n=r[s++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(20);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(76);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return z})),n.d(t,"IdeasList",(function(){return v})),n.d(t,"IdeasOverview",(function(){return z})),n.d(t,"IdeasFilterbar",(function(){return P})),n.d(t,"IdeasFilter",(function(){return m.a})),n.d(t,"IdeasSort",(function(){return C})),n.d(t,"IdeasSearch",(function(){return b.a}));n(12);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(128),n(1)),s=n(2),u=n(96);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,e);var t,n,r,o=d(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{title:"Inzendingen",type:"tiles",columns:3,onMouseOverTileFadeOthers:!1},idea:{titleField:"title",summaryField:"summary"},sort:{sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"}],showSort:!0,defaultValue:"createdtime,desc"},types:[]})).state={highLightIdeaId:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideaTileMouseOverListener=function(e){n.onTileMouseOver(e.detail)},document.addEventListener("osc-idea-tile-mouse-over",n.ideaTileMouseOverListener),n.ideaTileMouseOutListener=function(e){n.onTileMouseOut(e.detail)},document.addEventListener("osc-idea-tile-mouse-out",n.ideaTileMouseOutListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-idea-tile-mouse-over",this.ideaTileMouseOverListener),document.removeEventListener("osc-idea-tile-mouse-out",this.ideaTileMouseOutListener)}},{key:"onTileMouseOver",value:function(e){var t=e.idea;this.setState({highLightIdeaId:t.id})}},{key:"onTileMouseOut",value:function(e){e.idea,this.setState({highLightIdeaId:null})}},{key:"render",value:function(){var e=this,t=this,n=t.props.ideas||[];return React.createElement("div",{className:"osc-tile-list-container ".concat(t.props.className||"")},React.createElement("div",{className:"osc-tile-list"},n.map((function(n,r){return React.createElement(u.a,{config:t.config,idea:n,className:"osc-".concat(t.config.display.columns,"-columns").concat(e.config.display.onMouseOverTileFadeOthers&&t.state.highLightIdeaId&&t.state.highLightIdeaId!=n.id?" osc-opacity-65":""),key:"osc-idea-tile-".concat(n.id)})}))))}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a),m=n(86),b=n(87);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?E(e):t}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{}})).doNextPendingResetAction=t.doNextPendingResetAction.bind(E(t)),t.state={pendingResetActions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasSearchOnchangeListener=function(e){n.doNextPendingResetAction()},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasFilterOnchangeListener=function(e){n.hideMobileActiveSelector(),n.doNextPendingResetAction()},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener)}},{key:"toggleMobileActiveSelector",value:function(e){this.state.mobileActiveSelector!=e?this.showMobileActiveSelector(e):this.hideMobileActiveSelector()}},{key:"showMobileActiveSelector",value:function(e){this.setState({mobileActiveSelector:e})}},{key:"hideMobileActiveSelector",value:function(){this.setState({mobileActiveSelector:null})}},{key:"resetAll",value:function(){var e=this;e.search&&e.state.pendingResetActions.push(e.search.setSearch),e.filters&&e.filters.forEach((function(t){e.state.pendingResetActions.push(t.setFilter)}));var t=new window.CustomEvent("osc-ideas-filter-reset-all",{detail:{}});document.dispatchEvent(t),e.doNextPendingResetAction()}},{key:"doNextPendingResetAction",value:function(){var e=this.state.pendingResetActions.shift();e&&e({value:""})}},{key:"render",value:function(){var e=this;if(!(void 0!==e.props.showFilterbar?e.props.showFilterbar:e.config.display.showFilterbar))return null;var t,n=null;e.config.search&&(n=React.createElement("div",{className:"osc-ideas-search-container"},React.createElement("div",{className:"osc-ideas-search-button",onClick:function(){return e.toggleMobileActiveSelector("search")}}),React.createElement(b.a,{config:e.config.search,className:"".concat("search"==e.state.mobileActiveSelector?" osc-is-active":""),ref:function(t){return e.search=t}}))),t=React.createElement("button",{value:"reset",onClick:function(){return e.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,o=null;if(e.config.filter.length){var i=e.filters&&e.filters.find((function(e){return e.state.currentValue}));e.filters=[],o=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(i?" osc-active":""),onClick:function(){return e.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==e.state.mobileActiveSelector?" osc-is-active":"")},e.config.filter.map((function(t,n){return React.createElement(m.a,{config:t,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(t){return e.filters[n]=t}})}))),t)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},o),React.createElement("div",{className:"osc-ideas-filterbar ".concat(e.props.className||"")},n,r)}}])&&_(t.prototype,n),r&&_(t,r),i}(c.a);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=A(e);if(t){var o=A(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==x(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,e);var t,n,r,o=I(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{label:null,sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"},{value:"title",label:"Titel"},{value:"random",label:"Willekeurig"},{value:"likes,desc",label:"Meeste likes"},{value:"likes,asc",label:"Minste likes"},{value:"args,desc",label:"Meeste reacties"},{value:"args,asc",label:"Minste reacties"},{value:"ranking,asc",label:"Ranglijst"}],defaultValue:"createdtime,desc",showSort:!0,center:{latitude:52.37104644463586,longitude:4.900402911007405}})).state={currentValue:t.config.defaultValue},t}return t=i,(n=[{key:"doSort",value:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;return n=n||this.state.currentValue,r=r||this.config.center,s.a.ideasSort({ideas:t,sortOrder:n,center:r})}},{key:"setSortOrder",value:function(e){var t=e.sortOrder,n=this.props.ideas||[];n=this.doSort({ideas:n,sortOrder:t}),this.setState({ideas:n,currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-sort-onchange",{detail:n});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(e.props.ideas,!(void 0!==e.props.showSort?e.props.showSort:e.config.showSort))return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-sort-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-sort ".concat(e.props.className||"")},t,React.createElement("select",{defaultValue:e.state.currentValue,onChange:function(){return e.setSortOrder({sortOrder:e.sortSelector.value})},className:"osc-default-select",ref:function(t){return e.sortSelector=t}},e.config.sortOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"sort-option-"+t},e.label)}))))}}])&&R(t.prototype,n),r&&R(t,r),i}(c.a);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=H(e);if(t){var o=H(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=B(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,title:"Inzendingen",display:{showFilterbar:!0},idea:{titleField:"title",summaryField:"summary"},sort:{showSort:!0,defaultValue:"createdtime,desc"},filter:[],types:[],typeLabel:"Thema"})).state={ideas:t.props.ideas||[],filters:{},search:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasFilterOnchangeListener=function(e){n.updateFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasSearchOnchangeListener=function(e){n.updateSearch(e.detail)},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasSortOnchangeListener=function(e){n.updateSort(e.detail)},document.addEventListener("osc-ideas-sort-onchange",n.ideasSortOnchangeListener),void 0===n.props.ideas&&n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-sort-onchange",this.ideasSortOnchangeListener)}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea?summary=1&includeVoteCount=1&includeArgsCount=1"),n=s.a.api.getHeaders(e.config);fetch(t,{headers:n}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;n=e.sorter.doSort({ideas:n}),e.setState({ideas:n},(function(){}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"updateFilter",value:function(e){var t=N({},this.state.filters);e.value?t[e.fieldName]={value:e.value,doFilter:e.doFilter}:delete t[e.fieldName],this.setState({filters:t})}},{key:"updateSearch",value:function(e){e=e.value?{value:e.value,doSearch:e.doSearch}:null,this.setState({search:e})}},{key:"updateSort",value:function(e){this.setState({ideas:e})}},{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=t;Object.keys(e.state.filters).forEach((function(t){var r=e.state.filters[t];n=r.doFilter(n)})),e.state.search&&(n=e.state.search.doSearch(n)),this.props.maxLength&&(n=t.slice(0,this.props.maxLength));var r=React.createElement("h3",{className:"osc-title"},e.config.title," (",n.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(P,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(C,{config:N({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),r,React.createElement(v,{config:e.config,ideas:n,className:""}))}}])&&F(t.prototype,n),r&&F(t,r),i}(c.a);z.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(z,{attributes:n,config:t}),e)}},,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasFilter}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasFilter=function(_OpenStadComponent){_inherits(IdeasFilter,_OpenStadComponent);var _super=_createSuper(IdeasFilter);function IdeasFilter(e){var t;return _classCallCheck(this,IdeasFilter),(t=_super.call(this,e)).doFilter=t.doFilter.bind(_assertThisInitialized(t)),t.setFilter=t.setFilter.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasFilter,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doFilter",value:function doFilter(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var fieldName=self.config.fieldName,fieldValue=eval("idea.".concat(fieldName));return fieldValue==value})),ideas}},{key:"setFilter",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-filter-onchange",{detail:{fieldName:n.config.fieldName,value:t,doFilter:n.doFilter}});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(0==e.config.showFilter)return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-filter-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-filter ".concat(e.props.className||"")},t,React.createElement("select",{value:e.state.currentValue,onChange:function(){return e.setFilter({value:e.filterSelector.value})},className:"osc-default-select",ref:function(t){return e.filterSelector=t}},e.config.filterOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"filter-option-"+t},e.label)}))))}}]),IdeasFilter}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasSearch}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasSearch=function(_OpenStadComponent){_inherits(IdeasSearch,_OpenStadComponent);var _super=_createSuper(IdeasSearch);function IdeasSearch(e){var t;return _classCallCheck(this,IdeasSearch),(t=_super.call(this,e,{placeholder:"Zoeken",fieldNames:["title","summary"],showSearch:!0,showButton:!1,showSuggestions:!1,defaultValue:""})).doSearch=t.doSearch.bind(_assertThisInitialized(t)),t.setSearch=t.setSearch.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasSearch,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doSearch",value:function doSearch(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var found=!1;return self.config.fieldNames.forEach((function(fieldName){var fieldValue=eval("idea.".concat(fieldName));fieldValue.match(new RegExp(value,"i"))&&(found=!0)})),found})),ideas}},{key:"setSearch",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-search-onchange",{detail:{value:t,doSearch:n.doSearch}});document.dispatchEvent(e)}))}},{key:"showSuggestions",value:function(){}},{key:"hideSuggestions",value:function(){}},{key:"render",value:function(){var e=this;if(0==e.config.showSearch)return null;var t=null;e.config.label&&(t=React.createElement("div",{className:"osc-search-label"},e.config.label,":"));return React.createElement("div",{className:"osc-ideas-search ".concat(e.props.className||"")},t,null,React.createElement("input",{type:"text",value:this.state.currentValue,placeholder:e.config.placeholder,onChange:function(){return e.setSearch({value:e.searchInput.value})},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-ideas-search-input",ref:function(t){return e.searchInput=t}}),React.createElement("button",{className:"osc-ideas-search-button".concat(this.state.currentValue?" osc-active":""),onClick:function(t){return e.setSearch({value:""})},ref:function(t){return e.resetButton=t}}))}}]),IdeasSearch}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){},,,,,,,function(e,t,n){},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasOverview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(23);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasOverview=function(_OpenStadComponent){_inherits(IdeasOverview,_OpenStadComponent);var _super=_createSuper(IdeasOverview);function IdeasOverview(e){var t;_classCallCheck(this,IdeasOverview);var n={idea:{showVoteButtons:!0,titleField:"title",summaryField:"summary"},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},vote:{isViewable:!0,voteValues:[{value:"yes"},{value:"no"}]},types:[],typeField:"typeId"};switch(e.config.display&&e.config.display.type){case"list":n.display={columns:1,showStatusLabel:!1,showTheme:!1,showArea:!1,showVoteProgressbar:!1,showStats:!0,showTypeIcon:!0};break;case"grid":n.display={columns:3,showStatusLabel:!1,showTheme:!0,showArea:!0,showVoteProgressbar:!1,showStats:!1,showTypeIcon:!1};break;default:n.display={type:"tiles",columns:4,showStatusLabel:!0,showTheme:!1,showArea:!1,showVoteProgressbar:!0,showStats:!0,showTypeIcon:!1}}return(t=_super.call(this,e,n)).state={idea:t.props.idea||{}},t}return _createClass(IdeasOverview,[{key:"dispatchIdeaTileClick",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOver",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-over",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOut",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-out",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"render",value:function render(){var self=this,idea=self.state.idea,statusLabelHTML=null;self.config.display.showStatusLabel;var themeAndAreaHTML=null;if(self.config.display.showTheme||self.config.display.showArea){var areaHTML=null;self.config.display.showArea&&idea.extraData.area&&(areaHTML=React.createElement("div",{className:"osc-area"},idea.extraData.area)),themeAndAreaHTML=React.createElement("div",{className:"osc-theme-and-area"},self.config.display.showTheme&&idea.extraData.theme&&React.createElement("div",{className:"osc-theme"},idea.extraData.theme),self.config.display.showTheme&&idea.extraData.theme&&self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-divider"}),self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-area"},idea.extraData.area))}var statsHTML=null;if(self.config.display.showStats){var stats=[];this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"yes"===e.value}))&&stats.push(React.createElement("div",{className:"osc-yes-votes"},idea.yes||0)),this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"no"===e.value}))&&stats.push(React.createElement("div",{className:"osc-no-votes"},idea.no||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&stats.push(React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),statsHTML=React.createElement("div",{className:"osc-idea-stats-container"},stats.map((function(e,t){return React.createElement("div",{className:"osc-stat",key:"osc-stat-".concat(idea.id,"-").concat(t)},e)})))}var voteProgressHTML=null;self.config.display.showVoteProgressbar&&(voteProgressHTML=React.createElement("div",null,"GENOEGSTEMMNBALK"));var typeIconHTML=null;if(self.config.display.showTypeIcon){var ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return ideaTypeValue&&(e.id==ideaTypeValue||e.name==ideaTypeValue)}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});try{"string"==typeof typeDef.listicon&&(typeDef.listicon=JSON.parse(typeDef.listicon))}catch(e){}typeDef.listicon.html&&(typeIconHTML=React.createElement("div",{className:"osc-typeicon"},React.createElement("div",{className:"osc-typeicon-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))}return React.createElement("div",{id:self.divId,className:"osc-idea-tile osc-displaytype-".concat(self.config.display.type," ").concat(self.props.className||""),onClick:function(e){return self.dispatchIdeaTileClick(e,idea)},onMouseOver:function(e){return self.dispatchIdeaTileMouseOver(e,idea)},onMouseOut:function(e){return self.dispatchIdeaTileMouseOut(e,idea)}},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-idea-tile-content"},statusLabelHTML,React.createElement("h4",{className:"osc-title"},eval("idea.".concat(self.config.idea.titleField))),themeAndAreaHTML,React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.idea.summaryField))),voteProgressHTML,statsHTML),typeIconHTML)}}]),IdeasOverview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,