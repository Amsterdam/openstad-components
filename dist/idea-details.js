/*! For license information please see idea-details.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=97)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var o=n(4),r=n.n(o),i=n(0),c=n.n(i);n(74);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=h(e);if(t){var r=h(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(c,e);var t,n,o,i=f(c);function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,c);var a=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];a[n.name]=n.value})),"string"==typeof a.config)try{a.config=JSON.parse(a.config)}catch(e){}var s=e.config||{};return s=m(s),a.config=r.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,o,s),a.divId=a.divId||a.config&&a.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[a.divId]=a,t}return t=c,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),o&&s(t,o),c}(c.a.Component);function m(e){return"object"!=a(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==a(e[t])&&(e[t]=m(e[t]))})),e}},function(e,t,n){"use strict";n(11),n(0),n(5),n(83);var o=n(4),r=n.n(o);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var c={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},a=c,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],a.set("osc-jwt",t);var o=document.location.search.replace("jwt="+t,"");"?"==o&&(o=""),document.location.search=o}return t=a.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,a.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=r.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=r.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||a.get("osc-user");if(n)return t(null,n);var o=u(e);if(!o)return t(null,{});var r="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(o),"Content-Type":"application/json"};fetch(r,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||a.get("osc-user");if(n)return t(null,n);var o=u(e);if(!o)return t(null,{});var r=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(r,{headers:{"X-Authorization":"Bearer "+o,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},localStorage:f,sessionStorage:a,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,o=arguments[0];delete o.html;var r=0;return Object.keys(o).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(r++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),o[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==r&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t,n){(function(e){!function(t){var n=function(e){return r(!0===e,!1,arguments)};function o(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=o(e[n],t[n]):e[n]=t[n];return e}function r(e,t,r){var c=r[0],a=r.length;(e||"object"!==i(c))&&(c={});for(var u=0;u<a;++u){var s=r[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];c[l]=t?o(c[l],f):f}}return c}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return r(!0===e,!0,arguments)},n.clone=function(e){var t,o,r=e,c=i(e);if("array"===c)for(r=[],o=e.length,t=0;t<o;++t)r[t]=n.clone(e[t]);else if("object"===c)for(t in r={},e)r[t]=n.clone(e[t]);return r},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(73)(e))},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";n(11),n(0),n(5),n(88);var o=n(1);n(2);function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=f(e);if(t){var r=f(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(s,e);var t,n,o,r=u(s);function s(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,s);var o=l(t=r.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return o.state={value:e.value,error:null},t.onChange=e.onChange,t}return t=s,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,o="";return!n&&t&&(o=!0),this.setState({isValid:n,error:o}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&c(t.prototype,n),o&&c(t,o),s}(o.a);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=b(e);if(t){var r=b(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,o,r=v(i);function i(){return h(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&y(t.prototype,n),o&&y(t,o),i}(p);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=j(e);if(t){var r=j(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,o,r=R(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=r.call(this,e,{allowMultiple:!1,imageserver:{process:"",fetch:""}});var n=[];return(e.value||[]).forEach((function(e){n.push({source:{url:e},options:{type:"local",file:{name:e},metadata:{poster:e}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this._loadedFiles=0,this.files=["https://unpkg.com/filepond/dist/filepond.js","https://unpkg.com/filepond-polyfill/dist/filepond-polyfill.js","https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js","https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js","https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js","https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.js"],this.loadNextFile()}},{key:"loadNextFile",value:function(){var e,t=this,n=t.files[t._loadedFiles];n&&((e=document.createElement("script")).src=n,e.async=!0,e&&(e.onload=function(){t.loadNextFile()},document.body.appendChild(e))),t._loadedFiles==t.files.length&&t.fileUploaderInit(),t._loadedFiles++}},{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"fileUploaderInit",value:function(){var e=this,t=document.querySelector(".osc-image-upload-container");if(t){FilePond.registerPlugin(FilePondPluginImagePreview),FilePond.registerPlugin(FilePondPluginFileValidateSize),FilePond.registerPlugin(FilePondPluginFileValidateType),FilePond.registerPlugin(FilePondPluginFilePoster);var n={acceptedFileTypes:["image/*"],allowFileSizeValidation:!0,allowMultiple:this.config.allowMultiple,allowReorder:!0,styleItemPanelAspectRatio:1,maxFileSize:"8mb",name:"image",maxFiles:5,allowBrowse:!0,files:this.state.uploadedFiles,server:{process:this.config.imageserver.process,fetch:this.config.imageserver.fetch},imageResizeTargetWidth:80,imageResizeTargetHeight:80,imageCropAspectRatio:"1:1",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"};e.imageuploader=FilePond.create(t,n),document.querySelector(".filepond--root"),document.querySelector(".filepond--root").addEventListener("FilePond:processfile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),document.querySelector(".filepond--root").addEventListener("FilePond:removefile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),e.state.formfields&&e.imageuploader.addFiles(e.state.formfields.images)}}},{key:"fileUploaderUpdateCurrentInput",value:function(){var e=this;e.state.value=[],this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){try{var n="string"==typeof t.serverId?JSON.parse(t.serverId):t.serverId;e.state.value.push(n.url)}catch(e){console.log(e)}})),e.props.onChange({name:e.config.name,value:e.state.value})}},{key:"fileUploaderUploaderAddImages",value:function(e){this.imageuploader&&this.imageuploader.addFiles(e)}},{key:"render",value:function(){var e=null;return this.state.error&&(e=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen afbeelding geupload")),React.createElement("div",{className:"osc-image-upload-container"},React.createElement("input",{type:"file",className:"imageUploader-gebiedstool filepond-gebiedstool"}),e)}}])&&O(t.prototype,n),o&&O(t,o),i}(p);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=L(e);if(t){var r=L(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return T(this,n)}}function T(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?D(e):t}function D(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(i,e);var t,n,o,r=x(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(D(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&C(t.prototype,n),o&&C(t,o),i}(o.a);function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=V(e);if(t){var r=V(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return B(this,n)}}function B(e,t){return!t||"object"!==M(t)&&"function"!=typeof t?H(e):t}function H(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(i,e);var t,n,o,r=U(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=H(t=r.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(H(t)),n.onInputFocus=n.onInputFocus.bind(H(t)),n.onInputBlur=n.onInputBlur.bind(H(t)),n.onInputKeyUp=n.onInputKeyUp.bind(H(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,o=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var r=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+r},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(o=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(N,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,o))}}])&&A(t.prototype,n),o&&A(t,o),i}(o.a);function W(e){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function K(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function J(e,t){return(J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Q(e);if(t){var r=Q(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return G(this,n)}}function G(e,t){return!t||"object"!==W(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Q(e){return(Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var X=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(i,e);var t,n,o,r=$(i);function i(){return z(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&K(t.prototype,n),o&&K(t,o),i}(p);function Z(e){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=re(e);if(t){var r=re(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==Z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function re(e){return(re=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(i,e);var t,n,o,r=ne(i);function i(){return Y(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,o="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(o="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(o="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:o}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ee(t.prototype,n),o&&ee(t,o),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=pe(e);if(t){var r=pe(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return fe(this,n)}}function fe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function pe(e){return(pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var de=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(i,e);var t,n,o,r=le(i);function i(){return ae(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e){return React.createElement("option",{value:e.value||"",key:e.value},e.description||e.title||e.value)}))),t)}}])&&ue(t.prototype,n),o&&ue(t,o),i}(p);function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function me(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function ve(e,t){return(ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ge(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=we(e);if(t){var r=we(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==he(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _e=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ve(e,t)}(i,e);var t,n,o,r=ge(i);function i(){return ye(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&me(t.prototype,n),o&&me(t,o),i}(p);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Re(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Se(e,t){return(Se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=ke(e);if(t){var r=ke(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Se(e,t)}(i,e);var t,n,o,r=je(i);function i(){return Ee(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Re(t.prototype,n),o&&Re(t,o),i}(p);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function Te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){De(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Le(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Me(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Ue(e);if(t){var r=Ue(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Ae(this,n)}}function Ae(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?Fe(e):t}function Fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ue(e){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Be=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,o,r=Me(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Fe(t=r.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.value||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var o=null;switch(e.config.inputType){case"hidden":o=React.createElement(w,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":o=React.createElement(q,{config:Te(Te({},e.config),{},{inputType:"htmlarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":o=React.createElement(P,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":o=React.createElement(q,{config:Te({inputType:"input"},e.config),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":o=React.createElement(ie,{config:e.config,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":o=React.createElement(X,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":o=React.createElement(de,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":o=React.createElement(_e,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":o=React.createElement(Ce,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":o=React.createElement(q,{config:Te(Te({},e.config),{},{inputType:"textarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}})}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,o)}}])&&Le(t.prototype,n),o&&Le(t,o),i}(o.a);function He(e){return(He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function We(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Ge(e);if(t){var r=Ge(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Je(this,n)}}function Je(e,t){return!t||"object"!==He(t)&&"function"!=typeof t?$e(e):t}function $e(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Qe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(i,e);var t,n,o,r=Ke(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=$e(t=r.call(this,e,{title:null,intro:null,fields:[]}));return n.state={values:e.values||{}},n.handleOnChange=n.handleOnChange.bind($e(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,o=!0,r=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(o=!1,r||(r=e))})),n&&r&&r.instance&&r.instance.scrollIntoView&&r.instance.scrollIntoView({behavior:"smooth"}),o}},{key:"handleOnChange",value:function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ve(Object(n),!0).forEach((function(t){qe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);t[e.name]=e.value,this.setState({values:t})}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var o=null;return e.config.fields&&e.config.fields.length&&(o=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Be,qe({config:t,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,o)}}])&&We(t.prototype,n),o&&We(t,o),i}(o.a);function Xe(e){return(Xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ze(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Ye(e,t){return(Ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=ot(e);if(t){var r=ot(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return tt(this,n)}}function tt(e,t){return!t||"object"!==Xe(t)&&"function"!=typeof t?nt(e):t}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var rt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ye(e,t)}(i,e);var t,n,o,r=et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(nt(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,o=t.touched,r=e.props,i=r.min,c=r.max,a=r.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,c,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:c,step:a,value:n,onClick:function(){o||e.doTouch()},onChange:e.handleChange,className:o?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&Ze(t.prototype,n),o&&Ze(t,o),i}(o.a);t.a={Form:Qe,FormField:Be,Hidden:w,ImageUpload:P,InputWithCounter:q,Postcode:ie,Radios:X,Select:de,Text:_e,Textarea:Ce,Slider:rt}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var o=n(9);e.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,o="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),r="FormData"in self,i="ArrayBuffer"in self;if(i)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:o&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:r&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&o&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||a(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,o,r=p(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,o=d(n),n.readAsText(t),o;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),o=0;o<t.length;o++)n[o]=String.fromCharCode(t[o]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},r&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(e,t){var n,o,r=(t=t||{}).body;if(e instanceof g){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",o=n.toUpperCase(),v.indexOf(o)>-1?o:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),o=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(o),decodeURIComponent(r))}})),t}function w(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},m.call(g.prototype),m.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var _=[301,302,303,307,308];w.redirect=function(e,t){if(-1===_.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})};var O=self.DOMException;try{new O}catch(e){(O=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function E(t,n){return new e((function(e,r){var i=new g(t,n);if(i.signal&&i.signal.aborted)return r(new O("Aborted","AbortError"));var c=new XMLHttpRequest;function a(){c.abort()}c.onload=function(){var t,n,o={status:c.status,statusText:c.statusText,headers:(t=c.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),o=t.shift().trim();if(o){var r=t.join(":").trim();n.append(o,r)}})),n)};o.url="responseURL"in c?c.responseURL:o.headers.get("X-Request-URL");var r="response"in c?c.response:c.responseText;e(new w(r,o))},c.onerror=function(){r(new TypeError("Network request failed"))},c.ontimeout=function(){r(new TypeError("Network request failed"))},c.onabort=function(){r(new O("Aborted","AbortError"))},c.open(i.method,i.url,!0),"include"===i.credentials?c.withCredentials=!0:"omit"===i.credentials&&(c.withCredentials=!1),"responseType"in c&&o&&(c.responseType="blob"),i.headers.forEach((function(e,t){c.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",a),c.onreadystatechange=function(){4===c.readyState&&i.signal.removeEventListener("abort",a)}),c.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=f,self.Request=g,self.Response=w)}).call(this,n(23))},function(e,t,n){var o=n(8),r=n(13),i=n(25);e.exports=o?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var o=n(8),r=n(27),i=n(14),c=n(26),a=Object.defineProperty;t.f=o?a:function(e,t,n){if(i(e),t=c(t,!0),i(n),r)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var o=n(10);e.exports=function(e){if(!o(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var o=n(45),r=n(47);e.exports=function(e){return o(r(e))}},function(e,t,n){var o=n(3),r=n(12);e.exports=function(e,t){try{r(o,e,t)}catch(n){o[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return v})),n.d(t,"Image",(function(){return v})),n.d(t,"IdeaImage",(function(){return S}));n(11);var o=n(0),r=n.n(o),i=n(5),c=n.n(i),a=(n(89),n(4)),u=n.n(a);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],o=!0,r=!1,i=void 0;try{for(var c,a=e[Symbol.iterator]();!(o=(c=a.next()).done)&&(n.push(c.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=m(e);if(t){var r=m(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(c,e);var t,n,o,i=h(c);function c(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);return(t=i.call(this,e)).config=u.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=c,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images;return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,o,i=this,c=s(i.getImagesFromProps(),2);t=c[0],e=c[1];var a=s(i.getWidthHeight(),2);return n=a[0],o=a[1],i.config.allowMultipleImages&&e.length>1?r.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},r.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:o}},r.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),r.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var o=.1*n;console.log(o);var c=o*i.getAspectRatioFactor();console.log(c);var a=1.05*c*t;return r.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:a,width:c,height:o}},r.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):r.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:o}},r.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(t.prototype,n),o&&p(t,o),c}(n(1).a);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function w(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=R(e);if(t){var r=R(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return E(this,n)}}function E(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(i,e);var t,n,o,r=O(i);function i(){return b(this,i),r.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&w(t.prototype,n),o&&w(t,o),i}(v);S.renderElement=function(e,t){var n=e.attributes;c.a.render(r.a.createElement(S,{attributes:n,config:t}),e)}},function(e,t,n){e.exports=n(51).Promise},function(e,t,n){var o=n(8),r=n(55),i=n(25),c=n(16),a=n(26),u=n(7),s=n(27),l=Object.getOwnPropertyDescriptor;t.f=o?l:function(e,t){if(e=c(e),t=a(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!r.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var o=n(10);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var o=n(8),r=n(9),i=n(28);e.exports=!o&&!r((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var o=n(3),r=n(10),i=o.document,c=r(i)&&r(i.createElement);e.exports=function(e){return c?i.createElement(e):{}}},function(e,t,n){var o=n(30),r=Function.toString;"function"!=typeof o.inspectSource&&(o.inspectSource=function(e){return r.call(e)}),e.exports=o.inspectSource},function(e,t,n){var o=n(3),r=n(17),i="__core-js_shared__",c=o[i]||r(i,{});e.exports=c},function(e,t,n){var o=n(32),r=n(33),i=o("keys");e.exports=function(e){return i[e]||(i[e]=r(e))}},function(e,t,n){var o=n(59),r=n(30);(e.exports=function(e,t){return r[e]||(r[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:o?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+o).toString(36)}},function(e,t,n){var o=n(62),r=n(3),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(o[e])||i(r[e]):o[e]&&o[e][t]||r[e]&&r[e][t]}},function(e,t,n){var o=n(7),r=n(16),i=n(36).indexOf,c=n(18);e.exports=function(e,t){var n,a=r(e),u=0,s=[];for(n in a)!o(c,n)&&o(a,n)&&s.push(n);for(;t.length>u;)o(a,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var o=n(16),r=n(48),i=n(64),c=function(e){return function(t,n,c){var a,u=o(t),s=r(u.length),l=i(c,s);if(e&&n!=n){for(;s>l;)if((a=u[l++])!=a)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:c(!0),indexOf:c(!1)}},function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,n){var o=n(9);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!String(Symbol())}))},,function(e,t,n){var o=n(3),r=n(24).f,i=n(12),c=n(56),a=n(17),u=n(60),s=n(66);e.exports=function(e,t){var n,l,f,p,d,h=e.target,y=e.global,m=e.stat;if(n=y?o:m?o[h]||a(h,{}):(o[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=r(n,l))&&d.value:n[l],!s(y?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),c(n,l,p,e)}}},function(e,t,n){var o=n(50),r=n(69),i=n(13),c=o("unscopables"),a=Array.prototype;null==a[c]&&i.f(a,c,{configurable:!0,value:r(null)}),e.exports=function(e){a[c][e]=!0}},function(e,t,n){var o=n(8),r=n(9),i=n(7),c=Object.defineProperty,a={},u=function(e){throw e};e.exports=function(e,t){if(i(a,e))return a[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return a[e]=!!n&&!r((function(){if(s&&!o)return!0;var e={length:-1};s?c(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var o=n(3),r=n(49),i=Function.call;e.exports=function(e,t,n){return r(i,o[e].prototype[t],n)}},,function(e,t,n){var o=n(9),r=n(46),i="".split;e.exports=o((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==r(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var o=n(37),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,t,n){var o=n(67);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var o=n(3),r=n(32),i=n(7),c=n(33),a=n(38),u=n(68),s=r("wks"),l=o.Symbol,f=u?l:l&&l.withoutSetter||c;e.exports=function(e){return i(s,e)||(a&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,o){var r;r=function(){"use strict";function e(e){return"function"==typeof e}var r=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,c=void 0,a=void 0,u=function(e,t){y[i]=e,y[i+1]=t,2===(i+=2)&&(a?a(m):_())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(m,1)}}var y=new Array(1e3);function m(){for(var e=0;e<i;e+=2)(0,y[e])(y[e+1]),y[e]=void 0,y[e+1]=void 0;i=0}var v,g,b,w,_=void 0;function O(e,t){var n=arguments,o=this,r=new this.constructor(S);void 0===r[R]&&B(r);var i,c=o._state;return c?(i=n[c-1],u((function(){return F(c,r,i,o._result)}))):L(o,r,e,t),r}function E(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(S);return I(t,e),t}p?_=function(){return t.nextTick(m)}:f?(g=0,b=new f(m),w=document.createTextNode(""),b.observe(w,{characterData:!0}),_=function(){w.data=g=++g%2}):d?((v=new MessageChannel).port1.onmessage=m,_=function(){return v.port2.postMessage(0)}):_=void 0===s?function(){try{var e=n(53);return c=e.runOnLoop||e.runOnContext,function(){c(m)}}catch(e){return h()}}():h();var R=Math.random().toString(36).substring(16);function S(){}var j=void 0,P=new M;function k(e){try{return e.then}catch(e){return P.error=e,P}}function C(t,n,o){n.constructor===t.constructor&&o===O&&n.constructor.resolve===E?function(e,t){1===t._state?T(e,t._result):2===t._state?D(e,t._result):L(t,void 0,(function(t){return I(e,t)}),(function(t){return D(e,t)}))}(t,n):o===P?D(t,P.error):void 0===o?T(t,n):e(o)?function(e,t,n){u((function(e){var o=!1,r=function(e,t,n,o){try{e.call(t,n,o)}catch(e){return e}}(n,t,(function(n){o||(o=!0,t!==n?I(e,n):T(e,n))}),(function(t){o||(o=!0,D(e,t))}),e._label);!o&&r&&(o=!0,D(e,r))}),e)}(t,n,o):T(t,n)}function I(e,t){var n;e===t?D(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?C(e,t,k(t)):T(e,t)}function x(e){e._onerror&&e._onerror(e._result),N(e)}function T(e,t){e._state===j&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(N,e))}function D(e,t){e._state===j&&(e._state=2,e._result=t,u(x,e))}function L(e,t,n,o){var r=e._subscribers,i=r.length;e._onerror=null,r[i]=t,r[i+1]=n,r[i+2]=o,0===i&&e._state&&u(N,e)}function N(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var o=void 0,r=void 0,i=e._result,c=0;c<t.length;c+=3)o=t[c],r=t[c+n],o?F(n,o,r,i):r(i);e._subscribers.length=0}}function M(){this.error=null}var A=new M;function F(t,n,o,r){var i=e(o),c=void 0,a=void 0,u=void 0,s=void 0;if(i){if((c=function(e,t){try{return e(t)}catch(e){return A.error=e,A}}(o,r))===A?(s=!0,a=c.error,c=null):u=!0,n===c)return void D(n,new TypeError("A promises callback cannot return that same promise."))}else c=r,u=!0;n._state!==j||(i&&u?I(n,c):s?D(n,a):1===t?T(n,c):2===t&&D(n,c))}var U=0;function B(e){e[R]=U++,e._state=void 0,e._result=void 0,e._subscribers=[]}function H(e,t){this._instanceConstructor=e,this.promise=new e(S),this.promise[R]||B(this.promise),r(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):D(this.promise,new Error("Array Methods must be provided an Array"))}function V(e){this[R]=U++,this._result=this._state=void 0,this._subscribers=[],S!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof V?function(e,t){try{t((function(t){I(e,t)}),(function(t){D(e,t)}))}catch(t){D(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function q(){var e=void 0;if(void 0!==o)e=o;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=V}return H.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===j&&n<e;n++)this._eachEntry(t[n],n)},H.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,o=n.resolve;if(o===E){var r=k(e);if(r===O&&e._state!==j)this._settledAt(e._state,t,e._result);else if("function"!=typeof r)this._remaining--,this._result[t]=e;else if(n===V){var i=new n(S);C(i,e,r),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(o(e),t)},H.prototype._settledAt=function(e,t,n){var o=this.promise;o._state===j&&(this._remaining--,2===e?D(o,n):this._result[t]=n),0===this._remaining&&T(o,this._result)},H.prototype._willSettleAt=function(e,t){var n=this;L(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},V.all=function(e){return new H(this,e).promise},V.race=function(e){var t=this;return r(e)?new t((function(n,o){for(var r=e.length,i=0;i<r;i++)t.resolve(e[i]).then(n,o)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},V.resolve=E,V.reject=function(e){var t=new this(S);return D(t,e),t},V._setScheduler=function(e){a=e},V._setAsap=function(e){u=e},V._asap=u,V.prototype={constructor:V,then:O,catch:function(e){return this.then(null,e)}},q(),V.polyfill=q,V.Promise=V,V},e.exports=r()}).call(this,n(52),n(21))},function(e,t){var n,o,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{o="function"==typeof clearTimeout?clearTimeout:c}catch(e){o=c}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=a(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===c||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=y,r.addListener=y,r.once=y,r.off=y,r.removeListener=y,r.removeAllListeners=y,r.emit=y,r.prependListener=y,r.prependOnceListener=y,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t){},,function(e,t,n){"use strict";var o={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!o.call({1:2},1);t.f=i?function(e){var t=r(this,e);return!!t&&t.enumerable}:o},function(e,t,n){var o=n(3),r=n(12),i=n(7),c=n(17),a=n(29),u=n(57),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,a){var u=!!a&&!!a.unsafe,s=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||r(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==o?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:r(e,t,n)):s?e[t]=n:c(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},function(e,t,n){var o,r,i,c=n(58),a=n(3),u=n(10),s=n(12),l=n(7),f=n(31),p=n(18),d=a.WeakMap;if(c){var h=new d,y=h.get,m=h.has,v=h.set;o=function(e,t){return v.call(h,e,t),t},r=function(e){return y.call(h,e)||{}},i=function(e){return m.call(h,e)}}else{var g=f("state");p[g]=!0,o=function(e,t){return s(e,g,t),t},r=function(e){return l(e,g)?e[g]:{}},i=function(e){return l(e,g)}}e.exports={set:o,get:r,has:i,enforce:function(e){return i(e)?r(e):o(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=r(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var o=n(3),r=n(29),i=o.WeakMap;e.exports="function"==typeof i&&/native code/.test(r(i))},function(e,t){e.exports=!1},function(e,t,n){var o=n(7),r=n(61),i=n(24),c=n(13);e.exports=function(e,t){for(var n=r(t),a=c.f,u=i.f,s=0;s<n.length;s++){var l=n[s];o(e,l)||a(e,l,u(t,l))}}},function(e,t,n){var o=n(34),r=n(63),i=n(65),c=n(14);e.exports=o("Reflect","ownKeys")||function(e){var t=r.f(c(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var o=n(3);e.exports=o},function(e,t,n){var o=n(35),r=n(19).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},function(e,t,n){var o=n(37),r=Math.max,i=Math.min;e.exports=function(e,t){var n=o(e);return n<0?r(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var o=n(9),r=/#|\.prototype\./,i=function(e,t){var n=a[c(e)];return n==s||n!=u&&("function"==typeof t?o(t):!!t)},c=i.normalize=function(e){return String(e).replace(r,".").toLowerCase()},a=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var o=n(38);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var o,r=n(14),i=n(70),c=n(19),a=n(18),u=n(72),s=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{o=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=o?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(o):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=c.length;n--;)delete h.prototype[c[n]];return h()};a[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=r(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var o=n(8),r=n(13),i=n(14),c=n(71);e.exports=o?Object.defineProperties:function(e,t){i(e);for(var n,o=c(t),a=o.length,u=0;a>u;)r.f(e,n=o[u++],t[n]);return e}},function(e,t,n){var o=n(35),r=n(19);e.exports=Object.keys||function(e){return o(e,r)}},function(e,t,n){var o=n(34);e.exports=o("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(75);var o=n(43);e.exports=o("Array","includes")},function(e,t,n){"use strict";var o=n(40),r=n(36).includes,i=n(41);o({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasDetails}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(87),_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(86),_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(103),_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,o=_getPrototypeOf(e);if(t){var r=_getPrototypeOf(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasDetails=function(_OpenStadComponent){_inherits(IdeasDetails,_OpenStadComponent);var _super=_createSuper(IdeasDetails);function IdeasDetails(e){var t;return _classCallCheck(this,IdeasDetails),(t=_super.call(this,e,{siteId:null,ideaId:null,idea:{showVoteButtons:!0,showLabels:!1,allowMultipleImages:!1,shareChannelsSelection:["facebook","twitter","mail","whatsapp"],metaDataTemplate:null},argument:{isActive:!0,formIntro:"Mijn reactie op deze inzending is ...",ignoreReactionsForIdeaIds:"",closeReactionsForIdeaIds:""},poll:{canAddPolls:!1},labels:{},types:null,typeField:"typeId",typeLabel:"Thema"})).state={idea:t.props.idea,ideaId:e.idea&&e.idea.id||t.config.ideaId,showPollForm:!1},t}return _createClass(IdeasDetails,[{key:"componentDidMount",value:function(e,t){var n=this;n.reactionAddedListener=function(e){n.onReactionStored(e.detail,!0)},document.addEventListener("osc-new-reaction-stored",n.reactionAddedListener),n.reactionEditedListener=function(e){n.onReactionStored(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener),n.pollCreatedListener=function(e){n.onPollCreated(e.detail)},document.addEventListener("osc-new-poll-stored",n.pollCreatedListener),n.pollDeletedListener=function(e){n.onPollDeleted(e.detail)},document.addEventListener("osc-poll-deleted",n.pollDeletedListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.reactionAddedListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener),document.removeEventListener("osc-new-poll-stored",this.pollCreatedListener),document.removeEventListener("osc-poll-deleted",this.pollDeletedListener)}},{key:"dispatchEditIdeaClick",value:function(e){if(e.stopPropagation(),this.config.editIdeaLink)document.location.href=this.config.editIdeaLink;else{var t=new window.CustomEvent("osc-edit-idea-click",{detail:this.state.idea});document.dispatchEvent(t)}}},{key:"showPollForm",value:function(){this.setState({showPollForm:!0})}},{key:"hidePollForm",value:function(){this.setState({showPollForm:!1})}},{key:"dispatchAddPollClick",value:function(e){e.stopPropagation(),this.showPollForm()}},{key:"onReactionStored",value:function(e,t){t&&this.state.idea.argCount++,this.setState({idea:this.state.idea})}},{key:"onReactionDeleted",value:function(e){this.state.idea.argCount--,this.setState({idea:this.state.idea})}},{key:"onPollCreated",value:function(){this.hidePollForm(),this.fetchData()}},{key:"onPollDeleted",value:function(){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t=e.state.ideaId||this.state.idea&&this.state.idea.id;if(t){var n="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(t,"?includeVoteCount=1&includeArguments=1&includeArgsCount=1&includeUser=1&includeUserVote=1");e.config.poll.canAddPolls&&(n+="&includePoll=1");var o=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(e.config);fetch(n,{headers:o}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;e.setState({idea:n},(function(){_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.get("osc-reactions-login-pending")&&(window.location.hash="#reactions",_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.set("osc-reactions-login-pending",!1))}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"deleteIdea",value:function(){var e=this,t=this;if(t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(this.state.idea||this.state.idea.id)){var n="".concat(t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(this.state.idea.id),o=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),r=this.state.idea.id;fetch(n,{method:"DELETE",headers:o}).then((function(e){if(!e.ok)throw Error("Error deleting idea");return e.json()})).then((function(t){if(e.config.afterDeleteIdeaLink)document.location.href=e.config.afterDeleteIdeaLink;else{var n=new window.CustomEvent("osc-idea-deleted",{detail:{ideaId:r}});document.dispatchEvent(n)}})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"render",value:function render(){var self=this,idea=self.state.idea;if(!idea)return null;var labelHTML=null;if(self.config.idea.showLabels){var typeId=eval("idea.".concat(self.config.typeField)),typeDef=self.config.types&&self.config.types.find((function(e){return e.id==typeId||e.value==typeId}));if(typeDef){var labelText=typeDef.label,backgroundColor=typeDef.backgroundColor,textColor=typeDef.textColor;labelHTML=React.createElement("div",{className:"osc-idea-label",style:{color:textColor,backgroundColor:backgroundColor}},labelText)}}var pollHTML=null,addPollButtonHTML=null;self.config.poll.canAddPolls&&(idea.poll||self.state.showPollForm?pollHTML=React.createElement("div",null,React.createElement("div",{id:"poll",className:"osc-poll-header"},React.createElement("h3",null,self.config.poll.title||"Poll")),React.createElement(_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__.default,{config:_objectSpread(_objectSpread(_objectSpread({},self.config),self.config.poll),{},{ideaId:self.state.ideaId}),poll:idea.poll})):idea.can&&idea.can.edit&&(addPollButtonHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchAddPollClick(e)}},"Poll toevoegen"))));var voteButtonsHTML=null;self.config.idea.showVoteButtons&&(voteButtonsHTML=React.createElement("div",{className:"osc-details-vote-buttons-container"},React.createElement("h3",null,"Likes"),React.createElement(_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__.a,{config:{text:"eens",opinion:"yes",api:this.config.api,user:this.config.user,siteId:this.config.siteId},idea:this.state.idea,name:"likebutton",value:idea.yes})));var editButtonsHTML=null;idea.can&&idea.can.edit&&(editButtonsHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchEditIdeaClick(e)}},"Bewerk idee"),React.createElement("button",{className:"osc-idea-details-editbutton osc-delete",onClick:function(e){confirm("Weet je het zeker")&&self.deleteIdea(e)}},"Verwijder idee")));var modBreakHTML=null;idea&&idea.modBreak&&(modBreakHTML=React.createElement("div",{className:"osc-modbreak"},idea.modBreakDateHumanized,React.createElement("br",null),React.createElement("br",null),idea.modBreak));var reactionsCountHTML=null;self.config.argument.isActive&&(reactionsCountHTML=React.createElement("div",null,React.createElement("h3",null,"Reacties"),React.createElement("a",{href:"#reactions",className:"osc-no-of-reactions"},idea.argCount||0," reacties")));var reactionsHTML=null;if(self.config.argument.isActive){var config=_objectSpread({},self.config);config.argument.isActive=this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),config.argument.isClosed=this.config.argument.isClosed||this.config.argument.closeReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),reactionsHTML=React.createElement("div",null,React.createElement("div",{id:"reactions",className:"osc-reactions-header"},React.createElement("h3",null,self.config.argument.title||"Reacties")),React.createElement(_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__.default,{config:_objectSpread(_objectSpread({},self.config.argument),{},{title:void 0,api:self.config.api,user:self.config.user,siteId:self.config.siteId,ideaId:idea.id,loginUrl:self.config.loginUrl})}))}var shareButtonsHTML=null;if(self.config.idea.shareChannelsSelection.length){var facebookButtonHTML=self.config.idea.shareChannelsSelection.includes("facebook")?React.createElement("li",null,React.createElement("a",{className:"osc-share-facebook",target:"_blank",href:"https://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(document.location.href)},"Facebook")):null,twitterButtonHTML=self.config.idea.shareChannelsSelection.includes("twitter")?React.createElement("li",null,React.createElement("a",{className:"osc-share-twitter",target:"_blank",href:"https://twitter.com/intent/tweet?text="+encodeURIComponent(document.location.href)},"Twitter")):null,mailButtonHTML=self.config.idea.shareChannelsSelection.includes("mail")?React.createElement("li",null,React.createElement("a",{className:"osc-share-email",target:"_blank",href:"mailto:?subject="+encodeURIComponent(eval("idea.".concat(self.config.titleField)))+"&body="+encodeURIComponent(document.location.href)},"Email")):null,whatsappButtonHTML=self.config.idea.shareChannelsSelection.includes("whatsapp")?React.createElement("li",null,React.createElement("a",{className:"osc-share-whatsapp",target:"_blank",href:"https://wa.me/?text="+encodeURIComponent(document.location.href)},"WhatsApp")):null;shareButtonsHTML=React.createElement("div",{className:"osc-details-sharebuttons"},React.createElement("ul",null,facebookButtonHTML,twitterButtonHTML,mailButtonHTML,whatsappButtonHTML))}var authorHTML=idea.user.nickName||idea.user.fullName||idea.user.firstName+" "+idea.user.lastName;this.config.linkToUserPageUrl&&(authorHTML=React.createElement("a",{href:this.config.linkToUserPageUrl+"/"+idea.user.id,className:"osc-author-link"},authorHTML));var metaDataHTML=self.config.idea.metaDataTemplate;return metaDataHTML&&(metaDataHTML=metaDataHTML.replace(/\{createDate\}/,idea.createDateHumanized),metaDataHTML=metaDataHTML.replace(/\{theme\}/,idea.extraData.theme),console.log("xx"),console.log(metaDataHTML),metaDataHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:metaDataHTML,username:authorHTML}),console.log(metaDataHTML)),React.createElement("div",{id:self.id,className:self.props.className||"osc-info-block-idea-details",ref:function(e){return self.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("div",{className:"osc-idea-details-container"},React.createElement("div",{className:"osc-idea-details"},React.createElement("h2",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-details-image-and-stats"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__.IdeaImage,{config:{allowMultipleImages:self.config.idea.allowMultipleImages},idea:idea})),labelHTML,shareButtonsHTML,React.createElement("div",{className:"osc-details-stats"},voteButtonsHTML,reactionsCountHTML,editButtonsHTML)),React.createElement("p",{className:""},metaDataHTML),modBreakHTML,React.createElement("p",{className:"osc-details-summary"},idea.summary),React.createElement("p",{className:"osc-details-description",dangerouslySetInnerHTML:{__html:idea.description}}),addPollButtonHTML),pollHTML,reactionsHTML,React.createElement("div",{className:"osc-bottom-spacer"})))}}]),IdeasDetails}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},,,function(e,t,n){},,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return M})),n.d(t,"Reactions",(function(){return M}));n(11);var o=n(0),r=n.n(o),i=n(5),c=n.n(i),a=(n(106),n(1)),u=n(2),s=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=y(e);if(t){var r=y(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,e);var t,n,o,r=d(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return u.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=u.a.api.getHeaders(e.config),o=e.config.argumentId?"PUT":"POST",r={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:o,headers:n,body:JSON.stringify(r)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var o=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(o)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var o=null;return o=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){u.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(s.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),o)}}])&&f(t.prototype,n),o&&f(t,o),i}(a.a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=S(e);if(t){var r=S(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return R(this,n)}}function R(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(i,e);var t,n,o,r=E(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=u.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=u.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=u.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",o=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),r=null;e.canEdit()&&e.canDelete()&&(r=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var c=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(c=React.createElement("div",{className:"osc-reaction-description"},React.createElement(m,{config:b(b({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var a=null;t.parentId||(a=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var s=null,l=null;if(e.canReply()&&!e.config.isClosed&&(s=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=b(b({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(m,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var p=null;return t.reactions&&t.reactions.length&&(p=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},r,o,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),c,a,s),l,p)}}])&&_(t.prototype,n),o&&_(t,o),i}(a.a);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function D(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=N(e);if(t){var r=N(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return L(this,n)}}function L(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,e);var t,n,o,r=D(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():u.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),o=u.a.api.getHeaders(t.config);fetch(n,{headers:o}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var o=C({},t.state);o.reactions=n,o.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(o,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(j,{config:t.config,user:t.state.user,data:C({},e)}))}))),o=t.config.title?React.createElement("h3",null,t.config.title):null,r=React.createElement(m,{config:t.config,user:t.state.user});return t.config.isClosed&&(r=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},o,r,n,React.createElement("br",null),React.createElement("br",null))}}])&&x(t.prototype,n),o&&x(t,o),i}(a.a);M.renderElement=function(e,t){var n=e.attributes;c.a.render(r.a.createElement(M,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return I})),n.d(t,"Poll",(function(){return I}));n(11);var o=n(0),r=n.n(o),i=n(5),c=n.n(i),a=(n(105),n(1)),u=n(2),s=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=g(e);if(t){var r=g(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(i,e);var t,n,o,r=m(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=r.call(this,e,{user:{},questionMinLength:30,questionMaxLength:500,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,allowChoiceTitles:!0})).state={user:e.user,pollId:e.pollId,poll:e.poll,isBusy:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.state.poll||n.fetchData():u.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.state.poll||n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({poll:{question:"",choices:{1:{},2:{}}}});var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.config.pollId,"?withUser=1&withVotes=1"),o=u.a.api.getHeaders(t.config);fetch(n,{headers:o}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var o=p({},t.state);o.poll=n,t.setState(o,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"validatedResult",value:function(){var e=this,t=e.state.poll,n=e["question-input"],o=n.validate(),r={question:n.state.value,choices:{}};return Object.keys(t.choices).forEach((function(t){var n=e["title-input-".concat(t)],i=e["description-input-".concat(t)];(n&&n.state.value||i.state.value)&&(r.choices[t]={},e.config.allowChoiceTitles&&n.state.value&&(r.choices[t].title=n.state.value,n.validate()||(o=!1)),i.state.value&&(r.choices[t].description=i.state.value,i.validate()||(o=!1)))})),o?Object.keys(r.choices).length<2?null:r:null}},{key:"handleOnChange",value:function(e){var t=p({},this.state.poll);e.choice&&(t.choices[e.choice.id]={title:this.config.allowChoiceTitles&&e.choice.title,description:e.choice.description}),e.question&&(t.question=e.question),this.setState({poll:t},(function(){}))}},{key:"addChoice",value:function(){var e=p({},this.state.poll),t=Object.keys(e.choices).sort(),n=parseInt(t[t.length-1])+1;e.choices[n]={},this.setState({poll:e})}},{key:"canSubmit",value:function(){if(this.state.poll&&this.state.poll.can)return this.state.poll.can.edit;var e=this.config.requiredUserRole,t="moderator";return("anonymous"==e?t:"member"==e&&!0)||"editor"==e&&!0||"moderator"==e&&!0||"admin"==e&&!1}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.validatedResult();if(t){if(!e.canSubmit())return alert("Je bent niet ingelogd");var n=!0,o="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll"),r="POST";e.state.poll&&e.state.poll.id&&(o+="/".concat(e.state.poll.id),r="PUT",n=!1);var i=u.a.api.getHeaders(e.config),c=t;fetch(o,{method:r,headers:i,body:JSON.stringify(c)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(o){var r=new CustomEvent("osc-new-poll-stored",{detail:o});n||(r=new CustomEvent("osc-poll-edited",{detail:o})),document.dispatchEvent(r),"function"==typeof e.config.onFinished&&e.config.onFinished(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}else e.setState({isBusy:!1})}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{},o=null;t.config.formIntro&&(o=React.createElement("div",{className:"osc-intro"},t.config.formIntro));var r=null;return r=t.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitForm()},className:"osc-button-blue osc-margin-left".concat(t.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(){u.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button osc-margin-left"},"Inloggen")),React.createElement("div",{id:t.divId,className:"osc-form",ref:function(e){return t.instance=e}},o,React.createElement("h4",null,"Vraag"),React.createElement(s.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.questionMinLength,maxLength:t.config.questionMaxLength,placeholder:"Vraag"},value:n.question,onChange:function(e){return t.handleOnChange({question:e.value})},ref:function(e){return t["question-input"]=e}}),React.createElement("h4",null,"Keuzemogelijkheden"),React.createElement("ol",{className:"osc-poll-form-choices"},n&&n.choices&&Object.keys(n.choices).sort().map((function(e){var o=n.choices[e],r=null;return t.config.allowChoiceTitles&&(r=React.createElement(s.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.titleMinLength,maxLength:t.config.titleMaxLength,placeholder:"Titel"},value:o.title,onChange:function(n){return t.handleOnChange({choice:{id:e,title:n.value}})},ref:function(n){return t["title-input-".concat(e)]=n}})),React.createElement("li",{className:"osc-poll-form-choice",key:"osc-key-".concat(e)},r,React.createElement(s.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.descriptionMinLength,maxLength:t.config.descriptionMaxLength,placeholder:"Beschrijving"},value:o.description,onChange:function(n){return t.handleOnChange({choice:{id:e,description:n.value}})},ref:function(n){return t["description-input-".concat(e)]=n}}))}))),React.createElement("a",{className:"osc-add-choice-button",onClick:function(t){return e.addChoice()}},"Nog een keuzemogelijkheid toevoegen"),r)}}])&&h(t.prototype,n),o&&h(t,o),i}(a.a);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function R(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=C(e);if(t){var r=C(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?k(e):t}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(i,e);var t,n,o,r=j(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=k(t=r.call(this,e,{siteId:null,ideaId:null,title:null,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",withPercentage:!0,allowChoiceTitles:!0,allowShowResultsIfNotVoted:!1}));return n.config.loginUrl=n.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),n.hideEditForm=n.hideEditForm.bind(n),n.state={user:n.config.user,poll:e.poll,pollId:e.poll&&e.poll.id||n.config.pollId,selectedChoice:null,showResult:!1,showQuestion:!1,editMode:!1,showVoteSucceeded:!1},n.state.poll&&(n.parseVoteCount(n.state.poll),n.state.poll.userVote&&(n.state.selectedChoice=n.state.poll.userVote)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?!n.state.poll&&n.config.ideaId&&n.fetchData():u.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){!n.state.poll&&n.config.ideaId&&n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({editMode:!0},(function(){}));var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.state.pollId,"?withUser=1&withUserVote=1&withVoteCount=1&withVotes=1"),o=u.a.api.getHeaders(t.config);fetch(n,{headers:o}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var o=O(O({},t.state),{},{showResult:!1,showQuestion:!1});o.poll=n,o.pollId=n.id,t.parseVoteCount(o.poll),o.poll.userVote&&(o.selectedChoice=o.poll.userVote),t.setState(o,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"parseVoteCount",value:function(e){e.voteCount&&Object.keys(e.choices).sort().forEach((function(t){var n=e.choices[t];n.votesAbs=e.voteCount[t],n.votesPrc=parseInt(e.voteCount[t]/e.voteCount.total*100),n.votesPrc=n.votesPrc||0}))}},{key:"showEditForm",value:function(){this.setState({editMode:!0})}},{key:"hideEditForm",value:function(){this.setState({editMode:!1},(function(){this.fetchData()}))}},{key:"setShowResult",value:function(){this.setState({showResult:!0})}},{key:"setShowQuestion",value:function(){this.setState({showQuestion:!0})}},{key:"selectChoice",value:function(e){this.setState({selectedChoice:e.choice})}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"isValid",value:function(){return!!this.state.selectedChoice}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.state.user&&this.state.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"submitVote",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.isValid()){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id,"/vote"),n=u.a.api.getHeaders(e.config),o={choice:e.state.selectedChoice};fetch(t,{method:"POST",headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData((function(){e.setState({isBusy:!1,showVoteSucceeded:!0},(function(){var e=new CustomEvent("osc-poll-voted",{detail:t});document.dispatchEvent(e)}))})),"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description})})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"deletePoll",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.state.poll;if(!(t&&t.can&&t.can.delete))return alert("U kunt deze poll niet verwijderen");if(!t||!t.id)return alert("U kunt deze poll niet verwijderen");var n="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id),o=u.a.api.getHeaders(e.config);fetch(n,{method:"DELETE",headers:o}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){var t=new CustomEvent("osc-poll-deleted",{detail:e});document.dispatchEvent(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{};if(t.state.editMode)return React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},React.createElement(b,{config:O(O({},t.config),{},{onFinished:t.hideEditForm}),pollId:t.state.poll&&t.state.poll.id,poll:t.state.poll,user:t.state.user}));var o=null;if(n&&n.choices&&!n.userVote||t.state.showQuestion){var r={name:"pollChoice",choices:[]};Object.keys(n.choices).sort().map((function(e){var o=t.config.allowChoiceTitles&&n.choices[e].title?"<h4>".concat(n.choices[e].title,"</h4>"):"";o+=n.choices[e].description||"",r.choices.push({dangerousDescription:o,value:e})}));var i=null;i=t.canSubmit()?React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitVote()},className:"osc-button-blue".concat(t.isValid()?"":" osc-disabled")},"Stemmen"):React.createElement("button",{onClick:function(){u.a.localStorage.set("osc-poll-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen");var c=null;!t.config.allowShowResultsIfNotVoted||n.userVote||t.state.showResult||(c=React.createElement("a",{className:"osc-show-result-button",onClick:function(t){return e.setShowResult()}},"Resultaat bekijken")),o=React.createElement("div",{className:"osc-poll-question osc-form"},React.createElement(s.a.Radios,{config:r,value:t.state.selectedChoice,onChange:function(e){return t.selectChoice({choice:e.value})},ref:function(e){return t.description=e}}),React.createElement("div",{className:"osc-poll-question-buttons"},i,c))}var a=null;if(n&&(n.userVote||t.state.showResult)){var l=null;t.state.showQuestion||n&&n.choices&&!n.userVote||(l=React.createElement("a",{className:"osc-show-question-button",onClick:function(t){return e.setShowQuestion()}},"Stem aanpassen"));var f=null;if(n.voteCount&&n.voteCount.total){var p=1==n.voteCount.total?"stem":"stemmen";f=React.createElement("div",null,"Totaal ",n.voteCount.total," ",p,React.createElement("br",null),React.createElement("br",null))}a=React.createElement("ul",{className:"osc-choices"},Object.keys(n.choices).sort().map((function(e){var o=n.choices[e],r=null;t.config.allowChoiceTitles&&o.title&&(r=React.createElement("h4",null,o.title));var i=null;o.description&&(i=React.createElement("div",null,o.description));var c=null;t.config.withPercentage&&(c=React.createElement("div",{className:"osc-percentage"},o.votesPrc,"%"));var a=React.createElement("div",{className:"osc-choice-default"},r,i,React.createElement("div",{className:"osc-choice-bar".concat(t.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:{width:(o.votesPrc||0)+"%"}})),c);return React.createElement("li",{className:"osc-choice",key:"osc-key-".concat(e)},a)})),f,l)}var d=null;t.state.poll&&t.state.poll.can&&t.state.poll.can.edit&&(d=React.createElement("div",{className:"osc-editbuttons"},React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk poll"),React.createElement("button",{className:"osc-editbutton osc-delete",onClick:function(e){confirm("Weet u het zeker")&&t.deletePoll()}},"Verwijder poll")));var h=null;return t.state.showVoteSucceeded&&(h=React.createElement("div",{className:"osc-vote-succeeded"},"Uw stem is opgeslagen")),React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},d,h,React.createElement("h4",null,n.question),o,a,React.createElement("br",null),React.createElement("br",null))}}])&&R(t.prototype,n),o&&R(t,o),i}(a.a);I.renderElement=function(e,t){var n=e.attributes;c.a.render(r.a.createElement(I,{attributes:n,config:t}),e)}},function(e,t,n){},function(e,t,n){},,,,,,,,function(e,t,n){"use strict";n.r(t);n(11);var o=n(0),r=n.n(o),i=n(5),c=n.n(i),a=(n(122),n(80));n.d(t,"default",(function(){return a.a})),n.d(t,"IdeaDetails",(function(){return a.a})),a.a.renderElement=function(e,t){var n=e.attributes;c.a.render(r.a.createElement(a.a,{attributes:n,config:t}),e)}},,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var o=n(1),r=n(2);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=l(e);if(t){var r=l(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(s,e);var t,n,o,i=u(s);function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=i.call(this,e,{name:"likebutton",backgroundColor:"#164995",color:"#fff",text:"like",opinion:"yes"})).state={value:t.props.value,busy:!1},t}return t=s,(n=[{key:"componentDidMount",value:function(e,t){r.a.localStorage.get("osc-ideas-on-map-vote-pending")&&(this.doVote(),r.a.localStorage.remove("osc-ideas-on-map-vote-pending"))}},{key:"doVote",value:function(e){var t=this;if(e&&e.stopPropagation(),!this.state.busy){this.setState({busy:!0});var n=this,o="".concat(n.config.api.url,"/api/site/").concat(n.config.siteId,"/vote"),i=r.a.api.getHeaders(n.config);if(!n.config.user||!n.config.user.role){r.a.localStorage.set("osc-ideas-on-map-vote-pending",!0);var c="/oauth/login?returnTo="+encodeURIComponent(document.location.href)+"&useOauth=anonymous";return document.location.href=c}fetch(o,{method:"post",headers:i,body:JSON.stringify({ideaId:n.props.idea.id,opinion:n.config.opinion})}).then((function(e){if(!e.ok)throw Error("Stemmen is niet gelukt");return e.json()})).then((function(e){var o=e.length?1:-1,r=n.state.value+o;n.setState({value:r}),n.props.idea.userVote=e.length&&e||null,t.setState({busy:!1});var i=new window.CustomEvent("osc-idea-liked",{detail:{ideaId:n.props.idea.id,change:o}});document.dispatchEvent(i)})).catch((function(e){alert(e.message)}))}}},{key:"render",value:function(){var e=this,t=parseInt(e.state.value)||0,n=parseInt(t/100)||0,o=parseInt((t-100*n)/10)||0,r=t-100*n-10*o;return React.createElement("div",{id:e.id,className:e.props.className||"osc-vote-button osc-number-button",ref:function(t){return e.instance=t}},React.createElement("div",{className:"osc-number-plates",style:{color:this.config.color,backgroundColor:this.config.backgroundColor}},React.createElement("div",{id:"".concat(this.config.name,"-number-plate-000"),className:"osc-number-plate"},n),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-00"),className:"osc-number-plate"},o),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-0"),className:"osc-number-plate"},r)),React.createElement("div",{className:"osc-number-button-text ".concat(this.config.name,"-name ").concat(this.props.idea.userVote?" osc-user-has-voted":""," ").concat(this.state.busy?" osc-busy":""),style:{color:this.config.color,backgroundColor:this.config.backgroundColor},onClick:function(t){return e.doVote(t)}},e.config.text),React.createElement("div",{className:"osc-clear-both"}))}}])&&c(t.prototype,n),o&&c(t,o),s}(o.a)},,function(e,t,n){},function(e,t,n){},,,,,,,,,,,,,,,,function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvc2Vzc2lvbi1zdG9yYWdlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi91c2VyL2dldC1qd3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3VzZXIvaGFzLXJvbGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2xvY2FsLXN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi9hcGkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2FwaS9nZXQtaGVhZGVycy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9nZXQtdXNlci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9sb2dvdXQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3JlYWN0LXRlbXBsYXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL21lcmdlL21lcmdlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9kZWZhdWx0LWlucHV0LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2hpZGRlbi5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9pbWFnZS11cGxvYWQuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvaHRtbGFyZWEuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvaW5wdXQtd2l0aC1jb3VudGVyLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L3JhZGlvcy5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9wb3N0Y29kZS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9zZWxlY3QuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvdGV4dGlucHV0LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L3RleHRhcmVhLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2Zvcm0tZmllbGQuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvZm9ybS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9zbGlkZXIuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pbWFnZS9jb21wb25lbnQvaW1hZ2UuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pbWFnZS9jb21wb25lbnQvaWRlYS1pbWFnZS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2ltYWdlL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UtcHJvbWlzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudHJ5LXVuYmluZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2VzL2FycmF5L2luY2x1ZGVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2lkZWEtZGV0YWlscy9jb21wb25lbnQvaWRlYS1kZXRhaWxzLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2NvbXBvbmVudC9yZWFjdGlvbi1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2NvbXBvbmVudC9yZWFjdGlvbi5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL3JlYWN0aW9ucy9jb21wb25lbnQvcmVhY3Rpb25zLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcG9sbC9jb21wb25lbnQvcG9sbC1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcG9sbC9jb21wb25lbnQvcG9sbC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL3BvbGwvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pZGVhLWRldGFpbHMvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pZGVhLWRldGFpbHMvY29tcG9uZW50L3ZvdGUtYnV0dG9uLmpzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIndpbmRvdyIsIk9wZW5TdGFkQ29tcG9uZW50IiwicHJvcHMiLCJkZWZhdWx0Q29uZmlnIiwiZGVmYXVsdGRlZmF1bHRDb25maWciLCJzZWxmIiwiYXR0cmlidXRlcyIsImtleXMiLCJmb3JFYWNoIiwiYXR0cmlidXRlIiwiY29uZmlnIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwicHJvcHNDb25maWciLCJyZW1vdmVVbmRlZkFuZE51bGwiLCJtZXJnZSIsInJlY3Vyc2l2ZSIsInNpdGVJZCIsImFwaSIsInVybCIsImhlYWRlcnMiLCJpc1VzZXJMb2dnZWRJbiIsInVzZXIiLCJkaXZJZCIsImlkIiwicGFyc2VJbnQiLCJNYXRoIiwicmFuZG9tIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJvYmoiLCJvc2NTZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiand0IiwibWF0Y2giLCJsb2NhdGlvbiIsInNlYXJjaCIsInNldCIsImRvY3VtZW50IiwicmVwbGFjZSIsInJvbGVzIiwiYWRtaW4iLCJtb2RlcmF0b3IiLCJlZGl0b3IiLCJtZW1iZXIiLCJhbm9ueW1vdXMiLCJhbGwiLCJvd25lciIsIm9zY0xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIk9wZW5TdGFkQ29tcG9uZW50TGlicyIsImdldEhlYWRlcnMiLCJnZXRKV1QiLCJnZXRVc2VyIiwibmV4dCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJqc29uIiwibG9nb3V0IiwiaGFzUm9sZSIsInJlcXVpcmVkUm9sZSIsInVzZXJSb2xlIiwicm9sZSIsImluY2x1ZGVzIiwicmVhY3RUZW1wbGF0ZSIsImh0bWwiLCJhcmdzIiwiYXJndW1lbnRzIiwibWF0Y2hlcyIsIlJlZ0V4cCIsImV4ZWMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIml0IiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJpc05vZGUiLCJQdWJsaWMiLCJjbG9uZSIsIm1lcmdlX3JlY3Vyc2l2ZSIsImJhc2UiLCJleHRlbmQiLCJ0eXBlT2YiLCJhcmd2IiwicmVzdWx0Iiwic2l6ZSIsImxlbmd0aCIsImluZGV4IiwiaXRlbSIsInNpdGVtIiwiaW5wdXQiLCJ0b1N0cmluZyIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJvdXRwdXQiLCJ0eXBlIiwiT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQiLCJjaG9pY2VzIiwicGxhY2Vob2xkZXIiLCJkaXNhYmxlZCIsInJlcXVpcmVkIiwic3RhdGUiLCJlcnJvciIsIm9uQ2hhbmdlIiwic2hvd0Vycm9ycyIsImlzVmFsaWQiLCJ0aGlzIiwic2V0U3RhdGUiLCJkYXRhIiwidmFsaWRhdGUiLCJPcGVuU3RhZENvbXBvbmVudFNlbGVjdCIsImUiLCJoYW5kbGVPbkNoYW5nZSIsInJlZiIsImVsIiwiYWxsb3dNdWx0aXBsZSIsImltYWdlc2VydmVyIiwicHJvY2VzcyIsInVwbG9hZGVkRmlsZXMiLCJpbWFnZSIsInB1c2giLCJzb3VyY2UiLCJvcHRpb25zIiwiZmlsZSIsIm1ldGFkYXRhIiwicG9zdGVyIiwiX2xvYWRlZEZpbGVzIiwiZmlsZXMiLCJsb2FkTmV4dEZpbGUiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFzeW5jIiwib25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZmlsZVVwbG9hZGVySW5pdCIsImltYWdldXBsb2FkZXIiLCJnZXRGaWxlcyIsInNlcnZlcklkIiwiY29udGFpbmVyRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJGaWxlUG9uZCIsInJlZ2lzdGVyUGx1Z2luIiwiRmlsZVBvbmRQbHVnaW5JbWFnZVByZXZpZXciLCJGaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVNpemUiLCJGaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVR5cGUiLCJGaWxlUG9uZFBsdWdpbkZpbGVQb3N0ZXIiLCJmaWxlUG9uZFNldHRpbmdzIiwiYWNjZXB0ZWRGaWxlVHlwZXMiLCJhbGxvd0ZpbGVTaXplVmFsaWRhdGlvbiIsImFsbG93UmVvcmRlciIsInN0eWxlSXRlbVBhbmVsQXNwZWN0UmF0aW8iLCJtYXhGaWxlU2l6ZSIsIm1heEZpbGVzIiwiYWxsb3dCcm93c2UiLCJzZXJ2ZXIiLCJpbWFnZVJlc2l6ZVRhcmdldFdpZHRoIiwiaW1hZ2VSZXNpemVUYXJnZXRIZWlnaHQiLCJpbWFnZUNyb3BBc3BlY3RSYXRpbyIsImxhYmVsSWRsZSIsImxhYmVsSW52YWxpZEZpZWxkIiwibGFiZWxGaWxlV2FpdGluZ0ZvclNpemUiLCJsYWJlbEZpbGVTaXplTm90QXZhaWxhYmxlIiwibGFiZWxGaWxlQ291bnRTaW5ndWxhciIsImxhYmVsRmlsZUNvdW50UGx1cmFsIiwibGFiZWxGaWxlTG9hZGluZyIsImxhYmVsRmlsZUFkZGVkIiwibGFiZWxGaWxlTG9hZEVycm9yIiwibGFiZWxGaWxlUmVtb3ZlZCIsImxhYmVsRmlsZVJlbW92ZUVycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZyIsImxhYmVsRmlsZVByb2Nlc3NpbmdDb21wbGV0ZSIsImxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkIiwibGFiZWxGaWxlUHJvY2Vzc2luZ0Vycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZ1JldmVydEVycm9yIiwibGFiZWxUYXBUb0NhbmNlbCIsImxhYmVsVGFwVG9SZXRyeSIsImxhYmVsVGFwVG9VbmRvIiwibGFiZWxCdXR0b25SZW1vdmVJdGVtIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkIiwibGFiZWxCdXR0b25SZXRyeUl0ZW1Mb2FkIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nIiwibGFiZWxCdXR0b25VbmRvSXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblJldHJ5SXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblByb2Nlc3NJdGVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRldGFpbCIsImZpbGVVcGxvYWRlclVwZGF0ZUN1cnJlbnRJbnB1dCIsImZvcm1maWVsZHMiLCJhZGRGaWxlcyIsImltYWdlcyIsImVycm9ySFRNTCIsImNsYXNzTmFtZSIsIk9wZW5TdGFkQ29tcG9uZW50SFRNTEFyZWEiLCJvbktleVVweCIsImZpbHRlckhUTUwiLCJpbm5lckhUTUwiLCJjb21tYW5kIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJleGVjQ29tbWFuZCIsIm9uS2V5VXAiLCJvbkZvY3VzIiwib25CbHVyIiwib25Nb3VzZURvd24iLCJleGVjdXRlQWN0aW9uIiwicHJvbXB0IiwiY29udGVudEVkaXRhYmxlIiwiRm9ybWZpZWxkSW5wdXRXaXRoQ291bnRlciIsImlucHV0VHlwZSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImZvY3VzZWQiLCJ2YWx1ZUxlbmd0aCIsInVzZUtleSIsIm9uSW5wdXRGb2N1cyIsIm9uSW5wdXRCbHVyIiwib25JbnB1dEtleVVwIiwid2FybmluZyIsInNob3dXYXJuaW5nIiwiY291bnRlciIsImlucHV0SFRNTCIsImluc3RhbmNlIiwiT3BlblN0YWRDb21wb25lbnRSYWRpb3MiLCJtYXAiLCJjaG9pY2UiLCJkYW5nZXJvdXNEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwidGl0bGUiLCJPcGVuU3RhZENvbXBvbmVudFBvc3Rjb2RlIiwiT3BlblN0YWRDb21wb25lbnRUZXh0IiwiT3BlblN0YWRDb21wb25lbnRGb3JtRmllbGQiLCJ2YWxpZGF0ZUFjdGlvbiIsImNoYW5nZUFjdGlvbiIsInVuZGVmaW5lZCIsInRpdGxlSFRNTCIsImRlc2NyaXB0aW9uSFRNTCIsImZpZWxkSFRNTCIsIk9wZW5TdGFkQ29tcG9uZW50Rm9ybSIsImludHJvIiwiZmllbGRzIiwidmFsdWVzIiwic2Nyb2xsVG8iLCJmaXJzdEludmFsaWQiLCJmaWVsZCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJpbnRyb0hUTUwiLCJmaWVsZHNIVE1MIiwiZmllbGRDb25maWciLCJTbGlkZXIiLCJ0b3VjaGVkIiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJtaW4iLCJtYXgiLCJzdGVwIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjYWxjUHJvZ3Jlc3MiLCJvbkNsaWNrIiwiZG9Ub3VjaCIsIkZvcm0iLCJGb3JtRmllbGQiLCJIaWRkZW4iLCJJbWFnZVVwbG9hZCIsIklucHV0V2l0aENvdW50ZXIiLCJQb3N0Y29kZSIsIlJhZGlvcyIsIlNlbGVjdCIsIlRleHQiLCJUZXh0YXJlYSIsImZhaWxzIiwic3VwcG9ydCIsIkJsb2IiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpbmRleE9mIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsInNoaWZ0IiwiZG9uZSIsIkhlYWRlcnMiLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25lcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIkRhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiYXJyYXlCdWZmZXIiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwib2xkVmFsdWUiLCJoYXMiLCJjYWxsYmFjayIsInRoaXNBcmciLCJlbnRyaWVzIiwibWV0aG9kcyIsIlJlcXVlc3QiLCJtZXRob2QiLCJ1cGNhc2VkIiwiY3JlZGVudGlhbHMiLCJzaWduYWwiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJzcGxpdCIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwiRE9NRXhjZXB0aW9uIiwibWVzc2FnZSIsInN0YWNrIiwiY29uc3RydWN0b3IiLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJpc09iamVjdCIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZyIsIk9wZW5TdGFkQ29tcG9uZW50SW1hZ2UiLCJhc3BlY3RSYXRpbyIsImFsbG93TXVsdGlwbGVJbWFnZXMiLCJjdXJyZW50SW1hZ2VJbmRleCIsIndpZHRoIiwiZWxlbSIsInBhcmVudE5vZGUiLCJvZmZzZXRXaWR0aCIsIndoaWNoIiwiaW1hZ2VTcmMiLCJoZWlnaHQiLCJnZXRBc3BlY3RSYXRpb0ZhY3RvciIsImdldEltYWdlc0Zyb21Qcm9wcyIsImdldFdpZHRoSGVpZ2h0IiwiYmFja2dyb3VuZEltYWdlIiwiZ2V0SW1hZ2VTcmMiLCJ0aHVtYiIsInRodW1iaGVpZ2h0IiwidGh1bWJ3aWR0aCIsInRodW1ibGVmdCIsImxlZnQiLCJ6SW5kZXgiLCJzZXRDdXJyZW50SW1hZ2VJbmRleCIsIk9wZW5TdGFkQ29tcG9uZW50SWRlYUltYWdlIiwiaWRlYSIsImV4dHJhRGF0YSIsInBvc3RlckltYWdlIiwicmVuZGVyRWxlbWVudCIsIlJlYWN0RE9NIiwicmVuZGVyIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJhIiwiRVhJU1RTIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldEdsb2JhbCIsIlNIQVJFRCIsInNoYXJlZCIsInVpZCIsIklTX1BVUkUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwicG9zdGZpeCIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImhpZGRlbktleXMiLCJuYW1lcyIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsImNlaWwiLCJmbG9vciIsImFyZ3VtZW50IiwiaXNOYU4iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJyZWRlZmluZSIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwic2hhbSIsIndlbGxLbm93blN5bWJvbCIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJjYWNoZSIsInRocm93ZXIiLCJNRVRIT0RfTkFNRSIsIkFDQ0VTU09SUyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsIkNPTlNUUlVDVE9SIiwiTUVUSE9EIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9JbnRlZ2VyIiwidGhhdCIsImIiLCJhcHBseSIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJmYWN0b3J5IiwiaXNGdW5jdGlvbiIsIngiLCJsZW4iLCJ2ZXJ0eE5leHQiLCJjdXN0b21TY2hlZHVsZXJGbiIsImFzYXAiLCJhcmciLCJxdWV1ZSIsImZsdXNoIiwic2NoZWR1bGVGbHVzaCIsImJyb3dzZXJXaW5kb3ciLCJicm93c2VyR2xvYmFsIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzV29ya2VyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJpbXBvcnRTY3JpcHRzIiwiTWVzc2FnZUNoYW5uZWwiLCJ1c2VTZXRUaW1lb3V0IiwiZ2xvYmFsU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJjaGFubmVsIiwiaXRlcmF0aW9ucyIsIm9ic2VydmVyIiwibm9kZSIsIm9uRnVsZmlsbG1lbnQiLCJvblJlamVjdGlvbiIsIl9hcmd1bWVudHMiLCJwYXJlbnQiLCJjaGlsZCIsIm5vb3AiLCJQUk9NSVNFX0lEIiwibWFrZVByb21pc2UiLCJfc3RhdGUiLCJpbnZva2VDYWxsYmFjayIsIl9yZXN1bHQiLCJzdWJzY3JpYmUiLCJfcmVzb2x2ZSIsIm5leHRUaWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInZlcnR4IiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiYXR0ZW1wdFZlcnR4Iiwic3Vic3RyaW5nIiwiUEVORElORyIsIkdFVF9USEVOX0VSUk9SIiwiRXJyb3JPYmplY3QiLCJnZXRUaGVuIiwiaGFuZGxlTWF5YmVUaGVuYWJsZSIsIm1heWJlVGhlbmFibGUiLCJ0aGVuJCQiLCJ0aGVuYWJsZSIsImZ1bGZpbGwiLCJfcmVqZWN0IiwicmVhc29uIiwiaGFuZGxlT3duVGhlbmFibGUiLCJzZWFsZWQiLCJmdWxmaWxsbWVudEhhbmRsZXIiLCJyZWplY3Rpb25IYW5kbGVyIiwidHJ5VGhlbiIsIl9sYWJlbCIsImhhbmRsZUZvcmVpZ25UaGVuYWJsZSIsInB1Ymxpc2hSZWplY3Rpb24iLCJfb25lcnJvciIsInB1Ymxpc2giLCJfc3Vic2NyaWJlcnMiLCJzdWJzY3JpYmVycyIsInNldHRsZWQiLCJUUllfQ0FUQ0hfRVJST1IiLCJoYXNDYWxsYmFjayIsInN1Y2NlZWRlZCIsImZhaWxlZCIsInRyeUNhdGNoIiwiRW51bWVyYXRvciIsIkNvbnN0cnVjdG9yIiwiX2luc3RhbmNlQ29uc3RydWN0b3IiLCJfaW5wdXQiLCJfcmVtYWluaW5nIiwiX2VudW1lcmF0ZSIsInJlc29sdmVyIiwibmVlZHNSZXNvbHZlciIsImluaXRpYWxpemVQcm9taXNlIiwibmVlZHNOZXciLCJsb2NhbCIsInByb21pc2VUb1N0cmluZyIsImNhc3QiLCJfZWFjaEVudHJ5IiwiZW50cnkiLCJyZXNvbHZlJCQiLCJfdGhlbiIsIl9zZXR0bGVkQXQiLCJfd2lsbFNldHRsZUF0IiwiZW51bWVyYXRvciIsInJhY2UiLCJfIiwiX3NldFNjaGVkdWxlciIsInNjaGVkdWxlRm4iLCJfc2V0QXNhcCIsImFzYXBGbiIsIl9hc2FwIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwiYnJvd3NlciIsImVudiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwiVFlQRSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRCdWlsdEluIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImludGVybmFsT2JqZWN0S2V5cyIsImludGVnZXIiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImRpc3BsYXkiLCJjb250ZW50V2luZG93IiwiRiIsIlByb3BlcnRpZXMiLCJvYmplY3RLZXlzIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsImVudHJ5VW5iaW5kIiwiJCIsIiRpbmNsdWRlcyIsImFkZFRvVW5zY29wYWJsZXMiLCJwcm90byIsImFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoIiwiSWRlYXNEZXRhaWxzIiwiaWRlYUlkIiwic2hvd1ZvdGVCdXR0b25zIiwic2hvd0xhYmVscyIsInNoYXJlQ2hhbm5lbHNTZWxlY3Rpb24iLCJtZXRhRGF0YVRlbXBsYXRlIiwiaXNBY3RpdmUiLCJmb3JtSW50cm8iLCJpZ25vcmVSZWFjdGlvbnNGb3JJZGVhSWRzIiwiY2xvc2VSZWFjdGlvbnNGb3JJZGVhSWRzIiwicG9sbCIsImNhbkFkZFBvbGxzIiwibGFiZWxzIiwidHlwZXMiLCJ0eXBlRmllbGQiLCJ0eXBlTGFiZWwiLCJzaG93UG9sbEZvcm0iLCJyZWFjdGlvbkFkZGVkTGlzdGVuZXIiLCJvblJlYWN0aW9uU3RvcmVkIiwicmVhY3Rpb25FZGl0ZWRMaXN0ZW5lciIsInJlYWN0aW9uRGVsZXRlZExpc3RlbmVyIiwib25SZWFjdGlvbkRlbGV0ZWQiLCJwb2xsQ3JlYXRlZExpc3RlbmVyIiwib25Qb2xsQ3JlYXRlZCIsInBvbGxEZWxldGVkTGlzdGVuZXIiLCJvblBvbGxEZWxldGVkIiwiZmV0Y2hEYXRhIiwiZWRpdElkZWFMaW5rIiwiaHJlZiIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImlzTmV3IiwiYXJnQ291bnQiLCJoaWRlUG9sbEZvcm0iLCJoYXNoIiwiYWZ0ZXJEZWxldGVJZGVhTGluayIsImxhYmVsSFRNTCIsInR5cGVJZCIsImV2YWwiLCJ0eXBlRGVmIiwiZmluZCIsImRlZiIsImxhYmVsVGV4dCIsImxhYmVsIiwiYmFja2dyb3VuZENvbG9yIiwidGV4dENvbG9yIiwiY29sb3IiLCJwb2xsSFRNTCIsImFkZFBvbGxCdXR0b25IVE1MIiwiY2FuIiwiZWRpdCIsImRpc3BhdGNoQWRkUG9sbENsaWNrIiwidm90ZUJ1dHRvbnNIVE1MIiwib3BpbmlvbiIsInllcyIsImVkaXRCdXR0b25zSFRNTCIsImRpc3BhdGNoRWRpdElkZWFDbGljayIsImNvbmZpcm0iLCJkZWxldGVJZGVhIiwibW9kQnJlYWtIVE1MIiwibW9kQnJlYWsiLCJtb2RCcmVha0RhdGVIdW1hbml6ZWQiLCJyZWFjdGlvbnNDb3VudEhUTUwiLCJyZWFjdGlvbnNIVE1MIiwiaXNDbG9zZWQiLCJsb2dpblVybCIsInNoYXJlQnV0dG9uc0hUTUwiLCJmYWNlYm9va0J1dHRvbkhUTUwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0d2l0dGVyQnV0dG9uSFRNTCIsIm1haWxCdXR0b25IVE1MIiwidGl0bGVGaWVsZCIsIndoYXRzYXBwQnV0dG9uSFRNTCIsImF1dGhvckhUTUwiLCJuaWNrTmFtZSIsImZ1bGxOYW1lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJsaW5rVG9Vc2VyUGFnZVVybCIsIm1ldGFEYXRhSFRNTCIsImNyZWF0ZURhdGVIdW1hbml6ZWQiLCJ0aGVtZSIsInVzZXJuYW1lIiwic3VtbWFyeSIsIk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIiwiYXJndW1lbnRJZCIsImRlc2NyaXB0aW9uTWluTGVuZ3RoIiwiZGVzY3JpcHRpb25NYXhMZW5ndGgiLCJyZXF1aXJlZFVzZXJSb2xlIiwiaXNCdXN5IiwiY2FuU3VibWl0IiwiYWxlcnQiLCJwYXJlbnRJZCIsInNlbnRpbWVudCIsIm9uU3VibWl0IiwibWVzc2FnZXMiLCJzdWJtaXRCdXR0b25IVE1MIiwic3VibWl0Rm9ybSIsIk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24iLCJpc01lbnVBY3RpdmUiLCJpc1JlcGx5RnJvbUFjdGl2ZSIsImVkaXRNb2RlIiwibmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lciIsIm9uTmV3UmVhY3Rpb25TdG9yZWQiLCJvblJlYWN0aW9uRWRpdGVkIiwid2hhdCIsInJlcGx5IiwiY2FuRGVsZXRlIiwiaXNEZWxldGVkIiwiY2FuTGlrZSIsImhhc1VzZXJWb3RlZCIsInJlYWN0aW9uIiwiaXNBZG1pbiIsIm1ldGFkYXRhSFRNTCIsIm1lbnVIVE1MIiwiY2FuRWRpdCIsInNob3dNZW51Iiwic3VibWl0RGVsZXRlIiwidG9nZ2xlRWRpdEZvcm0iLCJlZGl0Rm9ybSIsImxpa2VCdXR0b25IVE1MIiwic3VibWl0TGlrZSIsInJlcGx5QnV0dG9uSFRNTCIsInJlcGx5Rm9ybUhUTUwiLCJjYW5SZXBseSIsInRvZ2dsZVJlcGx5Rm9ybSIsInJlcGxpZXNIVE1MIiwicmVhY3Rpb25zIiwiT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMiLCJzY3JvbGxUb05ld1JlYWN0aW9uIiwiY2xvc2VkVGV4dCIsInNvcnQiLCJjcmVhdGVkQXQiLCJnZXRFbGVtZW50QnlJZCIsInJlYWN0aW9uRm9ybUhUTUwiLCJPcGVuU3RhZENvbXBvbmVudFBvbGxGb3JtIiwicXVlc3Rpb25NaW5MZW5ndGgiLCJxdWVzdGlvbk1heExlbmd0aCIsInRpdGxlTWluTGVuZ3RoIiwidGl0bGVNYXhMZW5ndGgiLCJhbGxvd0Nob2ljZVRpdGxlcyIsInBvbGxJZCIsInF1ZXN0aW9uIiwicXVlc3Rpb25JbnB1dCIsInRpdGxlSW5wdXQiLCJkZXNjcmlwdGlvbklucHV0IiwidmFsaWRhdGVkUmVzdWx0Iiwib25GaW5pc2hlZCIsInRpdGxlSW5wdXRIVE1MIiwiYWRkQ2hvaWNlIiwiT3BlblN0YWRDb21wb25lbnRQb2xsIiwid2l0aFBlcmNlbnRhZ2UiLCJhbGxvd1Nob3dSZXN1bHRzSWZOb3RWb3RlZCIsImhpZGVFZGl0Rm9ybSIsInNlbGVjdGVkQ2hvaWNlIiwic2hvd1Jlc3VsdCIsInNob3dRdWVzdGlvbiIsInNob3dWb3RlU3VjY2VlZGVkIiwicGFyc2VWb3RlQ291bnQiLCJ1c2VyVm90ZSIsInZvdGVDb3VudCIsInZvdGVzQWJzIiwidm90ZXNQcmMiLCJ0b3RhbCIsInF1ZXN0aW9uSFRNTCIsImNob2ljZUhUTUwiLCJzdWJtaXRWb3RlIiwic2hvd1Jlc3VsdEJ1dHRvbkhUTUwiLCJzZXRTaG93UmVzdWx0Iiwic2VsZWN0Q2hvaWNlIiwicmVzdWx0SFRNTCIsInNob3dRdWVzdGlvbkJ1dHRvbkhUTUwiLCJzZXRTaG93UXVlc3Rpb24iLCJ0b3RhbFZvdGVzSFRNTCIsInh4IiwicGVyY2VudGFnZUhUTUwiLCJzY29yZUhUTUwiLCJzaG93RWRpdEZvcm0iLCJkZWxldGVQb2xsIiwidm90ZVN1Y2NlZWRlZEhUTUwiLCJPcGVuU3RhZENvbXBvbmVudElkZWFEZXRhaWxzIiwiVm90ZUJ1dHRvbiIsImJ1c3kiLCJkb1ZvdGUiLCJyZW1vdmUiLCJjaGFuZ2UiLCJ2YWx1ZTAwMCIsInZhbHVlMDAiLCJ2YWx1ZTAiXSwibWFwcGluZ3MiOiI7c0NBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdB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S0FBSzlHLE9BQU9uQyxLQUFqQixvQkFBeUN3TyxVQUFVLG9CQUFvQmt0QixHQUM5RSwyQkFBS3g0QixHQUFFLFVBQUsrRixLQUFLOUcsT0FBT25DLEtBQWpCLG1CQUF3Q3dPLFVBQVUsb0JBQW9CbXRCLElBRTVFLDJCQUFLbnRCLFVBQVMsaUNBQTRCdkYsS0FBSzlHLE9BQU9uQyxLQUF4QyxpQkFBcURpSixLQUFLdEgsTUFBTTJiLEtBQUt3YyxTQUFXLHNCQUF3QixHQUF4RyxZQUE4Rzd3QixLQUFLTCxNQUFNeXlCLEtBQU8sWUFBYyxJQUFNM29CLE1BQU8sQ0FBRW1nQixNQUFPNXBCLEtBQUs5RyxPQUFPMHdCLE1BQU9GLGdCQUFpQjFwQixLQUFLOUcsT0FBT3d3QixpQkFBbUI5ZixRQUFVLFNBQUN2SixHQUFELE9BQU94SCxFQUFLdzVCLE9BQU9oeUIsS0FDbFJ4SCxFQUFLSyxPQUFPOFUsTUFFWiwyQkFBS3pJLFVBQVUseUIsOEJBbEdpQjlNLE0iLCJmaWxlIjoiaWRlYS1kZXRhaWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDk3KTtcbiIsIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dbXCJSZWFjdFwiXTsgfSgpKTsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnY29yZS1qcy9lcy9hcnJheS9pbmNsdWRlcyc7XG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBkZWZhdWx0Q29uZmlnID0ge30sIGRlZmF1bHRkZWZhdWx0Q29uZmlnID0ge30pIHtcblxuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGlmIChwcm9wcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBPYmplY3Qua2V5cyhwcm9wcy5hdHRyaWJ1dGVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IHByb3BzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgc2VsZlthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG5cblx0XHQvLyBjb25maWdcbiAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnID09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZWxmLmNvbmZpZyA9IEpTT04ucGFyc2Uoc2VsZi5jb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgIH1cbiAgICBsZXQgcHJvcHNDb25maWcgPSBwcm9wcy5jb25maWcgfHwge307XG4gICAgcHJvcHNDb25maWcgPSByZW1vdmVVbmRlZkFuZE51bGwocHJvcHNDb25maWcpOyAvLyByZW1vdmUgdW5kZWZpbmVkIGFuZCBudWxsXG5cdFx0c2VsZi5jb25maWcgPSBtZXJnZS5yZWN1cnNpdmUoe1xuICAgICAgc2l0ZUlkOiBudWxsLFxuXHRcdFx0YXBpOiB7XG4gICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgaGVhZGVyczogbnVsbCxcbiAgICAgICAgaXNVc2VyTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHt9LFxuICAgIH0sIGRlZmF1bHRDb25maWcsIGRlZmF1bHRkZWZhdWx0Q29uZmlnLCBwcm9wc0NvbmZpZylcblxuICAgIHNlbGYuZGl2SWQgPSBzZWxmLmRpdklkIHx8ICggc2VsZi5jb25maWcgJiYgc2VsZi5jb25maWcuZGl2SWQgKSB8fCBwcm9wcy5pZCB8fCBgb3BlbnN0YWQtY29tcG9uZW50LSR7ICBwYXJzZUludCggMTAwMDAwMDAwICogTWF0aC5yYW5kb20oKSApfWA7XG4gICAgXG4gICAgd2luZG93W3NlbGYuZGl2SWRdID0gc2VsZjtcblxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAvLyBsZXQgZXZlbnQgPSBuZXcgRXZlbnQoJ2lzUmVhZHknKTtcbiAgICAvLyBzZWxmLmlzUmVhZHkgPSB0cnVlO1xuICAgIC8vIHNlbGYuaW5zdGFuY2UuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiByZW1vdmVVbmRlZkFuZE51bGwob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9ICdvYmplY3QnKSByZXR1cm4gb2JqO1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ3VuZGVmaW5lZCcgfHwgb2JqW2tleV0gPT0gbnVsbCkgZGVsZXRlIG9ialtrZXldO1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ29iamVjdCcpIG9ialtrZXldID0gcmVtb3ZlVW5kZWZBbmROdWxsKG9ialtrZXldKTtcbiAgfSk7XG4gIHJldHVybiAgb2JqO1xufVxuIiwibGV0IG9zY1Nlc3Npb25TdG9yYWdlID0ge307XG5cbm9zY1Nlc3Npb25TdG9yYWdlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcblxuXHR2YXIgdmFsdWUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuXG5cdHRyeSB7XG5cdFx0dmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcblx0fSBjYXRjaChlcnIpIHt9XG5cblx0cmV0dXJuIHZhbHVlO1xuXG59XG5cbm9zY1Nlc3Npb25TdG9yYWdlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPSAnc3RyaW5nJyApIHJldHVybjtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJyApIHZhbHVlID0gXCJcIjtcblx0aWYgKCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdH0gY2F0Y2goZXJyKSB7fVxuXHR9O1xuXG5cdHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oIG5hbWUsIHZhbHVlICk7XG5cbn1cblxuXG5vc2NTZXNzaW9uU3RvcmFnZS5yZW1vdmUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3NjU2Vzc2lvblN0b3JhZ2U7XG4iLCJpbXBvcnQgc2Vzc2lvblN0b3JhZ2UgZnJvbSAnLi4vc2Vzc2lvbi1zdG9yYWdlLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25maWcpIHtcblxuICBsZXQgand0O1xuXG4gIC8vIGp3dCBpbiB1cmxcbiAgbGV0IG1hdGNoID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5tYXRjaCgvKD86XFw/fCYpand0PShbQS1aYS16MC05LV89XStcXC5bQS1aYS16MC05LV89XStcXC4/W0EtWmEtejAtOS1fLisvPV0qKSg/OiZ8JCkvKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgand0ID0gbWF0Y2hbMV07XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0KCdvc2Mtand0Jywgand0KTtcbiAgICBsZXQgc2VhcmNoID0gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoJ2p3dD0nICsgand0LCAnJyk7XG4gICAgaWYgKHNlYXJjaCA9PSAnPycpIHNlYXJjaCA9ICcnO1xuICAgIGRvY3VtZW50LmxvY2F0aW9uLnNlYXJjaCA9IHNlYXJjaDtcbiAgfVxuXG4gIGp3dCA9IHNlc3Npb25TdG9yYWdlLmdldCgnb3NjLWp3dCcpO1xuXG4gIGlmIChjb25maWcgJiYgY29uZmlnLmp3dCkge1xuICAgIGp3dCA9IGNvbmZpZy5qd3Q7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0KCdvc2Mtand0Jywgand0KVxuICB9XG5cbiAgcmV0dXJuIGp3dDtcbiAgXG59XG4iLCJpbXBvcnQgc2Vzc2lvblN0b3JhZ2UgZnJvbSAnLi4vc2Vzc2lvbi1zdG9yYWdlLmpzJztcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi9nZXQtand0LmpzJztcblxubGV0IHJvbGVzID0ge1xuICBhZG1pbjogWydhZG1pbicsICdtb2RlcmF0b3InLCAnZWRpdG9yJywgJ21lbWJlcicsICdhbm9ueW1vdXMnLCAnYWxsJ10sXG4gIG1vZGVyYXRvcjogWydtb2RlcmF0b3InLCAnZWRpdG9yJywgJ21lbWJlcicsICdhbm9ueW1vdXMnLCAnYWxsJ10sXG4gIGVkaXRvcjogWydlZGl0b3InLCAnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgbWVtYmVyOiBbJ21lbWJlcicsICdhbm9ueW1vdXMnLCAnYWxsJ10sXG4gIGFub255bW91czogWydhbm9ueW1vdXMnLCAnYWxsJ10sXG4gIGFsbDogWydhbGwnXSwgICAvLyBzcGVjaWFsXG4gIG93bmVyOiBudWxsLCAvLyBzcGVjaWFsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVzZXIsIHJlcXVpcmVkUm9sZSkge1xuICBsZXQgdXNlclJvbGUgPSB1c2VyLnJvbGU7XG4gIGlmICghT2JqZWN0LmtleXMocm9sZXMpLmluY2x1ZGVzKHVzZXJSb2xlKSkgdXNlclJvbGUgPSAnYWxsJztcbiAgcmV0dXJuIHJvbGVzW3VzZXJSb2xlXS5pbmNsdWRlcyhyZXF1aXJlZFJvbGUpO1xufVxuIiwibGV0IG9zY0xvY2FsU3RvcmFnZSA9IHt9O1xuXG5vc2NMb2NhbFN0b3JhZ2UuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuXG5cdHZhciB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpO1xuXG5cdHRyeSB7XG5cdFx0dmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcblx0fSBjYXRjaChlcnIpIHt9XG5cblx0cmV0dXJuIHZhbHVlO1xuXG59XG5cbm9zY0xvY2FsU3RvcmFnZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXG5cdGlmICggdHlwZW9mIG5hbWUgIT0gJ3N0cmluZycgKSByZXR1cm47XG5cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT0gJ3VuZGVmaW5lZCcgKSB2YWx1ZSA9IFwiXCI7XG5cdGlmICggdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICkge1xuXHRcdHRyeSB7XG5cdFx0XHR2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHR9IGNhdGNoKGVycikge31cblx0fTtcblxuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbSggbmFtZSwgdmFsdWUgKTtcblxufVxuXG5cbm9zY0xvY2FsU3RvcmFnZS5yZW1vdmUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKG5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IG9zY0xvY2FsU3RvcmFnZTtcbiIsIi8vIHBvbHlmaWxsc1xuLy9pbXBvcnQgJ2NvcmUtanMvZXMvbWFwJztcbi8vaW1wb3J0ICdjb3JlLWpzL2VzL3NldCc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIHJlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8vIGltcG9ydCBjc3MgdG8gbWFrZSBzdXJlIGl0IGlzIGdlbmVyYXRlZCBpbiB0aGUgcmVzdWx0XG5pbXBvcnQgJy4vY3NzL2RlZmF1bHQubGVzcyc7XG5cbi8vIHRoZSBtb2R1bGVcbmltcG9ydCBhcGkgZnJvbSAnLi9saWIvYXBpL2luZGV4LmpzJztcbmltcG9ydCB1c2VyIGZyb20gJy4vbGliL3VzZXIvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsU3RvcmFnZSBmcm9tICcuL2xpYi9sb2NhbC1zdG9yYWdlLmpzJztcbmltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuL2xpYi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IHJlYWN0VGVtcGxhdGUgZnJvbSAnLi9saWIvcmVhY3QtdGVtcGxhdGUuanMnO1xuXG5sZXQgT3BlblN0YWRDb21wb25lbnRMaWJzID0ge1xuICBhcGksXG4gIHVzZXIsXG4gIGxvY2FsU3RvcmFnZSxcbiAgc2Vzc2lvblN0b3JhZ2UsXG4gIHJlYWN0VGVtcGxhdGUsXG59XG5leHBvcnQgZGVmYXVsdCBPcGVuU3RhZENvbXBvbmVudExpYnM7XG5cbiIsImltcG9ydCBnZXRIZWFkZXJzIGZyb20gJy4vZ2V0LWhlYWRlcnMuanMnXG5cbmxldCBPcGVuU3RhZENvbXBvbmVudEFQSSA9IHtcbiAgZ2V0SGVhZGVycyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgT3BlblN0YWRDb21wb25lbnRBUEk7XG5cbiIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5pbXBvcnQgZ2V0SldUIGZyb20gJy4uL3VzZXIvZ2V0LWp3dC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbmZpZykge1xuXG4gIGxldCBoZWFkZXJzID0gbWVyZ2UucmVjdXJzaXZlKHsgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCBjb25maWcgJiYgY29uZmlnLmFwaSAmJiBjb25maWcuYXBpLmhlYWRlcnMpO1xuXG4gIGxldCBqd3QgPSBnZXRKV1QoKTtcbiAgaWYgKGp3dCkge1xuICAgIGhlYWRlcnMgPSBtZXJnZS5yZWN1cnNpdmUoeyBcIlgtQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIGp3dCB9LCBoZWFkZXJzKTtcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzO1xuICBcbn1cbiIsImltcG9ydCBnZXRVc2VyIGZyb20gJy4vZ2V0LXVzZXIuanMnXG5pbXBvcnQgZ2V0SldUIGZyb20gJy4vZ2V0LWp3dC5qcydcbmltcG9ydCBsb2dvdXQgZnJvbSAnLi9sb2dvdXQuanMnXG5pbXBvcnQgaGFzUm9sZSBmcm9tICcuL2hhcy1yb2xlLmpzJ1xuXG5sZXQgT3BlblN0YWRDb21wb25lbnRVc2VyID0ge1xuICBnZXRVc2VyLFxuICBnZXRKV1QsXG4gIGxvZ291dCxcbiAgaGFzUm9sZSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgT3BlblN0YWRDb21wb25lbnRVc2VyO1xuXG4iLCJpbXBvcnQgc2Vzc2lvblN0b3JhZ2UgZnJvbSAnLi4vc2Vzc2lvbi1zdG9yYWdlLmpzJztcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi9nZXQtand0LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uZmlnLCBuZXh0KSB7XG5cbiAgbmV4dCA9IG5leHQgfHwgZnVuY3Rpb24odXNlcikge1xuICAgIGNvbnNvbGUubG9nKCdnZXRVc2VyOiBuZXh0IG5vdCBkZWZpbmVkLicpO1xuICAgIGNvbnNvbGUubG9nKHVzZXIpO1xuICB9O1xuXG4gIGxldCB1c2VyID0gY29uZmlnLnVzZXIgfHwgc2Vzc2lvblN0b3JhZ2UuZ2V0KCdvc2MtdXNlcicpO1xuXG4gIGlmICh1c2VyKSB7XG4gICAgLy8gcmV0dXJuIHVzZXJcbiAgICByZXR1cm4gbmV4dChudWxsLCB1c2VyKTtcbiAgfVxuXG4gIC8vIGp3dFxuICBsZXQgand0ID0gZ2V0SldUKGNvbmZpZyk7XG5cbiAgaWYgKCFqd3QpIHtcbiAgICAvLyByZXR1cm4gbm8gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHt9KTtcbiAgfVxuXG4gIC8vIGZldGNoIHVzZXJcbiAgbGV0IHVybCA9IGAke2NvbmZpZy5hcGkudXJsICB9L29hdXRoL3NpdGUvJHsgIGNvbmZpZy5zaXRlSWQgIH0vbWVgO1xuICBsZXQgaGVhZGVycyA9IHsgJ1gtQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHsgIGp3dH1gLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gIGZldGNoKHVybCwgeyBoZWFkZXJzIH0gKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBvbiBmZXRjaCcpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KVxuICAgIC50aGVuKCAoanNvbikgPT4ge1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0KCdvc2MtdXNlcicsIGpzb24pO1xuICAgICAgbmV4dChudWxsLCBqc29uKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBuZXh0KGVycik7XG4gICAgfSk7XG5cbn1cbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGdldEpXVCBmcm9tICcuL2dldC1qd3QuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25maWcsIG5leHQpIHtcblxuICBuZXh0ID0gbmV4dCB8fCBmdW5jdGlvbih1c2VyKSB7XG4gICAgY29uc29sZS5sb2coJ2xvZ291dDogbmV4dCBub3QgZGVmaW5lZC4nKTtcbiAgfVxuXG4gIGxldCB1c2VyID0gY29uZmlnLnVzZXIgfHwgc2Vzc2lvblN0b3JhZ2UuZ2V0KCdvc2MtdXNlcicpO1xuXG4gIGlmICh1c2VyKSB7XG4gICAgLy8gcmV0dXJuIHVzZXJcbiAgICByZXR1cm4gbmV4dChudWxsLCB1c2VyKTtcbiAgfVxuXG4gIC8vIGp3dFxuICBsZXQgand0ID0gZ2V0SldUKGNvbmZpZyk7XG5cbiAgaWYgKCFqd3QpIHtcbiAgICAvLyByZXR1cm4gbm8gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHt9KVxuICB9XG5cbiAgLy8gZmV0Y2ggdXNlclxuICBsZXQgdXJsID0gY29uZmlnLmFwaS51cmwgKyAnL29hdXRoL3NpdGUvJyArIGNvbmZpZy5zaXRlSWQgKyAnL21lJztcbiAgbGV0IGhlYWRlcnMgPSB7ICdYLUF1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBqd3QsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgZmV0Y2godXJsLCB7IGhlYWRlcnMgfSApXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIGZldGNoJylcbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSlcbiAgICAudGhlbigganNvbiA9PiB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy11c2VyJywganNvbilcbiAgICAgIG5leHQobnVsbCwganNvbilcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBuZXh0KGVycilcbiAgICB9KTtcbiAgXG59XG4iLCJpbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuXG4vLyBUT0RPOiBkaXQgd2Vya3QgYWxsZWVuIGFscyBoZXQgZXIgMSBpc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IGh0bWw9JycgfSkge1xuXG4gIGxldCBhcmdzID0gYXJndW1lbnRzWzBdO1xuICBkZWxldGUgYXJncy5odG1sO1xuXG4gIGxldCBtYXRjaGVzID0gMDtcblxuICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKChrZXkpID0+IHtcblxuICAgIGxldCByZWdFeCA9IG5ldyBSZWdFeHAoYF4oKD86LnxcXG58XFxyKSopXFxcXHske2tleX1cXFxcfSgoPzoufFxcbnxcXHIpKikkYCwgJ2cnKTtcbiAgICBsZXQgbWF0Y2ggPSByZWdFeC5leGVjKGh0bWwpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBtYXRjaGVzKys7XG4gICAgICBodG1sID0gKFxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBtYXRjaFsxXSB9fT48L3NwYW4+XG4gICAgICAgIHthcmdzW2tleV19XG4gICAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbWF0Y2hbMl0gfX0+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICApO1xuICAgIH1cblxuICB9KTtcblxuICBpZiAobWF0Y2hlcyA9PSAwKSBodG1sID0gPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBodG1sIH19Pjwvc3Bhbj5cbiAgcmV0dXJuIGh0bWw7XG4gIFxufVxuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIi8qIVxyXG4gKiBAbmFtZSBKYXZhU2NyaXB0L05vZGVKUyBNZXJnZSB2MS4yLjFcclxuICogQGF1dGhvciB5ZWlrb3NcclxuICogQHJlcG9zaXRvcnkgaHR0cHM6Ly9naXRodWIuY29tL3llaWtvcy9qcy5tZXJnZVxyXG5cclxuICogQ29weXJpZ2h0IDIwMTQgeWVpa29zIC0gTUlUIGxpY2Vuc2VcclxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS95ZWlrb3MvanMubWVyZ2UvbWFzdGVyL0xJQ0VOU0VcclxuICovXHJcblxyXG47KGZ1bmN0aW9uKGlzTm9kZSkge1xyXG5cclxuXHQvKipcclxuXHQgKiBNZXJnZSBvbmUgb3IgbW9yZSBvYmplY3RzIFxyXG5cdCAqIEBwYXJhbSBib29sPyBjbG9uZVxyXG5cdCAqIEBwYXJhbSBtaXhlZCwuLi4gYXJndW1lbnRzXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHJcblx0dmFyIFB1YmxpYyA9IGZ1bmN0aW9uKGNsb25lKSB7XHJcblxyXG5cdFx0cmV0dXJuIG1lcmdlKGNsb25lID09PSB0cnVlLCBmYWxzZSwgYXJndW1lbnRzKTtcclxuXHJcblx0fSwgcHVibGljTmFtZSA9ICdtZXJnZSc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIHR3byBvciBtb3JlIG9iamVjdHMgcmVjdXJzaXZlbHkgXHJcblx0ICogQHBhcmFtIGJvb2w/IGNsb25lXHJcblx0ICogQHBhcmFtIG1peGVkLC4uLiBhcmd1bWVudHNcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHRQdWJsaWMucmVjdXJzaXZlID0gZnVuY3Rpb24oY2xvbmUpIHtcclxuXHJcblx0XHRyZXR1cm4gbWVyZ2UoY2xvbmUgPT09IHRydWUsIHRydWUsIGFyZ3VtZW50cyk7XHJcblxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENsb25lIHRoZSBpbnB1dCByZW1vdmluZyBhbnkgcmVmZXJlbmNlXHJcblx0ICogQHBhcmFtIG1peGVkIGlucHV0XHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cclxuXHRQdWJsaWMuY2xvbmUgPSBmdW5jdGlvbihpbnB1dCkge1xyXG5cclxuXHRcdHZhciBvdXRwdXQgPSBpbnB1dCxcclxuXHRcdFx0dHlwZSA9IHR5cGVPZihpbnB1dCksXHJcblx0XHRcdGluZGV4LCBzaXplO1xyXG5cclxuXHRcdGlmICh0eXBlID09PSAnYXJyYXknKSB7XHJcblxyXG5cdFx0XHRvdXRwdXQgPSBbXTtcclxuXHRcdFx0c2l6ZSA9IGlucHV0Lmxlbmd0aDtcclxuXHJcblx0XHRcdGZvciAoaW5kZXg9MDtpbmRleDxzaXplOysraW5kZXgpXHJcblxyXG5cdFx0XHRcdG91dHB1dFtpbmRleF0gPSBQdWJsaWMuY2xvbmUoaW5wdXRbaW5kZXhdKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XHJcblxyXG5cdFx0XHRvdXRwdXQgPSB7fTtcclxuXHJcblx0XHRcdGZvciAoaW5kZXggaW4gaW5wdXQpXHJcblxyXG5cdFx0XHRcdG91dHB1dFtpbmRleF0gPSBQdWJsaWMuY2xvbmUoaW5wdXRbaW5kZXhdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG91dHB1dDtcclxuXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9iamVjdHMgcmVjdXJzaXZlbHlcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcGFyYW0gbWl4ZWQgZXh0ZW5kXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cclxuXHRmdW5jdGlvbiBtZXJnZV9yZWN1cnNpdmUoYmFzZSwgZXh0ZW5kKSB7XHJcblxyXG5cdFx0aWYgKHR5cGVPZihiYXNlKSAhPT0gJ29iamVjdCcpXHJcblxyXG5cdFx0XHRyZXR1cm4gZXh0ZW5kO1xyXG5cclxuXHRcdGZvciAodmFyIGtleSBpbiBleHRlbmQpIHtcclxuXHJcblx0XHRcdGlmICh0eXBlT2YoYmFzZVtrZXldKSA9PT0gJ29iamVjdCcgJiYgdHlwZU9mKGV4dGVuZFtrZXldKSA9PT0gJ29iamVjdCcpIHtcclxuXHJcblx0XHRcdFx0YmFzZVtrZXldID0gbWVyZ2VfcmVjdXJzaXZlKGJhc2Vba2V5XSwgZXh0ZW5kW2tleV0pO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0YmFzZVtrZXldID0gZXh0ZW5kW2tleV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBiYXNlO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIHR3byBvciBtb3JlIG9iamVjdHNcclxuXHQgKiBAcGFyYW0gYm9vbCBjbG9uZVxyXG5cdCAqIEBwYXJhbSBib29sIHJlY3Vyc2l2ZVxyXG5cdCAqIEBwYXJhbSBhcnJheSBhcmd2XHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHJcblx0ZnVuY3Rpb24gbWVyZ2UoY2xvbmUsIHJlY3Vyc2l2ZSwgYXJndikge1xyXG5cclxuXHRcdHZhciByZXN1bHQgPSBhcmd2WzBdLFxyXG5cdFx0XHRzaXplID0gYXJndi5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKGNsb25lIHx8IHR5cGVPZihyZXN1bHQpICE9PSAnb2JqZWN0JylcclxuXHJcblx0XHRcdHJlc3VsdCA9IHt9O1xyXG5cclxuXHRcdGZvciAodmFyIGluZGV4PTA7aW5kZXg8c2l6ZTsrK2luZGV4KSB7XHJcblxyXG5cdFx0XHR2YXIgaXRlbSA9IGFyZ3ZbaW5kZXhdLFxyXG5cclxuXHRcdFx0XHR0eXBlID0gdHlwZU9mKGl0ZW0pO1xyXG5cclxuXHRcdFx0aWYgKHR5cGUgIT09ICdvYmplY3QnKSBjb250aW51ZTtcclxuXHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBpdGVtKSB7XHJcblxyXG5cdFx0XHRcdGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0dmFyIHNpdGVtID0gY2xvbmUgPyBQdWJsaWMuY2xvbmUoaXRlbVtrZXldKSA6IGl0ZW1ba2V5XTtcclxuXHJcblx0XHRcdFx0aWYgKHJlY3Vyc2l2ZSkge1xyXG5cclxuXHRcdFx0XHRcdHJlc3VsdFtrZXldID0gbWVyZ2VfcmVjdXJzaXZlKHJlc3VsdFtrZXldLCBzaXRlbSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBzaXRlbTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0eXBlIG9mIHZhcmlhYmxlXHJcblx0ICogQHBhcmFtIG1peGVkIGlucHV0XHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKlxyXG5cdCAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vdHlwZW9mdmFyXHJcblx0ICovXHJcblxyXG5cdGZ1bmN0aW9uIHR5cGVPZihpbnB1dCkge1xyXG5cclxuXHRcdHJldHVybiAoe30pLnRvU3RyaW5nLmNhbGwoaW5wdXQpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmIChpc05vZGUpIHtcclxuXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IFB1YmxpYztcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR3aW5kb3dbcHVibGljTmFtZV0gPSBQdWJsaWM7XHJcblxyXG5cdH1cclxuXHJcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZSAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKTsiLCIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gd2luZG93W1wiUmVhY3RET01cIl07IH0oKSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBkZWZhdWx0Q29uZmlnID0ge30pIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICBjaG9pY2VzOiBbXSxcblx0XHRcdG5hbWU6ICcnLFxuICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuXHRcdH0sIGRlZmF1bHRDb25maWcpO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgIGVycm9yOiBudWxsLFxuXHRcdH07XG5cbiAgICB0aGlzLm9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2U7XG5cbiAgfVxuXG5cdHZhbGlkYXRlKHsgc2hvd0Vycm9ycyB9KSB7XG5cdFx0bGV0IGlzVmFsaWQgPSB0aGlzLmNvbmZpZy5yZXF1aXJlZCA/ICEhdGhpcy5zdGF0ZS52YWx1ZSA6IHRydWU7XG4gICAgbGV0IGVycm9yID0gJyc7XG4gICAgaWYgKCFpc1ZhbGlkICYmIHNob3dFcnJvcnMpIGVycm9yID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNWYWxpZCwgZXJyb3IgfSlcblx0XHRyZXR1cm4gaXNWYWxpZDtcblx0fVxuXG5cdGhhbmRsZU9uQ2hhbmdlKGRhdGEpIHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG5cdFx0c2VsZi5zZXRTdGF0ZShkYXRhLCAoKSA9PiB7XG4gICAgICBzZWxmLnZhbGlkYXRlKHt9KTtcbiAgICB9KVxuXHRcdGlmICh0eXBlb2Ygc2VsZi5vbkNoYW5nZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRzZWxmLm9uQ2hhbmdlKHsgbmFtZTogc2VsZi5jb25maWcubmFtZSwgdmFsdWU6IGRhdGEudmFsdWUgfSk7XG5cdFx0fVxuXHR9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFNlbGVjdCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG4gICAgXG4gICAgcmV0dXJuIChcblx0XHRcdDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogc2VsZi5pbnB1dC52YWx1ZSB9KX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCBmcm9tICcuL2RlZmF1bHQtaW5wdXQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRTZWxlY3QgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICBhbGxvd011bHRpcGxlOiBmYWxzZSxcblx0XHRcdGltYWdlc2VydmVyOiB7XG5cdFx0XHRcdHByb2Nlc3M6ICcnLFxuXHRcdFx0XHRmZXRjaDogJydcblx0XHRcdH0sXG4gICAgfSk7XG5cbiAgICB2YXIgdXBsb2FkZWRGaWxlcyA9IFtdO1xuICAgIGxldCB2YWx1ZSA9IHByb3BzLnZhbHVlIHx8IFtdO1xuICAgIHZhbHVlLmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgICB1cGxvYWRlZEZpbGVzLnB1c2goe1xuICAgICAgICBzb3VyY2U6IHsgdXJsOiBpbWFnZSB9LFxuICAgICAgICBvcHRpb25zIDoge1xuICAgICAgICAgIHR5cGU6ICdsb2NhbCcsXG4gICAgICAgICAgLy8gbW9jayBmaWxlIGluZm9ybWF0aW9uXG4gICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgbmFtZTogaW1hZ2UsXG4gICAgICAgICAgICAvL1x0XHQgc2l6ZTogMzAwMTAyNSxcbiAgICAgICAgICAgIC8vXHQgdHlwZTogJ2ltYWdlL3BuZydcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICBwb3N0ZXI6IGltYWdlLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB1cGxvYWRlZEZpbGVzOiB1cGxvYWRlZEZpbGVzLFxuICAgIH1cblxuICB9XG5cblx0Y29tcG9uZW50RGlkTW91bnQocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAvLyBmaWxlcG9uZCBmaWxlc1xuXHRcdHRoaXMuX2xvYWRlZEZpbGVzID0gMDtcbiAgICB0aGlzLmZpbGVzID0gW1xuICAgICAgXCJodHRwczovL3VucGtnLmNvbS9maWxlcG9uZC9kaXN0L2ZpbGVwb25kLmpzXCIsXG4gICAgICBcImh0dHBzOi8vdW5wa2cuY29tL2ZpbGVwb25kLXBvbHlmaWxsL2Rpc3QvZmlsZXBvbmQtcG9seWZpbGwuanNcIixcbiAgICAgIFwiaHR0cHM6Ly91bnBrZy5jb20vZmlsZXBvbmQtcGx1Z2luLWltYWdlLXByZXZpZXcvZGlzdC9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy5qc1wiLFxuICAgICAgXCJodHRwczovL3VucGtnLmNvbS9maWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS10eXBlL2Rpc3QvZmlsZXBvbmQtcGx1Z2luLWZpbGUtdmFsaWRhdGUtdHlwZS5qc1wiLFxuICAgICAgXCJodHRwczovL3VucGtnLmNvbS9maWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS1zaXplL2Rpc3QvZmlsZXBvbmQtcGx1Z2luLWZpbGUtdmFsaWRhdGUtc2l6ZS5qc1wiLFxuICAgICAgXCJodHRwczovL3VucGtnLmNvbS9maWxlcG9uZC1wbHVnaW4tZmlsZS1wb3N0ZXIvZGlzdC9maWxlcG9uZC1wbHVnaW4tZmlsZS1wb3N0ZXIuanNcIixcbiAgICBdO1xuICAgIHRoaXMubG9hZE5leHRGaWxlKCk7XG5cbiAgfVxuICBcbiAgbG9hZE5leHRGaWxlKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZmlsZSA9IHNlbGYuZmlsZXNbc2VsZi5fbG9hZGVkRmlsZXNdO1xuICAgIGlmIChmaWxlKSB7XG5cdFx0XHRsZXQgZWxlbWVudDtcblx0XHRcdGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRcdGVsZW1lbnQuc3JjID0gZmlsZTtcblx0XHRcdGVsZW1lbnQuYXN5bmMgPSB0cnVlO1xuXHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0ZWxlbWVudC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmxvYWROZXh0RmlsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHR9XG4gICAgfVxuXHRcdGlmIChzZWxmLl9sb2FkZWRGaWxlcyA9PSBzZWxmLmZpbGVzLmxlbmd0aCkge1xuICAgICAgc2VsZi5maWxlVXBsb2FkZXJJbml0KClcbiAgICB9XG5cdFx0c2VsZi5fbG9hZGVkRmlsZXMrKztcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMuaW1hZ2V1cGxvYWRlciAmJiB0aGlzLmltYWdldXBsb2FkZXIuZ2V0RmlsZXMgKSB7XG5cdFx0XHR2YXIgaW1hZ2VzID0gdGhpcy5pbWFnZXVwbG9hZGVyLmdldEZpbGVzKCk7XG5cdFx0XHRpbWFnZXMuZm9yRWFjaChmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRpZiAoIWltYWdlLnNlcnZlcklkKSB7XG5cdFx0XHRcdFx0aXNWYWxpZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG4gICAgcmV0dXJuIGlzVmFsaWQ7XG4gIH1cblxuICBmaWxlVXBsb2FkZXJJbml0KCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0dmFyIGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3NjLWltYWdlLXVwbG9hZC1jb250YWluZXInKTtcblx0XHRpZiAoY29udGFpbmVyRWxlbWVudCkge1xuXHRcdFx0RmlsZVBvbmQucmVnaXN0ZXJQbHVnaW4oRmlsZVBvbmRQbHVnaW5JbWFnZVByZXZpZXcpO1xuXHRcdFx0RmlsZVBvbmQucmVnaXN0ZXJQbHVnaW4oRmlsZVBvbmRQbHVnaW5GaWxlVmFsaWRhdGVTaXplKTtcblx0XHRcdEZpbGVQb25kLnJlZ2lzdGVyUGx1Z2luKEZpbGVQb25kUGx1Z2luRmlsZVZhbGlkYXRlVHlwZSk7XG5cdFx0XHRGaWxlUG9uZC5yZWdpc3RlclBsdWdpbihGaWxlUG9uZFBsdWdpbkZpbGVQb3N0ZXIpO1xuXG5cdFx0XHQvLyBGaWxlUG9uZC5zZXRPcHRpb25zKHtcblx0XHRcdC8vICAgc2VydmVyOiAnaHR0cHM6Ly9pbWFnZS1zZXJ2ZXIyLm9wZW5zdGFkc2RlZWwubmwvaW1hZ2UvP2FjY2Vzc190b2tlbj1NSGhmYjVVMG04dnF1QVI4MXAnLFxuXHRcdFx0Ly8gfSk7XG4gICAgICBcblx0XHRcdHZhciBmaWxlUG9uZFNldHRpbmdzID0ge1xuXHRcdFx0XHQvLyBzZXQgYWxsb3dlZCBmaWxlIHR5cGVzIHdpdGggbWltZSB0eXBlc1xuXHRcdFx0XHRhY2NlcHRlZEZpbGVUeXBlczogWydpbWFnZS8qJ10sXG5cdFx0XHRcdGFsbG93RmlsZVNpemVWYWxpZGF0aW9uOiB0cnVlLFxuICAgICAgICBhbGxvd011bHRpcGxlOiB0aGlzLmNvbmZpZy5hbGxvd011bHRpcGxlLFxuICAgICAgICBhbGxvd1Jlb3JkZXI6IHRydWUsXG4gICAgICAgIHN0eWxlSXRlbVBhbmVsQXNwZWN0UmF0aW86IDEsXG5cdFx0XHRcdG1heEZpbGVTaXplOiAnOG1iJyxcblx0XHRcdFx0bmFtZTogJ2ltYWdlJyxcblx0XHRcdFx0bWF4RmlsZXM6IDUsXG5cdFx0XHRcdGFsbG93QnJvd3NlOiB0cnVlLFxuXHRcdFx0XHRmaWxlczogdGhpcy5zdGF0ZS51cGxvYWRlZEZpbGVzLFxuXHRcdFx0XHRzZXJ2ZXI6IHtcblx0XHRcdFx0XHRwcm9jZXNzOiB0aGlzLmNvbmZpZy5pbWFnZXNlcnZlci5wcm9jZXNzLFxuXHRcdFx0XHRcdGZldGNoOiB0aGlzLmNvbmZpZy5pbWFnZXNlcnZlci5mZXRjaCxcblx0XHRcdFx0fSxcblx0XHRcdFx0aW1hZ2VSZXNpemVUYXJnZXRXaWR0aDogODAsXG5cdFx0XHRcdGltYWdlUmVzaXplVGFyZ2V0SGVpZ2h0OiA4MCxcblx0XHRcdFx0aW1hZ2VDcm9wQXNwZWN0UmF0aW86ICcxOjEnLFxuXHRcdFx0XHRsYWJlbElkbGU6IFwiU2xlZXAgYWZiZWVsZGluZyhlbikgbmFhciBkZXplIHBsZWsgb2YgPHNwYW4gY2xhc3M9J2ZpbGVwb25kLS1sYWJlbC1hY3Rpb24nPktMSUsgSElFUjwvc3Bhbj5cIixcblx0XHRcdFx0bGFiZWxJbnZhbGlkRmllbGQ6IFwiRmllbGQgY29udGFpbnMgaW52YWxpZCBmaWxlc1wiLFxuXHRcdFx0XHRsYWJlbEZpbGVXYWl0aW5nRm9yU2l6ZTogXCJXYWNodGVuZCBvcCBncm9vdHRlXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVNpemVOb3RBdmFpbGFibGU6IFwiR3Jvb3R0ZSBuaWV0IGJlc2NoaWtiYWFyXCIsXG5cdFx0XHRcdGxhYmVsRmlsZUNvdW50U2luZ3VsYXI6IFwiQmVzdGFuZCBpbiBsaWpzdFwiLFxuXHRcdFx0XHRsYWJlbEZpbGVDb3VudFBsdXJhbDogXCJCZXN0YW5kZW4gaW4gbGlqc3RcIixcblx0XHRcdFx0bGFiZWxGaWxlTG9hZGluZzogXCJMYWRlblwiLFxuXHRcdFx0XHRsYWJlbEZpbGVBZGRlZDogXCJUb2VnZXZvZWdkXCIsIC8vIGFzc2lzdGl2ZSBvbmx5XG5cdFx0XHRcdGxhYmVsRmlsZUxvYWRFcnJvcjogXCJGb3V0IGJpaiBoZXQgdXBsb2FkZW5cIixcblx0XHRcdFx0bGFiZWxGaWxlUmVtb3ZlZDogXCJWZXJ3aWpkZXJkXCIsIC8vIGFzc2lzdGl2ZSBvbmx5XG5cdFx0XHRcdGxhYmVsRmlsZVJlbW92ZUVycm9yOiBcIkZvdXQgYmlqIGhldCB2ZXJ3aWpkZXJlblwiLFxuXHRcdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nOiBcIkxhZGVuXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVByb2Nlc3NpbmdDb21wbGV0ZTogXCJBZmJlZWxkaW5nIGdlbGFkZW5cIixcblx0XHRcdFx0bGFiZWxGaWxlUHJvY2Vzc2luZ0Fib3J0ZWQ6IFwiVXBsb2FkIGNhbmNlbGxlZFwiLFxuXHRcdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nRXJyb3I6IFwiRXJyb3IgZHVyaW5nIHVwbG9hZFwiLFxuXHRcdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nUmV2ZXJ0RXJyb3I6IFwiRXJyb3IgZHVyaW5nIHJldmVydFwiLFxuXHRcdFx0XHRsYWJlbFRhcFRvQ2FuY2VsOiBcInRhcCB0byBjYW5jZWxcIixcblx0XHRcdFx0bGFiZWxUYXBUb1JldHJ5OiBcInRhcCB0byByZXRyeVwiLFxuXHRcdFx0XHRsYWJlbFRhcFRvVW5kbzogXCJ0YXAgdG8gdW5kb1wiLFxuXHRcdFx0XHRsYWJlbEJ1dHRvblJlbW92ZUl0ZW06IFwiVmVyd2lqZGVyZW5cIixcblx0XHRcdFx0bGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkOiBcIkFib3J0XCIsXG5cdFx0XHRcdGxhYmVsQnV0dG9uUmV0cnlJdGVtTG9hZDogXCJSZXRyeVwiLFxuXHRcdFx0XHRsYWJlbEJ1dHRvbkFib3J0SXRlbVByb2Nlc3Npbmc6IFwiVmVyd2lqZGVyXCIsXG5cdFx0XHRcdGxhYmVsQnV0dG9uVW5kb0l0ZW1Qcm9jZXNzaW5nOiBcIlVuZG9cIixcblx0XHRcdFx0bGFiZWxCdXR0b25SZXRyeUl0ZW1Qcm9jZXNzaW5nOiBcIlJldHJ5XCIsXG5cdFx0XHRcdGxhYmVsQnV0dG9uUHJvY2Vzc0l0ZW06IFwiVXBsb2FkXCJcblx0XHRcdH1cblxuICAgICAgc2VsZi5pbWFnZXVwbG9hZGVyID0gRmlsZVBvbmQuY3JlYXRlKGNvbnRhaW5lckVsZW1lbnQsIGZpbGVQb25kU2V0dGluZ3MpO1xuXHRcdFx0dmFyIHNvcnRhYmxlSW5zdGFuY2U7XG5cdFx0XHR2YXIgcG9uZEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbGVwb25kLS1yb290Jyk7XG5cbiAgICAgIC8vIHRtcFxuICAgICAgLy9zZWxmLnN0YXRlLnZhbHVlID0gW1wiaHR0cHM6Ly9pbWFnZS1zZXJ2ZXIuc3RhZ2luZy5vcGVuc3RhZHNkZWVsLm5sL2ltYWdlLzg1ZWY1NjY5ZDlhNWRiMmYwZWMyYWRiNjMxMDYyMGJlXCJdXG4gICAgICAvL3NlbGYucHJvcHMuaGFuZGxlRmllbGRDaGFuZ2Uoc2VsZi5wcm9wcy5uYW1lLCBzZWxmLnN0YXRlLnZhbHVlIClcblxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbGVwb25kLS1yb290JykuYWRkRXZlbnRMaXN0ZW5lcignRmlsZVBvbmQ6cHJvY2Vzc2ZpbGUnLCBlID0+IHtcblx0XHRcdFx0aWYgKGUuZGV0YWlsICYmIGUuZGV0YWlsLmVycm9yKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0Vycm9yIHVwbG9kaW5nIGZpbGU6ICcsIGUuZGV0YWlsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLmZpbGVVcGxvYWRlclVwZGF0ZUN1cnJlbnRJbnB1dCgpXG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbGVwb25kLS1yb290JykuYWRkRXZlbnRMaXN0ZW5lcignRmlsZVBvbmQ6cmVtb3ZlZmlsZScsIGUgPT4ge1xuXHRcdFx0XHRpZiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwuZXJyb3IpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3IgdXBsb2RpbmcgZmlsZTogJywgZS5kZXRhaWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZmlsZVVwbG9hZGVyVXBkYXRlQ3VycmVudElucHV0KClcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoc2VsZi5zdGF0ZS5mb3JtZmllbGRzKSB7XG5cdFx0XHRcdHNlbGYuaW1hZ2V1cGxvYWRlci5hZGRGaWxlcyhzZWxmLnN0YXRlLmZvcm1maWVsZHMuaW1hZ2VzKVxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuICBmaWxlVXBsb2FkZXJVcGRhdGVDdXJyZW50SW5wdXQoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuc3RhdGUudmFsdWUgPSBbXTtcblx0XHRpZiAoIHRoaXMuaW1hZ2V1cGxvYWRlciAmJiB0aGlzLmltYWdldXBsb2FkZXIuZ2V0RmlsZXMgKSB7XG5cdFx0XHR2YXIgaW1hZ2VzID0gdGhpcy5pbWFnZXVwbG9hZGVyLmdldEZpbGVzKCk7XG5cdFx0XHRpbWFnZXMuZm9yRWFjaCgoaW1hZ2UpID0+IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgc2VydmVySWQgPSB0eXBlb2YgaW1hZ2Uuc2VydmVySWQgPT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGltYWdlLnNlcnZlcklkKSA6IGltYWdlLnNlcnZlcklkO1xuXHRcdFx0XHRcdHNlbGYuc3RhdGUudmFsdWUucHVzaChzZXJ2ZXJJZC51cmwpXG5cdFx0XHRcdH0gY2F0Y2goZXJyKSB7IGNvbnNvbGUubG9nKGVycikgfVxuXHRcdFx0fSk7XG5cdFx0fVxuICAgIHNlbGYucHJvcHMub25DaGFuZ2Uoe25hbWU6IHNlbGYuY29uZmlnLm5hbWUsIHZhbHVlOiBzZWxmLnN0YXRlLnZhbHVlfSlcblx0fVxuXG4gIGZpbGVVcGxvYWRlclVwbG9hZGVyQWRkSW1hZ2VzKGltYWdlcykge1xuICAgIGxldCBzZWxmID0gdGhpcztcblxuXHRcdGlmICh0aGlzLmltYWdldXBsb2FkZXIpIHtcblx0XHRcdHRoaXMuaW1hZ2V1cGxvYWRlci5hZGRGaWxlcyhpbWFnZXMpXG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yXCI+SmUgaGVidCBub2cgZ2VlbiBhZmJlZWxkaW5nIGdldXBsb2FkPC9kaXY+KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtdXBsb2FkLWNvbnRhaW5lclwiPlxuXHRcdFx0XHQ8aW5wdXQgdHlwZT1cImZpbGVcIiBjbGFzc05hbWU9XCJpbWFnZVVwbG9hZGVyLWdlYmllZHN0b29sIGZpbGVwb25kLWdlYmllZHN0b29sXCIvPlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbi8vIFRPRE86IGl0IGlzIHByb2JhYmx5IG5vdCBvayB0byB3cml0ZSB5b3VyIG93biBodG1sIGVkaXRvciwgYnV0IGFmdGVyIGludGVyZ3JhdGluZyBja2VkaXRvciBvciByZWFjdC1ydGUgdGhlIGJ1aWxkIHdhcyAobW9yZSB0aGFuKSB0d2ljZSBhcyBsYXJnZTsgYSBiZXR0dGVyIHNvbHV0aW9uIG11c3QgYmUgcG9zc2libGVcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEhUTUxBcmVhIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQgIHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcblx0ICB9O1xuXG4gICAgdGhpcy5vbktleVVweCA9IHRoaXMub25LZXlVcHguYmluZCh0aGlzKTtcblxuICB9XG5cblx0Y29tcG9uZW50RGlkTW91bnQocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIHZhbHVlID0gdGhpcy5maWx0ZXJIVE1MKHZhbHVlKTtcbiAgICB0aGlzLmlucHV0LmlubmVySFRNTCA9IHZhbHVlO1xuICB9XG5cbiAgZmlsdGVySFRNTCh2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvPChcXC8/XFxzKig/OmEgW14+XSt8YXxifGl8c3Ryb25nfGVtfHB8ZGl2fGJyfHVsfGxpKVxccypcXC8/KT4vZywgXCJbW1skMV1dXVwiKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLzxbXj5dKz4vZywgXCJcIik7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFtcXFtcXFsoW15cXF1dKylcXF1cXF1cXF0vZywgXCI8JDE+XCIpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGV4ZWN1dGVBY3Rpb24oZSwgY29tbWFuZCwgYXJncykge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoY29tbWFuZCxmYWxzZSxhcmdzKTtcbiAgICB0aGlzLm9uS2V5VXAoKTtcbiAgfVxuICBcbiAgb25Gb2N1cyhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cihlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoeyB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBvbktleVVweCgpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0LmlubmVySFRNTDtcbiAgICB2YWx1ZSA9IHRoaXMuZmlsdGVySFRNTCh2YWx1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlIH0pXG4gICAgaWYgKHRoaXMucHJvcHMub25LZXlVcCkge1xuICAgICAgdGhpcy5wcm9wcy5vbktleVVwKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbnNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1odG1sLWVkaXRvci1idXR0b24gb3NjLWh0bWwtZWRpdG9yLWJ1dHRvbi1ib2xkXCIgb25Nb3VzZURvd249e2UgPT4gdGhpcy5leGVjdXRlQWN0aW9uKGUsICdib2xkJyl9PiZuYnNwOzwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbiBvc2MtaHRtbC1lZGl0b3ItYnV0dG9uLWl0YWxpY1wiIG9uTW91c2VEb3duPXtlID0+IHRoaXMuZXhlY3V0ZUFjdGlvbihlLCAnaXRhbGljJyl9PiZuYnNwOzwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbiBvc2MtaHRtbC1lZGl0b3ItYnV0dG9uLWluc2VydHVub3JkZXJlZGxpc3RcIiBvbk1vdXNlRG93bj17ZSA9PiB0aGlzLmV4ZWN1dGVBY3Rpb24oZSwgJ2luc2VydHVub3JkZXJlZGxpc3QnKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3ItYnV0dG9uIG9zYy1odG1sLWVkaXRvci1idXR0b24tY3JlYXRlbGlua1wiIG9uTW91c2VEb3duPXtlID0+IHRoaXMuZXhlY3V0ZUFjdGlvbihlLCAnY3JlYXRlbGluaycsIHByb21wdCgnTGFuayBuYWFyJywnaHR0cDovLycpKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1odG1sLWVkaXRvci1jb250ZW50XCIgY29udGVudEVkaXRhYmxlPXt0cnVlfVxuICAgICAgICAgICAgIG9uRm9jdXM9eyBlID0+IHRoaXMub25Gb2N1cyhlKX1cbiAgICAgICAgICAgICBvbkJsdXI9eyBlID0+IHRoaXMub25CbHVyKGUpfVxuICAgICAgICAgICAgIG9uS2V5VXA9eyBlID0+IHRoaXMub25LZXlVcHgoKX1cbiAgICAgICAgICAgICAvLyBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuc3RhdGUudmFsdWUgfX1cbiAgICAgICAgICAgICByZWY9e2VsID0+ICh0aGlzLmlucHV0ID0gZWwpfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIEVkaXRCdXR0b24ocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBrZXk9e3Byb3BzLmNtZH1cbiAgICAgIG9uTW91c2VEb3duPXtldnQgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsgLy8gQXZvaWRzIGxvb3NpbmcgZm9jdXMgZnJvbSB0aGUgZWRpdGFibGUgYXJlYVxuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChwcm9wcy5jbWQsIGZhbHNlLCBwcm9wcy5hcmcpOyAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBicm93c2VyXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtwcm9wcy5uYW1lIHx8IHByb3BzLmNtZH1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy9pbXBvcnQgQ0tFZGl0b3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS1yZWFjdCc7XG4vL2ltcG9ydCBDbGFzc2ljRWRpdG9yIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtYnVpbGQtY2xhc3NpYyc7XG5pbXBvcnQgSFRNTEFyZWEgZnJvbSAnLi9odG1sYXJlYS5qc3gnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1maWVsZElucHV0V2l0aENvdW50ZXIgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG5cdFx0XHRuYW1lOiAndGVrc3QnLFxuXHRcdFx0aW5wdXRUeXBlOiAnaW5wdXQnLFxuXHRcdFx0bWluTGVuZ3RoOiA1LFxuXHRcdFx0bWF4TGVuZ3RoOiAxMDI0LFxuICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuaWQgPSBwcm9wcy5pZCB8fCAnb3NjLWZvcm1maWVsZHMtcGxhaW50ZXh0LXdpdGgtY291bnRlci0nICsgcGFyc2VJbnQoIDEwMDAwMDAgKiBNYXRoLnJhbmRvbSgpIClcblxuICAgIHNlbGYuc3RhdGUgPSB7XG5cdFx0XHRmb2N1c2VkOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSB8fCAnJyxcblx0XHRcdHZhbHVlTGVuZ3RoOiBwcm9wcy52YWx1ZSAmJiBwcm9wcy52YWx1ZS5sZW5ndGggfHwgMCxcblx0XHR9O1xuXG4gICAgc2VsZi5rZXkgPSBwcm9wcy51c2VLZXkgfHwgKCBzZWxmLmlkIHx8ICdvc2MtaW5wdXQtd2l0aC1jb3VudGVyLScgKSArIHBhcnNlSW50KCAxMDAwMDAwMCAqIE1hdGgucmFuZG9tICk7XG5cbiAgICB0aGlzLm9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2U7XG5cbiAgICBzZWxmLmhhbmRsZU9uQ2hhbmdlID0gc2VsZi5oYW5kbGVPbkNoYW5nZS5iaW5kKHRoaXMpXG4gICAgc2VsZi5vbklucHV0Rm9jdXMgPSBzZWxmLm9uSW5wdXRGb2N1cy5iaW5kKHRoaXMpXG4gICAgc2VsZi5vbklucHV0Qmx1ciA9IHNlbGYub25JbnB1dEJsdXIuYmluZCh0aGlzKVxuICAgIHNlbGYub25JbnB1dEtleVVwID0gc2VsZi5vbklucHV0S2V5VXAuYmluZCh0aGlzKVxuXG4gIH1cblxuXHRpc1ZhbGlkKCkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLmlzVmFsaWQgPSB0cnVlO1xuXHRcdHN0YXRlLndhcm5pbmcgPSBudWxsO1xuXHRcdGlmICh0aGlzLnN0YXRlLnZhbHVlTGVuZ3RoIDwgdGhpcy5jb25maWcubWluTGVuZ3RoKSB7XG5cdFx0XHRzdGF0ZS53YXJuaW5nID0gYERlIHRla3N0IGlzIHRlIGtvcnRgO1xuXHRcdFx0c3RhdGUuaXNWYWxpZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zdGF0ZS52YWx1ZUxlbmd0aCA+IHRoaXMuY29uZmlnLm1heExlbmd0aCkge1xuXHRcdFx0c3RhdGUud2FybmluZyA9IGBEZSB0ZWtzdCBpcyB0ZSBsYW5nYDtcblx0XHRcdHN0YXRlLmlzVmFsaWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSlcblx0XHRyZXR1cm4gc3RhdGUuaXNWYWxpZDtcbiAgfVxuXG5cdHZhbGlkYXRlKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoeyBzaG93V2FybmluZzogdHJ1ZSB9KVxuXHRcdHJldHVybiB0aGlzLmlzVmFsaWQoKTtcblx0fVxuICBcblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdHRoaXMuc2V0U3RhdGUoZGF0YSlcblx0XHRpZiAodHlwZW9mIHRoaXMub25DaGFuZ2UgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5vbkNoYW5nZSh7IG5hbWU6IHRoaXMuY29uZmlnLm5hbWUsIHZhbHVlOiBkYXRhLnZhbHVlIH0pO1xuXHRcdH1cblx0fVxuXG5cdG9uSW5wdXRGb2N1cygpIHtcblx0XHRsZXQgc3RhdGUgPSB7fTtcblx0XHRzdGF0ZS5mb2N1c2VkID0gdHJ1ZTtcblx0XHRzdGF0ZS5zaG93V2FybmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUpXG5cdH1cblxuXHRvbklucHV0Qmx1cigpIHtcblx0XHRsZXQgc3RhdGUgPSB7fTtcblx0XHRzdGF0ZS5mb2N1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSlcblx0fVxuXG5cdG9uSW5wdXRLZXlVcCh2YWx1ZSkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLnZhbHVlID0gdmFsdWUgfHwgdGhpcy5pbnB1dC52YWx1ZTtcblx0XHRsZXQgdmFsdWVMZW5ndGggPSBzdGF0ZS52YWx1ZS5sZW5ndGg7XG5cdFx0c3RhdGUudmFsdWVMZW5ndGggPSB2YWx1ZUxlbmd0aDtcblx0XHRzdGF0ZS5pc1ZhbGlkID0gdmFsdWVMZW5ndGggPj0gdGhpcy5jb25maWcubWluTGVuZ3RoICYmIHZhbHVlTGVuZ3RoIDw9IHRoaXMuY29uZmlnLm1heExlbmd0aDtcblx0XHR0aGlzLnNldFN0YXRlKHN0YXRlKVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0bGV0IGNvdW50ZXIgPSBudWxsO1xuXHRcdGxldCB3YXJuaW5nID0gbnVsbDtcblx0XHRpZiAoc2VsZi5zdGF0ZS5mb2N1c2VkKSB7XG5cdFx0XHRpZiAoc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aCA8IHNlbGYuY29uZmlnLm1pbkxlbmd0aCkge1xuXHRcdFx0XHRjb3VudGVyID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tY291bnRlciBvc2MtZm9ybS1lcnJvclwiPk5vZyBtaW5pbWFhbCA8c3BhbiBjbGFzc05hbWU9XCJcIj57c2VsZi5jb25maWcubWluTGVuZ3RoIC0gc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aH08L3NwYW4+IHRla2VuczwvZGl2Pilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBlcnJvciA9IHNlbGYuc3RhdGUudmFsdWVMZW5ndGggPiBzZWxmLmNvbmZpZy5tYXhMZW5ndGggPyAnb3NjLWZvcm0tZXJyb3InIDogJyc7XG5cdFx0XHRcdGNvdW50ZXIgPSAoPGRpdiBjbGFzc05hbWU9eydvc2MtZm9ybS1jb3VudGVyICcgKyBlcnJvcn0+SmUgaGVidCBub2cgPHNwYW4gY2xhc3NOYW1lPVwiXCI+e3NlbGYuY29uZmlnLm1heExlbmd0aCAtIHNlbGYuc3RhdGUudmFsdWVMZW5ndGh9PC9zcGFuPiB0ZWtlbnMgb3Zlci48L2Rpdj4pXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYuc3RhdGUuc2hvd1dhcm5pbmcgJiYgc2VsZi5zdGF0ZS53YXJuaW5nKSB7XG5cdFx0XHR3YXJuaW5nID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0td2FybmluZ1wiIHJlZj17IGVsID0+IHRoaXNbJ2Zvcm0td2FybmluZyddID0gZWwgIH0+e3NlbGYuc3RhdGUud2FybmluZ308L2Rpdj4pXG5cdFx0fVxuXG4gICAgbGV0IGlucHV0SFRNTCA9IG51bGw7XG5cbiAgICBzd2l0Y2goc2VsZi5jb25maWcuaW5wdXRUeXBlKSB7XG4gICAgICAgIFxuICAgICAgY2FzZSAnaHRtbGFyZWEnOlxuICAgICAgICBpbnB1dEhUTUwgPSAoXG4gICAgICAgICAgPEhUTUxBcmVhXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfVxuICAgICAgICAgICAgb25Gb2N1cz17c2VsZi5vbklucHV0Rm9jdXN9XG4gICAgICAgICAgICBvbkJsdXI9e3NlbGYub25JbnB1dEJsdXJ9XG4gICAgICAgICAgICBvbktleVVwPXtzZWxmLm9uSW5wdXRLZXlVcH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgICAvLyBpbnB1dEhUTUwgPSAoXG4gICAgICAgIC8vICAgPENLRWRpdG9yXG4gICAgICAgIC8vICAgICBlZGl0b3I9eyBDbGFzc2ljRWRpdG9yIH1cbiAgICAgICAgLy8gICAgIGNvbmZpZz17eyB0b29sYmFyOiBbICdoMycsICdib2xkJywgJ2l0YWxpYycsICdsaW5rJyBdIH19XG4gICAgICAgIC8vICAgICBkYXRhPXt0aGlzLnN0YXRlLnZhbHVlfVxuICAgICAgICAvLyAgICAgb25Jbml0PXsgZWRpdG9yID0+IHtcbiAgICAgICAgLy8gICAgICAgLy8gVE9ETzogYmV0ZXJlIHNlbGVjdG9yXG4gICAgICAgIC8vICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jay1jb250ZW50JykuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vICAgICAgICAgc2VsZi5vbklucHV0S2V5VXAoZSwgZWRpdG9yLmdldERhdGEoKSlcbiAgICAgICAgLy8gICAgICAgfSlcbiAgICAgICAgLy8gICAgIH19XG4gICAgICAgIC8vICAgICBvbkNoYW5nZT17KCBldmVudCwgZWRpdG9yICkgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBlZGl0b3IuZ2V0RGF0YSgpIH0pfVxuICAgICAgICAvLyAgICAgb25Gb2N1cz17ZSA9PiBzZWxmLm9uSW5wdXRGb2N1cyhlKX1cbiAgICAgICAgLy8gICAgIG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfVxuICAgICAgICAvLyAgIC8+XG4gICAgICAgIC8vICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgaW5wdXRIVE1MID0gKFxuXHRcdFx0XHQgIDx0ZXh0YXJlYSBrZXk9e3NlbGYua2V5fSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfSB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSBvbktleVVwPXtlID0+IHNlbGYub25JbnB1dEtleVVwKCl9IG9uRm9jdXM9e2UgPT4gc2VsZi5vbklucHV0Rm9jdXMoZSl9IG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfT48L3RleHRhcmVhPlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW5wdXRIVE1MID0gKFxuXHRcdFx0XHQgIDxpbnB1dCBrZXk9e3NlbGYua2V5fSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfSB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSBvbktleVVwPXtlID0+IHNlbGYub25JbnB1dEtleVVwKCl9IG9uRm9jdXM9e2UgPT4gc2VsZi5vbklucHV0Rm9jdXMoZSl9IG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfT48L2lucHV0PlxuICAgICAgICApO1xuXG4gICAgfVxuXHRcdFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGlkPXtzZWxmLmlkfSByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSBjbGFzc05hbWU9XCJvc2MtaW5wdXQtd2l0aC1jb3VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZmVlZGJhY2tcIj5cblx0XHRcdFx0XHR7aW5wdXRIVE1MfVxuXHRcdFx0XHRcdHtjb3VudGVyfVxuXHRcdFx0XHRcdHt3YXJuaW5nfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCBmcm9tICcuL2RlZmF1bHQtaW5wdXQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRSYWRpb3MgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yXCI+SmUgaGVidCBub2cgZ2VlbiBrZXV6ZSBnZW1hYWt0PC9kaXY+KVxuICAgIH1cblxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpb3NcIj5cbiAgICAgICAge3NlbGYuY29uZmlnLmNob2ljZXMubWFwKCBjaG9pY2UgPT4ge1xuICAgICAgICAgIGlmIChjaG9pY2UuZGFuZ2Vyb3VzRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpby1jb250YWluZXJcIiBrZXk9e2Nob2ljZS52YWx1ZX0+PGRpdiBjbGFzc05hbWU9e2Bvc2MtcmFkaW8taW5wdXQkeyBzZWxmLnN0YXRlLnZhbHVlID09IGNob2ljZS52YWx1ZSA/ICcgb3NjLXJhZGlvLWlucHV0LWNoZWNrZWQnIDogJyd9YH0+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9e3NlbGYuZGl2SWR9IHZhbHVlPXtjaG9pY2UudmFsdWV9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogY2hvaWNlLnZhbHVlIH0pfSAvPjwvZGl2PjxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLXRleHRcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNob2ljZS5kYW5nZXJvdXNEZXNjcmlwdGlvbiB9fS8+PC9kaXY+XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpby1jb250YWluZXJcIiBrZXk9e2Nob2ljZS52YWx1ZX0+PGRpdiBjbGFzc05hbWU9e2Bvc2MtcmFkaW8taW5wdXQkeyBzZWxmLnN0YXRlLnZhbHVlID09IGNob2ljZS52YWx1ZSA/ICcgb3NjLXJhZGlvLWlucHV0LWNoZWNrZWQnIDogJyd9YH0+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9e3NlbGYuZGl2SWR9IHZhbHVlPXtjaG9pY2UudmFsdWV9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogY2hvaWNlLnZhbHVlIH0pfSAvPjwvZGl2PjxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLXRleHRcIj57Y2hvaWNlLmRhbmdlcm91c0Rlc2NyaXB0aW9uID8gbnVsbCA6IGNob2ljZS5kZXNjcmlwdGlvbiB8fCBjaG9pY2UudGl0bGUgfHwgY2hvaWNlLnZhbHVlfTwvZGl2PjwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgfSl9XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UG9zdGNvZGUgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0dmFsaWRhdGUoeyBzaG93RXJyb3JzIH0pIHtcbiAgICBcblx0XHRsZXQgaXNWYWxpZCA9IHRydWU7XG4gICAgbGV0IGVycm9yID0gJyc7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnZhbHVlIHx8ICF0aGlzLnN0YXRlLnZhbHVlLm1hdGNoKC9eXFxzKlxcZHs0fVxccypbYS16QS1aXVthLXpBLVpdXFxzKiQvKSkge1xuICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgaWYgKHNob3dFcnJvcnMpIGVycm9yID0gJ0RpdCBpcyBnZWVuIHBvc3Rjb2RlJztcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uZmlnLnJlcXVpcmVkICYmICF0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICBpZiAoc2hvd0Vycm9ycykgZXJyb3IgPSAnSmUgaGVidCBub2cgbmlldHMgaW5nZXZ1bGQnO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNWYWxpZCwgZXJyb3IgfSlcblx0XHRyZXR1cm4gaXNWYWxpZDtcblx0fVxuXG4gIHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBlcnJvckhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLnN0YXRlLmVycm9yKSB7XG4gICAgICBlcnJvckhUTUwgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1lcnJvclwiPntzZWxmLnN0YXRlLmVycm9yfTwvZGl2PilcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLXRleHRpbnB1dFwiPlxuXHRcdFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQge1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIGluaXQgdmFsdWVcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlIHx8ICggdGhpcy5jb25maWcuY2hvaWNlc1swXSAmJiB0aGlzLmNvbmZpZy5jaG9pY2VzWzBdLnZhbHVlICk7XG4gICAgdGhpcy5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlIH0pXG4gIH1cblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3JcIj5KZSBoZWJ0IG5vZyBnZWVuIGtldXplIGdlbWFha3Q8L2Rpdj4pXG4gICAgfVxuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLXNlbGVjdFwiPlxuXHRcdFx0ICA8c2VsZWN0IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlIHx8ICcnfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9PlxuICAgICAgICAgIHtzZWxmLmNvbmZpZy5jaG9pY2VzLm1hcCggY2hvaWNlID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8b3B0aW9uIHZhbHVlPXtjaG9pY2UudmFsdWUgfHwgJyd9IGtleT17Y2hvaWNlLnZhbHVlfT57Y2hvaWNlLmRlc2NyaXB0aW9uIHx8IGNob2ljZS50aXRsZSB8fCBjaG9pY2UudmFsdWV9PC9vcHRpb24+XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFRleHQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yXCI+SmUgaGVidCBub2cgbmlldHMgaW5nZXZ1bGQ8L2Rpdj4pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy10ZXh0aW5wdXRcIj5cblx0XHRcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogc2VsZi5pbnB1dC52YWx1ZSB9KX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFNlbGVjdCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3JcIj5KZSBoZWJ0IG5vZyBuaWV0cyBpbmdldnVsZDwvZGl2PilcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLXRleHRhcmVhXCI+XG5cdFx0XHQgIDx0ZXh0YXJlYSB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfT57dGhpcy5zdGF0ZS52YWx1ZX08L3RleHRhcmVhPlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRIaWRkZW4gZnJvbSAnLi9oaWRkZW4uanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEltYWdlVXBsb2FkIGZyb20gJy4vaW1hZ2UtdXBsb2FkLmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRJbnB1dFdpdGhDb3VudGVyIGZyb20gJy4vaW5wdXQtd2l0aC1jb3VudGVyLmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRSYWRpb3MgZnJvbSAnLi9yYWRpb3MuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudFBvc3Rjb2RlIGZyb20gJy4vcG9zdGNvZGUuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudFNlbGVjdCBmcm9tICcuL3NlbGVjdC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50VGV4dCBmcm9tICcuL3RleHRpbnB1dC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50VGV4dEFyZWEgZnJvbSAnLi90ZXh0YXJlYS5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEZvcm1GaWVsZCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGlucHV0VHlwZTogbnVsbCxcblxuICAgICAgdmFsaWRhdGVBY3Rpb246IG51bGwsXG4gICAgICBjaGFuZ2VBY3Rpb246IG51bGwsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG5cbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgICBjaG9pY2VzOiBbXSxcblx0XHR9KTtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuY29uZmlnLm5hbWUgPSBzZWxmLmNvbmZpZy5uYW1lIHx8IHNlbGYuY29uZmlnLnRpdGxlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBzZWxmLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlIHx8IHVuZGVmaW5lZCxcblx0XHR9O1xuXG4gICAgc2VsZi5oYW5kbGVPbkNoYW5nZSA9IHNlbGYuaGFuZGxlT25DaGFuZ2UuYmluZChzZWxmKTtcblxuICAgIHNlbGYub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICB9XG4gIFxuXHR2YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkge1xuICAgIHJldHVybiB0aGlzLmlucHV0ID8gdGhpcy5pbnB1dC52YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkgOiB0cnVlO1xuXHR9XG5cblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiZm9ybSBmaWVsZCBjaGFuZ2VcIiwgZGF0YSk7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLm9uQ2hhbmdlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRoaXMub25DaGFuZ2UoZGF0YSk7XG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHRpdGxlSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLnRpdGxlKSB7XG4gICAgICB0aXRsZUhUTUwgPSA8aDMgY2xhc3NOYW1lPVwib3NjLWZvcm0tdGl0bGVcIj57c2VsZi5jb25maWcudGl0bGV9PC9oMz5cbiAgICB9XG5cbiAgICBsZXQgZGVzY3JpcHRpb25IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcuZGVzY3JpcHRpb24pIHtcbiAgICAgIGRlc2NyaXB0aW9uSFRNTCA9IDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZGVzY3JpcHRpb25cIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uIH19PjwvZGl2PlxuICAgIH1cblxuICAgIGxldCBmaWVsZEhUTUwgPSBudWxsO1xuXG4gICAgc3dpdGNoIChzZWxmLmNvbmZpZy5pbnB1dFR5cGUpIHtcblxuICAgICAgY2FzZSAnaGlkZGVuJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SGlkZGVuIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdodG1sLXdpdGgtY291bnRlcic6XG4gICAgICBjYXNlICdodG1sYXJlYS13aXRoLWNvdW50ZXInOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyAuLi5zZWxmLmNvbmZpZywgaW5wdXRUeXBlOiAnaHRtbGFyZWEnIH19IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpbWFnZS11cGxvYWQnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbWFnZVVwbG9hZCBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5jb25maWcudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaW5wdXQtd2l0aC1jb3VudGVyJzpcbiAgICAgIGNhc2UgJ3RleHQtd2l0aC1jb3VudGVyJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCAuLi5zZWxmLmNvbmZpZyB9fSB2YWx1ZT17IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5jb25maWcudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9zdGNvZGUnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRQb3N0Y29kZSBjb25maWc9e3NlbGYuY29uZmlnfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncmFkaW9zJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50UmFkaW9zIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnbXVsdGlwbGUtY2hvaWNlJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50VGV4dCBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5jb25maWcudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRUZXh0QXJlYSBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5jb25maWcudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGV4dGFyZWEtd2l0aC1jb3VudGVyJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgLi4uc2VsZi5jb25maWcsIGlucHV0VHlwZTogJ3RleHRhcmVhJyB9fSB2YWx1ZT17IHRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5jb25maWcudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBpZD17c2VsZi5pZH0gcmVmPXtlbCA9PiAoc2VsZi5pbnN0YW5jZSA9IGVsKX0gY2xhc3NOYW1lPVwib3NjLWZvcm0tZmllbGRcIj5cblx0XHRcdFx0e3RpdGxlSFRNTH1cblx0XHRcdFx0e2Rlc2NyaXB0aW9uSFRNTH1cblx0XHRcdFx0e2ZpZWxkSFRNTH1cblx0XHRcdDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudExpYnMgZnJvbSAnLi4vLi4vbGlicy9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Rm9ybUZpZWxkIGZyb20gJy4vZm9ybS1maWVsZC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIGludHJvOiBudWxsLFxuICAgICAgZmllbGRzOiBbXSxcblx0XHR9KTtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuc3RhdGUgPSB7XG4gICAgICB2YWx1ZXM6IHByb3BzLnZhbHVlc3x8IHt9LFxuXHRcdH07XG5cbiAgICBzZWxmLmhhbmRsZU9uQ2hhbmdlID0gc2VsZi5oYW5kbGVPbkNoYW5nZS5iaW5kKHRoaXMpO1xuXG4gICAgc2VsZi5maWVsZHMgPSBbXTtcblxuICB9XG4gIFxuXG4gIGdldFZhbHVlcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS52YWx1ZXM7XG5cdH1cblxuXHR2YWxpZGF0ZSh7IHNob3dFcnJvcnMsIHNjcm9sbFRvIH0pIHtcbiAgICBsZXQgc2VsZj0gdGhpcztcbiAgICBsZXQgaXNWYWxpZCA9IHRydWU7XG4gICAgbGV0IGZpcnN0SW52YWxpZCA9IG51bGxcbiAgICBzZWxmLmZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgaWYgKCFmaWVsZC52YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkpIHtcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIWZpcnN0SW52YWxpZCkgZmlyc3RJbnZhbGlkID0gZmllbGQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc2Nyb2xsVG8gJiYgZmlyc3RJbnZhbGlkICYmIGZpcnN0SW52YWxpZC5pbnN0YW5jZSAmJiBmaXJzdEludmFsaWQuaW5zdGFuY2Uuc2Nyb2xsSW50b1ZpZXcpIGZpcnN0SW52YWxpZC5pbnN0YW5jZS5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnfSk7XG4gICAgcmV0dXJuIGlzVmFsaWQ7ICAgIFxuXG5cdH1cblxuXHRoYW5kbGVPbkNoYW5nZShkYXRhKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJmb3JtY2hhbmdlXCIsIGRhdGEpO1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgdmFsdWVzID0geyAuLi50aGlzLnN0YXRlLnZhbHVlcyB9O1xuICAgIHZhbHVlc1tkYXRhLm5hbWVdID0gZGF0YS52YWx1ZTtcblx0XHR0aGlzLnNldFN0YXRlKHsgdmFsdWVzIH0pO1xuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHRpdGxlSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLnRpdGxlKSB7XG4gICAgICB0aXRsZUhUTUwgPSA8aDIgY2xhc3NOYW1lPVwib3NjLWZvcm0tdGl0bGVcIj57c2VsZi5jb25maWcudGl0bGV9PC9oMj5cbiAgICB9XG5cbiAgICBsZXQgaW50cm9IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcuaW50cm8pIHtcbiAgICAgIGludHJvSFRNTCA9IDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0taW50cm9cIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlbGYuY29uZmlnLmludHJvIH19PjwvZGl2PlxuICAgIH1cblxuICAgIGxldCBmaWVsZHNIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcuZmllbGRzICYmIHNlbGYuY29uZmlnLmZpZWxkcy5sZW5ndGgpIHtcbiAgICAgIGZpZWxkc0hUTUwgPVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWZpZWxkc1wiPlxuICAgICAgICAgIHsgc2VsZi5jb25maWcuZmllbGRzLm1hcCgoZmllbGRDb25maWcsIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8T3BlblN0YWRDb21wb25lbnRGb3JtRmllbGQgY29uZmlnPXtmaWVsZENvbmZpZ30gb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9IGtleT17YG9zYy1mb3JtLWZpZWxkLSR7aX1gfSAgcmVmPXtlbCA9PiB7IHNlbGYuZmllbGRzW2ldID0gZWw7IH19Lz5cbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgfVxuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgaWQ9e3NlbGYuZGl2SWR9IGNsYXNzTmFtZT1cIm9zYy1mb3JtXCIgcmVmPXtlbCA9PiAoc2VsZi5pbnN0YW5jZSA9IGVsKX0+XG5cdFx0XHRcdHt0aXRsZUhUTUx9XG5cdFx0XHRcdHtpbnRyb0hUTUx9XG5cdFx0XHRcdHtmaWVsZHNIVE1MfVxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICB0b3VjaGVkOiB0aGlzLnByb3BzLnRvdWNoZWQgfHwgZmFsc2UsXG4gICAgfVxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0XG5cbiAgICBpZih0eXBlb2YgdGhpcy5wcm9wcy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlKVxuICAgIH1cbiAgICBcbiAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZSwgdG91Y2hlZDogdHJ1ZX0pXG4gIH1cblxuICBkb1RvdWNoKCkge1xuXG4gICAgaWYodHlwZW9mIHRoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicpe1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSg1MClcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHt0b3VjaGVkOiB0cnVlfSlcblxuICB9XG5cbiAgY2FsY1Byb2dyZXNzKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluXG4gICAgY29uc3QgcHJvZ0luUmFuZ2UgPSB2YWx1ZSAtIG1pblxuICAgIHJldHVybiAoKHByb2dJblJhbmdlKjIpL3JhbmdlKS0xXG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgeyB2YWx1ZSwgdG91Y2hlZCB9ID0gc2VsZi5zdGF0ZVxuICAgIGNvbnN0IHsgbWluLCBtYXgsIHN0ZXAgfSA9IHNlbGYucHJvcHNcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7c2VsZi5wcm9wcy5jbGFzc05hbWV9IG9zYy1zbGlkZXJgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFja1wiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1wcm9ncmVzcy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1wcm9ncmVzc1wiIHN0eWxlPXt7IHRyYW5zZm9ybTogJ3NjYWxlWCgnICsgc2VsZi5jYWxjUHJvZ3Jlc3MobWluLCBtYXgsIHZhbHVlKSArICcpJyB9fT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stZG90LWVuZCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1sZWZ0XCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLWRvdC1zdGFydCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1jZW50ZXJcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stZG90LWVuZCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1yaWdodFwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J3JhbmdlJyBtaW49e21pbn0gbWF4PXttYXh9IHN0ZXA9e3N0ZXB9IHZhbHVlPXt2YWx1ZX0gb25DbGljaz17KCkgPT4geyBpZiAoIXRvdWNoZWQpIHNlbGYuZG9Ub3VjaCgpOyB9IH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlQ2hhbmdlfSBjbGFzc05hbWU9e3RvdWNoZWQgPyAnb3NjLXNsaWRlci1pbnB1dC1yYW5nZScgOiAnb3NjLXNsaWRlci1pbnB1dC1yYW5nZSBvc2Mtc2xpZGVyLXVudG91Y2hlZCd9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXI7XG4iLCIvLyBwb2x5ZmlsbHNcbi8vaW1wb3J0ICdjb3JlLWpzL2VzL21hcCc7XG4vL2ltcG9ydCAnY29yZS1qcy9lcy9zZXQnO1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgRm9ybSBmcm9tICcuL2NvbXBvbmVudC9mb3JtLmpzeCc7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vY29tcG9uZW50L2Zvcm0tZmllbGQuanN4JztcbmltcG9ydCBIaWRkZW4gZnJvbSAnLi9jb21wb25lbnQvaGlkZGVuLmpzeCc7XG5pbXBvcnQgSW1hZ2VVcGxvYWQgZnJvbSAnLi9jb21wb25lbnQvaW1hZ2UtdXBsb2FkLmpzeCc7XG5pbXBvcnQgSW5wdXRXaXRoQ291bnRlciBmcm9tICcuL2NvbXBvbmVudC9pbnB1dC13aXRoLWNvdW50ZXIuanN4JztcbmltcG9ydCBQb3N0Y29kZSBmcm9tICcuL2NvbXBvbmVudC9wb3N0Y29kZS5qc3gnO1xuaW1wb3J0IFJhZGlvcyBmcm9tICcuL2NvbXBvbmVudC9yYWRpb3MuanN4JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9jb21wb25lbnQvc2VsZWN0LmpzeCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuL2NvbXBvbmVudC90ZXh0aW5wdXQuanN4JztcbmltcG9ydCBUZXh0YXJlYSBmcm9tICcuL2NvbXBvbmVudC90ZXh0YXJlYS5qc3gnO1xuaW1wb3J0IFNsaWRlciBmcm9tICcuL2NvbXBvbmVudC9zbGlkZXIuanN4JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgRm9ybSxcbiAgRm9ybUZpZWxkLFxuICBIaWRkZW4sXG4gIEltYWdlVXBsb2FkLFxuICBJbnB1dFdpdGhDb3VudGVyLFxuICBQb3N0Y29kZSxcbiAgUmFkaW9zLFxuICBTZWxlY3QsXG4gIFRleHQsXG4gIFRleHRhcmVhLFxuICBTbGlkZXIsXG59XG5cbi8vIHJlbmRlciB0aGUgYmFzZSBlbGVtZW50XG4vLyBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4vLyAgIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuLy8gICBSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbi8vIH1cbi8vIGV4cG9ydCB7cmVuZGVyRWxlbWVudH1cblxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEltYWdlIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcyk7XG5cblx0XHQvLyBjb25maWdcblx0XHRsZXQgZGVmYXVsdENvbmZpZyA9IHtcbiAgICAgIGFzcGVjdFJhdGlvOiAnMTZ4OScsXG4gICAgICBhbGxvd011bHRpcGxlSW1hZ2VzOiBmYWxzZSxcblx0XHR9O1xuXHRcdHRoaXMuY29uZmlnID0gbWVyZ2UucmVjdXJzaXZlKGRlZmF1bHRDb25maWcsIHRoaXMuY29uZmlnLCB0aGlzLnByb3BzLmNvbmZpZyB8fCB7fSlcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50SW1hZ2VJbmRleDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBsZXQgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuZGl2SWR9YCkucGFyZW50Tm9kZTtcbiAgICB0aGlzLnNldFN0YXRlKHt3aWR0aDogZWxlbS5vZmZzZXRXaWR0aH0pXG4gIH1cblxuICBzZXRDdXJyZW50SW1hZ2VJbmRleCAod2hpY2gpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtjdXJyZW50SW1hZ2VJbmRleDogd2hpY2h9KVxuICB9XG5cbiAgZ2V0SW1hZ2VzRnJvbVByb3BzKCkge1xuICAgIGxldCBpbWFnZXMgPSB0aGlzLnByb3BzLmltYWdlcztcbiAgICBsZXQgaW1hZ2UgPSB0aGlzLnByb3BzLmltYWdlIHx8IGltYWdlc1t0aGlzLnN0YXRlLmN1cnJlbnRJbWFnZUluZGV4XTtcbiAgICByZXR1cm4gW3RoaXMucHJvcHMuaW1hZ2UsIGltYWdlc107XG4gIH1cblxuICBnZXRJbWFnZVNyYyhpbWFnZSkge1xuICAgIGxldCBpbWFnZVNyYyA9IGltYWdlO1xuICAgIGlmICggdHlwZW9mIGltYWdlID09ICdvYmplY3QnICYmIGltYWdlLnNyYyApIGltYWdlU3JjID0gaW1hZ2Uuc3JjO1xuICAgIHJldHVybiBpbWFnZVNyYztcbiAgfVxuXG4gIGdldEFzcGVjdFJhdGlvRmFjdG9yKCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2lkdGggJiYgdGhpcy5wcm9wcy5oZWlnaHQpIHJldHVybiB0aGlzLnByb3BzLndpZHRoL3RoaXMucHJvcHMuaGVpZ2h0XG4gICAgXG4gICAgbGV0IG1hdGNoID0gdGhpcy5jb25maWcuYXNwZWN0UmF0aW8ubWF0Y2goLyhcXGQrKXgoXFxkKykvKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSAvIG1hdGNoWzJdIDogMTYvOVxuICB9XG5cbiAgZ2V0V2lkdGhIZWlnaHQoKSB7XG4gICAgbGV0IHdpZHRoID0gdGhpcy5wcm9wcy53aWR0aCB8fCB0aGlzLnN0YXRlLndpZHRoO1xuICAgIGxldCBoZWlnaHQgPSB0aGlzLnByb3BzLmhlaWdodCB8fCB3aWR0aCAqICggMSAvIHRoaXMuZ2V0QXNwZWN0UmF0aW9GYWN0b3IoKSApIHx8IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gWyB3aWR0aCwgaGVpZ2h0IF1cbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBpbWFnZXMsIGltYWdlO1xuICAgIFsgaW1hZ2UsIGltYWdlcyBdID0gc2VsZi5nZXRJbWFnZXNGcm9tUHJvcHMoKTtcblxuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgIFsgd2lkdGgsIGhlaWdodCBdID0gc2VsZi5nZXRXaWR0aEhlaWdodCgpO1xuXG4gICAgaWYgKHNlbGYuY29uZmlnLmFsbG93TXVsdGlwbGVJbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gbXVsdGlwbGVcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9e3NlbGYuZGl2SWR9IGNsYXNzTmFtZT17YG9zYy1tdWx0aXBsZS1pbWFnZXMgJHtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnJ31gfT5cbiAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2Utc3BhY2VyXCIgc3R5bGU9e3sgd2lkdGgsIGhlaWdodCB9fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWltYWdlXCIgc3R5bGU9e2ltYWdlID8geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtzZWxmLmdldEltYWdlU3JjKGltYWdlKX0pYCB9IDoge319IGtleT17J2ltYWdlLScgKyBzZWxmLmRpdklkfT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW11bHRpcGxlLWltYWdlcy10aHVtYnNcIiBzdHlsZT17eyBoZWlnaHQ6IDAuMSAqIHNlbGYuc3RhdGUud2lkdGggfX0+XG5cbiAgICAgICAgICAgIHtpbWFnZXMubWFwKCggdGh1bWIsIGkgKSA9PiB7XG4gICAgICAgICAgICAgIGxldCB0aHVtYmhlaWdodCA9IDAuMSAqIHdpZHRoO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aHVtYmhlaWdodCk7XG4gICAgICAgICAgICAgIGxldCB0aHVtYndpZHRoID0gdGh1bWJoZWlnaHQgKiBzZWxmLmdldEFzcGVjdFJhdGlvRmFjdG9yKCk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRodW1id2lkdGgpO1xuICAgICAgICAgICAgICBsZXQgdGh1bWJsZWZ0ID0gKCB0aHVtYndpZHRoICogIDEuMDUgKSAqIGk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtdGh1bWItc3BhY2VyXCIga2V5PXtgb3NjLWltYWdlLXRodW1iLSR7aX1gfSBzdHlsZT17eyBsZWZ0OiB0aHVtYmxlZnQsIHdpZHRoOiB0aHVtYndpZHRoLCBoZWlnaHQ6IHRodW1iaGVpZ2h0IH19PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtdGh1bWJcIiBzdHlsZT17dGh1bWIgPyB7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3NlbGYuZ2V0SW1hZ2VTcmModGh1bWIpfSlgLCB6SW5kZXg6IDEwLWkgfSA6IHt9fSBvbkNsaWNrPXtlID0+IHNlbGYuc2V0Q3VycmVudEltYWdlSW5kZXgoaSl9PjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBzaW5ndWxhclxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD17c2VsZi5kaXZJZH0gY2xhc3NOYW1lPXtgb3NjLWltYWdlLXNwYWNlciAke3NlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICcnfWB9IHN0eWxlPXt7IHdpZHRoLCBoZWlnaHQgfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2VcIiBzdHlsZT17aW1hZ2UgPyB7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3NlbGYuZ2V0SW1hZ2VTcmMoaW1hZ2UpfSlgIH0gOiB7fX0gb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfSBrZXk9eydpbWFnZS0nICsgc2VsZi5kaXZJZH0+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICAgIFxuICAgIH1cblxuICB9XG5cbn1cbiIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRJbWFnZSBmcm9tICcuL2ltYWdlLmpzeCc7XG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudEltYWdlIHtcblxuICBnZXRJbWFnZXNGcm9tUHJvcHMoKSB7XG5cbiAgICBsZXQgaWRlYSA9IHRoaXMucHJvcHMuaWRlYTtcbiAgICBpZiAoIWlkZWEpIHJldHVybiBbICcnLCBbICcnIF0gXTtcblxuICAgIGxldCBpbWFnZXMgPSAoaWRlYS5leHRyYURhdGEgJiYgaWRlYS5leHRyYURhdGEuaW1hZ2VzKSB8fCBbXTtcbiAgICBsZXQgaW1hZ2UgPSAoaWRlYS5wb3N0ZXJJbWFnZSAmJiBpZGVhLnBvc3RlckltYWdlLmtleSkgfHwgKGlkZWEuZXh0cmFEYXRhICYmIGlkZWEuZXh0cmFEYXRhLmltYWdlcyAmJiBpZGVhLmV4dHJhRGF0YS5pbWFnZXNbdGhpcy5zdGF0ZS5jdXJyZW50SW1hZ2VJbmRleF0pO1xuXG4gICAgcmV0dXJuIFtpbWFnZSwgaW1hZ2VzXVxuXG4gIH1cblxufVxuIiwiLy8gcG9seWZpbGxzXG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIHJlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8vIGltcG9ydCBjc3MgdG8gbWFrZSBzdXJlIGl0IGlzIGdlbmVyYXRlZCBpbiB0aGUgcmVzdWx0XG5pbXBvcnQgJy4vY3NzL2RlZmF1bHQubGVzcyc7XG5cbi8vIHRoZSBtb2R1bGVcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEltYWdlIGZyb20gJy4vY29tcG9uZW50L2ltYWdlLmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UgZnJvbSAnLi9jb21wb25lbnQvaWRlYS1pbWFnZS5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50SWRlYUltYWdlLnJlbmRlckVsZW1lbnQgPSBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4gIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuXHRSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudElkZWFJbWFnZSBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbn1cblxuZXhwb3J0IHtcbiAgT3BlblN0YWRDb21wb25lbnRJbWFnZSBhcyBkZWZhdWx0LFxuICBPcGVuU3RhZENvbXBvbmVudEltYWdlIGFzIEltYWdlLFxuICBPcGVuU3RhZENvbXBvbmVudElkZWFJbWFnZSBhcyBJZGVhSW1hZ2UsXG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUiwgTUVUSE9ELCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJpbmQoY2FsbCwgZ2xvYmFsW0NPTlNUUlVDVE9SXS5wcm90b3R5cGVbTUVUSE9EXSwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMy4xXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdW5kZWZpbmVkO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHIgPSByZXF1aXJlO1xuICAgIHZhciB2ZXJ0eCA9IHIoJ3ZlcnR4Jyk7XG4gICAgdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcbiAgICByZXR1cm4gdXNlVmVydHhUaW1lcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbiAgfVxufVxuXG52YXIgc2NoZWR1bGVGbHVzaCA9IHVuZGVmaW5lZDtcbi8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG5pZiAoaXNOb2RlKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpO1xufSBlbHNlIGlmIChpc1dvcmtlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTWVzc2FnZUNoYW5uZWwoKTtcbn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSBhdHRlbXB0VmVydHgoKTtcbn0gZWxzZSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgdmFyIHBhcmVudCA9IHRoaXM7XG5cbiAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKGNoaWxkW1BST01JU0VfSURdID09PSB1bmRlZmluZWQpIHtcbiAgICBtYWtlUHJvbWlzZShjaGlsZCk7XG4gIH1cblxuICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICBpZiAoX3N0YXRlKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9hcmd1bWVudHNbX3N0YXRlIC0gMV07XG4gICAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlKG9iamVjdCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3Jlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDE2KTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgR0VUX1RIRU5fRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG59XG5cbmZ1bmN0aW9uIGNhbm5vdFJldHVybk93bigpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGhlbihwcm9taXNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBHRVRfVEhFTl9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBHRVRfVEhFTl9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlUaGVuKHRoZW4sIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4pIHtcbiAgYXNhcChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQgPT09IEdFVF9USEVOX0VSUk9SKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3JlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgX3N1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBkZXRhaWw7XG4gICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiBFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoIXRoaXMucHJvbWlzZVtQUk9NSVNFX0lEXSkge1xuICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gIH1cblxuICBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9yZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIF9pbnB1dCA9IHRoaXMuX2lucHV0O1xuXG4gIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9lYWNoRW50cnkoX2lucHV0W2ldLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSwgaSkge1xuICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gIHZhciByZXNvbHZlJCQgPSBjLnJlc29sdmU7XG5cbiAgaWYgKHJlc29sdmUkJCA9PT0gcmVzb2x2ZSkge1xuICAgIHZhciBfdGhlbiA9IGdldFRoZW4oZW50cnkpO1xuXG4gICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoZW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgfSBlbHNlIGlmIChjID09PSBQcm9taXNlKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApO1xuICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUkJCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSQkKGVudHJ5KTtcbiAgICAgIH0pLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJChlbnRyeSksIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gKHByb21pc2UsIGkpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICB9KTtcbn07XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuUHJvbWlzZS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlLl9hc2FwID0gYXNhcDtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlLFxuXG4gIC8qKlxuICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIENoYWluaW5nXG4gICAgLS0tLS0tLS1cbiAgXG4gICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgfSk7XG4gIFxuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgIH0pO1xuICAgIGBgYFxuICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBc3NpbWlsYXRpb25cbiAgICAtLS0tLS0tLS0tLS1cbiAgXG4gICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgU2ltcGxlIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgcmVzdWx0O1xuICBcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgYXV0aG9yLCBib29rcztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICBcbiAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgXG4gICAgfVxuICBcbiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRBdXRob3IoKS5cbiAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgdGhlblxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICB0aGVuOiB0aGVuLFxuXG4gIC8qKlxuICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBcbiAgICBgYGBqc1xuICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgIH1cbiAgXG4gICAgLy8gc3luY2hyb25vdXNcbiAgICB0cnkge1xuICAgICAgZmluZEF1dGhvcigpO1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH1cbiAgXG4gICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBjYXRjaFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICBpZiAoUCkge1xuICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZTtcbn1cblxucG9seWZpbGwoKTtcbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbnJldHVybiBQcm9taXNlO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xudmFyIGVudHJ5VW5iaW5kID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXVuYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VW5iaW5kKCdBcnJheScsICdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2luZGV4T2YnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMTogMCB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRQb2xsIGZyb20gJy4uLy4uL3BvbGwvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBmcm9tICcuLi8uLi9yZWFjdGlvbnMvaW5kZXguanN4JztcblxuaW1wb3J0IFZvdGVCdXR0b24gZnJvbSAnLi92b3RlLWJ1dHRvbi5qc3gnO1xuaW1wb3J0IHsgSWRlYUltYWdlIGFzIE9wZW5TdGFkQ29tcG9uZW50SWRlYUltYWdlIH0gZnJvbSAnLi4vLi4vaW1hZ2UvaW5kZXguanN4JztcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyB0b2RvOiBlZW4gZXJyb3Igb3AgZmV0Y2ggd29yZHQgbmlldCBnb2VkIGFmZ2V2YW5nZW5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRlYXNEZXRhaWxzIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgc2l0ZUlkOiBudWxsLFxuICAgICAgaWRlYUlkOiBudWxsLFxuICAgICAgaWRlYToge1xuICAgICAgICBzaG93Vm90ZUJ1dHRvbnM6IHRydWUsXG4gICAgICAgIHNob3dMYWJlbHM6IGZhbHNlLFxuICAgICAgICBhbGxvd011bHRpcGxlSW1hZ2VzOiBmYWxzZSxcbiAgICAgICAgc2hhcmVDaGFubmVsc1NlbGVjdGlvbjogW1wiZmFjZWJvb2tcIixcInR3aXR0ZXJcIixcIm1haWxcIixcIndoYXRzYXBwXCJdLFxuICAgICAgICBtZXRhRGF0YVRlbXBsYXRlOiBudWxsLFxuICAgICAgfSxcbiAgICAgIGFyZ3VtZW50OiB7XG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICBmb3JtSW50cm86ICdNaWpuIHJlYWN0aWUgb3AgZGV6ZSBpbnplbmRpbmcgaXMgLi4uJyxcbiAgICAgICAgaWdub3JlUmVhY3Rpb25zRm9ySWRlYUlkczogJycsXG4gICAgICAgIGNsb3NlUmVhY3Rpb25zRm9ySWRlYUlkczogJycsXG4gICAgICB9LFxuICAgICAgcG9sbDoge1xuICAgICAgICBjYW5BZGRQb2xsczogZmFsc2UsXG4gICAgICB9LFxuICAgICAgbGFiZWxzOiB7fSxcbiAgICAgIHR5cGVzOiBudWxsLFxuICAgICAgdHlwZUZpZWxkOiAndHlwZUlkJyxcbiAgICAgIHR5cGVMYWJlbDogJ1RoZW1hJyxcblx0XHR9KTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpZGVhOiB0aGlzLnByb3BzLmlkZWEsXG4gICAgICBpZGVhSWQ6ICggcHJvcHMuaWRlYSAmJiBwcm9wcy5pZGVhLmlkICkgfHwgdGhpcy5jb25maWcuaWRlYUlkLFxuICAgICAgc2hvd1BvbGxGb3JtOiBmYWxzZSxcbiAgICB9O1xuICAgICAgICBcbiAgfVxuXG5cdGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgXG5cdFx0c2VsZi5yZWFjdGlvbkFkZGVkTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2VsZi5vblJlYWN0aW9uU3RvcmVkKGV2ZW50LmRldGFpbCwgdHJ1ZSk7XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgc2VsZi5yZWFjdGlvbkFkZGVkTGlzdGVuZXIpO1xuXG5cdFx0c2VsZi5yZWFjdGlvbkVkaXRlZExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNlbGYub25SZWFjdGlvblN0b3JlZChldmVudC5kZXRhaWwpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZWRpdGVkJywgc2VsZi5yZWFjdGlvbkVkaXRlZExpc3RlbmVyKTtcblxuXHRcdHNlbGYucmVhY3Rpb25EZWxldGVkTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2VsZi5vblJlYWN0aW9uRGVsZXRlZChldmVudC5kZXRhaWwpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZGVsZXRlZCcsIHNlbGYucmVhY3Rpb25EZWxldGVkTGlzdGVuZXIpO1xuICAgIFxuXHRcdHNlbGYucG9sbENyZWF0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUG9sbENyZWF0ZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignb3NjLW5ldy1wb2xsLXN0b3JlZCcsIHNlbGYucG9sbENyZWF0ZWRMaXN0ZW5lcik7XG4gICAgXG5cdFx0c2VsZi5wb2xsRGVsZXRlZExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNlbGYub25Qb2xsRGVsZXRlZChldmVudC5kZXRhaWwpO1xuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtcG9sbC1kZWxldGVkJywgc2VsZi5wb2xsRGVsZXRlZExpc3RlbmVyKTtcblxuICAgIHNlbGYuZmV0Y2hEYXRhKCk7XG5cblx0fVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgdGhpcy5yZWFjdGlvbkFkZGVkTGlzdGVuZXIpO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1lZGl0ZWQnLCB0aGlzLnJlYWN0aW9uRWRpdGVkTGlzdGVuZXIpO1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1kZWxldGVkJywgdGhpcy5yZWFjdGlvbkRlbGV0ZWRMaXN0ZW5lcik7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLW5ldy1wb2xsLXN0b3JlZCcsIHRoaXMucG9sbENyZWF0ZWRMaXN0ZW5lcik7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXBvbGwtZGVsZXRlZCcsIHRoaXMucG9sbERlbGV0ZWRMaXN0ZW5lcik7XG4gIH1cblxuICBkaXNwYXRjaEVkaXRJZGVhQ2xpY2soZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKCB0aGlzLmNvbmZpZy5lZGl0SWRlYUxpbmsgKSB7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gdGhpcy5jb25maWcuZWRpdElkZWFMaW5rO1xuICAgIH0gZWxzZSB7XG5cdFx0ICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdvc2MtZWRpdC1pZGVhLWNsaWNrJywgeyBkZXRhaWw6IHRoaXMuc3RhdGUuaWRlYSB9KTtcblx0XHQgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBzaG93UG9sbEZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93UG9sbEZvcm06IHRydWVcbiAgICB9KVxuICB9XG5cbiAgaGlkZVBvbGxGb3JtKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd1BvbGxGb3JtOiBmYWxzZVxuICAgIH0pXG4gIH1cblxuICBkaXNwYXRjaEFkZFBvbGxDbGljayhlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnNob3dQb2xsRm9ybSgpO1xuICB9XG4gIFxuICBvblJlYWN0aW9uU3RvcmVkKGRhdGEsIGlzTmV3KSB7XG4gICAgaWYgKGlzTmV3KSB0aGlzLnN0YXRlLmlkZWEuYXJnQ291bnQrKztcbiAgICB0aGlzLnNldFN0YXRlKHsgaWRlYTogdGhpcy5zdGF0ZS5pZGVhIH0pO1xuICB9XG5cbiAgb25SZWFjdGlvbkRlbGV0ZWQoZGF0YSkge1xuICAgIHRoaXMuc3RhdGUuaWRlYS5hcmdDb3VudC0tO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpZGVhOiB0aGlzLnN0YXRlLmlkZWEgfSk7XG4gIH1cblxuICBvblBvbGxDcmVhdGVkKCkge1xuICAgIHRoaXMuaGlkZVBvbGxGb3JtKCk7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIG9uUG9sbERlbGV0ZWQoKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuICBcbiAgZmV0Y2hEYXRhKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGlkZWFJZCA9IHNlbGYuc3RhdGUuaWRlYUlkIHx8ICh0aGlzLnN0YXRlLmlkZWEgJiYgdGhpcy5zdGF0ZS5pZGVhLmlkKTtcblxuICAgIGlmICghaWRlYUlkKSByZXR1cm47XG5cbiAgICBsZXQgdXJsID0gYCR7IHNlbGYuY29uZmlnLmFwaS51cmwgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2lkZWEvJHsgaWRlYUlkIH0/aW5jbHVkZVZvdGVDb3VudD0xJmluY2x1ZGVBcmd1bWVudHM9MSZpbmNsdWRlQXJnc0NvdW50PTEmaW5jbHVkZVVzZXI9MSZpbmNsdWRlVXNlclZvdGU9MWA7XG4gICAgaWYgKHNlbGYuY29uZmlnLnBvbGwuY2FuQWRkUG9sbHMpIHVybCArPSAnJmluY2x1ZGVQb2xsPTEnO1xuXG4gICAgbGV0IGhlYWRlcnMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMuYXBpLmdldEhlYWRlcnMoc2VsZi5jb25maWcpO1xuXHRcdFxuICAgIGZldGNoKHVybCwgeyBoZWFkZXJzIH0pXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgRXJyb3IoJ0Vycm9yIGZlY2h0aW5nIGRldGFpbCcpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCBqc29uID0+IHtcblxuICAgICAgICBsZXQgaWRlYSA9IGpzb247XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyBpZGVhIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmKE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtcmVhY3Rpb25zLWxvZ2luLXBlbmRpbmcnKSkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBgI3JlYWN0aW9uc2A7XG4gICAgICAgICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLnNldCgnb3NjLXJlYWN0aW9ucy1sb2dpbi1wZW5kaW5nJywgZmFsc2UpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdOaWV0IGdvZWQnKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBkZWxldGVJZGVhKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCEoIHNlbGYuY29uZmlnLnVzZXIgJiYgc2VsZi5jb25maWcudXNlci5yb2xlICYmIHNlbGYuY29uZmlnLnVzZXIucm9sZSA9PSAnYWRtaW4nICkpIHJldHVybjtcbiAgICBpZiAoISggdGhpcy5zdGF0ZS5pZGVhIHx8IHRoaXMuc3RhdGUuaWRlYS5pZCApKSByZXR1cm47XG5cbiAgICBsZXQgdXJsID0gYCR7IHNlbGYuY29uZmlnLmFwaS51cmwgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2lkZWEvJHsgdGhpcy5zdGF0ZS5pZGVhLmlkIH1gO1xuICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcblxuICAgIGxldCBpZGVhSWQgPSB0aGlzLnN0YXRlLmlkZWEuaWQ7IC8vIGJhY2t1cFxuXHRcdFxuICAgIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnNcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IEVycm9yKCdFcnJvciBkZWxldGluZyBpZGVhJyk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oIGpzb24gPT4ge1xuICAgICAgICBpZiAoIHRoaXMuY29uZmlnLmFmdGVyRGVsZXRlSWRlYUxpbmsgKSB7XG4gICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHRoaXMuY29uZmlnLmFmdGVyRGVsZXRlSWRlYUxpbms7XG4gICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgdmFyIGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgnb3NjLWlkZWEtZGVsZXRlZCcsIHsgZGV0YWlsOiB7IGlkZWFJZCB9IH0pO1xuXHRcdCAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ05pZXQgZ29lZCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG5cbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgaWRlYSA9IHNlbGYuc3RhdGUuaWRlYTtcblxuICAgIGlmICghaWRlYSkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgbGFiZWxIVE1MID0gbnVsbDtcblxuICAgIGlmIChzZWxmLmNvbmZpZy5pZGVhLnNob3dMYWJlbHMpIHtcbiAgICAgIGxldCB0eXBlSWQgPSBldmFsKGBpZGVhLiR7c2VsZi5jb25maWcudHlwZUZpZWxkfWApO1xuICAgICAgbGV0IHR5cGVEZWYgPSBzZWxmLmNvbmZpZy50eXBlcyAmJiBzZWxmLmNvbmZpZy50eXBlcy5maW5kKGRlZiA9PiBkZWYuaWQgPT0gdHlwZUlkIHx8IGRlZi52YWx1ZSA9PSB0eXBlSWQpO1xuICAgICAgaWYgKHR5cGVEZWYpIHtcbiAgICAgICAgbGV0IGxhYmVsVGV4dCA9IHR5cGVEZWYubGFiZWw7XG4gICAgICAgIGxldCBiYWNrZ3JvdW5kQ29sb3IgPSB0eXBlRGVmLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgbGV0IHRleHRDb2xvciA9IHR5cGVEZWYudGV4dENvbG9yO1xuICAgICAgICBsYWJlbEhUTUwgPSAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaWRlYS1sYWJlbFwiIHN0eWxlPXt7IGNvbG9yOiB0ZXh0Q29sb3IsIGJhY2tncm91bmRDb2xvciB9fT57bGFiZWxUZXh0fTwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBsZXQgcG9sbEhUTUwgPSBudWxsO1xuICAgIGxldCBhZGRQb2xsQnV0dG9uSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLnBvbGwuY2FuQWRkUG9sbHMpIHtcbiAgICAgIGlmIChpZGVhLnBvbGwgfHwgc2VsZi5zdGF0ZS5zaG93UG9sbEZvcm0pIHtcbiAgICAgICAgcG9sbEhUTUwgPSAoXG4gICAgICAgICAgPGRpdj5cblx0XHRcdCAgICAgIDxkaXYgaWQ9XCJwb2xsXCIgY2xhc3NOYW1lPVwib3NjLXBvbGwtaGVhZGVyXCI+PGgzPntzZWxmLmNvbmZpZy5wb2xsLnRpdGxlIHx8ICdQb2xsJ308L2gzPjwvZGl2PlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50UG9sbCBjb25maWc9e3sgLi4uc2VsZi5jb25maWcsIC4uLnNlbGYuY29uZmlnLnBvbGwsIGlkZWFJZDogc2VsZi5zdGF0ZS5pZGVhSWQgfX0gcG9sbD17aWRlYS5wb2xsfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpZGVhLmNhbiAmJiBpZGVhLmNhbi5lZGl0KSB7XG4gICAgICAgICAgYWRkUG9sbEJ1dHRvbkhUTUwgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1lZGl0YnV0dG9ucy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtaWRlYS1kZXRhaWxzLWVkaXRidXR0b24gb3NjLWVkaXRcIiBvbkNsaWNrPXsoZXZlbnQpID0+IHNlbGYuZGlzcGF0Y2hBZGRQb2xsQ2xpY2soZXZlbnQpfT5Qb2xsIHRvZXZvZWdlbjwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHZvdGVCdXR0b25zSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmlkZWEuc2hvd1ZvdGVCdXR0b25zKSB7XG4gICAgICB2b3RlQnV0dG9uc0hUTUwgPSAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWRldGFpbHMtdm90ZS1idXR0b25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxoMz5MaWtlczwvaDM+XG4gICAgICAgICAgPFZvdGVCdXR0b24gY29uZmlnPXt7IHRleHQ6ICdlZW5zJywgb3BpbmlvbjogJ3llcycsIGFwaTogdGhpcy5jb25maWcuYXBpLCB1c2VyOiB0aGlzLmNvbmZpZy51c2VyLCBzaXRlSWQ6IHRoaXMuY29uZmlnLnNpdGVJZCB9fSBpZGVhPXt0aGlzLnN0YXRlLmlkZWF9IG5hbWU9XCJsaWtlYnV0dG9uXCIgdmFsdWU9e2lkZWEueWVzfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgZWRpdEJ1dHRvbnNIVE1MID0gbnVsbDtcbiAgICBpZiAoIGlkZWEuY2FuICYmIGlkZWEuY2FuLmVkaXQgKSB7XG4gICAgICBlZGl0QnV0dG9uc0hUTUwgPSAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWVkaXRidXR0b25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwib3NjLWlkZWEtZGV0YWlscy1lZGl0YnV0dG9uIG9zYy1lZGl0XCIgb25DbGljaz17KGV2ZW50KSA9PiBzZWxmLmRpc3BhdGNoRWRpdElkZWFDbGljayhldmVudCl9PkJld2VyayBpZGVlPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtaWRlYS1kZXRhaWxzLWVkaXRidXR0b24gb3NjLWRlbGV0ZVwiIG9uQ2xpY2s9eyhldmVudCkgPT4geyBpZiAoIGNvbmZpcm0oJ1dlZXQgamUgaGV0IHpla2VyJykgKSBzZWxmLmRlbGV0ZUlkZWEoZXZlbnQpIH19PlZlcndpamRlciBpZGVlPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcblxuICAgIH1cblxuICAgIGxldCBtb2RCcmVha0hUTUwgPSBudWxsO1xuICAgIGlmIChpZGVhICYmIGlkZWEubW9kQnJlYWspIHtcbiAgICAgIG1vZEJyZWFrSFRNTD0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1tb2RicmVha1wiPlxuICAgICAgICAgIHtpZGVhLm1vZEJyZWFrRGF0ZUh1bWFuaXplZH08YnIvPlxuICAgICAgICAgIDxici8+XG4gICAgICAgICAge2lkZWEubW9kQnJlYWt9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgcmVhY3Rpb25zQ291bnRIVE1MID0gbnVsbDtcbiAgICBpZiAoIHNlbGYuY29uZmlnLmFyZ3VtZW50LmlzQWN0aXZlICkge1xuICAgICAgcmVhY3Rpb25zQ291bnRIVE1MID0gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMz5SZWFjdGllczwvaDM+XG4gICAgICAgICAgPGEgaHJlZj1cIiNyZWFjdGlvbnNcIiBjbGFzc05hbWU9XCJvc2Mtbm8tb2YtcmVhY3Rpb25zXCI+e2lkZWEuYXJnQ291bnQgfHwgMH0gcmVhY3RpZXM8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgcmVhY3Rpb25zSFRNTCA9IG51bGw7XG4gICAgaWYgKCBzZWxmLmNvbmZpZy5hcmd1bWVudC5pc0FjdGl2ZSApIHtcbiAgICAgIC8vIHRvZG86IHJlZmFjdG9yIGNvbmZpZyB6b2RhdCBoaWogaW4gcmVhY3Rpb25zIG9vayBnZXdvb24gYXJndW1lbnQ6IHt9IGhlZXQsIGVuIGRhbiBkZXplIHJlZ2VscyBuYWFyIGRhYXJcbiAgICAgIGxldCBjb25maWcgPSB7Li4uc2VsZi5jb25maWd9XG4gICAgICBjb25maWcuYXJndW1lbnQuaXNBY3RpdmUgPSB0aGlzLmNvbmZpZy5hcmd1bWVudC5pc0FjdGl2ZSAmJiAhdGhpcy5jb25maWcuYXJndW1lbnQuaWdub3JlUmVhY3Rpb25zRm9ySWRlYUlkcy5tYXRjaChuZXcgUmVnRXhwKGAoPzpefFxcXFxEKSR7aWRlYS5pZH0oPzpcXFxcRHwkKWApKTtcbiAgICAgIGNvbmZpZy5hcmd1bWVudC5pc0Nsb3NlZCA9IHRoaXMuY29uZmlnLmFyZ3VtZW50LmlzQ2xvc2VkIHx8IHRoaXMuY29uZmlnLmFyZ3VtZW50LmNsb3NlUmVhY3Rpb25zRm9ySWRlYUlkcy5tYXRjaChuZXcgUmVnRXhwKGAoPzpefFxcXFxEKSR7aWRlYS5pZH0oPzpcXFxcRHwkKWApKTtcbiAgICAgIHJlYWN0aW9uc0hUTUwgPSAoXG4gICAgICAgIDxkaXY+XG5cdFx0XHQgICAgPGRpdiBpZD1cInJlYWN0aW9uc1wiIGNsYXNzTmFtZT1cIm9zYy1yZWFjdGlvbnMtaGVhZGVyXCI+PGgzPntzZWxmLmNvbmZpZy5hcmd1bWVudC50aXRsZSB8fCAnUmVhY3RpZXMnfTwvaDM+PC9kaXY+XG4gICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zIGNvbmZpZz17eyAuLi5zZWxmLmNvbmZpZy5hcmd1bWVudCwgdGl0bGU6IHVuZGVmaW5lZCwgYXBpOiBzZWxmLmNvbmZpZy5hcGksIHVzZXI6IHNlbGYuY29uZmlnLnVzZXIsIHNpdGVJZDogc2VsZi5jb25maWcuc2l0ZUlkLCBpZGVhSWQ6IGlkZWEuaWQsIGxvZ2luVXJsOiBzZWxmLmNvbmZpZy5sb2dpblVybCwgfX0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHNoYXJlQnV0dG9uc0hUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy5pZGVhLnNoYXJlQ2hhbm5lbHNTZWxlY3Rpb24ubGVuZ3RoKSB7XG4gICAgICBsZXQgZmFjZWJvb2tCdXR0b25IVE1MID0gc2VsZi5jb25maWcuaWRlYS5zaGFyZUNoYW5uZWxzU2VsZWN0aW9uLmluY2x1ZGVzKCdmYWNlYm9vaycpID8gKDxsaT48YSBjbGFzc05hbWU9XCJvc2Mtc2hhcmUtZmFjZWJvb2tcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXsgJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PScgKyBlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQubG9jYXRpb24uaHJlZikgfT5GYWNlYm9vazwvYT48L2xpPikgOiBudWxsO1xuICAgICAgbGV0IHR3aXR0ZXJCdXR0b25IVE1MID0gc2VsZi5jb25maWcuaWRlYS5zaGFyZUNoYW5uZWxzU2VsZWN0aW9uLmluY2x1ZGVzKCd0d2l0dGVyJykgPyAoPGxpPjxhIGNsYXNzTmFtZT1cIm9zYy1zaGFyZS10d2l0dGVyXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj17ICdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PScgKyBlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQubG9jYXRpb24uaHJlZikgfT5Ud2l0dGVyPC9hPjwvbGk+KSA6IG51bGw7XG4gICAgICBsZXQgbWFpbEJ1dHRvbkhUTUwgPSBzZWxmLmNvbmZpZy5pZGVhLnNoYXJlQ2hhbm5lbHNTZWxlY3Rpb24uaW5jbHVkZXMoJ21haWwnKSA/ICg8bGk+PGEgY2xhc3NOYW1lPVwib3NjLXNoYXJlLWVtYWlsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj17ICdtYWlsdG86P3N1YmplY3Q9JyArIGVuY29kZVVSSUNvbXBvbmVudChldmFsKGBpZGVhLiR7c2VsZi5jb25maWcudGl0bGVGaWVsZH1gKSkgKyAnJmJvZHk9JyArIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKX0+RW1haWw8L2E+PC9saT4pIDogbnVsbDtcbiAgICAgIGxldCB3aGF0c2FwcEJ1dHRvbkhUTUwgPSBzZWxmLmNvbmZpZy5pZGVhLnNoYXJlQ2hhbm5lbHNTZWxlY3Rpb24uaW5jbHVkZXMoJ3doYXRzYXBwJykgPyAoPGxpPjxhIGNsYXNzTmFtZT1cIm9zYy1zaGFyZS13aGF0c2FwcFwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9eyAnaHR0cHM6Ly93YS5tZS8/dGV4dD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpIH0+V2hhdHNBcHA8L2E+PC9saT4pIDogbnVsbDtcblxuICAgICAgc2hhcmVCdXR0b25zSFRNTCA9IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWRldGFpbHMtc2hhcmVidXR0b25zXCI+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7ZmFjZWJvb2tCdXR0b25IVE1MfVxuICAgICAgICAgIHt0d2l0dGVyQnV0dG9uSFRNTH1cbiAgICAgICAgICB7bWFpbEJ1dHRvbkhUTUx9XG4gICAgICAgICAge3doYXRzYXBwQnV0dG9uSFRNTH1cblx0XHRcdFx0PC91bD5cbiAgICAgIDwvZGl2Pik7XG5cblxuICAgIH1cblxuICAgIGxldCBhdXRob3JIVE1MID0gaWRlYS51c2VyLm5pY2tOYW1lIHx8IGlkZWEudXNlci5mdWxsTmFtZSB8fCBpZGVhLnVzZXIuZmlyc3ROYW1lICsnICcgKyBpZGVhLnVzZXIubGFzdE5hbWU7XG4gICAgaWYgKHRoaXMuY29uZmlnLmxpbmtUb1VzZXJQYWdlVXJsKSB7XG4gICAgICBhdXRob3JIVE1MID0gPGEgaHJlZj17dGhpcy5jb25maWcubGlua1RvVXNlclBhZ2VVcmwgKyAnLycgKyBpZGVhLnVzZXIuaWR9IGNsYXNzTmFtZT1cIm9zYy1hdXRob3ItbGlua1wiPnthdXRob3JIVE1MfTwvYT5cbiAgICB9XG5cbiAgICBsZXQgbWV0YURhdGFIVE1MID0gc2VsZi5jb25maWcuaWRlYS5tZXRhRGF0YVRlbXBsYXRlO1xuICAgIGlmIChtZXRhRGF0YUhUTUwpIHtcbiAgICAgIG1ldGFEYXRhSFRNTCA9IG1ldGFEYXRhSFRNTC5yZXBsYWNlKC9cXHtjcmVhdGVEYXRlXFx9LywgaWRlYS5jcmVhdGVEYXRlSHVtYW5pemVkKTtcbiAgICAgIG1ldGFEYXRhSFRNTCA9IG1ldGFEYXRhSFRNTC5yZXBsYWNlKC9cXHt0aGVtZVxcfS8sIGlkZWEuZXh0cmFEYXRhLnRoZW1lKTtcbiAgICAgIGNvbnNvbGUubG9nKCd4eCcpO1xuICAgICAgY29uc29sZS5sb2cobWV0YURhdGFIVE1MKTtcbiAgICAgIG1ldGFEYXRhSFRNTCA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5yZWFjdFRlbXBsYXRlKHsgaHRtbDogbWV0YURhdGFIVE1MLCB1c2VybmFtZTogYXV0aG9ySFRNTCB9KVxuICAgICAgY29uc29sZS5sb2cobWV0YURhdGFIVE1MKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBpZD17c2VsZi5pZH0gY2xhc3NOYW1lPXtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnb3NjLWluZm8tYmxvY2staWRlYS1kZXRhaWxzJ30gcmVmPXtlbCA9PiAoc2VsZi5pbnN0YW5jZSA9IGVsKX0+XG5cblx0XHRcdCAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc3BhY2VyXCI+PC9kaXY+XG5cblx0XHRcdCAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaWRlYS1kZXRhaWxzLWNvbnRhaW5lclwiPlxuXHRcdFx0ICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWlkZWEtZGV0YWlsc1wiPlxuXG5cdFx0XHRcdCAgICA8aDI+e2V2YWwoYGlkZWEuJHtzZWxmLmNvbmZpZy50aXRsZUZpZWxkfWApfTwvaDI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWRldGFpbHMtaW1hZ2UtYW5kLXN0YXRzXCI+XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaWRlYS1pbWFnZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UgY29uZmlnPXt7IGFsbG93TXVsdGlwbGVJbWFnZXM6IHNlbGYuY29uZmlnLmlkZWEuYWxsb3dNdWx0aXBsZUltYWdlcyB9fSBpZGVhPXtpZGVhfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIHtsYWJlbEhUTUx9XG5cbiAgICAgICAgICAgICAge3NoYXJlQnV0dG9uc0hUTUx9XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtZGV0YWlscy1zdGF0c1wiPlxuICAgICAgICAgICAgICAgIHt2b3RlQnV0dG9uc0hUTUx9XG4gICAgICAgICAgICAgICAge3JlYWN0aW9uc0NvdW50SFRNTH1cbiAgICAgICAgICAgICAgICB7ZWRpdEJ1dHRvbnNIVE1MfVxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIlwiPlxuICAgICAgICAgICAgICB7bWV0YURhdGFIVE1MfVxuICAgICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgICB7bW9kQnJlYWtIVE1MfVxuXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJvc2MtZGV0YWlscy1zdW1tYXJ5XCI+e2lkZWEuc3VtbWFyeX08L3A+XG5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm9zYy1kZXRhaWxzLWRlc2NyaXB0aW9uXCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBpZGVhLmRlc2NyaXB0aW9uIH19PjwvcD5cblxuICAgICAgICAgICAge2FkZFBvbGxCdXR0b25IVE1MfVxuXG5cdFx0XHQgICAgPC9kaXY+XG5cbiAgICAgICAgICB7cG9sbEhUTUx9XG5cbiAgICAgICAgICB7cmVhY3Rpb25zSFRNTH1cblxuXHRcdFx0ICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWJvdHRvbS1zcGFjZXJcIj48L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cblxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtcyBmcm9tICcuLi8uLi9mb3Jtcy9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9uRm9ybSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGFyZ3VtZW50SWQ6IG51bGwsXG4gICAgICBhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHt9LFxuICAgICAgZGVzY3JpcHRpb25NaW5MZW5ndGg6IDMwLFxuICAgICAgZGVzY3JpcHRpb25NYXhMZW5ndGg6IDUwMCxcbiAgICAgIHJlcXVpcmVkVXNlclJvbGU6ICdtZW1iZXInLFxuICAgICAgZm9ybUludHJvOiAnJyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICB9KTtcblxuICAgIHRoaXMuY29uZmlnLmxvZ2luVXJsID0gdGhpcy5jb25maWcubG9naW5VcmwgfHwgJy9vYXV0aC9sb2dpbj9yZXR1cm5Ubz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpO1xuICAgIFxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5jb25maWcuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgIGlzQnVzeTogZmFsc2UsXG4gICAgfTtcblxuICB9XG5cbiAgaGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGlmIChkYXRhLmRlc2NyaXB0aW9uKSBkYXRhLmlzVmFsaWQgPSB0aGlzLmRlc2NyaXB0aW9uLmlzVmFsaWQoKTtcbiAgICB0aGlzLnNldFN0YXRlKGRhdGEpO1xuICB9XG5cbiAgY2FuU3VibWl0KCkge1xuICAgIGxldCByZXF1aXJlZFVzZXJSb2xlID0gdGhpcy5jb25maWcucmVxdWlyZWRVc2VyUm9sZTtcbiAgICBsZXQgdXNlciA9IHRoaXMucHJvcHMudXNlciB8fCB7fTtcbiAgICByZXR1cm4gT3BlblN0YWRDb21wb25lbnRMaWJzLnVzZXIuaGFzUm9sZSh1c2VyLCByZXF1aXJlZFVzZXJSb2xlKVxuICB9XG5cbiAgc3VibWl0Rm9ybSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuc2V0U3RhdGUoeyBpc0J1c3k6IHRydWUgfSwgKCkgPT4ge1xuXG4gICAgICBsZXQgaXNWYWxpZCA9IHNlbGYuZGVzY3JpcHRpb24udmFsaWRhdGUoeyBzaG93V2FybmluZzogdHJ1ZSB9KTtcbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSwgaXNWYWxpZDogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLmNhblN1Ym1pdCgpKSByZXR1cm4gYWxlcnQoJ0plIGJlbnQgbmlldCBpbmdlbG9nZCcpO1xuXG4gICAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50JHsgICBzZWxmLmNvbmZpZy5hcmd1bWVudElkID8gYC8keyAgc2VsZi5jb25maWcuYXJndW1lbnRJZH1gIDogJyd9YDtcbiAgICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcbiAgICAgIGxldCBtZXRob2QgPSBzZWxmLmNvbmZpZy5hcmd1bWVudElkID8gJ1BVVCcgOiAnUE9TVCc7XG5cbiAgICAgIGxldCBib2R5ID0ge1xuICAgICAgICBwYXJlbnRJZDogc2VsZi5jb25maWcucGFyZW50SWQsXG4gICAgICAgIHNlbnRpbWVudDogc2VsZi5jb25maWcuc2VudGltZW50LFxuICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5kZXNjcmlwdGlvbixcbiAgICAgIH07XG5cbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcub25TdWJtaXQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5jb25maWcub25TdWJtaXQoeyBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5kZXNjcmlwdGlvbiB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgZGVzY3JpcHRpb246ICcnLCBpc0J1c3k6IGZhbHNlLCBpc1ZhbGlkOiBmYWxzZSB9LCAoKSA9PiB7XG5cbiAgICAgICAgICAgIHNlbGYuZGVzY3JpcHRpb24uaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogJycgfSk7XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hcmd1bWVudElkKSB7XG5cdFx0ICAgICAgICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLXJlYWN0aW9uLWVkaXRlZCcsIHsgZGV0YWlsOiBqc29uIH0pO1xuXHRcdCAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLW5ldy1yZWFjdGlvbi1zdG9yZWQnLCB7IGRldGFpbDoganNvbiB9KTtcblx0XHQgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBlcnJvci50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VzKSB7IGFsZXJ0KG1lc3NhZ2VzKTsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IGlzQnVzeTogZmFsc2UsIGlzVmFsaWQ6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgY29uZmlnID0ge1xuICAgICAgZGVzY3JpcHRpb25NaW5MZW5ndGg6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uTWluTGVuZ3RoIHx8IDMwLFxuICAgICAgZGVzY3JpcHRpb25NYXhMZW5ndGg6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uTWF4TGVuZ3RoIHx8IDUwMCxcbiAgICB9O1xuXG4gICAgbGV0IGZvcm1JbnRybyA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmZvcm1JbnRybykge1xuICAgICAgZm9ybUludHJvID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbnRyb1wiPntzZWxmLmNvbmZpZy5mb3JtSW50cm99PC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBzdWJtaXRCdXR0b25IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jYW5TdWJtaXQoKSkge1xuICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtYWxpZ24tcmlnaHQtY29udGFpbmVyXCI+XG5cdFx0XHQgICAgPGJ1dHRvbiBvbkNsaWNrPXsoZSkgPT4geyBpZiAoIXNlbGYuc3RhdGUuaXNCdXN5KSBzZWxmLnN1Ym1pdEZvcm0oKTsgfX0gY2xhc3NOYW1lPXtgb3NjLWJ1dHRvbi1ibHVlJHsgIXNlbGYuc3RhdGUuaXNWYWxpZCB8fCBzZWxmLnN0YXRlLmlzQnVzeSA/ICcgb3NjLWRpc2FibGVkJyA6ICcnIH1gfSA+VmVyemVuZGVuPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtYWxpZ24tcmlnaHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB7IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2Uuc2V0KCdvc2MtcmVhY3Rpb25zLWxvZ2luLXBlbmRpbmcnLCB0cnVlKTsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHNlbGYuY29uZmlnLmxvZ2luVXJsOyB9fSBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLWJsdWUgb3NjLW5vdC1sb2dnZWQtaW4tYnV0dG9uXCI+SW5sb2dnZW48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPXtzZWxmLmRpdklkfSBjbGFzc05hbWU9XCJcIiByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSA+XG4gICAgICAgIHtmb3JtSW50cm99XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgZGlzYWJsZWQ9e3RoaXMuY2FuU3VibWl0KCkgPyBudWxsIDogdHJ1ZX0gY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHRhcmVhJywgbWluTGVuZ3RoOiBjb25maWcuZGVzY3JpcHRpb25NaW5MZW5ndGgsIG1heExlbmd0aDogY29uZmlnLmRlc2NyaXB0aW9uTWF4TGVuZ3RoLCBwbGFjZWhvbGRlcjogc2VsZi5jb25maWcucGxhY2Vob2xkZXIgfX0gdmFsdWU9e3NlbGYuc3RhdGUuZGVzY3JpcHRpb259IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgZGVzY3JpcHRpb246IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IChzZWxmLmRlc2NyaXB0aW9uID0gZWwpfS8+XG4gICAgICAgIHtzdWJtaXRCdXR0b25IVE1MfVxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gZnJvbSAnLi9yZWFjdGlvbi1mb3JtLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICBzaXRlSWQ6IG51bGwsXG4gICAgICBpZGVhSWQ6IG51bGwsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIGRlc2NyaXB0aW9uTWluTGVuZ3RoOiAzMCxcbiAgICAgIGRlc2NyaXB0aW9uTWF4TGVuZ3RoOiA1MDAsXG4gICAgICBhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkVXNlclJvbGU6ICdtZW1iZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXI6IHByb3BzLnVzZXIsXG4gICAgICBpc01lbnVBY3RpdmU6IGZhbHNlLFxuICAgICAgaXNSZXBseUZyb21BY3RpdmU6IGZhbHNlLFxuICAgICAgZWRpdE1vZGU6IGZhbHNlLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLm5ld1JlYWN0aW9uU3RvcmVkTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2VsZi5vbk5ld1JlYWN0aW9uU3RvcmVkKGV2ZW50LmRldGFpbCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtbmV3LXJlYWN0aW9uLXN0b3JlZCcsIHNlbGYubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lcilcblxuICAgIHNlbGYucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25FZGl0ZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1lZGl0ZWQnLCBzZWxmLnJlYWN0aW9uRWRpdGVkTGlzdGVuZXIpXG5cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgdGhpcy5uZXdSZWFjdGlvblN0b3JlZExpc3RlbmVyKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZWRpdGVkJywgdGhpcy5yZWFjdGlvbkVkaXRlZExpc3RlbmVyKTtcbiAgfVxuXG4gIHNob3dNZW51KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc01lbnVBY3RpdmU6IHRydWUgfSk7XG4gIH1cblxuICB0b2dnbGVSZXBseUZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzUmVwbHlGcm9tQWN0aXZlOiAhdGhpcy5zdGF0ZS5pc1JlcGx5RnJvbUFjdGl2ZSB9KTtcbiAgfVxuXG4gIHRvZ2dsZUVkaXRGb3JtKHdoYXQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6ICF0aGlzLnN0YXRlLmVkaXRNb2RlIH0pO1xuICB9XG5cbiAgY2FuRWRpdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kYXRhLmNhbi5lZGl0O1xuICB9XG5cbiAgY2FuRGVsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRhdGEuY2FuLmRlbGV0ZTtcbiAgfVxuXG4gIGNhbkxpa2UoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmlzQ2xvc2VkKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHJlcXVpcmVkVXNlclJvbGUgPSB0aGlzLmNvbmZpZy5yZXF1aXJlZFVzZXJSb2xlO1xuICAgIGxldCB1c2VyUm9sZSA9IHRoaXMucHJvcHMudXNlciAmJiB0aGlzLnByb3BzLnVzZXIucm9sZTtcbiAgICAgIHJldHVybiAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ2Fub255bW91cycgJiYgdXNlclJvbGUgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdtZW1iZXInICYmICggdXNlclJvbGUgPT0gJ21lbWJlcicgfHwgdXNlclJvbGUgPT0gJ2VkaXRvcicgfHwgdXNlclJvbGUgPT0gJ21vZGVyYXRvcicgfHwgdXNlclJvbGUgPT0gJ2FkbWluJyApICkgIHx8XG4gICAgICAgICggcmVxdWlyZWRVc2VyUm9sZSA9PSAnZWRpdG9yJyAmJiAoIHVzZXJSb2xlID09ICdlZGl0b3InIHx8IHVzZXJSb2xlID09ICdtb2RlcmF0b3InIHx8IHVzZXJSb2xlID09ICdhZG1pbicgKSApICB8fFxuICAgICAgICAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ21vZGVyYXRvcicgJiYgKCB1c2VyUm9sZSA9PSAnbW9kZXJhdG9yJyB8fCB1c2VyUm9sZSA9PSAnYWRtaW4nICkgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdhZG1pbicgJiYgdXNlclJvbGUgPT0gJ2FkbWluJyApO1xuICB9XG5cbiAgY2FuUmVwbHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGF0YS5jYW4ucmVwbHk7XG4gIH1cblxuICBzdWJtaXREZWxldGUoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIXNlbGYuY2FuRGVsZXRlKCkpIHJldHVybiBhbGVydCgnVSBrdW50IGRlemUgcmVhY3RpZSBuaWV0IHZlcndpamRlcmVuJyk7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50LyR7ICBzZWxmLnByb3BzLmRhdGEuaWR9YDtcbiAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICBsZXQgYm9keSA9IHt9O1xuXG4gICAgZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgIH0pXG4gICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNEZWxldGVkOiB0cnVlIH0pO1xuXG5cdFx0ICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLXJlYWN0aW9uLWRlbGV0ZWQnLCB7IGRldGFpbDogeyBpZGVhSWQ6IHNlbGYuY29uZmlnLmlkZWFJZCB9IH0pO1xuXHRcdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICB9KTtcblxuICB9XG5cbiAgc3VibWl0TGlrZSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGlmICghc2VsZi5jYW5MaWtlKCkpIHJldHVybiBhbGVydCgnVSBrdW50IGRlemUgcmVhY3RpZSBuaWV0IGxpa2VuJyk7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50LyR7ICBzZWxmLnByb3BzLmRhdGEuaWQgIH0vdm90ZWA7XG4gICAgbGV0IGhlYWRlcnMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMuYXBpLmdldEhlYWRlcnMoc2VsZi5jb25maWcpO1xuXG4gICAgbGV0IGJvZHkgPSB7fTtcblxuICAgIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgfSlcbiAgICAgIC50aGVuKCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHsgeWVzOiBqc29uLnllcywgaGFzVXNlclZvdGVkOiBqc29uLmhhc1VzZXJWb3RlZCB9KTtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHllczoganNvbi55ZXMsIGhhc1VzZXJWb3RlZDoganNvbi5oYXNVc2VyVm90ZWQgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgZXJyb3IudGhlbihmdW5jdGlvbihtZXNzYWdlcykgeyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBvbk5ld1JlYWN0aW9uU3RvcmVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzTWVudUFjdGl2ZTogZmFsc2UsIGlzUmVwbHlGcm9tQWN0aXZlOiBmYWxzZSB9KTtcbiAgfVxuXG4gIG9uUmVhY3Rpb25FZGl0ZWQocmVhY3Rpb24pIHtcbiAgICBpZiAocmVhY3Rpb24uaWQgPT0gdGhpcy5wcm9wcy5kYXRhLmlkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6IGZhbHNlLCBpc01lbnVBY3RpdmU6IGZhbHNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGF0YSA9IHNlbGYucHJvcHMuZGF0YSB8fCB7IGNhbjoge30gfTtcblxuICAgIGlmIChkYXRhLmlzRGVsZXRlZCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgaXNBZG1pbiA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy51c2VyLmhhc1JvbGUoZGF0YS51c2VyLCAnZWRpdG9yJykgPyAnb3NjLWlzLWFkbWluJyA6ICcnO1xuICAgIGxldCBtZXRhZGF0YUhUTUwgPSA8ZGl2IGNsYXNzTmFtZT17YG9zYy1yZWFjdGlvbi11c2VyICR7aXNBZG1pbn1gfT57ZGF0YS51c2VyLm5pY2tOYW1lIHx8IGRhdGEudXNlci5mdWxsTmFtZSB8fCBgJHtkYXRhLnVzZXIuZmlyc3ROYW1lIH0gJHsgIGRhdGEudXNlci5sYXN0TmFtZX1gfTwvZGl2PlxuXG4gICAgbGV0IG1lbnVIVE1MID0gbnVsbDtcbiAgICBpZiAoIHNlbGYuY2FuRWRpdCgpICYmIHNlbGYuY2FuRGVsZXRlKCkgKSB7XG4gICAgICBtZW51SFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBgb3NjLXJlYWN0aW9uLW1lbnUkeyAgIHNlbGYuc3RhdGUuaXNNZW51QWN0aXZlID8gJyBvc2MtcmVhY3Rpb24taGFtYnVyZ2VyLWFjdGl2ZScgOiAnJ31gIH0gb25DbGljaz17ICgpID0+IHsgc2VsZi5zaG93TWVudSgpOyB9fT5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZGVsZXRlXCIgdGl0bGU9XCJBcmd1bWVudCB2ZXJ3aWpkZXJlblwiIG9uQ2xpY2s9eyAoKSA9PiB7IGlmIChjb25maXJtKCdXZWV0IGplIGhldCB6ZWtlcj8nKSkgc2VsZi5zdWJtaXREZWxldGUoKTsgfSB9Lz5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZWRpdFwiIHRpdGxlPVwiQXJndW1lbnQgYmV3ZXJrZW5cIiBvbkNsaWNrPXsgKCkgPT4gc2VsZi50b2dnbGVFZGl0Rm9ybSgpIH0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGRlc2NyaXB0aW9uSFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yZWFjdGlvbi1kZXNjcmlwdGlvblwiPntkYXRhLmRlc2NyaXB0aW9ufTwvZGl2Pik7XG4gICAgaWYgKHNlbGYuc3RhdGUuZWRpdE1vZGUpIHtcbiAgICAgIGRlc2NyaXB0aW9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gY29uZmlnPXt7IC4uLnNlbGYuY29uZmlnLCBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiwgYXJndW1lbnRJZDogZGF0YS5pZCB9fSB1c2VyPXtzZWxmLnN0YXRlLnVzZXJ9IHJlZj17ZWwgPT4gKHNlbGYuZWRpdEZvcm0gPSBlbCl9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBsaWtlQnV0dG9uSFRNTCA9IG51bGw7XG4gICAgaWYgKCFkYXRhLnBhcmVudElkKSB7XG4gICAgICBsaWtlQnV0dG9uSFRNTCA9IChcblx0XHRcdCAgPGEgY2xhc3NOYW1lPXsgYG9zYy1yZWFjdGlvbi1saWtlLWJ1dHRvbiR7ICggdHlwZW9mIHNlbGYuc3RhdGUuaGFzVXNlclZvdGVkICE9ICd1bmRlZmluZWQnID8gc2VsZi5zdGF0ZS5oYXNVc2VyVm90ZWQgOiBkYXRhLmhhc1VzZXJWb3RlZCApID8gJyBvc2MtcmVhY3Rpb24tbGlrZS1idXR0b24taGFzdm90ZWQnIDogJyd9YCB9IG9uQ2xpY2s9eyAoKSA9PiBzZWxmLnN1Ym1pdExpa2UoKSB9PlxuXHRcdFx0XHQgIE1lZSBlZW5zICg8c3Bhbj57KCB0eXBlb2Ygc2VsZi5zdGF0ZS55ZXMgIT0gJ3VuZGVmaW5lZCcgPyBzZWxmLnN0YXRlLnllcyA6IGRhdGEueWVzICkgfCAwfTwvc3Bhbj4pXG4gICAgICAgIDwvYT5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHJlcGx5QnV0dG9uSFRNTCA9IG51bGw7XG4gICAgbGV0IHJlcGx5Rm9ybUhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNhblJlcGx5KCkgJiYgIXNlbGYuY29uZmlnLmlzQ2xvc2VkKSB7XG4gICAgICByZXBseUJ1dHRvbkhUTUwgPSAoPGEgb25DbGljaz17ICgpID0+IHNlbGYudG9nZ2xlUmVwbHlGb3JtKCkgfSBjbGFzc05hbWU9XCJvc2MtcmVwbHktYnV0dG9uXCI+UmVhZ2VyZW48L2E+KTtcbiAgICAgIGlmIChzZWxmLnN0YXRlLmlzUmVwbHlGcm9tQWN0aXZlKSB7XG4gICAgICAgIGxldCBjb25maWcgPSB7IC4uLnNlbGYuY29uZmlnLCBwYXJlbnRJZDogZGF0YS5pZCB9O1xuICAgICAgICBjb25maWcuZm9ybUludHJvID0gJyc7XG4gICAgICAgIHJlcGx5Rm9ybUhUTUwgPSAoXG5cdFx0XHQgICAgPGRpdiBpZD17YG9zYy1yZWFjdGlvbi0ke2RhdGEuaWR9YH0gY2xhc3NOYW1lPVwib3NjLXJlcGx5XCI+XG4gICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gY29uZmlnPXtjb25maWd9IHVzZXI9e3NlbGYuc3RhdGUudXNlcn0gcmVmPXtlbCA9PiAoc2VsZi5lZGl0Rm9ybSA9IGVsKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXBsaWVzSFRNTCA9IG51bGw7XG4gICAgaWYgKGRhdGEucmVhY3Rpb25zICYmIGRhdGEucmVhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgcmVwbGllc0hUTUwgPSAoXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb25zLWxpc3RcIj5cbiAgICAgICAgICB7ZGF0YS5yZWFjdGlvbnMubWFwKChyZWFjdGlvbikgPT4ge1xuXG4gICAgICAgICAgICBsZXQga2V5ID0gYG9zYy1yZWFjdGlvbi1rZXktJHsgICByZWFjdGlvbi5pZCB8fCBwYXJzZUludCggMTAwMDAwMCAqIE1hdGgucmFuZG9tKCkgKX1gO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGxpIGtleT17a2V5fT5cbiAgICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbiBjb25maWc9e3NlbGYuY29uZmlnfSBjbGFzc05hbWU9XCJvc2MtcmVwbHlcIiB1c2VyPXtzZWxmLnN0YXRlLnVzZXJ9IGRhdGE9e3JlYWN0aW9ufS8+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvdWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuXG5cdFx0XHQgIDxkaXYgaWQ9e2Bvc2MtcmVhY3Rpb24tJHtkYXRhLmlkfWB9IGNsYXNzTmFtZT17IHNlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICdvc2MtcmVhY3Rpb24nIH0+XG5cbiAgICAgICAgICB7bWVudUhUTUx9XG5cbiAgICAgICAgICB7bWV0YWRhdGFIVE1MfVxuXHRcdFx0XHQgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXJlYWN0aW9uLWRhdGVcIj57ZGF0YS5jcmVhdGVEYXRlSHVtYW5pemVkfTwvZGl2PlxuICAgICAgICAgIHtkZXNjcmlwdGlvbkhUTUx9XG5cbiAgICAgICAgICB7bGlrZUJ1dHRvbkhUTUx9XG5cdFx0XHQgICAge3JlcGx5QnV0dG9uSFRNTH1cblxuXHRcdCAgICA8L2Rpdj5cblxuXHRcdFx0ICB7cmVwbHlGb3JtSFRNTH1cbiAgICAgICAge3JlcGxpZXNIVE1MfVxuXG5cdFx0ICA8L2Rpdj5cblxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudExpYnMgZnJvbSAnLi4vLi4vbGlicy9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIGZyb20gJy4vcmVhY3Rpb24tZm9ybS5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gZnJvbSAnLi9yZWFjdGlvbi5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIHNjcm9sbFRvTmV3UmVhY3Rpb246IHRydWUsXG4gICAgICBpc0Nsb3NlZDogZmFsc2UsXG4gICAgICBjbG9zZWRUZXh0OiAnRGUgcmVhY3RpZW1vZ2VsaWpraGVpZCBpcyBnZXNsb3RlbicsXG4gICAgICBzZW50aW1lbnQ6IHVuZGVmaW5lZCxcbiAgICAgIHNpdGVJZDogbnVsbCxcbiAgICAgIGlkZWFJZDogbnVsbCxcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgdXNlcjogbnVsbCxcbiAgICAgIGxvZ2luVXJsOiAnJyxcbiAgICAgIGFwaToge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIGhlYWRlcnM6IG51bGwsXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWRVc2VyUm9sZTogJ21lbWJlcicsXG4gICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICBmb3JtSW50cm86ICcnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXI6IHRoaXMuY29uZmlnLnVzZXIsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyB1c2VyXG4gICAgaWYgKCEoIHNlbGYuc3RhdGUudXNlciAmJiBzZWxmLnN0YXRlLnVzZXIucm9sZSApKSB7XG4gICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMudXNlci5nZXRVc2VyKHsgdXNlcjogc2VsZi5jb25maWcudXNlciwgand0OiBzZWxmLmNvbmZpZy5qd3QsIHNpdGVJZDogc2VsZi5jb25maWcuc2l0ZUlkLCBhcGk6IHNlbGYuY29uZmlnLmFwaSB9LCAoZXJyLCB1c2VyKSA9PiB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyB1c2VyIH0sICgpID0+IHtcbiAgICAgICAgICBzZWxmLmZldGNoRGF0YSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmZldGNoRGF0YSgpO1xuICAgIH1cblxuICAgIHNlbGYubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uTmV3UmVhY3Rpb25TdG9yZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgc2VsZi5uZXdSZWFjdGlvblN0b3JlZExpc3RlbmVyKTtcblxuICAgIHNlbGYucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25FZGl0ZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1lZGl0ZWQnLCBzZWxmLnJlYWN0aW9uRWRpdGVkTGlzdGVuZXIpO1xuXG4gICAgc2VsZi5yZWFjdGlvbkRlbGV0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25EZWxldGVkKGV2ZW50LmRldGFpbCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZGVsZXRlZCcsIHNlbGYucmVhY3Rpb25EZWxldGVkTGlzdGVuZXIpO1xuXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdvc2MtbmV3LXJlYWN0aW9uLXN0b3JlZCcsIHRoaXMubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXJlYWN0aW9uLWVkaXRlZCcsIHRoaXMucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXJlYWN0aW9uLWRlbGV0ZWQnLCB0aGlzLnJlYWN0aW9uRGVsZXRlZExpc3RlbmVyKTtcbiAgfVxuXG4gIGZldGNoRGF0YShuZXh0KSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50P3NlbnRpbWVudD0keyAgc2VsZi5jb25maWcuc2VudGltZW50ICB9JndpdGhVc2VyPTEmd2l0aFVzZXJWb3RlPTEmd2l0aFZvdGVDb3VudD0xJmluY2x1ZGVSZWFjdGlvbnNPblJlYWN0aW9ucz0xYDtcbiAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICBmZXRjaCh1cmwsIHsgaGVhZGVycyB9KVxuICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcblxuICAgICAgICBsZXQgc3RhdGUgPSB7IC4uLnNlbGYuc3RhdGUgfTtcbiAgICAgICAgc3RhdGUucmVhY3Rpb25zID0ganNvbjtcbiAgICAgICAgc3RhdGUucmVhY3Rpb25zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICByZXR1cm4gYS5jcmVhdGVkQXQgPCBiLmNyZWF0ZWRBdDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXRlLnJlYWN0aW9ucyk7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChuZXh0KSByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICB9KTtcblxuICB9XG5cbiAgb25OZXdSZWFjdGlvblN0b3JlZChyZWFjdGlvbikge1xuICAgIHRoaXMuZmV0Y2hEYXRhKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zY3JvbGxUb05ld1JlYWN0aW9uKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG9zYy1yZWFjdGlvbi0keyAgcmVhY3Rpb24uaWR9YCk7XG4gICAgICAgIGlmICggZWxlbWVudCApIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBvc2MtcmVhY3Rpb24tJHsgIHJlYWN0aW9uLmlkfWApLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBvblJlYWN0aW9uRWRpdGVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIG9uUmVhY3Rpb25EZWxldGVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCByZWFjdGlvbnMgPVxuICAgICAgPHVsIGNsYXNzTmFtZT1cIm9zYy1yZWFjdGlvbnMtbGlzdFwiPlxuICAgICAgICB7c2VsZi5zdGF0ZS5yZWFjdGlvbnMubWFwKChyZWFjdGlvbikgPT4ge1xuXG4gICAgICAgICAgbGV0IGtleSA9IGBvc2MtcmVhY3Rpb24ta2V5LSR7ICAgcmVhY3Rpb24uaWQgfHwgcGFyc2VJbnQoIDEwMDAwMDAgKiBNYXRoLnJhbmRvbSgpICl9YDtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGtleT17a2V5fT5cbiAgICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gY29uZmlnPXtzZWxmLmNvbmZpZ30gdXNlcj17c2VsZi5zdGF0ZS51c2VyfSBkYXRhPXt7IC4uLnJlYWN0aW9uIH19Lz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKTtcblxuICAgICAgICB9KX1cbiAgICAgIDwvdWw+O1xuXG4gICAgbGV0IHRpdGxlID0gc2VsZi5jb25maWcudGl0bGUgPyA8aDM+e3NlbGYuY29uZmlnLnRpdGxlfTwvaDM+IDogbnVsbDtcblxuICAgIGxldCByZWFjdGlvbkZvcm1IVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIGNvbmZpZz17c2VsZi5jb25maWd9IHVzZXI9e3NlbGYuc3RhdGUudXNlcn0vPjtcbiAgICBpZiAoc2VsZi5jb25maWcuaXNDbG9zZWQpIHtcbiAgICAgIGlmIChzZWxmLmNvbmZpZy5jbG9zZWRUZXh0KSB7XG4gICAgICAgIHJlYWN0aW9uRm9ybUhUTUwgPSA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jbG9zZWQtdGV4dFwiPntzZWxmLmNvbmZpZy5jbG9zZWRUZXh0fTwvZGl2PlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVhY3Rpb25Gb3JtSFRNTCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD17dGhpcy5pZH0gY2xhc3NOYW1lPXtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnb3NjLXJlYWN0aW9ucyd9IHJlZj17KGVsKSA9PiB7IHRoaXMuaW5zdGFuY2UgPSBlbDsgfX0gPlxuXG4gICAgICAgIHt0aXRsZX1cblxuICAgICAgICB7cmVhY3Rpb25Gb3JtSFRNTH1cblxuICAgICAgICB7cmVhY3Rpb25zfVxuICAgICAgICA8YnIvPjxici8+XG5cbiAgICAgIDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIvLyBwb2x5ZmlsbHNcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLy8gcmVhY3RcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuLy8gaW1wb3J0IGNzcyB0byBtYWtlIHN1cmUgaXQgaXMgZ2VuZXJhdGVkIGluIHRoZSByZXN1bHRcbmltcG9ydCAnLi9jc3MvZGVmYXVsdC5sZXNzJztcblxuLy8gdGhlIG1vZHVsZVxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zIGZyb20gJy4vY29tcG9uZW50L3JlYWN0aW9ucy5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zLnJlbmRlckVsZW1lbnQgPSBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4gIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuXHRSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbn1cblxuZXhwb3J0IHtcbiAgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMgYXMgZGVmYXVsdCxcbiAgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMgYXMgUmVhY3Rpb25zLFxufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRMaWJzIGZyb20gJy4uLy4uL2xpYnMvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEZvcm1zIGZyb20gJy4uLy4uL2Zvcm1zL2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UG9sbEZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICB1c2VyOiB7fSxcbiAgICAgIHF1ZXN0aW9uTWluTGVuZ3RoOiAzMCxcbiAgICAgIHF1ZXN0aW9uTWF4TGVuZ3RoOiA1MDAsXG4gICAgICB0aXRsZU1pbkxlbmd0aDogMzAsXG4gICAgICB0aXRsZU1heExlbmd0aDogNTAwLFxuICAgICAgZGVzY3JpcHRpb25NaW5MZW5ndGg6IDMwLFxuICAgICAgZGVzY3JpcHRpb25NYXhMZW5ndGg6IDUwMCxcbiAgICAgIGFsbG93Q2hvaWNlVGl0bGVzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXI6IHByb3BzLnVzZXIsXG4gICAgICBwb2xsSWQ6IHByb3BzLnBvbGxJZCxcbiAgICAgIHBvbGw6IHByb3BzLnBvbGwsXG4gICAgICBpc0J1c3k6IGZhbHNlLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyB1c2VyXG4gICAgaWYgKCEoIHNlbGYuc3RhdGUudXNlciAmJiBzZWxmLnN0YXRlLnVzZXIucm9sZSApKSB7XG4gICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMudXNlci5nZXRVc2VyKHsgdXNlcjogc2VsZi5jb25maWcudXNlciwgand0OiBzZWxmLmNvbmZpZy5qd3QsIHNpdGVJZDogc2VsZi5jb25maWcuc2l0ZUlkLCBhcGk6IHNlbGYuY29uZmlnLmFwaSB9LCAoZXJyLCB1c2VyKSA9PiB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyB1c2VyIH0sICgpID0+IHtcbiAgICAgICAgICBpZiAoICFzZWxmLnN0YXRlLnBvbGwgKSBzZWxmLmZldGNoRGF0YSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoICFzZWxmLnN0YXRlLnBvbGwgKSBzZWxmLmZldGNoRGF0YSgpO1xuICAgIH1cblxuICB9XG5cbiAgZmV0Y2hEYXRhKG5leHQpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuc3RhdGUucG9sbElkKSB7XG4gICAgICByZXR1cm4gc2VsZi5zZXRTdGF0ZSh7IHBvbGw6IHtcbiAgICAgICAgcXVlc3Rpb246ICcnLFxuICAgICAgICBjaG9pY2VzOiB7IFwiMVwiOiB7fSwgXCIyXCI6IHt9IH0sXG4gICAgICB9fSk7XG4gICAgfVxuXG4gICAgbGV0IHVybCA9IGAke3NlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsICAgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2lkZWEvJHsgIHNlbGYuY29uZmlnLmlkZWFJZCAgfS9wb2xsLyR7IHNlbGYuY29uZmlnLnBvbGxJZCB9P3dpdGhVc2VyPTEmd2l0aFZvdGVzPTFgO1xuICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcblxuICAgIGZldGNoKHVybCwgeyBoZWFkZXJzIH0pXG4gICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuXG4gICAgICAgIGxldCBzdGF0ZSA9IHsgLi4uc2VsZi5zdGF0ZSB9O1xuICAgICAgICBzdGF0ZS5wb2xsID0ganNvbjtcblxuICAgICAgICBzZWxmLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAobmV4dCkgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICBlcnJvci50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VzKSB7IHJldHVybiBjb25zb2xlLmxvZyhtZXNzYWdlcyk7fSApO1xuICAgICAgfSk7XG5cbiAgfVxuXG4gIHZhbGlkYXRlZFJlc3VsdCgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgcG9sbCA9IHNlbGYuc3RhdGUucG9sbDtcblxuICAgIGxldCBxdWVzdGlvbklucHV0ID0gc2VsZlsncXVlc3Rpb24taW5wdXQnXTtcbiAgICBsZXQgaXNWYWxpZCA9IHF1ZXN0aW9uSW5wdXQudmFsaWRhdGUoKTtcbiAgICBsZXQgcmVzdWx0ID0geyBxdWVzdGlvbjogcXVlc3Rpb25JbnB1dC5zdGF0ZS52YWx1ZSwgY2hvaWNlczoge30gfTtcblxuICAgIE9iamVjdC5rZXlzKHBvbGwuY2hvaWNlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBsZXQgdGl0bGVJbnB1dCA9IHNlbGZbYHRpdGxlLWlucHV0LSR7a2V5fWBdO1xuICAgICAgbGV0IGRlc2NyaXB0aW9uSW5wdXQgPSBzZWxmW2BkZXNjcmlwdGlvbi1pbnB1dC0ke2tleX1gXTtcbiAgICAgIGlmICghKCB0aXRsZUlucHV0ICYmIHRpdGxlSW5wdXQuc3RhdGUudmFsdWUgKSAmJiAhZGVzY3JpcHRpb25JbnB1dC5zdGF0ZS52YWx1ZSkgcmV0dXJuO1xuICAgICAgcmVzdWx0LmNob2ljZXNba2V5XSA9IHt9O1xuICAgICAgaWYgKHNlbGYuY29uZmlnLmFsbG93Q2hvaWNlVGl0bGVzICYmIHRpdGxlSW5wdXQuc3RhdGUudmFsdWUpIHtcbiAgICAgICAgcmVzdWx0LmNob2ljZXNba2V5XS50aXRsZSA9IHRpdGxlSW5wdXQuc3RhdGUudmFsdWU7XG4gICAgICAgIGlmICghdGl0bGVJbnB1dC52YWxpZGF0ZSgpKSBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZGVzY3JpcHRpb25JbnB1dC5zdGF0ZS52YWx1ZSkge1xuICAgICAgICByZXN1bHQuY2hvaWNlc1trZXldLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25JbnB1dC5zdGF0ZS52YWx1ZTtcbiAgICAgICAgaWYgKCFkZXNjcmlwdGlvbklucHV0LnZhbGlkYXRlKCkpIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaXNWYWxpZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKE9iamVjdC5rZXlzKHJlc3VsdC5jaG9pY2VzKS5sZW5ndGggPCAyKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIH1cblxuICBoYW5kbGVPbkNoYW5nZShkYXRhKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHBvbGwgPSB7IC4uLnNlbGYuc3RhdGUucG9sbCB9O1xuXG4gICAgaWYgKGRhdGEuY2hvaWNlKSB7XG4gICAgICBwb2xsLmNob2ljZXNbIGRhdGEuY2hvaWNlLmlkIF0gPSB7XG4gICAgICAgIHRpdGxlOiBzZWxmLmNvbmZpZy5hbGxvd0Nob2ljZVRpdGxlcyAmJiBkYXRhLmNob2ljZS50aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGRhdGEuY2hvaWNlLmRlc2NyaXB0aW9uLFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLnF1ZXN0aW9uKSB7XG4gICAgICBwb2xsLnF1ZXN0aW9uID0gZGF0YS5xdWVzdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgcG9sbCB9LCAoKSA9PiB7XG4gICAgfSk7XG5cbiAgfVxuXG4gIGFkZENob2ljZSgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHBvbGwgPSB7IC4uLnNlbGYuc3RhdGUucG9sbCB9O1xuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMocG9sbC5jaG9pY2VzKS5zb3J0KCk7XG4gICAgbGV0IGtleSA9IHBhcnNlSW50KCBrZXlzW2tleXMubGVuZ3RoLTFdICkgKyAxO1xuICAgIHBvbGwuY2hvaWNlc1sga2V5IF0gPSB7fTtcbiAgICBzZWxmLnNldFN0YXRlKHsgcG9sbCB9KVxuICB9XG5cbiAgY2FuU3VibWl0KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnBvbGwgJiYgdGhpcy5zdGF0ZS5wb2xsLmNhbikge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucG9sbC5jYW4uZWRpdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlcXVpcmVkVXNlclJvbGUgPSB0aGlzLmNvbmZpZy5yZXF1aXJlZFVzZXJSb2xlO1xuICAgICAgbGV0IHVzZXJSb2xlID0gJ21vZGVyYXRvcicgfHwgdGhpcy5wcm9wcy51c2VyICYmIHRoaXMucHJvcHMudXNlci5yb2xlO1xuICAgICAgLy8gdG9kbzogb3duZXI7IGR1cyBkaXQgbW9ldCBhbmRlcnNcbiAgICAgIHJldHVybiAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ2Fub255bW91cycgJiYgdXNlclJvbGUgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdtZW1iZXInICYmICggdXNlclJvbGUgPT0gJ21lbWJlcicgfHwgdXNlclJvbGUgPT0gJ2VkaXRvcicgfHwgdXNlclJvbGUgPT0gJ21vZGVyYXRvcicgfHwgdXNlclJvbGUgPT0gJ2FkbWluJyApICkgIHx8XG4gICAgICAgICggcmVxdWlyZWRVc2VyUm9sZSA9PSAnZWRpdG9yJyAmJiAoIHVzZXJSb2xlID09ICdlZGl0b3InIHx8IHVzZXJSb2xlID09ICdtb2RlcmF0b3InIHx8IHVzZXJSb2xlID09ICdhZG1pbicgKSApICB8fFxuICAgICAgICAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ21vZGVyYXRvcicgJiYgKCB1c2VyUm9sZSA9PSAnbW9kZXJhdG9yJyB8fCB1c2VyUm9sZSA9PSAnYWRtaW4nICkgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdhZG1pbicgJiYgdXNlclJvbGUgPT0gJ2FkbWluJyApO1xuICAgIH1cbiAgfVxuXG4gIHN1Ym1pdEZvcm0oKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiB0cnVlIH0sICgpID0+IHtcblxuICAgICAgbGV0IHZhbGlkYXRlZFJlc3VsdCA9IHNlbGYudmFsaWRhdGVkUmVzdWx0KCk7XG4gICAgICBpZiAoIXZhbGlkYXRlZFJlc3VsdCkge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuY2FuU3VibWl0KCkpIHJldHVybiBhbGVydCgnSmUgYmVudCBuaWV0IGluZ2Vsb2dkJyk7XG5cbiAgICAgIGxldCBpc05ldyA9IHRydWU7XG4gICAgICBsZXQgdXJsID0gYCR7IHNlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsIH0vYXBpL3NpdGUvJHsgc2VsZi5jb25maWcuc2l0ZUlkIH0vaWRlYS8keyBzZWxmLmNvbmZpZy5pZGVhSWQgfS9wb2xsYDtcbiAgICAgIGxldCBtZXRob2QgPSAnUE9TVCc7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5wb2xsICYmIHNlbGYuc3RhdGUucG9sbC5pZCkge1xuICAgICAgICB1cmwgKz0gYC8keyBzZWxmLnN0YXRlLnBvbGwuaWQgfWA7XG4gICAgICAgIG1ldGhvZCA9ICdQVVQnO1xuICAgICAgICBpc05ldyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgbGV0IGhlYWRlcnMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMuYXBpLmdldEhlYWRlcnMoc2VsZi5jb25maWcpO1xuXG4gICAgICBsZXQgYm9keSA9IHZhbGlkYXRlZFJlc3VsdDtcblxuICAgICAgZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICAgICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuXG5cdFx0ICAgICAgbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdvc2MtbmV3LXBvbGwtc3RvcmVkJywgeyBkZXRhaWw6IGpzb24gfSk7XG4gICAgICAgICAgaWYgKCFpc05ldykgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ29zYy1wb2xsLWVkaXRlZCcsIHsgZGV0YWlsOiBqc29uIH0pO1xuXG5cdFx0ICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLmNvbmZpZy5vbkZpbmlzaGVkID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm9uRmluaXNoZWQodmFsaWRhdGVkUmVzdWx0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgYWxlcnQobWVzc2FnZXMpOyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBwb2xsID0gc2VsZi5zdGF0ZS5wb2xsIHx8IHt9O1xuXG4gICAgbGV0IGZvcm1JbnRybyA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmZvcm1JbnRybykge1xuICAgICAgZm9ybUludHJvID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbnRyb1wiPntzZWxmLmNvbmZpZy5mb3JtSW50cm99PC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBsZXQgc3VibWl0QnV0dG9uSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY2FuU3VibWl0KCkpIHtcbiAgICAgIHN1Ym1pdEJ1dHRvbkhUTUwgPSAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWFsaWduLXJpZ2h0LWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwib3NjLWJ1dHRvbi1ibHVlXCIgb25DbGljaz17KCkgPT4geyBpZiAoc2VsZi5jb25maWcub25GaW5pc2hlZCkgc2VsZi5jb25maWcub25GaW5pc2hlZCgpOyB9fT5UZXJ1ZzwvYnV0dG9uPlxuXHRcdFx0ICAgIDxidXR0b24gb25DbGljaz17KGUpID0+IHsgaWYgKCFzZWxmLnN0YXRlLmlzQnVzeSkgc2VsZi5zdWJtaXRGb3JtKCk7IH19IGNsYXNzTmFtZT17YG9zYy1idXR0b24tYmx1ZSBvc2MtbWFyZ2luLWxlZnQkeyBzZWxmLnN0YXRlLmlzQnVzeSA/ICcgb3NjLWRpc2FibGVkJyA6ICcnIH1gfSA+VmVyemVuZGVuPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtYWxpZ24tcmlnaHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLWJsdWVcIiBvbkNsaWNrPXsoKSA9PiB7IGlmIChzZWxmLmNvbmZpZy5vbkZpbmlzaGVkKSBzZWxmLmNvbmZpZy5vbkZpbmlzaGVkKCk7IH19PlRlcnVnPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB7IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2Uuc2V0KCdvc2MtcmVhY3Rpb25zLWxvZ2luLXBlbmRpbmcnLCB0cnVlKTsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHNlbGYuY29uZmlnLmxvZ2luVXJsOyB9fSBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLWJsdWUgb3NjLW5vdC1sb2dnZWQtaW4tYnV0dG9uIG9zYy1tYXJnaW4tbGVmdFwiPklubG9nZ2VuPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD17c2VsZi5kaXZJZH0gY2xhc3NOYW1lPVwib3NjLWZvcm1cIiByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSA+XG4gICAgICAgIHtmb3JtSW50cm99XG5cbiAgICAgICAgPGg0PlZyYWFnPC9oND5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAndGV4dCcsIG1pbkxlbmd0aDogc2VsZi5jb25maWcucXVlc3Rpb25NaW5MZW5ndGgsIG1heExlbmd0aDogc2VsZi5jb25maWcucXVlc3Rpb25NYXhMZW5ndGgsIHBsYWNlaG9sZGVyOiAnVnJhYWcnIH19IHZhbHVlPXtwb2xsLnF1ZXN0aW9ufSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHF1ZXN0aW9uOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiAoc2VsZltgcXVlc3Rpb24taW5wdXRgXSA9IGVsKX0vPlxuXG4gICAgICAgIDxoND5LZXV6ZW1vZ2VsaWpraGVkZW48L2g0PlxuICAgICAgICA8b2wgY2xhc3NOYW1lPVwib3NjLXBvbGwtZm9ybS1jaG9pY2VzXCI+XG4gICAgICAgICAge3BvbGwgJiYgcG9sbC5jaG9pY2VzICYmIE9iamVjdC5rZXlzKHBvbGwuY2hvaWNlcykuc29ydCgpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgY2hvaWNlID0gcG9sbC5jaG9pY2VzW2tleV07XG4gICAgICAgICAgICBsZXQgdGl0bGVJbnB1dEhUTUwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmFsbG93Q2hvaWNlVGl0bGVzKSB0aXRsZUlucHV0SFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHQnLCBtaW5MZW5ndGg6IHNlbGYuY29uZmlnLnRpdGxlTWluTGVuZ3RoLCBtYXhMZW5ndGg6IHNlbGYuY29uZmlnLnRpdGxlTWF4TGVuZ3RoLCBwbGFjZWhvbGRlcjogJ1RpdGVsJyB9fSB2YWx1ZT17Y2hvaWNlLnRpdGxlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IGNob2ljZTogeyBpZDoga2V5LCB0aXRsZTogZGF0YS52YWx1ZSB9IH0pIH0gcmVmPXtlbCA9PiAoc2VsZltgdGl0bGUtaW5wdXQtJHtrZXl9YF0gPSBlbCl9Lz47XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwib3NjLXBvbGwtZm9ybS1jaG9pY2VcIiBrZXk9e2Bvc2Mta2V5LSR7a2V5fWB9PlxuICAgICAgICAgICAgICAgIHt0aXRsZUlucHV0SFRNTH1cbiAgICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICd0ZXh0JywgbWluTGVuZ3RoOiBzZWxmLmNvbmZpZy5kZXNjcmlwdGlvbk1pbkxlbmd0aCwgbWF4TGVuZ3RoOiBzZWxmLmNvbmZpZy5kZXNjcmlwdGlvbk1heExlbmd0aCwgcGxhY2Vob2xkZXI6ICdCZXNjaHJpanZpbmcnIH19IHZhbHVlPXtjaG9pY2UuZGVzY3JpcHRpb259IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgY2hvaWNlOiB7IGlkOiBrZXksIGRlc2NyaXB0aW9uOiBkYXRhLnZhbHVlIH0gfSkgfSByZWY9e2VsID0+IChzZWxmW2BkZXNjcmlwdGlvbi1pbnB1dC0ke2tleX1gXSA9IGVsKX0vPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9vbD5cblxuICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtYWRkLWNob2ljZS1idXR0b25cIiBvbkNsaWNrPXsgZSA9PiB0aGlzLmFkZENob2ljZSgpIH0+Tm9nIGVlbiBrZXV6ZW1vZ2VsaWpraGVpZCB0b2V2b2VnZW48L2E+XG4gICAgICAgIFxuICAgICAgICB7c3VibWl0QnV0dG9uSFRNTH1cblxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtcyBmcm9tICcuLi8uLi9mb3Jtcy9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UG9sbEZvcm0gZnJvbSAnLi9wb2xsLWZvcm0uanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRQb2xsIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgc2l0ZUlkOiBudWxsLFxuICAgICAgaWRlYUlkOiBudWxsLFxuICAgICAgdGl0bGU6IG51bGwsIC8vIGhvb3J0IG5pZXQgaGllclxuICAgICAgdGl0bGVNaW5MZW5ndGg6IDMwLFxuICAgICAgdGl0bGVNYXhMZW5ndGg6IDUwMCxcbiAgICAgIGRlc2NyaXB0aW9uTWluTGVuZ3RoOiAzMCxcbiAgICAgIGRlc2NyaXB0aW9uTWF4TGVuZ3RoOiA1MDAsXG4gICAgICB1c2VyOiBudWxsLFxuICAgICAgbG9naW5Vcmw6ICcnLFxuICAgICAgYXBpOiB7XG4gICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgaGVhZGVyczogbnVsbCxcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZFVzZXJSb2xlOiAnbWVtYmVyJyxcbiAgICAgIHdpdGhQZXJjZW50YWdlOiB0cnVlLFxuICAgICAgYWxsb3dDaG9pY2VUaXRsZXM6IHRydWUsXG4gICAgICBhbGxvd1Nob3dSZXN1bHRzSWZOb3RWb3RlZDogZmFsc2UsXG4gICAgfSk7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLmNvbmZpZy5sb2dpblVybCA9IHNlbGYuY29uZmlnLmxvZ2luVXJsIHx8ICcvb2F1dGgvbG9naW4/cmV0dXJuVG89JyArIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKTtcbiAgICBzZWxmLmhpZGVFZGl0Rm9ybSA9IHNlbGYuaGlkZUVkaXRGb3JtLmJpbmQoc2VsZik7XG5cbiAgICBzZWxmLnN0YXRlID0ge1xuICAgICAgdXNlcjogc2VsZi5jb25maWcudXNlcixcbiAgICAgIHBvbGw6IHByb3BzLnBvbGwsXG4gICAgICBwb2xsSWQ6ICggcHJvcHMucG9sbCAmJiBwcm9wcy5wb2xsLmlkICkgfHwgc2VsZi5jb25maWcucG9sbElkLFxuICAgICAgc2VsZWN0ZWRDaG9pY2U6IG51bGwsXG4gICAgICBzaG93UmVzdWx0OiBmYWxzZSxcbiAgICAgIHNob3dRdWVzdGlvbjogZmFsc2UsXG4gICAgICBlZGl0TW9kZTogZmFsc2UsXG4gICAgICBzaG93Vm90ZVN1Y2NlZWRlZDogZmFsc2UsXG4gICAgfTtcblxuICAgIGlmIChzZWxmLnN0YXRlLnBvbGwpIHtcbiAgICAgIHNlbGYucGFyc2VWb3RlQ291bnQoc2VsZi5zdGF0ZS5wb2xsKTtcbiAgICAgIGlmIChzZWxmLnN0YXRlLnBvbGwudXNlclZvdGUpIHtcbiAgICAgICAgc2VsZi5zdGF0ZS5zZWxlY3RlZENob2ljZSA9IHNlbGYuc3RhdGUucG9sbC51c2VyVm90ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyB1c2VyXG4gICAgaWYgKCEoIHNlbGYuc3RhdGUudXNlciAmJiBzZWxmLnN0YXRlLnVzZXIucm9sZSApKSB7XG4gICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMudXNlci5nZXRVc2VyKHsgdXNlcjogc2VsZi5jb25maWcudXNlciwgand0OiBzZWxmLmNvbmZpZy5qd3QsIHNpdGVJZDogc2VsZi5jb25maWcuc2l0ZUlkLCBhcGk6IHNlbGYuY29uZmlnLmFwaSB9LCAoZXJyLCB1c2VyKSA9PiB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyB1c2VyIH0sICgpID0+IHtcbiAgICAgICAgICBpZiAoIXNlbGYuc3RhdGUucG9sbCAmJiBzZWxmLmNvbmZpZy5pZGVhSWQpIHNlbGYuZmV0Y2hEYXRhKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc2VsZi5zdGF0ZS5wb2xsICYmIHNlbGYuY29uZmlnLmlkZWFJZCkgc2VsZi5mZXRjaERhdGEoKTtcbiAgICB9XG5cbiAgfVxuXG4gIGZldGNoRGF0YShuZXh0KSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIXNlbGYuc3RhdGUucG9sbElkKSB7XG4gICAgICAvLyBubyBkYXRhOiBzaG93IG5ldyBwb2xsIGZvcm1cbiAgICAgIHJldHVybiBzZWxmLnNldFN0YXRlKHsgZWRpdE1vZGU6IHRydWUgfSwgKCkgPT57XG4gICAgICB9KVxuICAgIH1cblxuICAgIGxldCB1cmwgPSBgJHtzZWxmLmNvbmZpZy5hcGkgJiYgc2VsZi5jb25maWcuYXBpLnVybCAgIH0vYXBpL3NpdGUvJHsgIHNlbGYuY29uZmlnLnNpdGVJZCAgfS9pZGVhLyR7ICBzZWxmLmNvbmZpZy5pZGVhSWQgIH0vcG9sbC8keyBzZWxmLnN0YXRlLnBvbGxJZCB9P3dpdGhVc2VyPTEmd2l0aFVzZXJWb3RlPTEmd2l0aFZvdGVDb3VudD0xJndpdGhWb3Rlcz0xYDtcbiAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICBmZXRjaCh1cmwsIHsgaGVhZGVycyB9KVxuICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcblxuICAgICAgICBsZXQgc3RhdGUgPSB7IC4uLnNlbGYuc3RhdGUsIHNob3dSZXN1bHQ6IGZhbHNlLCBzaG93UXVlc3Rpb246IGZhbHNlLCB9O1xuICAgICAgICBzdGF0ZS5wb2xsID0ganNvbjtcbiAgICAgICAgc3RhdGUucG9sbElkID0ganNvbi5pZDtcblxuICAgICAgICBzZWxmLnBhcnNlVm90ZUNvdW50KHN0YXRlLnBvbGwpO1xuXG4gICAgICAgIGlmIChzdGF0ZS5wb2xsLnVzZXJWb3RlKSB7XG4gICAgICAgICAgc3RhdGUuc2VsZWN0ZWRDaG9pY2UgPSBzdGF0ZS5wb2xsLnVzZXJWb3RlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5zZXRTdGF0ZShzdGF0ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKG5leHQpIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgZXJyb3IudGhlbihmdW5jdGlvbihtZXNzYWdlcykgeyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBwYXJzZVZvdGVDb3VudChwb2xsKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChwb2xsLnZvdGVDb3VudCkge1xuICAgICAgT2JqZWN0LmtleXMocG9sbC5jaG9pY2VzKS5zb3J0KCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGxldCBjaG9pY2UgPSBwb2xsLmNob2ljZXNba2V5XTtcbiAgICAgICAgY2hvaWNlLnZvdGVzQWJzID0gcG9sbC52b3RlQ291bnRba2V5XVxuICAgICAgICBjaG9pY2Uudm90ZXNQcmMgPSBwYXJzZUludCgxMDAgKiAoIHBvbGwudm90ZUNvdW50W2tleV0gLyBwb2xsLnZvdGVDb3VudC50b3RhbCApKTtcbiAgICAgICAgY2hvaWNlLnZvdGVzUHJjID0gY2hvaWNlLnZvdGVzUHJjIHx8IDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIHNob3dFZGl0Rm9ybSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6IHRydWUgfSk7XG4gIH1cblxuICBoaWRlRWRpdEZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBlZGl0TW9kZTogZmFsc2UsXG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZldGNoRGF0YSgpXG4gICAgfSk7XG4gIH1cblxuICBzZXRTaG93UmVzdWx0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93UmVzdWx0OiB0cnVlIH0pO1xuICB9XG5cbiAgc2V0U2hvd1F1ZXN0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93UXVlc3Rpb246IHRydWUgfSk7XG4gIH1cblxuICBzZWxlY3RDaG9pY2UoZGF0YSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZENob2ljZTogZGF0YS5jaG9pY2UgfSk7XG4gIH1cblxuICBvblJlYWN0aW9uRWRpdGVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5zdGF0ZS5zZWxlY3RlZENob2ljZTtcbiAgfVxuXG4gIGNhblN1Ym1pdCgpIHtcbiAgICBsZXQgcmVxdWlyZWRVc2VyUm9sZSA9IHRoaXMuY29uZmlnLnJlcXVpcmVkVXNlclJvbGU7XG4gICAgbGV0IHVzZXJSb2xlID0gdGhpcy5zdGF0ZS51c2VyICYmIHRoaXMuc3RhdGUudXNlci5yb2xlO1xuICAgIC8vIHRvZG86IG5pZXV3ZSByb2xsZW4gc3RydWN0dXVyXG4gICAgcmV0dXJuICByZXF1aXJlZFVzZXJSb2xlID09ICdhbm9ueW1vdXMnICYmIHVzZXJSb2xlICB8fFxuICAgICAgICAgICAgcmVxdWlyZWRVc2VyUm9sZSA9PSAnbWVtYmVyJyAmJiAoIHVzZXJSb2xlID09ICdtZW1iZXInIHx8IHVzZXJSb2xlID09ICdhZG1pbicgKSAgfHxcbiAgICAgICAgICAgIHJlcXVpcmVkVXNlclJvbGUgPT0gJ2FkbWluJyAmJiB1c2VyUm9sZSA9PSAnYWRtaW4nO1xuICB9XG5cbiAgc3VibWl0Vm90ZSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuc2V0U3RhdGUoeyBpc0J1c3k6IHRydWUgfSwgKCkgPT4ge1xuXG4gICAgICBpZiAoIXNlbGYuaXNWYWxpZCgpKSB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyBpc0J1c3k6IGZhbHNlLCBpc1ZhbGlkOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuY2FuU3VibWl0KCkpIHJldHVybiBhbGVydCgnSmUgYmVudCBuaWV0IGluZ2Vsb2dkJyk7XG5cbiAgICAgIGxldCB1cmwgPSBgJHsgc2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgfS9hcGkvc2l0ZS8keyBzZWxmLmNvbmZpZy5zaXRlSWQgfS9pZGVhLyR7IHNlbGYuY29uZmlnLmlkZWFJZCB9L3BvbGwvJHsgc2VsZi5zdGF0ZS5wb2xsLmlkIH0vdm90ZWA7XG4gICAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG4gICAgICBsZXQgbWV0aG9kID0gJ1BPU1QnO1xuXG4gICAgICBsZXQgYm9keSA9IHtcbiAgICAgICAgY2hvaWNlOiBzZWxmLnN0YXRlLnNlbGVjdGVkQ2hvaWNlLFxuICAgICAgfTtcblxuICAgICAgZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICAgICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuXG4gICAgICAgICAgc2VsZi5mZXRjaERhdGEoICgpID0+IHtcbiAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoeyBpc0J1c3k6IGZhbHNlLCBzaG93Vm90ZVN1Y2NlZWRlZDogdHJ1ZSwgfSwgKCkgPT4ge1xuXHRcdCAgICAgICAgICBsZXQgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ29zYy1wb2xsLXZvdGVkJywgeyBkZXRhaWw6IGpzb24gfSk7XG5cdFx0ICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLm9uU3VibWl0ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLm9uU3VibWl0KHsgZGVzY3JpcHRpb246IHNlbGYuc3RhdGUuZGVzY3JpcHRpb24gfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgYWxlcnQobWVzc2FnZXMpOyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSwgaXNWYWxpZDogZmFsc2UgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIGRlbGV0ZVBvbGwoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiB0cnVlIH0sICgpID0+IHtcblxuICAgICAgbGV0IHBvbGwgPSBzZWxmLnN0YXRlLnBvbGw7XG4gICAgICBpZiAoISggcG9sbCAmJiBwb2xsLmNhbiAmJiBwb2xsLmNhbi5kZWxldGUgKSkgcmV0dXJuIGFsZXJ0KCdVIGt1bnQgZGV6ZSBwb2xsIG5pZXQgdmVyd2lqZGVyZW4nKTtcbiAgICAgIGlmICghKCBwb2xsICYmIHBvbGwuaWQgKSkgcmV0dXJuIGFsZXJ0KCdVIGt1bnQgZGV6ZSBwb2xsIG5pZXQgdmVyd2lqZGVyZW4nKTtcblxuICAgICAgbGV0IHVybCA9IGAkeyBzZWxmLmNvbmZpZy5hcGkgJiYgc2VsZi5jb25maWcuYXBpLnVybCB9L2FwaS9zaXRlLyR7IHNlbGYuY29uZmlnLnNpdGVJZCB9L2lkZWEvJHsgc2VsZi5jb25maWcuaWRlYUlkIH0vcG9sbC8keyBzZWxmLnN0YXRlLnBvbGwuaWQgfWA7XG4gICAgICBsZXQgbWV0aG9kID0gJ0RFTEVURSc7XG4gICAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9KVxuICAgICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuXG5cdFx0ICAgICAgbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdvc2MtcG9sbC1kZWxldGVkJywgeyBkZXRhaWw6IGpzb24gfSk7XG5cdFx0ICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgYWxlcnQobWVzc2FnZXMpOyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBwb2xsID0gc2VsZi5zdGF0ZS5wb2xsIHx8IHt9O1xuXG4gICAgaWYgKHNlbGYuc3RhdGUuZWRpdE1vZGUpIHtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD17dGhpcy5pZH0gY2xhc3NOYW1lPXtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnb3NjLXBvbGwnfSByZWY9eyhlbCkgPT4geyB0aGlzLmluc3RhbmNlID0gZWw7IH19ID5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRQb2xsRm9ybSBjb25maWc9e3sgLi4uc2VsZi5jb25maWcsIG9uRmluaXNoZWQ6IHNlbGYuaGlkZUVkaXRGb3JtIH19IHBvbGxJZD17c2VsZi5zdGF0ZS5wb2xsICYmIHNlbGYuc3RhdGUucG9sbC5pZH0gcG9sbD17c2VsZi5zdGF0ZS5wb2xsfSB1c2VyPXtzZWxmLnN0YXRlLnVzZXJ9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgICAgXG4gICAgfSBlbHNlIHtcblxuICAgICAgbGV0IHF1ZXN0aW9uSFRNTCA9IG51bGw7XG4gICAgICBpZiAoKCBwb2xsICYmIHBvbGwuY2hvaWNlcyAmJiAhcG9sbC51c2VyVm90ZSApIHx8IHNlbGYuc3RhdGUuc2hvd1F1ZXN0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgY29uZmlnID0geyBuYW1lOiBcInBvbGxDaG9pY2VcIiwgY2hvaWNlczogW10gfTtcbiAgICAgICAgT2JqZWN0LmtleXMocG9sbC5jaG9pY2VzKS5zb3J0KCkubWFwKGtleSA9PiB7XG4gICAgICAgICAgbGV0IGNob2ljZUhUTUwgPSBzZWxmLmNvbmZpZy5hbGxvd0Nob2ljZVRpdGxlcyAmJiBwb2xsLmNob2ljZXNba2V5XS50aXRsZSA/IGA8aDQ+JHtwb2xsLmNob2ljZXNba2V5XS50aXRsZX08L2g0PmAgOiAnJztcbiAgICAgICAgICBjaG9pY2VIVE1MICs9IHBvbGwuY2hvaWNlc1trZXldLmRlc2NyaXB0aW9uIHx8ICcnO1xuICAgICAgICAgIGNvbmZpZy5jaG9pY2VzLnB1c2goe1xuICAgICAgICAgICAgZGFuZ2Vyb3VzRGVzY3JpcHRpb246IGNob2ljZUhUTUwsXG4gICAgICAgICAgICB2YWx1ZToga2V5XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgbGV0IHN1Ym1pdEJ1dHRvbkhUTUwgPSBudWxsO1xuICAgICAgICBpZiAoc2VsZi5jYW5TdWJtaXQoKSkge1xuICAgICAgICAgIHN1Ym1pdEJ1dHRvbkhUTUwgPSAoPGJ1dHRvbiBvbkNsaWNrPXsoZSkgPT4geyBpZiAoIXNlbGYuc3RhdGUuaXNCdXN5KSBzZWxmLnN1Ym1pdFZvdGUoKTsgfX0gY2xhc3NOYW1lPXtgb3NjLWJ1dHRvbi1ibHVlJHsgIXNlbGYuaXNWYWxpZCgpID8gJyBvc2MtZGlzYWJsZWQnIDogJycgfWB9ID5TdGVtbWVuPC9idXR0b24+KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJtaXRCdXR0b25IVE1MID0gKDxidXR0b24gb25DbGljaz17KCkgPT4geyBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLnNldCgnb3NjLXBvbGwtbG9naW4tcGVuZGluZycsIHRydWUpOyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gc2VsZi5jb25maWcubG9naW5Vcmw7IH19IGNsYXNzTmFtZT1cIm9zYy1idXR0b24tYmx1ZSBvc2Mtbm90LWxvZ2dlZC1pbi1idXR0b25cIj5JbmxvZ2dlbjwvYnV0dG9uPik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2hvd1Jlc3VsdEJ1dHRvbkhUTUwgPSBudWxsO1xuICAgICAgICBpZiAoc2VsZi5jb25maWcuYWxsb3dTaG93UmVzdWx0c0lmTm90Vm90ZWQgJiYgICEocG9sbC51c2VyVm90ZSB8fCBzZWxmLnN0YXRlLnNob3dSZXN1bHQpKSBzaG93UmVzdWx0QnV0dG9uSFRNTCA9ICg8YSBjbGFzc05hbWU9XCJvc2Mtc2hvdy1yZXN1bHQtYnV0dG9uXCIgb25DbGljaz17IGUgPT4gdGhpcy5zZXRTaG93UmVzdWx0KCkgfT5SZXN1bHRhYXQgYmVraWprZW48L2E+KTtcblxuICAgICAgICBxdWVzdGlvbkhUTUwgPSAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcG9sbC1xdWVzdGlvbiBvc2MtZm9ybVwiPlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuUmFkaW9zIGNvbmZpZz17Y29uZmlnfSB2YWx1ZT17c2VsZi5zdGF0ZS5zZWxlY3RlZENob2ljZX0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuc2VsZWN0Q2hvaWNlKHsgY2hvaWNlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiAoc2VsZi5kZXNjcmlwdGlvbiA9IGVsKX0vPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcG9sbC1xdWVzdGlvbi1idXR0b25zXCI+XG4gICAgICAgICAgICAgIHtzdWJtaXRCdXR0b25IVE1MfVxuICAgICAgICAgICAgICB7c2hvd1Jlc3VsdEJ1dHRvbkhUTUx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlc3VsdEhUTUwgPSBudWxsO1xuICAgICAgaWYgKCBwb2xsICYmICggcG9sbC51c2VyVm90ZSB8fCBzZWxmLnN0YXRlLnNob3dSZXN1bHQgKSApIHtcblxuICAgICAgICBsZXQgc2hvd1F1ZXN0aW9uQnV0dG9uSFRNTCA9IG51bGw7XG4gICAgICAgIGlmICghc2VsZi5zdGF0ZS5zaG93UXVlc3Rpb24gJiYgIShwb2xsICYmIHBvbGwuY2hvaWNlcyAmJiAhcG9sbC51c2VyVm90ZSkpIHNob3dRdWVzdGlvbkJ1dHRvbkhUTUwgPSAoPGEgY2xhc3NOYW1lPVwib3NjLXNob3ctcXVlc3Rpb24tYnV0dG9uXCIgb25DbGljaz17IGUgPT4gdGhpcy5zZXRTaG93UXVlc3Rpb24oKSB9PlN0ZW0gYWFucGFzc2VuPC9hPik7XG5cbiAgICAgICAgbGV0IHRvdGFsVm90ZXNIVE1MID0gbnVsbDtcbiAgICAgICAgaWYgKHBvbGwudm90ZUNvdW50ICYmIHBvbGwudm90ZUNvdW50LnRvdGFsKSB7XG4gICAgICAgICAgbGV0IHh4ID0gcG9sbC52b3RlQ291bnQudG90YWwgPT0gMSA/ICdzdGVtJyA6ICdzdGVtbWVuJztcbiAgICAgICAgICB0b3RhbFZvdGVzSFRNTCA9IDxkaXY+VG90YWFsIHtwb2xsLnZvdGVDb3VudC50b3RhbH0ge3h4fTxici8+PGJyLz48L2Rpdj5cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdEhUTUwgPSAoXG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm9zYy1jaG9pY2VzXCI+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXMocG9sbC5jaG9pY2VzKS5zb3J0KCkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICAgIGxldCBjaG9pY2UgPSBwb2xsLmNob2ljZXNba2V5XTtcbiAgICAgICAgICAgICAgbGV0IHRpdGxlSFRNTCA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0Nob2ljZVRpdGxlcyAmJiBjaG9pY2UudGl0bGUpIHRpdGxlSFRNTCA9ICg8aDQ+e2Nob2ljZS50aXRsZX08L2g0Pik7XG4gICAgICAgICAgICAgIGxldCBkZXNjcmlwdGlvbkhUTUwgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoY2hvaWNlLmRlc2NyaXB0aW9uKSBkZXNjcmlwdGlvbkhUTUwgPSAoPGRpdj57Y2hvaWNlLmRlc2NyaXB0aW9ufTwvZGl2Pik7XG4gICAgICAgICAgICAgIGxldCBwZXJjZW50YWdlSFRNTCA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy53aXRoUGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2VIVE1MID0gPGRpdiBjbGFzc05hbWU9XCJvc2MtcGVyY2VudGFnZVwiPntjaG9pY2Uudm90ZXNQcmN9JTwvZGl2PlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxldCBzY29yZUhUTUwgPSAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlLWRlZmF1bHRcIj5cbiAgICAgICAgICAgICAgICAgIHt0aXRsZUhUTUx9XG4gICAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb25IVE1MfVxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bvc2MtY2hvaWNlLWJhciR7c2VsZi5jb25maWcud2l0aFBlcmNlbnRhZ2UgPyAnIG9zYy13aXRoLXBlcmNlbnRhZ2UnIDogJyd9YH0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWNob2ljZS1iYXItbWFza1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jaG9pY2UtYmFyLXByb2dyZXNzXCIgc3R5bGU9e3sgd2lkdGg6ICggY2hvaWNlLnZvdGVzUHJjIHx8IDAgKSArICclJyB9fT48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgeyBwZXJjZW50YWdlSFRNTCB9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm9zYy1jaG9pY2VcIiBrZXk9e2Bvc2Mta2V5LSR7a2V5fWB9PlxuICAgICAgICAgICAgICAgICAge3Njb3JlSFRNTH1cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICB7dG90YWxWb3Rlc0hUTUx9XG4gICAgICAgICAgICB7c2hvd1F1ZXN0aW9uQnV0dG9uSFRNTH1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBsZXQgZWRpdEJ1dHRvbnNIVE1MID0gbnVsbDtcbiAgICAgIGlmIChzZWxmLnN0YXRlLnBvbGwgJiYgc2VsZi5zdGF0ZS5wb2xsLmNhbiAmJiBzZWxmLnN0YXRlLnBvbGwuY2FuLmVkaXQpIHtcbiAgICAgICAgZWRpdEJ1dHRvbnNIVE1MID1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1lZGl0YnV0dG9uc1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtZWRpdGJ1dHRvbiBvc2MtZWRpdFwiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYuc2hvd0VkaXRGb3JtKCl9PkJld2VyayBwb2xsPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm9zYy1lZGl0YnV0dG9uIG9zYy1kZWxldGVcIiBvbkNsaWNrPXtldmVudCA9PiB7IGlmIChjb25maXJtKCdXZWV0IHUgaGV0IHpla2VyJykpIHNlbGYuZGVsZXRlUG9sbCgpIH19PlZlcndpamRlciBwb2xsPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICB9XG5cbiAgICAgIGxldCB2b3RlU3VjY2VlZGVkSFRNTCA9IG51bGw7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5zaG93Vm90ZVN1Y2NlZWRlZCkge1xuICAgICAgICB2b3RlU3VjY2VlZGVkSFRNTCA9IDxkaXYgY2xhc3NOYW1lPVwib3NjLXZvdGUtc3VjY2VlZGVkXCI+VXcgc3RlbSBpcyBvcGdlc2xhZ2VuPC9kaXY+XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9e3RoaXMuaWR9IGNsYXNzTmFtZT17c2VsZi5wcm9wcy5jbGFzc05hbWUgfHwgJ29zYy1wb2xsJ30gcmVmPXsoZWwpID0+IHsgdGhpcy5pbnN0YW5jZSA9IGVsOyB9fSA+XG4gICAgICAgICAge2VkaXRCdXR0b25zSFRNTH1cbiAgICAgICAgICB7dm90ZVN1Y2NlZWRlZEhUTUx9XG4gICAgICAgICAgPGg0Pntwb2xsLnF1ZXN0aW9ufTwvaDQ+XG4gICAgICAgICAge3F1ZXN0aW9uSFRNTH1cbiAgICAgICAgICB7cmVzdWx0SFRNTH1cbiAgICAgICAgICA8YnIvPjxici8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcblxuICAgIH1cblxuICB9XG5cbn1cbiIsIi8vIHBvbHlmaWxsc1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRQb2xsIGZyb20gJy4vY29tcG9uZW50L3BvbGwuanN4JztcblxuLy8gcmVuZGVyIGVsZW1lbnRzXG5PcGVuU3RhZENvbXBvbmVudFBvbGwucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50UG9sbCBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbn1cblxuZXhwb3J0IHtcbiAgT3BlblN0YWRDb21wb25lbnRQb2xsIGFzIGRlZmF1bHQsXG4gIE9wZW5TdGFkQ29tcG9uZW50UG9sbCBhcyBQb2xsLFxufTtcblxuIiwiLy8gcG9seWZpbGxzXG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIHJlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8vIGltcG9ydCBjc3MgdG8gbWFrZSBzdXJlIGl0IGlzIGdlbmVyYXRlZCBpbiB0aGUgcmVzdWx0XG5pbXBvcnQgJy4vY3NzL2RlZmF1bHQubGVzcyc7XG5cbi8vIHRoZSBtb2R1bGVcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudElkZWFEZXRhaWxzIGZyb20gJy4vY29tcG9uZW50L2lkZWEtZGV0YWlscy5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50SWRlYURldGFpbHMucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50SWRlYURldGFpbHMgYXR0cmlidXRlcz17YXR0cmlidXRlc30gY29uZmlnPXtjb25maWd9Lz4sIGVsZW0pXG59XG5cbmV4cG9ydCB7XG4gIE9wZW5TdGFkQ29tcG9uZW50SWRlYURldGFpbHMgYXMgZGVmYXVsdCxcbiAgT3BlblN0YWRDb21wb25lbnRJZGVhRGV0YWlscyBhcyBJZGVhRGV0YWlscyxcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVm90ZUJ1dHRvbiBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIG5hbWU6ICdsaWtlYnV0dG9uJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyMxNjQ5OTUnLFxuICAgICAgY29sb3I6ICcjZmZmJyxcbiAgICAgIHRleHQ6ICdsaWtlJyxcbiAgICAgIG9waW5pb246ICd5ZXMnLFxuXHRcdH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgYnVzeTogZmFsc2UsXG4gICAgfVxuXG4gIH1cblxuXHRjb21wb25lbnREaWRNb3VudChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIC8vIHJldHVybiBmcm9tIGFub255bW91cyBsb2dpblxuICAgIGxldCB2b3RlUGVuZGluZyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtaWRlYXMtb24tbWFwLXZvdGUtcGVuZGluZycpO1xuICAgIGlmICh2b3RlUGVuZGluZykge1xuXHRcdFx0dGhpcy5kb1ZvdGUoKTtcbiAgICAgIE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UucmVtb3ZlKCdvc2MtaWRlYXMtb24tbWFwLXZvdGUtcGVuZGluZycpO1xuXHRcdH1cbiAgfVxuXG4gIGRvVm90ZShlKSB7XG5cbiAgICBpZiAoZSkgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmJ1c3kpIHJldHVybjtcbiAgICB0aGlzLnNldFN0YXRlKHsgYnVzeTogdHJ1ZSB9KTtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgdXJsID0gYCR7IHNlbGYuY29uZmlnLmFwaS51cmwgfS9hcGkvc2l0ZS8keyBzZWxmLmNvbmZpZy5zaXRlSWQgfS92b3RlYDtcbiAgICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcblxuICAgIC8vIGlmICghc2VsZi5jb25maWcuYXBpLmlzVXNlckxvZ2dlZEluKSB1cmwgKz0gJz91c2VPYXV0aD1hbm9ueW1vdXMnXG4gICAgaWYgKCEoIHNlbGYuY29uZmlnLnVzZXIgJiYgc2VsZi5jb25maWcudXNlci5yb2xlICkpIHtcbiAgICAgIE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2Uuc2V0KCdvc2MtaWRlYXMtb24tbWFwLXZvdGUtcGVuZGluZycsIHRydWUgKTtcbiAgICAgIGxldCBsb2dpblVybCA9ICAnL29hdXRoL2xvZ2luP3JldHVyblRvPScgKyBlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQubG9jYXRpb24uaHJlZikgKyAnJnVzZU9hdXRoPWFub255bW91cyc7XG4gICAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IGxvZ2luVXJsO1xuICAgIH1cblxuICAgIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBpZGVhSWQ6IHNlbGYucHJvcHMuaWRlYS5pZCxcbiAgICAgICAgb3Bpbmlvbjogc2VsZi5jb25maWcub3BpbmlvbixcbiAgICAgIH0pXG4gICAgfSlcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBFcnJvcignU3RlbW1lbiBpcyBuaWV0IGdlbHVrdCcpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oIGpzb24gPT4ge1xuXG4gICAgICAgIGxldCBjaGFuZ2UgPSBqc29uLmxlbmd0aCA/IDEgOiAtMTtcbiAgICAgICAgbGV0IHZhbHVlID0gc2VsZi5zdGF0ZS52YWx1ZSArIGNoYW5nZTtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHZhbHVlIH0pXG5cbiAgICAgICAgc2VsZi5wcm9wcy5pZGVhLnVzZXJWb3RlID0ganNvbi5sZW5ndGggJiYganNvbiB8fCBudWxsO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBidXN5OiBmYWxzZSB9KTtcblxuXHRcdCAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdvc2MtaWRlYS1saWtlZCcsIHsgZGV0YWlsOiB7IGlkZWFJZDogc2VsZi5wcm9wcy5pZGVhLmlkLCBjaGFuZ2UgfSB9KTtcblx0XHQgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBhbGVydChlcnIubWVzc2FnZSk7XG4gICAgICB9KTtcbiAgICBcbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCB2YWx1ZSA9IHBhcnNlSW50KHNlbGYuc3RhdGUudmFsdWUpIHx8IDA7XG5cblx0ICBsZXQgdmFsdWUwMDAgPSBwYXJzZUludCh2YWx1ZS8xMDApIHx8IDA7XG5cdCAgbGV0IHZhbHVlMDAgID0gcGFyc2VJbnQoKCB2YWx1ZSAtIDEwMCAqIHZhbHVlMDAwICkvMTApIHx8IDA7XG5cdCAgbGV0IHZhbHVlMCAgID0gdmFsdWUgLSB2YWx1ZTAwMCAqIDEwMCAtIHZhbHVlMDAgKiAxMDtcblxuICAgIHJldHVybiAoXG5cdCAgICA8ZGl2IGlkPXtzZWxmLmlkfSBjbGFzc05hbWU9e3NlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICdvc2Mtdm90ZS1idXR0b24gb3NjLW51bWJlci1idXR0b24nfSByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfT5cblx0XHQgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbnVtYmVyLXBsYXRlc1wiIHN0eWxlPXt7IGNvbG9yOiB0aGlzLmNvbmZpZy5jb2xvciwgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbmZpZy5iYWNrZ3JvdW5kQ29sb3IgfX0+XG5cdFx0XHQgICAgPGRpdiBpZD17YCR7dGhpcy5jb25maWcubmFtZX0tbnVtYmVyLXBsYXRlLTAwMGB9IGNsYXNzTmFtZT1cIm9zYy1udW1iZXItcGxhdGVcIj57dmFsdWUwMDB9PC9kaXY+XG5cdFx0XHQgICAgPGRpdiBpZD17YCR7dGhpcy5jb25maWcubmFtZX0tbnVtYmVyLXBsYXRlLTAwYH0gY2xhc3NOYW1lPVwib3NjLW51bWJlci1wbGF0ZVwiPnt2YWx1ZTAwfTwvZGl2PlxuXHRcdFx0ICAgIDxkaXYgaWQ9e2Ake3RoaXMuY29uZmlnLm5hbWV9LW51bWJlci1wbGF0ZS0wYH0gY2xhc3NOYW1lPVwib3NjLW51bWJlci1wbGF0ZVwiPnt2YWx1ZTB9PC9kaXY+XG5cdFx0ICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YG9zYy1udW1iZXItYnV0dG9uLXRleHQgJHt0aGlzLmNvbmZpZy5uYW1lfS1uYW1lICR7dGhpcy5wcm9wcy5pZGVhLnVzZXJWb3RlID8gJyBvc2MtdXNlci1oYXMtdm90ZWQnIDogJyd9ICR7dGhpcy5zdGF0ZS5idXN5ID8gJyBvc2MtYnVzeScgOiAnJ31gfSBzdHlsZT17eyBjb2xvcjogdGhpcy5jb25maWcuY29sb3IsIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb25maWcuYmFja2dyb3VuZENvbG9yIH19IG9uQ2xpY2s9eyAoZSkgPT4gc2VsZi5kb1ZvdGUoZSkgfT5cblx0XHRcdCAgICB7c2VsZi5jb25maWcudGV4dH1cblx0XHQgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWNsZWFyLWJvdGhcIj48L2Rpdj5cblx0ICAgIDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9