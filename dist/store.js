/*! For license information please see store.js.LICENSE.txt */
window.OpenStadComponents=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=82)}({108:function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},11:function(t,e,r){t.exports=r(54).Promise},12:function(t,e,r){"use strict";(function(t){function n(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+t+(r.length?" "+r.map((function(t){return"'"+t+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(t){return!!t&&!!t[B]}function i(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[X]||!!t.constructor[X]||d(t)||p(t))}function u(t,e,r){void 0===r&&(r=!1),0===c(t)?(r?Object.keys:G)(t).forEach((function(n){r&&"symbol"==typeof n||e(n,t[n],t)})):t.forEach((function(r,n){return e(n,r,t)}))}function c(t){var e=t[B];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:d(t)?2:p(t)?3:0}function a(t,e){return 2===c(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function f(t,e){return 2===c(t)?t.get(e):t[e]}function s(t,e,r){var n=c(t);2===n?t.set(e,r):3===n?(t.delete(e),t.add(r)):t[e]=r}function l(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function d(t){return q&&t instanceof Map}function p(t){return z&&t instanceof Set}function h(t){return t.o||t.t}function y(t){if(Array.isArray(t))return Array.prototype.slice.call(t);var e=J(t);delete e[B];for(var r=G(e),n=0;n<r.length;n++){var o=r[n],i=e[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(e[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:t[o]})}return Object.create(Object.getPrototypeOf(t),e)}function v(t,e){return void 0===e&&(e=!1),g(t)||o(t)||!i(t)||(c(t)>1&&(t.set=t.add=t.clear=t.delete=b),Object.freeze(t),e&&u(t,(function(t,e){return v(e,!0)}),!0)),t}function b(){n(2)}function g(t){return null==t||"object"!=typeof t||Object.isFrozen(t)}function m(t){var e=$[t];return e||n(18,t),e}function w(t,e){$[t]||($[t]=e)}function O(){return K}function j(t,e){e&&(m("Patches"),t.u=[],t.s=[],t.v=e)}function _(t){P(t),t.p.forEach(S),t.p=null}function P(t){t===K&&(K=t.l)}function A(t){return K={p:[],l:K,h:t,m:!0,_:0}}function S(t){var e=t[B];0===e.i||1===e.i?e.j():e.g=!0}function E(t,e){e._=e.p.length;var r=e.p[0],o=void 0!==t&&t!==r;return e.h.O||m("ES5").S(e,t,o),o?(r[B].P&&(_(e),n(4)),i(t)&&(t=x(e,t),e.l||I(e,t)),e.u&&m("Patches").M(r[B],t,e.u,e.s)):t=x(e,r,[]),_(e),e.u&&e.v(e.u,e.s),t!==Y?t:void 0}function x(t,e,r){if(g(e))return e;var n=e[B];if(!n)return u(e,(function(o,i){return T(t,n,e,o,i,r)}),!0),e;if(n.A!==t)return e;if(!n.P)return I(t,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var o=4===n.i||5===n.i?n.o=y(n.k):n.o;u(3===n.i?new Set(o):o,(function(e,i){return T(t,n,o,e,i,r)})),I(t,o,!1),r&&t.u&&m("Patches").R(n,r,t.u,t.s)}return n.o}function T(t,e,r,n,u,c){if(o(u)){var f=x(t,u,c&&e&&3!==e.i&&!a(e.D,n)?c.concat(n):void 0);if(s(r,n,f),!o(f))return;t.m=!1}if(i(u)&&!g(u)){if(!t.h.N&&t._<1)return;x(t,u),e&&e.A.l||I(t,u)}}function I(t,e,r){void 0===r&&(r=!1),t.h.N&&t.m&&v(e,r)}function k(t,e){var r=t[B];return(r?h(r):t)[e]}function R(t,e){if(e in t)for(var r=Object.getPrototypeOf(t);r;){var n=Object.getOwnPropertyDescriptor(r,e);if(n)return n;r=Object.getPrototypeOf(r)}}function C(t){t.P||(t.P=!0,t.l&&C(t.l))}function D(t){t.o||(t.o=y(t.t))}function N(t,e,r){var n=d(e)?m("MapSet").T(e,r):p(e)?m("MapSet").F(e,r):t.O?function(t,e){var r=Array.isArray(t),n={i:r?1:0,A:e?e.A:O(),P:!1,I:!1,D:{},l:e,t:t,k:null,o:null,j:null,C:!1},o=n,i=H;r&&(o=[n],i=Q);var u=Proxy.revocable(o,i),c=u.revoke,a=u.proxy;return n.k=a,n.j=c,a}(e,r):m("ES5").J(e,r);return(r?r.A:O()).p.push(n),n}function M(t){return o(t)||n(22,t),function t(e){if(!i(e))return e;var r,n=e[B],o=c(e);if(n){if(!n.P&&(n.i<4||!m("ES5").K(n)))return n.t;n.I=!0,r=F(e,o),n.I=!1}else r=F(e,o);return u(r,(function(e,o){n&&f(n.t,e)===o||s(r,e,t(o))})),3===o?new Set(r):r}(t)}function F(t,e){switch(e){case 2:return new Map(t);case 3:return Array.from(t)}return y(t)}function L(){function t(t,e){var r=i[t];return r?r.enumerable=e:i[t]=r={configurable:!0,enumerable:e,get:function(){var e=this[B];return H.get(e,t)},set:function(e){var r=this[B];H.set(r,t,e)}},r}function e(t){for(var e=t.length-1;e>=0;e--){var o=t[e][B];if(!o.P)switch(o.i){case 5:n(o)&&C(o);break;case 4:r(o)&&C(o)}}}function r(t){for(var e=t.t,r=t.k,n=G(r),o=n.length-1;o>=0;o--){var i=n[o];if(i!==B){var u=e[i];if(void 0===u&&!a(e,i))return!0;var c=r[i],f=c&&c[B];if(f?f.t!==u:!l(c,u))return!0}}var s=!!e[B];return n.length!==G(e).length+(s?0:1)}function n(t){var e=t.k;if(e.length!==t.t.length)return!0;var r=Object.getOwnPropertyDescriptor(e,e.length-1);return!(!r||r.get)}var i={};w("ES5",{J:function(e,r){var n=Array.isArray(e),o=function(e,r){if(e){for(var n=Array(r.length),o=0;o<r.length;o++)Object.defineProperty(n,""+o,t(o,!0));return n}var i=J(r);delete i[B];for(var u=G(i),c=0;c<u.length;c++){var a=u[c];i[a]=t(a,e||!!i[a].enumerable)}return Object.create(Object.getPrototypeOf(r),i)}(n,e),i={i:n?5:4,A:r?r.A:O(),P:!1,I:!1,D:{},l:r,t:e,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,B,{value:i,writable:!0}),o},S:function(t,r,i){i?o(r)&&r[B].A===t&&e(t.p):(t.u&&function t(e){if(e&&"object"==typeof e){var r=e[B];if(r){var o=r.t,i=r.k,c=r.D,f=r.i;if(4===f)u(i,(function(e){e!==B&&(void 0!==o[e]||a(o,e)?c[e]||t(i[e]):(c[e]=!0,C(r)))})),u(o,(function(t){void 0!==i[t]||a(i,t)||(c[t]=!1,C(r))}));else if(5===f){if(n(r)&&(C(r),c.length=!0),i.length<o.length)for(var s=i.length;s<o.length;s++)c[s]=!1;else for(var l=o.length;l<i.length;l++)c[l]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===c[p]&&t(i[p])}}}}(t.p[0]),e(t.p))},K:function(t){return 4===t.i?r(t):n(t)}})}r.d(e,"a",(function(){return M})),r.d(e,"c",(function(){return L})),r.d(e,"d",(function(){return o})),r.d(e,"e",(function(){return i}));var W,K,U="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),q="undefined"!=typeof Map,z="undefined"!=typeof Set,V="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Y=U?Symbol.for("immer-nothing"):((W={})["immer-nothing"]=!0,W),X=U?Symbol.for("immer-draftable"):"__$immer_draftable",B=U?Symbol.for("immer-state"):"__$immer_state",G=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames),J=Object.getOwnPropertyDescriptors||function(t){var e={};return G(t).forEach((function(r){e[r]=Object.getOwnPropertyDescriptor(t,r)})),e},$={},H={get:function(t,e){if(e===B)return t;var r=h(t);if(!a(r,e))return function(t,e,r){var n,o=R(e,r);return o?"value"in o?o.value:null===(n=o.get)||void 0===n?void 0:n.call(t.k):void 0}(t,r,e);var n=r[e];return t.I||!i(n)?n:n===k(t.t,e)?(D(t),t.o[e]=N(t.A.h,n,t)):n},has:function(t,e){return e in h(t)},ownKeys:function(t){return Reflect.ownKeys(h(t))},set:function(t,e,r){var n=R(h(t),e);if(null==n?void 0:n.set)return n.set.call(t.k,r),!0;if(!t.P){var o=k(h(t),e),i=null==o?void 0:o[B];if(i&&i.t===r)return t.o[e]=r,t.D[e]=!1,!0;if(l(r,o)&&(void 0!==r||a(t.t,e)))return!0;D(t),C(t)}return t.o[e]=r,t.D[e]=!0,!0},deleteProperty:function(t,e){return void 0!==k(t.t,e)||e in t.t?(t.D[e]=!1,D(t),C(t)):delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var r=h(t),n=Reflect.getOwnPropertyDescriptor(r,e);return n?{writable:!0,configurable:1!==t.i||"length"!==e,enumerable:n.enumerable,value:r[e]}:n},defineProperty:function(){n(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){n(12)}},Q={};u(H,(function(t,e){Q[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),Q.deleteProperty=function(t,e){return H.deleteProperty.call(this,t[0],e)},Q.set=function(t,e,r){return H.set.call(this,t[0],e,r,t[0])};var Z=new(function(){function e(t){this.O=V,this.N=!0,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var r=e.prototype;return r.produce=function(e,r,o){if("function"==typeof e&&"function"!=typeof r){var u=r;r=e;var c=this;return function(t){var e=this;void 0===t&&(t=u);for(var n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];return c.produce(t,(function(t){var n;return(n=r).call.apply(n,[e,t].concat(o))}))}}var a;if("function"!=typeof r&&n(6),void 0!==o&&"function"!=typeof o&&n(7),i(e)){var f=A(this),s=N(this,e,void 0),l=!0;try{a=r(s),l=!1}finally{l?_(f):P(f)}return void 0!==t&&a instanceof t?a.then((function(t){return j(f,o),E(t,f)}),(function(t){throw _(f),t})):(j(f,o),E(a,f))}if(!e||"object"!=typeof e){if((a=r(e))===Y)return;return void 0===a&&(a=e),this.N&&v(a,!0),a}n(21,e)},r.produceWithPatches=function(t,e){var r,n,o=this;return"function"==typeof t?function(e){for(var r=arguments.length,n=Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return o.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(n))}))}:[this.produce(t,e,(function(t,e){r=t,n=e})),r,n]},r.createDraft=function(t){i(t)||n(8),o(t)&&(t=M(t));var e=A(this),r=N(this,t,void 0);return r[B].C=!0,P(e),r},r.finishDraft=function(t,e){var r=(t&&t[B]).A;return j(r,e),E(void 0,r)},r.setAutoFreeze=function(t){this.N=t},r.setUseProxies=function(t){t&&!V&&n(20),this.O=t},r.applyPatches=function(t,e){var r;for(r=e.length-1;r>=0;r--){var n=e[r];if(0===n.path.length&&"replace"===n.op){t=n.value;break}}var i=m("Patches").$;return o(t)?i(t,e):this.produce(t,(function(t){return i(t,e.slice(r+1))}))},e}()),tt=Z.produce;Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z);e.b=tt}).call(this,r(11))},18:function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return v})),r.d(e,"b",(function(){return _})),r.d(e,"c",(function(){return m}));var n=r(12),o=r(8),i=(r(26),r(80));function u(){return(u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}).apply(this,arguments)}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function s(t,e,r){return(s=f()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&a(o,r.prototype),o}).apply(null,arguments)}function l(t){var e="function"==typeof Map?new Map:void 0;return(l=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return s(t,arguments,c(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),a(n,t)})(t)}var d="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?o.d:o.d.apply(null,arguments)};function p(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}var h=function(t){var e,r;function n(){return t.apply(this,arguments)||this}r=t,(e=n).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r;var o=n.prototype;return o.concat=function(){for(var e,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return s(n,(e=t.prototype.concat).call.apply(e,[this].concat(o)))},o.prepend=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 1===e.length&&Array.isArray(e[0])?s(n,e[0].concat(this)):s(n,e.concat(this))},n}(l(Array));function y(){return function(t){return function(t){void 0===t&&(t={});var e=t,r=e.thunk,n=void 0===r||r,o=(e.immutableCheck,e.serializableCheck,new h);n&&("boolean"==typeof n?o.push(i.a):o.push(i.a.withExtraArgument(n.extraArgument)));0;return o}(t)}}function v(t){var e,r=y(),n=t||{},i=n.reducer,c=void 0===i?void 0:i,a=n.middleware,f=void 0===a?r():a,s=n.devTools,l=void 0===s||s,h=n.preloadedState,v=void 0===h?void 0:h,b=n.enhancers,g=void 0===b?void 0:b;if("function"==typeof c)e=c;else{if(!p(c))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');e=Object(o.c)(c)}var m=o.a.apply(void 0,"function"==typeof f?f(r):f),w=o.d;l&&(w=d(u({trace:!1},"object"==typeof l&&l)));var O=[m];Array.isArray(g)?O=[m].concat(g):"function"==typeof g&&(O=g(O));var j=w.apply(void 0,O);return Object(o.e)(e,v,j)}function b(t,e){function r(){if(e){var r=e.apply(void 0,arguments);if(!r)throw new Error("prepareAction did not return an object");return u({type:t,payload:r.payload},"meta"in r&&{meta:r.meta},{},"error"in r&&{error:r.error})}return{type:t,payload:arguments.length<=0?void 0:arguments[0]}}return r.toString=function(){return""+t},r.type=t,r.match=function(e){return e.type===t},r}function g(t){var e,r={},n=[],o={addCase:function(t,e){var n="string"==typeof t?t:t.type;if(n in r)throw new Error("addCase cannot be called with two reducers for the same action type");return r[n]=e,o},addMatcher:function(t,e){return n.push({matcher:t,reducer:e}),o},addDefaultCase:function(t){return e=t,o}};return t(o),[r,n,e]}function m(t){var e=t.name,r=t.initialState;if(!e)throw new Error("`name` is a required option for createSlice");var o=t.reducers||{},i=void 0===t.extraReducers?[]:"function"==typeof t.extraReducers?g(t.extraReducers):[t.extraReducers],c=i[0],a=void 0===c?{}:c,f=i[1],s=void 0===f?[]:f,l=i[2],d=void 0===l?void 0:l,p=Object.keys(o),h={},y={},v={};p.forEach((function(t){var r,n,i=o[t],u=e+"/"+t;"reducer"in i?(r=i.reducer,n=i.prepare):r=i,h[t]=r,y[u]=r,v[t]=n?b(u,n):b(u)}));var m=function(t,e,r,o){void 0===r&&(r=[]);var i="function"==typeof e?g(e):[e,r,o],u=i[0],c=i[1],a=i[2];return function(e,r){void 0===e&&(e=t);var o=[u[r.type]].concat(c.filter((function(t){return(0,t.matcher)(r)})).map((function(t){return t.reducer})));return 0===o.filter((function(t){return!!t})).length&&(o=[a]),o.reduce((function(t,e){if(e){if(Object(n.d)(t)){var o=e(t,r);return void 0===o?t:o}if(Object(n.e)(t))return Object(n.b)(t,(function(t){return e(t,r)}));var i=e(t,r);if(void 0===i){if(null===t)return t;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return t}),e)}}(r,u({},a,{},y),s,d);return{name:e,reducer:m,actions:v,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var w=["name","message","stack","code"],O=function(t){this.payload=t,this.name="RejectWithValue",this.message="Rejected"},j=function(t){if("object"==typeof t&&null!==t){var e={},r=w,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++]}else{if((o=r.next()).done)break;i=o.value}var u=i;"string"==typeof t[u]&&(e[u]=t[u])}return e}return{message:String(t)}};function _(e,r,n){var o=b(e+"/fulfilled",(function(t,e,r){return{payload:t,meta:{arg:r,requestId:e,requestStatus:"fulfilled"}}})),i=b(e+"/pending",(function(t,e){return{payload:void 0,meta:{arg:e,requestId:t,requestStatus:"pending"}}})),u=b(e+"/rejected",(function(t,e,r){var o=t instanceof O,i=!!t&&"AbortError"===t.name,u=!!t&&"ConditionError"===t.name;return{payload:t instanceof O?t.payload:void 0,error:(n&&n.serializeError||j)(t||"Rejected"),meta:{arg:r,requestId:e,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:u}}})),c="undefined"!=typeof AbortController?AbortController:function(){function t(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return t.prototype.abort=function(){0},t}();return Object.assign((function(e){return function(a,f,s){var l,d=function(t){void 0===t&&(t=21);for(var e="",r=t;r--;)e+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return e}(),p=new c,h=new t((function(t,e){return p.signal.addEventListener("abort",(function(){return e({name:"AbortError",message:l||"Aborted"})}))})),y=!1;var v=function(){try{var c,l=function(t){return v?t:(n&&!n.dispatchConditionRejection&&u.match(c)&&c.meta.condition||a(c),c)},v=!1,b=function(t,e){try{var r=t()}catch(t){return e(t)}return r&&r.then?r.then(void 0,e):r}((function(){if(n&&n.condition&&!1===n.condition(e,{getState:f,extra:s}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return y=!0,a(i(d,e)),t.resolve(t.race([h,t.resolve(r(e,{dispatch:a,getState:f,extra:s,requestId:d,signal:p.signal,rejectWithValue:function(t){return new O(t)}})).then((function(t){return t instanceof O?u(t,d,e):o(t,d,e)}))])).then((function(t){c=t}))}),(function(t){c=u(t,d,e)}));return t.resolve(b&&b.then?b.then(l):l(b))}catch(e){return t.reject(e)}}();return Object.assign(v,{abort:function(t){y&&(l=t,p.abort())},requestId:d,arg:e})}}),{pending:i,rejected:u,fulfilled:o,typePrefix:e})}Object(n.c)()}).call(this,r(11))},23:function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},24:function(t,e,r){"use strict";r.d(e,"a",(function(){return c}));var n,o=r(18),i=r(96),u=Object(o.c)({name:"ideas",initialState:{ideas:[]},reducers:{setIdeas:function(t,e){t.ideas=e.payload},addIdea:function(t,e){var r=e.payload;t.ideas.push(r)},removeIdea:function(t,e){t.ideas.splice(t.ideas.findIndex((function(t){return t.id===e.payload})),1)}},extraReducers:function(t){t.addCase(i.a.fulfilled,(function(t,e){t.ideas=e.payload}))}}),c=((n=u.actions).setIdeas,n.addIdea);e.b=u.reducer},26:function(t,e,r){"use strict";function n(t,e){return t===e}function o(t,e,r){if(null===e||null===r||e.length!==r.length)return!1;for(var n=e.length,o=0;o<n;o++)if(!t(e[o],r[o]))return!1;return!0}function i(t){var e=Array.isArray(t[0])?t[0]:t;if(!e.every((function(t){return"function"==typeof t}))){var r=e.map((function(t){return typeof t})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+r+"]")}return e}r.d(e,"a",(function(){return u}));var u=function(t){for(var e=arguments.length,r=Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];var u=0,c=n.pop(),a=i(n),f=t.apply(void 0,[function(){return u++,c.apply(null,arguments)}].concat(r)),s=t((function(){for(var t=[],e=a.length,r=0;r<e;r++)t.push(a[r].apply(null,arguments));return f.apply(null,t)}));return s.resultFunc=c,s.dependencies=a,s.recomputations=function(){return u},s.resetRecomputations=function(){return u=0},s}}((function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n,r=null,i=null;return function(){return o(e,r,arguments)||(i=t.apply(null,arguments)),r=arguments,i}}))},54:function(t,e,r){(function(e,n){var o;o=function(){"use strict";function t(t){return"function"==typeof t}var o=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},i=0,u=void 0,c=void 0,a=function(t,e){y[i]=t,y[i+1]=e,2===(i+=2)&&(c?c(v):O())},f="undefined"!=typeof window?window:void 0,s=f||{},l=s.MutationObserver||s.WebKitMutationObserver,d="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var t=setTimeout;return function(){return t(v,1)}}var y=new Array(1e3);function v(){for(var t=0;t<i;t+=2)(0,y[t])(y[t+1]),y[t]=void 0,y[t+1]=void 0;i=0}var b,g,m,w,O=void 0;function j(t,e){var r=arguments,n=this,o=new this.constructor(A);void 0===o[P]&&K(o);var i,u=n._state;return u?(i=r[u-1],a((function(){return L(u,o,i,n._result)}))):D(n,o,t,e),o}function _(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(A);return I(e,t),e}d?O=function(){return e.nextTick(v)}:l?(g=0,m=new l(v),w=document.createTextNode(""),m.observe(w,{characterData:!0}),O=function(){w.data=g=++g%2}):p?((b=new MessageChannel).port1.onmessage=v,O=function(){return b.port2.postMessage(0)}):O=void 0===f?function(){try{var t=r(56);return u=t.runOnLoop||t.runOnContext,function(){u(v)}}catch(t){return h()}}():h();var P=Math.random().toString(36).substring(16);function A(){}var S=void 0,E=new M;function x(t){try{return t.then}catch(t){return E.error=t,E}}function T(e,r,n){r.constructor===e.constructor&&n===j&&r.constructor.resolve===_?function(t,e){1===e._state?R(t,e._result):2===e._state?C(t,e._result):D(e,void 0,(function(e){return I(t,e)}),(function(e){return C(t,e)}))}(e,r):n===E?C(e,E.error):void 0===n?R(e,r):t(n)?function(t,e,r){a((function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,(function(r){n||(n=!0,e!==r?I(t,r):R(t,r))}),(function(e){n||(n=!0,C(t,e))}),t._label);!n&&o&&(n=!0,C(t,o))}),t)}(e,r,n):R(e,r)}function I(t,e){var r;t===e?C(t,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(r=e)||"object"==typeof r&&null!==r?T(t,e,x(e)):R(t,e)}function k(t){t._onerror&&t._onerror(t._result),N(t)}function R(t,e){t._state===S&&(t._result=e,t._state=1,0!==t._subscribers.length&&a(N,t))}function C(t,e){t._state===S&&(t._state=2,t._result=e,a(k,t))}function D(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+1]=r,o[i+2]=n,0===i&&t._state&&a(N,t)}function N(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,u=0;u<e.length;u+=3)n=e[u],o=e[u+r],n?L(r,n,o,i):o(i);t._subscribers.length=0}}function M(){this.error=null}var F=new M;function L(e,r,n,o){var i=t(n),u=void 0,c=void 0,a=void 0,f=void 0;if(i){if((u=function(t,e){try{return t(e)}catch(t){return F.error=t,F}}(n,o))===F?(f=!0,c=u.error,u=null):a=!0,r===u)return void C(r,new TypeError("A promises callback cannot return that same promise."))}else u=o,a=!0;r._state!==S||(i&&a?I(r,u):f?C(r,c):1===e?R(r,u):2===e&&C(r,u))}var W=0;function K(t){t[P]=W++,t._state=void 0,t._result=void 0,t._subscribers=[]}function U(t,e){this._instanceConstructor=t,this.promise=new t(A),this.promise[P]||K(this.promise),o(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?R(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&R(this.promise,this._result))):C(this.promise,new Error("Array Methods must be provided an Array"))}function q(t){this[P]=W++,this._result=this._state=void 0,this._subscribers=[],A!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof q?function(t,e){try{e((function(e){I(t,e)}),(function(e){C(t,e)}))}catch(e){C(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function z(){var t=void 0;if(void 0!==n)t=n;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=q}return U.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===S&&r<t;r++)this._eachEntry(e[r],r)},U.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===_){var o=x(t);if(o===j&&t._state!==S)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===q){var i=new r(A);T(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},U.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===S&&(this._remaining--,2===t?C(n,r):this._result[e]=r),0===this._remaining&&R(n,this._result)},U.prototype._willSettleAt=function(t,e){var r=this;D(t,void 0,(function(t){return r._settledAt(1,e,t)}),(function(t){return r._settledAt(2,e,t)}))},q.all=function(t){return new U(this,t).promise},q.race=function(t){var e=this;return o(t)?new e((function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},q.resolve=_,q.reject=function(t){var e=new this(A);return C(e,t),e},q._setScheduler=function(t){c=t},q._setAsap=function(t){a=t},q._asap=a,q.prototype={constructor:q,then:j,catch:function(t){return this.then(null,t)}},z(),q.polyfill=z,q.Promise=q,q},t.exports=o()}).call(this,r(55),r(23))},55:function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(t){n=u}}();var a,f=[],s=!1,l=-1;function d(){s&&a&&(s=!1,a.length?f=a.concat(f):l=-1,f.length&&p())}function p(){if(!s){var t=c(d);s=!0;for(var e=f.length;e;){for(a=f,f=[];++l<e;)a&&a[l].run();l=-1,e=f.length}a=null,s=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];f.push(new h(t,e)),1!==f.length||s||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},56:function(t,e){},8:function(t,e,r){"use strict";r.d(e,"a",(function(){return v})),r.d(e,"b",(function(){return l})),r.d(e,"c",(function(){return f})),r.d(e,"d",(function(){return y})),r.d(e,"e",(function(){return c}));var n=r(81),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function u(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function c(t,e,r){var o;if("function"==typeof e&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===r&&(r=e,e=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(c)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var a=t,f=e,s=[],l=s,d=!1;function p(){l===s&&(l=s.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return f}function y(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return p(),l.push(t),function(){if(e){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,p();var r=l.indexOf(t);l.splice(r,1),s=null}}}function v(t){if(!u(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,f=a(f,t)}finally{d=!1}for(var e=s=l,r=0;r<e.length;r++){(0,e[r])()}return t}function b(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");a=t,v({type:i.REPLACE})}function g(){var t,e=y;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function r(){t.next&&t.next(h())}return r(),{unsubscribe:e(r)}}})[n.a]=function(){return this},t}return v({type:i.INIT}),(o={dispatch:v,subscribe:y,getState:h,replaceReducer:b})[n.a]=g,o}function a(t,e){var r=e&&e.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function f(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++){var o=e[n];0,"function"==typeof t[o]&&(r[o]=t[o])}var u,c=Object.keys(r);try{!function(t){Object.keys(t).forEach((function(e){var r=t[e];if(void 0===r(void 0,{type:i.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(t){u=t}return function(t,e){if(void 0===t&&(t={}),u)throw u;for(var n=!1,o={},i=0;i<c.length;i++){var f=c[i],s=r[f],l=t[f],d=s(l,e);if(void 0===d){var p=a(f,e);throw new Error(p)}o[f]=d,n=n||d!==l}return(n=n||c.length!==Object.keys(t).length)?o:t}}function s(t,e){return function(){return e(t.apply(this,arguments))}}function l(t,e){if("function"==typeof t)return s(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in t){var o=t[n];"function"==typeof o&&(r[n]=s(o,e))}return r}function d(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function p(t,e){var r=Object.keys(t);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(t)),e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r}function h(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?p(r,!0).forEach((function(e){d(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):p(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function y(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function v(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return function(){var r=t.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=e.map((function(t){return t(o)}));return h({},r,{dispatch:n=y.apply(void 0,i)(r.dispatch)})}}}},80:function(t,e,r){"use strict";function n(t){return function(e){var r=e.dispatch,n=e.getState;return function(e){return function(o){return"function"==typeof o?o(r,n,t):e(o)}}}}var o=n();o.withExtraArgument=n,e.a=o},81:function(t,e,r){"use strict";(function(t,n){var o,i=r(95);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:n;var u=Object(i.a)(o);e.a=u}).call(this,r(23),r(108)(t))},82:function(t,e,r){"use strict";r.r(e),r.d(e,"default",(function(){return a})),r.d(e,"OpenstadStore",(function(){return a}));var n=r(18),o=r(8),i=Object(n.c)({name:"config",initialState:{api:{}},reducers:{}}).reducer,u=r(24),c=Object(o.c)({config:i,ideas:u.b}),a=function(t){return Object(n.a)({reducer:c,preloadedState:t})}},95:function(t,e,r){"use strict";function n(t){var e,r=t.Symbol;return"function"==typeof r?r.observable?e=r.observable:(e=r("observable"),r.observable=e):e="@@observable",e}r.d(e,"a",(function(){return n}))},96:function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return u}));var n=r(18),o=function(e,r,n,o){return new(n||(n=t))((function(t,i){function u(t){try{a(o.next(t))}catch(t){i(t)}}function c(t){try{a(o.throw(t))}catch(t){i(t)}}function a(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(t){t(r)}))).then(u,c)}a((o=o.apply(e,r||[])).next())}))},i=function(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},u=Object(n.b)("ideas/fetchIdeas",(function(t,e){var r=e.getState;return o(void 0,void 0,void 0,(function(){var t;return i(this,(function(e){switch(e.label){case 0:return console.log("fetch ideas async"),t=r(),[4,fetch(t.config.api+"/site/"+t.config.siteId+"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1")];case 1:return[2,e.sent().json()]}}))}))}))}).call(this,r(11))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,