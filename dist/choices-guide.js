/*! For license information please see choices-guide.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=123)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(4),o=n.n(r),i=n(0),c=n.n(i);n(74);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?h(e):t}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(c,e);var t,n,r,i=f(c);function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,c);var a=h(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];a[n.name]=n.value})),"string"==typeof a.config)try{a.config=JSON.parse(a.config)}catch(e){}var s=e.config||{};return s=y(s),a.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,s),a.divId=a.divId||a.config&&a.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[a.divId]=a,t}return t=c,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),r&&s(t,r),c}(c.a.Component);function y(e){return"object"!=a(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==a(e[t])&&(e[t]=y(e[t]))})),e}},function(e,t,n){"use strict";n(11),n(0),n(5),n(83);var r=n(4),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var c={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},a=c,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],a.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=a.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,a.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||a.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||a.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},localStorage:f,sessionStorage:a,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var c=o[0],a=o.length;(e||"object"!==i(c))&&(c={});for(var u=0;u<a;++u){var s=o[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];c[l]=t?r(c[l],f):f}}return c}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,c=i(e);if("array"===c)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===c)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(73)(e))},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";n(11),n(0),n(5),n(88);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(s,e);var t,n,r,o=u(s);function s(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,s);var r=l(t=o.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:e.value,error:null},t.onChange=e.onChange,t}return t=s,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&c(t.prototype,n),r&&c(t,r),s}(r.a);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(i,e);var t,n,r,o=g(i);function i(){return d(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&m(t.prototype,n),r&&m(t,r),i}(p);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return x(this,n)}}function x(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(i,e);var t,n,r,o=R(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{allowMultiple:!1,imageserver:{process:"",fetch:""}});var n=[];return(e.value||[]).forEach((function(e){n.push({source:{url:e},options:{type:"local",file:{name:e},metadata:{poster:e}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this._loadedFiles=0,this.files=["https://unpkg.com/filepond/dist/filepond.js","https://unpkg.com/filepond-polyfill/dist/filepond-polyfill.js","https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js","https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js","https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js","https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.js"],this.loadNextFile()}},{key:"loadNextFile",value:function(){var e,t=this,n=t.files[t._loadedFiles];n&&((e=document.createElement("script")).src=n,e.async=!0,e&&(e.onload=function(){t.loadNextFile()},document.body.appendChild(e))),t._loadedFiles==t.files.length&&t.fileUploaderInit(),t._loadedFiles++}},{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"fileUploaderInit",value:function(){var e=this,t=document.querySelector(".osc-image-upload-container");if(t){FilePond.registerPlugin(FilePondPluginImagePreview),FilePond.registerPlugin(FilePondPluginFileValidateSize),FilePond.registerPlugin(FilePondPluginFileValidateType),FilePond.registerPlugin(FilePondPluginFilePoster);var n={acceptedFileTypes:["image/*"],allowFileSizeValidation:!0,allowMultiple:this.config.allowMultiple,allowReorder:!0,styleItemPanelAspectRatio:1,maxFileSize:"8mb",name:"image",maxFiles:5,allowBrowse:!0,files:this.state.uploadedFiles,server:{process:this.config.imageserver.process,fetch:this.config.imageserver.fetch},imageResizeTargetWidth:80,imageResizeTargetHeight:80,imageCropAspectRatio:"1:1",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"};e.imageuploader=FilePond.create(t,n),document.querySelector(".filepond--root"),document.querySelector(".filepond--root").addEventListener("FilePond:processfile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),document.querySelector(".filepond--root").addEventListener("FilePond:removefile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),e.state.formfields&&e.imageuploader.addFiles(e.state.formfields.images)}}},{key:"fileUploaderUpdateCurrentInput",value:function(){var e=this;e.state.value=[],this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){try{var n="string"==typeof t.serverId?JSON.parse(t.serverId):t.serverId;e.state.value.push(n.url)}catch(e){console.log(e)}})),e.props.onChange({name:e.config.name,value:e.state.value})}},{key:"fileUploaderUploaderAddImages",value:function(e){this.imageuploader&&this.imageuploader.addFiles(e)}},{key:"render",value:function(){var e=null;return this.state.error&&(e=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen afbeelding geupload")),React.createElement("div",{className:"osc-image-upload-container"},React.createElement("input",{type:"file",className:"imageUploader-gebiedstool filepond-gebiedstool"}),e)}}])&&O(t.prototype,n),r&&O(t,r),i}(p);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L(e);if(t){var o=L(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return T(this,n)}}function T(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?A(e):t}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(i,e);var t,n,r,o=I(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(A(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&C(t.prototype,n),r&&C(t,r),i}(r.a);function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=B(e);if(t){var o=B(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==q(t)&&"function"!=typeof t?G(e):t}function G(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(e){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(i,e);var t,n,r,o=M(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=G(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(G(t)),n.onInputFocus=n.onInputFocus.bind(G(t)),n.onInputBlur=n.onInputBlur.bind(G(t)),n.onInputKeyUp=n.onInputKeyUp.bind(G(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(N,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&F(t.prototype,n),r&&F(t,r),i}(r.a);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return K(this,n)}}function K(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=J(i);function i(){return Q(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&W(t.prototype,n),r&&W(t,r),i}(p);function X(e){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=oe(e);if(t){var o=oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return re(this,n)}}function re(e,t){return!t||"object"!==X(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(i,e);var t,n,r,o=ne(i);function i(){return Z(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ee(t.prototype,n),r&&ee(t,r),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pe(e);if(t){var o=pe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return fe(this,n)}}function fe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function pe(e){return(pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var he=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(i,e);var t,n,r,o=le(i);function i(){return ae(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e){return React.createElement("option",{value:e.value||"",key:e.value},e.description||e.title||e.value)}))),t)}}])&&ue(t.prototype,n),r&&ue(t,r),i}(p);function de(e){return(de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ge(e,t){return(ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=we(e);if(t){var o=we(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==de(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ge(e,t)}(i,e);var t,n,r,o=ve(i);function i(){return me(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ye(t.prototype,n),r&&ye(t,r),i}(p);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Se(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xe(e,t){return(xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ke(e);if(t){var o=ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _e(this,n)}}function _e(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xe(e,t)}(i,e);var t,n,r,o=je(i);function i(){return Se(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Re(t.prototype,n),r&&Re(t,r),i}(p);function Pe(e){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ie(Object(n),!0).forEach((function(t){Ae(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Me(e);if(t){var o=Me(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Fe(this,n)}}function Fe(e,t){return!t||"object"!==Pe(t)&&"function"!=typeof t?De(e):t}function De(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Me(e){return(Me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,r,o=qe(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=De(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.value||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(w,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(z,{config:Te(Te({},e.config),{},{inputType:"htmlarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(_,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(z,{config:Te({inputType:"input"},e.config),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(ie,{config:e.config,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(Y,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(he,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Ee,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(Ce,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(z,{config:Te(Te({},e.config),{},{inputType:"textarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}})}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Le(t.prototype,n),r&&Le(t,r),i}(r.a);function Ge(e){return(Ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ze(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function He(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qe(e,t){return(Qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function We(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ke(e);if(t){var o=Ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ve(this,n)}}function Ve(e,t){return!t||"object"!==Ge(t)&&"function"!=typeof t?Je(e):t}function Je(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ke(e){return(Ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $e=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qe(e,t)}(i,e);var t,n,r,o=We(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Je(t=o.call(this,e,{title:null,intro:null,fields:[]}));return n.state={values:e.values||{}},n.handleOnChange=n.handleOnChange.bind(Je(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){ze(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);t[e.name]=e.value,this.setState({values:t})}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Ue,ze({config:t,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&He(t.prototype,n),r&&He(t,r),i}(r.a);function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ze(e,t){return(Ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=rt(e);if(t){var o=rt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tt(this,n)}}function tt(e,t){return!t||"object"!==Ye(t)&&"function"!=typeof t?nt(e):t}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ze(e,t)}(i,e);var t,n,r,o=et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(nt(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,c=o.max,a=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,c,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:c,step:a,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&Xe(t.prototype,n),r&&Xe(t,r),i}(r.a);t.a={Form:$e,FormField:Ue,Hidden:w,ImageUpload:_,InputWithCounter:z,Postcode:ie,Radios:Y,Select:he,Text:Ee,Textarea:Ce,Slider:ot}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function d(e){var t=new FileReader,n=h(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||a(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=h(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(e,t){var n,r,o=(t=t||{}).body;if(e instanceof v){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function w(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},y.call(v.prototype),y.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var E=[301,302,303,307,308];w.redirect=function(e,t){if(-1===E.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})};var O=self.DOMException;try{new O}catch(e){(O=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function S(t,n){return new e((function(e,o){var i=new v(t,n);if(i.signal&&i.signal.aborted)return o(new O("Aborted","AbortError"));var c=new XMLHttpRequest;function a(){c.abort()}c.onload=function(){var t,n,r={status:c.status,statusText:c.statusText,headers:(t=c.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in c?c.responseURL:r.headers.get("X-Request-URL");var o="response"in c?c.response:c.responseText;e(new w(o,r))},c.onerror=function(){o(new TypeError("Network request failed"))},c.ontimeout=function(){o(new TypeError("Network request failed"))},c.onabort=function(){o(new O("Aborted","AbortError"))},c.open(i.method,i.url,!0),"include"===i.credentials?c.withCredentials=!0:"omit"===i.credentials&&(c.withCredentials=!1),"responseType"in c&&r&&(c.responseType="blob"),i.headers.forEach((function(e,t){c.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",a),c.onreadystatechange=function(){4===c.readyState&&i.signal.removeEventListener("abort",a)}),c.send(void 0===i._bodyInit?null:i._bodyInit)}))}S.polyfill=!0,self.fetch||(self.fetch=S,self.Headers=f,self.Request=v,self.Response=w)}).call(this,n(23))},function(e,t,n){var r=n(8),o=n(13),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(14),c=n(26),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(i(e),t=c(t,!0),i(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(3),o=n(12);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g})),n.d(t,"Image",(function(){return g})),n.d(t,"IdeaImage",(function(){return x}));n(11);var r=n(0),o=n.n(r),i=n(5),c=n.n(i),a=(n(89),n(4)),u=n.n(a);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var c,a=e[Symbol.iterator]();!(r=(c=a.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(c,e);var t,n,r,i=d(c);function c(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);return(t=i.call(this,e)).config=u.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=c,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images;return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,c=s(i.getImagesFromProps(),2);t=c[0],e=c[1];var a=s(i.getWidthHeight(),2);return n=a[0],r=a[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n;console.log(r);var c=r*i.getAspectRatioFactor();console.log(c);var a=1.05*c*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:a,width:c,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(t.prototype,n),r&&p(t,r),c}(n(1).a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=O(i);function i(){return b(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&w(t.prototype,n),r&&w(t,r),i}(g);x.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(x,{attributes:n,config:t}),e)}},function(e,t,n){e.exports=n(51).Promise},function(e,t,n){var r=n(8),o=n(55),i=n(25),c=n(16),a=n(26),u=n(7),s=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=c(e),t=a(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),o=n(10),i=r.document,c=o(i)&&o(i.createElement);e.exports=function(e){return c?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(3),o=n(17),i="__core-js_shared__",c=r[i]||o(i,{});e.exports=c},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(59),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(62),o=n(3),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(16),i=n(36).indexOf,c=n(18);e.exports=function(e,t){var n,a=o(e),u=0,s=[];for(n in a)!r(c,n)&&r(a,n)&&s.push(n);for(;t.length>u;)r(a,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(16),o=n(48),i=n(64),c=function(e){return function(t,n,c){var a,u=r(t),s=o(u.length),l=i(c,s);if(e&&n!=n){for(;s>l;)if((a=u[l++])!=a)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:c(!0),indexOf:c(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t,n){var r=n(3),o=n(24).f,i=n(12),c=n(56),a=n(17),u=n(60),s=n(66);e.exports=function(e,t){var n,l,f,p,h,d=e.target,m=e.global,y=e.stat;if(n=m?r:y?r[d]||a(d,{}):(r[d]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(h=o(n,l))&&h.value:n[l],!s(m?l:d+(y?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),c(n,l,p,e)}}},function(e,t,n){var r=n(50),o=n(69),i=n(13),c=r("unscopables"),a=Array.prototype;null==a[c]&&i.f(a,c,{configurable:!0,value:o(null)}),e.exports=function(e){a[c][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),c=Object.defineProperty,a={},u=function(e){throw e};e.exports=function(e,t){if(i(a,e))return a[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return a[e]=!!n&&!o((function(){if(s&&!r)return!0;var e={length:-1};s?c(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(3),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(t,n,r,o){return new(r||(r=e))((function(e,i){function c(e){try{u(o.next(e))}catch(e){i(e)}}function a(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(c,a)}u((o=o.apply(t,n||[])).next())}))}function i(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(o=c.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}Object.create;Object.create}).call(this,n(23))},function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(67);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(3),o=n(32),i=n(7),c=n(33),a=n(38),u=n(68),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||c;e.exports=function(e){return i(s,e)||(a&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,c=void 0,a=void 0,u=function(e,t){m[i]=e,m[i+1]=t,2===(i+=2)&&(a?a(y):E())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),h="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var e=setTimeout;return function(){return e(y,1)}}var m=new Array(1e3);function y(){for(var e=0;e<i;e+=2)(0,m[e])(m[e+1]),m[e]=void 0,m[e+1]=void 0;i=0}var g,v,b,w,E=void 0;function O(e,t){var n=arguments,r=this,o=new this.constructor(x);void 0===o[R]&&U(o);var i,c=r._state;return c?(i=n[c-1],u((function(){return D(c,o,i,r._result)}))):L(r,o,e,t),o}function S(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(x);return P(t,e),t}p?E=function(){return t.nextTick(y)}:f?(v=0,b=new f(y),w=document.createTextNode(""),b.observe(w,{characterData:!0}),E=function(){w.data=v=++v%2}):h?((g=new MessageChannel).port1.onmessage=y,E=function(){return g.port2.postMessage(0)}):E=void 0===s?function(){try{var e=n(53);return c=e.runOnLoop||e.runOnContext,function(){c(y)}}catch(e){return d()}}():d();var R=Math.random().toString(36).substring(16);function x(){}var j=void 0,_=new q;function k(e){try{return e.then}catch(e){return _.error=e,_}}function C(t,n,r){n.constructor===t.constructor&&r===O&&n.constructor.resolve===S?function(e,t){1===t._state?T(e,t._result):2===t._state?A(e,t._result):L(t,void 0,(function(t){return P(e,t)}),(function(t){return A(e,t)}))}(t,n):r===_?A(t,_.error):void 0===r?T(t,n):e(r)?function(e,t,n){u((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?P(e,n):T(e,n))}),(function(t){r||(r=!0,A(e,t))}),e._label);!r&&o&&(r=!0,A(e,o))}),e)}(t,n,r):T(t,n)}function P(e,t){var n;e===t?A(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?C(e,t,k(t)):T(e,t)}function I(e){e._onerror&&e._onerror(e._result),N(e)}function T(e,t){e._state===j&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(N,e))}function A(e,t){e._state===j&&(e._state=2,e._result=t,u(I,e))}function L(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&u(N,e)}function N(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,c=0;c<t.length;c+=3)r=t[c],o=t[c+n],r?D(n,r,o,i):o(i);e._subscribers.length=0}}function q(){this.error=null}var F=new q;function D(t,n,r,o){var i=e(r),c=void 0,a=void 0,u=void 0,s=void 0;if(i){if((c=function(e,t){try{return e(t)}catch(e){return F.error=e,F}}(r,o))===F?(s=!0,a=c.error,c=null):u=!0,n===c)return void A(n,new TypeError("A promises callback cannot return that same promise."))}else c=o,u=!0;n._state!==j||(i&&u?P(n,c):s?A(n,a):1===t?T(n,c):2===t&&A(n,c))}var M=0;function U(e){e[R]=M++,e._state=void 0,e._result=void 0,e._subscribers=[]}function G(e,t){this._instanceConstructor=e,this.promise=new e(x),this.promise[R]||U(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):A(this.promise,new Error("Array Methods must be provided an Array"))}function B(e){this[R]=M++,this._result=this._state=void 0,this._subscribers=[],x!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof B?function(e,t){try{t((function(t){P(e,t)}),(function(t){A(e,t)}))}catch(t){A(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function z(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}return G.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===j&&n<e;n++)this._eachEntry(t[n],n)},G.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===S){var o=k(e);if(o===O&&e._state!==j)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===B){var i=new n(x);C(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},G.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===j&&(this._remaining--,2===e?A(r,n):this._result[t]=n),0===this._remaining&&T(r,this._result)},G.prototype._willSettleAt=function(e,t){var n=this;L(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},B.all=function(e){return new G(this,e).promise},B.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},B.resolve=S,B.reject=function(e){var t=new this(x);return A(t,e),t},B._setScheduler=function(e){a=e},B._setAsap=function(e){u=e},B._asap=u,B.prototype={constructor:B,then:O,catch:function(e){return this.then(null,e)}},z(),B.polyfill=z,B.Promise=B,B},e.exports=o()}).call(this,n(52),n(21))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:c}catch(e){r=c}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&h())}function h(){if(!l){var e=a(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===c||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||l||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},,function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(3),o=n(12),i=n(7),c=n(17),a=n(29),u=n(57),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,a){var u=!!a&&!!a.unsafe,s=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:o(e,t,n)):s?e[t]=n:c(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},function(e,t,n){var r,o,i,c=n(58),a=n(3),u=n(10),s=n(12),l=n(7),f=n(31),p=n(18),h=a.WeakMap;if(c){var d=new h,m=d.get,y=d.has,g=d.set;r=function(e,t){return g.call(d,e,t),t},o=function(e){return m.call(d,e)||{}},i=function(e){return y.call(d,e)}}else{var v=f("state");p[v]=!0,r=function(e,t){return s(e,v,t),t},o=function(e){return l(e,v)?e[v]:{}},i=function(e){return l(e,v)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(3),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(61),i=n(24),c=n(13);e.exports=function(e,t){for(var n=o(t),a=c.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(e,l)||a(e,l,u(t,l))}}},function(e,t,n){var r=n(34),o=n(63),i=n(65),c=n(14);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(c(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(3);e.exports=r},function(e,t,n){var r=n(35),o=n(19).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=a[c(e)];return n==s||n!=u&&("function"==typeof t?r(t):!!t)},c=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},a=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(14),i=n(70),c=n(19),a=n(18),u=n(72),s=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},h=function(e){return"<script>"+e+"</"+"script>"},d=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;d=r?function(e){e.write(h("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(h("document.F=Object")),e.close(),e.F);for(var n=c.length;n--;)delete d.prototype[c[n]];return d()};a[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=d(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(13),i=n(14),c=n(71);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=c(t),a=r.length,u=0;a>u;)o.f(e,n=r[u++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(19);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(75);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentLightbox}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentLightbox=function(_OpenStadComponent){_inherits(OpenStadComponentLightbox,_OpenStadComponent);var _super=_createSuper(OpenStadComponentLightbox);function OpenStadComponentLightbox(e){var t;return _classCallCheck(this,OpenStadComponentLightbox),(t=_super.call(this,e)).state={images:[],startIndex:0},t.recalcSizes=t.recalcSizes.bind(_assertThisInitialized(t)),t}return _createClass(OpenStadComponentLightbox,[{key:"componentDidMount",value:function(e,t){var n=this;n.showLightBoxListener=function(e){n.showLightbox(e.detail)},document.addEventListener("osc-show-light-box",n.showLightBoxListener),document.body.appendChild(this.instance)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-show-light-box",this.showLightBoxListener)}},{key:"showLightbox",value:function showLightbox(data){var self=this,aspectRatio;try{aspectRatio=eval(data.aspectRatio.replace&&data.aspectRatio.replace("x","/"))}catch(e){}"number"!=typeof aspectRatio&&(aspectRatio=16/9),self.setState({images:data.images,startIndex:data.startIndex,aspectRatio:aspectRatio},(function(){self.instance.style.display="block",self.recalcSizes()})),window.addEventListener("resize",self.recalcSizes)}},{key:"hideLightbox",value:function(){this.instance.style.display="none",window.removeEventListener("resize",this.recalcSizes)}},{key:"showImage",value:function(e,t){e.stopPropagation(),this.mainImage.src=t}},{key:"recalcSizes",value:function(){var e=this;if(e.mainContainer){var t=e.mainContainer.offsetWidth,n=e.mainContainer.offsetHeight;if(t/n>e.state.aspectRatio){var r=.8*n;e.mainImageContainer.style.height=r+"px",e.mainImageContainer.style.width=e.state.aspectRatio*r+"px",e.mainImageContainer.style.top=(n-r)/2+"px",e.mainImageContainer.style.left=(t-e.state.aspectRatio*r)/2+"px"}else{var o=t;e.mainImageContainer.style.width=o+"px",e.mainImageContainer.style.height=1/e.state.aspectRatio*o+"px",e.mainImageContainer.style.top=(n-1/e.state.aspectRatio*o)/2+"px",e.mainImageContainer.style.left=0}e.mainImage.style.width=e.mainImageContainer.style.width,e.mainImage.style.height=e.mainImageContainer.style.height;var i=e.state.aspectRatio*e.navigationContainer.offsetHeight,c=e.state.images.length*i+20*e.state.images.length;c>e.navigationContainer.offsetWidth&&(c=e.navigationContainer.offsetWidth,i=c/e.state.images.length-20),e.navigationContainer.style.width=c+"px",e.state.images.map((function(t,n){var r=parseInt(i);e["lighbox-image-container-".concat(n)].style.width=r+"px",e["lighbox-image-container-".concat(n)].style.height=parseInt(1/e.state.aspectRatio*r)+"px",e["lighbox-image-".concat(n)].style.width=e["lighbox-image-container-".concat(n)].style.width,e["lighbox-image-".concat(n)].style.height=e["lighbox-image-container-".concat(n)].style.height}))}}},{key:"getImageSrc",value:function(e){var t=e;return"object"==_typeof(e)&&e.src&&(t=e.src),t}},{key:"render",value:function(){var e=this,t=this;return React.createElement("div",{className:"osc-lightbox",onClick:function(){e.hideLightbox()},ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-close-button",onClick:function(e){return t.hideLightbox(e)}}),React.createElement("div",{className:"osc-lightbox-main-container",ref:function(e){return t.mainContainer=e}},React.createElement("div",{className:"osc-image-container",ref:function(e){return t.mainImageContainer=e}},React.createElement("img",{src:t.state.images[t.state.startIndex]&&t.getImageSrc(t.state.images[t.state.startIndex]),ref:function(e){return t.mainImage=e}}))),React.createElement("div",{className:"osc-lightbox-navigation-container"},React.createElement("div",{className:"osc-lightbox-navigation",ref:function(e){return t.navigationContainer=e}},t.state.images.map((function(e,n){return React.createElement("div",{className:"osc-image-container",style:{backgroundImage:"url(".concat(t.getImageSrc(e),")")},onClick:function(n){return t.showImage(n,t.getImageSrc(e))},key:"lighbox-image-container-".concat(n),ref:function(e){return t["lighbox-image-container-".concat(n)]=e}},React.createElement("img",{src:t.getImageSrc(e),ref:function(e){return t["lighbox-image-".concat(n)]=e}}))})))))}}]),OpenStadComponentLightbox}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},,,,,function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return h})),n.d(t,"PreviousNextButtonBlock",(function(){return h}));n(11);var r=n(0),o=n.n(r),i=n(5),c=n.n(i);n(118);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(i,e);var t,n,r,o=l(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e,{})}return t=i,(n=[{key:"render",value:function(){var e,t,n=this,r=this,o=this.props.previousAction;this.props.previousUrl&&(o=function(){document.location.href="".concat(n.props.previousUrl)}),o&&(e=React.createElement("div",{className:"osc-previous-button".concat(this.props.previousIsDisabled?" osc-disabled":""),onClick:function(e){return o(e)}},this.props.previousLabel));var i=this.props.nextAction;return this.props.nextUrl&&(i=function(){document.location.href="".concat(n.props.nextUrl)}),i&&(t=React.createElement("div",{className:"osc-next-button".concat(this.props.nextIsDisabled?" osc-disabled":""),onClick:function(e){return i(e)}},this.props.nextLabel)),React.createElement("div",{className:"osc-previous-next-button-block",ref:function(e){return r.instance=e}},e,t)}}])&&u(t.prototype,n),r&&u(t,r),i}(n(1).a);h.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(h,{attributes:n,config:t}),e)}},,,,function(e,t,n){},function(e,t,n){},,,,,,function(e,t,n){"use strict";n.r(t);n(11),n(115);var r=n(0),o=n.n(r),i=n(5),c=n.n(i),a=(n(117),n(78));n.d(t,"default",(function(){return a.a})),n.d(t,"Lightbox",(function(){return a.a})),a.a.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(a.a,{attributes:n,config:t}),e)}},,,,,,,,,function(e,t,n){var r=n(49),o=n(45),i=n(112),c=n(48),a=n(113),u=[].push,s=function(e){var t=1==e,n=2==e,s=3==e,l=4==e,f=6==e,p=5==e||f;return function(h,d,m,y){for(var g,v,b=i(h),w=o(b),E=r(d,m,3),O=c(w.length),S=0,R=y||a,x=t?R(h,O):n?R(h,0):void 0;O>S;S++)if((p||S in w)&&(v=E(g=w[S],S,b),e))if(t)x[S]=v;else if(v)switch(e){case 3:return!0;case 5:return g;case 6:return S;case 2:u.call(x,g)}else if(l)return!1;return f?-1:s||l?l:x}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},,,,,,,function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t,n){var r=n(47);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(10),o=n(114),i=n(50)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(46);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){n(116);var r=n(43);e.exports=r("Array","findIndex")},function(e,t,n){"use strict";var r=n(40),o=n(104).findIndex,i=n(41),c=n(42),a="findIndex",u=!0,s=c(a);a in[]&&Array(1).findIndex((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},function(e,t,n){},function(e,t,n){},,,,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return ye})),n.d(t,"ChoicesGuide",(function(){return ye})),n.d(t,"ChoicesGuideResult",(function(){return Ce}));n(11),n(127),n(111);var r=n(0),o=n.n(r),i=n(5),c=n.n(i),a=(n(130),n(4)),u=n.n(a),s=n(1),l=n(2),f=n(22),p=n(6);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?v(e):t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=y(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).config.aspectRatio=t.config.aspectRatio||"16x9",t.questionId=e.data.id,t.state={value:50,isAnswered:!1},t.onChangeHandler=t.onChangeHandler.bind(v(t)),t.showLightbox=t.showLightbox.bind(v(t)),t}return t=i,(n=[{key:"onChangeHandler",value:function(e){var t=this,n={value:e,isAnswered:!0,error:void 0};this.setState(n,(function(){t.liveUpdates()}))}},{key:"isValid",value:function(){return!(void 0===(this.props.data||{}).value&&!this.state.isAnswered&&(this.setState({error:"Je hebt nog geen keuze gemaakt"}),1))}},{key:"getAnswer",value:function(){if(this.state.isAnswered){var e,t=this.props.data||{},n=(t.values,t.dimensions);try{n=JSON.parse(n)}catch(e){}return n=n||["x"],"number"==typeof this.state.value||"string"==typeof this.state.value?(e={},n.includes("x")&&(e.x=this.state.value),n.includes("y")&&(e.y=this.state.value),n.includes("z")&&(e.z=this.state.value)):(e={},n.includes("x")&&(e.x=this.state.value.x),n.includes("y")&&(e.y=this.state.value.y),n.includes("z")&&(e.z=this.state.value.z)),e}}},{key:"liveUpdates",value:function(){var e=new window.CustomEvent("osc-choices-guide-live-updates");document.dispatchEvent(e)}},{key:"showLightbox",value:function(e){var t=this.props.data||{},n=[t.values&&t.values.A&&t.values.A.questionImage||"",t.values&&t.values.B&&t.values.B.questionImage||""],r=n.findIndex((function(t){return t==e})),o=new window.CustomEvent("osc-show-light-box",{detail:{images:n,startIndex:r,aspectRatio:this.config.aspectRatio}});document.dispatchEvent(o)}},{key:"render",value:function(){var e=this,t=this,n=t.props.data||{},r=!1;t.state.error&&(r=!0);var o=t.state.isAnswered,i="object"==h(n.value)?n.value.x:void 0!==n.value?n.value:"not defined";"not defined"===i?i=this.state.value:o=!0;var c=null,a=n.images;if(a){Array.isArray(a)||(a=[a]);var u=a[0];c=React.createElement("div",{className:"osc-question-image-container"},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:u}))}var s=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}})),l=null;switch(n.type){case"continuous":l=React.createElement("div",{className:"osc-question-selector"},React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:n.minLabel}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:n.maxLabel}}));break;case"a-to-b":var d=n.values&&n.values.A&&n.values.A.label||"A",m=n.values&&n.values.B&&n.values.B.label||"B",y=n.values&&n.values.A&&n.values.A.questionText,g=n.values&&n.values.B&&n.values.B.questionText,v=null,b=null;y&&g&&(v=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},d),React.createElement("div",{className:"osc-question-description-labeled-text"},y)),b=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},m),React.createElement("div",{className:"osc-question-description-labeled-text"},g)),s=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),v,b));var w=n.values&&n.values.A&&n.values.A.questionImage,E=n.values&&n.values.B&&n.values.B.questionImage;w&&E&&(s=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-a"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-a"},d),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:w,onClick:function(){return t.showLightbox(w)}}))),React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-b"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-b"},m),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:E,onClick:function(){return t.showLightbox(E)}}))),React.createElement("div",{style:{clear:"both",height:15}}),v,b)),l=React.createElement("div",{className:"osc-question-selector"},React.createElement("div",{className:"osc-question-selector-label-a"},d),React.createElement("div",{className:"osc-question-selector-label-b"},m),React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:n.minLabel}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:n.maxLabel}}));break;case"enum-radio":l=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(r,o){var i=parseInt(1e6*Math.random()),c=!1;return"object"==h(n.value)?(c=!0,Object.keys(n.value).forEach((function(e){n.value[e]!==r.value[e]&&(c=!1)}))):n.value===r.value&&(c=!0),"undefined"!=n.value?n.value:e.state.value,React.createElement("div",{key:"div-value-".concat(i),className:"osc-radio-container"},React.createElement("div",{className:"osc-radio-input".concat(c?" osc-radio-input-checked":"")},React.createElement("input",{name:"enum-radio-".concat(n.id),type:"radio",onChange:function(){return t.onChangeHandler(r.value)},key:"button-value-".concat(i)})),React.createElement("div",{className:"osc-radio-text"},r.text))})));break;case"enum-buttons":l=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(e,n){return React.createElement("button",{onClick:function(){return t.onChangeHandler(e.value)},key:"button-value-".concat(n)},e.text)})));break;default:l=React.createElement("div",null,"Type ",n.type," is (nog) niet geimplementeerd.")}var O=null;return r&&(O=React.createElement("div",{className:"osc-error-text"},t.state.error)),React.createElement("div",{id:t.props.config.divId,className:"osc-question osc-question-".concat(n.type).concat(r?" osc-error":"")},c,React.createElement("div",{className:"osc-question-content",id:t.props.config.divId+"-content"},React.createElement("h3",{className:"osc-question-title"}," ",n.title),s,l,O))}}])&&d(t.prototype,n),r&&d(t,r),i}(s.a);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){R(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(i,e);var t,n,r,o=_(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).noOfQuestionsToShow=t.config.noOfQuestionsToShow||1,t.questionElements=[],t.state={currentQuestion:0,values:{}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"isValid",value:function(){var e=this,t=!0,n=e.props.data.questions.slice(e.state.currentQuestion,e.state.currentQuestion+e.noOfQuestionsToShow),r=!1;return n.forEach((function(n,o){e.questionElements[o].isValid()||(r||setTimeout((function(){document.querySelector("#".concat(e.questionElements[o].config.divId,"-content")).scrollIntoView({behavior:"smooth"})}),250),r=!0,t=!1)})),t}},{key:"getAnswers",value:function(){var e=this,t=u()({},this.props.data&&this.props.data.values,e.state.values);return e.props.data&&e.props.data.questions.forEach((function(n,r){var o=e.questionElements.find((function(e){return e&&e.questionId==n.id}));o&&void 0!==o.getAnswer()&&(t[n.id]=o.getAnswer())})),e.setState({values:t}),t}},{key:"gotoNextQuestion",value:function(){if(this.isValid()){var e=this.state.currentQuestion+this.noOfQuestionsToShow;return e>=this.props.data.questions.length?(e=0,this.setState({currentQuestion:e}),{isReady:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isReady:!1,currentQuestion:e})}}},{key:"gotoPreviousQuestion",value:function(){var e=this.state.currentQuestion-this.noOfQuestionsToShow;return e<0?(e=0,this.setState({currentQuestion:e}),{isBeginning:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isBeginning:!1,currentQuestion:e})}},{key:"render",value:function(){var e,t=this,n=t.props.data||{questions:[]},r=n.questions.slice(t.state.currentQuestion,t.state.currentQuestion+t.noOfQuestionsToShow),o=u()({},this.props.data&&this.props.data.values,t.state.values);return e=React.createElement("div",{className:"osc-questions"},r.map((function(e,n){return React.createElement(w,{config:S(S({},t.config),{},{divId:"osc-question-".concat(e.id)}),data:S(S({},e),{},{value:o[e.id]}),key:"question-".concat(e.id),ref:function(e){t.questionElements[n]=e}})}))),React.createElement("div",{id:this.id,className:"osc-question-group"},React.createElement("h3",{className:"osc-question-group-title"},n.title),React.createElement("div",{className:"osc-question-group-description",dangerouslySetInnerHTML:{__html:n.description}}),e)}}])&&x(t.prototype,n),r&&x(t,r),i}(s.a);function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(e,t){return(A=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=q(e);if(t){var o=q(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&A(e,t)}(i,e);var t,n,r,o=L(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),null==(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null,barColor:{default:"#bed200",min:"#ff9100",max:"#bed200"}})).config.barColor.min&&(t.config.barColor.min="#ff9100"),null==t.config.barColor.max&&(t.config.barColor.max="#bed200"),t.answers=e.data&&e.data.answers||{},Object.keys(t.answers).forEach((function(e){t.answers[e]==parseInt(t.answers[e])&&(t.answers[e]={x:parseInt(t.answers[e])})})),t.state={score:t.props.score||0},t}return t=i,(n=[{key:"getTitle",value:function(e,t){return this.props.data&&this.props.data.title}},{key:"calculateScore",value:function(e){var t=this,n=this.answers,r=e||{},o=(Object.keys(n).length,{});Object.keys(n).forEach((function(e){var i=n[e]||{},c=r[e]||(t.config.startWithAllQuestionsAnswered?{x:50,y:50,z:50}:{}),a=o[e]={};["x","y","z"].forEach((function(e){if(void 0!==i[e]&&void 0!==c[e])return a[e]=100-Math.abs(i[e]-c[e])}))}));var i={};return Object.keys(n).forEach((function(e){["x","y","z"].forEach((function(t){i[t]=i[t]||{score:[],noOfAnswers:0},void 0!==o[e][t]&&i[t].score.push(o[e][t]),n[e]&&void 0!==n[e][t]&&i[t].noOfAnswers++}))})),Object.keys(i).forEach((function(e){i[e]=i[e].score.length?i[e].score.reduce((function(e,t){return e+t}))/i[e].noOfAnswers:void 0})),this.setState({score:i}),i}},{key:"render",value:function(){var e=this,t=e.state.score,n=null;switch(this.config.type){case"plane":var r=null,o=this.props.data&&this.props.data.images;if(o){Array.isArray(o)||(o=[o]);var i=o[0],c=i;"object"==I(i)&&(c=i.src),r=React.createElement("img",{className:"osc-choice-plane-background-image",src:c,style:{width:this.props.baseSize/2,height:this.props.baseSize/2}})}return React.createElement("div",{className:"osc-choice-plane",style:{width:this.props.baseSize/2,height:this.props.baseSize/2}},r);case"minus-to-plus-100":var a=null,u=parseInt(2*(t.x-50));e.config.withPercentage&&(a=React.createElement("div",{className:"osc-percentage"},u,"%"));var s=e.config.barColor.max.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),l=e.config.barColor.min.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),f=parseInt(l[1],16)+(parseInt(s[1],16)-parseInt(l[1],16))*(t.x/100),p=parseInt(l[2],16)+(parseInt(s[2],16)-parseInt(l[2],16))*(t.x/100),h=parseInt(l[3],16)+(parseInt(s[3],16)-parseInt(l[3],16))*(t.x/100),d={backgroundColor:"rgb(".concat(f,",").concat(p,",").concat(h,")")};u>=0&&(d.width=u/2+"%",d.left="50%",d.right="auto"),u<0&&(d.width=-u/2+"%",d.left="auto",d.right="50%"),n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar osc-from-center".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-progress",style:d})),a);break;case"zero-to-100":default:var m=null;if(e.config.withPercentage){var y=parseInt(t.x);m=React.createElement("div",{className:"osc-percentage"},y,"%")}d={width:(t.x||0)+"%",backgroundColor:e.config.barColor.default},n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:d})),m)}var g=null;return(e.config.minLabel||e.config.maxLabel)&&(g=React.createElement("div",{className:"osc-minmax-labels"},React.createElement("div",{className:"osc-min-label"},e.config.minLabel),React.createElement("div",{className:"osc-max-label"},e.config.maxLabel))),React.createElement("li",{className:"osc-choice"},n,g)}}])&&T(t.prototype,n),r&&T(t,r),i}(s.a);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){G(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function H(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=W(e);if(t){var o=W(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Q(this,n)}}function Q(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(i,e);var t,n,r,o=H(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null})).choiceElements=[],t.state={title:"Je hebt nog geen keuze gemaakt",scores:e.scores,planePos:{x:50,y:50}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.choicesClickListener=function(e){n.setState({random:Math.random()})},document.addEventListener("osc-choices-click",n.choicesClickListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-click",self.choicesClickListener)}},{key:"calculateScores",value:function(e){var t=this,n={};t.choiceElements.forEach((function(t){n[t.config.divId]=t.calculateScore(e)}));var r={x:50,y:50};if(t.config.type){var o=Object.keys(e);if(o.length){r={x:0,y:0};var i={x:0,y:0,z:0};o.forEach((function(t){var n=e[t];["x","y","z"].forEach((function(e){void 0!==n[e]&&(r[e]+=parseInt(n[e])||0,i[e]++)}))})),r.x=i.x?parseInt(r.x/i.x):void 0,r.y=i.y?parseInt(r.y/i.y):void 0}}return t.setState({answers:e,scores:n,planePos:r}),{answers:e,scores:n,planePos:r}}},{key:"getPreferedChoice",value:function(e){var t=e.scores,n=e.planePos,r=this;switch(t=t||r.state.scores,r.config.type){case"plane":return(n=n||r.state.planePos).x<50&&n.y<50?r.choiceElements[0]:n.x>50&&n.y<50?r.choiceElements[1]:n.x<50&&n.y>50?r.choiceElements[2]:n.x>50&&n.y>50?r.choiceElements[3]:null;default:var o=Object.keys(t).sort((function(e,n){return t[n].x-t[e].x}))[0];return r.choiceElements.find((function(e){return e&&e.config.divId==o}))}}},{key:"render",value:function(){var e=this;switch(this.config.type){case"plane":var t=document.querySelector("#".concat(this.divId))&&document.querySelector("#".concat(this.divId)).offsetWidth-1||180,n=(void 0===e.state.planePos.y?50:e.state.planePos.y)*(t/100),r=(void 0===e.state.planePos.x?50:e.state.planePos.x)*(t/100);return React.createElement("div",{id:this.divId,className:"osc-choices osc-choice-plane-plane",ref:function(t){e.planePlaneElement=t}},Object.keys(e.props.choices).map((function(n,r){var o=e.props.choices[n];return React.createElement(F,{config:U({divId:"choice-".concat(o.id)},e.config),data:o,score:e.props.scores&&e.props.scores["choice-".concat(o.id)],key:"choice-".concat(o.id),baseSize:t,ref:function(t){e.choiceElements[r]=t}})})),React.createElement("div",{className:"osc-point",style:{top:n,left:r}}),React.createElement("div",{style:{clear:"both"}}));case"zero-to-100":case"minus-to-plus-100":default:return React.createElement("ul",{className:"osc-choices"},Object.keys(e.props.choices).map((function(t,n){var r=e.props.choices[t];return React.createElement(F,{config:U({divId:"choice-".concat(r.id)},e.config),data:r,score:e.props.scores&&e.props.scores["choice-".concat(r.id)],key:"choice-".concat(r.id),ref:function(t){e.choiceElements[n]=t}})})))}}}])&&B(t.prototype,n),r&&B(t,r),i}(s.a);function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Z(e);if(t){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return X(this,n)}}function X(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(i,e);var t,n,r,o=Y(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null}})).state={choicesGuideId:t.props.data.choicesGuideId,currentTarget:{},busy:!1},t.onFinished=t.props.onFinished,t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.config.choicesGuideId,"?includeChoices=1&includeQuestions=1"),n=l.a.api.getHeaders();fetch(t,{headers:n}).then((function(e){return e.json()})).then((function(t){var n={};n.choicesGuideId=t.id,n.title=t.title,n.description=t.description,n.images=t.images,n.choices=t.choices||[],n.questionGroups=t.questiongroups||[],n.busy=!1,e.setState(n,(function(){e.setCurrentForm({what:"choices-guide"})}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"handleFieldChange",value:function(e){var t=this.state.currentTarget;Object.keys(e).forEach((function(n){t[n]=e[n]})),this.setState({currentTarget:t})}},{key:"setCurrentForm",value:function(e){var t,n,r;switch(e.what){case"choices-guide":e.title=this.state.title,e.description=this.state.description,e.images=this.state.images?JSON.stringify(this.state.images):"";break;case"choice":n=e.questionGroupId?(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).choices&&t.choices.find((function(t){return t.id==e.choiceId}))||{}:this.state.choices.find((function(t){return t.id==e.choicesId}))||{},e.title=n.title,e.description=n.description,e.images=n.images?JSON.stringify(n.images):"",e.answers=n.answers?JSON.stringify(n.answers):"",e.seqnr=n.seqnr||0;break;case"question-group":t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{},e.title=t.title,e.description=t.description,e.images=t.images?JSON.stringify(t.images):"",e.seqnr=t.seqnr||0;break;case"question":r=(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).questions&&t.questions.find((function(t){return t.id==e.questionId}))||{},e.title=r.title,e.description=r.description,e.images=r.images?JSON.stringify(r.images):"",e.minLabel=r.minLabel,e.maxLabel=r.maxLabel,e.type=r.type,e.dimensions=r.dimensions,e.values=r.values?JSON.stringify(r.values):"",e.seqnr=r.seqnr||0}this.setState({currentTarget:e})}},{key:"submitForm",value:function(){var e=this;e.setState({busy:!0},(function(){var t,n,r;if(!e.config.user||!e.config.user.role||"admin"!=e.config.user.role)return alert("Je mag dit niet");switch(e.state.currentTarget.what){case"choices-guide":r=e.state.choicesGuideId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images};break;case"choice":r=e.state.currentTarget.choiceId,t=e.state.currentTarget.questionGroupId?"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/choice"):"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/choice"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,answers:e.state.currentTarget.answers?JSON.parse(e.state.currentTarget.answers):"",seqnr:e.state.currentTarget.seqnr};break;case"question-group":r=e.state.currentTarget.questionGroupId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,seqnr:e.state.currentTarget.seqnr};break;case"question":r=e.state.currentTarget.questionId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/question"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,minLabel:e.state.currentTarget.minLabel,maxLabel:e.state.currentTarget.maxLabel,type:e.state.currentTarget.type,dimensions:e.state.currentTarget.dimensions,values:e.state.currentTarget.values?JSON.parse(e.state.currentTarget.values):"",seqnr:e.state.currentTarget.seqnr}}t+=r?"/".concat(r):"";var o=l.a.api.getHeaders(e.config);fetch(t,{method:r?"PUT":"POST",headers:o,body:JSON.stringify(n)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData()})).catch((function(t){t.then((function(e){return console.log(e)})),e.setState({busy:!1})}))}))}},{key:"deleteElement",value:function(e){var t=e.what,n=e.questionGroupId,r=e.choiceId,o=e.questionId,i=e.title,c=this;if(confirm("Je gaat "+t+" "+i+" verwijderen. Weet je het zeker?")){var a;switch(t){case"question-group":a="".concat(c.config.api&&c.config.api.url,"/api/site/").concat(c.config.siteId,"/choicesguide/").concat(c.state.choicesGuideId,"/questiongroup/").concat(n);break;case"choice":a="".concat(c.config.api&&c.config.api.url,"/api/site/").concat(c.config.siteId,"/choicesguide/").concat(c.state.choicesGuideId,"/questiongroup/").concat(n,"/choice/").concat(r);break;case"question":a="".concat(c.config.api&&c.config.api.url,"/api/site/").concat(c.config.siteId,"/choicesguide/").concat(c.state.choicesGuideId,"/questiongroup/").concat(n,"/question/").concat(o)}var u=l.a.api.getHeaders(c.config);fetch(a,{method:"DELETE",headers:u}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){c.fetchData()})).catch((function(e){e.then((function(e){return console.log(e)})),c.setState({busy:!1})}))}}},{key:"render",value:function(){var e=this,t=null,n=null,r=null,o=React.createElement("button",{onClick:function(){e.setCurrentForm({what:"choices-guide"})}},"Terug"),i=React.createElement("button",{onClick:function(t){return e.submitForm()}},"Submit");switch(e.state.currentTarget.what){case"choices-guide":t="Bewerk keuzewijzer",n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{key:"x1",config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{key:"x2",config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(p.a.Textarea,{key:"i1",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}})),r=React.createElement("div",{className:"openstad-form"},React.createElement("h4",null,"Vraaggroepen"),Object.keys(e.state.questionGroups).map((function(t,n){var r,o=e.state.questionGroups[t],i=React.createElement("ul",null,Object.keys(o.questions).map((function(t,n){var r=o.questions[t];return React.createElement("li",null,"(",r.id,") - ",r.title," - ",r.seqnr,"-",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question",questionGroupId:o.id,questionId:r.id})}},"Bewerk"),"-",React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"question",questionGroupId:o.id,questionId:r.id,title:r.title})}},"Verwijder"))})),React.createElement("li",null,React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question",questionGroupId:o.id})}},"Nieuwe vraag"))),c=React.createElement("ul",null,Object.keys(o.choices).map((function(t,n){var r=o.choices[t];return React.createElement("li",null,r.title," - ",r.seqnr,"- ",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"choice",questionGroupId:o.id,choiceId:r.id})}},"Bewerk"),"- ",React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"choice",questionGroupId:o.id,choiceId:r.id,title:r.title})}},"Verwijder"))})),React.createElement("li",null,React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"choice",questionGroupId:o.id})}},"Nieuwe keuze")));return 0==Object.keys(o.choices).length&&0==Object.keys(o.questions).length&&(r=React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"question-group",questionGroupId:o.id,title:o.title})}},"Verwijder")),React.createElement("div",null,o.title," - ",o.seqnr,"- ",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question-group",questionGroupId:o.id})}},"Bewerk"),"- ",r,i,c)})),React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question-group"})}},"Nieuwe groep")),o=React.createElement("button",{onClick:function(){e.onFinished&&e.onFinished()}},"Terug");break;case"choice":t="Bewerk Keuze",n=React.createElement("div",null,React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(p.a.Textarea,{key:"i2",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Antwoorden"),React.createElement(p.a.Text,{config:{},value:e.state.currentTarget.answers,onChange:function(t){return e.handleFieldChange({answers:t.value})},ref:function(t){return e.answersField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;case"question-group":t="Bewerk Vragengroep",n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(p.a.Textarea,{key:"i3",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;case"question":t="Bewerk Vraag ".concat(e.state.currentTarget.questionId),n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(p.a.Textarea,{key:"i4",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Label minimale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.minLabel,onChange:function(t){return e.handleFieldChange({minLabel:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Label maximale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.maxLabel,onChange:function(t){return e.handleFieldChange({maxLabel:t.value})},ref:function(t){return e.maxLabelField=t}}),React.createElement("h3",null,"Type"),React.createElement("select",{key:"dezemoetnogweg".concat(e.state.currentTarget.questionGroupId),value:e.state.currentTarget.type,onChange:function(){return e.handleFieldChange({type:e.typeField.value})},ref:function(t){return e.typeField=t}},React.createElement("option",{value:"continuous"},"continue"),React.createElement("option",{value:"a-to-b"},"van a naar b"),React.createElement("option",{value:"enum-buttons"},"multiple choice - buttons"),React.createElement("option",{value:"enum-radio"},"multiple choice - radio")),React.createElement("h3",null,"Dimensions"),React.createElement(p.a.Text,{config:{},value:e.state.currentTarget.dimensions,onChange:function(t){return e.handleFieldChange({dimensions:t.value})},ref:function(t){return e.dimensionsField=t}}),React.createElement("h3",null,"Waarden"),React.createElement(p.a.Textarea,{config:{},value:e.state.currentTarget.values,onChange:function(t){return e.handleFieldChange({values:t.value})},ref:function(t){return e.valuesField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;default:o=React.createElement("button",{onClick:function(){e.onFinished&&e.onFinished()}},"Terug"),i=null}return React.createElement("div",{id:this.divId,className:"osc-form".concat(this.state.busy?" osc-busy":"")},React.createElement("h2",null,t),n,React.createElement("br",null),React.createElement("br",null),o,i,r)}}])&&K(t.prototype,n),r&&K(t,r),i}(s.a),te=n(95),ne=n(84);function re(e){var t=e.config,n="".concat(t.api&&t.api.url,"/api/site/").concat(t.siteId,"/choicesguide/").concat(t.choicesGuideId,"?includeChoices=1&includeQuestions=1"),r=l.a.api.getHeaders();return fetch(n,{headers:r}).then((function(e){return e.json()})).then((function(e){return{choicesGuideId:e.id,images:e.images,choicesGuideConfig:e.config,title:e.title,description:e.description,choices:e.choices||[],questionGroups:e.questiongroups||[],status:"active"}}))}function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e){return function(e){if(Array.isArray(e))return ce(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ce(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ce(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ae(Object(n),!0).forEach((function(t){se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fe(e,t){return(fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=me(e);if(t){var o=me(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return he(this,n)}}function he(e,t){return!t||"object"!==oe(t)&&"function"!=typeof t?de(e):t}function de(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&fe(e,t)}(i,e);var t,n,r,o=pe(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=de(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"<b>Jouw voorkeur:</b>{preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!1,minLabel:null,maxLabel:null}}));!n.config.aspectRatio&&n.config.choices&&n.config.choices.type&&"plane"==n.config.choices.type&&(n.config.aspectRatio="10x7");var r=l.a.localStorage.get("osc-choices-guide.values")||{},c=l.a.localStorage.get("osc-choices-guide.scores")||{};return n.state={title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,currentQuestion:void 0,status:"init",values:r[n.config.choicesGuideId],scores:c[n.config.choicesGuideId]},n.liveUpdates=n.liveUpdates.bind(de(t)),n.hideEditForm=n.hideEditForm.bind(de(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.liveUpdateListener=function(e){n.liveUpdates(e.detail)},document.addEventListener("osc-choices-guide-live-updates",n.liveUpdateListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-guide-live-updates",self.liveUpdateListener)}},{key:"fetchData",value:function(){var e=this;re({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e=this,t={currentQuestionGroupIndex:0};e.setState(t,(function(){e.liveUpdates();var t=new window.CustomEvent("osc-choices-guide-is-ready");document.dispatchEvent(t)}))}},{key:"showEditForm",value:function(){this.setState({status:"edit"})}},{key:"hideEditForm",value:function(){var e=l.a.localStorage.get("osc-choices-guide.values")||{},t=l.a.localStorage.get("osc-choices-guide.scores")||{};this.setState({title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,status:"init",values:e[this.config.choicesGuideId],scores:t[this.config.choicesGuideId]},(function(){this.fetchData()}))}},{key:"gotoNextQuestion",value:function(){var e=this,t={};t.values=u()(e.state.values||{},e.questionGroupElement.getAnswers()),e.setState(t),e.choicesElement.calculateScores(t.values),e.userPreference&&e.userPreference.calculateScores();var n=e.questionGroupElement.gotoNextQuestion(),r=n.isReady,o=n.currentQuestion;e.setState({currentQuestion:o},(function(){r?e.gotoNextGroup():window.scrollTo(0,0)}))}},{key:"gotoPreviousQuestion",value:function(){var e=this;if("result"==this.state.status)return this.gotoPreviousGroup();var t={};t.values=u()(this.state.values||{},this.questionGroupElement.getAnswers()),this.setState(t),this.choicesElement.calculateScores(t.values),self.userPreference&&self.userPreference.calculateScores();var n=this.questionGroupElement.gotoPreviousQuestion(),r=n.isBeginning,o=n.currentQuestion;this.setState({currentQuestion:o},(function(){r?e.gotoPreviousGroup():window.scrollTo(0,0)}))}},{key:"gotoNextGroup",value:function(){var e=this,t=ue({},this.state);t.currentQuestionGroupIndex<t.questionGroups.length-1?(t.values=u()(t.values||{},this.questionGroupElement.getAnswers()),t.currentQuestionGroupIndex++,this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))):this.gotoResult()}},{key:"gotoPreviousGroup",value:function(){var e=this,t={};t.currentQuestionGroupIndex=this.state.currentQuestionGroupIndex-1,"result"==this.state.status&&(t.currentQuestionGroupIndex=this.state.questionGroups.length-1,t.status="active"),this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))}},{key:"gotoResult",value:function(){document.location.href=this.config.afterUrl}},{key:"liveUpdates",value:function(){var e,t=this,n=u()(t.state.values||{},t.questionGroupElement.getAnswers()),r=t.choicesElement.calculateScores(n);e=r.scores,t.userPreference&&t.userPreference.calculateScores(n),t.setState({scores:e,firstAnswerGiven:Object.keys(n).length>0},(function(){var r=l.a.localStorage.get("osc-choices-guide.values")||{};r[t.config.choicesGuideId]=n,l.a.localStorage.set("osc-choices-guide.values",r);var o=l.a.localStorage.get("osc-choices-guide.scores")||{};o[t.config.choicesGuideId]=e,l.a.localStorage.set("osc-choices-guide.scores",o),t.updateChoicesTitle()}))}},{key:"updateChoicesTitle",value:function(){var e=this,t=e.config.choices.title.noPreferenceYet,n=e.choicesElement&&e.choicesElement.getPreferedChoice({});e.state.firstAnswerGiven&&(t=n?e.config.choices.title.preference.replace("{preferredChoice}",n&&n.getTitle(e.state.scores[n.config.divId])||t):e.config.choices.title.inBetween),e.setState({choicesTitle:t})}},{key:"onChoicesClick",value:function(e){this.choicesAccordeon.className.match(" osc-closed")?this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-closed"," osc-open"):this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-open"," osc-closed");var t=new window.CustomEvent("osc-choices-click",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e,t=this,n=t.state.choices;t.state.currentQuestionGroupIndex>=0&&(e=t.state.questionGroups[t.state.currentQuestionGroupIndex])&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=null,o=t.state.images;o&&(Array.isArray(o)||(o=[o]),r=React.createElement(f.Image,{className:"osc-top-image-spacer",width:"100%",image:o[0]}));var i=null;if("edit"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement(ee,{config:t.config,onFinished:t.hideEditForm,data:ue({},t.state)}));else if("init"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement("div",{className:"osc-intro"},"Laden..."));else{var c=React.createElement("div",{id:"osc-choices-container-"+this.divId,className:"osc-choices-container osc-accordeon osc-closed ".concat("osc-type-"+t.config.choices.type),ref:function(e){t.choicesAccordeon=e}},React.createElement("div",{onClick:function(e){return t.onChoicesClick(e)},className:"osc-accordeon-button",dangerouslySetInnerHTML:{__html:t.state.choicesTitle}}),React.createElement("div",{className:"osc-accordeon-content"},React.createElement(V,{config:ue(ue({},t.config.choices),{},{startWithAllQuestionsAnswered:this.config.startWithAllQuestionsAnswered}),choices:ie(n),scores:ue({},t.state.scores),firstAnswerGiven:!!t.state.firstAnswerGiven,ref:function(e){t.choicesElement=e},key:"choices"}))),a=React.createElement(P,{config:t.config,data:e,ref:function(e){t.questionGroupElement=e},key:"group".concat(t.state.currentQuestionsGroupIndex)}),u=null;t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(u=React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk keuzewijzer"));var s=null,l=null,p=null;t.state.currentQuestionGroupIndex>0||t.state.currentQuestion>0?(l=function(){t.gotoPreviousQuestion()},p="Terug"):t.config.beforeUrl&&(s=t.config.beforeUrl,p="Introductie");var h=null,d=null;"init"==t.state.status?(h=null,d=null):(h=function(){t.gotoNextQuestion()},d="Volgende");var m=null;(p||d)&&(m=React.createElement(ne.default,{previousAction:l,previousUrl:s,previousLabel:p,nextAction:h,nextUrl:null,nextLabel:d})),i=React.createElement("div",{className:"osc-choices-guide-content"},u,c,a,m)}return React.createElement("div",{id:this.divId,className:"osc-choices-guide"},React.createElement(te.default,null),r,i)}}])&&le(t.prototype,n),r&&le(t,r),i}(s.a),ge=n(124);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e){return function(e){if(Array.isArray(e))return we(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return we(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ee(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xe(e,t){return(xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ke(e);if(t){var o=ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _e(this,n)}}function _e(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xe(e,t)}(i,e);var t,n,r,o=je(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",submission:{type:"none",requireLoginSettings:{title:"Stemcode",description:"Om te kunnen stemmen vul je de stemcode in die je per post hebt ontvangen. Wij controleren je stemcode op geldigheid. Als dat gelukt is kun je stemmen.",buttonTextLogin:"Vul je stemcode in",buttonTextLoggedIn:"Geldige stemcode",buttonTextAlreadySubmitted:"Ongeldige stemcode",changeLoginLinkText:"Vul een andere stemcode in",loggedInMessage:"Het controleren van je stemcode is gelukt! Klik op onderstaande knop om je keuze in te sturen.",alreadySubmittedMessage:"Deze stemcode is al gebruikt om te stemmen. Een stemcode kan maar één keer gebruikt worden."}},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"Jouw voorkeur is {preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!0,minLabel:null,maxLabel:null}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href);var n=l.a.localStorage.get("osc-choices-guide.values")||{},r=l.a.localStorage.get("osc-choices-guide.scores")||{};return t.state={title:"",answers:n[t.config.choicesGuideId],scores:r[t.config.choicesGuideId]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;re({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e,t=this,n=t.choicesElement&&t.choicesElement.calculateScores(t.state.answers);n.scores,e=n.planePos;var r="",o=-1;if(t.choicesElement){var i=t.choicesElement.getPreferedChoice({planePos:e});i?(r=t.config.choices.title.preference.replace("{preferredChoice}",i&&i.getTitle(t.state.scores[i.config.divId])||r),o=i.divId):r=t.config.choices.title.inBetween,t.setState({title:r});var c=new window.CustomEvent("osc-choices-guide-result-is-ready",{detail:{preferredChoice:{name:void 0,title:r,preferredChoiceId:o},answers:t.state.answers,scores:t.state.scores}});document.dispatchEvent(c),"auto"==t.config.submission.type&&t.submitResult()}}},{key:"submitResult",value:function(){var e,t=this;if("form"!=t.config.submission.type||(e=t.form.getValues(),t.form.validate({showErrors:!0,scrollTo:!0})))if(t.state.choicesGuideConfig&&t.state.choicesGuideConfig.requiredUserRole&&!t.isUserLoggedIn()){var n=document.querySelector(".osc-require-login");n&&n.scrollIntoView({behavior:"smooth"})}else ge.a.load().then((function(n){n.get().then((function(n){var r=n.visitorId,o="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/choicesguide/").concat(t.config.choicesGuideId,"/result"),i=l.a.api.getHeaders(t.config),c={result:{answers:t.state.answers,scores:t.state.scores},extraData:e,userFingerprint:r};fetch(o,{method:"POST",headers:i,body:JSON.stringify(c)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){"form"==t.config.submission.type&&(document.location.href=t.config.afterUrl)})).catch((function(e){e.then((function(e){try{e=JSON.parse(e)}catch(e){}var n=Array.isArray(e)&&e[0]&&e[0].message||e[0]||e.message||e;t.setState({submissionError:{message:n.toString(),type:"Je hebt je mening al ingestuurd"==n?"alreadySubmitted":"unknown"}},(function(){return console.log(e)}))}))}))}))}))}},{key:"isUserLoggedIn",value:function(){return this.config.user&&this.config.user.role&&"anonymous"!=this.config.user.role}},{key:"render",value:function(){var e,t=this,n=(t.props&&t.props.data,t.state.choices);t.state.questionGroups&&(e=t.state.questionGroups.find((function(e){return e.id==t.config.questionGroupId})))&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=!(!t.state.choicesGuideConfig||!t.state.choicesGuideConfig.requiredUserRole),o=null;n&&(o=React.createElement(V,{config:Oe({},t.config.choices),scores:Oe({},t.state.scores),choices:be(n),firstAnswerGiven:!0,ref:function(e){t.choicesElement=e},key:"choices"}));var i=null;t.config.moreInfoUrl&&t.config.moreInfoLabel&&(i=React.createElement("div",{className:"osc-more-info-link"},React.createElement("a",{href:t.config.moreInfoUrl},t.config.moreInfoLabel)));var c=null,a=null,u=null;if("form"==t.config.submission.type){if(c=React.createElement(p.a.Form,{config:t.config.submission.form,ref:function(e){t.form=e}}),r)if(t.isUserLoggedIn()){var s="osc-success",l=t.config.submission.requireLoginSettings.buttonTextLoggedIn,f=t.config.submission.requireLoginSettings.loggedInMessage;t.state.submissionError&&(s="osc-error","alreadySubmitted"==t.state.submissionError.type?(l=t.config.submission.requireLoginSettings.buttonTextAlreadySubmitted,f=t.config.submission.requireLoginSettings.alreadySubmittedMessage):f=t.state.submissionError.message),a=React.createElement("div",{className:"osc-require-login osc-logged-in osc-logged-in ".concat(s)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},React.createElement("button",{onClick:function(e){return document.location.href=t.config.loginUrl},className:"osc-button osc-button-white"},l),React.createElement("div",{className:"change-login-link-text"},React.createElement("a",{href:"javascript: document.location.href = '".concat(t.config.loginUrl,"'")},t.config.submission.requireLoginSettings.changeLoginLinkText)),React.createElement("div",{className:"osc-message"},f)))}else a=React.createElement("div",{className:"osc-require-login osc-not-yet-logged-in"},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},t.config.submission.requireLoginSettings.description,React.createElement("br",null),React.createElement("br",null),React.createElement("button",{onClick:function(e){return document.location.href=t.config.loginUrl},className:"osc-button osc-button-white"},t.config.submission.requireLoginSettings.buttonTextLogin)));var h=null,d=null;t.config.beforeUrl&&(h=t.config.beforeUrl,d=t.config.beforeLabel||"Vorige");var m=t.config.afterLabel||"Opslaan",y="form"==t.config.submission.type&&t.form&&!t.form.validate({})||r&&!t.isUserLoggedIn();(d||m)&&(u=React.createElement(ne.default,{previousAction:null,previousUrl:h,previousLabel:d,nextAction:function(){t.submitResult()},nextUrl:null,nextLabel:m,nextIsDisabled:y}))}var g=null;return t.state.submissionError&&!r&&(g=React.createElement("div",{className:"osc-message osc-error"},t.state.submissionError.message,";")),React.createElement("div",{className:"osc-choices-guide"},React.createElement("div",{className:"osc-result"},React.createElement("div",{className:"osc-result-content"},React.createElement("div",{className:"osc-choices-container ".concat("osc-type-"+t.config.choices.type)},React.createElement("h3",{dangerouslySetInnerHTML:{__html:t.state.title}}),o),i,c,a,g)),u)}}])&&Re(t.prototype,n),r&&Re(t,r),i}(s.a);ye.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(ye,{attributes:n,config:t}),e)},Ce.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(Ce,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";(function(e){var r=n(44);function o(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function i(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function c(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])}function a(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]}function u(e,t){return[e[0]^t[0],e[1]^t[1]]}function s(e){return e=u(e,[0,e[0]>>>1]),e=u(e=i(e,[4283543511,3981806797]),[0,e[0]>>>1]),e=u(e=i(e,[3301882366,444984403]),[0,e[0]>>>1])}function l(e,t){t=t||0;var n,r=(e=e||"").length%16,l=e.length-r,f=[0,t],p=[0,t],h=[0,0],d=[0,0],m=[2277735313,289559509],y=[1291169091,658871167];for(n=0;n<l;n+=16)h=[255&e.charCodeAt(n+4)|(255&e.charCodeAt(n+5))<<8|(255&e.charCodeAt(n+6))<<16|(255&e.charCodeAt(n+7))<<24,255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24],d=[255&e.charCodeAt(n+12)|(255&e.charCodeAt(n+13))<<8|(255&e.charCodeAt(n+14))<<16|(255&e.charCodeAt(n+15))<<24,255&e.charCodeAt(n+8)|(255&e.charCodeAt(n+9))<<8|(255&e.charCodeAt(n+10))<<16|(255&e.charCodeAt(n+11))<<24],h=c(h=i(h,m),31),f=o(f=c(f=u(f,h=i(h,y)),27),p),f=o(i(f,[0,5]),[0,1390208809]),d=c(d=i(d,y),33),p=o(p=c(p=u(p,d=i(d,m)),31),f),p=o(i(p,[0,5]),[0,944331445]);switch(h=[0,0],d=[0,0],r){case 15:d=u(d,a([0,e.charCodeAt(n+14)],48));case 14:d=u(d,a([0,e.charCodeAt(n+13)],40));case 13:d=u(d,a([0,e.charCodeAt(n+12)],32));case 12:d=u(d,a([0,e.charCodeAt(n+11)],24));case 11:d=u(d,a([0,e.charCodeAt(n+10)],16));case 10:d=u(d,a([0,e.charCodeAt(n+9)],8));case 9:d=i(d=u(d,[0,e.charCodeAt(n+8)]),y),p=u(p,d=i(d=c(d,33),m));case 8:h=u(h,a([0,e.charCodeAt(n+7)],56));case 7:h=u(h,a([0,e.charCodeAt(n+6)],48));case 6:h=u(h,a([0,e.charCodeAt(n+5)],40));case 5:h=u(h,a([0,e.charCodeAt(n+4)],32));case 4:h=u(h,a([0,e.charCodeAt(n+3)],24));case 3:h=u(h,a([0,e.charCodeAt(n+2)],16));case 2:h=u(h,a([0,e.charCodeAt(n+1)],8));case 1:h=i(h=u(h,[0,e.charCodeAt(n)]),m),f=u(f,h=i(h=c(h,31),y))}return f=o(f=u(f,[0,e.length]),p=u(p,[0,e.length])),p=o(p,f),f=o(f=s(f),p=s(p)),p=o(p,f),("00000000"+(f[0]>>>0).toString(16)).slice(-8)+("00000000"+(f[1]>>>0).toString(16)).slice(-8)+("00000000"+(p[0]>>>0).toString(16)).slice(-8)+("00000000"+(p[1]>>>0).toString(16)).slice(-8)}var f=window;function p(e){return parseInt(e)}function h(e){return parseFloat(e)}function d(e){return e.reduce((function(e,t){return e+(t?1:0)}),0)}var m=window,y=navigator;document;function g(){return d(["MSCSSMatrix"in m,"msSetImmediate"in m,"msIndexedDB"in m,"msMaxTouchPoints"in y,"msPointerEnabled"in y])>=4}var v=window,b=document;function w(e,t,n){(function(e){return e&&"function"==typeof e.setValueAtTime})(t)&&t.setValueAtTime(n,e.currentTime)}function E(t){return new e((function(e,n){t.oncomplete=function(t){return e(t.renderedBuffer)};var r=3,o=function(){switch(t.startRendering(),t.state){case"running":setTimeout((function(){return n(S("timeout"))}),1e3);break;case"suspended":b.hidden||r--,r>0?setTimeout(o,500):n(S("suspended"))}};o()}))}function O(e){for(var t=0,n=4500;n<5e3;++n)t+=Math.abs(e[n]);return t}function S(e){var t=new Error(e);return t.name=e,t}var R=document,x=["monospace","sans-serif","serif"],j=["sans-serif-thin","ARNO PRO","Agency FB","Arabic Typesetting","Arial Unicode MS","AvantGarde Bk BT","BankGothic Md BT","Batang","Bitstream Vera Sans Mono","Calibri","Century","Century Gothic","Clarendon","EUROSTILE","Franklin Gothic","Futura Bk BT","Futura Md BT","GOTHAM","Gill Sans","HELV","Haettenschweiler","Helvetica Neue","Humanst521 BT","Leelawadee","Letter Gothic","Levenim MT","Lucida Bright","Lucida Sans","Menlo","MS Mincho","MS Outlook","MS Reference Specialty","MS UI Gothic","MT Extra","MYRIAD PRO","Marlett","Meiryo UI","Microsoft Uighur","Minion Pro","Monotype Corsiva","PMingLiU","Pristina","SCRIPTINA","Segoe UI Light","Serifa","SimHei","Small Fonts","Staccato222 BT","TRAJAN PRO","Univers CE 55 Medium","Vrinda","ZWAdobeF"],_={fontStyle:"normal",fontWeight:"normal",letterSpacing:"normal",lineBreak:"auto",lineHeight:"normal",textTransform:"none",textAlign:"left",textDecoration:"none",textShadow:"none",whiteSpace:"normal",wordBreak:"normal",wordSpacing:"normal",position:"absolute",left:"-9999px",fontSize:"48px"};function k(e){return e.toDataURL()}var C=navigator,P=window;var I=navigator;var T=window;var A=window;var L=window;var N=document;var q={osCpu:function(){return navigator.oscpu},languages:function(){var e=[],t=I.language||I.userLanguage||I.browserLanguage||I.systemLanguage;if(void 0!==t&&e.push([t]),Array.isArray(I.languages))d(["webkitPersistentStorage"in y,"webkitTemporaryStorage"in y,0===y.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in m,"BatteryManager"in m,"webkitMediaStream"in m,"webkitSpeechGrammar"in m])>=5&&d([!("MediaSettingsRange"in m),"RTCEncodedAudioFrame"in m,""+m.Intl=="[object Intl]",""+m.Reflect=="[object Reflect]"])>=3||e.push(I.languages);else if("string"==typeof I.languages){var n=I.languages;n&&e.push(n.split(","))}return e},colorDepth:function(){return window.screen.colorDepth},deviceMemory:function(){return e=h(navigator.deviceMemory),t=void 0,"number"==typeof e&&isNaN(e)?t:e;var e,t},screenResolution:function(){var e=[p(T.screen.width),p(T.screen.height)];return e.sort().reverse(),e},availableScreenResolution:function(){if(A.screen.availWidth&&A.screen.availHeight){var e=[p(A.screen.availWidth),p(A.screen.availHeight)];return e.sort().reverse(),e}},hardwareConcurrency:function(){try{var e=p(navigator.hardwareConcurrency);return isNaN(e)?1:e}catch(e){return 1}},timezoneOffset:function(){var e=(new Date).getFullYear();return Math.max(h(new Date(e,0,1).getTimezoneOffset()),h(new Date(e,6,1).getTimezoneOffset()))},timezone:function(){var e;if(null===(e=L.Intl)||void 0===e?void 0:e.DateTimeFormat)return(new L.Intl.DateTimeFormat).resolvedOptions().timeZone},sessionStorage:function(){try{return!!window.sessionStorage}catch(e){return!0}},localStorage:function(){try{return!!window.localStorage}catch(e){return!0}},indexedDB:function(){if(!(g()||d(["msWriteProfilerMark"in m,"MSStream"in m,"msLaunchUri"in y,"msSaveBlob"in y])>=3&&!g()))try{return!!window.indexedDB}catch(e){return!0}},openDatabase:function(){return!!window.openDatabase},cpuClass:function(){return navigator.cpuClass},platform:function(){return navigator.platform},plugins:function(){if(g())return[];if(navigator.plugins){for(var e=[],t=0;t<navigator.plugins.length;++t){var n=navigator.plugins[t];if(n){for(var r=[],o=0;o<n.length;++o){var i=n[o];r.push({type:i.type,suffixes:i.suffixes})}e.push({name:n.name,description:n.description,mimeTypes:r})}}return e}},canvas:function(){var e=function(){var e=document.createElement("canvas");return e.width=240,e.height=140,e.style.display="inline",[e,e.getContext("2d")]}(),t=e[0],n=e[1];if(!function(e,t){return!(!t||!e.toDataURL)}(t,n))return{winding:!1,data:""};n.rect(0,0,10,10),n.rect(2,2,6,6);var r=!n.isPointInPath(5,5,"evenodd");n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",n.font="11pt no-real-font-123";var o="Cwm fjordbank 😃 gly";return n.fillText(o,2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText(o,4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),{winding:r,data:k(t)}},touchSupport:function(){var e,t=0;void 0!==C.maxTouchPoints?t=p(C.maxTouchPoints):void 0!==C.msMaxTouchPoints&&(t=C.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return{maxTouchPoints:t,touchEvent:e,touchStart:"ontouchstart"in P}},fonts:function(){var e=R.body,t=R.createElement("div"),n=R.createElement("div"),r={},o={},i=function(){var e=R.createElement("span");e.textContent="mmMwWLliI0O&1";for(var t=0,n=Object.keys(_);t<n.length;t++){var r=n[t];e.style[r]=_[r]}return e},c=function(e){return x.some((function(t,n){return e[n].offsetWidth!==r[t]||e[n].offsetHeight!==o[t]}))},a=x.map((function(e){var n=i();return n.style.fontFamily=e,t.appendChild(n),n}));e.appendChild(t);for(var u=0,s=x.length;u<s;u++)r[x[u]]=a[u].offsetWidth,o[x[u]]=a[u].offsetHeight;var l=function(){for(var e={},t=function(t){e[t]=x.map((function(e){var r=function(e,t){var n=i();return n.style.fontFamily="'"+e+"',"+t,n}(t,e);return n.appendChild(r),r}))},r=0,o=j;r<o.length;r++){t(o[r])}return e}();e.appendChild(n);for(var f=[],p=0,h=j.length;p<h;p++)c(l[j[p]])&&f.push(j[p]);return e.removeChild(n),e.removeChild(t),f},audio:function(){return Object(r.b)(this,void 0,void 0,(function(){var e,t,n,o,i,c;return Object(r.c)(this,(function(r){switch(r.label){case 0:if(!(e=v.OfflineAudioContext||v.webkitOfflineAudioContext))return[2,-2];if(d(["ApplePayError"in m,"CSSPrimitiveValue"in m,"Counter"in m,0===y.vendor.indexOf("Apple"),"getStorageUpdates"in y,"WebKitMediaKeys"in m])>=4&&!(d(["safari"in m,!("DeviceMotionEvent"in m),!("ongestureend"in m),!("standalone"in y)])>=3)&&!(d(["DOMRectList"in m,"RTCPeerConnectionIceEvent"in m,"SVGGeometryElement"in m,"ontransitioncancel"in m])>=3))return[2,-1];t=new e(1,44100,44100),(n=t.createOscillator()).type="triangle",w(t,n.frequency,1e4),o=t.createDynamicsCompressor(),w(t,o.threshold,-50),w(t,o.knee,40),w(t,o.ratio,12),w(t,o.reduction,-20),w(t,o.attack,0),w(t,o.release,.25),n.connect(o),o.connect(t.destination),n.start(0),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,E(t)];case 2:return i=r.sent(),[3,5];case 3:if("timeout"===(c=r.sent()).name||"suspended"===c.name)return[2,-3];throw c;case 4:return n.disconnect(),o.disconnect(),[7];case 5:return[2,O(i.getChannelData(0))]}}))}))},pluginsSupport:function(){return void 0!==navigator.plugins},productSub:function(){return navigator.productSub},emptyEvalLength:function(){return eval.toString().length},errorFF:function(){try{throw"a"}catch(e){try{return e.toSource(),!0}catch(e){return!1}}},vendor:function(){return navigator.vendor},chrome:function(){return void 0!==window.chrome},cookiesEnabled:function(){try{N.cookie="cookietest=1; SameSite=Strict;";var e=-1!==N.cookie.indexOf("cookietest=");return N.cookie="cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT",e}catch(e){return!1}}};function F(){return function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,i,c,a,u,s,l,f,p;return Object(r.c)(this,(function(h){switch(h.label){case 0:o=Date.now(),i={},c=0,a=Object.keys(e),h.label=1;case 1:if(!(c<a.length))return[3,7];if(u=a[c],function(e,t){for(var n=0,r=e.length;n<r;++n)if(e[n]===t)return!0;return!1}(n,u))return[3,6];s=void 0,h.label=2;case 2:return h.trys.push([2,4,,5]),p={},[4,e[u](t)];case 3:return p.value=h.sent(),s=p,[3,5];case 4:return l=h.sent(),s=l&&"object"==typeof l&&"message"in l?{error:l}:{error:{message:l}},[3,5];case 5:f=Date.now(),i[u]=Object(r.a)(Object(r.a)({},s),{duration:f-o}),o=f,h.label=6;case 6:return c++,[3,1];case 7:return[2,i]}}))}))}(q,void 0,[])}function D(e){return JSON.stringify(e,(function(e,t){return t instanceof Error?(n=t,Object(r.a)({name:n.name,message:n.message,stack:null===(o=n.stack)||void 0===o?void 0:o.split("\n")},n)):t;var n,o}),2)}function M(e){return l(function(e){for(var t="",n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o],c=i.error?"error":JSON.stringify(i.value);t+=(t?"|":"")+o.replace(/([:|\\])/g,"\\$1")+":"+c}return t}(e))}var U=function(){function e(){}return e.prototype.get=function(e){return void 0===e&&(e={}),Object(r.b)(this,void 0,void 0,(function(){var t,n;return Object(r.c)(this,(function(r){switch(r.label){case 0:return[4,F()];case 1:return t=r.sent(),n=function(e){var t;return{components:e,get visitorId(){return void 0===t&&(t=M(this.components)),t},set visitorId(e){t=e}}}(t),e.debug&&console.log("Copy the text below to get the debug data:\n\n```\nversion: 3.0.5\nuserAgent: "+navigator.userAgent+"\ngetOptions: "+JSON.stringify(e,void 0,2)+"\nvisitorId: "+n.visitorId+"\ncomponents: "+D(t)+"\n```"),[2,n]}}))}))},e}();var G={load:function(t){var n=(void 0===t?{}:t).delayFallback,o=void 0===n?50:n;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.c)(this,(function(t){switch(t.label){case 0:return[4,(n=o,r=2*o,void 0===r&&(r=1/0),new e((function(e){f.requestIdleCallback?f.requestIdleCallback((function(){return e()}),{timeout:r}):setTimeout(e,Math.min(n,r))})))];case 1:return t.sent(),[2,new U]}var n,r}))}))},hashComponents:M,componentsToDebugString:D};t.a=G}).call(this,n(23))},,,function(e,t,n){n(129);var r=n(43);e.exports=r("Array","find")},,function(e,t,n){"use strict";var r=n(40),o=n(104).find,i=n(41),c=n(42),a="find",u=!0,s=c(a);a in[]&&Array(1).find((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,