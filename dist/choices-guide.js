/*! For license information please see choices-guide.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=134)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(3),o=n.n(r),i=n(0),a=n.n(i);n(77);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,a);var c=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var s=e.config||{};return s=m(s),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,s),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),r&&s(t,r),a}(a.a.Component);function m(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=m(e[t]))})),e}},function(e,t,n){"use strict";n(14),n(0),n(6),n(97);var r=n(3),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},ideasSort:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||"random"){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":(r=r||{lat:52.37104644463586,lng:900402911007405}).coordinates&&(r.lat=r.coordinates[0],r.lng=r.coordinates[1]),t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var u=0;u<c;++u){var s=o[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(76)(e))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(23))},function(e,t,n){"use strict";n(14),n(0),n(6),n(101);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(f,e);var t,n,r,s=u(f);function f(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,f);var r=l(t=s.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:null!=o(e.value)?e.value:"",error:null},t.onChange=e.onChange,t}return t=f,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),f}(r.a);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=g(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&v(t.prototype,n),r&&v(t,r),i}(p),_=n(57),T=n(83),I=n.n(T),O=n(84),w=n.n(O),R=n(85),S=n.n(R),P=n(86),C=n.n(P);function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=M(e);if(t){var o=M(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object(_.registerPlugin)(I.a,w.a,S.a,C.a);var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(i,e);var t,n,r,o=L(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{name:"image",allowMultiple:!1,imageserver:{process:"/image",fetch:"/image"}});var n=[],r=e.value||[];return Array.isArray(r)||(r=[r]),r.forEach((function(e){var t="object"==A(e)?e.src:e;n.push({source:{url:t},options:{type:"local",file:{name:t},metadata:{poster:t}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"init",value:function(){}},{key:"updateUploadedFiles",value:function(e){e.addFile;var t=e.removeFile,n=e.next;if(this.imageuploader&&this.imageuploader.getFiles){var r=this.imageuploader.getFiles();t&&(r=r.filter((function(e){return e.serverId!=t.serverId}))),this.setState({uploadedFiles:r.map((function(e){return e.file}))},(function(){n&&n(r)}))}}},{key:"updateValue",value:function(e){var t=this,n=[],r=t.config.as&&"json"==t.config.as;e.forEach((function(e){try{var t="string"==typeof e.serverId?JSON.parse(e.serverId):e.serverId;n.push(r?{src:t.url}:t.url)}catch(e){console.log(e)}})),t.handleOnChange({name:t.config.name,value:n})}},{key:"render",value:function(){var e=this,t=this;return React.createElement(_.FilePond,{ref:function(t){return e.imageuploader=t},files:this.state.uploadedFiles,oninit:t.init,onprocessfile:function(e,n){return t.updateUploadedFiles({addFile:n,next:function(e){return t.updateValue(e)}})},onremovefile:function(e,n){return t.updateUploadedFiles({removeFile:n,next:function(e){return t.updateValue(e)}})},name:t.config.name,server:this.config.imageserver.process,allowMultiple:this.config.allowMultiple,acceptedFileTypes:["image/*"],allowFileSizeValidation:"true",allowReorder:!0,styleItemPanelAspectRatio:"1",maxFileSize:"8mb",maxFiles:"5",allowBrowse:"true",imageResizeTargetWidth:"80",imageResizeTargetHeight:"80",imageCropAspectRatio:"16:9",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"})}}])&&D(t.prototype,n),r&&D(t,r),i}(p);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t){return(q=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?B(e):t}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&q(e,t)}(i,e);var t,n,r,o=F(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(B(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&G(t.prototype,n),r&&G(t,r),i}(r.a);function W(e){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t){return(Y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Q(this,n)}}function Q(e,t){return!t||"object"!==W(t)&&"function"!=typeof t?K(e):t}function K(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Y(e,t)}(i,e);var t,n,r,o=X(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=K(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(K(t)),n.onInputFocus=n.onInputFocus.bind(K(t)),n.onInputBlur=n.onInputBlur.bind(K(t)),n.onInputKeyUp=n.onInputKeyUp.bind(K(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(z,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&H(t.prototype,n),r&&H(t,r),i}(r.a);function Z(e){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ie(e);if(t){var o=ie(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==Z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ie(e){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(i,e);var t,n,r,o=re(i);function i(){return ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&te(t.prototype,n),r&&te(t,r),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ue(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=de(e);if(t){var o=de(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var he=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(){return ue(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&se(t.prototype,n),r&&se(t,r),i}(p);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=Ee(i);function i(){return me(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e,t){var n=e.description||e.title||e.value;return React.createElement("option",{value:e.value||"",key:"".concat(n,"-").concat(e.value,"-").concat(t)},n)}))),t)}}])&&ge(t.prototype,n),r&&ge(t,r),i}(p);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function we(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Re(e,t){return(Re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Se(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ce(e);if(t){var o=Ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Re(e,t)}(i,e);var t,n,r,o=Se(i);function i(){return Oe(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&we(t.prototype,n),r&&we(t,r),i}(p);function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Me(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ke(e);if(t){var o=ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return je(this,n)}}function je(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ge=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,r,o=Me(i);function i(){return xe(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Le(t.prototype,n),r&&Le(t,r),i}(p);function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(n),!0).forEach((function(t){Be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function We(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Xe(e);if(t){var o=Xe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return He(this,n)}}function He(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?Ye(e):t}function Ye(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Qe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(i,e);var t,n,r,o=We(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ye(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.initValue||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(b,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(J,{config:Ue(Ue({},e.config),{},{inputType:"htmlarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(j,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(J,{config:Ue({inputType:"input"},e.config),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(he,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(ae,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(Te,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Ae,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(Ge,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(J,{config:Ue(Ue({},e.config),{},{inputType:"textarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;default:console.log("Form field "+e.config.inputType+"not yet implemented")}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Ve(t.prototype,n),r&&Ve(t,r),i}(r.a);function Ke(e){return(Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return(et=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function tt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ot(e);if(t){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return nt(this,n)}}function nt(e,t){return!t||"object"!==Ke(t)&&"function"!=typeof t?rt(e):t}function rt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var it=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&et(e,t)}(i,e);var t,n,r,o=tt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=rt(t=o.call(this,e,{title:null,intro:null,fields:[]})),r=e.values;return!r&&n.config.fields&&n.config.fields.length&&(r={},n.config.fields.map((function(e,t){var n=e.name||e.title.toLowerCase();r[n]=e.value}))),n.state={values:r||{}},n.handleOnChange=n.handleOnChange.bind(rt(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=this,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$e(Object(n),!0).forEach((function(t){Je(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$e(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);n[e.name]=e.value,this.setState({values:n},(function(){"function"==typeof t.props.onChange&&t.props.onChange(e)}))}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Qe,Je({config:t,initValue:t.value,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&Ze(t.prototype,n),r&&Ze(t,r),i}(r.a);function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function st(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pt(e);if(t){var o=pt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lt(this,n)}}function lt(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?ft(e):t}function ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pt(e){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var dt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(i,e);var t,n,r,o=st(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(ft(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&ct(t.prototype,n),r&&ct(t,r),i}(r.a);t.a={Form:it,FormField:Qe,Hidden:b,ImageUpload:j,InputWithCounter:J,Postcode:he,Radios:ae,Select:Te,Text:Ae,Textarea:Ge,Slider:dt}},function(e,t){e.exports=window.ReactDOM},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return v})),n.d(t,"e",(function(){return c}));var r=n(81),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,s=t,l=[],f=l,p=!1;function d(){f===l&&(f=l.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1),l=null}}}function m(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=u(s,e)}finally{p=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,m({type:i.REPLACE})}function y(){var e,t=v;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return m({type:i.INIT}),(o={dispatch:m,subscribe:v,getState:h,replaceReducer:g})[r.a]=y,o}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,c=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<c.length;i++){var s=c[i],l=n[s],f=e[s],p=l(f,t);if(void 0===p){var d=u(s,t);throw new Error(d)}o[s]=p,r=r||p!==f}return(r=r||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(n,!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=v.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){var r=n(10);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(54).Promise},function(e,t,n){"use strict";(function(e){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[Y]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[H]||!!e.constructor[H]||p(e)||d(e))}function a(e,t,n){void 0===n&&(n=!1),0===c(e)?(n?Object.keys:X)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function c(e){var t=e[Y];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:p(e)?2:d(e)?3:0}function u(e,t){return 2===c(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t){return 2===c(e)?e.get(t):e[t]}function l(e,t,n){var r=c(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function p(e){return B&&e instanceof Map}function d(e){return V&&e instanceof Set}function h(e){return e.o||e.t}function v(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Q(e);delete t[Y];for(var n=X(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function m(e,t){return void 0===t&&(t=!1),y(e)||o(e)||!i(e)||(c(e)>1&&(e.set=e.add=e.clear=e.delete=g),Object.freeze(e),t&&a(e,(function(e,t){return m(t,!0)}),!0)),e}function g(){r(2)}function y(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function E(e){var t=K[e];return t||r(18,e),t}function b(e,t){K[e]||(K[e]=t)}function _(){return F}function T(e,t){t&&(E("Patches"),e.u=[],e.s=[],e.v=t)}function I(e){O(e),e.p.forEach(R),e.p=null}function O(e){e===F&&(F=e.l)}function w(e){return F={p:[],l:F,h:e,m:!0,_:0}}function R(e){var t=e[Y];0===t.i||1===t.i?t.j():t.g=!0}function S(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||E("ES5").S(t,e,o),o?(n[Y].P&&(I(t),r(4)),i(e)&&(e=P(t,e),t.l||A(t,e)),t.u&&E("Patches").M(n[Y],e,t.u,t.s)):e=P(t,n,[]),I(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function P(e,t,n){if(y(t))return t;var r=t[Y];if(!r)return a(t,(function(o,i){return C(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return A(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=v(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return C(e,r,o,t,i,n)})),A(e,o,!1),n&&e.u&&E("Patches").R(r,n,e.u,e.s)}return r.o}function C(e,t,n,r,a,c){if(o(a)){var s=P(e,a,c&&t&&3!==t.i&&!u(t.D,r)?c.concat(r):void 0);if(l(n,r,s),!o(s))return;e.m=!1}if(i(a)&&!y(a)){if(!e.h.N&&e._<1)return;P(e,a),t&&t.A.l||A(e,a)}}function A(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&m(t,n)}function D(e,t){var n=e[Y];return(n?h(n):e)[t]}function x(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function L(e){e.P||(e.P=!0,e.l&&L(e.l))}function N(e){e.o||(e.o=v(e.t))}function M(e,t,n){var r=p(t)?E("MapSet").T(t,n):d(t)?E("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:_(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=$;n&&(o=[r],i=J);var a=Proxy.revocable(o,i),c=a.revoke,u=a.proxy;return r.k=u,r.j=c,u}(t,n):E("ES5").J(t,n);return(n?n.A:_()).p.push(r),r}function j(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[Y],o=c(t);if(r){if(!r.P&&(r.i<4||!E("ES5").K(r)))return r.t;r.I=!0,n=k(t,o),r.I=!1}else n=k(t,o);return a(n,(function(t,o){r&&s(r.t,t)===o||l(n,t,e(o))})),3===o?new Set(n):n}(e)}function k(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return v(e)}function G(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Y];return $.get(t,e)},set:function(t){var n=this[Y];$.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Y];if(!o.P)switch(o.i){case 5:r(o)&&L(o);break;case 4:n(o)&&L(o)}}}function n(e){for(var t=e.t,n=e.k,r=X(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Y){var a=t[i];if(void 0===a&&!u(t,i))return!0;var c=n[i],s=c&&c[Y];if(s?s.t!==a:!f(c,a))return!0}}var l=!!t[Y];return r.length!==X(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};b("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=Q(n);delete i[Y];for(var a=X(i),c=0;c<a.length;c++){var u=a[c];i[u]=e(u,t||!!i[u].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:_(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,Y,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[Y].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Y];if(n){var o=n.t,i=n.k,c=n.D,s=n.i;if(4===s)a(i,(function(t){t!==Y&&(void 0!==o[t]||u(o,t)?c[t]||e(i[t]):(c[t]=!0,L(n)))})),a(o,(function(e){void 0!==i[e]||u(i,e)||(c[e]=!1,L(n))}));else if(5===s){if(r(n)&&(L(n),c.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)c[l]=!1;else for(var f=o.length;f<i.length;f++)c[f]=!0;for(var p=Math.min(i.length,o.length),d=0;d<p;d++)void 0===c[d]&&e(i[d])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}n.d(t,"a",(function(){return j})),n.d(t,"c",(function(){return G})),n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return i}));var q,F,U="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),B="undefined"!=typeof Map,V="undefined"!=typeof Set,z="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=U?Symbol.for("immer-nothing"):((q={})["immer-nothing"]=!0,q),H=U?Symbol.for("immer-draftable"):"__$immer_draftable",Y=U?Symbol.for("immer-state"):"__$immer_state",X=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Q=Object.getOwnPropertyDescriptors||function(e){var t={};return X(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},K={},$={get:function(e,t){if(t===Y)return e;var n=h(e);if(!u(n,t))return function(e,t,n){var r,o=x(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===D(e.t,t)?(N(e),e.o[t]=M(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=x(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=D(h(e),t),i=null==o?void 0:o[Y];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||u(e.t,t)))return!0;N(e),L(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==D(e.t,t)||t in e.t?(e.D[t]=!1,N(e),L(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},J={};a($,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return $.deleteProperty.call(this,e[0],t)},J.set=function(e,t,n){return $.set.call(this,e[0],t,n,e[0])};var Z=new(function(){function t(e){this.O=z,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var n=t.prototype;return n.produce=function(t,n,o){if("function"==typeof t&&"function"!=typeof n){var a=n;n=t;var c=this;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return c.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var u;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),i(t)){var s=w(this),l=M(this,t,void 0),f=!0;try{u=n(l),f=!1}finally{f?I(s):O(s)}return void 0!==e&&u instanceof e?u.then((function(e){return T(s,o),S(e,s)}),(function(e){throw I(s),e})):(T(s,o),S(u,s))}if(!t||"object"!=typeof t){if((u=n(t))===W)return;return void 0===u&&(u=t),this.N&&m(u,!0),u}r(21,t)},n.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},n.createDraft=function(e){i(e)||r(8),o(e)&&(e=j(e));var t=w(this),n=M(this,e,void 0);return n[Y].C=!0,O(t),n},n.finishDraft=function(e,t){var n=(e&&e[Y]).A;return T(n,t),S(void 0,n)},n.setAutoFreeze=function(e){this.N=e},n.setUseProxies=function(e){e&&!z&&r(20),this.O=e},n.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=E("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},t}()),ee=Z.produce;Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z);t.b=ee}).call(this,n(11))},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function v(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=v(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=v(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=d(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(e,t){var n,r,o=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function b(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},m.call(y.prototype),m.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},b.error=function(){var e=new b(null,{status:0,statusText:""});return e.type="error",e};var _=[301,302,303,307,308];b.redirect=function(e,t){if(-1===_.indexOf(t))throw new RangeError("Invalid status code");return new b(null,{status:t,headers:{location:e}})};var T=self.DOMException;try{new T}catch(e){(T=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),T.prototype.constructor=T}function I(t,n){return new e((function(e,o){var i=new y(t,n);if(i.signal&&i.signal.aborted)return o(new T("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new b(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new T("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}I.polyfill=!0,self.fetch||(self.fetch=I,self.Headers=f,self.Request=y,self.Response=b)}).call(this,n(11))},function(e,t,n){var r=n(9),o=n(16),i=n(28);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9),o=n(30),i=n(17),a=n(29),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(13);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return I})),n.d(t,"c",(function(){return E}));var r=n(12),o=n(8),i=(n(26),n(80));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return(l=s()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&u(o,n.prototype),o}).apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return(f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,c(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),u(r,e)})(e)}var p="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?o.d:o.d.apply(null,arguments)};function d(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var h=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return l(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?l(r,t[0].concat(this)):l(r,t.concat(this))},r}(f(Array));function v(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new h);r&&("boolean"==typeof r?o.push(i.a):o.push(i.a.withExtraArgument(r.extraArgument)));0;return o}(e)}}function m(e){var t,n=v(),r=e||{},i=r.reducer,c=void 0===i?void 0:i,u=r.middleware,s=void 0===u?n():u,l=r.devTools,f=void 0===l||l,h=r.preloadedState,m=void 0===h?void 0:h,g=r.enhancers,y=void 0===g?void 0:g;if("function"==typeof c)t=c;else{if(!d(c))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Object(o.c)(c)}var E=o.a.apply(void 0,"function"==typeof s?s(n):s),b=o.d;f&&(b=p(a({trace:!1},"object"==typeof f&&f)));var _=[E];Array.isArray(y)?_=[E].concat(y):"function"==typeof y&&(_=y(_));var T=b.apply(void 0,_);return Object(o.e)(t,m,T)}function g(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return a({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function y(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function E(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var o=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?y(e.extraReducers):[e.extraReducers],c=i[0],u=void 0===c?{}:c,s=i[1],l=void 0===s?[]:s,f=i[2],p=void 0===f?void 0:f,d=Object.keys(o),h={},v={},m={};d.forEach((function(e){var n,r,i=o[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,h[e]=n,v[a]=n,m[e]=r?g(a,r):g(a)}));var E=function(e,t,n,o){void 0===n&&(n=[]);var i="function"==typeof t?y(t):[t,n,o],a=i[0],c=i[1],u=i[2];return function(t,n){void 0===t&&(t=e);var o=[a[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===o.filter((function(e){return!!e})).length&&(o=[u]),o.reduce((function(e,t){if(t){if(Object(r.d)(e)){var o=t(e,n);return void 0===o?e:o}if(Object(r.e)(e))return Object(r.b)(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return e}),t)}}(n,a({},u,{},v),l,p);return{name:t,reducer:E,actions:m,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var b=["name","message","stack","code"],_=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},T=function(e){if("object"==typeof e&&null!==e){var t={},n=b,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function I(t,n,r){var o=g(t+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),i=g(t+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),a=g(t+"/rejected",(function(e,t,n){var o=e instanceof _,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof _?e.payload:void 0,error:(r&&r.serializeError||T)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),c="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){0},e}();return Object.assign((function(t){return function(u,s,l){var f,p=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),d=new c,h=new e((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:f||"Aborted"})}))})),v=!1;var m=function(){try{var c,f=function(e){return m?e:(r&&!r.dispatchConditionRejection&&a.match(c)&&c.meta.condition||u(c),c)},m=!1,g=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){if(r&&r.condition&&!1===r.condition(t,{getState:s,extra:l}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return v=!0,u(i(p,t)),e.resolve(e.race([h,e.resolve(n(t,{dispatch:u,getState:s,extra:l,requestId:p,signal:d.signal,rejectWithValue:function(e){return new _(e)}})).then((function(e){return e instanceof _?a(e,p,t):o(e,p,t)}))])).then((function(e){c=e}))}),(function(e){c=a(e,p,t)}));return e.resolve(g&&g.then?g.then(f):f(g))}catch(t){return e.reject(t)}}();return Object.assign(m,{abort:function(e){v&&(f=e,d.abort())},requestId:p,arg:t})}}),{pending:i,rejected:a,fulfilled:o,typePrefix:t})}Object(r.c)()}).call(this,n(11))},function(e,t,n){var r=n(48),o=n(50);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(4),o=n(15);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r,o=n(18),i=n(96),a=Object(o.c)({name:"ideas",initialState:{ideas:[]},reducers:{setIdeas:function(e,t){e.ideas=t.payload},addIdea:function(e,t){var n=t.payload;e.ideas.push(n)},removeIdea:function(e,t){e.ideas.splice(e.ideas.findIndex((function(e){return e.id===t.payload})),1)}},extraReducers:function(e){e.addCase(i.a.fulfilled,(function(e,t){e.ideas=t.payload}))}}),c=((r=a.actions).setIdeas,r.addIdea);t.b=a.reducer},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g})),n.d(t,"Image",(function(){return g})),n.d(t,"IdeaImage",(function(){return w}));n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(103),n(3)),u=n.n(c);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=u.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images||[];return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=s(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=s(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n,a=r*i.getAspectRatioFactor(),c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(t.prototype,n),r&&p(t,r),a}(n(1).a);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=O(e);if(t){var o=O(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return I(this,n)}}function I(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(i,e);var t,n,r,o=T(i);function i(){return E(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&b(t.prototype,n),r&&b(t,r),i}(g);w.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(w,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";function r(e,t){return e===t}function o(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function i(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}n.d(t,"a",(function(){return a}));var a=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=0,c=r.pop(),u=i(r),s=e.apply(void 0,[function(){return a++,c.apply(null,arguments)}].concat(n)),l=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return s.apply(null,e)}));return l.resultFunc=c,l.dependencies=u,l.recomputations=function(){return a},l.resetRecomputations=function(){return a=0},l}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,i=null;return function(){return o(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}))},function(e,t,n){var r=n(9),o=n(58),i=n(28),a=n(19),c=n(29),u=n(7),s=n(30),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(13);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(9),o=n(10),i=n(31);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),o=n(13),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(33),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(4),o=n(20),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(35),o=n(36),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(62),o=n(33);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(65),o=n(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(19),i=n(39).indexOf,a=n(21);e.exports=function(e,t){var n,c=o(e),u=0,s=[];for(n in c)!r(a,n)&&r(c,n)&&s.push(n);for(;t.length>u;)r(c,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(19),o=n(51),i=n(67),a=function(e){return function(t,n,a){var c,u=r(t),s=o(u.length),l=i(a,s);if(e&&n!=n){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(10);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return U}));var r=n(0),o=n.n(r),i=(n(117),o.a.createContext(null));var a=function(e){e()},c={notify:function(){}};function u(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=u())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var l=function(e){var t=e.store,n=e.context,a=e.children,c=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=c.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[c,u]);var l=n||i;return o.a.createElement(l.Provider,{value:c},a)};function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var d=n(92),h=n.n(d),v=n(91),m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],y=[null,null];function E(e,t){var n=e[1];return[t.payload,n+1]}function b(e,t,n){m((function(){return e.apply(void 0,t)}),n)}function _(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function T(e,t,n,r,o,i,a,c,u,s){if(e){var l=!1,f=null,p=function(){if(!l){var e,n,p=t.getState();try{e=r(p,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||u():(i.current=e,c.current=e,a.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=p,n.trySubscribe(),p();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var I=function(){return[null,0]};function O(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,c=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,u=n.methodName,l=void 0===u?"connectAdvanced":u,d=n.renderCountProp,m=void 0===d?void 0:d,O=n.shouldHandleStateChanges,w=void 0===O||O,R=n.storeKey,S=void 0===R?"store":R,P=(n.withRef,n.forwardRef),C=void 0!==P&&P,A=n.context,D=void 0===A?i:A,x=p(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),L=D;return function(t){var n=t.displayName||t.name||"Component",i=c(n),a=f({},x,{getDisplayName:c,methodName:l,renderCountProp:m,shouldHandleStateChanges:w,storeKey:S,displayName:i,wrappedComponentName:n,WrappedComponent:t}),u=x.pure;var d=u?r.useMemo:function(e){return e()};function O(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=p(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),c=i[0],u=i[1],l=i[2],h=Object(r.useMemo)((function(){return c&&c.Consumer&&Object(v.isContextConsumer)(o.a.createElement(c.Consumer,null))?c:L}),[c,L]),m=Object(r.useContext)(h),O=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(m)&&Boolean(m.store);var R=O?n.store:m.store,S=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(R)}),[R]),P=Object(r.useMemo)((function(){if(!w)return y;var e=new s(R,O?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[R,O,m]),C=P[0],A=P[1],D=Object(r.useMemo)((function(){return O?m:f({},m,{subscription:C})}),[O,m,C]),x=Object(r.useReducer)(E,g,I),N=x[0][0],M=x[1];if(N&&N.error)throw N.error;var j=Object(r.useRef)(),k=Object(r.useRef)(l),G=Object(r.useRef)(),q=Object(r.useRef)(!1),F=d((function(){return G.current&&l===k.current?G.current:S(R.getState(),l)}),[R,N,l]);b(_,[k,j,q,l,F,G,A]),b(T,[w,R,C,S,k,j,q,G,A,M],[R,C,S]);var U=Object(r.useMemo)((function(){return o.a.createElement(t,f({},F,{ref:u}))}),[u,t,F]);return Object(r.useMemo)((function(){return w?o.a.createElement(h.Provider,{value:D},U):U}),[h,U,D])}var R=u?o.a.memo(O):O;if(R.WrappedComponent=t,R.displayName=i,C){var P=o.a.forwardRef((function(e,t){return o.a.createElement(R,f({},e,{reactReduxForwardedRef:t}))}));return P.displayName=i,P.WrappedComponent=t,h()(P,t)}return h()(R,t)}}function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function R(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!w(e[n[o]],t[n[o]]))return!1;return!0}var S=n(8);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function C(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function A(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=C(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=C(o),o=r(t,n)),o},r}}var D=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(S.b)(e,t)})):void 0}];var x=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function L(e,t,n){return f({},n,e,t)}var N=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var u=e(t,n,c);return a?o&&i(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function M(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function j(e,t,n,r,o){var i,a,c,u,s,l=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,v,m=!f(d,a),g=!l(o,i);return i=o,a=d,m&&g?(c=e(i,a),t.dependsOnOwnProps&&(u=t(r,a)),s=n(c,u,a)):m?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(u=t(r,a)),s=n(c,u,a)):g?(h=e(i,a),v=!p(h,c),c=h,v&&(s=n(c,u,a)),s):s}return function(o,l){return d?h(o,l):(c=e(i=o,a=l),u=t(r,a),s=n(c,u,a),d=!0,s)}}function k(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),u=o(e,i);return(i.pure?j:M)(a,c,u,e,i)}function G(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}function F(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?O:n,o=t.mapStateToPropsFactories,i=void 0===o?x:o,a=t.mapDispatchToPropsFactories,c=void 0===a?D:a,u=t.mergePropsFactories,s=void 0===u?N:u,l=t.selectorFactory,d=void 0===l?k:l;return function(e,t,n,o){void 0===o&&(o={});var a=o,u=a.pure,l=void 0===u||u,h=a.areStatesEqual,v=void 0===h?q:h,m=a.areOwnPropsEqual,g=void 0===m?R:m,y=a.areStatePropsEqual,E=void 0===y?R:y,b=a.areMergedPropsEqual,_=void 0===b?R:b,T=p(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),I=G(e,i,"mapStateToProps"),O=G(t,c,"mapDispatchToProps"),w=G(n,s,"mergeProps");return r(d,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:I,initMapDispatchToProps:O,initMergeProps:w,pure:l,areStatesEqual:v,areOwnPropsEqual:g,areStatePropsEqual:E,areMergedPropsEqual:_},T))}}var U=F();var B,V=n(6);B=V.unstable_batchedUpdates,a=B},function(e,t,n){var r=n(4),o=n(27).f,i=n(15),a=n(59),c=n(20),u=n(63),s=n(69);e.exports=function(e,t){var n,l,f,p,d,h=e.target,v=e.global,m=e.stat;if(n=v?r:m?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=o(n,l))&&d.value:n[l],!s(v?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,e)}}},function(e,t,n){var r=n(53),o=n(72),i=n(16),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(9),o=n(10),i=n(7),a=Object.defineProperty,c={},u=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(s&&!r)return!0;var e={length:-1};s?a(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(4),o=n(52),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}u((o=o.apply(t,n||[])).next())}))}function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;Object.create}).call(this,n(11))},function(e,t,n){var r=n(10),o=n(49),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(40),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(70);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4),o=n(35),i=n(7),a=n(36),c=n(41),u=n(71),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;e.exports=function(e){return i(s,e)||(c&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,u=function(e,t){v[i]=e,v[i+1]=t,2===(i+=2)&&(c?c(m):_())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(m,1)}}var v=new Array(1e3);function m(){for(var e=0;e<i;e+=2)(0,v[e])(v[e+1]),v[e]=void 0,v[e+1]=void 0;i=0}var g,y,E,b,_=void 0;function T(e,t){var n=arguments,r=this,o=new this.constructor(w);void 0===o[O]&&F(o);var i,a=r._state;return a?(i=n[a-1],u((function(){return G(a,o,i,r._result)}))):N(r,o,e,t),o}function I(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(w);return A(t,e),t}p?_=function(){return t.nextTick(m)}:f?(y=0,E=new f(m),b=document.createTextNode(""),E.observe(b,{characterData:!0}),_=function(){b.data=y=++y%2}):d?((g=new MessageChannel).port1.onmessage=m,_=function(){return g.port2.postMessage(0)}):_=void 0===s?function(){try{var e=n(56);return a=e.runOnLoop||e.runOnContext,function(){a(m)}}catch(e){return h()}}():h();var O=Math.random().toString(36).substring(16);function w(){}var R=void 0,S=new j;function P(e){try{return e.then}catch(e){return S.error=e,S}}function C(t,n,r){n.constructor===t.constructor&&r===T&&n.constructor.resolve===I?function(e,t){1===t._state?x(e,t._result):2===t._state?L(e,t._result):N(t,void 0,(function(t){return A(e,t)}),(function(t){return L(e,t)}))}(t,n):r===S?L(t,S.error):void 0===r?x(t,n):e(r)?function(e,t,n){u((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?A(e,n):x(e,n))}),(function(t){r||(r=!0,L(e,t))}),e._label);!r&&o&&(r=!0,L(e,o))}),e)}(t,n,r):x(t,n)}function A(e,t){var n;e===t?L(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?C(e,t,P(t)):x(e,t)}function D(e){e._onerror&&e._onerror(e._result),M(e)}function x(e,t){e._state===R&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(M,e))}function L(e,t){e._state===R&&(e._state=2,e._result=t,u(D,e))}function N(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&u(M,e)}function M(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?G(n,r,o,i):o(i);e._subscribers.length=0}}function j(){this.error=null}var k=new j;function G(t,n,r,o){var i=e(r),a=void 0,c=void 0,u=void 0,s=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return k.error=e,k}}(r,o))===k?(s=!0,c=a.error,a=null):u=!0,n===a)return void L(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,u=!0;n._state!==R||(i&&u?A(n,a):s?L(n,c):1===t?x(n,a):2===t&&L(n,a))}var q=0;function F(e){e[O]=q++,e._state=void 0,e._result=void 0,e._subscribers=[]}function U(e,t){this._instanceConstructor=e,this.promise=new e(w),this.promise[O]||F(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?x(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&x(this.promise,this._result))):L(this.promise,new Error("Array Methods must be provided an Array"))}function B(e){this[O]=q++,this._result=this._state=void 0,this._subscribers=[],w!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof B?function(e,t){try{t((function(t){A(e,t)}),(function(t){L(e,t)}))}catch(t){L(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function V(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}return U.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===R&&n<e;n++)this._eachEntry(t[n],n)},U.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===I){var o=P(e);if(o===T&&e._state!==R)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===B){var i=new n(w);C(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},U.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===R&&(this._remaining--,2===e?L(r,n):this._result[t]=n),0===this._remaining&&x(r,this._result)},U.prototype._willSettleAt=function(e,t){var n=this;N(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},B.all=function(e){return new U(this,e).promise},B.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},B.resolve=I,B.reject=function(e){var t=new this(w);return L(t,e),t},B._setScheduler=function(e){c=e},B._setAsap=function(e){u=e},B._asap=u,B.prototype={constructor:B,then:T,catch:function(e){return this.then(null,e)}},V(),B.polyfill=V,B.Promise=B,B},e.exports=o()}).call(this,n(55),n(23))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FilePond=t.FileStatus=t.registerPlugin=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r},c=n(102);t.registerPlugin=c.registerPlugin,t.FileStatus=c.FileStatus;var u=(0,c.supported)(),s=["setOptions","on","off","onOnce","appendTo","insertAfter","insertBefore","isAttachedTo","replaceElement","restoreElement","destroy"];t.FilePond=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.allowFilesSync=!0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){var e=this;if(u){var t=Object.assign({},this.props);if(t.onupdatefiles){var n=t.onupdatefiles;t.onupdatefiles=function(t){e.allowFilesSync=!1,n(t)}}this._pond=(0,c.create)(this._element,t),Object.keys(this._pond).filter((function(e){return!s.includes(e)})).forEach((function(t){e[t]=e._pond[t]}))}}},{key:"componentWillUnmount",value:function(){this._pond&&(this._pond.destroy(),this.allowFilesSync=!0)}},{key:"shouldComponentUpdate",value:function(){return!!this.allowFilesSync||(this.allowFilesSync=!0,!1)}},{key:"componentDidUpdate",value:function(){if(this._pond){var e=Object.assign({},this.props);delete e.onupdatefiles,this._pond.setOptions(e)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,r=t.name,o=t.className,a=t.allowMultiple,c=t.required,u=t.captureMethod,s=t.acceptedFileTypes;return(0,i.createElement)("div",{className:"filepond--wrapper"},(0,i.createElement)("input",{type:"file",name:r,id:n,accept:s,multiple:a,required:c,className:o,capture:u,ref:function(t){return e._element=t}}))}}]),t}(a.default.Component)},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(4),o=n(15),i=n(7),a=n(20),c=n(32),u=n(60),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var u=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:o(e,t,n)):s?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(61),c=n(4),u=n(13),s=n(15),l=n(7),f=n(34),p=n(21),d=c.WeakMap;if(a){var h=new d,v=h.get,m=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},o=function(e){return v.call(h,e)||{}},i=function(e){return m.call(h,e)}}else{var y=f("state");p[y]=!0,r=function(e,t){return s(e,y,t),t},o=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(4),o=n(32),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(64),i=n(27),a=n(16);e.exports=function(e,t){for(var n=o(t),c=a.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(e,l)||c(e,l,u(t,l))}}},function(e,t,n){var r=n(37),o=n(66),i=n(68),a=n(17);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(38),o=n(22).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(40),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(10),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==s||n!=u&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(41);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(17),i=n(73),a=n(22),c=n(21),u=n(75),s=n(31),l=n(34),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(9),o=n(16),i=n(17),a=n(74);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,u=0;c>u;)o.f(e,n=r[u++],t[n]);return e}},function(e,t,n){var r=n(38),o=n(22);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(37);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(78);var r=n(46);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(43),o=n(39).includes,i=n(44);r({target:"Array",proto:!0,forced:!n(45)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";(function(e,r){var o,i=n(95);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(23),n(108)(e))},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u})),n.d(t,"OpenstadStore",(function(){return u}));var r=n(18),o=n(8),i=Object(r.c)({name:"config",initialState:{api:{}},reducers:{}}).reducer,a=n(24),c=Object(o.c)({config:i,ideas:a.b}),u=function(e){return Object(r.a)({reducer:c,preloadedState:e})}},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){return/^image/.test(e.type)};function n(e){this.wrapped=e}function r(e){var r,o;function i(e,n){return new t((function(t,i){var c={key:e,arg:n,resolve:t,reject:i,next:null};o?o=o.next=c:(r=o=c,a(e,n))}))}function a(r,o){try{var i=e[r](o),u=i.value,s=u instanceof n;t.resolve(s?u.wrapped:u).then((function(e){s?a("next",e):c(i.done?"return":"normal",e)}),(function(e){a("throw",e)}))}catch(e){c("throw",e)}}function c(e,t){switch(e){case"return":r.resolve({value:t,done:!0});break;case"throw":r.reject(t);break;default:r.resolve({value:t,done:!1})}(r=r.next)?a(r.key,r.arg):o=null}this._invoke=i,"function"!=typeof e.return&&(this.return=void 0)}function o(e,t){return i(e)||a(e,t)||c()}function i(e){if(Array.isArray(e))return e}function a(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(r.prototype[Symbol.asyncIterator]=function(){return this}),r.prototype.next=function(e){return this._invoke("next",e)},r.prototype.throw=function(e){return this._invoke("throw",e)},r.prototype.return=function(e){return this._invoke("return",e)};var u=function(e,t){return p(e.x*t,e.y*t)},s=function(e,t){return p(e.x+t.x,e.y+t.y)},l=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y);return 0===t?{x:0,y:0}:p(e.x/t,e.y/t)},f=function(e,t,n){var r=Math.cos(t),o=Math.sin(t),i=p(e.x-n.x,e.y-n.y);return p(n.x+r*i.x-o*i.y,n.y+o*i.x+r*i.y)},p=function(){return{x:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,y:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}},d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0;return"string"==typeof e?parseFloat(e)*n:"number"==typeof e?e*(r?t[r]:Math.min(t.width,t.height)):void 0},h=function(e,t,n){var r=e.borderStyle||e.lineStyle||"solid",o=e.backgroundColor||e.fontColor||"transparent",i=e.borderColor||e.lineColor||"transparent",a=d(e.borderWidth||e.lineWidth,t,n);return{"stroke-linecap":e.lineCap||"round","stroke-linejoin":e.lineJoin||"round","stroke-width":a||0,"stroke-dasharray":"string"==typeof r?"":r.map((function(e){return d(e,t,n)})).join(","),stroke:i,fill:o,opacity:e.opacity||1}},v=function(e){return null!=e},m=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=d(e.x,t,n,"width")||d(e.left,t,n,"width"),o=d(e.y,t,n,"height")||d(e.top,t,n,"height"),i=d(e.width,t,n,"width"),a=d(e.height,t,n,"height"),c=d(e.right,t,n,"width"),u=d(e.bottom,t,n,"height");return v(o)||(o=v(a)&&v(u)?t.height-a-u:u),v(r)||(r=v(i)&&v(c)?t.width-i-c:c),v(i)||(i=v(r)&&v(c)?t.width-r-c:0),v(a)||(a=v(o)&&v(u)?t.height-o-u:0),{x:r||0,y:o||0,width:i||0,height:a||0}},g=function(e){return e.map((function(e,t){return"".concat(0===t?"M":"L"," ").concat(e.x," ").concat(e.y)})).join(" ")},y=function(e,t){return Object.keys(t).forEach((function(n){return e.setAttribute(n,t[n])}))},E="http://www.w3.org/2000/svg",b=function(e,t){var n=document.createElementNS(E,e);return t&&y(n,t),n},_=function(e){return y(e,Object.assign({},e.rect,e.styles))},T=function(e){var t=e.rect.x+.5*e.rect.width,n=e.rect.y+.5*e.rect.height,r=.5*e.rect.width,o=.5*e.rect.height;return y(e,Object.assign({cx:t,cy:n,rx:r,ry:o},e.styles))},I={contain:"xMidYMid meet",cover:"xMidYMid slice"},O=function(e,t){y(e,Object.assign({},e.rect,e.styles,{preserveAspectRatio:I[t.fit]||"none"}))},w={left:"start",center:"middle",right:"end"},R=function(e,t,n,r){var o=d(t.fontSize,n,r),i=t.fontFamily||"sans-serif",a=t.fontWeight||"normal",c=w[t.textAlign]||"start";y(e,Object.assign({},e.rect,e.styles,{"stroke-width":0,"font-weight":a,"font-size":o,"font-family":i,"text-anchor":c})),e.text!==t.text&&(e.text=t.text,e.textContent=t.text.length?t.text:" ")},S=function(e,t,n,r){y(e,Object.assign({},e.rect,e.styles,{fill:"none"}));var o=e.childNodes[0],i=e.childNodes[1],a=e.childNodes[2],c=e.rect,p={x:e.rect.x+e.rect.width,y:e.rect.y+e.rect.height};if(y(o,{x1:c.x,y1:c.y,x2:p.x,y2:p.y}),t.lineDecoration){i.style.display="none",a.style.display="none";var h=l({x:p.x-c.x,y:p.y-c.y}),v=d(.05,n,r);if(-1!==t.lineDecoration.indexOf("arrow-begin")){var m=u(h,v),g=s(c,m),E=f(c,2,g),b=f(c,-2,g);y(i,{style:"display:block;",d:"M".concat(E.x,",").concat(E.y," L").concat(c.x,",").concat(c.y," L").concat(b.x,",").concat(b.y)})}if(-1!==t.lineDecoration.indexOf("arrow-end")){var _=u(h,-v),T=s(p,_),I=f(p,2,T),O=f(p,-2,T);y(a,{style:"display:block;",d:"M".concat(I.x,",").concat(I.y," L").concat(p.x,",").concat(p.y," L").concat(O.x,",").concat(O.y)})}}},P=function(e,t,n,r){y(e,Object.assign({},e.styles,{fill:"none",d:g(t.points.map((function(e){return{x:d(e.x,n,r,"width"),y:d(e.y,n,r,"height")}})))}))},C=function(e){return function(t){return b(e,{id:t.id})}},A=function(e){var t=b("g",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round"}),n=b("line");t.appendChild(n);var r=b("path");t.appendChild(r);var o=b("path");return t.appendChild(o),t},D={image:function(e){var t=b("image",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round",opacity:"0"});return t.onload=function(){t.setAttribute("opacity",e.opacity||1)},t.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",e.src),t},rect:C("rect"),ellipse:C("ellipse"),text:C("text"),path:C("path"),line:A},x={rect:_,ellipse:T,image:O,text:R,path:P,line:S},L=function(e,t){return D[e](t)},N=function(e,t,n,r,o){"path"!==t&&(e.rect=m(n,r,o)),e.styles=h(n,r,o),x[t](e,n,r,o)},M=["x","y","left","top","right","bottom","width","height"],j=function(e){return"string"==typeof e&&/%/.test(e)?parseFloat(e)/100:e},k=function(e){var t=o(e,2),n=t[0],r=t[1],i=r.points?{}:M.reduce((function(e,t){return e[t]=j(r[t]),e}),{});return[n,Object.assign({zIndex:0},r,i)]},G=function(e,t){return e[1].zIndex>t[1].zIndex?1:e[1].zIndex<t[1].zIndex?-1:0},q=function(e){return e.utils.createView({name:"image-preview-markup",tag:"svg",ignoreRect:!0,mixins:{apis:["width","height","crop","markup","resize","dirty"]},write:function(e){var t=e.root,n=e.props;if(n.dirty){var r=n.crop,i=n.resize,a=n.markup,c=n.width,u=n.height,s=r.width,l=r.height;if(i){var f=i.size,p=f&&f.width,d=f&&f.height,h=i.mode,v=i.upscale;p&&!d&&(d=p),d&&!p&&(p=d);var m=s<p&&l<d;if(!m||m&&v){var g,y=p/s,E=d/l;"force"===h?(s=p,l=d):("cover"===h?g=Math.max(y,E):"contain"===h&&(g=Math.min(y,E)),s*=g,l*=g)}}var b={width:c,height:u};t.element.setAttribute("width",b.width),t.element.setAttribute("height",b.height);var _=Math.min(c/s,u/l);t.element.innerHTML="";var T=t.query("GET_IMAGE_PREVIEW_MARKUP_FILTER");a.filter(T).map(k).sort(G).forEach((function(e){var n=o(e,2),r=n[0],i=n[1],a=L(r,i);N(a,r,i,b,_),t.element.appendChild(a)}))}}})},F=function(e,t){return{x:e,y:t}},U=function(e,t){return e.x*t.x+e.y*t.y},B=function(e,t){return F(e.x-t.x,e.y-t.y)},V=function(e,t){return U(B(e,t),B(e,t))},z=function(e,t){return Math.sqrt(V(e,t))},W=function(e,t){var n=e,r=1.5707963267948966,o=t,i=1.5707963267948966-t,a=Math.sin(r),c=Math.sin(o),u=Math.sin(i),s=Math.cos(i),l=n/a;return F(s*(l*c),s*(l*u))},H=function(e,t){var n=e.width,r=e.height,o=W(n,t),i=W(r,t),a=F(e.x+Math.abs(o.x),e.y-Math.abs(o.y)),c=F(e.x+e.width+Math.abs(i.y),e.y+Math.abs(i.x)),u=F(e.x-Math.abs(i.y),e.y+e.height-Math.abs(i.x));return{width:z(a,c),height:z(a,u)}},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=e.height/e.width,o=1,i=t,a=1,c=r;c>i&&(a=(c=i)/r);var u=Math.max(o/a,i/c),s=e.width/(n*u*a);return{width:s,height:s*t}},X=function(e,t,n,r){var o=r.x>.5?1-r.x:r.x,i=r.y>.5?1-r.y:r.y,a=2*o*e.width,c=2*i*e.height,u=H(t,n);return Math.max(u.width/a,u.height/c)},Q=function(e,t){var n=e.width,r=n*t;return r>e.height&&(n=(r=e.height)/t),{x:.5*(e.width-n),y:.5*(e.height-r),width:n,height:r}},K=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.zoom,r=t.rotation,o=t.center,i=t.aspectRatio;i||(i=e.height/e.width);var a=Y(e,i,n),c={x:.5*a.width,y:.5*a.height},u={x:0,y:0,width:a.width,height:a.height,center:c},s=void 0===t.scaleToFit||t.scaleToFit,l=n*X(e,Q(u,i),r,s?o:{x:.5,y:.5});return{widthFloat:a.width/l,heightFloat:a.height/l,width:Math.round(a.width/l),height:Math.round(a.height/l)}},$={type:"spring",stiffness:.5,damping:.45,mass:10},J=function(e){return e.utils.createView({name:"image-bitmap",ignoreRect:!0,mixins:{styles:["scaleX","scaleY"]},create:function(e){var t=e.root,n=e.props;t.appendChild(n.image)}})},Z=function(e){return e.utils.createView({name:"image-canvas-wrapper",tag:"div",ignoreRect:!0,mixins:{apis:["crop","width","height"],styles:["originX","originY","translateX","translateY","scaleX","scaleY","rotateZ"],animations:{originX:$,originY:$,scaleX:$,scaleY:$,translateX:$,translateY:$,rotateZ:$}},create:function(t){var n=t.root,r=t.props;r.width=r.image.width,r.height=r.image.height,n.ref.bitmap=n.appendChildView(n.createChildView(J(e),{image:r.image}))},write:function(e){var t=e.root,n=e.props.crop.flip,r=t.ref.bitmap;r.scaleX=n.horizontal?-1:1,r.scaleY=n.vertical?-1:1}})},ee=function(e){return e.utils.createView({name:"image-clip",tag:"div",ignoreRect:!0,mixins:{apis:["crop","markup","resize","width","height","dirty","background"],styles:["width","height","opacity"],animations:{opacity:{type:"tween",duration:250}}},didWriteView:function(e){var t=e.root,n=e.props;n.background&&(t.element.style.backgroundColor=n.background)},create:function(t){var n=t.root,r=t.props;n.ref.image=n.appendChildView(n.createChildView(Z(e),Object.assign({},r))),n.ref.createMarkup=function(){n.ref.markup||(n.ref.markup=n.appendChildView(n.createChildView(q(e),Object.assign({},r))))},n.ref.destroyMarkup=function(){n.ref.markup&&(n.removeChildView(n.ref.markup),n.ref.markup=null)};var o=n.query("GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR");null!==o&&(n.element.dataset.transparencyIndicator="grid"===o?o:"color")},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=n.crop,i=n.markup,a=n.resize,c=n.dirty,u=n.width,s=n.height;t.ref.image.crop=o;var l={x:0,y:0,width:u,height:s,center:{x:.5*u,y:.5*s}},f={width:t.ref.image.width,height:t.ref.image.height},p={x:o.center.x*f.width,y:o.center.y*f.height},d={x:l.center.x-f.width*o.center.x,y:l.center.y-f.height*o.center.y},h=2*Math.PI+o.rotation%(2*Math.PI),v=o.aspectRatio||f.height/f.width,m=void 0===o.scaleToFit||o.scaleToFit,g=X(f,Q(l,v),h,m?o.center:{x:.5,y:.5}),y=o.zoom*g;i&&i.length?(t.ref.createMarkup(),t.ref.markup.width=u,t.ref.markup.height=s,t.ref.markup.resize=a,t.ref.markup.dirty=c,t.ref.markup.markup=i,t.ref.markup.crop=K(f,o)):t.ref.markup&&t.ref.destroyMarkup();var E=t.ref.image;if(r)return E.originX=null,E.originY=null,E.translateX=null,E.translateY=null,E.rotateZ=null,E.scaleX=null,void(E.scaleY=null);E.originX=p.x,E.originY=p.y,E.translateX=d.x,E.translateY=d.y,E.rotateZ=h,E.scaleX=y,E.scaleY=y}})},te=function(e){return e.utils.createView({name:"image-preview",tag:"div",ignoreRect:!0,mixins:{apis:["image","crop","markup","resize","dirty","background"],styles:["translateY","scaleX","scaleY","opacity"],animations:{scaleX:$,scaleY:$,translateY:$,opacity:{type:"tween",duration:400}}},create:function(t){var n=t.root,r=t.props;n.ref.clip=n.appendChildView(n.createChildView(ee(e),{id:r.id,image:r.image,crop:r.crop,markup:r.markup,resize:r.resize,dirty:r.dirty,background:r.background}))},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=t.ref.clip,i=n.image,a=n.crop,c=n.markup,u=n.resize,s=n.dirty;if(o.crop=a,o.markup=c,o.resize=u,o.dirty=s,o.opacity=r?0:1,!r&&!t.rect.element.hidden){var l=i.height/i.width,f=a.aspectRatio||l,p=t.rect.inner.width,d=t.rect.inner.height,h=t.query("GET_IMAGE_PREVIEW_HEIGHT"),v=t.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),m=t.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),g=t.query("GET_PANEL_ASPECT_RATIO"),y=t.query("GET_ALLOW_MULTIPLE");g&&!y&&(h=p*g,f=g);var E=null!==h?h:Math.max(v,Math.min(p*f,m)),b=E/f;b>p&&(E=(b=p)*f),E>d&&(E=d,b=d/f),o.width=b,o.height=E}}})},ne='<svg width="500" height="200" viewBox="0 0 500 200" preserveAspectRatio="none">\n    <defs>\n        <radialGradient id="gradient-__UID__" cx=".5" cy="1.25" r="1.15">\n            <stop offset=\'50%\' stop-color=\'#000000\'/>\n            <stop offset=\'56%\' stop-color=\'#0a0a0a\'/>\n            <stop offset=\'63%\' stop-color=\'#262626\'/>\n            <stop offset=\'69%\' stop-color=\'#4f4f4f\'/>\n            <stop offset=\'75%\' stop-color=\'#808080\'/>\n            <stop offset=\'81%\' stop-color=\'#b1b1b1\'/>\n            <stop offset=\'88%\' stop-color=\'#dadada\'/>\n            <stop offset=\'94%\' stop-color=\'#f6f6f6\'/>\n            <stop offset=\'100%\' stop-color=\'#ffffff\'/>\n        </radialGradient>\n        <mask id="mask-__UID__">\n            <rect x="0" y="0" width="500" height="200" fill="url(#gradient-__UID__)"></rect>\n        </mask>\n    </defs>\n    <rect x="0" width="500" height="200" fill="currentColor" mask="url(#mask-__UID__)"></rect>\n</svg>',re=!1,oe=0,ie=function(e){return e.utils.createView({name:"image-preview-overlay",tag:"div",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;!re&&document.querySelector("base")&&(ne=ne.replace(/url\(\#/g,"url("+window.location.href.replace(window.location.hash,"")+"#"),re=!0),oe++,t.element.classList.add("filepond--image-preview-overlay-".concat(n.status)),t.element.innerHTML=ne.replace(/__UID__/g,oe)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},ae=function(){self.onmessage=function(e){createImageBitmap(e.data.message.file).then((function(t){self.postMessage({id:e.data.id,message:t},[t])}))}},ce=function(){self.onmessage=function(e){for(var t=e.data.message.imageData,n=e.data.message.colorMatrix,r=t.data,o=r.length,i=n[0],a=n[1],c=n[2],u=n[3],s=n[4],l=n[5],f=n[6],p=n[7],d=n[8],h=n[9],v=n[10],m=n[11],g=n[12],y=n[13],E=n[14],b=n[15],_=n[16],T=n[17],I=n[18],O=n[19],w=0,R=0,S=0,P=0,C=0;w<o;w+=4)R=r[w]/255,S=r[w+1]/255,P=r[w+2]/255,C=r[w+3]/255,r[w]=Math.max(0,Math.min(255*(R*i+S*a+P*c+C*u+s),255)),r[w+1]=Math.max(0,Math.min(255*(R*l+S*f+P*p+C*d+h),255)),r[w+2]=Math.max(0,Math.min(255*(R*v+S*m+P*g+C*y+E),255)),r[w+3]=Math.max(0,Math.min(255*(R*b+S*_+P*T+C*I+O),255));self.postMessage({id:e.data.id,message:t},[t.data.buffer])}},ue=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},se={1:function(){return[1,0,0,1,0,0]},2:function(e){return[-1,0,0,1,e,0]},3:function(e,t){return[-1,0,0,-1,e,t]},4:function(e,t){return[1,0,0,-1,0,t]},5:function(){return[0,1,1,0,0,0]},6:function(e,t){return[0,1,-1,0,t,0]},7:function(e,t){return[0,-1,-1,0,t,e]},8:function(e){return[0,-1,1,0,0,e]}},le=function(e,t,n,r){-1!==r&&e.transform.apply(e,se[r](t,n))},fe=function(e,t,n,r){t=Math.round(t),n=Math.round(n);var o=document.createElement("canvas");o.width=t,o.height=n;var i=o.getContext("2d");if(r>=5&&r<=8){var a=[n,t];t=a[0],n=a[1]}return le(i,t,n,r),i.drawImage(e,0,0,t,n),o},pe=function(e){return/^image/.test(e.type)&&!/svg/.test(e.type)},de=10,he=10,ve=function(e){var t=Math.min(de/e.width,he/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,u=0,s=0,l=0,f=0;f<c;f+=4)u+=a[f]*a[f],s+=a[f+1]*a[f+1],l+=a[f+2]*a[f+2];return{r:u=me(u,c),g:s=me(s,c),b:l=me(l,c)}},me=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},ge=function(e,t){return(t=t||document.createElement("canvas")).width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0),t},ye=function(e){var t;try{t=new ImageData(e.width,e.height)}catch(n){t=document.createElement("canvas").getContext("2d").createImageData(e.width,e.height)}return t.data.set(new Uint8ClampedArray(e.data)),t},Ee=function(e){return new t((function(t,n){var r=new Image;r.crossOrigin="Anonymous",r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},be=function(e){var n=ie(e),r=te(e),o=e.utils.createWorker,i=function(e,n,r){return new t((function(t){e.ref.imageData||(e.ref.imageData=r.getContext("2d").getImageData(0,0,r.width,r.height));var i=ye(e.ref.imageData);if(!n||20!==n.length)return r.getContext("2d").putImageData(i,0,0),t();var a=o(ce);a.post({imageData:i,colorMatrix:n},(function(e){r.getContext("2d").putImageData(e,0,0),a.terminate(),t()}),[i.data.buffer])}))},a=function(e,t){e.removeChildView(t),t.image.width=1,t.image.height=1,t._destroy()},c=function(e){var t=e.root,n=t.ref.images.shift();return n.opacity=0,n.translateY=-15,t.ref.imageViewBin.push(n),n},u=function(e){var t=e.root,n=e.props,o=e.image,i=n.id,a=t.query("GET_ITEM",{id:i});if(a){var c,u,s=a.getMetadata("crop")||{center:{x:.5,y:.5},flip:{horizontal:!1,vertical:!1},zoom:1,rotation:0,aspectRatio:null},l=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),f=!1;t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(c=a.getMetadata("markup")||[],u=a.getMetadata("resize"),f=!0);var p=t.appendChildView(t.createChildView(r,{id:i,image:o,crop:s,resize:u,markup:c,dirty:f,background:l,opacity:0,scaleX:1.15,scaleY:1.15,translateY:15}),t.childViews.length);t.ref.images.push(p),p.opacity=1,p.scaleX=1,p.scaleY=1,p.translateY=0,setTimeout((function(){t.dispatch("DID_IMAGE_PREVIEW_SHOW",{id:i})}),250)}},s=function(e){var t=e.root,n=e.props,r=t.query("GET_ITEM",{id:n.id});if(r){var o=t.ref.images[t.ref.images.length-1];o.crop=r.getMetadata("crop"),o.background=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(o.dirty=!0,o.resize=r.getMetadata("resize"),o.markup=r.getMetadata("markup"))}},l=function(e){var t=e.root,n=e.props,r=e.action;if(/crop|filter|markup|resize/.test(r.change.key)&&t.ref.images.length){var o=t.query("GET_ITEM",{id:n.id});if(o)if(/filter/.test(r.change.key)){var a=t.ref.images[t.ref.images.length-1];i(t,r.change.value,a.image)}else if(/crop|markup|resize/.test(r.change.key)){var l=o.getMetadata("crop"),f=t.ref.images[t.ref.images.length-1];if(Math.abs(l.aspectRatio-f.crop.aspectRatio)>1e-5){var p=c({root:t});u({root:t,props:n,image:ge(p.image)})}else s({root:t,props:n})}}},f=function(e){var t=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);return!((t?parseInt(t[1]):null)<=58)&&"createImageBitmap"in window&&pe(e)},p=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=URL.createObjectURL(r.file);ue(o,(function(e,r){t.dispatch("DID_IMAGE_PREVIEW_CALCULATE_SIZE",{id:n,width:e,height:r})}))}},d=function(e){var t=e.root,n=e.props,r=n.id,a=t.query("GET_ITEM",r);if(a){var c=URL.createObjectURL(a.file),s=function(){Ee(c).then(l)},l=function(e){URL.revokeObjectURL(c);var r=(a.getMetadata("exif")||{}).orientation||-1,o=e.width,s=e.height;if(o&&s){if(r>=5&&r<=8){var l=[s,o];o=l[0],s=l[1]}var f=Math.max(1,.75*window.devicePixelRatio),p=t.query("GET_IMAGE_PREVIEW_ZOOM_FACTOR")*f,d=s/o,h=t.rect.element.width,v=t.rect.element.height,m=h,g=m*d;d>1?g=(m=Math.min(o,h*p))*d:m=(g=Math.min(s,v*p))/d;var y=fe(e,m,g,r),E=function(){var r=t.query("GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR")?ve(data):null;a.setMetadata("color",r,!0),"close"in e&&e.close(),t.ref.overlayShadow.opacity=1,u({root:t,props:n,image:y})},b=a.getMetadata("filter");b?i(t,b,y).then(E):E()}};if(f(a.file)){var p=o(ae);p.post({file:a.file},(function(e){p.terminate(),e?l(e):s()}))}else s()}},h=function(e){var t=e.root,n=t.ref.images[t.ref.images.length-1];n.translateY=0,n.scaleX=1,n.scaleY=1,n.opacity=1},v=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},m=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},g=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},y=function(e){var t=e.root;t.ref.images=[],t.ref.imageData=null,t.ref.imageViewBin=[],t.ref.overlayShadow=t.appendChildView(t.createChildView(n,{opacity:0,status:"idle"})),t.ref.overlaySuccess=t.appendChildView(t.createChildView(n,{opacity:0,status:"success"})),t.ref.overlayError=t.appendChildView(t.createChildView(n,{opacity:0,status:"failure"}))};return e.utils.createView({name:"image-preview-wrapper",create:y,styles:["height"],apis:["height"],destroy:function(e){e.root.ref.images.forEach((function(e){e.image.width=1,e.image.height=1}))},didWriteView:function(e){e.root.ref.images.forEach((function(e){e.dirty=!1}))},write:e.utils.createRoute({DID_IMAGE_PREVIEW_DRAW:h,DID_IMAGE_PREVIEW_CONTAINER_CREATE:p,DID_FINISH_CALCULATE_PREVIEWSIZE:d,DID_UPDATE_ITEM_METADATA:l,DID_THROW_ITEM_LOAD_ERROR:m,DID_THROW_ITEM_PROCESSING_ERROR:m,DID_THROW_ITEM_INVALID:m,DID_COMPLETE_ITEM_PROCESSING:g,DID_START_ITEM_PROCESSING:v,DID_REVERT_ITEM_PROCESSING:v},(function(e){var t=e.root,n=t.ref.imageViewBin.filter((function(e){return 0===e.opacity}));t.ref.imageViewBin=t.ref.imageViewBin.filter((function(e){return e.opacity>0})),n.forEach((function(e){return a(t,e)})),n.length=0}))})},_e=function(t){var n=t.addFilter,r=t.utils,o=r.Type,i=r.createRoute,a=r.isFile,c=be(t);return n("CREATE_VIEW",(function(t){var n=t.is,r=t.view,o=t.query;if(n("file")&&o("GET_ALLOW_IMAGE_PREVIEW")){var u=function(t){var n=t.root,i=t.props.id,u=o("GET_ITEM",i);if(u&&a(u.file)&&!u.archived){var s=u.file;if(e(s)&&o("GET_IMAGE_PREVIEW_FILTER_ITEM")(u)){var l="createImageBitmap"in(window||{}),f=o("GET_IMAGE_PREVIEW_MAX_FILE_SIZE");if(!(!l&&f&&s.size>f)){n.ref.imagePreview=r.appendChildView(r.createChildView(c,{id:i}));var p=n.query("GET_IMAGE_PREVIEW_HEIGHT");p&&n.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:u.id,height:p});var d=!l&&s.size>o("GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE");n.dispatch("DID_IMAGE_PREVIEW_CONTAINER_CREATE",{id:i},d)}}}},s=function(e,t){if(e.ref.imagePreview){var n=t.id,r=e.query("GET_ITEM",{id:n});if(r){var o=e.query("GET_PANEL_ASPECT_RATIO"),i=e.query("GET_ITEM_PANEL_ASPECT_RATIO"),a=e.query("GET_IMAGE_PREVIEW_HEIGHT");if(!(o||i||a)){var c=e.ref,u=c.imageWidth,s=c.imageHeight;if(u&&s){var l=e.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),f=e.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),p=(r.getMetadata("exif")||{}).orientation||-1;if(p>=5&&p<=8){var d=[s,u];u=d[0],s=d[1]}if(!pe(r.file)||e.query("GET_IMAGE_PREVIEW_UPSCALE")){var h=2048/u;u*=h,s*=h}var v=s/u,m=(r.getMetadata("crop")||{}).aspectRatio||v,g=Math.max(l,Math.min(s,f)),y=e.rect.element.width,E=Math.min(y*m,g);e.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:r.id,height:E})}}}}},l=function(e){e.root.ref.shouldRescale=!0},f=function(e){var t=e.root;"crop"===e.action.change.key&&(t.ref.shouldRescale=!0)},p=function(e){var t=e.root,n=e.action;t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldRescale=!0,t.ref.shouldDrawPreview=!0,t.dispatch("KICK")};r.registerWriter(i({DID_RESIZE_ROOT:l,DID_STOP_RESIZE:l,DID_LOAD_ITEM:u,DID_IMAGE_PREVIEW_CALCULATE_SIZE:p,DID_UPDATE_ITEM_METADATA:f},(function(e){var t=e.root,n=e.props;t.ref.imagePreview&&(t.rect.element.hidden||(t.ref.shouldRescale&&(s(t,n),t.ref.shouldRescale=!1),t.ref.shouldDrawPreview&&(requestAnimationFrame((function(){t.dispatch("DID_FINISH_CALCULATE_PREVIEWSIZE",{id:n.id})})),t.ref.shouldDrawPreview=!1)))})))}})),{options:{allowImagePreview:[!0,o.BOOLEAN],imagePreviewFilterItem:[function(){return!0},o.FUNCTION],imagePreviewHeight:[null,o.INT],imagePreviewMinHeight:[44,o.INT],imagePreviewMaxHeight:[256,o.INT],imagePreviewMaxFileSize:[null,o.INT],imagePreviewZoomFactor:[2,o.INT],imagePreviewUpscale:[!1,o.BOOLEAN],imagePreviewMaxInstantPreviewFileSize:[1e6,o.INT],imagePreviewTransparencyIndicator:[null,o.STRING],imagePreviewCalculateAverageImageColor:[!1,o.BOOLEAN],imagePreviewMarkupShow:[!0,o.BOOLEAN],imagePreviewMarkupFilter:[function(){return!0},o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:_e})),_e}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.isString,a=r.replaceInString,c=r.guesstimateMimeType,u=r.getExtensionFromFilename,s=r.getFilenameFromURL,l=function(e,t){return(/^[^/]+/.exec(e)||[]).pop()===t.slice(0,-2)},f=function(e,t){return e.some((function(e){return/\*$/.test(e)?l(t,e):e===t}))},p=function(e){var t="";if(i(e)){var n=s(e),r=u(n);r&&(t=c(r))}else t=e.type;return t},d=function(e,n,r){if(0===n.length)return!0;var o=p(e);return r?new t((function(t,i){r(e,o).then((function(e){f(n,e)?t():i()})).catch(i)})):f(n,o)},h=function(e){return function(t){return null!==e[t]&&(e[t]||t)}};return n("SET_ATTRIBUTE_TO_OPTION_MAP",(function(e){return Object.assign(e,{accept:"acceptedFileTypes"})})),n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;return!n("GET_ALLOW_FILE_TYPE_VALIDATION")||d(e,n("GET_ACCEPTED_FILE_TYPES"))})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(r("GET_ALLOW_FILE_TYPE_VALIDATION")){var o=r("GET_ACCEPTED_FILE_TYPES"),i=r("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),c=d(e,o,i),u=function(){var e=o.map(h(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter((function(e){return!1!==e}));n({status:{main:r("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:a(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:e.join(", "),allButLastType:e.slice(0,-1).join(", "),lastType:e[e.length-1]})}})};if("boolean"==typeof c)return c?t(e):u();c.then((function(){t(e)})).catch(u)}else t(e)}))})),{options:{allowFileTypeValidation:[!0,o.BOOLEAN],acceptedFileTypes:[[],o.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",o.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",o.STRING],fileValidateTypeLabelExpectedTypesMap:[{},o.OBJECT],fileValidateTypeDetectType:[null,o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.replaceInString,a=r.toNaturalFileSize;return n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return!0;var r=n("GET_MAX_FILE_SIZE");if(null!==r&&e.size>=r)return!1;var o=n("GET_MIN_FILE_SIZE");return!(null!==o&&e.size<=o)})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(!r("GET_ALLOW_FILE_SIZE_VALIDATION"))return t(e);var o=r("GET_FILE_VALIDATE_SIZE_FILTER");if(o&&!o(e))return t(e);var c=r("GET_MAX_FILE_SIZE");if(null!==c&&e.size>=c)n({status:{main:r("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_FILE_SIZE"),{filesize:a(c)})}});else{var u=r("GET_MIN_FILE_SIZE");if(null!==u&&e.size<=u)n({status:{main:r("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MIN_FILE_SIZE"),{filesize:a(u)})}});else{var s=r("GET_MAX_TOTAL_FILE_SIZE");if(null!==s&&r("GET_ACTIVE_ITEMS").reduce((function(e,t){return e+t.fileSize}),0)>s)return void n({status:{main:r("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_TOTAL_FILE_SIZE"),{filesize:a(s)})}});t(e)}}}))})),{options:{allowFileSizeValidation:[!0,o.BOOLEAN],maxFileSize:[null,o.INT],minFileSize:[null,o.INT],maxTotalFileSize:[null,o.INT],fileValidateSizeFilter:[null,o.FUNCTION],labelMinFileSizeExceeded:["File is too small",o.STRING],labelMinFileSize:["Minimum file size is {filesize}",o.STRING],labelMaxFileSizeExceeded:["File is too large",o.STRING],labelMaxFileSize:["Maximum file size is {filesize}",o.STRING],labelMaxTotalFileSizeExceeded:["Maximum total size exceeded",o.STRING],labelMaxTotalFileSize:["Maximum total file size is {filesize}",o.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e={type:"spring",stiffness:.5,damping:.45,mass:10},n=function(t){return t.utils.createView({name:"file-poster",tag:"div",ignoreRect:!0,create:function(e){var t=e.root;t.ref.image=document.createElement("img"),t.element.appendChild(t.ref.image)},write:t.utils.createRoute({DID_FILE_POSTER_LOAD:function(e){var t=e.root,n=e.props,r=n.id,o=t.query("GET_ITEM",{id:n.id});if(o){var i=o.getMetadata("poster");t.ref.image.src=i,t.dispatch("DID_FILE_POSTER_DRAW",{id:r})}}}),mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:e,scaleY:e,opacity:{type:"tween",duration:750}}}})},r=function(e,t){t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0)},o=function(e){return e.utils.createView({name:"file-poster-overlay",tag:"canvas",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;r(n.template,t.element)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},i=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},a=function(e){return-.5*(Math.cos(Math.PI*e)-1)},c=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:a,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:10,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,c=1-i,u=t.join(","),s=0;s<=o;s++){var l=s/o,f=i+c*l;e.addColorStop(f,"rgba(".concat(u,", ").concat(r(l)*n,")"))}},u=10,s=10,l=function(e){var t=Math.min(u/e.width,s/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,l=0,p=0,d=0,h=0;h<c;h+=4)l+=a[h]*a[h],p+=a[h+1]*a[h+1],d+=a[h+2]*a[h+2];return{r:l=f(l,c),g:p=f(p,c),b:d=f(d,c)}},f=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},p=function(e,t,n,r,o){e.width=t,e.height=n;var i=e.getContext("2d"),a=.5*t,u=i.createRadialGradient(a,n+110,n-100,a,n+110,n+100);c(u,r,o,void 0,8,.4),i.save(),i.translate(.5*-t,0),i.scale(2,1),i.fillStyle=u,i.fillRect(0,0,t,n),i.restore()},d="undefined"!=typeof navigator,h=500,v=200,m=d&&document.createElement("canvas"),g=d&&document.createElement("canvas"),y=d&&document.createElement("canvas");d&&(p(m,h,v,[40,40,40],.85),p(g,h,v,[196,78,71],1),p(y,h,v,[54,151,99],1));var E=function(e,n){return new t((function(t,r){var o=new Image;"string"==typeof crossOrigin&&(o.crossOrigin=n),o.onload=function(){t(o)},o.onerror=function(e){r(e)},o.src=e}))},b=function(e){var t=o(e),r=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=r.getMetadata("poster"),a=function(e){var o=t.query("GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR")?l(e):null;r.setMetadata("color",o,!0),t.dispatch("DID_FILE_POSTER_LOAD",{id:n,data:e})};i(o,(function(e,r){t.dispatch("DID_FILE_POSTER_CALCULATE_SIZE",{id:n,width:e,height:r}),E(o,t.query("GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE")).then(a)}))}},a=function(e){e.root.ref.overlayShadow.opacity=1},c=function(e){var t=e.root.ref.image;t.scaleX=1,t.scaleY=1,t.opacity=1},u=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},s=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},f=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},p=function(r){var o=r.root,i=r.props,a=n(e);o.ref.image=o.appendChildView(o.createChildView(a,{id:i.id,scaleX:1.25,scaleY:1.25,opacity:0})),o.ref.overlayShadow=o.appendChildView(o.createChildView(t,{template:m,opacity:0})),o.ref.overlaySuccess=o.appendChildView(o.createChildView(t,{template:y,opacity:0})),o.ref.overlayError=o.appendChildView(o.createChildView(t,{template:g,opacity:0}))};return e.utils.createView({name:"file-poster-wrapper",create:p,write:e.utils.createRoute({DID_FILE_POSTER_LOAD:a,DID_FILE_POSTER_DRAW:c,DID_FILE_POSTER_CONTAINER_CREATE:r,DID_THROW_ITEM_LOAD_ERROR:s,DID_THROW_ITEM_PROCESSING_ERROR:s,DID_THROW_ITEM_INVALID:s,DID_COMPLETE_ITEM_PROCESSING:f,DID_START_ITEM_PROCESSING:u,DID_REVERT_ITEM_PROCESSING:u})})},_=function(e){var t=e.addFilter,n=e.utils,r=n.Type,o=n.createRoute,i=b(e);return t("CREATE_VIEW",(function(e){var t=e.is,n=e.view,r=e.query;if(t("file")&&r("GET_ALLOW_FILE_POSTER")){var a=function(e){var t=e.root,n=e.props;u(t,n)},c=function(e){var t=e.root,n=e.props,r=e.action;/poster/.test(r.change.key)&&u(t,n)},u=function(e,t){var o=t.id,a=r("GET_ITEM",o);a&&a.getMetadata("poster")&&!a.archived&&r("GET_FILE_POSTER_FILTER_ITEM")(a)&&(e.ref.filePoster&&n.removeChildView(e.ref.filePoster),e.ref.filePoster=n.appendChildView(n.createChildView(i,{id:o})),e.dispatch("DID_FILE_POSTER_CONTAINER_CREATE",{id:o}))},s=function(e){var t=e.root,n=e.action;t.ref.filePoster&&(t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldUpdatePanelHeight=!0,t.dispatch("KICK"))},l=function(e){var t=e.root,n=t.query("GET_FILE_POSTER_HEIGHT");if(n)return n;var r=t.query("GET_FILE_POSTER_MIN_HEIGHT"),o=t.query("GET_FILE_POSTER_MAX_HEIGHT");if(r&&t.ref.imageHeight<r)return r;var i=t.rect.element.width*(t.ref.imageHeight/t.ref.imageWidth);return r&&i<r?r:o&&i>o?o:i};n.registerWriter(o({DID_LOAD_ITEM:a,DID_FILE_POSTER_CALCULATE_SIZE:s,DID_UPDATE_ITEM_METADATA:c},(function(e){var t=e.root,n=e.props;t.ref.filePoster&&(t.rect.element.hidden||t.ref.shouldUpdatePanelHeight&&(t.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:n.id,height:l({root:t})}),t.ref.shouldUpdatePanelHeight=!1))})))}})),{options:{allowFilePoster:[!0,r.BOOLEAN],filePosterHeight:[null,r.INT],filePosterMinHeight:[null,r.INT],filePosterMaxHeight:[null,r.INT],filePosterFilterItem:[function(){return!0},r.FUNCTION],filePosterCalculateAverageImageColor:[!1,r.BOOLEAN],filePosterCrossOriginAttributeValue:["Anonymous",r.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:_})),_}()}).call(this,n(11))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentLightbox}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentLightbox=function(_OpenStadComponent){_inherits(OpenStadComponentLightbox,_OpenStadComponent);var _super=_createSuper(OpenStadComponentLightbox);function OpenStadComponentLightbox(e){var t;return _classCallCheck(this,OpenStadComponentLightbox),(t=_super.call(this,e)).state={images:[],startIndex:0},t.recalcSizes=t.recalcSizes.bind(_assertThisInitialized(t)),t}return _createClass(OpenStadComponentLightbox,[{key:"componentDidMount",value:function(e,t){var n=this;n.showLightBoxListener=function(e){n.showLightbox(e.detail)},document.addEventListener("osc-show-light-box",n.showLightBoxListener),document.body.appendChild(this.instance)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-show-light-box",this.showLightBoxListener)}},{key:"showLightbox",value:function showLightbox(data){var self=this,aspectRatio;try{aspectRatio=eval(data.aspectRatio.replace&&data.aspectRatio.replace("x","/"))}catch(e){}"number"!=typeof aspectRatio&&(aspectRatio=16/9),self.setState({images:data.images,startIndex:data.startIndex,aspectRatio:aspectRatio},(function(){self.instance.style.display="block",self.recalcSizes()})),window.addEventListener("resize",self.recalcSizes)}},{key:"hideLightbox",value:function(){this.instance.style.display="none",window.removeEventListener("resize",this.recalcSizes)}},{key:"showImage",value:function(e,t){e.stopPropagation(),this.mainImage.src=t}},{key:"recalcSizes",value:function(){var e=this;if(e.mainContainer){var t=e.mainContainer.offsetWidth,n=e.mainContainer.offsetHeight;if(t/n>e.state.aspectRatio){var r=.8*n;e.mainImageContainer.style.height=r+"px",e.mainImageContainer.style.width=e.state.aspectRatio*r+"px",e.mainImageContainer.style.top=(n-r)/2+"px",e.mainImageContainer.style.left=(t-e.state.aspectRatio*r)/2+"px"}else{var o=t;e.mainImageContainer.style.width=o+"px",e.mainImageContainer.style.height=1/e.state.aspectRatio*o+"px",e.mainImageContainer.style.top=(n-1/e.state.aspectRatio*o)/2+"px",e.mainImageContainer.style.left=0}e.mainImage.style.width=e.mainImageContainer.style.width,e.mainImage.style.height=e.mainImageContainer.style.height;var i=e.state.aspectRatio*e.navigationContainer.offsetHeight,a=e.state.images.length*i+20*e.state.images.length;a>e.navigationContainer.offsetWidth&&(a=e.navigationContainer.offsetWidth,i=a/e.state.images.length-20),e.navigationContainer.style.width=a+"px",e.state.images.map((function(t,n){var r=parseInt(i);e["lighbox-image-container-".concat(n)].style.width=r+"px",e["lighbox-image-container-".concat(n)].style.height=parseInt(1/e.state.aspectRatio*r)+"px",e["lighbox-image-".concat(n)].style.width=e["lighbox-image-container-".concat(n)].style.width,e["lighbox-image-".concat(n)].style.height=e["lighbox-image-container-".concat(n)].style.height}))}}},{key:"getImageSrc",value:function(e){var t=e;return"object"==_typeof(e)&&e.src&&(t=e.src),t}},{key:"render",value:function(){var e=this,t=this;return React.createElement("div",{className:"osc-lightbox",onClick:function(){e.hideLightbox()},ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-close-button",onClick:function(e){return t.hideLightbox(e)}}),React.createElement("div",{className:"osc-lightbox-main-container",ref:function(e){return t.mainContainer=e}},React.createElement("div",{className:"osc-image-container",ref:function(e){return t.mainImageContainer=e}},React.createElement("img",{src:t.state.images[t.state.startIndex]&&t.getImageSrc(t.state.images[t.state.startIndex]),ref:function(e){return t.mainImage=e}}))),React.createElement("div",{className:"osc-lightbox-navigation-container"},React.createElement("div",{className:"osc-lightbox-navigation",ref:function(e){return t.navigationContainer=e}},t.state.images.map((function(e,n){return React.createElement("div",{className:"osc-image-container",style:{backgroundImage:"url(".concat(t.getImageSrc(e),")")},onClick:function(n){return t.showImage(n,t.getImageSrc(e))},key:"lighbox-image-container-".concat(n),ref:function(e){return t["lighbox-image-container-".concat(n)]=e}},React.createElement("img",{src:t.getImageSrc(e),ref:function(e){return t["lighbox-image-".concat(n)]=e}}))})))))}}]),OpenStadComponentLightbox}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},,,function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(26),o=function(e){return e.ideas},i=Object(r.a)([o],(function(e){return e}));Object(r.a)([o],(function(e){return e})),Object(r.a)([o],(function(e){return e}))},function(e,t,n){"use strict";e.exports=n(120)},function(e,t,n){"use strict";var r=n(91),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function u(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=u(t),v=u(n),m=0;m<a.length;++m){var g=a[m];if(!(i[g]||r&&r[g]||v&&v[g]||c&&c[g])){var y=p(n,g);try{s(t,g,y)}catch(e){}}}}return t}},,,function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(18),o=function(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}u((o=o.apply(t,n||[])).next())}))},i=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},a=Object(r.b)("ideas/fetchIdeas",(function(e,t){var n=t.getState;return o(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return console.log("fetch ideas async"),e=n(),[4,fetch(e.config.api+"/site/"+e.config.siteId+"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1")];case 1:return[2,t.sent().json()]}}))}))}))}).call(this,n(11))},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return _})),n.d(t,"PreviousNextButtonBlock",(function(){return _})),n.d(t,"OpenstadStore",(function(){return u.default}));n(14),n(107);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=n(42),u=(n(130),n(82)),s=n(1),l=n(90),f=n(8),p=n(24);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(i,e);var t,n,r,o=m(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{})).nextAction=t.nextAction.bind(y(t)),t}return t=i,(n=[{key:"doeIets",value:function(){this.props.addIdea({id:2,name:"one more plan",images:{heading:"https://maps.googleapis.com/maps/api/streetview?size=500x500&location=52.3779893,4.8460973&heading=151.78&key=AIzaSyAU1BrnBc0QW9PDai7hpRU2yYpoGXNDnU4"},position:{lat:52.3631163,lng:4.9038573},link:"https://google.nl",status:"ACCEPTED",theme:"Lazyness",budget:15e3})}},{key:"nextAction",value:function(e){"doeIets"==e?this.doeIets():e()}},{key:"render",value:function(){var e,t,n=this,r=this.props.previousAction||this.config.previousAction,o=this.props.previousUrl||this.config.previousUrl,i=this.props.previousIsDisabled||this.config.previousIsDisabled,a=this.props.previousLabel||this.config.previousLabel;o&&(r=function(){document.location.href="".concat(o)}),r&&(e=React.createElement("div",{className:"osc-previous-button".concat(i?" osc-disabled":""),onClick:function(e){return r(e)}},a));var c=this.props.nextAction||this.config.nextAction,u=this.props.nextUrl||this.config.nextUrl,s=this.props.nextIsDisabled||this.config.nextIsDisabled,l=this.props.nextLabel||this.config.nextLabel;return u&&(c=function(){document.location.href="".concat(u)}),c&&(t=React.createElement("div",{className:"osc-next-button".concat(s?" osc-disabled":""),onClick:function(e){return n.nextAction(c)}},l)),React.createElement("div",{className:"osc-previous-next-button-block",ref:function(e){return n.instance=e}},e,"Aantal ideeen: ",n.props.ideas.length,t)}}])&&h(t.prototype,n),r&&h(t,r),i}(s.a),_=Object(c.b)((function(e){return{ideas:Object(l.a)(e)}}),(function(e){return Object(f.b)({addIdea:p.a,fetchIdeas:p.fetchIdeas},e)}),null,{forwardRef:!0})(b);_.renderElement=function(e,t,n){var r=e.attributes;a.a.render(o.a.createElement(c.a,{store:n}," ",o.a.createElement(_,{attributes:r,config:t})," "),e)}},,,function(e,t,n){},function(e,t,n){(function(e){!function(t){"use strict";var n=function(e){return e instanceof HTMLElement},r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=Object.assign({},e),o=[],i=[],a=function(){var e=[].concat(i);i.length=0,e.forEach((function(e){var t=e.type,n=e.data;c(t,n)}))},c=function(e,t,n){!n||document.hidden?(f[e]&&f[e](t),o.push({type:e,data:t})):i.push({type:e,data:t})},u=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return l[e]?(t=l)[e].apply(t,r):null},s={getState:function(){return Object.assign({},r)},processActionQueue:function(){var e=[].concat(o);return o.length=0,e},processDispatchQueue:a,dispatch:c,query:u},l={};t.forEach((function(e){l=Object.assign({},e(r),{},l)}));var f={};return n.forEach((function(e){f=Object.assign({},e(c,u,r),{},f)})),s},o=function(e,t,n){"function"!=typeof n?Object.defineProperty(e,t,Object.assign({},n)):e[t]=n},i=function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])},a=function(e){var t={};return i(e,(function(n){o(t,n,e[n])})),t},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(null===n)return e.getAttribute(t)||e.hasAttribute(t);e.setAttribute(t,n)},u="http://www.w3.org/2000/svg",s=["svg","path"],l=function(e){return s.includes(e)},f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"==typeof t&&(n=t,t=null);var r=l(e)?document.createElementNS(u,e):document.createElement(e);return t&&(l(e)?c(r,"class",t):r.className=t),i(n,(function(e,t){c(r,e,t)})),r},p=function(e){return function(t,n){void 0!==n&&e.children[n]?e.insertBefore(t,e.children[n]):e.appendChild(t)}},d=function(e,t){return function(e,n){return void 0!==n?t.splice(n,0,e):t.push(e),e}},h=function(e,t){return function(n){return t.splice(t.indexOf(n),1),n.element.parentNode&&e.removeChild(n.element),n}},v="undefined"!=typeof window&&void 0!==window.document,m=function(){return v},g="children"in(m()?f("svg"):{})?function(e){return e.children.length}:function(e){return e.childNodes.length},y=function(e,t,n,r){var o=n[0]||e.left,i=n[1]||e.top,a=o+e.width,c=i+e.height*(r[1]||1),u={element:Object.assign({},e),inner:{left:e.left,top:e.top,right:e.right,bottom:e.bottom},outer:{left:o,top:i,right:a,bottom:c}};return t.filter((function(e){return!e.isRectIgnored()})).map((function(e){return e.rect})).forEach((function(e){E(u.inner,Object.assign({},e.inner)),E(u.outer,Object.assign({},e.outer))})),b(u.inner),u.outer.bottom+=u.element.marginBottom,u.outer.right+=u.element.marginRight,b(u.outer),u},E=function(e,t){t.top+=e.top,t.right+=e.left,t.bottom+=e.top,t.left+=e.left,t.bottom>e.bottom&&(e.bottom=t.bottom),t.right>e.right&&(e.right=t.right)},b=function(e){e.width=e.right-e.left,e.height=e.bottom-e.top},_=function(e){return"number"==typeof e},T=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.001;return Math.abs(e-t)<r&&Math.abs(n)<r},I=function(e){return e<.5?2*e*e:(4-2*e)*e-1},O={spring:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiffness,n=void 0===t?.5:t,r=e.damping,o=void 0===r?.75:r,i=e.mass,c=void 0===i?10:i,u=null,s=null,l=0,f=!1,p=a({interpolate:function(e,t){if(!f){if(!_(u)||!_(s))return f=!0,void(l=0);T(s+=l+=-(s-u)*n/c,u,l*=o)||t?(s=u,l=0,f=!0,p.onupdate(s),p.oncomplete(s)):p.onupdate(s)}},target:{set:function(e){if(_(e)&&!_(s)&&(s=e),null===u&&(u=e,s=e),s===(u=e)||void 0===u)return f=!0,l=0,p.onupdate(s),void p.oncomplete(s);f=!1},get:function(){return u}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return p},tween:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.duration,o=void 0===r?500:r,i=n.easing,c=void 0===i?I:i,u=n.delay,s=void 0===u?0:u,l=null,f=!0,p=!1,d=null,h=a({interpolate:function(n,r){f||null===d||(null===l&&(l=n),n-l<s||((e=n-l-s)>=o||r?(e=1,t=p?0:1,h.onupdate(t*d),h.oncomplete(t*d),f=!0):(t=e/o,h.onupdate((e>=0?c(p?1-t:t):0)*d))))},target:{get:function(){return p?0:d},set:function(e){if(null===d)return d=e,h.onupdate(e),void h.oncomplete(e);e<d?(d=1,p=!0):(p=!1,d=e),f=!1,l=null}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return h}},w=function(e,t,n){var r=e[t]&&"object"==typeof e[t][n]?e[t][n]:e[t]||e,o="string"==typeof r?r:r.type,i="object"==typeof r?Object.assign({},r):{};return O[o]?O[o](i):null},R=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(t=Array.isArray(t)?t:[t]).forEach((function(t){e.forEach((function(e){var o=e,i=function(){return n[e]},a=function(t){return n[e]=t};"object"==typeof e&&(o=e.key,i=e.getter||i,a=e.setter||a),t[o]&&!r||(t[o]={get:i,set:a})}))}))},S=function(e){return function(t,n){e.addEventListener(t,n)}},P=function(e){return function(t,n){e.removeEventListener(t,n)}},C=function(e){return null!=e},A={opacity:1,scaleX:1,scaleY:1,translateX:0,translateY:0,rotateX:0,rotateY:0,rotateZ:0,originX:0,originY:0},D=function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,i=e.view,a=Object.assign({},n),c={};R(t,[r,o],n);var u=function(){return[n.translateX||0,n.translateY||0]},s=function(){return[n.scaleX||0,n.scaleY||0]},l=function(){return i.rect?y(i.rect,i.childViews,u(),s()):null};return r.rect={get:l},o.rect={get:l},t.forEach((function(e){n[e]=void 0===a[e]?A[e]:a[e]})),{write:function(){if(x(c,n))return L(i.element,n),Object.assign(c,Object.assign({},n)),!0},destroy:function(){}}},x=function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!0;for(var n in t)if(t[n]!==e[n])return!0;return!1},L=function(e,t){var n=t.opacity,r=t.perspective,o=t.translateX,i=t.translateY,a=t.scaleX,c=t.scaleY,u=t.rotateX,s=t.rotateY,l=t.rotateZ,f=t.originX,p=t.originY,d=t.width,h=t.height,v="",m="";(C(f)||C(p))&&(m+="transform-origin: "+(f||0)+"px "+(p||0)+"px;"),C(r)&&(v+="perspective("+r+"px) "),(C(o)||C(i))&&(v+="translate3d("+(o||0)+"px, "+(i||0)+"px, 0) "),(C(a)||C(c))&&(v+="scale3d("+(C(a)?a:1)+", "+(C(c)?c:1)+", 1) "),C(l)&&(v+="rotateZ("+l+"rad) "),C(u)&&(v+="rotateX("+u+"rad) "),C(s)&&(v+="rotateY("+s+"rad) "),v.length&&(m+="transform:"+v+";"),C(n)&&(m+="opacity:"+n+";",0===n&&(m+="visibility:hidden;"),n<1&&(m+="pointer-events:none;")),C(h)&&(m+="height:"+h+"px;"),C(d)&&(m+="width:"+d+"px;");var g=e.elementCurrentStyle||"";m.length===g.length&&m===g||(e.style.cssText=m,e.elementCurrentStyle=m)},N={styles:D,listeners:function(e){e.mixinConfig,e.viewProps,e.viewInternalAPI;var t=e.viewExternalAPI,n=(e.viewState,e.view),r=[],o=S(n.element),i=P(n.element);return t.on=function(e,t){r.push({type:e,fn:t}),o(e,t)},t.off=function(e,t){r.splice(r.findIndex((function(n){return n.type===e&&n.fn===t})),1),i(e,t)},{write:function(){return!0},destroy:function(){r.forEach((function(e){i(e.type,e.fn)}))}}},animations:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,a=Object.assign({},n),c=[];return i(t,(function(e,t){var i=w(t);i&&(i.onupdate=function(t){n[e]=t},i.target=a[e],R([{key:e,setter:function(e){i.target!==e&&(i.target=e)},getter:function(){return n[e]}}],[r,o],n,!0),c.push(i))})),{write:function(e){var t=document.hidden,n=!0;return c.forEach((function(r){r.resting||(n=!1),r.interpolate(e,t)})),n},destroy:function(){}}},apis:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewExternalAPI;R(t,r,n)}},M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.layoutCalculated||(e.paddingTop=parseInt(n.paddingTop,10)||0,e.marginTop=parseInt(n.marginTop,10)||0,e.marginRight=parseInt(n.marginRight,10)||0,e.marginBottom=parseInt(n.marginBottom,10)||0,e.marginLeft=parseInt(n.marginLeft,10)||0,t.layoutCalculated=!0),e.left=t.offsetLeft||0,e.top=t.offsetTop||0,e.width=t.offsetWidth||0,e.height=t.offsetHeight||0,e.right=e.left+e.width,e.bottom=e.top+e.height,e.scrollTop=t.scrollTop,e.hidden=null===t.offsetParent,e},j=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.tag,n=void 0===t?"div":t,r=e.name,o=void 0===r?null:r,i=e.attributes,c=void 0===i?{}:i,u=e.read,s=void 0===u?function(){}:u,l=e.write,v=void 0===l?function(){}:l,m=e.create,E=void 0===m?function(){}:m,b=e.destroy,_=void 0===b?function(){}:b,T=e.filterFrameActionsForChild,I=void 0===T?function(e,t){return t}:T,O=e.didCreateView,w=void 0===O?function(){}:O,R=e.didWriteView,S=void 0===R?function(){}:R,P=e.ignoreRect,C=void 0!==P&&P,A=e.ignoreRectUpdate,D=void 0!==A&&A,x=e.mixins,L=void 0===x?[]:x;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=f(n,"filepond--"+o,c),i=window.getComputedStyle(r,null),u=M(),l=null,m=!1,b=[],T=[],O={},R={},P=[v],A=[s],x=[_],j=function(){return r},k=function(){return b.concat()},G=function(){return O},q=function(e){return function(t,n){return t(e,n)}},F=function(){return l||(l=y(u,b,[0,0],[1,1]))},U=function(){l=null,b.forEach((function(e){return e._read()})),!(D&&u.width&&u.height)&&M(u,r,i);var e={root:X,props:t,rect:u};A.forEach((function(t){return t(e)}))},B=function(e,n,r){var o=0===n.length;return P.forEach((function(i){!1===i({props:t,root:X,actions:n,timestamp:e,shouldOptimize:r})&&(o=!1)})),T.forEach((function(t){!1===t.write(e)&&(o=!1)})),b.filter((function(e){return!!e.element.parentNode})).forEach((function(t){t._write(e,I(t,n),r)||(o=!1)})),b.forEach((function(t,i){t.element.parentNode||(X.appendChild(t.element,i),t._read(),t._write(e,I(t,n),r),o=!1)})),m=o,S({props:t,root:X,actions:n,timestamp:e}),o},V=function(){T.forEach((function(e){return e.destroy()})),x.forEach((function(e){e({root:X,props:t})})),b.forEach((function(e){return e._destroy()}))},z={element:{get:j},style:{get:function(){return i}},childViews:{get:k}},W=Object.assign({},z,{rect:{get:F},ref:{get:G},is:function(e){return o===e},appendChild:p(r),createChildView:q(e),linkView:function(e){return b.push(e),e},unlinkView:function(e){b.splice(b.indexOf(e),1)},appendChildView:d(r,b),removeChildView:h(r,b),registerWriter:function(e){return P.push(e)},registerReader:function(e){return A.push(e)},registerDestroyer:function(e){return x.push(e)},invalidateLayout:function(){return r.layoutCalculated=!1},dispatch:e.dispatch,query:e.query}),H={element:{get:j},childViews:{get:k},rect:{get:F},resting:{get:function(){return m}},isRectIgnored:function(){return C},_read:U,_write:B,_destroy:V},Y=Object.assign({},z,{rect:{get:function(){return u}}});Object.keys(L).sort((function(e,t){return"styles"===e?1:"styles"===t?-1:0})).forEach((function(e){var n=N[e]({mixinConfig:L[e],viewProps:t,viewState:R,viewInternalAPI:W,viewExternalAPI:H,view:a(Y)});n&&T.push(n)}));var X=a(W);E({root:X,props:t});var Q=g(r);return b.forEach((function(e,t){X.appendChild(e.element,Q+t)})),w(X),a(H)}},k=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:60,r="__framePainter";if(window[r])return window[r].readers.push(e),void window[r].writers.push(t);window[r]={readers:[e],writers:[t]};var o=window[r],i=1e3/n,a=null,c=null,u=null,s=null,l=function(){document.hidden?(u=function(){return window.setTimeout((function(){return f(performance.now())}),i)},s=function(){return window.clearTimeout(c)}):(u=function(){return window.requestAnimationFrame(f)},s=function(){return window.cancelAnimationFrame(c)})};document.addEventListener("visibilitychange",(function(){s&&s(),l(),f(performance.now())}));var f=function e(t){c=u(e),a||(a=t);var n=t-a;n<=i||(a=t-n%i,o.readers.forEach((function(e){return e()})),o.writers.forEach((function(e){return e(t)})))};return l(),f(performance.now()),{pause:function(){s(c)}}},G=function(e,t){return function(n){var r=n.root,o=n.props,i=n.actions,a=void 0===i?[]:i,c=n.timestamp,u=n.shouldOptimize;a.filter((function(t){return e[t.type]})).forEach((function(t){return e[t.type]({root:r,props:o,action:t.data,timestamp:c,shouldOptimize:u})})),t&&t({root:r,props:o,actions:a,timestamp:c,shouldOptimize:u})}},q=function(e,t){return t.parentNode.insertBefore(e,t)},F=function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},U=function(e){return Array.isArray(e)},B=function(e){return null==e},V=function(e){return e.trim()},z=function(e){return""+e},W=function(e){return"boolean"==typeof e},H=function(e){return W(e)?e:"true"===e},Y=function(e){return"string"==typeof e},X=function(e){return _(e)?e:Y(e)?z(e).replace(/[a-z]+/gi,""):0},Q=function(e){return parseInt(X(e),10)},K=function(e){return parseFloat(X(e))},$=function(e){return _(e)&&isFinite(e)&&Math.floor(e)===e},J=function(e){if($(e))return e;var t=z(e).trim();return/MB$/i.test(t)?(t=t.replace(/MB$i/,"").trim(),1e3*Q(t)*1e3):/KB/i.test(t)?(t=t.replace(/KB$i/,"").trim(),1e3*Q(t)):Q(t)},Z=function(e){return"function"==typeof e},ee=function(e){for(var t=self,n=e.split("."),r=null;r=n.shift();)if(!(t=t[r]))return null;return t},te={process:"POST",patch:"PATCH",revert:"DELETE",fetch:"GET",restore:"GET",load:"GET"},ne=function(e){var t={};return t.url=Y(e)?e:e.url||"",t.timeout=e.timeout?parseInt(e.timeout,10):0,t.headers=e.headers?e.headers:{},i(te,(function(n){t[n]=re(n,e[n],te[n],t.timeout,t.headers)})),t.remove=e.remove||null,delete t.headers,t},re=function(e,t,n,r,o){if(null===t)return null;if("function"==typeof t)return t;var i={url:"GET"===n||"PATCH"===n?"?"+e+"=":"",method:n,headers:o,withCredentials:!1,timeout:r,onload:null,ondata:null,onerror:null};if(Y(t))return i.url=t,i;if(Object.assign(i,t),Y(i.headers)){var a=i.headers.split(/:(.+)/);i.headers={header:a[0],value:a[1]}}return i.withCredentials=H(i.withCredentials),i},oe=function(e){return null===e},ie=function(e){return"object"==typeof e&&null!==e},ae=function(e){return ie(e)&&Y(e.url)&&ie(e.process)&&ie(e.revert)&&ie(e.restore)&&ie(e.fetch)},ce=function(e){return U(e)?"array":oe(e)?"null":$(e)?"int":/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e)?"bytes":ae(e)?"api":typeof e},ue=function(e){return e.replace(/{\s*'/g,'{"').replace(/'\s*}/g,'"}').replace(/'\s*:/g,'":').replace(/:\s*'/g,':"').replace(/,\s*'/g,',"').replace(/'\s*,/g,'",')},se={array:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return B(e)?[]:U(e)?e:z(e).split(t).map(V).filter((function(e){return e.length}))},boolean:H,int:function(e){return"bytes"===ce(e)?J(e):Q(e)},number:K,float:K,bytes:J,string:function(e){return Z(e)?e:z(e)},function:function(e){return ee(e)},serverapi:function(e){return ne(e)},object:function(e){try{return JSON.parse(ue(e))}catch(e){return null}}},le=function(e,t){return se[t](e)},fe=function(e,t,n){if(e===t)return e;var r=ce(e);if(r!==n){var o=le(e,n);if(r=ce(o),null===o)throw'Trying to assign value with incorrect type to "'+option+'", allowed type: "'+n+'"';e=o}return e},pe=function(e,t){var n=e;return{enumerable:!0,get:function(){return n},set:function(r){n=fe(r,e,t)}}},de=function(e){var t={};return i(e,(function(n){var r=e[n];t[n]=pe(r[0],r[1])})),a(t)},he=function(e){return{items:[],listUpdateTimeout:null,itemUpdateTimeout:null,processingQueue:[],options:de(e)}},ve=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.split(/(?=[A-Z])/).map((function(e){return e.toLowerCase()})).join(t)},me=function(e,t){var n={};return i(t,(function(t){n[t]={get:function(){return e.getState().options[t]},set:function(n){e.dispatch("SET_"+ve(t,"_").toUpperCase(),{value:n})}}})),n},ge=function(e){return function(t,n,r){var o={};return i(e,(function(e){var n=ve(e,"_").toUpperCase();o["SET_"+n]=function(o){try{r.options[e]=o.value}catch(e){}t("DID_SET_"+n,{value:r.options[e]})}})),o}},ye=function(e){return function(t){var n={};return i(e,(function(e){n["GET_"+ve(e,"_").toUpperCase()]=function(n){return t.options[e]}})),n}},Ee={API:1,DROP:2,BROWSE:3,PASTE:4,NONE:5},be=function(){return Math.random().toString(36).substr(2,9)};function _e(e){this.wrapped=e}function Te(t){var n,r;function o(t,o){return new e((function(e,a){var c={key:t,arg:o,resolve:e,reject:a,next:null};r?r=r.next=c:(n=r=c,i(t,o))}))}function i(n,r){try{var o=t[n](r),c=o.value,u=c instanceof _e;e.resolve(u?c.wrapped:c).then((function(e){u?i("next",e):a(o.done?"return":"normal",e)}),(function(e){i("throw",e)}))}catch(e){a("throw",e)}}function a(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=o,"function"!=typeof t.return&&(this.return=void 0)}function Ie(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Oe(e,t){if(null==e)return{};var n,r,o=Ie(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function we(e){return Re(e)||Se(e)||Pe()}function Re(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function Se(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function Pe(){throw new TypeError("Invalid attempt to spread non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(Te.prototype[Symbol.asyncIterator]=function(){return this}),Te.prototype.next=function(e){return this._invoke("next",e)},Te.prototype.throw=function(e){return this._invoke("throw",e)},Te.prototype.return=function(e){return this._invoke("return",e)};var Ce=function(e,t){return e.splice(t,1)},Ae=function(t,n){n?t():document.hidden?e.resolve(1).then(t):setTimeout(t,0)},De=function(){var e=[],t=function(t,n){Ce(e,e.findIndex((function(e){return e.event===t&&(e.cb===n||!n)})))},n=function(t,n,r){e.filter((function(e){return e.event===t})).map((function(e){return e.cb})).forEach((function(e){return Ae((function(){return e.apply(void 0,we(n))}),r)}))};return{fireSync:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!0)},fire:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!1)},on:function(t,n){e.push({event:t,cb:n})},onOnce:function(n,r){e.push({event:n,cb:function(){t(n,r),r.apply(void 0,arguments)}})},off:t}},xe=function(e,t,n){Object.getOwnPropertyNames(e).filter((function(e){return!n.includes(e)})).forEach((function(n){return Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))},Le=["fire","process","revert","load","on","off","onOnce","retryLoad","extend","archive","archived","release","released","requestProcessing","freeze"],Ne=function(e){var t={};return xe(e,t,Le),t},Me=function(e){e.forEach((function(t,n){t.released&&Ce(e,n)}))},je={INIT:1,IDLE:2,PROCESSING_QUEUED:9,PROCESSING:3,PROCESSING_COMPLETE:5,PROCESSING_ERROR:6,PROCESSING_REVERT_ERROR:10,LOADING:7,LOAD_ERROR:8},ke={INPUT:1,LIMBO:2,LOCAL:3},Ge=function(e){return/[^0-9]+/.exec(e)},qe=function(){return Ge(1.1.toLocaleString())[0]},Fe=function(){var e=qe(),t=1e3.toLocaleString();return t!==1e3.toString()?Ge(t)[0]:"."===e?",":"."},Ue={BOOLEAN:"boolean",INT:"int",NUMBER:"number",STRING:"string",ARRAY:"array",OBJECT:"object",FUNCTION:"function",ACTION:"action",SERVER_API:"serverapi",REGEX:"regex"},Be=[],Ve=function(t,n,r){return new e((function(e,o){var i=Be.filter((function(e){return e.key===t})).map((function(e){return e.cb}));if(0!==i.length){var a=i.shift();i.reduce((function(e,t){return e.then((function(e){return t(e,r)}))}),a(n,r)).then((function(t){return e(t)})).catch((function(e){return o(e)}))}else e(n)}))},ze=function(e,t,n){return Be.filter((function(t){return t.key===e})).map((function(e){return e.cb(t,n)}))},We=function(e,t){return Be.push({key:e,cb:t})},He=function(e){return Object.assign(Qe,e)},Ye=function(){return Object.assign({},Qe)},Xe=function(e){i(e,(function(e,t){Qe[e]&&(Qe[e][0]=fe(t,Qe[e][0],Qe[e][1]))}))},Qe={id:[null,Ue.STRING],name:["filepond",Ue.STRING],disabled:[!1,Ue.BOOLEAN],className:[null,Ue.STRING],required:[!1,Ue.BOOLEAN],captureMethod:[null,Ue.STRING],allowSyncAcceptAttribute:[!0,Ue.BOOLEAN],allowDrop:[!0,Ue.BOOLEAN],allowBrowse:[!0,Ue.BOOLEAN],allowPaste:[!0,Ue.BOOLEAN],allowMultiple:[!1,Ue.BOOLEAN],allowReplace:[!0,Ue.BOOLEAN],allowRevert:[!0,Ue.BOOLEAN],allowRemove:[!0,Ue.BOOLEAN],allowProcess:[!0,Ue.BOOLEAN],allowReorder:[!1,Ue.BOOLEAN],allowDirectoriesOnly:[!1,Ue.BOOLEAN],forceRevert:[!1,Ue.BOOLEAN],maxFiles:[null,Ue.INT],checkValidity:[!1,Ue.BOOLEAN],itemInsertLocationFreedom:[!0,Ue.BOOLEAN],itemInsertLocation:["before",Ue.STRING],itemInsertInterval:[75,Ue.INT],dropOnPage:[!1,Ue.BOOLEAN],dropOnElement:[!0,Ue.BOOLEAN],dropValidation:[!1,Ue.BOOLEAN],ignoredFiles:[[".ds_store","thumbs.db","desktop.ini"],Ue.ARRAY],instantUpload:[!0,Ue.BOOLEAN],maxParallelUploads:[2,Ue.INT],chunkUploads:[!1,Ue.BOOLEAN],chunkForce:[!1,Ue.BOOLEAN],chunkSize:[5e6,Ue.INT],chunkRetryDelays:[[500,1e3,3e3],Ue.Array],server:[null,Ue.SERVER_API],labelDecimalSeparator:[qe(),Ue.STRING],labelThousandsSeparator:[Fe(),Ue.STRING],labelIdle:['Drag & Drop your files or <span class="filepond--label-action">Browse</span>',Ue.STRING],labelInvalidField:["Field contains invalid files",Ue.STRING],labelFileWaitingForSize:["Waiting for size",Ue.STRING],labelFileSizeNotAvailable:["Size not available",Ue.STRING],labelFileCountSingular:["file in list",Ue.STRING],labelFileCountPlural:["files in list",Ue.STRING],labelFileLoading:["Loading",Ue.STRING],labelFileAdded:["Added",Ue.STRING],labelFileLoadError:["Error during load",Ue.STRING],labelFileRemoved:["Removed",Ue.STRING],labelFileRemoveError:["Error during remove",Ue.STRING],labelFileProcessing:["Uploading",Ue.STRING],labelFileProcessingComplete:["Upload complete",Ue.STRING],labelFileProcessingAborted:["Upload cancelled",Ue.STRING],labelFileProcessingError:["Error during upload",Ue.STRING],labelFileProcessingRevertError:["Error during revert",Ue.STRING],labelTapToCancel:["tap to cancel",Ue.STRING],labelTapToRetry:["tap to retry",Ue.STRING],labelTapToUndo:["tap to undo",Ue.STRING],labelButtonRemoveItem:["Remove",Ue.STRING],labelButtonAbortItemLoad:["Abort",Ue.STRING],labelButtonRetryItemLoad:["Retry",Ue.STRING],labelButtonAbortItemProcessing:["Cancel",Ue.STRING],labelButtonUndoItemProcessing:["Undo",Ue.STRING],labelButtonRetryItemProcessing:["Retry",Ue.STRING],labelButtonProcessItem:["Upload",Ue.STRING],iconRemove:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconProcess:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z" fill="currentColor" fill-rule="evenodd"/></svg>',Ue.STRING],iconRetry:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconUndo:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconDone:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],oninit:[null,Ue.FUNCTION],onwarning:[null,Ue.FUNCTION],onerror:[null,Ue.FUNCTION],onactivatefile:[null,Ue.FUNCTION],oninitfile:[null,Ue.FUNCTION],onaddfilestart:[null,Ue.FUNCTION],onaddfileprogress:[null,Ue.FUNCTION],onaddfile:[null,Ue.FUNCTION],onprocessfilestart:[null,Ue.FUNCTION],onprocessfileprogress:[null,Ue.FUNCTION],onprocessfileabort:[null,Ue.FUNCTION],onprocessfilerevert:[null,Ue.FUNCTION],onprocessfile:[null,Ue.FUNCTION],onprocessfiles:[null,Ue.FUNCTION],onremovefile:[null,Ue.FUNCTION],onpreparefile:[null,Ue.FUNCTION],onupdatefiles:[null,Ue.FUNCTION],onreorderfiles:[null,Ue.FUNCTION],beforeDropFile:[null,Ue.FUNCTION],beforeAddFile:[null,Ue.FUNCTION],beforeRemoveFile:[null,Ue.FUNCTION],stylePanelLayout:[null,Ue.STRING],stylePanelAspectRatio:[null,Ue.STRING],styleItemPanelAspectRatio:[null,Ue.STRING],styleButtonRemoveItemPosition:["left",Ue.STRING],styleButtonProcessItemPosition:["right",Ue.STRING],styleLoadIndicatorPosition:["right",Ue.STRING],styleProgressIndicatorPosition:["right",Ue.STRING],styleButtonRemoveItemAlign:[!1,Ue.BOOLEAN],files:[[],Ue.ARRAY]},Ke=function(e,t){return B(t)?e[0]||null:$(t)?e[t]||null:("object"==typeof t&&(t=t.id),e.find((function(e){return e.id===t}))||null)},$e=function(e){if(B(e))return e;if(/:/.test(e)){var t=e.split(":");return t[1]/t[0]}return parseFloat(e)},Je=function(e){return e.filter((function(e){return!e.archived}))},Ze={EMPTY:0,IDLE:1,ERROR:2,BUSY:3,READY:4},et=[je.LOAD_ERROR,je.PROCESSING_ERROR,je.PROCESSING_REVERT_ERROR],tt=[je.LOADING,je.PROCESSING,je.PROCESSING_QUEUED,je.INIT],nt=[je.PROCESSING_COMPLETE],rt=function(e){return et.includes(e.status)},ot=function(e){return tt.includes(e.status)},it=function(e){return nt.includes(e.status)},at=function(e){return{GET_STATUS:function(){var t=Je(e.items),n=Ze.EMPTY,r=Ze.ERROR,o=Ze.BUSY,i=Ze.IDLE,a=Ze.READY;return 0===t.length?n:t.some(rt)?r:t.some(ot)?o:t.some(it)?a:i},GET_ITEM:function(t){return Ke(e.items,t)},GET_ACTIVE_ITEM:function(t){return Ke(Je(e.items),t)},GET_ACTIVE_ITEMS:function(){return Je(e.items)},GET_ITEMS:function(){return e.items},GET_ITEM_NAME:function(t){var n=Ke(e.items,t);return n?n.filename:null},GET_ITEM_SIZE:function(t){var n=Ke(e.items,t);return n?n.fileSize:null},GET_STYLES:function(){return Object.keys(e.options).filter((function(e){return/^style/.test(e)})).map((function(t){return{name:t,value:e.options[t]}}))},GET_PANEL_ASPECT_RATIO:function(){return/circle/.test(e.options.stylePanelLayout)?1:$e(e.options.stylePanelAspectRatio)},GET_ITEM_PANEL_ASPECT_RATIO:function(){return e.options.styleItemPanelAspectRatio},GET_ITEMS_BY_STATUS:function(t){return Je(e.items).filter((function(e){return e.status===t}))},GET_TOTAL_ITEMS:function(){return Je(e.items).length},IS_ASYNC:function(){return ie(e.options.server)&&(ie(e.options.server.process)||Z(e.options.server.process))}}},ct=function(e){var t=Je(e.items).length;if(!e.options.allowMultiple)return 0===t;var n=e.options.maxFiles;return null===n||t<n},ut=function(e,t,n){return Math.max(Math.min(n,e),t)},st=function(e,t,n){return e.splice(t,0,n)},lt=function(e,t,n){return B(t)?null:void 0===n?(e.push(t),t):(n=ut(n,0,e.length),st(e,n,t),t)},ft=function(e){return/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i.test(e)},pt=function(e){return e.split("/").pop().split("?").shift()},dt=function(e){return e.split(".").pop()},ht=function(e){if("string"!=typeof e)return"";var t=e.split("/").pop();return/svg/.test(t)?"svg":/zip|compressed/.test(t)?"zip":/plain/.test(t)?"txt":/msword/.test(t)?"doc":/[a-z]+/.test(t)?"jpeg"===t?"jpg":t:""},vt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(t+e).slice(-t.length)},mt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return e.getFullYear()+"-"+vt(e.getMonth()+1,"00")+"-"+vt(e.getDate(),"00")+"_"+vt(e.getHours(),"00")+"-"+vt(e.getMinutes(),"00")+"-"+vt(e.getSeconds(),"00")},gt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="string"==typeof n?e.slice(0,e.size,n):e.slice(0,e.size,e.type);return o.lastModifiedDate=new Date,e._relativePath&&(o._relativePath=e._relativePath),Y(t)||(t=mt()),t&&null===r&&dt(t)?o.name=t:(r=r||ht(o.type),o.name=t+(r?"."+r:"")),o},yt=function(){return window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder},Et=function(e,t){var n=yt();if(n){var r=new n;return r.append(e),r.getBlob(t)}return new Blob([e],{type:t})},bt=function(e,t){for(var n=new ArrayBuffer(e.length),r=new Uint8Array(n),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);return Et(n,t)},_t=function(e){return(/^data:(.+);/.exec(e)||[])[1]||null},Tt=function(e){return e.split(",")[1].replace(/\s/g,"")},It=function(e){return atob(Tt(e))},Ot=function(e){var t=_t(e),n=It(e);return bt(n,t)},wt=function(e,t,n){return gt(Ot(e),t,null,n)},Rt=function(e){if(!/^content-disposition:/i.test(e))return null;var t=e.split(/filename=|filename\*=.+''/).splice(1).map((function(e){return e.trim().replace(/^["']|[;"']{0,2}$/g,"")})).filter((function(e){return e.length}));return t.length?decodeURI(t[t.length-1]):null},St=function(e){if(/content-length:/i.test(e)){var t=e.match(/[0-9]+/)[0];return t?parseInt(t,10):null}return null},Pt=function(e){return/x-content-transfer-id:/i.test(e)&&(e.split(":")[1]||"").trim()||null},Ct=function(e){var t={source:null,name:null,size:null},n=e.split("\n"),r=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var u=a.value,s=Rt(u);if(s)t.name=s;else{var l=St(u);if(l)t.size=l;else{var f=Pt(u);f&&(t.source=f)}}}}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t},At=function(e){var t={source:null,complete:!1,progress:0,size:null,timestamp:null,duration:0,request:null},n=function(){return t.progress},r=function(){t.request&&t.request.abort&&t.request.abort()},o=function(){var e=t.source;a.fire("init",e),e instanceof File?a.fire("load",e):e instanceof Blob?a.fire("load",gt(e,e.name)):ft(e)?a.fire("load",wt(e)):i(e)},i=function(n){e?(t.timestamp=Date.now(),t.request=e(n,(function(e){t.duration=Date.now()-t.timestamp,t.complete=!0,e instanceof Blob&&(e=gt(e,e.name||pt(n))),a.fire("load",e instanceof Blob?e:e?e.body:null)}),(function(e){a.fire("error","string"==typeof e?{type:"error",code:0,body:e}:e)}),(function(e,n,r){r&&(t.size=r),t.duration=Date.now()-t.timestamp,e?(t.progress=n/r,a.fire("progress",t.progress)):t.progress=null}),(function(){a.fire("abort")}),(function(e){var n=Ct("string"==typeof e?e:e.headers);a.fire("meta",{size:t.size||n.size,filename:n.name,source:n.source})}))):a.fire("error",{type:"error",body:"Can't load URL",code:400})},a=Object.assign({},De(),{setSource:function(e){return t.source=e},getProgress:n,abort:r,load:o});return a},Dt=function(e){return/GET|HEAD/.test(e)},xt=function(e,t,n){var r={onheaders:function(){},onprogress:function(){},onload:function(){},ontimeout:function(){},onerror:function(){},onabort:function(){},abort:function(){o=!0,a.abort()}},o=!1,i=!1;n=Object.assign({method:"POST",headers:{},withCredentials:!1},n),t=encodeURI(t),Dt(n.method)&&e&&(t=""+t+encodeURIComponent("string"==typeof e?e:JSON.stringify(e)));var a=new XMLHttpRequest;return(Dt(n.method)?a:a.upload).onprogress=function(e){o||r.onprogress(e.lengthComputable,e.loaded,e.total)},a.onreadystatechange=function(){a.readyState<2||4===a.readyState&&0===a.status||i||(i=!0,r.onheaders(a))},a.onload=function(){a.status>=200&&a.status<300?r.onload(a):r.onerror(a)},a.onerror=function(){return r.onerror(a)},a.onabort=function(){o=!0,r.onabort()},a.ontimeout=function(){return r.ontimeout(a)},a.open(n.method,t,!0),$(n.timeout)&&(a.timeout=n.timeout),Object.keys(n.headers).forEach((function(e){var t=unescape(encodeURIComponent(n.headers[e]));a.setRequestHeader(e,t)})),n.responseType&&(a.responseType=n.responseType),n.withCredentials&&(a.withCredentials=!0),a.send(e),r},Lt=function(e,t,n,r){return{type:e,code:t,body:n,headers:r}},Nt=function(e){return function(t){e(Lt("error",0,"Timeout",t.getAllResponseHeaders()))}},Mt=function(e){return/\?/.test(e)},jt=function(){for(var e="",t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e+=Mt(e)&&Mt(t)?t.replace(/\?/,"&"):t})),e},kt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return null;var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a,c,u,s){var l=xt(o,jt(e,t.url),Object.assign({},t,{responseType:"blob"}));return l.onload=function(e){var r=e.getAllResponseHeaders(),a=Ct(r).name||pt(o);i(Lt("load",e.status,"HEAD"===t.method?null:gt(n(e.response),a),r))},l.onerror=function(e){a(Lt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},l.onheaders=function(e){s(Lt("headers",e.status,null,e.getAllResponseHeaders()))},l.ontimeout=Nt(a),l.onprogress=c,l.onabort=u,l}},Gt={QUEUED:0,COMPLETE:1,PROCESSING:2,ERROR:3,WAITING:4},qt=function(e,t,n,r,o,i,a,c,u,s,l){for(var f=[],p=l.chunkTransferId,d=l.chunkServer,h=l.chunkSize,v=l.chunkRetryDelays,m={serverId:p,aborted:!1},g=t.ondata||function(e){return e},y=t.onload||function(e,t){return"HEAD"===t?e.getResponseHeader("Upload-Offset"):e.response},E=t.onerror||function(e){return null},b=function(i){var c=new FormData;ie(o)&&c.append(n,JSON.stringify(o));var u="function"==typeof t.headers?t.headers(r,o):Object.assign({},t.headers,{"Upload-Length":r.size}),s=Object.assign({},t,{headers:u}),l=xt(g(c),jt(e,t.url),s);l.onload=function(e){return i(y(e,s.method))},l.onerror=function(e){return a(Lt("error",e.status,E(e.response)||e.statusText,e.getAllResponseHeaders()))},l.ontimeout=Nt(a)},_=function(n){var r=jt(e,d.url,m.serverId),o={headers:"function"==typeof t.headers?t.headers(m.serverId):Object.assign({},t.headers),method:"HEAD"},i=xt(null,r,o);i.onload=function(e){return n(y(e,o.method))},i.onerror=function(e){return a(Lt("error",e.status,E(e.response)||e.statusText,e.getAllResponseHeaders()))},i.ontimeout=Nt(a)},T=Math.floor(r.size/h),I=0;I<=T;I++){var O=I*h,w=r.slice(O,O+h,"application/offset+octet-stream");f[I]={index:I,size:w.size,offset:O,data:w,file:r,progress:0,retries:we(v),status:Gt.QUEUED,error:null,request:null,timeout:null}}var R=function(){return i(m.serverId)},S=function(e){return e.status===Gt.QUEUED||e.status===Gt.ERROR},P=function(t){if(!m.aborted)if(t=t||f.find(S)){t.status=Gt.PROCESSING,t.progress=null;var n=d.ondata||function(e){return e},o=d.onerror||function(e){return null},i=jt(e,d.url,m.serverId),c="function"==typeof d.headers?d.headers(t):Object.assign({},d.headers,{"Content-Type":"application/offset+octet-stream","Upload-Offset":t.offset,"Upload-Length":r.size,"Upload-Name":r.name}),s=t.request=xt(n(t.data),i,Object.assign({},d,{headers:c}));s.onload=function(){t.status=Gt.COMPLETE,t.request=null,D()},s.onprogress=function(e,n,r){t.progress=e?n:null,A()},s.onerror=function(e){t.status=Gt.ERROR,t.request=null,t.error=o(e.response)||e.statusText,C(t)||a(Lt("error",e.status,o(e.response)||e.statusText,e.getAllResponseHeaders()))},s.ontimeout=function(e){t.status=Gt.ERROR,t.request=null,C(t)||Nt(a)(e)},s.onabort=function(){t.status=Gt.QUEUED,t.request=null,u()}}else f.every((function(e){return e.status===Gt.COMPLETE}))&&R()},C=function(e){return 0!==e.retries.length&&(e.status=Gt.WAITING,clearTimeout(e.timeout),e.timeout=setTimeout((function(){P(e)}),e.retries.shift()),!0)},A=function(){var e=f.reduce((function(e,t){return null===e||null===t.progress?null:e+t.progress}),0);if(null===e)return c(!1,0,0);var t=f.reduce((function(e,t){return e+t.size}),0);c(!0,e,t)},D=function(){f.filter((function(e){return e.status===Gt.PROCESSING})).length>=1||P()},x=function(){f.forEach((function(e){clearTimeout(e.timeout),e.request&&e.request.abort()}))};return m.serverId?_((function(e){m.aborted||(f.filter((function(t){return t.offset<e})).forEach((function(e){e.status=Gt.COMPLETE,e.progress=e.size})),D())})):b((function(e){m.aborted||(s(e),m.serverId=e,D())})),{abort:function(){m.aborted=!0,x()}}},Ft=function(e,t,n,r){return function(o,i,a,c,u,s,l){if(o){var f=r.chunkUploads,p=f&&o.size>r.chunkSize,d=f&&(p||r.chunkForce);if(o instanceof Blob&&d)return qt(e,t,n,o,i,a,c,u,s,l,r);var h=t.ondata||function(e){return e},v=t.onload||function(e){return e},m=t.onerror||function(e){return null},g=new FormData;ie(i)&&g.append(n,JSON.stringify(i)),(o instanceof Blob?[{name:null,file:o}]:o).forEach((function(e){g.append(n,e.file,null===e.name?e.file.name:""+e.name+e.file.name)}));var y=xt(h(g),jt(e,t.url),t);return y.onload=function(e){a(Lt("load",e.status,v(e.response),e.getAllResponseHeaders()))},y.onerror=function(e){c(Lt("error",e.status,m(e.response)||e.statusText,e.getAllResponseHeaders()))},y.ontimeout=Nt(c),y.onprogress=u,y.onabort=s,y}}},Ut=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return"function"==typeof t?function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return t.apply(void 0,[n].concat(o,[r]))}:t&&Y(t.url)?Ft(e,t,n,r):null},Bt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return function(e,t){return t()};var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a){var c=xt(o,e+t.url,t);return c.onload=function(e){i(Lt("load",e.status,n(e.response),e.getAllResponseHeaders()))},c.onerror=function(e){a(Lt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},c.ontimeout=Nt(a),c}},Vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+Math.random()*(t-e)},zt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,o=null,i=Date.now();return function a(){var c=Date.now()-i,u=Vt(n,r);c+u>t&&(u=c+u-t);var s=c/t;s>=1||document.hidden?e(1):(e(s),o=setTimeout(a,u))}(),{clear:function(){clearTimeout(o)}}},Wt=function(e){var t={complete:!1,perceivedProgress:0,perceivedPerformanceUpdater:null,progress:null,timestamp:null,perceivedDuration:0,duration:0,request:null,response:null},n=function(n,r){var o=function(){0!==t.duration&&null!==t.progress&&c.fire("progress",c.getProgress())},i=function(){t.complete=!0,c.fire("load-perceived",t.response.body)};c.fire("start"),t.timestamp=Date.now(),t.perceivedPerformanceUpdater=zt((function(e){t.perceivedProgress=e,t.perceivedDuration=Date.now()-t.timestamp,o(),t.response&&1===t.perceivedProgress&&!t.complete&&i()}),Vt(750,1500)),t.request=e(n,r,(function(e){t.response=ie(e)?e:{type:"load",code:200,body:""+e,headers:{}},t.duration=Date.now()-t.timestamp,t.progress=1,c.fire("load",t.response.body),1===t.perceivedProgress&&i()}),(function(e){t.perceivedPerformanceUpdater.clear(),c.fire("error",ie(e)?e:{type:"error",code:0,body:""+e})}),(function(e,n,r){t.duration=Date.now()-t.timestamp,t.progress=e?n/r:null,o()}),(function(){t.perceivedPerformanceUpdater.clear(),c.fire("abort",t.response?t.response.body:null)}),(function(e){c.fire("transfer",e)}))},r=function(){t.request&&(t.perceivedPerformanceUpdater.clear(),t.request.abort&&t.request.abort(),t.complete=!0)},o=function(){r(),t.complete=!1,t.perceivedProgress=0,t.progress=0,t.timestamp=null,t.perceivedDuration=0,t.duration=0,t.request=null,t.response=null},i=function(){return t.progress?Math.min(t.progress,t.perceivedProgress):null},a=function(){return Math.min(t.duration,t.perceivedDuration)},c=Object.assign({},De(),{process:n,abort:r,getProgress:i,getDuration:a,reset:o});return c},Ht=function(e){return e.substr(0,e.lastIndexOf("."))||e},Yt=function(e){var t=[e.name,e.size,e.type];return e instanceof Blob||ft(e)?t[0]=e.name||mt():ft(e)?(t[1]=e.length,t[2]=_t(e)):Y(e)&&(t[0]=pt(e),t[1]=0,t[2]="application/octet-stream"),{name:t[0],size:t[1],type:t[2]}},Xt=function(e){return!!(e instanceof File||e instanceof Blob&&e.name)},Qt=function e(t){if(!ie(t))return t;var n=U(t)?[]:{};for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];n[r]=o&&ie(o)?e(o):o}return n},Kt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=be(),i={archived:!1,frozen:!1,released:!1,source:null,file:r,serverFileReference:n,transferId:null,processingAborted:!1,status:n?je.PROCESSING_COMPLETE:je.INIT,activeLoader:null,activeProcessor:null},c=null,u={},s=function(e){return i.status=e},l=function(e){if(!i.released&&!i.frozen){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];O.fire.apply(O,[e].concat(n))}},f=function(){return dt(i.file.name)},p=function(){return i.file.type},d=function(){return i.file.size},h=function(){return i.file},v=function(e,n,r){i.source=e,O.fireSync("init"),i.file?O.fireSync("load-skip"):(i.file=Yt(e),n.on("init",(function(){l("load-init")})),n.on("meta",(function(e){i.file.size=e.size,i.file.filename=e.filename,e.source&&(t=ke.LIMBO,i.serverFileReference=e.source,i.status=je.PROCESSING_COMPLETE),l("load-meta")})),n.on("progress",(function(e){s(je.LOADING),l("load-progress",e)})),n.on("error",(function(e){s(je.LOAD_ERROR),l("load-request-error",e)})),n.on("abort",(function(){s(je.INIT),l("load-abort")})),n.on("load",(function(e){i.activeLoader=null;var n=function(e){i.file=Xt(e)?e:i.file,t===ke.LIMBO&&i.serverFileReference?s(je.PROCESSING_COMPLETE):s(je.IDLE),l("load")},o=function(t){i.file=e,l("load-meta"),s(je.LOAD_ERROR),l("load-file-error",t)};i.serverFileReference?n(e):r(e,n,o)})),n.setSource(e),i.activeLoader=n,n.load())},m=function(){i.activeLoader&&i.activeLoader.load()},g=function(){i.activeLoader?i.activeLoader.abort():(s(je.INIT),l("load-abort"))},y=function e(t,n){if(i.processingAborted)i.processingAborted=!1;else if(s(je.PROCESSING),c=null,i.file instanceof Blob){t.on("load",(function(e){i.transferId=null,i.serverFileReference=e})),t.on("transfer",(function(e){i.transferId=e})),t.on("load-perceived",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(je.PROCESSING_COMPLETE),l("process-complete",e)})),t.on("start",(function(){l("process-start")})),t.on("error",(function(e){i.activeProcessor=null,s(je.PROCESSING_ERROR),l("process-error",e)})),t.on("abort",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(je.IDLE),l("process-abort"),c&&c()})),t.on("progress",(function(e){l("process-progress",e)}));var r=function(e){i.archived||t.process(e,Object.assign({},u))},o=console.error;n(i.file,r,o),i.activeProcessor=t}else O.on("load",(function(){e(t,n)}))},E=function(){i.processingAborted=!1,s(je.PROCESSING_QUEUED)},b=function(){return new e((function(e){if(!i.activeProcessor)return i.processingAborted=!0,s(je.IDLE),l("process-abort"),void e();c=function(){e()},i.activeProcessor.abort()}))},_=function(t,n){return new e((function(e,r){null!==i.serverFileReference?(t(i.serverFileReference,(function(){i.serverFileReference=null,e()}),(function(t){n?(s(je.PROCESSING_REVERT_ERROR),l("process-revert-error"),r(t)):e()})),s(je.IDLE),l("process-revert")):e()}))},T=function(e,t,n){var r=e.split("."),o=r[0],i=r.pop(),a=u;r.forEach((function(e){return a=a[e]})),JSON.stringify(a[i])!==JSON.stringify(t)&&(a[i]=t,n||l("metadata-update",{key:o,value:u[o]}))},I=function(e){return Qt(e?u[e]:u)},O=Object.assign({id:{get:function(){return o}},origin:{get:function(){return t}},serverId:{get:function(){return i.serverFileReference}},transferId:{get:function(){return i.transferId}},status:{get:function(){return i.status}},filename:{get:function(){return i.file.name}},filenameWithoutExtension:{get:function(){return Ht(i.file.name)}},fileExtension:{get:f},fileType:{get:p},fileSize:{get:d},file:{get:h},relativePath:{get:function(){return i.file._relativePath}},source:{get:function(){return i.source}},getMetadata:I,setMetadata:function(e,t,n){if(ie(e)){var r=e;return Object.keys(r).forEach((function(e){T(e,r[e],t)})),e}return T(e,t,n),t},extend:function(e,t){return w[e]=t},abortLoad:g,retryLoad:m,requestProcessing:E,abortProcessing:b,load:v,process:y,revert:_},De(),{freeze:function(){return i.frozen=!0},release:function(){return i.released=!0},released:{get:function(){return i.released}},archive:function(){return i.archived=!0},archived:{get:function(){return i.archived}}}),w=a(O);return w},$t=function(e,t){return B(t)?0:Y(t)?e.findIndex((function(e){return e.id===t})):-1},Jt=function(e,t){var n=$t(e,t);if(!(n<0))return e[n]||null},Zt=function(e,t,n,r,o,i){var a=xt(null,e,{method:"GET",responseType:"blob"});return a.onload=function(n){var r=n.getAllResponseHeaders(),o=Ct(r).name||pt(e);t(Lt("load",n.status,gt(n.response,o),r))},a.onerror=function(e){n(Lt("error",e.status,e.statusText,e.getAllResponseHeaders()))},a.onheaders=function(e){i(Lt("headers",e.status,null,e.getAllResponseHeaders()))},a.ontimeout=Nt(n),a.onprogress=r,a.onabort=o,a},en=function(e){return 0===e.indexOf("//")&&(e=location.protocol+e),e.toLowerCase().replace("blob:","").replace(/([a-z])?:\/\//,"$1").split("/")[0]},tn=function(e){return(e.indexOf(":")>-1||e.indexOf("//")>-1)&&en(location.href)!==en(e)},nn=function(e){return function(){return Z(e)?e.apply(void 0,arguments):e}},rn=function(e){return!Xt(e.file)},on=function(e,t){clearTimeout(t.listUpdateTimeout),t.listUpdateTimeout=setTimeout((function(){e("DID_UPDATE_ITEMS",{items:Je(t.items)})}),0)},an=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return new e((function(e){if(!t)return e(!0);var n=t.apply(void 0,r);return null==n?e(!0):"boolean"==typeof n?e(n):void("function"==typeof n.then&&n.then(e))}))},cn=function(e,t){e.items.sort((function(e,n){return t(Ne(e),Ne(n))}))},un=function(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.query,o=n.success,i=void 0===o?function(){}:o,a=n.failure,c=void 0===a?function(){}:a,u=Oe(n,["query","success","failure"]),s=Ke(e.items,r);s?t(s,i,c,u||{}):c({error:Lt("error",0,"Item not found"),file:null})}},sn=function(t,n,r){return{ABORT_ALL:function(){Je(r.items).forEach((function(e){e.freeze(),e.abortLoad(),e.abortProcessing()}))},DID_SET_FILES:function(e){var n=e.value,o=(void 0===n?[]:n).map((function(e){return{source:e.source?e.source:e,options:e.options}})),i=Je(r.items);i.forEach((function(e){o.find((function(t){return t.source===e.source||t.source===e.file}))||t("REMOVE_ITEM",{query:e,remove:!1})})),i=Je(r.items),o.forEach((function(e,n){i.find((function(t){return t.source===e.source||t.file===e.source}))||t("ADD_ITEM",Object.assign({},e,{interactionMethod:Ee.NONE,index:n}))}))},DID_UPDATE_ITEM_METADATA:function(e){var o=e.id;clearTimeout(r.itemUpdateTimeout),r.itemUpdateTimeout=setTimeout((function(){var e=Jt(r.items,o);if(n("IS_ASYNC")){var i=function(){setTimeout((function(){t("REQUEST_ITEM_PROCESSING",{query:o})}),32)},a=function(t){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(t?i:function(){}).catch((function(){}))},c=function(t){e.abortProcessing().then(t?i:function(){})};return e.status===je.PROCESSING_COMPLETE?a(r.options.instantUpload):e.status===je.PROCESSING?c(r.options.instantUpload):void(r.options.instantUpload&&i())}Ve("SHOULD_PREPARE_OUTPUT",!1,{item:e,query:n}).then((function(n){n&&t("REQUEST_PREPARE_OUTPUT",{query:o,item:e,success:function(e){t("DID_PREPARE_OUTPUT",{id:o,file:e})}},!0)}))}),0)},MOVE_ITEM:function(e){var t=e.query,n=e.index,o=Ke(r.items,t);if(o){var i=r.items.indexOf(o);i!==(n=ut(n,0,r.items.length-1))&&r.items.splice(n,0,r.items.splice(i,1)[0])}},SORT:function(e){var o=e.compare;cn(r,o),t("DID_SORT_ITEMS",{items:n("GET_ACTIVE_ITEMS")})},ADD_ITEMS:function(r){var o=r.items,i=r.index,a=r.interactionMethod,c=r.success,u=void 0===c?function(){}:c,s=r.failure,l=void 0===s?function(){}:s,f=i;if(-1===i||void 0===i){var p=n("GET_ITEM_INSERT_LOCATION"),d=n("GET_TOTAL_ITEMS");f="before"===p?0:d}var h=n("GET_IGNORED_FILES"),v=function(e){return Xt(e)?!h.includes(e.name.toLowerCase()):!B(e)},m=o.filter(v).map((function(n){return new e((function(e,r){t("ADD_ITEM",{interactionMethod:a,source:n.source||n,success:e,failure:r,index:f++,options:n.options||{}})}))}));e.all(m).then(u).catch(l)},ADD_ITEM:function(e){var o=e.source,i=e.index,a=void 0===i?-1:i,c=e.interactionMethod,u=e.success,s=void 0===u?function(){}:u,l=e.failure,f=void 0===l?function(){}:l,p=e.options,d=void 0===p?{}:p;if(B(o))f({error:Lt("error",0,"No source"),file:null});else if(!Xt(o)||!r.options.ignoredFiles.includes(o.name.toLowerCase())){if(!ct(r)){if(r.options.allowMultiple||!r.options.allowMultiple&&!r.options.allowReplace){var h=Lt("warning",0,"Max files");return t("DID_THROW_MAX_FILES",{source:o,error:h}),void f({error:h,file:null})}var v=Je(r.items)[0];if(v.status===je.PROCESSING_COMPLETE||v.status===je.PROCESSING_REVERT_ERROR){var m=n("GET_FORCE_REVERT");if(v.revert(Bt(r.options.server.url,r.options.server.revert),m).then((function(){m&&t("ADD_ITEM",{source:o,index:a,interactionMethod:c,success:s,failure:f,options:d})})).catch((function(){})),m)return}t("REMOVE_ITEM",{query:v.id})}var g="local"===d.type?ke.LOCAL:"limbo"===d.type?ke.LIMBO:ke.INPUT,y=Kt(g,g===ke.INPUT?null:o,d.file);Object.keys(d.metadata||{}).forEach((function(e){y.setMetadata(e,d.metadata[e])})),ze("DID_CREATE_ITEM",y,{query:n,dispatch:t});var E=n("GET_ITEM_INSERT_LOCATION");r.options.itemInsertLocationFreedom||(a="before"===E?-1:r.items.length),lt(r.items,y,a),Z(E)&&o&&cn(r,E);var b=y.id;y.on("init",(function(){t("DID_INIT_ITEM",{id:b})})),y.on("load-init",(function(){t("DID_START_ITEM_LOAD",{id:b})})),y.on("load-meta",(function(){t("DID_UPDATE_ITEM_META",{id:b})})),y.on("load-progress",(function(e){t("DID_UPDATE_ITEM_LOAD_PROGRESS",{id:b,progress:e})})),y.on("load-request-error",(function(e){var n=nn(r.options.labelFileLoadError)(e);if(e.code>=400&&e.code<500)return t("DID_THROW_ITEM_INVALID",{id:b,error:e,status:{main:n,sub:e.code+" ("+e.body+")"}}),void f({error:e,file:Ne(y)});t("DID_THROW_ITEM_LOAD_ERROR",{id:b,error:e,status:{main:n,sub:r.options.labelTapToRetry}})})),y.on("load-file-error",(function(e){t("DID_THROW_ITEM_INVALID",{id:b,error:e.status,status:e.status}),f({error:e.status,file:Ne(y)})})),y.on("load-abort",(function(){t("REMOVE_ITEM",{query:b})})),y.on("load-skip",(function(){t("COMPLETE_LOAD_ITEM",{query:b,item:y,data:{source:o,success:s}})})),y.on("load",(function(){var e=function(e){e?(y.on("metadata-update",(function(e){t("DID_UPDATE_ITEM_METADATA",{id:b,change:e})})),Ve("SHOULD_PREPARE_OUTPUT",!1,{item:y,query:n}).then((function(e){var n=function(){t("COMPLETE_LOAD_ITEM",{query:b,item:y,data:{source:o,success:s}}),on(t,r)};e?t("REQUEST_PREPARE_OUTPUT",{query:b,item:y,success:function(e){t("DID_PREPARE_OUTPUT",{id:b,file:e}),n()}},!0):n()}))):t("REMOVE_ITEM",{query:b})};Ve("DID_LOAD_ITEM",y,{query:n,dispatch:t}).then((function(){an(n("GET_BEFORE_ADD_FILE"),Ne(y)).then(e)})).catch((function(){e(!1)}))})),y.on("process-start",(function(){t("DID_START_ITEM_PROCESSING",{id:b})})),y.on("process-progress",(function(e){t("DID_UPDATE_ITEM_PROCESS_PROGRESS",{id:b,progress:e})})),y.on("process-error",(function(e){t("DID_THROW_ITEM_PROCESSING_ERROR",{id:b,error:e,status:{main:nn(r.options.labelFileProcessingError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-revert-error",(function(e){t("DID_THROW_ITEM_PROCESSING_REVERT_ERROR",{id:b,error:e,status:{main:nn(r.options.labelFileProcessingRevertError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-complete",(function(e){t("DID_COMPLETE_ITEM_PROCESSING",{id:b,error:null,serverFileReference:e}),t("DID_DEFINE_VALUE",{id:b,value:e})})),y.on("process-abort",(function(){t("DID_ABORT_ITEM_PROCESSING",{id:b})})),y.on("process-revert",(function(){t("DID_REVERT_ITEM_PROCESSING",{id:b}),t("DID_DEFINE_VALUE",{id:b,value:null})})),t("DID_ADD_ITEM",{id:b,index:a,interactionMethod:c}),on(t,r);var _=r.options.server||{},T=_.url,I=_.load,O=_.restore,w=_.fetch;y.load(o,At(g===ke.INPUT?Y(o)&&tn(o)&&w?kt(T,w):Zt:g===ke.LIMBO?kt(T,O):kt(T,I)),(function(e,t,r){Ve("LOAD_FILE",e,{query:n}).then(t).catch(r)}))}},REQUEST_PREPARE_OUTPUT:function(e){var t=e.item,r=e.success,o=e.failure,i=void 0===o?function(){}:o,a={error:Lt("error",0,"Item not found"),file:null};if(t.archived)return i(a);Ve("PREPARE_OUTPUT",t.file,{query:n,item:t}).then((function(e){Ve("COMPLETE_PREPARE_OUTPUT",e,{query:n,item:t}).then((function(e){if(t.archived)return i(a);r(e)}))}))},COMPLETE_LOAD_ITEM:function(e){var o=e.item,i=e.data,a=i.success,c=i.source,u=n("GET_ITEM_INSERT_LOCATION");if(Z(u)&&c&&cn(r,u),t("DID_LOAD_ITEM",{id:o.id,error:null,serverFileReference:o.origin===ke.INPUT?null:c}),a(Ne(o)),o.origin!==ke.LOCAL)return o.origin===ke.LIMBO?(t("DID_COMPLETE_ITEM_PROCESSING",{id:o.id,error:null,serverFileReference:c}),void t("DID_DEFINE_VALUE",{id:o.id,value:c})):void(n("IS_ASYNC")&&r.options.instantUpload&&t("REQUEST_ITEM_PROCESSING",{query:o.id}));t("DID_LOAD_LOCAL_ITEM",{id:o.id})},RETRY_ITEM_LOAD:un(r,(function(e){e.retryLoad()})),REQUEST_ITEM_PREPARE:un(r,(function(e,n,r){t("REQUEST_PREPARE_OUTPUT",{query:e.id,item:e,success:function(r){t("DID_PREPARE_OUTPUT",{id:e.id,file:r}),n({file:e,output:r})},failure:r},!0)})),REQUEST_ITEM_PROCESSING:un(r,(function(e,o,i){if(e.status===je.IDLE||e.status===je.PROCESSING_ERROR)e.status!==je.PROCESSING_QUEUED&&(e.requestProcessing(),t("DID_REQUEST_ITEM_PROCESSING",{id:e.id}),t("PROCESS_ITEM",{query:e,success:o,failure:i},!0));else{var a=function(){return t("REQUEST_ITEM_PROCESSING",{query:e,success:o,failure:i})},c=function(){return document.hidden?a():setTimeout(a,32)};e.status===je.PROCESSING_COMPLETE||e.status===je.PROCESSING_REVERT_ERROR?e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(c).catch((function(){})):e.status===je.PROCESSING&&e.abortProcessing().then(c)}})),PROCESS_ITEM:un(r,(function(e,o,i){var a=n("GET_MAX_PARALLEL_UPLOADS");if(n("GET_ITEMS_BY_STATUS",je.PROCESSING).length!==a){if(e.status!==je.PROCESSING){var c=function e(){var n=r.processingQueue.shift();if(n){var o=n.id,i=n.success,a=n.failure,c=Ke(r.items,o);c&&!c.archived?t("PROCESS_ITEM",{query:o,success:i,failure:a},!0):e()}};e.onOnce("process-complete",(function(){o(Ne(e)),c(),n("GET_ITEMS_BY_STATUS",je.PROCESSING_COMPLETE).length===r.items.length&&t("DID_COMPLETE_ITEM_PROCESSING_ALL")})),e.onOnce("process-error",(function(t){i({error:t,file:Ne(e)}),c()}));var u=r.options;e.process(Wt(Ut(u.server.url,u.server.process,u.name,{chunkTransferId:e.transferId,chunkServer:u.server.patch,chunkUploads:u.chunkUploads,chunkForce:u.chunkForce,chunkSize:u.chunkSize,chunkRetryDelays:u.chunkRetryDelays})),(function(r,o,i){Ve("PREPARE_OUTPUT",r,{query:n,item:e}).then((function(n){t("DID_PREPARE_OUTPUT",{id:e.id,file:n}),o(n)})).catch(i)}))}}else r.processingQueue.push({id:e.id,success:o,failure:i})})),RETRY_ITEM_PROCESSING:un(r,(function(e){t("REQUEST_ITEM_PROCESSING",{query:e})})),REQUEST_REMOVE_ITEM:un(r,(function(e){an(n("GET_BEFORE_REMOVE_FILE"),Ne(e)).then((function(n){n&&t("REMOVE_ITEM",{query:e})}))})),RELEASE_ITEM:un(r,(function(e){e.release()})),REMOVE_ITEM:un(r,(function(e,o,i,a){var c=function(){var n=e.id;Jt(r.items,n).archive(),t("DID_REMOVE_ITEM",{error:null,id:n,item:e}),on(t,r),o(Ne(e))},u=r.options.server;e.origin===ke.LOCAL&&u&&Z(u.remove)&&!1!==a.remove?(t("DID_START_ITEM_REMOVE",{id:e.id}),u.remove(e.source,(function(){return c()}),(function(n){t("DID_THROW_ITEM_REMOVE_ERROR",{id:e.id,error:Lt("error",0,n,null),status:{main:nn(r.options.labelFileRemoveError)(n),sub:r.options.labelTapToRetry}})}))):(a.revert&&e.origin!==ke.LOCAL&&null!==e.serverId&&e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")),c())})),ABORT_ITEM_LOAD:un(r,(function(e){e.abortLoad()})),ABORT_ITEM_PROCESSING:un(r,(function(e){e.serverId?t("REVERT_ITEM_PROCESSING",{id:e.id}):e.abortProcessing().then((function(){r.options.instantUpload&&t("REMOVE_ITEM",{query:e.id})}))})),REQUEST_REVERT_ITEM_PROCESSING:un(r,(function(e){if(r.options.instantUpload){var o=function(n){n&&t("REVERT_ITEM_PROCESSING",{query:e})},i=n("GET_BEFORE_REMOVE_FILE");if(!i)return o(!0);var a=i(Ne(e));return null==a?o(!0):"boolean"==typeof a?o(a):void("function"==typeof a.then&&a.then(o))}t("REVERT_ITEM_PROCESSING",{query:e})})),REVERT_ITEM_PROCESSING:un(r,(function(e){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then((function(){(r.options.instantUpload||rn(e))&&t("REMOVE_ITEM",{query:e.id})})).catch((function(){}))})),SET_OPTIONS:function(e){var n=e.options;i(n,(function(e,n){t("SET_"+ve(e,"_").toUpperCase(),{value:n})}))}}},ln=function(e){return e},fn=function(e){return document.createElement(e)},pn=function(e,t){var n=e.childNodes[0];n?t!==n.nodeValue&&(n.nodeValue=t):(n=document.createTextNode(t),e.appendChild(n))},dn=function(e,t,n,r){var o=(r%360-90)*Math.PI/180;return{x:e+n*Math.cos(o),y:t+n*Math.sin(o)}},hn=function(e,t,n,r,o,i){var a=dn(e,t,n,o),c=dn(e,t,n,r);return["M",a.x,a.y,"A",n,n,0,i,0,c.x,c.y].join(" ")},vn=function(e,t,n,r,o){var i=1;return o>r&&o-r<=.5&&(i=0),r>o&&r-o>=.5&&(i=0),hn(e,t,n,360*Math.min(.9999,r),360*Math.min(.9999,o),i)},mn=j({tag:"div",name:"progress-indicator",ignoreRectUpdate:!0,ignoreRect:!0,create:function(e){var t=e.root,n=e.props;n.spin=!1,n.progress=0,n.opacity=0;var r=f("svg");t.ref.path=f("path",{"stroke-width":2,"stroke-linecap":"round"}),r.appendChild(t.ref.path),t.ref.svg=r,t.appendChild(r)},write:function(e){var t=e.root,n=e.props;if(0!==n.opacity){n.align&&(t.element.dataset.align=n.align);var r=parseInt(c(t.ref.path,"stroke-width"),10),o=.5*t.rect.element.width,i=0,a=0;n.spin?(i=0,a=.5):(i=0,a=n.progress);var u=vn(o,o,o-r,i,a);c(t.ref.path,"d",u),c(t.ref.path,"stroke-opacity",n.spin||n.progress>0?1:0)}},mixins:{apis:["progress","spin","align"],styles:["opacity"],animations:{opacity:{type:"tween",duration:500},progress:{type:"spring",stiffness:.95,damping:.65,mass:10}}}}),gn=j({tag:"button",attributes:{type:"button"},ignoreRect:!0,ignoreRectUpdate:!0,name:"file-action-button",mixins:{apis:["label"],styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}},listeners:!0},create:function(e){var t=e.root,n=e.props;t.element.innerHTML=(n.icon||"")+"<span>"+n.label+"</span>",n.isDisabled=!1},write:function(e){var t=e.root,n=e.props,r=n.isDisabled,o=t.query("GET_DISABLED")||0===n.opacity;o&&!r?(n.isDisabled=!0,c(t.element,"disabled","disabled")):!o&&r&&(n.isDisabled=!1,t.element.removeAttribute("disabled"))}}),yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".";return(e=Math.round(Math.abs(e)))<1e3?e+" bytes":e<bn?Math.floor(e/En)+" KB":e<_n?Tn(e/bn,1,t)+" MB":Tn(e/_n,2,t)+" GB"},En=1e3,bn=1e6,_n=1e9,Tn=function(e,t,n){return e.toFixed(t).split(".").filter((function(e){return"0"!==e})).join(n)},In=function(e){var t=e.root,n=e.props,r=fn("span");r.className="filepond--file-info-main",c(r,"aria-hidden","true"),t.appendChild(r),t.ref.fileName=r;var o=fn("span");o.className="filepond--file-info-sub",t.appendChild(o),t.ref.fileSize=o,pn(o,t.query("GET_LABEL_FILE_WAITING_FOR_SIZE")),pn(r,ln(t.query("GET_ITEM_NAME",n.id)))},On=function(e){var t=e.root,n=e.props;pn(t.ref.fileSize,yn(t.query("GET_ITEM_SIZE",n.id))),pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))},wn=function(e){var t=e.root,n=e.props;$(t.query("GET_ITEM_SIZE",n.id))||pn(t.ref.fileSize,t.query("GET_LABEL_FILE_SIZE_NOT_AVAILABLE"))},Rn=j({name:"file-info",ignoreRect:!0,ignoreRectUpdate:!0,write:G({DID_LOAD_ITEM:On,DID_UPDATE_ITEM_META:On,DID_THROW_ITEM_LOAD_ERROR:wn,DID_THROW_ITEM_INVALID:wn}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},create:In,mixins:{styles:["translateX","translateY"],animations:{translateX:"spring",translateY:"spring"}}}),Sn=function(e){return Math.round(100*e)},Pn=function(e){var t=e.root,n=fn("span");n.className="filepond--file-status-main",t.appendChild(n),t.ref.main=n;var r=fn("span");r.className="filepond--file-status-sub",t.appendChild(r),t.ref.sub=r,Cn({root:t,action:{progress:null}})},Cn=function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_LOADING"):t.query("GET_LABEL_FILE_LOADING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},An=function(e){var t=e.root;pn(t.ref.main,""),pn(t.ref.sub,"")},Dn=function(e){var t=e.root,n=e.action;pn(t.ref.main,n.status.main),pn(t.ref.sub,n.status.sub)},xn=j({name:"file-status",ignoreRect:!0,ignoreRectUpdate:!0,write:G({DID_LOAD_ITEM:An,DID_REVERT_ITEM_PROCESSING:An,DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_ABORT_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_ABORTED")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_RETRY"))},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_COMPLETE")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_UNDO"))},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_PROCESSING"):t.query("GET_LABEL_FILE_PROCESSING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_UPDATE_ITEM_LOAD_PROGRESS:Cn,DID_THROW_ITEM_LOAD_ERROR:Dn,DID_THROW_ITEM_INVALID:Dn,DID_THROW_ITEM_PROCESSING_ERROR:Dn,DID_THROW_ITEM_PROCESSING_REVERT_ERROR:Dn,DID_THROW_ITEM_REMOVE_ERROR:Dn}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Pn,mixins:{styles:["translateX","translateY","opacity"],animations:{opacity:{type:"tween",duration:250},translateX:"spring",translateY:"spring"}}}),Ln={AbortItemLoad:{label:"GET_LABEL_BUTTON_ABORT_ITEM_LOAD",action:"ABORT_ITEM_LOAD",className:"filepond--action-abort-item-load",align:"LOAD_INDICATOR_POSITION"},RetryItemLoad:{label:"GET_LABEL_BUTTON_RETRY_ITEM_LOAD",action:"RETRY_ITEM_LOAD",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-load",align:"BUTTON_PROCESS_ITEM_POSITION"},RemoveItem:{label:"GET_LABEL_BUTTON_REMOVE_ITEM",action:"REQUEST_REMOVE_ITEM",icon:"GET_ICON_REMOVE",className:"filepond--action-remove-item",align:"BUTTON_REMOVE_ITEM_POSITION"},ProcessItem:{label:"GET_LABEL_BUTTON_PROCESS_ITEM",action:"REQUEST_ITEM_PROCESSING",icon:"GET_ICON_PROCESS",className:"filepond--action-process-item",align:"BUTTON_PROCESS_ITEM_POSITION"},AbortItemProcessing:{label:"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING",action:"ABORT_ITEM_PROCESSING",className:"filepond--action-abort-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RetryItemProcessing:{label:"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING",action:"RETRY_ITEM_PROCESSING",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RevertItemProcessing:{label:"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING",action:"REQUEST_REVERT_ITEM_PROCESSING",icon:"GET_ICON_UNDO",className:"filepond--action-revert-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"}},Nn=[];i(Ln,(function(e){Nn.push(e)}));var Mn,jn=function(e){var t=e.ref.buttonRemoveItem.rect.element;return t.hidden?null:t.width+t.left},kn=function(e){return e.ref.buttonAbortItemLoad.rect.element.width},Gn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.height/4)},qn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.left/2)},Fn=function(e){return e.query("GET_STYLE_BUTTON_REMOVE_ITEM_POSITION")},Un={buttonAbortItemLoad:{opacity:0},buttonRetryItemLoad:{opacity:0},buttonRemoveItem:{opacity:0},buttonProcessItem:{opacity:0},buttonAbortItemProcessing:{opacity:0},buttonRetryItemProcessing:{opacity:0},buttonRevertItemProcessing:{opacity:0},loadProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_LOAD_INDICATOR_POSITION")}},processProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}},processingCompleteIndicator:{opacity:0,scaleX:.75,scaleY:.75},info:{translateX:0,translateY:0,opacity:0},status:{translateX:0,translateY:0,opacity:0}},Bn={buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:jn},status:{translateX:jn}},Vn={buttonAbortItemProcessing:{opacity:1},processProgressIndicator:{opacity:1},status:{opacity:1}},zn={DID_THROW_ITEM_INVALID:{buttonRemoveItem:{opacity:1},info:{translateX:jn},status:{translateX:jn,opacity:1}},DID_START_ITEM_LOAD:{buttonAbortItemLoad:{opacity:1},loadProgressIndicator:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_LOAD_ERROR:{buttonRetryItemLoad:{opacity:1},buttonRemoveItem:{opacity:1},info:{translateX:jn},status:{opacity:1}},DID_START_ITEM_REMOVE:{processProgressIndicator:{opacity:1,align:Fn},info:{translateX:jn},status:{opacity:0}},DID_THROW_ITEM_REMOVE_ERROR:{processProgressIndicator:{opacity:0,align:Fn},buttonRemoveItem:{opacity:1},info:{translateX:jn},status:{opacity:1,translateX:jn}},DID_LOAD_ITEM:Bn,DID_LOAD_LOCAL_ITEM:{buttonRemoveItem:{opacity:1},info:{translateX:jn},status:{translateX:jn}},DID_START_ITEM_PROCESSING:Vn,DID_REQUEST_ITEM_PROCESSING:Vn,DID_UPDATE_ITEM_PROCESS_PROGRESS:Vn,DID_COMPLETE_ITEM_PROCESSING:{buttonRevertItemProcessing:{opacity:1},info:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_PROCESSING_ERROR:{buttonRemoveItem:{opacity:1},buttonRetryItemProcessing:{opacity:1},status:{opacity:1},info:{translateX:jn}},DID_THROW_ITEM_PROCESSING_REVERT_ERROR:{buttonRevertItemProcessing:{opacity:1},status:{opacity:1},info:{opacity:1}},DID_ABORT_ITEM_PROCESSING:{buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:jn},status:{opacity:1}},DID_REVERT_ITEM_PROCESSING:Bn},Wn=j({create:function(e){var t=e.root;t.element.innerHTML=t.query("GET_ICON_DONE")},name:"processing-complete-indicator",ignoreRect:!0,mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",opacity:{type:"tween",duration:250}}}}),Hn=function(e){var t,n=e.root,r=e.props.id,o=n.query("GET_ALLOW_REVERT"),a=n.query("GET_ALLOW_REMOVE"),c=n.query("GET_ALLOW_PROCESS"),u=n.query("GET_INSTANT_UPLOAD"),s=n.query("IS_ASYNC"),l=n.query("GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN");s?c&&!o?t=function(e){return!/RevertItemProcessing/.test(e)}:!c&&o?t=function(e){return!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e)}:c||o||(t=function(e){return!/Process/.test(e)}):t=function(e){return!/Process/.test(e)};var f=t?Nn.filter(t):Nn.concat();if(u&&o&&(Ln.RevertItemProcessing.label="GET_LABEL_BUTTON_REMOVE_ITEM",Ln.RevertItemProcessing.icon="GET_ICON_REMOVE"),s&&!o){var p=zn.DID_COMPLETE_ITEM_PROCESSING;p.info.translateX=qn,p.info.translateY=Gn,p.status.translateY=Gn,p.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}if(s&&!c&&(["DID_START_ITEM_PROCESSING","DID_REQUEST_ITEM_PROCESSING","DID_UPDATE_ITEM_PROCESS_PROGRESS","DID_THROW_ITEM_PROCESSING_ERROR"].forEach((function(e){zn[e].status.translateY=Gn})),zn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX=kn),l&&o){Ln.RevertItemProcessing.align="BUTTON_REMOVE_ITEM_POSITION";var d=zn.DID_COMPLETE_ITEM_PROCESSING;d.info.translateX=jn,d.status.translateY=Gn,d.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}a||(Ln.RemoveItem.disabled=!0),i(Ln,(function(e,t){var o=n.createChildView(gn,{label:n.query(t.label),icon:n.query(t.icon),opacity:0});f.includes(e)&&n.appendChildView(o),t.disabled&&(o.element.setAttribute("disabled","disabled"),o.element.setAttribute("hidden","hidden")),o.element.dataset.align=n.query("GET_STYLE_"+t.align),o.element.classList.add(t.className),o.on("click",(function(e){e.stopPropagation(),t.disabled||n.dispatch(t.action,{query:r})})),n.ref["button"+e]=o})),n.ref.processingCompleteIndicator=n.appendChildView(n.createChildView(Wn)),n.ref.processingCompleteIndicator.element.dataset.align=n.query("GET_STYLE_BUTTON_PROCESS_ITEM_POSITION"),n.ref.info=n.appendChildView(n.createChildView(Rn,{id:r})),n.ref.status=n.appendChildView(n.createChildView(xn,{id:r}));var h=n.appendChildView(n.createChildView(mn,{opacity:0,align:n.query("GET_STYLE_LOAD_INDICATOR_POSITION")}));h.element.classList.add("filepond--load-indicator"),n.ref.loadProgressIndicator=h;var v=n.appendChildView(n.createChildView(mn,{opacity:0,align:n.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}));v.element.classList.add("filepond--process-indicator"),n.ref.processProgressIndicator=v,n.ref.activeStyles=[]},Yn=function(e){var t=e.root,n=e.actions,r=e.props;Xn({root:t,actions:n,props:r});var o=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return zn[e.type]}));if(o){t.ref.activeStyles=[];var a=zn[o.type];i(Un,(function(e,n){var r=t.ref[e];i(n,(function(n,o){var i=a[e]&&void 0!==a[e][n]?a[e][n]:o;t.ref.activeStyles.push({control:r,key:n,value:i})}))}))}t.ref.activeStyles.forEach((function(e){var n=e.control,r=e.key,o=e.value;n[r]="function"==typeof o?o(t):o}))},Xn=G({DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemProcessing.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemLoad.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemRemoval.label=n.value},DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_START_ITEM_LOAD:function(e){var t=e.root;t.ref.loadProgressIndicator.spin=!0,t.ref.loadProgressIndicator.progress=0},DID_START_ITEM_REMOVE:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_UPDATE_ITEM_LOAD_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.loadProgressIndicator.spin=!1,t.ref.loadProgressIndicator.progress=n.progress},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.processProgressIndicator.spin=!1,t.ref.processProgressIndicator.progress=n.progress}}),Qn=j({create:Hn,write:Yn,didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},name:"file"}),Kn=j({create:function(e){var t=e.root,n=e.props;t.ref.fileName=fn("legend"),t.appendChild(t.ref.fileName),t.ref.file=t.appendChildView(t.createChildView(Qn,{id:n.id})),t.ref.data=!1},ignoreRect:!0,write:G({DID_LOAD_ITEM:function(e){var t=e.root,n=e.props;pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))}}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},tag:"fieldset",name:"file-wrapper"}),$n={type:"spring",damping:.6,mass:7},Jn=function(e){var t=e.root,n=e.props;[{name:"top"},{name:"center",props:{translateY:null,scaleY:null},mixins:{animations:{scaleY:$n},styles:["translateY","scaleY"]}},{name:"bottom",props:{translateY:null},mixins:{animations:{translateY:$n},styles:["translateY"]}}].forEach((function(e){Zn(t,e,n.name)})),t.element.classList.add("filepond--"+n.name),t.ref.scalable=null},Zn=function(e,t,n){var r=j({name:"panel-"+t.name+" filepond--"+n,mixins:t.mixins,ignoreRectUpdate:!0}),o=e.createChildView(r,t.props);e.ref[t.name]=e.appendChildView(o)},er=j({name:"panel",write:function(e){var t=e.root,n=e.props;if(null!==t.ref.scalable&&n.scalable===t.ref.scalable||(t.ref.scalable=!W(n.scalable)||n.scalable,t.element.dataset.scalable=t.ref.scalable),n.height){var r=t.ref.top.rect.element,o=t.ref.bottom.rect.element,i=Math.max(r.height+o.height,n.height);t.ref.center.translateY=r.height,t.ref.center.scaleY=(i-r.height-o.height)/100,t.ref.bottom.translateY=i-o.height}},create:Jn,ignoreRect:!0,mixins:{apis:["height","scalable"]}}),tr=function(e){var t=e.map((function(e){return e.id})),n=void 0;return{setIndex:function(e){n=e},getIndex:function(){return n},getItemIndex:function(e){return t.indexOf(e.id)}}},nr={type:"spring",stiffness:.75,damping:.45,mass:10},rr="spring",or={DID_START_ITEM_LOAD:"busy",DID_UPDATE_ITEM_LOAD_PROGRESS:"loading",DID_THROW_ITEM_INVALID:"load-invalid",DID_THROW_ITEM_LOAD_ERROR:"load-error",DID_LOAD_ITEM:"idle",DID_THROW_ITEM_REMOVE_ERROR:"remove-error",DID_START_ITEM_REMOVE:"busy",DID_START_ITEM_PROCESSING:"busy processing",DID_REQUEST_ITEM_PROCESSING:"busy processing",DID_UPDATE_ITEM_PROCESS_PROGRESS:"processing",DID_COMPLETE_ITEM_PROCESSING:"processing-complete",DID_THROW_ITEM_PROCESSING_ERROR:"processing-error",DID_THROW_ITEM_PROCESSING_REVERT_ERROR:"processing-revert-error",DID_ABORT_ITEM_PROCESSING:"cancelled",DID_REVERT_ITEM_PROCESSING:"idle"},ir=function(e){var t=e.root,n=e.props;if(t.ref.handleClick=function(e){return t.dispatch("DID_ACTIVATE_ITEM",{id:n.id})},t.element.id="filepond--item-"+n.id,t.element.addEventListener("click",t.ref.handleClick),t.ref.container=t.appendChildView(t.createChildView(Kn,{id:n.id})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"item-panel"})),t.ref.panel.height=null,n.markedForRemoval=!1,t.query("GET_ALLOW_REORDER")){t.element.dataset.dragState="idle";var r=function(e){if(e.isPrimary){var r=!1,o={x:e.pageX,y:e.pageY};n.dragOrigin={x:t.translateX,y:t.translateY},n.dragCenter={x:e.offsetX,y:e.offsetY};var i=tr(t.query("GET_ACTIVE_ITEMS"));t.dispatch("DID_GRAB_ITEM",{id:n.id,dragState:i});var a=function(e){e.isPrimary&&(e.stopPropagation(),e.preventDefault(),n.dragOffset={x:e.pageX-o.x,y:e.pageY-o.y},n.dragOffset.x*n.dragOffset.x+n.dragOffset.y*n.dragOffset.y>16&&!r&&(r=!0,t.element.removeEventListener("click",t.ref.handleClick)),t.dispatch("DID_DRAG_ITEM",{id:n.id,dragState:i}))},c=function e(c){c.isPrimary&&(document.removeEventListener("pointermove",a),document.removeEventListener("pointerup",e),n.dragOffset={x:c.pageX-o.x,y:c.pageY-o.y},t.dispatch("DID_DROP_ITEM",{id:n.id,dragState:i}),r&&setTimeout((function(){return t.element.addEventListener("click",t.ref.handleClick)}),0))};document.addEventListener("pointermove",a),document.addEventListener("pointerup",c)}};t.element.addEventListener("pointerdown",r)}},ar=G({DID_UPDATE_PANEL_HEIGHT:function(e){var t=e.root,n=e.action;t.height=n.height}}),cr=G({DID_GRAB_ITEM:function(e){var t=e.root;e.props.dragOrigin={x:t.translateX,y:t.translateY}},DID_DRAG_ITEM:function(e){e.root.element.dataset.dragState="drag"},DID_DROP_ITEM:function(e){var t=e.root,n=e.props;n.dragOffset=null,n.dragOrigin=null,t.element.dataset.dragState="drop"}},(function(e){var t=e.root,n=e.actions,r=e.props,o=e.shouldOptimize;"drop"===t.element.dataset.dragState&&t.scaleX<=1&&(t.element.dataset.dragState="idle");var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return or[e.type]}));i&&i.type!==r.currentState&&(r.currentState=i.type,t.element.dataset.filepondItemState=or[r.currentState]||"");var a=t.query("GET_ITEM_PANEL_ASPECT_RATIO")||t.query("GET_PANEL_ASPECT_RATIO");a?o||(t.height=t.rect.element.width*a):(ar({root:t,actions:n,props:r}),!t.height&&t.ref.container.rect.element.height>0&&(t.height=t.ref.container.rect.element.height)),o&&(t.ref.panel.height=null),t.ref.panel.height=t.height})),ur=j({create:ir,write:cr,destroy:function(e){var t=e.root,n=e.props;t.element.removeEventListener("click",t.ref.handleClick),t.dispatch("RELEASE_ITEM",{query:n.id})},tag:"li",name:"item",mixins:{apis:["id","interactionMethod","markedForRemoval","spawnDate","dragCenter","dragOrigin","dragOffset"],styles:["translateX","translateY","scaleX","scaleY","opacity","height"],animations:{scaleX:rr,scaleY:rr,translateX:nr,translateY:nr,opacity:{type:"tween",duration:150}}}}),sr=function(e,t,n){if(n){var r=e.rect.element.width,o=t.length,i=null;if(0===o||n.top<t[0].rect.element.top)return-1;var a=t[0].rect.element,c=a.marginLeft+a.marginRight,u=a.width+c,s=Math.round(r/u);if(1===s){for(var l=0;l<o;l++){var f=t[l],p=f.rect.outer.top+.5*f.rect.element.height;if(n.top<p)return l}return o}for(var d=a.marginTop+a.marginBottom,h=a.height+d,v=0;v<o;v++){var m=v%s*u,g=Math.floor(v/s)*h,y=g-a.marginTop,E=m+u,b=g+h+a.marginBottom;if(n.top<b&&n.top>y){if(n.left<E)return v;i=v!==o-1?v:null}}return null!==i?i:o}},lr={height:0,width:0,get getHeight(){return this.height},set setHeight(e){0!==this.height&&0!==e||(this.height=e)},get getWidth(){return this.width},set setWidth(e){0!==this.width&&0!==e||(this.width=e)},setDimensions:function(e,t){0!==this.height&&0!==e||(this.height=e),0!==this.width&&0!==t||(this.width=t)}},fr=function(e){var t=e.root;c(t.element,"role","list"),t.ref.lastItemSpanwDate=Date.now()},pr=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;e.dragOffset?(e.translateX=null,e.translateY=null,e.translateX=e.dragOrigin.x+e.dragOffset.x,e.translateY=e.dragOrigin.y+e.dragOffset.y,e.scaleX=1.025,e.scaleY=1.025):(e.translateX=t,e.translateY=n,Date.now()>e.spawnDate&&(0===e.opacity&&dr(e,t,n,r,o),e.scaleX=1,e.scaleY=1,e.opacity=1))},dr=function(e,t,n,r,o){e.interactionMethod===Ee.NONE?(e.translateX=null,e.translateX=t,e.translateY=null,e.translateY=n):e.interactionMethod===Ee.DROP?(e.translateX=null,e.translateX=t-20*r,e.translateY=null,e.translateY=n-10*o,e.scaleX=.8,e.scaleY=.8):e.interactionMethod===Ee.BROWSE?(e.translateY=null,e.translateY=n-30):e.interactionMethod===Ee.API&&(e.translateX=null,e.translateX=t-30,e.translateY=null)},hr=function(e){return e.rect.element.height+.5*e.rect.element.marginBottom+.5*e.rect.element.marginTop},vr=function(e){return e.rect.element.width+.5*e.rect.element.marginLeft+.5*e.rect.element.marginRight},mr=G({DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.index,i=n.interactionMethod;t.ref.addIndex=o;var a=Date.now(),c=a,u=1;if(i!==Ee.NONE){u=0;var s=t.query("GET_ITEM_INSERT_INTERVAL"),l=a-t.ref.lastItemSpanwDate;c=l<s?a+(s-l):a}t.ref.lastItemSpanwDate=c,t.appendChildView(t.createChildView(ur,{spawnDate:c,id:r,opacity:u,interactionMethod:i}),o)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action.id,r=t.childViews.find((function(e){return e.id===n}));r&&(r.scaleX=.9,r.scaleY=.9,r.opacity=0,r.markedForRemoval=!0)},DID_DRAG_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.dragState,i=t.query("GET_ITEM",{id:r}),a=t.childViews.find((function(e){return e.id===r})),c=t.childViews.length,u=o.getItemIndex(i);if(a){var s={x:a.dragOrigin.x+a.dragOffset.x+a.dragCenter.x,y:a.dragOrigin.y+a.dragOffset.y+a.dragCenter.y},l=hr(a),f=vr(a),p=Math.floor(t.rect.outer.width/f);p>c&&(p=c);var d=Math.floor(c/p+1);lr.setHeight=l*d,lr.setWidth=f*p;var h={y:Math.floor(s.y/l),x:Math.floor(s.x/f),getGridIndex:function(){return s.y>lr.getHeight||s.y<0||s.x>lr.getWidth||s.x<0?u:this.y*p+this.x},getColIndex:function(){for(var e=t.query("GET_ACTIVE_ITEMS"),n=t.childViews.filter((function(e){return e.rect.element.height})),r=e.map((function(e){return n.find((function(t){return t.id===e.id}))})),o=r.findIndex((function(e){return e===a})),i=hr(a),c=r.length,u=c,l=0,f=0,p=0;p<c;p++)if(l=(f=l)+hr(r[p]),s.y<l){if(o>p){if(s.y<f+i){u=p;break}continue}u=p;break}return u}},v=p>1?h.getGridIndex():h.getColIndex();t.dispatch("MOVE_ITEM",{query:a,index:v});var m=o.getIndex();if(void 0===m||m!==v){if(o.setIndex(v),void 0===m)return;t.dispatch("DID_REORDER_ITEMS",{items:t.query("GET_ACTIVE_ITEMS"),origin:u,target:v})}}}}),gr=j({create:fr,write:function(e){var t=e.root,n=e.props,r=e.actions,o=e.shouldOptimize;mr({root:t,props:n,actions:r});var i=n.dragCoordinates,a=t.rect.element.width,c=t.childViews.filter((function(e){return e.rect.element.height})),u=t.query("GET_ACTIVE_ITEMS").map((function(e){return c.find((function(t){return t.id===e.id}))})).filter((function(e){return e})),s=i?sr(t,u,i):null,l=t.ref.addIndex||null;t.ref.addIndex=null;var f=0,p=0,d=0;if(0!==u.length){var h=u[0].rect.element,v=h.marginTop+h.marginBottom,m=h.marginLeft+h.marginRight,g=h.width+m,y=h.height+v,E=Math.round(a/g);if(1===E){var b=0,_=0;u.forEach((function(e,t){if(s){var n=t-s;_=-2===n?.25*-v:-1===n?.75*-v:0===n?.75*v:1===n?.25*v:0}o&&(e.translateX=null,e.translateY=null),e.markedForRemoval||pr(e,0,b+_);var r=(e.rect.element.height+v)*(e.markedForRemoval?e.opacity:1);b+=r}))}else{var T=0,I=0;u.forEach((function(e,t){t===s&&(f=1),t===l&&(d+=1),e.markedForRemoval&&e.opacity<.5&&(p-=1);var n=t+d+f+p,r=n%E,i=Math.floor(n/E),a=r*g,c=i*y,u=Math.sign(a-T),h=Math.sign(c-I);T=a,I=c,e.markedForRemoval||(o&&(e.translateX=null,e.translateY=null),pr(e,a,c,u,h))}))}}},tag:"ul",name:"list",didWriteView:function(e){var t=e.root;t.childViews.filter((function(e){return e.markedForRemoval&&0===e.opacity&&e.resting})).forEach((function(e){e._destroy(),t.removeChildView(e)}))},filterFrameActionsForChild:function(e,t){return t.filter((function(t){return!t.data||!t.data.id||e.id===t.data.id}))},mixins:{apis:["dragCoordinates"]}}),yr=function(e){var t=e.root,n=e.props;t.ref.list=t.appendChildView(t.createChildView(gr)),n.dragCoordinates=null,n.overflowing=!1},Er=G({DID_DRAG:function(e){var t=e.root,n=e.props,r=e.action;t.query("GET_ITEM_INSERT_LOCATION_FREEDOM")&&(n.dragCoordinates={left:r.position.scopeLeft-t.ref.list.rect.element.left,top:r.position.scopeTop-(t.rect.outer.top+t.rect.element.marginTop+t.rect.element.scrollTop)})},DID_END_DRAG:function(e){e.props.dragCoordinates=null}}),br=j({create:yr,write:function(e){var t=e.root,n=e.props,r=e.actions;if(Er({root:t,props:n,actions:r}),t.ref.list.dragCoordinates=n.dragCoordinates,n.overflowing&&!n.overflow&&(n.overflowing=!1,t.element.dataset.state="",t.height=null),n.overflow){var o=Math.round(n.overflow);o!==t.height&&(n.overflowing=!0,t.element.dataset.state="overflow",t.height=o)}},name:"list-scroller",mixins:{apis:["overflow","dragCoordinates"],styles:["height","translateY"],animations:{translateY:"spring"}}}),_r=function(e,t,n){n?c(e,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:""):e.removeAttribute(t)},Tr=function(e){if(e&&""!==e.value){try{e.value=""}catch(e){}if(e.value){var t=fn("form"),n=e.parentNode,r=e.nextSibling;t.appendChild(e),t.reset(),r?n.insertBefore(e,r):n.appendChild(e)}}},Ir=function(e){var t=e.root,n=e.props;t.element.id="filepond--browser-"+n.id,c(t.element,"name",t.query("GET_NAME")),c(t.element,"aria-controls","filepond--assistant-"+n.id),c(t.element,"aria-labelledby","filepond--drop-label-"+n.id),Or({root:t,action:{value:t.query("GET_ACCEPTED_FILE_TYPES")}}),wr({root:t,action:{value:t.query("GET_ALLOW_MULTIPLE")}}),Rr({root:t,action:{value:t.query("GET_ALLOW_DIRECTORIES_ONLY")}}),Sr({root:t}),Pr({root:t,action:{value:t.query("GET_REQUIRED")}}),Cr({root:t,action:{value:t.query("GET_CAPTURE_METHOD")}}),t.ref.handleChange=function(e){if(t.element.value){var r=Array.from(t.element.files).map((function(e){return e._relativePath=e.webkitRelativePath,e}));setTimeout((function(){n.onload(r),Tr(t.element)}),250)}},t.element.addEventListener("change",t.ref.handleChange)},Or=function(e){var t=e.root,n=e.action;t.query("GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE")&&_r(t.element,"accept",!!n.value,n.value?n.value.join(","):"")},wr=function(e){var t=e.root,n=e.action;_r(t.element,"multiple",n.value)},Rr=function(e){var t=e.root,n=e.action;_r(t.element,"webkitdirectory",n.value)},Sr=function(e){var t=e.root,n=t.query("GET_DISABLED"),r=t.query("GET_ALLOW_BROWSE"),o=n||!r;_r(t.element,"disabled",o)},Pr=function(e){var t=e.root;e.action.value?0===t.query("GET_TOTAL_ITEMS")&&_r(t.element,"required",!0):_r(t.element,"required",!1)},Cr=function(e){var t=e.root,n=e.action;_r(t.element,"capture",!!n.value,!0===n.value?"":n.value)},Ar=function(e){var t=e.root,n=t.element;t.query("GET_TOTAL_ITEMS")>0?(_r(n,"required",!1),_r(n,"name",!1)):(_r(n,"name",!0,t.query("GET_NAME")),t.query("GET_CHECK_VALIDITY")&&n.setCustomValidity(""),t.query("GET_REQUIRED")&&_r(n,"required",!0))},Dr=j({tag:"input",name:"browser",ignoreRect:!0,ignoreRectUpdate:!0,attributes:{type:"file"},create:Ir,destroy:function(e){var t=e.root;t.element.removeEventListener("change",t.ref.handleChange)},write:G({DID_LOAD_ITEM:Ar,DID_REMOVE_ITEM:Ar,DID_THROW_ITEM_INVALID:function(e){var t=e.root;t.query("GET_CHECK_VALIDITY")&&t.element.setCustomValidity(t.query("GET_LABEL_INVALID_FIELD"))},DID_SET_DISABLED:Sr,DID_SET_ALLOW_BROWSE:Sr,DID_SET_ALLOW_DIRECTORIES_ONLY:Rr,DID_SET_ALLOW_MULTIPLE:wr,DID_SET_ACCEPTED_FILE_TYPES:Or,DID_SET_CAPTURE_METHOD:Cr,DID_SET_REQUIRED:Pr})}),xr={ENTER:13,SPACE:32},Lr=function(e){var t=e.root,n=e.props,r=fn("label");c(r,"for","filepond--browser-"+n.id),c(r,"id","filepond--drop-label-"+n.id),c(r,"aria-hidden","true"),t.ref.handleKeyDown=function(e){(e.keyCode===xr.ENTER||e.keyCode===xr.SPACE)&&(e.preventDefault(),t.ref.label.click())},t.ref.handleClick=function(e){e.target===r||r.contains(e.target)||t.ref.label.click()},r.addEventListener("keydown",t.ref.handleKeyDown),t.element.addEventListener("click",t.ref.handleClick),Nr(r,n.caption),t.appendChild(r),t.ref.label=r},Nr=function(e,t){e.innerHTML=t;var n=e.querySelector(".filepond--label-action");return n&&c(n,"tabindex","0"),t},Mr=j({name:"drop-label",ignoreRect:!0,create:Lr,destroy:function(e){var t=e.root;t.ref.label.addEventListener("keydown",t.ref.handleKeyDown),t.element.removeEventListener("click",t.ref.handleClick)},write:G({DID_SET_LABEL_IDLE:function(e){var t=e.root,n=e.action;Nr(t.ref.label,n.value)}}),mixins:{styles:["opacity","translateX","translateY"],animations:{opacity:{type:"tween",duration:150},translateX:"spring",translateY:"spring"}}}),jr=j({name:"drip-blob",ignoreRect:!0,mixins:{styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}}}}),kr=function(e){var t=e.root,n=.5*t.rect.element.width,r=.5*t.rect.element.height;t.ref.blob=t.appendChildView(t.createChildView(jr,{opacity:0,scaleX:2.5,scaleY:2.5,translateX:n,translateY:r}))},Gr=function(e){var t=e.root,n=e.props,r=e.actions;qr({root:t,props:n,actions:r});var o=t.ref.blob;0===r.length&&o&&0===o.opacity&&(t.removeChildView(o),t.ref.blob=null)},qr=G({DID_DRAG:function(e){var t=e.root,n=e.action;t.ref.blob?(t.ref.blob.translateX=n.position.scopeLeft,t.ref.blob.translateY=n.position.scopeTop,t.ref.blob.scaleX=1,t.ref.blob.scaleY=1,t.ref.blob.opacity=1):kr({root:t})},DID_DROP:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.scaleX=2.5,t.ref.blob.scaleY=2.5,t.ref.blob.opacity=0)},DID_END_DRAG:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.opacity=0)}}),Fr=j({ignoreRect:!0,ignoreRectUpdate:!0,name:"drip",write:Gr}),Ur=function(e){return e.root.ref.fields={}},Br=function(e,t){return e.ref.fields[t]},Vr=function(e){e.query("GET_ACTIVE_ITEMS").forEach((function(t){e.ref.fields[t.id]&&e.element.appendChild(e.ref.fields[t.id])}))},zr=function(e){var t=e.root;return Vr(t)},Wr=G({DID_SET_DISABLED:function(e){var t=e.root;t.element.disabled=t.query("GET_DISABLED")},DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=fn("input");r.type="hidden",r.name=t.query("GET_NAME"),r.disabled=t.query("GET_DISABLED"),t.ref.fields[n.id]=r,Vr(t)},DID_LOAD_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&null!==n.serverFileReference&&(r.value=n.serverFileReference)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(r.parentNode.removeChild(r),delete t.ref.fields[n.id])},DID_DEFINE_VALUE:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(null===n.value?r.removeAttribute("value"):r.value=n.value,Vr(t))},DID_REORDER_ITEMS:zr,DID_SORT_ITEMS:zr}),Hr=j({tag:"fieldset",name:"data",create:Ur,write:Wr,ignoreRect:!0}),Yr=function(e){return"getRootNode"in e?e.getRootNode():document},Xr=["jpg","jpeg","png","gif","bmp","webp","svg","tiff"],Qr=["css","csv","html","txt"],Kr={zip:"zip|compressed",epub:"application/epub+zip"},$r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e=e.toLowerCase(),Xr.includes(e)?"image/"+("jpg"===e?"jpeg":"svg"===e?"svg+xml":e):Qr.includes(e)?"text/"+e:Kr[e]||""},Jr=function(t){return new e((function(e,n){var r=uo(t);if(r.length&&!Zr(t))return e(r);eo(t).then(e)}))},Zr=function(e){return!!e.files&&e.files.length>0},eo=function(t){return new e((function(n,r){var o=(t.items?Array.from(t.items):[]).filter((function(e){return to(e)})).map((function(e){return no(e)}));o.length?e.all(o).then((function(e){var t=[];e.forEach((function(e){t.push.apply(t,e)})),n(t.filter((function(e){return e})).map((function(e){return e._relativePath||(e._relativePath=e.webkitRelativePath),e})))})).catch(console.error):n(t.files?Array.from(t.files):[])}))},to=function(e){if(ao(e)){var t=co(e);if(t)return t.isFile||t.isDirectory}return"file"===e.kind},no=function(t){return new e((function(e,n){io(t)?ro(co(t)).then(e).catch(n):e([t.getAsFile()])}))},ro=function(t){return new e((function(e,n){var r=[],o=0,i=0,a=function(){0===i&&0===o&&e(r)};!function e(t){o++;var c=t.createReader();!function t(){c.readEntries((function(n){if(0===n.length)return o--,void a();n.forEach((function(t){t.isDirectory?e(t):(i++,t.file((function(e){var n=oo(e);t.fullPath&&(n._relativePath=t.fullPath),r.push(n),i--,a()})))})),t()}),n)}()}(t)}))},oo=function(e){if(e.type.length)return e;var t=e.lastModifiedDate,n=e.name;return(e=e.slice(0,e.size,$r(dt(e.name)))).name=n,e.lastModifiedDate=t,e},io=function(e){return ao(e)&&(co(e)||{}).isDirectory},ao=function(e){return"webkitGetAsEntry"in e},co=function(e){return e.webkitGetAsEntry()},uo=function(e){var t=[];try{if((t=lo(e)).length)return t;t=so(e)}catch(e){}return t},so=function(e){var t=e.getData("url");return"string"==typeof t&&t.length?[t]:[]},lo=function(e){var t=e.getData("text/html");if("string"==typeof t&&t.length){var n=t.match(/src\s*=\s*"(.+?)"/);if(n)return[n[1]]}return[]},fo=[],po=function(e){return{pageLeft:e.pageX,pageTop:e.pageY,scopeLeft:e.offsetX||e.layerX,scopeTop:e.offsetY||e.layerY}},ho=function(e,t,n){var r=vo(t),o={element:e,filterElement:n,state:null,ondrop:function(){},onenter:function(){},ondrag:function(){},onexit:function(){},onload:function(){},allowdrop:function(){}};return o.destroy=r.addListener(o),o},vo=function(e){var t=fo.find((function(t){return t.element===e}));if(t)return t;var n=mo(e);return fo.push(n),n},mo=function(e){var t=[],n={dragenter:_o,dragover:To,dragleave:Oo,drop:Io},r={};i(n,(function(n,o){r[n]=o(e,t),e.addEventListener(n,r[n],!1)}));var o={element:e,addListener:function(a){return t.push(a),function(){t.splice(t.indexOf(a),1),0===t.length&&(fo.splice(fo.indexOf(o),1),i(n,(function(t){e.removeEventListener(t,r[t],!1)})))}}};return o},go=function(e,t){return"elementFromPoint"in e||(e=document),e.elementFromPoint(t.x,t.y)},yo=function(e,t){var n=Yr(t),r=go(n,{x:e.pageX-window.pageXOffset,y:e.pageY-window.pageYOffset});return r===t||t.contains(r)},Eo=null,bo=function(e,t){try{e.dropEffect=t}catch(e){}},_o=function(e,t){return function(e){e.preventDefault(),Eo=e.target,t.forEach((function(t){var n=t.element,r=t.onenter;yo(e,n)&&(t.state="enter",r(po(e)))}))}},To=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Jr(n).then((function(r){var o=!1;t.some((function(t){var i=t.filterElement,a=t.element,c=t.onenter,u=t.onexit,s=t.ondrag,l=t.allowdrop;bo(n,"copy");var f=l(r);if(f)if(yo(e,a)){if(o=!0,null===t.state)return t.state="enter",void c(po(e));if(t.state="over",i&&!f)return void bo(n,"none");s(po(e))}else i&&!o&&bo(n,"none"),t.state&&(t.state=null,u(po(e)));else bo(n,"none")}))}))}},Io=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Jr(n).then((function(n){t.forEach((function(t){var r=t.filterElement,o=t.element,i=t.ondrop,a=t.onexit,c=t.allowdrop;if(t.state=null,!r||yo(e,o))return c(n)?void i(po(e),n):a(po(e))}))}))}},Oo=function(e,t){return function(e){Eo===e.target&&t.forEach((function(t){var n=t.onexit;t.state=null,n(po(e))}))}},wo=function(e,t,n){e.classList.add("filepond--hopper");var r=n.catchesDropsOnPage,o=n.requiresDropOnElement,i=n.filterItems,a=void 0===i?function(e){return e}:i,c=ho(e,r?document.documentElement:e,o),u="",s="";c.allowdrop=function(e){return t(a(e))},c.ondrop=function(e,n){var r=a(n);t(r)?(s="drag-drop",l.onload(r,e)):l.ondragend(e)},c.ondrag=function(e){l.ondrag(e)},c.onenter=function(e){s="drag-over",l.ondragstart(e)},c.onexit=function(e){s="drag-exit",l.ondragend(e)};var l={updateHopperState:function(){u!==s&&(e.dataset.hopperState=s,u=s)},onload:function(){},ondragstart:function(){},ondrag:function(){},ondragend:function(){},destroy:function(){c.destroy()}};return l},Ro=!1,So=[],Po=function(e){var t=document.activeElement;if(t&&/textarea|input/i.test(t.nodeName)){for(var n=!1,r=t;r!==document.body;){if(r.classList.contains("filepond--root")){n=!0;break}r=r.parentNode}if(!n)return}Jr(e.clipboardData).then((function(e){e.length&&So.forEach((function(t){return t(e)}))}))},Co=function(e){So.includes(e)||(So.push(e),Ro||(Ro=!0,document.addEventListener("paste",Po)))},Ao=function(e){Ce(So,So.indexOf(e)),0===So.length&&(document.removeEventListener("paste",Po),Ro=!1)},Do=function(){var e=function(e){t.onload(e)},t={destroy:function(){Ao(e)},onload:function(){}};return Co(e),t},xo=null,Lo=null,No=[],Mo=function(e,t){e.element.textContent=t},jo=function(e){e.element.textContent=""},ko=function(e,t,n){var r=e.query("GET_TOTAL_ITEMS");Mo(e,n+" "+t+", "+r+" "+(1===r?e.query("GET_LABEL_FILE_COUNT_SINGULAR"):e.query("GET_LABEL_FILE_COUNT_PLURAL"))),clearTimeout(Lo),Lo=setTimeout((function(){jo(e)}),1500)},Go=function(e){return e.element.parentNode.contains(document.activeElement)},qo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_ABORTED");Mo(t,r+" "+o)},Fo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename;Mo(t,n.status.main+" "+r+" "+n.status.sub)},Uo=j({create:function(e){var t=e.root,n=e.props;t.element.id="filepond--assistant-"+n.id,c(t.element,"role","status"),c(t.element,"aria-live","polite"),c(t.element,"aria-relevant","additions")},ignoreRect:!0,ignoreRectUpdate:!0,write:G({DID_LOAD_ITEM:function(e){var t=e.root,n=e.action;if(Go(t)){t.element.textContent="";var r=t.query("GET_ITEM",n.id);No.push(r.filename),clearTimeout(xo),xo=setTimeout((function(){ko(t,No.join(", "),t.query("GET_LABEL_FILE_ADDED")),No.length=0}),750)}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action;if(Go(t)){var r=n.item;ko(t,r.filename,t.query("GET_LABEL_FILE_REMOVED"))}},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_COMPLETE");Mo(t,r+" "+o)},DID_ABORT_ITEM_PROCESSING:qo,DID_REVERT_ITEM_PROCESSING:qo,DID_THROW_ITEM_REMOVE_ERROR:Fo,DID_THROW_ITEM_LOAD_ERROR:Fo,DID_THROW_ITEM_INVALID:Fo,DID_THROW_ITEM_PROCESSING_ERROR:Fo}),tag:"span",name:"assistant"}),Bo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.replace(new RegExp(t+".","g"),(function(e){return e.charAt(1).toUpperCase()}))},Vo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Date.now(),o=null;return function(){for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];clearTimeout(o);var u=Date.now()-r,s=function(){r=Date.now(),e.apply(void 0,a)};u<t?n||(o=setTimeout(s,t-u)):s()}},zo=1e6,Wo=function(e){return e.preventDefault()},Ho=function(e){var t=e.root,n=e.props,r=t.query("GET_ID");r&&(t.element.id=r);var o=t.query("GET_CLASS_NAME");o&&o.split(" ").filter((function(e){return e.length})).forEach((function(e){t.element.classList.add(e)})),t.ref.label=t.appendChildView(t.createChildView(Mr,Object.assign({},n,{translateY:null,caption:t.query("GET_LABEL_IDLE")}))),t.ref.list=t.appendChildView(t.createChildView(br,{translateY:null})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"panel-root"})),t.ref.assistant=t.appendChildView(t.createChildView(Uo,Object.assign({},n))),t.ref.data=t.appendChildView(t.createChildView(Hr,Object.assign({},n))),t.ref.measure=fn("div"),t.ref.measure.style.height="100%",t.element.appendChild(t.ref.measure),t.ref.bounds=null,t.query("GET_STYLES").filter((function(e){return!B(e.value)})).map((function(e){var n=e.name,r=e.value;t.element.dataset[n]=r})),t.ref.widthPrevious=null,t.ref.widthUpdated=Vo((function(){t.ref.updateHistory=[],t.dispatch("DID_RESIZE_ROOT")}),250),t.ref.previousAspectRatio=null,t.ref.updateHistory=[];var i=window.matchMedia("(pointer: fine) and (hover: hover)").matches,a="PointerEvent"in window;t.query("GET_ALLOW_REORDER")&&a&&!i&&(t.element.addEventListener("touchmove",Wo,{passive:!1}),t.element.addEventListener("gesturestart",Wo))},Yo=function(e){var t=e.root,n=e.props,r=e.actions;if(ni({root:t,props:n,actions:r}),r.filter((function(e){return/^DID_SET_STYLE_/.test(e.type)})).filter((function(e){return!B(e.data.value)})).map((function(e){var n=e.type,r=e.data,o=Bo(n.substr(8).toLowerCase(),"_");t.element.dataset[o]=r.value,t.invalidateLayout()})),!t.rect.element.hidden){t.rect.element.width!==t.ref.widthPrevious&&(t.ref.widthPrevious=t.rect.element.width,t.ref.widthUpdated());var o=t.ref.bounds;o||(o=t.ref.bounds=Ko(t),t.element.removeChild(t.ref.measure),t.ref.measure=null);var i=t.ref,a=i.hopper,c=i.label,u=i.list,s=i.panel;a&&a.updateHopperState();var l=t.query("GET_PANEL_ASPECT_RATIO"),f=t.query("GET_ALLOW_MULTIPLE"),p=t.query("GET_TOTAL_ITEMS"),d=p===(f?t.query("GET_MAX_FILES")||zo:1),h=r.find((function(e){return"DID_ADD_ITEM"===e.type}));if(d&&h){var v=h.data.interactionMethod;c.opacity=0,f?c.translateY=-40:v===Ee.API?c.translateX=40:v===Ee.BROWSE?c.translateY=40:c.translateY=30}else d||(c.opacity=1,c.translateX=0,c.translateY=0);var m=Xo(t),g=Qo(t),y=c.rect.element.height,E=!f||d?0:y,b=d?u.rect.element.marginTop:0,_=0===p?0:u.rect.element.marginBottom,T=E+b+g.visual+_,I=E+b+g.bounds+_;if(u.translateY=Math.max(0,E-u.rect.element.marginTop)-m.top,l){var O=t.rect.element.width,w=O*l;l!==t.ref.previousAspectRatio&&(t.ref.previousAspectRatio=l,t.ref.updateHistory=[]);var R=t.ref.updateHistory;R.push(O);var S=2;if(R.length>2*S)for(var P=R.length,C=P-10,A=0,D=P;D>=C;D--)if(R[D]===R[D-2]&&A++,A>=S)return;s.scalable=!1,s.height=w;var x=w-E-(_-m.bottom)-(d?b:0);g.visual>x?u.overflow=x:u.overflow=null,t.height=w}else if(o.fixedHeight){s.scalable=!1;var L=o.fixedHeight-E-(_-m.bottom)-(d?b:0);g.visual>L?u.overflow=L:u.overflow=null}else if(o.cappedHeight){var N=T>=o.cappedHeight,M=Math.min(o.cappedHeight,T);s.scalable=!0,s.height=N?M:M-m.top-m.bottom;var j=M-E-(_-m.bottom)-(d?b:0);T>o.cappedHeight&&g.visual>j?u.overflow=j:u.overflow=null,t.height=Math.min(o.cappedHeight,I-m.top-m.bottom)}else{var k=p>0?m.top+m.bottom:0;s.scalable=!0,s.height=Math.max(y,T-k),t.height=Math.max(y,I-k)}}},Xo=function(e){var t=e.ref.list.childViews[0].childViews[0];return t?{top:t.rect.element.marginTop,bottom:t.rect.element.marginBottom}:{top:0,bottom:0}},Qo=function(e){var t=0,n=0,r=e.ref.list,o=r.childViews[0],i=o.childViews.filter((function(e){return e.rect.element.height})),a=e.query("GET_ACTIVE_ITEMS").map((function(e){return i.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));if(0===a.length)return{visual:t,bounds:n};var c=o.rect.element.width,u=sr(o,a,r.dragCoordinates),s=a[0].rect.element,l=s.marginTop+s.marginBottom,f=s.marginLeft+s.marginRight,p=s.width+f,d=s.height+l,h=void 0!==u&&u>=0?1:0,v=a.find((function(e){return e.markedForRemoval&&e.opacity<.45}))?-1:0,m=a.length+h+v,g=Math.round(c/p);return 1===g?a.forEach((function(e){var r=e.rect.element.height+l;n+=r,t+=r*e.opacity})):(n=Math.ceil(m/g)*d,t=n),{visual:t,bounds:n}},Ko=function(e){var t=e.ref.measureHeight||null;return{cappedHeight:parseInt(e.style.maxHeight,10)||null,fixedHeight:0===t?null:t}},$o=function(e,t){var n=e.query("GET_ALLOW_REPLACE"),r=e.query("GET_ALLOW_MULTIPLE"),o=e.query("GET_TOTAL_ITEMS"),i=e.query("GET_MAX_FILES"),a=t.length;return!r&&a>1||!!($(i=r||n?i:1)&&o+a>i)&&(e.dispatch("DID_THROW_MAX_FILES",{source:t,error:Lt("warning",0,"Max files")}),!0)},Jo=function(e,t,n){var r=e.childViews[0];return sr(r,t,{left:n.scopeLeft-r.rect.element.left,top:n.scopeTop-(e.rect.outer.top+e.rect.element.marginTop+e.rect.element.scrollTop)})},Zo=function(e){var t=e.query("GET_ALLOW_DROP"),n=e.query("GET_DISABLED"),r=t&&!n;if(r&&!e.ref.hopper){var o=wo(e.element,(function(t){if($o(e,t))return!1;var n=e.query("GET_BEFORE_DROP_FILE")||function(){return!0};return!e.query("GET_DROP_VALIDATION")||t.every((function(t){return ze("ALLOW_HOPPER_ITEM",t,{query:e.query}).every((function(e){return!0===e}))&&n(t)}))}),{filterItems:function(t){var n=e.query("GET_IGNORED_FILES");return t.filter((function(e){return!Xt(e)||!n.includes(e.name.toLowerCase())}))},catchesDropsOnPage:e.query("GET_DROP_ON_PAGE"),requiresDropOnElement:e.query("GET_DROP_ON_ELEMENT")});o.onload=function(t,n){var r=e.ref.list.childViews[0].childViews.filter((function(e){return e.rect.element.height})),o=e.query("GET_ACTIVE_ITEMS").map((function(e){return r.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));e.dispatch("ADD_ITEMS",{items:t,index:Jo(e.ref.list,o,n),interactionMethod:Ee.DROP}),e.dispatch("DID_DROP",{position:n}),e.dispatch("DID_END_DRAG",{position:n})},o.ondragstart=function(t){e.dispatch("DID_START_DRAG",{position:t})},o.ondrag=Vo((function(t){e.dispatch("DID_DRAG",{position:t})})),o.ondragend=function(t){e.dispatch("DID_END_DRAG",{position:t})},e.ref.hopper=o,e.ref.drip=e.appendChildView(e.createChildView(Fr))}else!r&&e.ref.hopper&&(e.ref.hopper.destroy(),e.ref.hopper=null,e.removeChildView(e.ref.drip))},ei=function(e,t){var n=e.query("GET_ALLOW_BROWSE"),r=e.query("GET_DISABLED"),o=n&&!r;o&&!e.ref.browser?e.ref.browser=e.appendChildView(e.createChildView(Dr,Object.assign({},t,{onload:function(t){if($o(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:Ee.BROWSE})}})),0):!o&&e.ref.browser&&(e.removeChildView(e.ref.browser),e.ref.browser=null)},ti=function(e){var t=e.query("GET_ALLOW_PASTE"),n=e.query("GET_DISABLED"),r=t&&!n;r&&!e.ref.paster?(e.ref.paster=Do(),e.ref.paster.onload=function(t){e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:Ee.PASTE})}):!r&&e.ref.paster&&(e.ref.paster.destroy(),e.ref.paster=null)},ni=G({DID_SET_ALLOW_BROWSE:function(e){var t=e.root,n=e.props;ei(t,n)},DID_SET_ALLOW_DROP:function(e){var t=e.root;Zo(t)},DID_SET_ALLOW_PASTE:function(e){var t=e.root;ti(t)},DID_SET_DISABLED:function(e){var t=e.root,n=e.props;Zo(t),ti(t),ei(t,n),t.query("GET_DISABLED")?t.element.dataset.disabled="disabled":t.element.removeAttribute("data-disabled")}}),ri=j({name:"root",read:function(e){var t=e.root;t.ref.measure&&(t.ref.measureHeight=t.ref.measure.offsetHeight)},create:Ho,write:Yo,destroy:function(e){var t=e.root;t.ref.paster&&t.ref.paster.destroy(),t.ref.hopper&&t.ref.hopper.destroy(),t.element.removeEventListener("touchmove",Wo),t.element.removeEventListener("gesturestart",Wo)},mixins:{styles:["height"]}}),oi=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=null,o=Ye(),i=r(he(o),[at,ye(o)],[sn,ge(o)]);i.dispatch("SET_OPTIONS",{options:t});var c=function(){document.hidden||i.dispatch("KICK")};document.addEventListener("visibilitychange",c);var u=null,s=!1,l=!1,f=null,p=null,d=function(){s||(s=!0),clearTimeout(u),u=setTimeout((function(){s=!1,f=null,p=null,l&&(l=!1,i.dispatch("DID_STOP_RESIZE"))}),500)};window.addEventListener("resize",d);var h=ri(i,{id:be()}),v=!1,m=!1,g={_read:function(){s&&(p=window.innerWidth,f||(f=p),l||p===f||(i.dispatch("DID_START_RESIZE"),l=!0)),m&&v&&(v=null===h.element.offsetParent),v||(h._read(),m=h.rect.element.hidden)},_write:function(e){var t=i.processActionQueue().filter((function(e){return!/^SET_/.test(e.type)}));v&&!t.length||(T(t),v=h._write(e,t,l),Me(i.query("GET_ITEMS")),v&&i.processDispatchQueue())}},y=function(e){return function(t){var n={type:e};if(!t)return n;if(t.hasOwnProperty("error")&&(n.error=t.error?Object.assign({},t.error):null),t.status&&(n.status=Object.assign({},t.status)),t.file&&(n.output=t.file),t.source)n.file=t.source;else if(t.item||t.id){var r=t.item?t.item:i.query("GET_ITEM",t.id);n.file=r?Ne(r):null}return t.items&&(n.items=t.items.map(Ne)),/progress/.test(e)&&(n.progress=t.progress),t.hasOwnProperty("origin")&&t.hasOwnProperty("target")&&(n.origin=t.origin,n.target=t.target),n}},E={DID_DESTROY:y("destroy"),DID_INIT:y("init"),DID_THROW_MAX_FILES:y("warning"),DID_INIT_ITEM:y("initfile"),DID_START_ITEM_LOAD:y("addfilestart"),DID_UPDATE_ITEM_LOAD_PROGRESS:y("addfileprogress"),DID_LOAD_ITEM:y("addfile"),DID_THROW_ITEM_INVALID:[y("error"),y("addfile")],DID_THROW_ITEM_LOAD_ERROR:[y("error"),y("addfile")],DID_THROW_ITEM_REMOVE_ERROR:[y("error"),y("removefile")],DID_PREPARE_OUTPUT:y("preparefile"),DID_START_ITEM_PROCESSING:y("processfilestart"),DID_UPDATE_ITEM_PROCESS_PROGRESS:y("processfileprogress"),DID_ABORT_ITEM_PROCESSING:y("processfileabort"),DID_COMPLETE_ITEM_PROCESSING:y("processfile"),DID_COMPLETE_ITEM_PROCESSING_ALL:y("processfiles"),DID_REVERT_ITEM_PROCESSING:y("processfilerevert"),DID_THROW_ITEM_PROCESSING_ERROR:[y("error"),y("processfile")],DID_REMOVE_ITEM:y("removefile"),DID_UPDATE_ITEMS:y("updatefiles"),DID_ACTIVATE_ITEM:y("activatefile"),DID_REORDER_ITEMS:y("reorderfiles")},b=function(e){var t=Object.assign({pond:M},e);delete t.type,h.element.dispatchEvent(new CustomEvent("FilePond:"+e.type,{detail:t,bubbles:!0,cancelable:!0,composed:!0}));var n=[];e.hasOwnProperty("error")&&n.push(e.error),e.hasOwnProperty("file")&&n.push(e.file);var r=["type","error","file"];Object.keys(e).filter((function(e){return!r.includes(e)})).forEach((function(t){return n.push(e[t])})),M.fire.apply(M,[e.type].concat(n));var o=i.query("GET_ON"+e.type.toUpperCase());o&&o.apply(void 0,n)},T=function(e){e.length&&e.filter((function(e){return E[e.type]})).forEach((function(e){var t=E[e.type];(Array.isArray(t)?t:[t]).forEach((function(t){"DID_INIT_ITEM"===e.type?b(t(e.data)):setTimeout((function(){b(t(e.data))}),0)}))}))},I=function(e){return i.dispatch("SET_OPTIONS",{options:e})},O=function(e){return i.query("GET_ACTIVE_ITEM",e)},w=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PREPARE",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},R=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new e((function(e,r){C([{source:t,options:n}],{index:n.index}).then((function(t){return e(t&&t[0])})).catch(r)}))},S=function(e){return e.file&&e.id},P=function(e,t){return"object"!=typeof e||S(e)||t||(t=e,e=void 0),i.dispatch("REMOVE_ITEM",Object.assign({},t,{query:e})),null===i.query("GET_ACTIVE_ITEM",e)},C=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new e((function(e,t){var r=[],o={};if(U(n[0]))r.push.apply(r,n[0]),Object.assign(o,n[1]||{});else{var a=n[n.length-1];"object"!=typeof a||a instanceof Blob||Object.assign(o,n.pop()),r.push.apply(r,n)}i.dispatch("ADD_ITEMS",{items:r,index:o.index,interactionMethod:Ee.API,success:e,failure:t})}))},A=function(){return i.query("GET_ACTIVE_ITEMS")},D=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PROCESSING",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},x=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n,i=o.length?o:A();return e.all(i.map(w))},L=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n;if(!o.length){var i=A().filter((function(e){return!(e.status===je.IDLE&&e.origin===ke.LOCAL)&&e.status!==je.PROCESSING&&e.status!==je.PROCESSING_COMPLETE&&e.status!==je.PROCESSING_REVERT_ERROR}));return e.all(i.map(D))}return e.all(o.map(D))},N=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o,i=Array.isArray(n[0])?n[0]:n;"object"==typeof i[i.length-1]?o=i.pop():Array.isArray(n[0])&&(o=n[1]);var a=A();return i.length?i.map((function(e){return _(e)?a[e]?a[e].id:null:e})).filter((function(e){return e})).map((function(e){return P(e,o)})):e.all(a.map((function(e){return P(e,o)})))},M=Object.assign({},De(),{},g,{},me(i,o),{setOptions:I,addFile:R,addFiles:C,getFile:O,processFile:D,prepareFile:w,removeFile:P,moveFile:function(e,t){return i.dispatch("MOVE_ITEM",{query:e,index:t})},getFiles:A,processFiles:L,removeFiles:N,prepareFiles:x,sort:function(e){return i.dispatch("SORT",{compare:e})},browse:function(){var e=h.element.querySelector("input[type=file]");e&&e.click()},destroy:function(){M.fire("destroy",h.element),i.dispatch("ABORT_ALL"),h._destroy(),window.removeEventListener("resize",d),document.removeEventListener("visibilitychange",c),i.dispatch("DID_DESTROY")},insertBefore:function(e){return q(h.element,e)},insertAfter:function(e){return F(h.element,e)},appendTo:function(e){return e.appendChild(h.element)},replaceElement:function(e){q(h.element,e),e.parentNode.removeChild(e),n=e},restoreElement:function(){n&&(F(n,h.element),h.element.parentNode.removeChild(h.element),n=null)},isAttachedTo:function(e){return h.element===e||n===e},element:{get:function(){return h.element}},status:{get:function(){return i.query("GET_STATUS")}}});return i.dispatch("DID_INIT"),a(M)},ii=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return i(Ye(),(function(e,n){t[e]=n[0]})),oi(Object.assign({},t,{},e))},ai=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},ci=function(e){return Bo(e.replace(/^data-/,""))},ui=function e(t,n){i(n,(function(n,r){i(t,(function(e,o){var i=new RegExp(n);if(i.test(e)&&(delete t[e],!1!==r))if(Y(r))t[r]=o;else{var a=r.group;ie(r)&&!t[a]&&(t[a]={}),t[a][ai(e.replace(i,""))]=o}})),r.mapping&&e(t[r.group],r.mapping)}))},si=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];i(e.attributes,(function(t){n.push(e.attributes[t])}));var r=n.filter((function(e){return e.name})).reduce((function(t,n){var r=c(e,n.name);return t[ci(n.name)]=r===n.name||r,t}),{});return ui(r,t),r},li=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={"^class$":"className","^multiple$":"allowMultiple","^capture$":"captureMethod","^webkitdirectory$":"allowDirectoriesOnly","^server":{group:"server",mapping:{"^process":{group:"process"},"^revert":{group:"revert"},"^fetch":{group:"fetch"},"^restore":{group:"restore"},"^load":{group:"load"}}},"^type$":!1,"^files$":!1};ze("SET_ATTRIBUTE_TO_OPTION_MAP",n);var r=Object.assign({},t),o=si("FIELDSET"===e.nodeName?e.querySelector("input[type=file]"):e,n);Object.keys(o).forEach((function(e){ie(o[e])?(ie(r[e])||(r[e]={}),Object.assign(r[e],o[e])):r[e]=o[e]})),r.files=(t.files||[]).concat(Array.from(e.querySelectorAll("input:not([type=file])")).map((function(e){return{source:e.value,options:{type:e.dataset.type}}})));var i=ii(r);return e.files&&Array.from(e.files).forEach((function(e){i.addFile(e)})),i.replaceElement(e),i},fi=function(){return n(arguments.length<=0?void 0:arguments[0])?li.apply(void 0,arguments):ii.apply(void 0,arguments)},pi=["fire","_read","_write"],di=function(e){var t={};return xe(e,t,pi),t},hi=function(e,t){return e.replace(/(?:{([a-zA-Z]+)})/g,(function(e,n){return t[n]}))},vi=function(e){var t=new Blob(["(",e.toString(),")()"],{type:"application/javascript"}),n=URL.createObjectURL(t),r=new Worker(n);return{transfer:function(e,t){},post:function(e,t,n){var o=be();r.onmessage=function(e){e.data.id===o&&t(e.data.message)},r.postMessage({id:o,message:e},n)},terminate:function(){r.terminate(),URL.revokeObjectURL(n)}}},mi=function(t){return new e((function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(e){n(e)},r.src=t}))},gi=function(e,t){var n=e.slice(0,e.size,e.type);return n.lastModifiedDate=e.lastModifiedDate,n.name=t,n},yi=function(e){return gi(e,e.name)},Ei=[],bi=function(e){if(!Ei.includes(e)){Ei.push(e);var t=e({addFilter:We,utils:{Type:Ue,forin:i,isString:Y,isFile:Xt,toNaturalFileSize:yn,replaceInString:hi,getExtensionFromFilename:dt,getFilenameWithoutExtension:Ht,guesstimateMimeType:$r,getFileFromBlob:gt,getFilenameFromURL:pt,createRoute:G,createWorker:vi,createView:j,createItemAPI:Ne,loadImage:mi,copyFile:yi,renameFile:gi,createBlob:Et,applyFilterChain:Ve,text:pn,getNumericAspectRatioFromString:$e},views:{fileActionButton:gn}});He(t.options)}},_i=function(){return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)},Ti=function(){return"Promise"in window},Ii=function(){return"slice"in Blob.prototype},Oi=function(){return"URL"in window&&"createObjectURL"in window.URL},wi=function(){return"visibilityState"in document},Ri=function(){return"performance"in window},Si=function(){return"supports"in(window.CSS||{})},Pi=function(){return/MSIE|Trident/.test(window.navigator.userAgent)},Ci=(Mn=m()&&!_i()&&wi()&&Ti()&&Ii()&&Oi()&&Ri()&&(Si()||Pi()),function(){return Mn}),Ai={apps:[]},Di="filepond",xi=function(){};if(t.Status={},t.FileStatus={},t.FileOrigin={},t.OptionTypes={},t.create=xi,t.destroy=xi,t.parse=xi,t.find=xi,t.registerPlugin=xi,t.getOptions=xi,t.setOptions=xi,Ci()){k((function(){Ai.apps.forEach((function(e){return e._read()}))}),(function(e){Ai.apps.forEach((function(t){return t._write(e)}))}));var Li=function e(){document.dispatchEvent(new CustomEvent("FilePond:loaded",{detail:{supported:Ci,create:t.create,destroy:t.destroy,parse:t.parse,find:t.find,registerPlugin:t.registerPlugin,setOptions:t.setOptions}})),document.removeEventListener("DOMContentLoaded",e)};"loading"!==document.readyState?setTimeout((function(){return Li()}),0):document.addEventListener("DOMContentLoaded",Li);var Ni=function(){return i(Ye(),(function(e,n){t.OptionTypes[e]=n[1]}))};t.Status=Object.assign({},Ze),t.FileOrigin=Object.assign({},ke),t.FileStatus=Object.assign({},je),t.OptionTypes={},Ni(),t.create=function(){var e=fi.apply(void 0,arguments);return e.on("destroy",t.destroy),Ai.apps.push(e),di(e)},t.destroy=function(e){var t=Ai.apps.findIndex((function(t){return t.isAttachedTo(e)}));return t>=0&&(Ai.apps.splice(t,1)[0].restoreElement(),!0)},t.parse=function(e){return Array.from(e.querySelectorAll("."+Di)).filter((function(e){return!Ai.apps.find((function(t){return t.isAttachedTo(e)}))})).map((function(e){return t.create(e)}))},t.find=function(e){var t=Ai.apps.find((function(t){return t.isAttachedTo(e)}));return t?di(t):null},t.registerPlugin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(bi),Ni()},t.getOptions=function(){var e={};return i(Ye(),(function(t,n){e[t]=n[0]})),e},t.setOptions=function(e){return ie(e)&&(Ai.apps.forEach((function(t){t.setOptions(e)})),Xe(e)),t.getOptions()}}t.supported=Ci,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(11))},function(e,t,n){},,,,function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);n(14),n(127);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(129),n(87));n.d(t,"default",(function(){return c.a})),n.d(t,"Lightbox",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},,,,,,,function(e,t,n){var r=n(52),o=n(48),i=n(124),a=n(51),c=n(125),u=[].push,s=function(e){var t=1==e,n=2==e,s=3==e,l=4==e,f=6==e,p=5==e||f;return function(d,h,v,m){for(var g,y,E=i(d),b=o(E),_=r(h,v,3),T=a(b.length),I=0,O=m||c,w=t?O(d,T):n?O(d,0):void 0;T>I;I++)if((p||I in b)&&(y=_(g=b[I],I,E),e))if(t)w[I]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return I;case 2:u.call(w,g)}else if(l)return!1;return f?-1:s||l?l:w}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(e,t,n){e.exports=n(118)()},function(e,t,n){"use strict";var r=n(119);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,E=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function T(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case a:case u:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case d:case g:case m:case s:return e;default:return t}}case i:return t}}}function I(e){return T(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=u,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return I(e)||T(e)===f},t.isConcurrentMode=I,t.isContextConsumer=function(e){return T(e)===l},t.isContextProvider=function(e){return T(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return T(e)===d},t.isFragment=function(e){return T(e)===a},t.isLazy=function(e){return T(e)===g},t.isMemo=function(e){return T(e)===m},t.isPortal=function(e){return T(e)===i},t.isProfiler=function(e){return T(e)===u},t.isStrictMode=function(e){return T(e)===c},t.isSuspense=function(e){return T(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===u||e===c||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===l||e.$$typeof===d||e.$$typeof===E||e.$$typeof===b||e.$$typeof===_||e.$$typeof===y)},t.typeOf=T},,,,function(e,t,n){var r=n(50);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(13),o=n(126),i=n(53)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(49);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){n(128);var r=n(46);e.exports=r("Array","findIndex")},function(e,t,n){"use strict";var r=n(43),o=n(116).findIndex,i=n(44),a=n(45),c="findIndex",u=!0,s=a(c);c in[]&&Array(1).findIndex((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){},,,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return nt})),n.d(t,"ChoicesGuide",(function(){return nt})),n.d(t,"ChoicesGuideResult",(function(){return mt}));n(14),n(138),n(107);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(141),n(3)),u=n.n(c),s=n(1),l=n(2),f=n(25),p=n(5);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(i,e);var t,n,r,o=m(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).config.aspectRatio=t.config.aspectRatio||"16x9",t.questionId=e.data.id,t.state={value:50,isAnswered:!1},t.onChangeHandler=t.onChangeHandler.bind(y(t)),t.showLightbox=t.showLightbox.bind(y(t)),t}return t=i,(n=[{key:"onChangeHandler",value:function(e){var t=this,n={value:e,isAnswered:!0,error:void 0};this.setState(n,(function(){t.liveUpdates()}))}},{key:"isValid",value:function(){return!(void 0===(this.props.data||{}).value&&!this.state.isAnswered&&(this.setState({error:"Je hebt nog geen keuze gemaakt"}),1))}},{key:"getAnswer",value:function(){if(this.state.isAnswered){var e,t=this.props.data||{},n=(t.values,t.dimensions);try{n=JSON.parse(n)}catch(e){}return n=n||["x"],"number"==typeof this.state.value||"string"==typeof this.state.value?(e={},n.includes("x")&&(e.x=this.state.value),n.includes("y")&&(e.y=this.state.value),n.includes("z")&&(e.z=this.state.value)):(e={},n.includes("x")&&(e.x=this.state.value.x),n.includes("y")&&(e.y=this.state.value.y),n.includes("z")&&(e.z=this.state.value.z)),e}}},{key:"liveUpdates",value:function(){var e=new window.CustomEvent("osc-choices-guide-live-updates");document.dispatchEvent(e)}},{key:"showLightbox",value:function(e){var t=this.props.data||{},n=t.values&&t.values.A&&t.values.A.questionImage;n&&n.length&&(Array.isArray(n)||(n=[n]),n=n[0]);var r=t.values&&t.values.B&&t.values.B.questionImage;r&&r.length&&(Array.isArray(r)||(r=[r]),r=r[0]);var o=[n,r],i=o.findIndex((function(t){return t==e})),a=new window.CustomEvent("osc-show-light-box",{detail:{images:o,startIndex:i,aspectRatio:this.config.aspectRatio}});document.dispatchEvent(a)}},{key:"render",value:function(){var e=this,t=this,n=t.props.data||{},r=!1;t.state.error&&(r=!0);var o=t.state.isAnswered,i="object"==d(n.value)?n.value.x:void 0!==n.value?n.value:"not defined";"not defined"===i?i=this.state.value:o=!0;var a=null,c=n.images||[];if(c&&c.length){Array.isArray(c)||(c=[c]);var u=c[0];a=React.createElement("div",{className:"osc-question-image-container"},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:u}))}var s=null;if(n.moreInfo&&(n.moreInfo.title||n.moreInfo.text)){var l=n.moreInfo.title||"Geen titel",h=n.moreInfo.text||"Geen tekst";s=React.createElement("div",{className:"osc-accordeon"},React.createElement("div",{className:"osc-accordeon-item osc-closed"},React.createElement("div",{className:"osc-title osc-info"},l),React.createElement("div",{className:"osc-description"},h)))}var v=n.values&&n.values.A&&n.values.A.label||"A",m=n.values&&n.values.B&&n.values.B.label||"B",g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),s),y=null;switch(n.type){case"continuous":y=React.createElement("div",{className:"osc-question-selector"},React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:v}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:m}}));break;case"a-to-b":var E=n.values&&n.values.A&&n.values.A.labelBelow||"",b=n.values&&n.values.B&&n.values.B.labelBelow||"",_=n.values&&n.values.A&&n.values.A.questionText,T=n.values&&n.values.B&&n.values.B.questionText,I=null,O=null;_&&T&&(I=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},v),React.createElement("div",{className:"osc-question-description-labeled-text"},_)),O=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},m),React.createElement("div",{className:"osc-question-description-labeled-text"},T)),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),I,O,s));var w=n.values&&n.values.A&&n.values.A.questionImage;w&&w.length&&(Array.isArray(w)||(w=[w]),w=w[0]);var R=n.values&&n.values.B&&n.values.B.questionImage;R&&R.length&&(Array.isArray(R)||(R=[R]),R=R[0]);var S=null,P=null;w&&R&&(S=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-a"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-a"},v),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:w,onClick:function(){return t.showLightbox(w)}}))),P=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-b"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-b"},m),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:R,onClick:function(){return t.showLightbox(R)}})))),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),s,S,P,React.createElement("div",{style:{clear:"both",height:15}}),I,O),y=React.createElement("div",{className:"osc-question-selector"},React.createElement("div",{className:"osc-question-selector-label-a"},v),React.createElement("div",{className:"osc-question-selector-label-b"},m),React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:E||""}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:b||""}}));break;case"enum-radio":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(r,o){var i=parseInt(1e6*Math.random()),a=!1;return"object"==d(n.value)?(a=!0,Object.keys(n.value).forEach((function(e){n.value[e]!==r.value[e]&&(a=!1)}))):n.value===r.value&&(a=!0),"undefined"!=n.value?n.value:e.state.value,React.createElement("div",{key:"div-value-".concat(i),className:"osc-radio-container"},React.createElement("div",{className:"osc-radio-input".concat(a?" osc-radio-input-checked":"")},React.createElement("input",{name:"enum-radio-".concat(n.id),type:"radio",onChange:function(){return t.onChangeHandler(r.value)},key:"button-value-".concat(i)})),React.createElement("div",{className:"osc-radio-text"},r.text))})));break;case"enum-buttons":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(e,n){return React.createElement("button",{onClick:function(){return t.onChangeHandler(e.value)},key:"button-value-".concat(n)},e.text)})));break;default:y=React.createElement("div",null,"Type ",n.type," is (nog) niet geimplementeerd.")}var C=null;return r&&(C=React.createElement("div",{className:"osc-error-text"},t.state.error)),React.createElement("div",{id:t.props.config.divId,className:"osc-question osc-question-".concat(n.type).concat(r?" osc-error":"")},a,React.createElement("div",{className:"osc-question-content",id:t.props.config.divId+"-content"},React.createElement("h3",{className:"osc-question-title"}," ",n.title),g,y,C))}}])&&h(t.prototype,n),r&&h(t,r),i}(s.a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?T(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):T(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).noOfQuestionsToShow=t.config.noOfQuestionsToShow||1,t.questionElements=[],t.state={currentQuestion:0,values:{}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"isValid",value:function(){var e=this,t=!0,n=e.props.data.questions.slice(e.state.currentQuestion,e.state.currentQuestion+e.noOfQuestionsToShow),r=!1;return n.forEach((function(n,o){e.questionElements[o].isValid()||(r||setTimeout((function(){document.querySelector("#".concat(e.questionElements[o].config.divId,"-content")).scrollIntoView({behavior:"smooth"})}),250),r=!0,t=!1)})),t}},{key:"getAnswers",value:function(){var e=this,t=u()({},this.props.data&&this.props.data.values,e.state.values);return e.props.data&&e.props.data.questions.forEach((function(n,r){var o=e.questionElements.find((function(e){return e&&e.questionId==n.id}));o&&void 0!==o.getAnswer()&&(t[n.id]=o.getAnswer())})),e.setState({values:t}),t}},{key:"gotoNextQuestion",value:function(){if(this.isValid()){var e=this.state.currentQuestion+this.noOfQuestionsToShow;return e>=this.props.data.questions.length?(e=0,this.setState({currentQuestion:e}),{isReady:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isReady:!1,currentQuestion:e})}}},{key:"gotoPreviousQuestion",value:function(){var e=this.state.currentQuestion-this.noOfQuestionsToShow;return e<0?(e=0,this.setState({currentQuestion:e}),{isBeginning:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isBeginning:!1,currentQuestion:e})}},{key:"render",value:function(){var e,t=this,n=t.props.data||{questions:[]},r=n.questions.slice(t.state.currentQuestion,t.state.currentQuestion+t.noOfQuestionsToShow),o=u()({},this.props.data&&this.props.data.values,t.state.values);return e=React.createElement("div",{className:"osc-questions"},r.map((function(e,n){return React.createElement(b,{config:I(I({},t.config),{},{divId:"osc-question-".concat(e.id)}),data:I(I({},e),{},{value:o[e.id]}),key:"question-".concat(e.id),ref:function(e){t.questionElements[n]=e}})}))),React.createElement("div",{id:this.id,className:"osc-question-group"},React.createElement("h3",{className:"osc-question-group-title"},n.title),React.createElement("div",{className:"osc-question-group-description",dangerouslySetInnerHTML:{__html:n.description}}),e)}}])&&w(t.prototype,n),r&&w(t,r),i}(s.a);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return M(this,n)}}function M(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(i,e);var t,n,r,o=N(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),null==(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null,barColor:{default:"#bed200",min:"#ff9100",max:"#bed200"}})).config.barColor.min&&(t.config.barColor.min="#ff9100"),null==t.config.barColor.max&&(t.config.barColor.max="#bed200"),t.answers=e.data&&e.data.answers||{},Object.keys(t.answers).forEach((function(e){t.answers[e]==parseInt(t.answers[e])&&(t.answers[e]={x:parseInt(t.answers[e])})})),t.state={score:t.props.score||0},t}return t=i,(n=[{key:"getTitle",value:function(e,t){return this.props.data&&this.props.data.title}},{key:"calculateScore",value:function(e){var t=this,n=this.answers,r=e||{},o=(Object.keys(n).length,{});Object.keys(n).forEach((function(e){var i=n[e]||{},a=r[e]||(t.config.startWithAllQuestionsAnswered?{x:50,y:50,z:50}:{}),c=o[e]={};["x","y","z"].forEach((function(e){if(void 0!==i[e]&&void 0!==a[e])return c[e]=100-Math.abs(i[e]-a[e])}))}));var i={};return Object.keys(n).forEach((function(e){["x","y","z"].forEach((function(t){i[t]=i[t]||{score:[],noOfAnswers:0},void 0!==o[e][t]&&i[t].score.push(o[e][t]),n[e]&&void 0!==n[e][t]&&i[t].noOfAnswers++}))})),Object.keys(i).forEach((function(e){i[e]=i[e].score.length?i[e].score.reduce((function(e,t){return e+t}))/i[e].noOfAnswers:void 0})),this.setState({score:i}),i}},{key:"render",value:function(){var e=this,t=e.state.score,n=null;switch(this.config.type){case"plane":var r=null,o=this.props.data&&this.props.data.images||[];if(o&&o.length){Array.isArray(o)||(o=[o]);var i=o[0],a=i;"object"==D(i)&&(a=i.src),r=React.createElement("img",{className:"osc-choice-plane-background-image",src:a,style:{width:this.props.baseSize/2,height:this.props.baseSize/2}})}return React.createElement("div",{className:"osc-choice-plane",style:{width:this.props.baseSize/2,height:this.props.baseSize/2}},r);case"minus-to-plus-100":var c=null,u=parseInt(2*(t.x-50));e.config.withPercentage&&(c=React.createElement("div",{className:"osc-percentage"},u,"%"));var s=e.config.barColor.max.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),l=e.config.barColor.min.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),f=parseInt(l[1],16)+(parseInt(s[1],16)-parseInt(l[1],16))*(t.x/100),p=parseInt(l[2],16)+(parseInt(s[2],16)-parseInt(l[2],16))*(t.x/100),d=parseInt(l[3],16)+(parseInt(s[3],16)-parseInt(l[3],16))*(t.x/100),h={backgroundColor:"rgb(".concat(f,",").concat(p,",").concat(d,")")};u>=0&&(h.width=u/2+"%",h.left="50%",h.right="auto"),u<0&&(h.width=-u/2+"%",h.left="auto",h.right="50%"),n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar osc-from-center".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-progress",style:h})),c);break;case"zero-to-100":default:var v=null;if(e.config.withPercentage){var m=parseInt(t.x);v=React.createElement("div",{className:"osc-percentage"},m,"%")}h={width:(t.x||0)+"%",backgroundColor:e.config.barColor.default},n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:h})),v)}var g=null;return(e.config.minLabel||e.config.maxLabel)&&(g=React.createElement("div",{className:"osc-minmax-labels"},React.createElement("div",{className:"osc-min-label"},e.config.minLabel),React.createElement("div",{className:"osc-max-label"},e.config.maxLabel))),React.createElement("li",{className:"osc-choice"},n,g)}}])&&x(t.prototype,n),r&&x(t,r),i}(s.a);function G(e){return(G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=H(e);if(t){var o=H(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return W(this,n)}}function W(e,t){return!t||"object"!==G(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=z(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null})).choiceElements=[],t.state={title:"Je hebt nog geen keuze gemaakt",scores:e.scores,planePos:{x:50,y:50}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.choicesClickListener=function(e){n.setState({random:Math.random()})},document.addEventListener("osc-choices-click",n.choicesClickListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-click",self.choicesClickListener)}},{key:"calculateScores",value:function(e){var t=this,n={};t.choiceElements.forEach((function(t){n[t.config.divId]=t.calculateScore(e)}));var r={x:50,y:50};if(t.config.type){var o=Object.keys(e);if(o.length){r={x:0,y:0};var i={x:0,y:0,z:0};o.forEach((function(t){var n=e[t];["x","y","z"].forEach((function(e){void 0!==n[e]&&(r[e]+=parseInt(n[e])||0,i[e]++)}))})),r.x=i.x?parseInt(r.x/i.x):void 0,r.y=i.y?parseInt(r.y/i.y):void 0}}return t.setState({answers:e,scores:n,planePos:r}),{answers:e,scores:n,planePos:r}}},{key:"getPreferedChoice",value:function(e){var t=e.scores,n=e.planePos,r=this;switch(t=t||r.state.scores,r.config.type){case"plane":return(n=n||r.state.planePos).x<50&&n.y<50?r.choiceElements[0]:n.x>50&&n.y<50?r.choiceElements[1]:n.x<50&&n.y>50?r.choiceElements[2]:n.x>50&&n.y>50?r.choiceElements[3]:null;default:var o=Object.keys(t).sort((function(e,n){return t[n].x-t[e].x}))[0];return r.choiceElements.find((function(e){return e&&e.config.divId==o}))}}},{key:"render",value:function(){var e=this;switch(this.config.type){case"plane":var t=document.querySelector("#".concat(this.divId))&&document.querySelector("#".concat(this.divId)).offsetWidth-1||180,n=(void 0===e.state.planePos.y?50:e.state.planePos.y)*(t/100),r=(void 0===e.state.planePos.x?50:e.state.planePos.x)*(t/100);return React.createElement("div",{id:this.divId,className:"osc-choices osc-choice-plane-plane",ref:function(t){e.planePlaneElement=t}},Object.keys(e.props.choices).map((function(n,r){var o=e.props.choices[n];return React.createElement(k,{config:F({divId:"choice-".concat(o.id)},e.config),data:o,score:e.props.scores&&e.props.scores["choice-".concat(o.id)],key:"choice-".concat(o.id),baseSize:t,ref:function(t){e.choiceElements[r]=t}})})),React.createElement("div",{className:"osc-point",style:{top:n,left:r}}),React.createElement("div",{style:{clear:"both"}}));case"zero-to-100":case"minus-to-plus-100":default:return React.createElement("ul",{className:"osc-choices"},Object.keys(e.props.choices).map((function(t,n){var r=e.props.choices[t];return React.createElement(k,{config:F({divId:"choice-".concat(r.id)},e.config),data:r,score:e.props.scores&&e.props.scores["choice-".concat(r.id)],key:"choice-".concat(r.id),ref:function(t){e.choiceElements[n]=t}})})))}}}])&&B(t.prototype,n),r&&B(t,r),i}(s.a);function X(e){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Z(e);if(t){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return J(this,n)}}function J(e,t){return!t||"object"!==X(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(i,e);var t,n,r,o=$(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={questionEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t;e.questionId&&((t=u.a.recursive(!0,{},this.props.currentTarget.answers))[e.questionId]=t[e.questionId]||{},t[e.questionId][e.dimension]=e.value),t=t||e,console.log("=",JSON.stringify(t,null,2)),this.props.onChange({answers:t})}},{key:"toggleEditMode",value:function(e){this.setState({questionEditModeIndex:this.state.questionEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=(e.props.currentTarget.answers,React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"}),React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Vraag")),React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),e.props.currentTarget.questionGroup.answerDimensions>1&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"30px"}}))),Object.keys(e.props.currentTarget.questionGroup.questions).map((function(t,n){var r=e.props.currentTarget.questionGroup.questions[t],o=[],i=r.dimensions||["x"];return(-1!=i.indexOf("x")||e.props.currentTarget.questionGroup&&1==e.props.currentTarget.questionGroup.answerDimensions)&&o.push("x"),-1!=i.indexOf("y")&&e.props.currentTarget.questionGroup&&2==e.props.currentTarget.questionGroup.answerDimensions&&o.push("y"),-1!=i.indexOf("z")&&e.props.currentTarget.questionGroup&&3==e.props.currentTarget.questionGroup.answerDimensions&&o.push("z"),React.createElement("div",{className:"osc-overview-line",key:"question-".concat(r.id)},React.createElement("div",{className:"osc-overview-line-content"},r.title," (",r.id,")"),o.map((function(t,o){var i=e.props.currentTarget.answers&&e.props.currentTarget.answers[r.id]&&("object"==X(e.props.currentTarget.answers[r.id])?e.props.currentTarget.answers[r.id][t]:e.props.currentTarget.answers[r.id]);return e.state.questionEditModeIndex==n?React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},React.createElement(p.a.Text,{config:{},value:i,onChange:function(n){return e.handleFieldChange({questionId:r.id,dimension:t,value:n.value})},ref:function(t){return e.questionImageBField=t}})):React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},i)})),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}})))}))))),n=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(n=React.createElement("div",null,React.createElement("h3",null,"Afbeelding"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),n,React.createElement("h3",null,"Antwoorden"),t,React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&Q(t.prototype,n),r&&Q(t,r),i}(s.a);function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function oe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ae(e);if(t){var o=ae(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ie(this,n)}}function ie(e,t){return!t||"object"!==te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ae(e){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(i,e);var t,n,r,o=oe(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;void 0!==e.isActive&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.isActive=e.isActive),void 0!==e.submissionType&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.submissionType=e.submissionType),void 0!==e.withExisting&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.withExisting=e.withExisting),void 0!==e.requiredUserRole&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.requiredUserRole=e.requiredUserRole||null),t=t||e,n.props.onChange(t)}},{key:"render",value:function(){var e=this,t=e.props.currentTarget.choicesGuideConfig||{},n=null;if("true"==t.isActive){var r=null;if("form"==t.submissionType){var o=null;"member"==t.requiredUserRole&&(o=React.createElement("div",null,React.createElement("h4",null,"Als er al een inzending is voor deze gebruiker"),React.createElement(p.a.Select,{config:{choices:[{value:"replace",description:"Overschrijf het bestaande resultaat"},{value:"error",description:"Geef een foutmelding"}]},value:t.withExisting,onChange:function(t){return e.handleFieldChange({withExisting:t.value})},ref:function(t){return e.withExistingField=t}}))),r=React.createElement("div",null,React.createElement("h4",null,"Om te kunnnen insturen moet een gebruiker ingelogd zijn"),React.createElement(p.a.Select,{config:{choices:[{value:null,description:"Nee"},{value:"member",description:"Ja"}]},value:t.requiredUserRole,onChange:function(t){return e.handleFieldChange({requiredUserRole:t.value})},ref:function(t){return e.requiredUserRoleField=t}}),o)}n=React.createElement("div",null,React.createElement("h4",null,"Opslaan van de resultaten"),React.createElement(p.a.Select,{config:{choices:[{value:"none",description:"Niet opslaan"},{value:"auto",description:"Automatisch opslaan"},{value:"form",description:"Laat eerst een formulier invullen"}]},value:t.submissionType,onChange:function(t){return e.handleFieldChange({submissionType:t.value})},ref:function(t){return e.submissionTypeField=t}}),r)}return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Naam"),React.createElement(p.a.InputWithCounter,{key:"x1",config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){e.titleField=t}}),React.createElement("h4",null,"Deze keuzewijzer is actief"),React.createElement(p.a.Select,{config:{choices:[{value:"true",description:"Ja"},{value:"false",description:"Nee"}]},value:t.isActive,onChange:function(t){return e.handleFieldChange({isActive:t.value})},ref:function(t){return e.isActiveField=t}}),n)}}])&&ne(t.prototype,n),r&&ne(t,r),i}(s.a);function ue(e){return(ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=he(e);if(t){var o=he(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ue(t)&&"function"!=typeof t?de(e):t}function de(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ve=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).handleFieldChange=t.handleFieldChange.bind(de(t)),t.state={valueEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;if(void 0!==e.type&&(t={type:e.type},"a-to-b"==n.props.currentTarget.type&&"enum-radio"==e.type&&(t.values=[]),"enum-radio"==n.props.currentTarget.type&&"a-to-b"==e.type&&(t.values={A:{},B:{}})),void 0!==e.moreInfoTitle&&((t={moreInfo:u.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.title=e.moreInfoTitle),void 0!==e.moreInfoText&&((t={moreInfo:u.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.text=e.moreInfoText),void 0!==e.questionTextA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.questionImageA){t={values:u.a.recursive({},n.props.currentTarget.values)};var r=e.questionImageA;try{r=JSON.parse(r)}catch(e){}t.values.A.questionImage=r}if(void 0!==e.questionTextA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.labelA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.label=e.labelA),void 0!==e.labelB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.label=e.labelB),void 0!==e.labelBelowA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.labelBelow=e.labelBelowA),void 0!==e.labelBelowB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.labelBelow=e.labelBelowB),void 0!==e.questionImageB){t={values:u.a.recursive({},n.props.currentTarget.values)};var o=e.questionImageB;try{o=JSON.parse(o)}catch(e){}t.values.B.questionImage=o}void 0!==e.questionTextB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.questionText=e.questionTextB),void 0!==e.newValue&&((t={values:n.props.currentTarget.values||[]}).values.push(e.newValue),this.setState({valueEditModeIndex:t.values.length-1})),void 0!==e.deleteIndex&&(t={values:n.props.currentTarget.values||[]}).values.splice(e.deleteIndex,1),void 0!==e.valueIndex&&((t={values:n.props.currentTarget.values||[]}).values[e.valueIndex]=t.values[e.valueIndex]||{text:"",value:{}},e.valueDimension?void 0!==e.valueValue&&("object"!=ue(t.values[e.valueIndex].value)&&(t.values[e.valueIndex].value={}),t.values[e.valueIndex].value[e.valueDimension]=e.valueValue):t.values[e.valueIndex].text=e.valueText),t=t||e,n.props.onChange(t)}},{key:"toggleEditMode",value:function(e){this.setState({valueEditModeIndex:this.state.valueEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}));e.props.currentTarget.moreInfo&&(e.props.currentTarget.moreInfo.title||e.props.currentTarget.moreInfo.text)&&(t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}),React.createElement("h3",null,"Meer informatie text"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.text,onChange:function(t){return e.handleFieldChange({moreInfoText:t.value})},ref:function(t){return e.moreInfoField=t}})));var n=null;if("continuous"==e.props.currentTarget.type&&(n=React.createElement("div",null,React.createElement("h3",null,"Label minimale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:250},value:e.props.currentTarget.minLabel,onChange:function(t){return e.props.onChange({minLabel:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Label maximale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.maxLabel,onChange:function(t){return e.props.onChange({maxLabel:t.value})},ref:function(t){return e.maxLabelField=t}}))),"a-to-b"==e.props.currentTarget.type&&(n=React.createElement("div",{className:"osc-column-container"},React.createElement("div",{className:"osc-column-50p osc-margin-right-10"},React.createElement("h3",null,"Label voor A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.label,onChange:function(t){return e.handleFieldChange({labelA:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowA:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionText,onChange:function(t){return e.handleFieldChange({questionTextA:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij A"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionImage,onChange:function(t){return e.handleFieldChange({questionImageA:t.value})},ref:function(t){return e.questionImageAField=t}})),React.createElement("div",{className:"osc-column-50p osc-margin-left-10"},React.createElement("h3",null,"Label voor B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.label,onChange:function(t){return e.handleFieldChange({labelB:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowB:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionText,onChange:function(t){return e.handleFieldChange({questionTextB:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij B"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionImage,onChange:function(t){return e.handleFieldChange({questionImageB:t.value})},ref:function(t){return e.questionImageBField=t}})))),"enum-buttons"==e.props.currentTarget.type||"enum-radio"==e.props.currentTarget.type){var r=e.props.currentTarget.dimensions||"['x']";n=React.createElement("div",null,React.createElement("h3",null,"Opties"),React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-question-options"},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Tekst")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"60px"}}))),e.props.currentTarget.values&&e.props.currentTarget.values.map&&e.props.currentTarget.values.map((function(t,n){var o=function(r,o){var i=o?t[r][o]:t[r];return e.state.valueEditModeIndex==n?React.createElement(p.a.Text,{config:{},value:i,onChange:function(t){return e.handleFieldChange({valueIndex:n,valueDimension:o,valueText:t.value,valueValue:t.value})}}):i};return React.createElement("div",{className:"osc-overview-line",key:"option-".concat(n)},React.createElement("div",{className:"osc-overview-line-content"},o("text")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","x")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.handleFieldChange({deleteIndex:n})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(){return e.handleFieldChange({newValue:{text:"Nieuwe optie",value:{x:"50",y:"50"}}})}},"Nieuwe optie toevoegen")))))}var o=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(o=React.createElement("div",null,React.createElement("h3",null,"Deze vraag heeft invloed in de richting"),React.createElement(p.a.Select,{config:{choices:[{value:"['x']",description:"Alleen X"},{value:"['y']",description:"Alleen Y"},{value:"['x','y']",description:"X en Y"}]},value:e.props.currentTarget.dimensions,onChange:function(t){return e.props.onChange({dimensions:t.value})},ref:function(t){return e.dimensionsField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),t,React.createElement("h3",null,"Afbeelding boven de vraag"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Type vraag"),React.createElement(p.a.Select,{config:{choices:[{value:"",description:"Maak een keuze"},{value:"a-to-b",description:"van a naar b slider"},,{value:"enum-radio",description:"radio buttons"}],required:!0},value:e.props.currentTarget.type,onChange:function(t){return e.handleFieldChange({type:t.value})},ref:function(t){return e.typeField=t}}),n,o,React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&se(t.prototype,n),r&&se(t,r),i}(s.a);function me(e){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==me(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=Ee(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Aantal dimensies voor antwoorden"),React.createElement(p.a.Select,{config:{choices:[{value:"1",description:"1 - liniair"},{value:"2",description:"2 - vlak"}]},value:e.props.currentTarget.answerDimensions,onChange:function(t){return e.props.onChange({answerDimensions:t.value})},ref:function(t){return e.answerDimensionsField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&ge(t.prototype,n),r&&ge(t,r),i}(s.a);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Pe(e);if(t){var o=Pe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Se(this,n)}}function Se(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pe(e){return(Pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(i,e);var t,n,r,o=Re(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return(!e.props.questionGroups||e.props.questionGroups.length<1)&&(t=React.createElement("a",{href:"#",onClick:function(t){return e.props.setCurrentForm({what:"question-group"})}},"Nieuwe vraaggroep")),React.createElement("div",{className:"osc-overview"},React.createElement("h2",null,"Vraaggroepen"),Object.keys(e.props.questionGroups).map((function(t,n){var r=e.props.questionGroups[t],o=React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"},React.createElement("h4",null,"Vragen")),Object.keys(r.questions).map((function(t,n){var o=r.questions[t];return React.createElement("div",{className:"osc-overview-line",key:"question-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id,questionId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question",questionGroupId:r.id,questionId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id})}},"Nieuwe vraag"))),i=React.createElement("div",{className:"osc-overview-choices"},React.createElement("h4",null,"Keuze opties"),Object.keys(r.choices).map((function(t,n){var o=r.choices[t];return React.createElement("div",{className:"osc-overview-line",key:"choice-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id,choiceId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"choice",questionGroupId:r.id,choiceId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line",key:"choice-new"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id})}},"Nieuwe keuze optie"))),a=React.createElement("div",{className:"osc-no-button"});return 0==Object.keys(r.choices).length&&0==Object.keys(r.questions).length&&1!=e.props.questionGroups.length&&(a=React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question-group",questionGroupId:r.id,title:r.title})}})),React.createElement("div",{className:"osc-overview-question-group",key:"questiongroup-".concat(r.id)},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("h3",null,r.title)),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question-group",questionGroupId:r.id})}}),a)),o,i)})),React.createElement("br",null),React.createElement("br",null),t)}}])&&Oe(t.prototype,n),r&&Oe(t,r),i}(s.a);function Ae(e){var t=e.config,n="".concat(t.api&&t.api.url,"/api/site/").concat(t.siteId,"/choicesguide/").concat(t.choicesGuideId,"?includeChoices=1&includeQuestions=1"),r=l.a.api.getHeaders();return fetch(n,{headers:r}).then((function(e){return e.json()})).then((function(e){var t={choicesGuideId:e.id,images:e.images,choicesGuideConfig:e.config,title:e.title,description:e.description,choices:e.choices||[],questionGroups:e.questiongroups||[],status:"active"};if(t.questionGroups&&t.questionGroups.map)return t.questionGroups.map((function(e){e.questions&&e.questions.map&&e.questions.map((function(e){"continuous"==e.type&&(e.type="a-to-b"),"enum-buttons"==e.type&&(e.type="enum-radio"),"a-to-b"==e.type&&(e.values&&e.values.A&&(e.values.A.labelBelow=e.values.A.labelBelow||e.minLabel),e.values&&e.values.B&&(e.values.B.labelBelow=e.values.B.labelBelow||e.maxLabel))}))})),t}))}function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){Ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function je(e,t){return(je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Fe(e);if(t){var o=Fe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ge(this,n)}}function Ge(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?qe(e):t}function qe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fe(e){return(Fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&je(e,t)}(i,e);var t,n,r,o=ke(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null}})).handleFieldChange=t.handleFieldChange.bind(qe(t)),t.setCurrentForm=t.setCurrentForm.bind(qe(t)),t.deleteElement=t.deleteElement.bind(qe(t)),t.state={choicesGuideId:t.props.data.choicesGuideId,currentTarget:{},busy:!1},t.onFinished=t.props.onFinished,t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Ae({config:e.config}).then((function(t){e.setState(Le(Le({},t),{},{busy:!1}),(function(){e.setCurrentForm({what:"choices-guide"})}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"handleFieldChange",value:function(e){var t=this.state.currentTarget;Object.keys(e).forEach((function(n){t[n]=e[n]})),this.setState({currentTarget:t})}},{key:"setCurrentForm",value:function(e){var t,n,r;switch(e.what){case"choices-guide":e.title=this.state.title,e.description=this.state.description,e.images=this.state.images?this.state.images:"",e.choicesGuideConfig=this.state.choicesGuideConfig?this.state.choicesGuideConfig:{};break;case"choice":n=e.questionGroupId?(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).choices&&t.choices.find((function(t){return t.id==e.choiceId}))||{}:this.state.choices.find((function(t){return t.id==e.choicesId}))||{},e.questionGroup=t,e.title=n.title,e.description=n.description,e.images=n.images,e.answers=n.answers,e.seqnr=void 0!==n.seqnr?n.seqnr:10;break;case"question-group":t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{},e.title=t.title,e.description=t.description,e.answerDimensions=t.answerDimensions,e.seqnr=void 0!==t.seqnr?t.seqnr:10;break;case"question":r=(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).questions&&t.questions.find((function(t){return t.id==e.questionId}))||{},e.questionGroup=t,e.title=r.title,e.description=r.description,e.moreInfo=r.moreInfo,e.images=r.images,e.minLabel=r.minLabel,e.maxLabel=r.maxLabel,e.type=r.type,e.dimensions=r.dimensions,e.values=r.values,e.seqnr=void 0!==r.seqnr?r.seqnr:10}this.setState({currentTarget:e})}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null,i=this.formfields;return Object.keys(this.state.currentTarget).forEach((function(e){i[e+"Field"]&&i[e+"Field"].validate&&!i[e+"Field"].validate({showErrors:t})&&(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"canSubmit",value:function(){var e=this.config.user||{};return l.a.user.hasRole(e,"moderator")}},{key:"submitForm",value:function(){var e=this;e.setState({busy:!0,submitError:null},(function(){var t,n,r;if(!e.validate({showErrors:!0,scrollTo:!0}))return e.setState({busy:!1});if(!e.canSubmit())return alert("Je mag dit niet");switch(e.state.currentTarget.what){case"choices-guide":r=e.state.choicesGuideId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,config:e.state.currentTarget.choicesGuideConfig};break;case"choice":r=e.state.currentTarget.choiceId,t=e.state.currentTarget.questionGroupId?"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/choice"):"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/choice"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,answers:e.state.currentTarget.answers,seqnr:e.state.currentTarget.seqnr};try{n.answers=JSON.parse(n.answers)}catch(e){}break;case"question-group":r=e.state.currentTarget.questionGroupId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,answerDimensions:e.state.currentTarget.answerDimensions,seqnr:e.state.currentTarget.seqnr};break;case"question":r=e.state.currentTarget.questionId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/question"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,moreInfo:e.state.currentTarget.moreInfo,images:e.state.currentTarget.images,minLabel:e.state.currentTarget.minLabel,maxLabel:e.state.currentTarget.maxLabel,type:e.state.currentTarget.type,dimensions:e.state.currentTarget.dimensions,values:e.state.currentTarget.values,seqnr:e.state.currentTarget.seqnr};try{n.values=JSON.parse(n.values)}catch(e){}}t+=r?"/".concat(r):"";var o=l.a.api.getHeaders(e.config);fetch(t,{method:r?"PUT":"POST",headers:o,body:JSON.stringify(n)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"choices-guide"==e.state.currentTarget.what?e.onFinished():e.fetchData()})).catch((function(t){t.then((function(t){try{"object"==De(t=JSON.parse(t))&&(t=t.message)}catch(e){}return e.setState({submitError:{message:t}}),console.log(t)})),e.setState({busy:!1})}))}))}},{key:"deleteElement",value:function(e){var t=e.what,n=e.questionGroupId,r=e.choiceId,o=e.questionId,i=e.title,a=this;if(a.setState({submitError:null}),confirm("Je gaat "+t+" "+i+" verwijderen. Weet je het zeker?")){var c;switch(t){case"question-group":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n);break;case"choice":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/choice/").concat(r);break;case"question":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/question/").concat(o)}var u=l.a.api.getHeaders(a.config);fetch(c,{method:"DELETE",headers:u}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){a.fetchData()})).catch((function(e){e.then((function(e){try{"object"==De(e=JSON.parse(e))&&(e=e.message)}catch(e){}return a.setState({submitError:{message:e}}),console.log(e)})),a.setState({busy:!1})}))}}},{key:"render",value:function(){var e=this,t=null,n=null,r=null,o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.setCurrentForm({what:"choices-guide"})}},"Terug"),i=React.createElement("button",{className:"osc-button-blue",onClick:function(t){return e.submitForm()}},"Opslaan");switch(e.state.currentTarget.what){case"choices-guide":t="Bewerk keuzewijzer",n=React.createElement(ce,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}}),r=React.createElement(Ce,{questionGroups:e.state.questionGroups,setCurrentForm:e.setCurrentForm,deleteElement:e.deleteElement,ref:function(t){e.formfields=t}}),o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug");break;case"choice":t="Bewerk Keuze",n=React.createElement(ee,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question-group":t="Bewerk Vragengroep",n=React.createElement(Te,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question":t="Bewerk Vraag ".concat(e.state.currentTarget.questionId),n=React.createElement(ve,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;default:o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug"),i=null}var a=null;return e.state.submitError&&(a=React.createElement("div",{className:"osc-message osc-error"},e.state.submitError.message)),React.createElement("div",{id:this.divId,className:"osc-form".concat(this.state.busy?" osc-busy":"")},React.createElement("h2",null,t),n,r,a,React.createElement("br",null),React.createElement("br",null),o,i)}}])&&Me(t.prototype,n),r&&Me(t,r),i}(s.a),Be=n(109),Ve=n(98);function ze(e){return(ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function We(e){return function(e){if(Array.isArray(e))return He(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return He(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return He(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ye(Object(n),!0).forEach((function(t){Qe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $e(e,t){return($e=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=tt(e);if(t){var o=tt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ze(this,n)}}function Ze(e,t){return!t||"object"!==ze(t)&&"function"!=typeof t?et(e):t}function et(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var nt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$e(e,t)}(i,e);var t,n,r,o=Je(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=et(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"<b>Jouw voorkeur:</b>{preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!1,minLabel:null,maxLabel:null}}));!n.config.aspectRatio&&n.config.choices&&n.config.choices.type&&"plane"==n.config.choices.type&&(n.config.aspectRatio="10x7");var r=l.a.localStorage.get("osc-choices-guide.values")||{},a=l.a.localStorage.get("osc-choices-guide.scores")||{};return n.state={title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,currentQuestion:void 0,status:"init",values:r[n.config.choicesGuideId],scores:a[n.config.choicesGuideId]},n.liveUpdates=n.liveUpdates.bind(et(t)),n.hideEditForm=n.hideEditForm.bind(et(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.liveUpdateListener=function(e){n.liveUpdates(e.detail)},document.addEventListener("osc-choices-guide-live-updates",n.liveUpdateListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-guide-live-updates",self.liveUpdateListener)}},{key:"fetchData",value:function(){var e=this;Ae({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e=this,t={currentQuestionGroupIndex:0};e.setState(t,(function(){e.liveUpdates();var t=new window.CustomEvent("osc-choices-guide-is-ready");document.dispatchEvent(t)}))}},{key:"showEditForm",value:function(){this.setState({status:"edit"})}},{key:"hideEditForm",value:function(){var e=l.a.localStorage.get("osc-choices-guide.values")||{},t=l.a.localStorage.get("osc-choices-guide.scores")||{};this.setState({title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,status:"init",values:e[this.config.choicesGuideId],scores:t[this.config.choicesGuideId]},(function(){this.fetchData()}))}},{key:"gotoNextQuestion",value:function(){var e=this,t={};t.values=u()(e.state.values||{},e.questionGroupElement.getAnswers()),e.setState(t),e.choicesElement.calculateScores(t.values),e.userPreference&&e.userPreference.calculateScores();var n=e.questionGroupElement.gotoNextQuestion(),r=n.isReady,o=n.currentQuestion;e.setState({currentQuestion:o},(function(){r?e.gotoNextGroup():window.scrollTo(0,0)}))}},{key:"gotoPreviousQuestion",value:function(){var e=this;if("result"==this.state.status)return this.gotoPreviousGroup();var t={};t.values=u()(this.state.values||{},this.questionGroupElement.getAnswers()),this.setState(t),this.choicesElement.calculateScores(t.values),self.userPreference&&self.userPreference.calculateScores();var n=this.questionGroupElement.gotoPreviousQuestion(),r=n.isBeginning,o=n.currentQuestion;this.setState({currentQuestion:o},(function(){r?e.gotoPreviousGroup():window.scrollTo(0,0)}))}},{key:"gotoNextGroup",value:function(){var e=this,t=Xe({},this.state);t.currentQuestionGroupIndex<t.questionGroups.length-1?(t.values=u()(t.values||{},this.questionGroupElement.getAnswers()),t.currentQuestionGroupIndex++,this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))):this.gotoResult()}},{key:"gotoPreviousGroup",value:function(){var e=this,t={};t.currentQuestionGroupIndex=this.state.currentQuestionGroupIndex-1,"result"==this.state.status&&(t.currentQuestionGroupIndex=this.state.questionGroups.length-1,t.status="active"),this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))}},{key:"gotoResult",value:function(){document.location.href=this.config.afterUrl}},{key:"liveUpdates",value:function(){var e,t=this,n=u()(t.state.values||{},t.questionGroupElement.getAnswers()),r=t.choicesElement.calculateScores(n);e=r.scores,t.userPreference&&t.userPreference.calculateScores(n),t.setState({scores:e,firstAnswerGiven:Object.keys(n).length>0},(function(){var r=l.a.localStorage.get("osc-choices-guide.values")||{};r[t.config.choicesGuideId]=n,l.a.localStorage.set("osc-choices-guide.values",r);var o=l.a.localStorage.get("osc-choices-guide.scores")||{};o[t.config.choicesGuideId]=e,l.a.localStorage.set("osc-choices-guide.scores",o),t.updateChoicesTitle()}))}},{key:"updateChoicesTitle",value:function(){var e=this,t=e.config.choices.title.noPreferenceYet,n=e.choicesElement&&e.choicesElement.getPreferedChoice({});e.state.firstAnswerGiven&&(t=n?e.config.choices.title.preference.replace("{preferredChoice}",n&&n.getTitle(e.state.scores[n.config.divId])||t):e.config.choices.title.inBetween),e.setState({choicesTitle:t})}},{key:"onChoicesClick",value:function(e){this.choicesAccordeon.className.match(" osc-closed")?this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-closed"," osc-open"):this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-open"," osc-closed");var t=new window.CustomEvent("osc-choices-click",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e,t=this,n=t.state.choices;t.state.currentQuestionGroupIndex>=0&&(e=t.state.questionGroups[t.state.currentQuestionGroupIndex])&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=null,o=t.state.images;o&&o.length&&(Array.isArray(o)||(o=[o]),r=React.createElement(f.Image,{className:"osc-top-image-spacer",width:"100%",image:o[0]}));var i=null;if("edit"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement(Ue,{config:t.config,onFinished:t.hideEditForm,data:Xe({},t.state)}));else if("init"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement("div",{className:"osc-intro"},"Laden..."));else{var a=React.createElement("div",{id:"osc-choices-container-"+this.divId,className:"osc-choices-container osc-accordeon osc-closed ".concat("osc-type-"+t.config.choices.type),ref:function(e){t.choicesAccordeon=e}},React.createElement("div",{onClick:function(e){return t.onChoicesClick(e)},className:"osc-accordeon-button",dangerouslySetInnerHTML:{__html:t.state.choicesTitle}}),React.createElement("div",{className:"osc-accordeon-content"},React.createElement(Y,{config:Xe({},t.config.choices),choices:We(n),scores:Xe({},t.state.scores),firstAnswerGiven:!!t.state.firstAnswerGiven,ref:function(e){t.choicesElement=e},key:"choices"}))),c=React.createElement(A,{config:t.config,data:e,ref:function(e){t.questionGroupElement=e},key:"group".concat(t.state.currentQuestionsGroupIndex)}),u=null;t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(u=React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk keuzewijzer"));var s=null,l=null,p=null;t.state.currentQuestionGroupIndex>0||t.state.currentQuestion>0?(l=function(){t.gotoPreviousQuestion()},p="Terug"):t.config.beforeUrl&&(s=t.config.beforeUrl,p="Introductie");var d=null,h=null;"init"==t.state.status?(d=null,h=null):(d=function(){t.gotoNextQuestion()},h="Volgende");var v=null;(p||h)&&(v=React.createElement(Ve.default,{previousAction:l,previousUrl:s,previousLabel:p,nextAction:d,nextUrl:null,nextLabel:h})),i=React.createElement("div",{className:"osc-choices-guide-content"},u,a,c,v)}return React.createElement("div",{id:this.divId,className:"osc-choices-guide"},React.createElement(Be.default,null),r,i)}}])&&Ke(t.prototype,n),r&&Ke(t,r),i}(s.a),rt=n(135);function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e){return function(e){if(Array.isArray(e))return at(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return at(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return at(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function at(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ut(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(n),!0).forEach((function(t){st(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function st(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=vt(e);if(t){var o=vt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return dt(this,n)}}function dt(e,t){return!t||"object"!==ot(t)&&"function"!=typeof t?ht(e):t}function ht(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function vt(e){return(vt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var mt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(i,e);var t,n,r,o=pt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",submission:{type:"none",requireLoginSettings:{title:"Stemcode",description:"Om te kunnen stemmen vul je de stemcode in die je per post hebt ontvangen. Wij controleren je stemcode op geldigheid. Als dat gelukt is kun je stemmen.",buttonTextLogin:"Vul je stemcode in",buttonTextLoggedIn:"Geldige stemcode",buttonTextAlreadySubmitted:"Ongeldige stemcode",changeLoginLinkText:"Vul een andere stemcode in",loggedInMessage:"Het controleren van je stemcode is gelukt! Klik op onderstaande knop om je keuze in te sturen.",notYetLoggedInError:"Klik hierboven om je stem te valideren.",alreadySubmittedMessage:"Deze stemcode is al gebruikt om te stemmen. Een stemcode kan maar één keer gebruikt worden."}},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"Jouw voorkeur is {preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!0,minLabel:null,maxLabel:null}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.config.logoutUrl=t.config.logoutUrl||"/oauth/logout?returnTo="+encodeURIComponent(document.location.href);var n=l.a.localStorage.get("osc-choices-guide.values")||{};n=n[t.config.choicesGuideId]||{};var r=l.a.localStorage.get("osc-choices-guide.scores")||{};r=r[t.config.choicesGuideId]||{};var a,c=l.a.localStorage.get("osc-choices-guide.formvalues")||{};c=c[t.config.choicesGuideId]||{};var u=window.location.search.match(/(\?|\&)resultdata=([^\?\&]+)/);if(u){var s=window.atob(u[2]);try{s=JSON.parse(s)}catch(e){}a=s.result.scrollToLogin,c=s.formValues,n=s.result.answers,r=s.result.scores}if("form"==t.config.submission.type){t.onFormChange=t.onFormChange.bind(ht(t));t.config.submission.form.fields.forEach((function(e){var t=e.name||e.title.toLowerCase();void 0!==c[t]&&(e.value=c[t])}))}return t.state={title:"",answers:n,scores:r,scrollToLogin:a,questionGroupId:t.config.questionGroupId},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Ae({config:e.config}).then((function(t){var n=t.questionGroups&&t.questionGroups[0]&&t.questionGroups[0].id;e.setState(ut(ut({},t),{},{questionGroupId:n}),(function(){e.config.submission.type=t.choicesGuideConfig.submissionType||e.config.submission.type,e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e,t,n=this,r=n.choicesElement&&n.choicesElement.calculateScores(n.state.answers);e=r.scores,t=r.planePos;var o="";if(n.choicesElement){var i=n.choicesElement.getPreferedChoice({scores:e,planePos:t});o=i?n.config.choices.title.preference.replace("{preferredChoice}",i&&i.getTitle(n.state.scores[i.config.divId])||o):n.config.choices.title.inBetween,n.setState({title:o});var a=new window.CustomEvent("osc-choices-guide-result-is-ready",{detail:{preferredChoice:{name:void 0,title:o,preferredChoiceId:-1},answers:n.state.answers,scores:n.state.scores}});if(document.dispatchEvent(a),n.state.scrollToLogin){var c=document.querySelector(".osc-require-login");c&&c.scrollIntoView({behavior:"smooth"})}"auto"==n.config.submission.type&&n.submitResult()}}},{key:"submitResult",value:function(){var e,t,n,r=this,o=!(!r.state.choicesGuideConfig||!r.state.choicesGuideConfig.requiredUserRole);if(o&&!r.isUserLoggedIn()){var i=document.querySelector(".osc-require-login");i&&i.scrollIntoView({behavior:"smooth"}),t={submissionError:{message:r.config.submission.requireLoginSettings.notYetLoggedInError,type:"unknown"}}}"form"==r.config.submission.type&&(e=r.form.getValues(),r.form.validate({showErrors:!0,scrollTo:!0})||(n=!0)),t||n?r.setState(t,(function(){r.form.validate({showErrors:!0,scrollTo:!0})})):rt.a.load().then((function(t){t.get().then((function(t){var n=t.visitorId,i="".concat(r.config.api&&r.config.api.url,"/api/site/").concat(r.config.siteId,"/choicesguide/").concat(r.config.choicesGuideId,"/result"),a=l.a.api.getHeaders(r.config),c={result:{answers:r.state.answers,scores:r.state.scores},extraData:e,userFingerprint:n};fetch(i,{method:"POST",headers:a,body:JSON.stringify(c)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){if("form"==r.config.submission.type)return l.a.localStorage.remove("osc-choices-guide.values"),l.a.localStorage.remove("osc-choices-guide.scores"),l.a.localStorage.remove("osc-choices-guide.formvalues"),o?r.logout({afterUrl:r.config.afterUrl}):document.location.href=r.config.afterUrl})).catch((function(e){e.then((function(e){try{e=JSON.parse(e)}catch(e){}var t=Array.isArray(e)&&e[0]&&e[0].message||e[0]||e.message||e;r.setState({submissionError:{message:t.toString(),type:"Je hebt je mening al ingestuurd"==t?"alreadySubmitted":"unknown"}},(function(){return console.log(e)}))}))}))}))}))}},{key:"isUserLoggedIn",value:function(){return this.config.user&&this.config.user.role&&"anonymous"!=this.config.user.role}},{key:"gotoLoginUrl",value:function(){var e=this.config.loginUrl,t={scrollToLogin:!0,formValues:this.form.getValues(),result:{answers:this.state.answers,scores:this.state.scores}},n=e.match(/returnTo=([^\?\&]+)/);if(n){var r=decodeURIComponent(n[1]);r+=r.match(/\?/)?"&":"?",r+="resultdata="+window.btoa(JSON.stringify(t).replace(/=+$/,"")),r=encodeURIComponent(r),e=e.replace(/returnTo=[^\?\&]+/,"returnTo="+r)}else e+=e.match(/\?/)?"&":"?",e+="resultdata="+window.btoa(JSON.stringify(t)).replace(/=+$/,"");document.location.href=e}},{key:"logout",value:function(e){var t=e.afterUrl,n=void 0===t?self.config.afterUrl:t,r=self.config.logoutUrl||"/oauth/logout";fetch(r,{headers:{"Content-type":"application/json"},method:"GET"}).then((function(e){return document.location.href=n})).catch((function(e){return document.location.href=n}))}},{key:"onFormChange",value:function(){var e=this,t=l.a.localStorage.get("osc-choices-guide.formvalues")||{};t[e.config.choicesGuideId]=e.form.getValues(),l.a.localStorage.set("osc-choices-guide.formvalues",t),e.setState({random:Math.random()})}},{key:"render",value:function(){var e,t=this,n=(t.props&&t.props.data,t.state.choices);t.state.questionGroups&&(e=t.state.questionGroups.find((function(e){return e.id==t.state.questionGroupId})))&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=!(!t.state.choicesGuideConfig||!t.state.choicesGuideConfig.requiredUserRole),o=null;n&&(o=React.createElement(Y,{config:ut({},t.config.choices),scores:ut({},t.state.scores),choices:it(n),firstAnswerGiven:!0,ref:function(e){t.choicesElement=e},key:"choices"}));var i=null;t.config.moreInfoUrl&&t.config.moreInfoLabel&&(i=React.createElement("div",{className:"osc-more-info-link"},React.createElement("a",{href:t.config.moreInfoUrl},t.config.moreInfoLabel)));var a=null,c=null,u=null;if("form"==t.config.submission.type){if(a=React.createElement(p.a.Form,{config:t.config.submission.form,onChange:t.onFormChange,ref:function(e){t.form=e}}),r)if(t.isUserLoggedIn()){var s="osc-success",l=t.config.submission.requireLoginSettings.buttonTextLoggedIn,f=t.config.submission.requireLoginSettings.loggedInMessage;t.state.submissionError&&(s="osc-error","alreadySubmitted"==t.state.submissionError.type?(l=t.config.submission.requireLoginSettings.buttonTextAlreadySubmitted,f=t.config.submission.requireLoginSettings.alreadySubmittedMessage):f=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-logged-in osc-logged-in ".concat(s)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},l),React.createElement("div",{className:"change-login-link-text"},React.createElement("a",{onClick:function(e){return t.gotoLoginUrl()}},t.config.submission.requireLoginSettings.changeLoginLinkText)),React.createElement("div",{className:"osc-message"},f)))}else{var d="",h="";t.state.submissionError&&(d="osc-error",h=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-not-yet-logged-in ".concat(d)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},t.config.submission.requireLoginSettings.description,React.createElement("br",null),React.createElement("br",null),React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},t.config.submission.requireLoginSettings.buttonTextLogin),React.createElement("div",{className:"osc-message"},h)))}var v=null,m=null;t.config.beforeUrl&&(v=t.config.beforeUrl,m=t.config.beforeLabel||"Vorige");var g=t.config.afterLabel||"Opslaan",y="form"==t.config.submission.type&&t.form&&!t.form.validate({})||r&&!t.isUserLoggedIn();(m||g)&&(u=React.createElement(Ve.default,{previousAction:null,previousUrl:v,previousLabel:m,nextAction:function(){t.submitResult()},nextUrl:null,nextLabel:g,nextIsDisabled:y}))}var E=null;return t.state.submissionError&&!r&&(E=React.createElement("div",{className:"osc-message osc-error"},t.state.submissionError.message)),React.createElement("div",{className:"osc-choices-guide"},React.createElement("div",{className:"osc-result"},React.createElement("div",{className:"osc-result-content"},React.createElement("div",{className:"osc-choices-container ".concat("osc-type-"+t.config.choices.type)},React.createElement("h3",{dangerouslySetInnerHTML:{__html:t.state.title}}),o),i,a,c,E)),u)}}])&&lt(t.prototype,n),r&&lt(t,r),i}(s.a);nt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(nt,{attributes:n,config:t}),e)},mt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(mt,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";(function(e){var r=n(47);function o(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function i(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function a(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])}function c(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]}function u(e,t){return[e[0]^t[0],e[1]^t[1]]}function s(e){return e=u(e,[0,e[0]>>>1]),e=u(e=i(e,[4283543511,3981806797]),[0,e[0]>>>1]),e=u(e=i(e,[3301882366,444984403]),[0,e[0]>>>1])}function l(e,t){t=t||0;var n,r=(e=e||"").length%16,l=e.length-r,f=[0,t],p=[0,t],d=[0,0],h=[0,0],v=[2277735313,289559509],m=[1291169091,658871167];for(n=0;n<l;n+=16)d=[255&e.charCodeAt(n+4)|(255&e.charCodeAt(n+5))<<8|(255&e.charCodeAt(n+6))<<16|(255&e.charCodeAt(n+7))<<24,255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24],h=[255&e.charCodeAt(n+12)|(255&e.charCodeAt(n+13))<<8|(255&e.charCodeAt(n+14))<<16|(255&e.charCodeAt(n+15))<<24,255&e.charCodeAt(n+8)|(255&e.charCodeAt(n+9))<<8|(255&e.charCodeAt(n+10))<<16|(255&e.charCodeAt(n+11))<<24],d=a(d=i(d,v),31),f=o(f=a(f=u(f,d=i(d,m)),27),p),f=o(i(f,[0,5]),[0,1390208809]),h=a(h=i(h,m),33),p=o(p=a(p=u(p,h=i(h,v)),31),f),p=o(i(p,[0,5]),[0,944331445]);switch(d=[0,0],h=[0,0],r){case 15:h=u(h,c([0,e.charCodeAt(n+14)],48));case 14:h=u(h,c([0,e.charCodeAt(n+13)],40));case 13:h=u(h,c([0,e.charCodeAt(n+12)],32));case 12:h=u(h,c([0,e.charCodeAt(n+11)],24));case 11:h=u(h,c([0,e.charCodeAt(n+10)],16));case 10:h=u(h,c([0,e.charCodeAt(n+9)],8));case 9:h=i(h=u(h,[0,e.charCodeAt(n+8)]),m),p=u(p,h=i(h=a(h,33),v));case 8:d=u(d,c([0,e.charCodeAt(n+7)],56));case 7:d=u(d,c([0,e.charCodeAt(n+6)],48));case 6:d=u(d,c([0,e.charCodeAt(n+5)],40));case 5:d=u(d,c([0,e.charCodeAt(n+4)],32));case 4:d=u(d,c([0,e.charCodeAt(n+3)],24));case 3:d=u(d,c([0,e.charCodeAt(n+2)],16));case 2:d=u(d,c([0,e.charCodeAt(n+1)],8));case 1:d=i(d=u(d,[0,e.charCodeAt(n)]),v),f=u(f,d=i(d=a(d,31),m))}return f=o(f=u(f,[0,e.length]),p=u(p,[0,e.length])),p=o(p,f),f=o(f=s(f),p=s(p)),p=o(p,f),("00000000"+(f[0]>>>0).toString(16)).slice(-8)+("00000000"+(f[1]>>>0).toString(16)).slice(-8)+("00000000"+(p[0]>>>0).toString(16)).slice(-8)+("00000000"+(p[1]>>>0).toString(16)).slice(-8)}var f=window;function p(e){return parseInt(e)}function d(e){return parseFloat(e)}function h(e){return e.reduce((function(e,t){return e+(t?1:0)}),0)}var v=window,m=navigator;document;function g(){return h(["MSCSSMatrix"in v,"msSetImmediate"in v,"msIndexedDB"in v,"msMaxTouchPoints"in m,"msPointerEnabled"in m])>=4}var y=window,E=document;function b(e,t,n){(function(e){return e&&"function"==typeof e.setValueAtTime})(t)&&t.setValueAtTime(n,e.currentTime)}function _(t){return new e((function(e,n){t.oncomplete=function(t){return e(t.renderedBuffer)};var r=3,o=function(){switch(t.startRendering(),t.state){case"running":setTimeout((function(){return n(I("timeout"))}),1e3);break;case"suspended":E.hidden||r--,r>0?setTimeout(o,500):n(I("suspended"))}};o()}))}function T(e){for(var t=0,n=4500;n<5e3;++n)t+=Math.abs(e[n]);return t}function I(e){var t=new Error(e);return t.name=e,t}var O=document,w=["monospace","sans-serif","serif"],R=["sans-serif-thin","ARNO PRO","Agency FB","Arabic Typesetting","Arial Unicode MS","AvantGarde Bk BT","BankGothic Md BT","Batang","Bitstream Vera Sans Mono","Calibri","Century","Century Gothic","Clarendon","EUROSTILE","Franklin Gothic","Futura Bk BT","Futura Md BT","GOTHAM","Gill Sans","HELV","Haettenschweiler","Helvetica Neue","Humanst521 BT","Leelawadee","Letter Gothic","Levenim MT","Lucida Bright","Lucida Sans","Menlo","MS Mincho","MS Outlook","MS Reference Specialty","MS UI Gothic","MT Extra","MYRIAD PRO","Marlett","Meiryo UI","Microsoft Uighur","Minion Pro","Monotype Corsiva","PMingLiU","Pristina","SCRIPTINA","Segoe UI Light","Serifa","SimHei","Small Fonts","Staccato222 BT","TRAJAN PRO","Univers CE 55 Medium","Vrinda","ZWAdobeF"],S={fontStyle:"normal",fontWeight:"normal",letterSpacing:"normal",lineBreak:"auto",lineHeight:"normal",textTransform:"none",textAlign:"left",textDecoration:"none",textShadow:"none",whiteSpace:"normal",wordBreak:"normal",wordSpacing:"normal",position:"absolute",left:"-9999px",fontSize:"48px"};function P(e){return e.toDataURL()}var C=navigator,A=window;var D=navigator;var x=window;var L=window;var N=window;var M=document;var j={osCpu:function(){return navigator.oscpu},languages:function(){var e=[],t=D.language||D.userLanguage||D.browserLanguage||D.systemLanguage;if(void 0!==t&&e.push([t]),Array.isArray(D.languages))h(["webkitPersistentStorage"in m,"webkitTemporaryStorage"in m,0===m.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in v,"BatteryManager"in v,"webkitMediaStream"in v,"webkitSpeechGrammar"in v])>=5&&h([!("MediaSettingsRange"in v),"RTCEncodedAudioFrame"in v,""+v.Intl=="[object Intl]",""+v.Reflect=="[object Reflect]"])>=3||e.push(D.languages);else if("string"==typeof D.languages){var n=D.languages;n&&e.push(n.split(","))}return e},colorDepth:function(){return window.screen.colorDepth},deviceMemory:function(){return e=d(navigator.deviceMemory),t=void 0,"number"==typeof e&&isNaN(e)?t:e;var e,t},screenResolution:function(){var e=[p(x.screen.width),p(x.screen.height)];return e.sort().reverse(),e},availableScreenResolution:function(){if(L.screen.availWidth&&L.screen.availHeight){var e=[p(L.screen.availWidth),p(L.screen.availHeight)];return e.sort().reverse(),e}},hardwareConcurrency:function(){try{var e=p(navigator.hardwareConcurrency);return isNaN(e)?1:e}catch(e){return 1}},timezoneOffset:function(){var e=(new Date).getFullYear();return Math.max(d(new Date(e,0,1).getTimezoneOffset()),d(new Date(e,6,1).getTimezoneOffset()))},timezone:function(){var e;if(null===(e=N.Intl)||void 0===e?void 0:e.DateTimeFormat)return(new N.Intl.DateTimeFormat).resolvedOptions().timeZone},sessionStorage:function(){try{return!!window.sessionStorage}catch(e){return!0}},localStorage:function(){try{return!!window.localStorage}catch(e){return!0}},indexedDB:function(){if(!(g()||h(["msWriteProfilerMark"in v,"MSStream"in v,"msLaunchUri"in m,"msSaveBlob"in m])>=3&&!g()))try{return!!window.indexedDB}catch(e){return!0}},openDatabase:function(){return!!window.openDatabase},cpuClass:function(){return navigator.cpuClass},platform:function(){return navigator.platform},plugins:function(){if(g())return[];if(navigator.plugins){for(var e=[],t=0;t<navigator.plugins.length;++t){var n=navigator.plugins[t];if(n){for(var r=[],o=0;o<n.length;++o){var i=n[o];r.push({type:i.type,suffixes:i.suffixes})}e.push({name:n.name,description:n.description,mimeTypes:r})}}return e}},canvas:function(){var e=function(){var e=document.createElement("canvas");return e.width=240,e.height=140,e.style.display="inline",[e,e.getContext("2d")]}(),t=e[0],n=e[1];if(!function(e,t){return!(!t||!e.toDataURL)}(t,n))return{winding:!1,data:""};n.rect(0,0,10,10),n.rect(2,2,6,6);var r=!n.isPointInPath(5,5,"evenodd");n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",n.font="11pt no-real-font-123";var o="Cwm fjordbank 😃 gly";return n.fillText(o,2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText(o,4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),{winding:r,data:P(t)}},touchSupport:function(){var e,t=0;void 0!==C.maxTouchPoints?t=p(C.maxTouchPoints):void 0!==C.msMaxTouchPoints&&(t=C.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return{maxTouchPoints:t,touchEvent:e,touchStart:"ontouchstart"in A}},fonts:function(){var e=O.body,t=O.createElement("div"),n=O.createElement("div"),r={},o={},i=function(){var e=O.createElement("span");e.textContent="mmMwWLliI0O&1";for(var t=0,n=Object.keys(S);t<n.length;t++){var r=n[t];e.style[r]=S[r]}return e},a=function(e){return w.some((function(t,n){return e[n].offsetWidth!==r[t]||e[n].offsetHeight!==o[t]}))},c=w.map((function(e){var n=i();return n.style.fontFamily=e,t.appendChild(n),n}));e.appendChild(t);for(var u=0,s=w.length;u<s;u++)r[w[u]]=c[u].offsetWidth,o[w[u]]=c[u].offsetHeight;var l=function(){for(var e={},t=function(t){e[t]=w.map((function(e){var r=function(e,t){var n=i();return n.style.fontFamily="'"+e+"',"+t,n}(t,e);return n.appendChild(r),r}))},r=0,o=R;r<o.length;r++){t(o[r])}return e}();e.appendChild(n);for(var f=[],p=0,d=R.length;p<d;p++)a(l[R[p]])&&f.push(R[p]);return e.removeChild(n),e.removeChild(t),f},audio:function(){return Object(r.b)(this,void 0,void 0,(function(){var e,t,n,o,i,a;return Object(r.c)(this,(function(r){switch(r.label){case 0:if(!(e=y.OfflineAudioContext||y.webkitOfflineAudioContext))return[2,-2];if(h(["ApplePayError"in v,"CSSPrimitiveValue"in v,"Counter"in v,0===m.vendor.indexOf("Apple"),"getStorageUpdates"in m,"WebKitMediaKeys"in v])>=4&&!(h(["safari"in v,!("DeviceMotionEvent"in v),!("ongestureend"in v),!("standalone"in m)])>=3)&&!(h(["DOMRectList"in v,"RTCPeerConnectionIceEvent"in v,"SVGGeometryElement"in v,"ontransitioncancel"in v])>=3))return[2,-1];t=new e(1,44100,44100),(n=t.createOscillator()).type="triangle",b(t,n.frequency,1e4),o=t.createDynamicsCompressor(),b(t,o.threshold,-50),b(t,o.knee,40),b(t,o.ratio,12),b(t,o.reduction,-20),b(t,o.attack,0),b(t,o.release,.25),n.connect(o),o.connect(t.destination),n.start(0),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,_(t)];case 2:return i=r.sent(),[3,5];case 3:if("timeout"===(a=r.sent()).name||"suspended"===a.name)return[2,-3];throw a;case 4:return n.disconnect(),o.disconnect(),[7];case 5:return[2,T(i.getChannelData(0))]}}))}))},pluginsSupport:function(){return void 0!==navigator.plugins},productSub:function(){return navigator.productSub},emptyEvalLength:function(){return eval.toString().length},errorFF:function(){try{throw"a"}catch(e){try{return e.toSource(),!0}catch(e){return!1}}},vendor:function(){return navigator.vendor},chrome:function(){return void 0!==window.chrome},cookiesEnabled:function(){try{M.cookie="cookietest=1; SameSite=Strict;";var e=-1!==M.cookie.indexOf("cookietest=");return M.cookie="cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT",e}catch(e){return!1}}};function k(){return function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,i,a,c,u,s,l,f,p;return Object(r.c)(this,(function(d){switch(d.label){case 0:o=Date.now(),i={},a=0,c=Object.keys(e),d.label=1;case 1:if(!(a<c.length))return[3,7];if(u=c[a],function(e,t){for(var n=0,r=e.length;n<r;++n)if(e[n]===t)return!0;return!1}(n,u))return[3,6];s=void 0,d.label=2;case 2:return d.trys.push([2,4,,5]),p={},[4,e[u](t)];case 3:return p.value=d.sent(),s=p,[3,5];case 4:return l=d.sent(),s=l&&"object"==typeof l&&"message"in l?{error:l}:{error:{message:l}},[3,5];case 5:f=Date.now(),i[u]=Object(r.a)(Object(r.a)({},s),{duration:f-o}),o=f,d.label=6;case 6:return a++,[3,1];case 7:return[2,i]}}))}))}(j,void 0,[])}function G(e){return JSON.stringify(e,(function(e,t){return t instanceof Error?(n=t,Object(r.a)({name:n.name,message:n.message,stack:null===(o=n.stack)||void 0===o?void 0:o.split("\n")},n)):t;var n,o}),2)}function q(e){return l(function(e){for(var t="",n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o],a=i.error?"error":JSON.stringify(i.value);t+=(t?"|":"")+o.replace(/([:|\\])/g,"\\$1")+":"+a}return t}(e))}var F=function(){function e(){}return e.prototype.get=function(e){return void 0===e&&(e={}),Object(r.b)(this,void 0,void 0,(function(){var t,n;return Object(r.c)(this,(function(r){switch(r.label){case 0:return[4,k()];case 1:return t=r.sent(),n=function(e){var t;return{components:e,get visitorId(){return void 0===t&&(t=q(this.components)),t},set visitorId(e){t=e}}}(t),e.debug&&console.log("Copy the text below to get the debug data:\n\n```\nversion: 3.0.5\nuserAgent: "+navigator.userAgent+"\ngetOptions: "+JSON.stringify(e,void 0,2)+"\nvisitorId: "+n.visitorId+"\ncomponents: "+G(t)+"\n```"),[2,n]}}))}))},e}();var U={load:function(t){var n=(void 0===t?{}:t).delayFallback,o=void 0===n?50:n;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.c)(this,(function(t){switch(t.label){case 0:return[4,(n=o,r=2*o,void 0===r&&(r=1/0),new e((function(e){f.requestIdleCallback?f.requestIdleCallback((function(){return e()}),{timeout:r}):setTimeout(e,Math.min(n,r))})))];case 1:return t.sent(),[2,new F]}var n,r}))}))},hashComponents:q,componentsToDebugString:G};t.a=U}).call(this,n(11))},,,function(e,t,n){n(140);var r=n(46);e.exports=r("Array","find")},,function(e,t,n){"use strict";var r=n(43),o=n(116).find,i=n(44),a=n(45),c="find",u=!0,s=a(c);c in[]&&Array(1).find((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,