/*! For license information please see choices-guide.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=130)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(3),o=n.n(r),i=n(0),a=n.n(i);n(75);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,a);var c=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var s=e.config||{};return s=v(s),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,s),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),r&&s(t,r),a}(a.a.Component);function v(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=v(e[t]))})),e}},function(e,t,n){"use strict";n(12),n(0),n(6),n(88);var r=n(3),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},ideasSort:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||"random"){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":(r=r||{lat:52.37104644463586,lng:900402911007405}).coordinates&&(r.lat=r.coordinates[0],r.lng=r.coordinates[1]),t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var u=0;u<c;++u){var s=o[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(74)(e))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(22))},function(e,t,n){"use strict";n(12),n(0),n(6),n(93);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(f,e);var t,n,r,s=u(f);function f(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,f);var r=l(t=s.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:null!=o(e.value)?e.value:"",error:null},t.onChange=e.onChange,t}return t=f,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),f}(r.a);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(i,e);var t,n,r,o=g(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&m(t.prototype,n),r&&m(t,r),i}(p),_=n(54),T=n(79),I=n.n(T),R=n(80),O=n.n(R),w=n(81),S=n.n(w),C=n(82),A=n.n(C);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=M(e);if(t){var o=M(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object(_.registerPlugin)(I.a,O.a,S.a,A.a);var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(i,e);var t,n,r,o=x(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{name:"image",allowMultiple:!1,imageserver:{process:"/image",fetch:"/image"}});var n=[],r=e.value||[];return Array.isArray(r)||(r=[r]),r.forEach((function(e){var t="object"==P(e)?e.src:e;n.push({source:{url:t},options:{type:"local",file:{name:t},metadata:{poster:t}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"init",value:function(){}},{key:"updateUploadedFiles",value:function(e){e.addFile;var t=e.removeFile,n=e.next;if(this.imageuploader&&this.imageuploader.getFiles){var r=this.imageuploader.getFiles();t&&(r=r.filter((function(e){return e.serverId!=t.serverId}))),this.setState({uploadedFiles:r.map((function(e){return e.file}))},(function(){n&&n(r)}))}}},{key:"updateValue",value:function(e){var t=this,n=[],r=t.config.as&&"json"==t.config.as;e.forEach((function(e){try{var t="string"==typeof e.serverId?JSON.parse(e.serverId):e.serverId;n.push(r?{src:t.url}:t.url)}catch(e){console.log(e)}})),t.handleOnChange({name:t.config.name,value:n})}},{key:"render",value:function(){var e=this,t=this;return React.createElement(_.FilePond,{ref:function(t){return e.imageuploader=t},files:this.state.uploadedFiles,oninit:t.init,onprocessfile:function(e,n){return t.updateUploadedFiles({addFile:n,next:function(e){return t.updateValue(e)}})},onremovefile:function(e,n){return t.updateUploadedFiles({removeFile:n,next:function(e){return t.updateValue(e)}})},name:t.config.name,server:this.config.imageserver.process,allowMultiple:this.config.allowMultiple,acceptedFileTypes:["image/*"],allowFileSizeValidation:"true",allowReorder:!0,styleItemPanelAspectRatio:"1",maxFileSize:"8mb",maxFiles:"5",allowBrowse:"true",imageResizeTargetWidth:"80",imageResizeTargetHeight:"80",imageCropAspectRatio:"16:9",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"})}}])&&D(t.prototype,n),r&&D(t,r),i}(p);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t){return(q=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?B(e):t}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&q(e,t)}(i,e);var t,n,r,o=F(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(B(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&j(t.prototype,n),r&&j(t,r),i}(r.a);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t){return(Y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=K(e);if(t){var o=K(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Q(this,n)}}function Q(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?J(e):t}function J(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Y(e,t)}(i,e);var t,n,r,o=X(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=J(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(J(t)),n.onInputFocus=n.onInputFocus.bind(J(t)),n.onInputBlur=n.onInputBlur.bind(J(t)),n.onInputKeyUp=n.onInputKeyUp.bind(J(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(z,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&W(t.prototype,n),r&&W(t,r),i}(r.a);function $(e){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ie(e);if(t){var o=ie(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==$(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ie(e){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(i,e);var t,n,r,o=re(i);function i(){return ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&te(t.prototype,n),r&&te(t,r),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ue(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=de(e);if(t){var o=de(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var he=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(){return ue(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&se(t.prototype,n),r&&se(t,r),i}(p);function me(e){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ve(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==me(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=Ee(i);function i(){return ve(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e,t){var n=e.description||e.title||e.value;return React.createElement("option",{value:e.value||"",key:"".concat(n,"-").concat(e.value,"-").concat(t)},n)}))),t)}}])&&ge(t.prototype,n),r&&ge(t,r),i}(p);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Re(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Se(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ae(e);if(t){var o=Ae(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ce(this,n)}}function Ce(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ae(e){return(Ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(i,e);var t,n,r,o=Se(i);function i(){return Re(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&Oe(t.prototype,n),r&&Oe(t,r),i}(p);function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Le(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Me(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ke(e);if(t){var o=ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ge(this,n)}}function Ge(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var je=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,r,o=Me(i);function i(){return Le(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&xe(t.prototype,n),r&&xe(t,r),i}(p);function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(n),!0).forEach((function(t){Be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function He(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Xe(e);if(t){var o=Xe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return We(this,n)}}function We(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?Ye(e):t}function Ye(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Qe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(i,e);var t,n,r,o=He(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ye(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.initValue||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(b,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(Z,{config:Ue(Ue({},e.config),{},{inputType:"htmlarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(G,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(Z,{config:Ue({inputType:"input"},e.config),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(he,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(ae,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(Te,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Pe,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(je,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(Z,{config:Ue(Ue({},e.config),{},{inputType:"textarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;default:console.log("Form field "+e.config.inputType+"not yet implemented")}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Ve(t.prototype,n),r&&Ve(t,r),i}(r.a);function Je(e){return(Je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ze(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return(et=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function tt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ot(e);if(t){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return nt(this,n)}}function nt(e,t){return!t||"object"!==Je(t)&&"function"!=typeof t?rt(e):t}function rt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var it=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&et(e,t)}(i,e);var t,n,r,o=tt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=rt(t=o.call(this,e,{title:null,intro:null,fields:[]})),r=e.values;return!r&&n.config.fields&&n.config.fields.length&&(r={},n.config.fields.map((function(e,t){var n=e.name||e.title.toLowerCase();r[n]=e.value}))),n.state={values:r||{}},n.handleOnChange=n.handleOnChange.bind(rt(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=this,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ke(Object(n),!0).forEach((function(t){Ze(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);n[e.name]=e.value,this.setState({values:n},(function(){"function"==typeof t.props.onChange&&t.props.onChange(e)}))}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Qe,Ze({config:t,initValue:t.value,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&$e(t.prototype,n),r&&$e(t,r),i}(r.a);function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function st(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pt(e);if(t){var o=pt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lt(this,n)}}function lt(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?ft(e):t}function ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pt(e){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var dt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(i,e);var t,n,r,o=st(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(ft(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&ct(t.prototype,n),r&&ct(t,r),i}(r.a);t.a={Form:it,FormField:Qe,Hidden:b,ImageUpload:G,InputWithCounter:Z,Postcode:he,Radios:ae,Select:Te,Text:Pe,Textarea:je,Slider:dt}},function(e,t){e.exports=window.ReactDOM},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(51).Promise},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=d(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(e,t){var n,r,o=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function b(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},b.error=function(){var e=new b(null,{status:0,statusText:""});return e.type="error",e};var _=[301,302,303,307,308];b.redirect=function(e,t){if(-1===_.indexOf(t))throw new RangeError("Invalid status code");return new b(null,{status:t,headers:{location:e}})};var T=self.DOMException;try{new T}catch(e){(T=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),T.prototype.constructor=T}function I(t,n){return new e((function(e,o){var i=new y(t,n);if(i.signal&&i.signal.aborted)return o(new T("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new b(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new T("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}I.polyfill=!0,self.fetch||(self.fetch=I,self.Headers=f,self.Request=y,self.Response=b)}).call(this,n(10))},function(e,t,n){var r=n(8),o=n(14),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(15),a=n(26),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(11);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(4),o=n(13);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g})),n.d(t,"Image",(function(){return g})),n.d(t,"IdeaImage",(function(){return O}));n(12);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(95),n(3)),u=n.n(c);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=u.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images||[];return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=s(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=s(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n,a=r*i.getAspectRatioFactor(),c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&p(t.prototype,n),r&&p(t,r),a}(n(1).a);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return I(this,n)}}function I(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(i,e);var t,n,r,o=T(i);function i(){return E(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&b(t.prototype,n),r&&b(t,r),i}(g);O.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(O,{attributes:n,config:t}),e)}},function(e,t,n){var r=n(8),o=n(56),i=n(25),a=n(17),c=n(26),u=n(7),s=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(11);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),o=n(11),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(4),o=n(18),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(60),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(63),o=n(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(17),i=n(36).indexOf,a=n(19);e.exports=function(e,t){var n,c=o(e),u=0,s=[];for(n in c)!r(a,n)&&r(c,n)&&s.push(n);for(;t.length>u;)r(c,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(17),o=n(48),i=n(65),a=function(e){return function(t,n,a){var c,u=r(t),s=o(u.length),l=i(a,s);if(e&&n!=n){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t,n){var r=n(4),o=n(24).f,i=n(13),a=n(57),c=n(18),u=n(61),s=n(67);e.exports=function(e,t){var n,l,f,p,d,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=o(n,l))&&d.value:n[l],!s(m?l:h+(v?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,e)}}},function(e,t,n){var r=n(50),o=n(70),i=n(14),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),a=Object.defineProperty,c={},u=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(s&&!r)return!0;var e={length:-1};s?a(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(4),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function c(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}u((o=o.apply(t,n||[])).next())}))}function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;Object.create}).call(this,n(10))},function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(68);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4),o=n(32),i=n(7),a=n(33),c=n(38),u=n(69),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;e.exports=function(e){return i(s,e)||(c&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,u=function(e,t){m[i]=e,m[i+1]=t,2===(i+=2)&&(c?c(v):_())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(v,1)}}var m=new Array(1e3);function v(){for(var e=0;e<i;e+=2)(0,m[e])(m[e+1]),m[e]=void 0,m[e+1]=void 0;i=0}var g,y,E,b,_=void 0;function T(e,t){var n=arguments,r=this,o=new this.constructor(O);void 0===o[R]&&F(o);var i,a=r._state;return a?(i=n[a-1],u((function(){return j(a,o,i,r._result)}))):N(r,o,e,t),o}function I(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(O);return P(t,e),t}p?_=function(){return t.nextTick(v)}:f?(y=0,E=new f(v),b=document.createTextNode(""),E.observe(b,{characterData:!0}),_=function(){b.data=y=++y%2}):d?((g=new MessageChannel).port1.onmessage=v,_=function(){return g.port2.postMessage(0)}):_=void 0===s?function(){try{var e=n(53);return a=e.runOnLoop||e.runOnContext,function(){a(v)}}catch(e){return h()}}():h();var R=Math.random().toString(36).substring(16);function O(){}var w=void 0,S=new G;function C(e){try{return e.then}catch(e){return S.error=e,S}}function A(t,n,r){n.constructor===t.constructor&&r===T&&n.constructor.resolve===I?function(e,t){1===t._state?L(e,t._result):2===t._state?x(e,t._result):N(t,void 0,(function(t){return P(e,t)}),(function(t){return x(e,t)}))}(t,n):r===S?x(t,S.error):void 0===r?L(t,n):e(r)?function(e,t,n){u((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?P(e,n):L(e,n))}),(function(t){r||(r=!0,x(e,t))}),e._label);!r&&o&&(r=!0,x(e,o))}),e)}(t,n,r):L(t,n)}function P(e,t){var n;e===t?x(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?A(e,t,C(t)):L(e,t)}function D(e){e._onerror&&e._onerror(e._result),M(e)}function L(e,t){e._state===w&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(M,e))}function x(e,t){e._state===w&&(e._state=2,e._result=t,u(D,e))}function N(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&u(M,e)}function M(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?j(n,r,o,i):o(i);e._subscribers.length=0}}function G(){this.error=null}var k=new G;function j(t,n,r,o){var i=e(r),a=void 0,c=void 0,u=void 0,s=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return k.error=e,k}}(r,o))===k?(s=!0,c=a.error,a=null):u=!0,n===a)return void x(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,u=!0;n._state!==w||(i&&u?P(n,a):s?x(n,c):1===t?L(n,a):2===t&&x(n,a))}var q=0;function F(e){e[R]=q++,e._state=void 0,e._result=void 0,e._subscribers=[]}function U(e,t){this._instanceConstructor=e,this.promise=new e(O),this.promise[R]||F(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?L(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&L(this.promise,this._result))):x(this.promise,new Error("Array Methods must be provided an Array"))}function B(e){this[R]=q++,this._result=this._state=void 0,this._subscribers=[],O!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof B?function(e,t){try{t((function(t){P(e,t)}),(function(t){x(e,t)}))}catch(t){x(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function V(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}return U.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===w&&n<e;n++)this._eachEntry(t[n],n)},U.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===I){var o=C(e);if(o===T&&e._state!==w)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===B){var i=new n(O);A(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},U.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===w&&(this._remaining--,2===e?x(r,n):this._result[t]=n),0===this._remaining&&L(r,this._result)},U.prototype._willSettleAt=function(e,t){var n=this;N(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},B.all=function(e){return new U(this,e).promise},B.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},B.resolve=I,B.reject=function(e){var t=new this(O);return x(t,e),t},B._setScheduler=function(e){c=e},B._setAsap=function(e){u=e},B._asap=u,B.prototype={constructor:B,then:T,catch:function(e){return this.then(null,e)}},V(),B.polyfill=V,B.Promise=B,B},e.exports=o()}).call(this,n(52),n(22))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FilePond=t.FileStatus=t.registerPlugin=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r},c=n(94);t.registerPlugin=c.registerPlugin,t.FileStatus=c.FileStatus;var u=(0,c.supported)(),s=["setOptions","on","off","onOnce","appendTo","insertAfter","insertBefore","isAttachedTo","replaceElement","restoreElement","destroy"];t.FilePond=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.allowFilesSync=!0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){var e=this;if(u){var t=Object.assign({},this.props);if(t.onupdatefiles){var n=t.onupdatefiles;t.onupdatefiles=function(t){e.allowFilesSync=!1,n(t)}}this._pond=(0,c.create)(this._element,t),Object.keys(this._pond).filter((function(e){return!s.includes(e)})).forEach((function(t){e[t]=e._pond[t]}))}}},{key:"componentWillUnmount",value:function(){this._pond&&(this._pond.destroy(),this.allowFilesSync=!0)}},{key:"shouldComponentUpdate",value:function(){return!!this.allowFilesSync||(this.allowFilesSync=!0,!1)}},{key:"componentDidUpdate",value:function(){if(this._pond){var e=Object.assign({},this.props);delete e.onupdatefiles,this._pond.setOptions(e)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,r=t.name,o=t.className,a=t.allowMultiple,c=t.required,u=t.captureMethod,s=t.acceptedFileTypes;return(0,i.createElement)("div",{className:"filepond--wrapper"},(0,i.createElement)("input",{type:"file",name:r,id:n,accept:s,multiple:a,required:c,className:o,capture:u,ref:function(t){return e._element=t}}))}}]),t}(a.default.Component)},,function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(4),o=n(13),i=n(7),a=n(18),c=n(29),u=n(58),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var u=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:o(e,t,n)):s?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(59),c=n(4),u=n(11),s=n(13),l=n(7),f=n(31),p=n(19),d=c.WeakMap;if(a){var h=new d,m=h.get,v=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},o=function(e){return m.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var y=f("state");p[y]=!0,r=function(e,t){return s(e,y,t),t},o=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(4),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(62),i=n(24),a=n(14);e.exports=function(e,t){for(var n=o(t),c=a.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(e,l)||c(e,l,u(t,l))}}},function(e,t,n){var r=n(34),o=n(64),i=n(66),a=n(15);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(35),o=n(20).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==s||n!=u&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(15),i=n(71),a=n(20),c=n(19),u=n(73),s=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(14),i=n(15),a=n(72);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,u=0;c>u;)o.f(e,n=r[u++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(20);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(76);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){return/^image/.test(e.type)};function n(e){this.wrapped=e}function r(e){var r,o;function i(e,n){return new t((function(t,i){var c={key:e,arg:n,resolve:t,reject:i,next:null};o?o=o.next=c:(r=o=c,a(e,n))}))}function a(r,o){try{var i=e[r](o),u=i.value,s=u instanceof n;t.resolve(s?u.wrapped:u).then((function(e){s?a("next",e):c(i.done?"return":"normal",e)}),(function(e){a("throw",e)}))}catch(e){c("throw",e)}}function c(e,t){switch(e){case"return":r.resolve({value:t,done:!0});break;case"throw":r.reject(t);break;default:r.resolve({value:t,done:!1})}(r=r.next)?a(r.key,r.arg):o=null}this._invoke=i,"function"!=typeof e.return&&(this.return=void 0)}function o(e,t){return i(e)||a(e,t)||c()}function i(e){if(Array.isArray(e))return e}function a(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(r.prototype[Symbol.asyncIterator]=function(){return this}),r.prototype.next=function(e){return this._invoke("next",e)},r.prototype.throw=function(e){return this._invoke("throw",e)},r.prototype.return=function(e){return this._invoke("return",e)};var u=function(e,t){return p(e.x*t,e.y*t)},s=function(e,t){return p(e.x+t.x,e.y+t.y)},l=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y);return 0===t?{x:0,y:0}:p(e.x/t,e.y/t)},f=function(e,t,n){var r=Math.cos(t),o=Math.sin(t),i=p(e.x-n.x,e.y-n.y);return p(n.x+r*i.x-o*i.y,n.y+o*i.x+r*i.y)},p=function(){return{x:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,y:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}},d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0;return"string"==typeof e?parseFloat(e)*n:"number"==typeof e?e*(r?t[r]:Math.min(t.width,t.height)):void 0},h=function(e,t,n){var r=e.borderStyle||e.lineStyle||"solid",o=e.backgroundColor||e.fontColor||"transparent",i=e.borderColor||e.lineColor||"transparent",a=d(e.borderWidth||e.lineWidth,t,n);return{"stroke-linecap":e.lineCap||"round","stroke-linejoin":e.lineJoin||"round","stroke-width":a||0,"stroke-dasharray":"string"==typeof r?"":r.map((function(e){return d(e,t,n)})).join(","),stroke:i,fill:o,opacity:e.opacity||1}},m=function(e){return null!=e},v=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=d(e.x,t,n,"width")||d(e.left,t,n,"width"),o=d(e.y,t,n,"height")||d(e.top,t,n,"height"),i=d(e.width,t,n,"width"),a=d(e.height,t,n,"height"),c=d(e.right,t,n,"width"),u=d(e.bottom,t,n,"height");return m(o)||(o=m(a)&&m(u)?t.height-a-u:u),m(r)||(r=m(i)&&m(c)?t.width-i-c:c),m(i)||(i=m(r)&&m(c)?t.width-r-c:0),m(a)||(a=m(o)&&m(u)?t.height-o-u:0),{x:r||0,y:o||0,width:i||0,height:a||0}},g=function(e){return e.map((function(e,t){return"".concat(0===t?"M":"L"," ").concat(e.x," ").concat(e.y)})).join(" ")},y=function(e,t){return Object.keys(t).forEach((function(n){return e.setAttribute(n,t[n])}))},E="http://www.w3.org/2000/svg",b=function(e,t){var n=document.createElementNS(E,e);return t&&y(n,t),n},_=function(e){return y(e,Object.assign({},e.rect,e.styles))},T=function(e){var t=e.rect.x+.5*e.rect.width,n=e.rect.y+.5*e.rect.height,r=.5*e.rect.width,o=.5*e.rect.height;return y(e,Object.assign({cx:t,cy:n,rx:r,ry:o},e.styles))},I={contain:"xMidYMid meet",cover:"xMidYMid slice"},R=function(e,t){y(e,Object.assign({},e.rect,e.styles,{preserveAspectRatio:I[t.fit]||"none"}))},O={left:"start",center:"middle",right:"end"},w=function(e,t,n,r){var o=d(t.fontSize,n,r),i=t.fontFamily||"sans-serif",a=t.fontWeight||"normal",c=O[t.textAlign]||"start";y(e,Object.assign({},e.rect,e.styles,{"stroke-width":0,"font-weight":a,"font-size":o,"font-family":i,"text-anchor":c})),e.text!==t.text&&(e.text=t.text,e.textContent=t.text.length?t.text:" ")},S=function(e,t,n,r){y(e,Object.assign({},e.rect,e.styles,{fill:"none"}));var o=e.childNodes[0],i=e.childNodes[1],a=e.childNodes[2],c=e.rect,p={x:e.rect.x+e.rect.width,y:e.rect.y+e.rect.height};if(y(o,{x1:c.x,y1:c.y,x2:p.x,y2:p.y}),t.lineDecoration){i.style.display="none",a.style.display="none";var h=l({x:p.x-c.x,y:p.y-c.y}),m=d(.05,n,r);if(-1!==t.lineDecoration.indexOf("arrow-begin")){var v=u(h,m),g=s(c,v),E=f(c,2,g),b=f(c,-2,g);y(i,{style:"display:block;",d:"M".concat(E.x,",").concat(E.y," L").concat(c.x,",").concat(c.y," L").concat(b.x,",").concat(b.y)})}if(-1!==t.lineDecoration.indexOf("arrow-end")){var _=u(h,-m),T=s(p,_),I=f(p,2,T),R=f(p,-2,T);y(a,{style:"display:block;",d:"M".concat(I.x,",").concat(I.y," L").concat(p.x,",").concat(p.y," L").concat(R.x,",").concat(R.y)})}}},C=function(e,t,n,r){y(e,Object.assign({},e.styles,{fill:"none",d:g(t.points.map((function(e){return{x:d(e.x,n,r,"width"),y:d(e.y,n,r,"height")}})))}))},A=function(e){return function(t){return b(e,{id:t.id})}},P=function(e){var t=b("g",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round"}),n=b("line");t.appendChild(n);var r=b("path");t.appendChild(r);var o=b("path");return t.appendChild(o),t},D={image:function(e){var t=b("image",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round",opacity:"0"});return t.onload=function(){t.setAttribute("opacity",e.opacity||1)},t.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",e.src),t},rect:A("rect"),ellipse:A("ellipse"),text:A("text"),path:A("path"),line:P},L={rect:_,ellipse:T,image:R,text:w,path:C,line:S},x=function(e,t){return D[e](t)},N=function(e,t,n,r,o){"path"!==t&&(e.rect=v(n,r,o)),e.styles=h(n,r,o),L[t](e,n,r,o)},M=["x","y","left","top","right","bottom","width","height"],G=function(e){return"string"==typeof e&&/%/.test(e)?parseFloat(e)/100:e},k=function(e){var t=o(e,2),n=t[0],r=t[1],i=r.points?{}:M.reduce((function(e,t){return e[t]=G(r[t]),e}),{});return[n,Object.assign({zIndex:0},r,i)]},j=function(e,t){return e[1].zIndex>t[1].zIndex?1:e[1].zIndex<t[1].zIndex?-1:0},q=function(e){return e.utils.createView({name:"image-preview-markup",tag:"svg",ignoreRect:!0,mixins:{apis:["width","height","crop","markup","resize","dirty"]},write:function(e){var t=e.root,n=e.props;if(n.dirty){var r=n.crop,i=n.resize,a=n.markup,c=n.width,u=n.height,s=r.width,l=r.height;if(i){var f=i.size,p=f&&f.width,d=f&&f.height,h=i.mode,m=i.upscale;p&&!d&&(d=p),d&&!p&&(p=d);var v=s<p&&l<d;if(!v||v&&m){var g,y=p/s,E=d/l;"force"===h?(s=p,l=d):("cover"===h?g=Math.max(y,E):"contain"===h&&(g=Math.min(y,E)),s*=g,l*=g)}}var b={width:c,height:u};t.element.setAttribute("width",b.width),t.element.setAttribute("height",b.height);var _=Math.min(c/s,u/l);t.element.innerHTML="";var T=t.query("GET_IMAGE_PREVIEW_MARKUP_FILTER");a.filter(T).map(k).sort(j).forEach((function(e){var n=o(e,2),r=n[0],i=n[1],a=x(r,i);N(a,r,i,b,_),t.element.appendChild(a)}))}}})},F=function(e,t){return{x:e,y:t}},U=function(e,t){return e.x*t.x+e.y*t.y},B=function(e,t){return F(e.x-t.x,e.y-t.y)},V=function(e,t){return U(B(e,t),B(e,t))},z=function(e,t){return Math.sqrt(V(e,t))},H=function(e,t){var n=e,r=1.5707963267948966,o=t,i=1.5707963267948966-t,a=Math.sin(r),c=Math.sin(o),u=Math.sin(i),s=Math.cos(i),l=n/a;return F(s*(l*c),s*(l*u))},W=function(e,t){var n=e.width,r=e.height,o=H(n,t),i=H(r,t),a=F(e.x+Math.abs(o.x),e.y-Math.abs(o.y)),c=F(e.x+e.width+Math.abs(i.y),e.y+Math.abs(i.x)),u=F(e.x-Math.abs(i.y),e.y+e.height-Math.abs(i.x));return{width:z(a,c),height:z(a,u)}},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=e.height/e.width,o=1,i=t,a=1,c=r;c>i&&(a=(c=i)/r);var u=Math.max(o/a,i/c),s=e.width/(n*u*a);return{width:s,height:s*t}},X=function(e,t,n,r){var o=r.x>.5?1-r.x:r.x,i=r.y>.5?1-r.y:r.y,a=2*o*e.width,c=2*i*e.height,u=W(t,n);return Math.max(u.width/a,u.height/c)},Q=function(e,t){var n=e.width,r=n*t;return r>e.height&&(n=(r=e.height)/t),{x:.5*(e.width-n),y:.5*(e.height-r),width:n,height:r}},J=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.zoom,r=t.rotation,o=t.center,i=t.aspectRatio;i||(i=e.height/e.width);var a=Y(e,i,n),c={x:.5*a.width,y:.5*a.height},u={x:0,y:0,width:a.width,height:a.height,center:c},s=void 0===t.scaleToFit||t.scaleToFit,l=n*X(e,Q(u,i),r,s?o:{x:.5,y:.5});return{widthFloat:a.width/l,heightFloat:a.height/l,width:Math.round(a.width/l),height:Math.round(a.height/l)}},K={type:"spring",stiffness:.5,damping:.45,mass:10},Z=function(e){return e.utils.createView({name:"image-bitmap",ignoreRect:!0,mixins:{styles:["scaleX","scaleY"]},create:function(e){var t=e.root,n=e.props;t.appendChild(n.image)}})},$=function(e){return e.utils.createView({name:"image-canvas-wrapper",tag:"div",ignoreRect:!0,mixins:{apis:["crop","width","height"],styles:["originX","originY","translateX","translateY","scaleX","scaleY","rotateZ"],animations:{originX:K,originY:K,scaleX:K,scaleY:K,translateX:K,translateY:K,rotateZ:K}},create:function(t){var n=t.root,r=t.props;r.width=r.image.width,r.height=r.image.height,n.ref.bitmap=n.appendChildView(n.createChildView(Z(e),{image:r.image}))},write:function(e){var t=e.root,n=e.props.crop.flip,r=t.ref.bitmap;r.scaleX=n.horizontal?-1:1,r.scaleY=n.vertical?-1:1}})},ee=function(e){return e.utils.createView({name:"image-clip",tag:"div",ignoreRect:!0,mixins:{apis:["crop","markup","resize","width","height","dirty","background"],styles:["width","height","opacity"],animations:{opacity:{type:"tween",duration:250}}},didWriteView:function(e){var t=e.root,n=e.props;n.background&&(t.element.style.backgroundColor=n.background)},create:function(t){var n=t.root,r=t.props;n.ref.image=n.appendChildView(n.createChildView($(e),Object.assign({},r))),n.ref.createMarkup=function(){n.ref.markup||(n.ref.markup=n.appendChildView(n.createChildView(q(e),Object.assign({},r))))},n.ref.destroyMarkup=function(){n.ref.markup&&(n.removeChildView(n.ref.markup),n.ref.markup=null)};var o=n.query("GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR");null!==o&&(n.element.dataset.transparencyIndicator="grid"===o?o:"color")},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=n.crop,i=n.markup,a=n.resize,c=n.dirty,u=n.width,s=n.height;t.ref.image.crop=o;var l={x:0,y:0,width:u,height:s,center:{x:.5*u,y:.5*s}},f={width:t.ref.image.width,height:t.ref.image.height},p={x:o.center.x*f.width,y:o.center.y*f.height},d={x:l.center.x-f.width*o.center.x,y:l.center.y-f.height*o.center.y},h=2*Math.PI+o.rotation%(2*Math.PI),m=o.aspectRatio||f.height/f.width,v=void 0===o.scaleToFit||o.scaleToFit,g=X(f,Q(l,m),h,v?o.center:{x:.5,y:.5}),y=o.zoom*g;i&&i.length?(t.ref.createMarkup(),t.ref.markup.width=u,t.ref.markup.height=s,t.ref.markup.resize=a,t.ref.markup.dirty=c,t.ref.markup.markup=i,t.ref.markup.crop=J(f,o)):t.ref.markup&&t.ref.destroyMarkup();var E=t.ref.image;if(r)return E.originX=null,E.originY=null,E.translateX=null,E.translateY=null,E.rotateZ=null,E.scaleX=null,void(E.scaleY=null);E.originX=p.x,E.originY=p.y,E.translateX=d.x,E.translateY=d.y,E.rotateZ=h,E.scaleX=y,E.scaleY=y}})},te=function(e){return e.utils.createView({name:"image-preview",tag:"div",ignoreRect:!0,mixins:{apis:["image","crop","markup","resize","dirty","background"],styles:["translateY","scaleX","scaleY","opacity"],animations:{scaleX:K,scaleY:K,translateY:K,opacity:{type:"tween",duration:400}}},create:function(t){var n=t.root,r=t.props;n.ref.clip=n.appendChildView(n.createChildView(ee(e),{id:r.id,image:r.image,crop:r.crop,markup:r.markup,resize:r.resize,dirty:r.dirty,background:r.background}))},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=t.ref.clip,i=n.image,a=n.crop,c=n.markup,u=n.resize,s=n.dirty;if(o.crop=a,o.markup=c,o.resize=u,o.dirty=s,o.opacity=r?0:1,!r&&!t.rect.element.hidden){var l=i.height/i.width,f=a.aspectRatio||l,p=t.rect.inner.width,d=t.rect.inner.height,h=t.query("GET_IMAGE_PREVIEW_HEIGHT"),m=t.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),v=t.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),g=t.query("GET_PANEL_ASPECT_RATIO"),y=t.query("GET_ALLOW_MULTIPLE");g&&!y&&(h=p*g,f=g);var E=null!==h?h:Math.max(m,Math.min(p*f,v)),b=E/f;b>p&&(E=(b=p)*f),E>d&&(E=d,b=d/f),o.width=b,o.height=E}}})},ne='<svg width="500" height="200" viewBox="0 0 500 200" preserveAspectRatio="none">\n    <defs>\n        <radialGradient id="gradient-__UID__" cx=".5" cy="1.25" r="1.15">\n            <stop offset=\'50%\' stop-color=\'#000000\'/>\n            <stop offset=\'56%\' stop-color=\'#0a0a0a\'/>\n            <stop offset=\'63%\' stop-color=\'#262626\'/>\n            <stop offset=\'69%\' stop-color=\'#4f4f4f\'/>\n            <stop offset=\'75%\' stop-color=\'#808080\'/>\n            <stop offset=\'81%\' stop-color=\'#b1b1b1\'/>\n            <stop offset=\'88%\' stop-color=\'#dadada\'/>\n            <stop offset=\'94%\' stop-color=\'#f6f6f6\'/>\n            <stop offset=\'100%\' stop-color=\'#ffffff\'/>\n        </radialGradient>\n        <mask id="mask-__UID__">\n            <rect x="0" y="0" width="500" height="200" fill="url(#gradient-__UID__)"></rect>\n        </mask>\n    </defs>\n    <rect x="0" width="500" height="200" fill="currentColor" mask="url(#mask-__UID__)"></rect>\n</svg>',re=!1,oe=0,ie=function(e){return e.utils.createView({name:"image-preview-overlay",tag:"div",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;!re&&document.querySelector("base")&&(ne=ne.replace(/url\(\#/g,"url("+window.location.href.replace(window.location.hash,"")+"#"),re=!0),oe++,t.element.classList.add("filepond--image-preview-overlay-".concat(n.status)),t.element.innerHTML=ne.replace(/__UID__/g,oe)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},ae=function(){self.onmessage=function(e){createImageBitmap(e.data.message.file).then((function(t){self.postMessage({id:e.data.id,message:t},[t])}))}},ce=function(){self.onmessage=function(e){for(var t=e.data.message.imageData,n=e.data.message.colorMatrix,r=t.data,o=r.length,i=n[0],a=n[1],c=n[2],u=n[3],s=n[4],l=n[5],f=n[6],p=n[7],d=n[8],h=n[9],m=n[10],v=n[11],g=n[12],y=n[13],E=n[14],b=n[15],_=n[16],T=n[17],I=n[18],R=n[19],O=0,w=0,S=0,C=0,A=0;O<o;O+=4)w=r[O]/255,S=r[O+1]/255,C=r[O+2]/255,A=r[O+3]/255,r[O]=Math.max(0,Math.min(255*(w*i+S*a+C*c+A*u+s),255)),r[O+1]=Math.max(0,Math.min(255*(w*l+S*f+C*p+A*d+h),255)),r[O+2]=Math.max(0,Math.min(255*(w*m+S*v+C*g+A*y+E),255)),r[O+3]=Math.max(0,Math.min(255*(w*b+S*_+C*T+A*I+R),255));self.postMessage({id:e.data.id,message:t},[t.data.buffer])}},ue=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},se={1:function(){return[1,0,0,1,0,0]},2:function(e){return[-1,0,0,1,e,0]},3:function(e,t){return[-1,0,0,-1,e,t]},4:function(e,t){return[1,0,0,-1,0,t]},5:function(){return[0,1,1,0,0,0]},6:function(e,t){return[0,1,-1,0,t,0]},7:function(e,t){return[0,-1,-1,0,t,e]},8:function(e){return[0,-1,1,0,0,e]}},le=function(e,t,n,r){-1!==r&&e.transform.apply(e,se[r](t,n))},fe=function(e,t,n,r){t=Math.round(t),n=Math.round(n);var o=document.createElement("canvas");o.width=t,o.height=n;var i=o.getContext("2d");if(r>=5&&r<=8){var a=[n,t];t=a[0],n=a[1]}return le(i,t,n,r),i.drawImage(e,0,0,t,n),o},pe=function(e){return/^image/.test(e.type)&&!/svg/.test(e.type)},de=10,he=10,me=function(e){var t=Math.min(de/e.width,he/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,u=0,s=0,l=0,f=0;f<c;f+=4)u+=a[f]*a[f],s+=a[f+1]*a[f+1],l+=a[f+2]*a[f+2];return{r:u=ve(u,c),g:s=ve(s,c),b:l=ve(l,c)}},ve=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},ge=function(e,t){return(t=t||document.createElement("canvas")).width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0),t},ye=function(e){var t;try{t=new ImageData(e.width,e.height)}catch(n){t=document.createElement("canvas").getContext("2d").createImageData(e.width,e.height)}return t.data.set(new Uint8ClampedArray(e.data)),t},Ee=function(e){return new t((function(t,n){var r=new Image;r.crossOrigin="Anonymous",r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},be=function(e){var n=ie(e),r=te(e),o=e.utils.createWorker,i=function(e,n,r){return new t((function(t){e.ref.imageData||(e.ref.imageData=r.getContext("2d").getImageData(0,0,r.width,r.height));var i=ye(e.ref.imageData);if(!n||20!==n.length)return r.getContext("2d").putImageData(i,0,0),t();var a=o(ce);a.post({imageData:i,colorMatrix:n},(function(e){r.getContext("2d").putImageData(e,0,0),a.terminate(),t()}),[i.data.buffer])}))},a=function(e,t){e.removeChildView(t),t.image.width=1,t.image.height=1,t._destroy()},c=function(e){var t=e.root,n=t.ref.images.shift();return n.opacity=0,n.translateY=-15,t.ref.imageViewBin.push(n),n},u=function(e){var t=e.root,n=e.props,o=e.image,i=n.id,a=t.query("GET_ITEM",{id:i});if(a){var c,u,s=a.getMetadata("crop")||{center:{x:.5,y:.5},flip:{horizontal:!1,vertical:!1},zoom:1,rotation:0,aspectRatio:null},l=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),f=!1;t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(c=a.getMetadata("markup")||[],u=a.getMetadata("resize"),f=!0);var p=t.appendChildView(t.createChildView(r,{id:i,image:o,crop:s,resize:u,markup:c,dirty:f,background:l,opacity:0,scaleX:1.15,scaleY:1.15,translateY:15}),t.childViews.length);t.ref.images.push(p),p.opacity=1,p.scaleX=1,p.scaleY=1,p.translateY=0,setTimeout((function(){t.dispatch("DID_IMAGE_PREVIEW_SHOW",{id:i})}),250)}},s=function(e){var t=e.root,n=e.props,r=t.query("GET_ITEM",{id:n.id});if(r){var o=t.ref.images[t.ref.images.length-1];o.crop=r.getMetadata("crop"),o.background=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(o.dirty=!0,o.resize=r.getMetadata("resize"),o.markup=r.getMetadata("markup"))}},l=function(e){var t=e.root,n=e.props,r=e.action;if(/crop|filter|markup|resize/.test(r.change.key)&&t.ref.images.length){var o=t.query("GET_ITEM",{id:n.id});if(o)if(/filter/.test(r.change.key)){var a=t.ref.images[t.ref.images.length-1];i(t,r.change.value,a.image)}else if(/crop|markup|resize/.test(r.change.key)){var l=o.getMetadata("crop"),f=t.ref.images[t.ref.images.length-1];if(Math.abs(l.aspectRatio-f.crop.aspectRatio)>1e-5){var p=c({root:t});u({root:t,props:n,image:ge(p.image)})}else s({root:t,props:n})}}},f=function(e){var t=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);return!((t?parseInt(t[1]):null)<=58)&&"createImageBitmap"in window&&pe(e)},p=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=URL.createObjectURL(r.file);ue(o,(function(e,r){t.dispatch("DID_IMAGE_PREVIEW_CALCULATE_SIZE",{id:n,width:e,height:r})}))}},d=function(e){var t=e.root,n=e.props,r=n.id,a=t.query("GET_ITEM",r);if(a){var c=URL.createObjectURL(a.file),s=function(){Ee(c).then(l)},l=function(e){URL.revokeObjectURL(c);var r=(a.getMetadata("exif")||{}).orientation||-1,o=e.width,s=e.height;if(o&&s){if(r>=5&&r<=8){var l=[s,o];o=l[0],s=l[1]}var f=Math.max(1,.75*window.devicePixelRatio),p=t.query("GET_IMAGE_PREVIEW_ZOOM_FACTOR")*f,d=s/o,h=t.rect.element.width,m=t.rect.element.height,v=h,g=v*d;d>1?g=(v=Math.min(o,h*p))*d:v=(g=Math.min(s,m*p))/d;var y=fe(e,v,g,r),E=function(){var r=t.query("GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR")?me(data):null;a.setMetadata("color",r,!0),"close"in e&&e.close(),t.ref.overlayShadow.opacity=1,u({root:t,props:n,image:y})},b=a.getMetadata("filter");b?i(t,b,y).then(E):E()}};if(f(a.file)){var p=o(ae);p.post({file:a.file},(function(e){p.terminate(),e?l(e):s()}))}else s()}},h=function(e){var t=e.root,n=t.ref.images[t.ref.images.length-1];n.translateY=0,n.scaleX=1,n.scaleY=1,n.opacity=1},m=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},v=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},g=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},y=function(e){var t=e.root;t.ref.images=[],t.ref.imageData=null,t.ref.imageViewBin=[],t.ref.overlayShadow=t.appendChildView(t.createChildView(n,{opacity:0,status:"idle"})),t.ref.overlaySuccess=t.appendChildView(t.createChildView(n,{opacity:0,status:"success"})),t.ref.overlayError=t.appendChildView(t.createChildView(n,{opacity:0,status:"failure"}))};return e.utils.createView({name:"image-preview-wrapper",create:y,styles:["height"],apis:["height"],destroy:function(e){e.root.ref.images.forEach((function(e){e.image.width=1,e.image.height=1}))},didWriteView:function(e){e.root.ref.images.forEach((function(e){e.dirty=!1}))},write:e.utils.createRoute({DID_IMAGE_PREVIEW_DRAW:h,DID_IMAGE_PREVIEW_CONTAINER_CREATE:p,DID_FINISH_CALCULATE_PREVIEWSIZE:d,DID_UPDATE_ITEM_METADATA:l,DID_THROW_ITEM_LOAD_ERROR:v,DID_THROW_ITEM_PROCESSING_ERROR:v,DID_THROW_ITEM_INVALID:v,DID_COMPLETE_ITEM_PROCESSING:g,DID_START_ITEM_PROCESSING:m,DID_REVERT_ITEM_PROCESSING:m},(function(e){var t=e.root,n=t.ref.imageViewBin.filter((function(e){return 0===e.opacity}));t.ref.imageViewBin=t.ref.imageViewBin.filter((function(e){return e.opacity>0})),n.forEach((function(e){return a(t,e)})),n.length=0}))})},_e=function(t){var n=t.addFilter,r=t.utils,o=r.Type,i=r.createRoute,a=r.isFile,c=be(t);return n("CREATE_VIEW",(function(t){var n=t.is,r=t.view,o=t.query;if(n("file")&&o("GET_ALLOW_IMAGE_PREVIEW")){var u=function(t){var n=t.root,i=t.props.id,u=o("GET_ITEM",i);if(u&&a(u.file)&&!u.archived){var s=u.file;if(e(s)&&o("GET_IMAGE_PREVIEW_FILTER_ITEM")(u)){var l="createImageBitmap"in(window||{}),f=o("GET_IMAGE_PREVIEW_MAX_FILE_SIZE");if(!(!l&&f&&s.size>f)){n.ref.imagePreview=r.appendChildView(r.createChildView(c,{id:i}));var p=n.query("GET_IMAGE_PREVIEW_HEIGHT");p&&n.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:u.id,height:p});var d=!l&&s.size>o("GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE");n.dispatch("DID_IMAGE_PREVIEW_CONTAINER_CREATE",{id:i},d)}}}},s=function(e,t){if(e.ref.imagePreview){var n=t.id,r=e.query("GET_ITEM",{id:n});if(r){var o=e.query("GET_PANEL_ASPECT_RATIO"),i=e.query("GET_ITEM_PANEL_ASPECT_RATIO"),a=e.query("GET_IMAGE_PREVIEW_HEIGHT");if(!(o||i||a)){var c=e.ref,u=c.imageWidth,s=c.imageHeight;if(u&&s){var l=e.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),f=e.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),p=(r.getMetadata("exif")||{}).orientation||-1;if(p>=5&&p<=8){var d=[s,u];u=d[0],s=d[1]}if(!pe(r.file)||e.query("GET_IMAGE_PREVIEW_UPSCALE")){var h=2048/u;u*=h,s*=h}var m=s/u,v=(r.getMetadata("crop")||{}).aspectRatio||m,g=Math.max(l,Math.min(s,f)),y=e.rect.element.width,E=Math.min(y*v,g);e.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:r.id,height:E})}}}}},l=function(e){e.root.ref.shouldRescale=!0},f=function(e){var t=e.root;"crop"===e.action.change.key&&(t.ref.shouldRescale=!0)},p=function(e){var t=e.root,n=e.action;t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldRescale=!0,t.ref.shouldDrawPreview=!0,t.dispatch("KICK")};r.registerWriter(i({DID_RESIZE_ROOT:l,DID_STOP_RESIZE:l,DID_LOAD_ITEM:u,DID_IMAGE_PREVIEW_CALCULATE_SIZE:p,DID_UPDATE_ITEM_METADATA:f},(function(e){var t=e.root,n=e.props;t.ref.imagePreview&&(t.rect.element.hidden||(t.ref.shouldRescale&&(s(t,n),t.ref.shouldRescale=!1),t.ref.shouldDrawPreview&&(requestAnimationFrame((function(){t.dispatch("DID_FINISH_CALCULATE_PREVIEWSIZE",{id:n.id})})),t.ref.shouldDrawPreview=!1)))})))}})),{options:{allowImagePreview:[!0,o.BOOLEAN],imagePreviewFilterItem:[function(){return!0},o.FUNCTION],imagePreviewHeight:[null,o.INT],imagePreviewMinHeight:[44,o.INT],imagePreviewMaxHeight:[256,o.INT],imagePreviewMaxFileSize:[null,o.INT],imagePreviewZoomFactor:[2,o.INT],imagePreviewUpscale:[!1,o.BOOLEAN],imagePreviewMaxInstantPreviewFileSize:[1e6,o.INT],imagePreviewTransparencyIndicator:[null,o.STRING],imagePreviewCalculateAverageImageColor:[!1,o.BOOLEAN],imagePreviewMarkupShow:[!0,o.BOOLEAN],imagePreviewMarkupFilter:[function(){return!0},o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:_e})),_e}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.isString,a=r.replaceInString,c=r.guesstimateMimeType,u=r.getExtensionFromFilename,s=r.getFilenameFromURL,l=function(e,t){return(/^[^/]+/.exec(e)||[]).pop()===t.slice(0,-2)},f=function(e,t){return e.some((function(e){return/\*$/.test(e)?l(t,e):e===t}))},p=function(e){var t="";if(i(e)){var n=s(e),r=u(n);r&&(t=c(r))}else t=e.type;return t},d=function(e,n,r){if(0===n.length)return!0;var o=p(e);return r?new t((function(t,i){r(e,o).then((function(e){f(n,e)?t():i()})).catch(i)})):f(n,o)},h=function(e){return function(t){return null!==e[t]&&(e[t]||t)}};return n("SET_ATTRIBUTE_TO_OPTION_MAP",(function(e){return Object.assign(e,{accept:"acceptedFileTypes"})})),n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;return!n("GET_ALLOW_FILE_TYPE_VALIDATION")||d(e,n("GET_ACCEPTED_FILE_TYPES"))})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(r("GET_ALLOW_FILE_TYPE_VALIDATION")){var o=r("GET_ACCEPTED_FILE_TYPES"),i=r("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),c=d(e,o,i),u=function(){var e=o.map(h(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter((function(e){return!1!==e}));n({status:{main:r("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:a(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:e.join(", "),allButLastType:e.slice(0,-1).join(", "),lastType:e[e.length-1]})}})};if("boolean"==typeof c)return c?t(e):u();c.then((function(){t(e)})).catch(u)}else t(e)}))})),{options:{allowFileTypeValidation:[!0,o.BOOLEAN],acceptedFileTypes:[[],o.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",o.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",o.STRING],fileValidateTypeLabelExpectedTypesMap:[{},o.OBJECT],fileValidateTypeDetectType:[null,o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.replaceInString,a=r.toNaturalFileSize;return n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return!0;var r=n("GET_MAX_FILE_SIZE");if(null!==r&&e.size>=r)return!1;var o=n("GET_MIN_FILE_SIZE");return!(null!==o&&e.size<=o)})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(!r("GET_ALLOW_FILE_SIZE_VALIDATION"))return t(e);var o=r("GET_FILE_VALIDATE_SIZE_FILTER");if(o&&!o(e))return t(e);var c=r("GET_MAX_FILE_SIZE");if(null!==c&&e.size>=c)n({status:{main:r("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_FILE_SIZE"),{filesize:a(c)})}});else{var u=r("GET_MIN_FILE_SIZE");if(null!==u&&e.size<=u)n({status:{main:r("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MIN_FILE_SIZE"),{filesize:a(u)})}});else{var s=r("GET_MAX_TOTAL_FILE_SIZE");if(null!==s&&r("GET_ACTIVE_ITEMS").reduce((function(e,t){return e+t.fileSize}),0)>s)return void n({status:{main:r("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_TOTAL_FILE_SIZE"),{filesize:a(s)})}});t(e)}}}))})),{options:{allowFileSizeValidation:[!0,o.BOOLEAN],maxFileSize:[null,o.INT],minFileSize:[null,o.INT],maxTotalFileSize:[null,o.INT],fileValidateSizeFilter:[null,o.FUNCTION],labelMinFileSizeExceeded:["File is too small",o.STRING],labelMinFileSize:["Minimum file size is {filesize}",o.STRING],labelMaxFileSizeExceeded:["File is too large",o.STRING],labelMaxFileSize:["Maximum file size is {filesize}",o.STRING],labelMaxTotalFileSizeExceeded:["Maximum total size exceeded",o.STRING],labelMaxTotalFileSize:["Maximum total file size is {filesize}",o.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e={type:"spring",stiffness:.5,damping:.45,mass:10},n=function(t){return t.utils.createView({name:"file-poster",tag:"div",ignoreRect:!0,create:function(e){var t=e.root;t.ref.image=document.createElement("img"),t.element.appendChild(t.ref.image)},write:t.utils.createRoute({DID_FILE_POSTER_LOAD:function(e){var t=e.root,n=e.props,r=n.id,o=t.query("GET_ITEM",{id:n.id});if(o){var i=o.getMetadata("poster");t.ref.image.src=i,t.dispatch("DID_FILE_POSTER_DRAW",{id:r})}}}),mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:e,scaleY:e,opacity:{type:"tween",duration:750}}}})},r=function(e,t){t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0)},o=function(e){return e.utils.createView({name:"file-poster-overlay",tag:"canvas",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;r(n.template,t.element)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},i=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},a=function(e){return-.5*(Math.cos(Math.PI*e)-1)},c=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:a,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:10,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,c=1-i,u=t.join(","),s=0;s<=o;s++){var l=s/o,f=i+c*l;e.addColorStop(f,"rgba(".concat(u,", ").concat(r(l)*n,")"))}},u=10,s=10,l=function(e){var t=Math.min(u/e.width,s/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,l=0,p=0,d=0,h=0;h<c;h+=4)l+=a[h]*a[h],p+=a[h+1]*a[h+1],d+=a[h+2]*a[h+2];return{r:l=f(l,c),g:p=f(p,c),b:d=f(d,c)}},f=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},p=function(e,t,n,r,o){e.width=t,e.height=n;var i=e.getContext("2d"),a=.5*t,u=i.createRadialGradient(a,n+110,n-100,a,n+110,n+100);c(u,r,o,void 0,8,.4),i.save(),i.translate(.5*-t,0),i.scale(2,1),i.fillStyle=u,i.fillRect(0,0,t,n),i.restore()},d="undefined"!=typeof navigator,h=500,m=200,v=d&&document.createElement("canvas"),g=d&&document.createElement("canvas"),y=d&&document.createElement("canvas");d&&(p(v,h,m,[40,40,40],.85),p(g,h,m,[196,78,71],1),p(y,h,m,[54,151,99],1));var E=function(e,n){return new t((function(t,r){var o=new Image;"string"==typeof crossOrigin&&(o.crossOrigin=n),o.onload=function(){t(o)},o.onerror=function(e){r(e)},o.src=e}))},b=function(e){var t=o(e),r=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=r.getMetadata("poster"),a=function(e){var o=t.query("GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR")?l(e):null;r.setMetadata("color",o,!0),t.dispatch("DID_FILE_POSTER_LOAD",{id:n,data:e})};i(o,(function(e,r){t.dispatch("DID_FILE_POSTER_CALCULATE_SIZE",{id:n,width:e,height:r}),E(o,t.query("GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE")).then(a)}))}},a=function(e){e.root.ref.overlayShadow.opacity=1},c=function(e){var t=e.root.ref.image;t.scaleX=1,t.scaleY=1,t.opacity=1},u=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},s=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},f=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},p=function(r){var o=r.root,i=r.props,a=n(e);o.ref.image=o.appendChildView(o.createChildView(a,{id:i.id,scaleX:1.25,scaleY:1.25,opacity:0})),o.ref.overlayShadow=o.appendChildView(o.createChildView(t,{template:v,opacity:0})),o.ref.overlaySuccess=o.appendChildView(o.createChildView(t,{template:y,opacity:0})),o.ref.overlayError=o.appendChildView(o.createChildView(t,{template:g,opacity:0}))};return e.utils.createView({name:"file-poster-wrapper",create:p,write:e.utils.createRoute({DID_FILE_POSTER_LOAD:a,DID_FILE_POSTER_DRAW:c,DID_FILE_POSTER_CONTAINER_CREATE:r,DID_THROW_ITEM_LOAD_ERROR:s,DID_THROW_ITEM_PROCESSING_ERROR:s,DID_THROW_ITEM_INVALID:s,DID_COMPLETE_ITEM_PROCESSING:f,DID_START_ITEM_PROCESSING:u,DID_REVERT_ITEM_PROCESSING:u})})},_=function(e){var t=e.addFilter,n=e.utils,r=n.Type,o=n.createRoute,i=b(e);return t("CREATE_VIEW",(function(e){var t=e.is,n=e.view,r=e.query;if(t("file")&&r("GET_ALLOW_FILE_POSTER")){var a=function(e){var t=e.root,n=e.props;u(t,n)},c=function(e){var t=e.root,n=e.props,r=e.action;/poster/.test(r.change.key)&&u(t,n)},u=function(e,t){var o=t.id,a=r("GET_ITEM",o);a&&a.getMetadata("poster")&&!a.archived&&r("GET_FILE_POSTER_FILTER_ITEM")(a)&&(e.ref.filePoster&&n.removeChildView(e.ref.filePoster),e.ref.filePoster=n.appendChildView(n.createChildView(i,{id:o})),e.dispatch("DID_FILE_POSTER_CONTAINER_CREATE",{id:o}))},s=function(e){var t=e.root,n=e.action;t.ref.filePoster&&(t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldUpdatePanelHeight=!0,t.dispatch("KICK"))},l=function(e){var t=e.root,n=t.query("GET_FILE_POSTER_HEIGHT");if(n)return n;var r=t.query("GET_FILE_POSTER_MIN_HEIGHT"),o=t.query("GET_FILE_POSTER_MAX_HEIGHT");if(r&&t.ref.imageHeight<r)return r;var i=t.rect.element.width*(t.ref.imageHeight/t.ref.imageWidth);return r&&i<r?r:o&&i>o?o:i};n.registerWriter(o({DID_LOAD_ITEM:a,DID_FILE_POSTER_CALCULATE_SIZE:s,DID_UPDATE_ITEM_METADATA:c},(function(e){var t=e.root,n=e.props;t.ref.filePoster&&(t.rect.element.hidden||t.ref.shouldUpdatePanelHeight&&(t.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:n.id,height:l({root:t})}),t.ref.shouldUpdatePanelHeight=!1))})))}})),{options:{allowFilePoster:[!0,r.BOOLEAN],filePosterHeight:[null,r.INT],filePosterMinHeight:[null,r.INT],filePosterMaxHeight:[null,r.INT],filePosterFilterItem:[function(){return!0},r.FUNCTION],filePosterCalculateAverageImageColor:[!1,r.BOOLEAN],filePosterCrossOriginAttributeValue:["Anonymous",r.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:_})),_}()}).call(this,n(10))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentLightbox}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentLightbox=function(_OpenStadComponent){_inherits(OpenStadComponentLightbox,_OpenStadComponent);var _super=_createSuper(OpenStadComponentLightbox);function OpenStadComponentLightbox(e){var t;return _classCallCheck(this,OpenStadComponentLightbox),(t=_super.call(this,e)).state={images:[],startIndex:0},t.recalcSizes=t.recalcSizes.bind(_assertThisInitialized(t)),t}return _createClass(OpenStadComponentLightbox,[{key:"componentDidMount",value:function(e,t){var n=this;n.showLightBoxListener=function(e){n.showLightbox(e.detail)},document.addEventListener("osc-show-light-box",n.showLightBoxListener),document.body.appendChild(this.instance)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-show-light-box",this.showLightBoxListener)}},{key:"showLightbox",value:function showLightbox(data){var self=this,aspectRatio;try{aspectRatio=eval(data.aspectRatio.replace&&data.aspectRatio.replace("x","/"))}catch(e){}"number"!=typeof aspectRatio&&(aspectRatio=16/9),self.setState({images:data.images,startIndex:data.startIndex,aspectRatio:aspectRatio},(function(){self.instance.style.display="block",self.recalcSizes()})),window.addEventListener("resize",self.recalcSizes)}},{key:"hideLightbox",value:function(){this.instance.style.display="none",window.removeEventListener("resize",this.recalcSizes)}},{key:"showImage",value:function(e,t){e.stopPropagation(),this.mainImage.src=t}},{key:"recalcSizes",value:function(){var e=this;if(e.mainContainer){var t=e.mainContainer.offsetWidth,n=e.mainContainer.offsetHeight;if(t/n>e.state.aspectRatio){var r=.8*n;e.mainImageContainer.style.height=r+"px",e.mainImageContainer.style.width=e.state.aspectRatio*r+"px",e.mainImageContainer.style.top=(n-r)/2+"px",e.mainImageContainer.style.left=(t-e.state.aspectRatio*r)/2+"px"}else{var o=t;e.mainImageContainer.style.width=o+"px",e.mainImageContainer.style.height=1/e.state.aspectRatio*o+"px",e.mainImageContainer.style.top=(n-1/e.state.aspectRatio*o)/2+"px",e.mainImageContainer.style.left=0}e.mainImage.style.width=e.mainImageContainer.style.width,e.mainImage.style.height=e.mainImageContainer.style.height;var i=e.state.aspectRatio*e.navigationContainer.offsetHeight,a=e.state.images.length*i+20*e.state.images.length;a>e.navigationContainer.offsetWidth&&(a=e.navigationContainer.offsetWidth,i=a/e.state.images.length-20),e.navigationContainer.style.width=a+"px",e.state.images.map((function(t,n){var r=parseInt(i);e["lighbox-image-container-".concat(n)].style.width=r+"px",e["lighbox-image-container-".concat(n)].style.height=parseInt(1/e.state.aspectRatio*r)+"px",e["lighbox-image-".concat(n)].style.width=e["lighbox-image-container-".concat(n)].style.width,e["lighbox-image-".concat(n)].style.height=e["lighbox-image-container-".concat(n)].style.height}))}}},{key:"getImageSrc",value:function(e){var t=e;return"object"==_typeof(e)&&e.src&&(t=e.src),t}},{key:"render",value:function(){var e=this,t=this;return React.createElement("div",{className:"osc-lightbox",onClick:function(){e.hideLightbox()},ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-close-button",onClick:function(e){return t.hideLightbox(e)}}),React.createElement("div",{className:"osc-lightbox-main-container",ref:function(e){return t.mainContainer=e}},React.createElement("div",{className:"osc-image-container",ref:function(e){return t.mainImageContainer=e}},React.createElement("img",{src:t.state.images[t.state.startIndex]&&t.getImageSrc(t.state.images[t.state.startIndex]),ref:function(e){return t.mainImage=e}}))),React.createElement("div",{className:"osc-lightbox-navigation-container"},React.createElement("div",{className:"osc-lightbox-navigation",ref:function(e){return t.navigationContainer=e}},t.state.images.map((function(e,n){return React.createElement("div",{className:"osc-image-container",style:{backgroundImage:"url(".concat(t.getImageSrc(e),")")},onClick:function(n){return t.showImage(n,t.getImageSrc(e))},key:"lighbox-image-container-".concat(n),ref:function(e){return t["lighbox-image-container-".concat(n)]=e}},React.createElement("img",{src:t.getImageSrc(e),ref:function(e){return t["lighbox-image-".concat(n)]=e}}))})))))}}]),OpenStadComponentLightbox}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},,,,,function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return d})),n.d(t,"PreviousNextButtonBlock",(function(){return d}));n(12);var r=n(0),o=n.n(r),i=n(6),a=n.n(i);n(125);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(i,e);var t,n,r,o=l(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e,{})}return t=i,(n=[{key:"render",value:function(){var e,t,n=this,r=this.props.previousAction||this.config.previousAction,o=this.props.previousUrl||this.config.previousUrl,i=this.props.previousIsDisabled||this.config.previousIsDisabled,a=this.props.previousLabel||this.config.previousLabel;o&&(r=function(){document.location.href="".concat(o)}),r&&(e=React.createElement("div",{className:"osc-previous-button".concat(i?" osc-disabled":""),onClick:function(e){return r(e)}},a));var c=this.props.nextAction||this.config.nextAction,u=this.props.nextUrl||this.config.nextUrl,s=this.props.nextIsDisabled||this.config.nextIsDisabled,l=this.props.nextLabel||this.config.nextLabel;return u&&(c=function(){document.location.href="".concat(u)}),c&&(t=React.createElement("div",{className:"osc-next-button".concat(s?" osc-disabled":""),onClick:function(e){return c(e)}},l)),React.createElement("div",{className:"osc-previous-next-button-block",ref:function(e){return n.instance=e}},e,t)}}])&&u(t.prototype,n),r&&u(t,r),i}(n(1).a);d.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(d,{attributes:n,config:t}),e)}},,,,function(e,t,n){},function(e,t,n){(function(e){!function(t){"use strict";var n=function(e){return e instanceof HTMLElement},r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=Object.assign({},e),o=[],i=[],a=function(){var e=[].concat(i);i.length=0,e.forEach((function(e){var t=e.type,n=e.data;c(t,n)}))},c=function(e,t,n){!n||document.hidden?(f[e]&&f[e](t),o.push({type:e,data:t})):i.push({type:e,data:t})},u=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return l[e]?(t=l)[e].apply(t,r):null},s={getState:function(){return Object.assign({},r)},processActionQueue:function(){var e=[].concat(o);return o.length=0,e},processDispatchQueue:a,dispatch:c,query:u},l={};t.forEach((function(e){l=Object.assign({},e(r),{},l)}));var f={};return n.forEach((function(e){f=Object.assign({},e(c,u,r),{},f)})),s},o=function(e,t,n){"function"!=typeof n?Object.defineProperty(e,t,Object.assign({},n)):e[t]=n},i=function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])},a=function(e){var t={};return i(e,(function(n){o(t,n,e[n])})),t},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(null===n)return e.getAttribute(t)||e.hasAttribute(t);e.setAttribute(t,n)},u="http://www.w3.org/2000/svg",s=["svg","path"],l=function(e){return s.includes(e)},f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"==typeof t&&(n=t,t=null);var r=l(e)?document.createElementNS(u,e):document.createElement(e);return t&&(l(e)?c(r,"class",t):r.className=t),i(n,(function(e,t){c(r,e,t)})),r},p=function(e){return function(t,n){void 0!==n&&e.children[n]?e.insertBefore(t,e.children[n]):e.appendChild(t)}},d=function(e,t){return function(e,n){return void 0!==n?t.splice(n,0,e):t.push(e),e}},h=function(e,t){return function(n){return t.splice(t.indexOf(n),1),n.element.parentNode&&e.removeChild(n.element),n}},m="undefined"!=typeof window&&void 0!==window.document,v=function(){return m},g="children"in(v()?f("svg"):{})?function(e){return e.children.length}:function(e){return e.childNodes.length},y=function(e,t,n,r){var o=n[0]||e.left,i=n[1]||e.top,a=o+e.width,c=i+e.height*(r[1]||1),u={element:Object.assign({},e),inner:{left:e.left,top:e.top,right:e.right,bottom:e.bottom},outer:{left:o,top:i,right:a,bottom:c}};return t.filter((function(e){return!e.isRectIgnored()})).map((function(e){return e.rect})).forEach((function(e){E(u.inner,Object.assign({},e.inner)),E(u.outer,Object.assign({},e.outer))})),b(u.inner),u.outer.bottom+=u.element.marginBottom,u.outer.right+=u.element.marginRight,b(u.outer),u},E=function(e,t){t.top+=e.top,t.right+=e.left,t.bottom+=e.top,t.left+=e.left,t.bottom>e.bottom&&(e.bottom=t.bottom),t.right>e.right&&(e.right=t.right)},b=function(e){e.width=e.right-e.left,e.height=e.bottom-e.top},_=function(e){return"number"==typeof e},T=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.001;return Math.abs(e-t)<r&&Math.abs(n)<r},I=function(e){return e<.5?2*e*e:(4-2*e)*e-1},R={spring:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiffness,n=void 0===t?.5:t,r=e.damping,o=void 0===r?.75:r,i=e.mass,c=void 0===i?10:i,u=null,s=null,l=0,f=!1,p=a({interpolate:function(e,t){if(!f){if(!_(u)||!_(s))return f=!0,void(l=0);T(s+=l+=-(s-u)*n/c,u,l*=o)||t?(s=u,l=0,f=!0,p.onupdate(s),p.oncomplete(s)):p.onupdate(s)}},target:{set:function(e){if(_(e)&&!_(s)&&(s=e),null===u&&(u=e,s=e),s===(u=e)||void 0===u)return f=!0,l=0,p.onupdate(s),void p.oncomplete(s);f=!1},get:function(){return u}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return p},tween:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.duration,o=void 0===r?500:r,i=n.easing,c=void 0===i?I:i,u=n.delay,s=void 0===u?0:u,l=null,f=!0,p=!1,d=null,h=a({interpolate:function(n,r){f||null===d||(null===l&&(l=n),n-l<s||((e=n-l-s)>=o||r?(e=1,t=p?0:1,h.onupdate(t*d),h.oncomplete(t*d),f=!0):(t=e/o,h.onupdate((e>=0?c(p?1-t:t):0)*d))))},target:{get:function(){return p?0:d},set:function(e){if(null===d)return d=e,h.onupdate(e),void h.oncomplete(e);e<d?(d=1,p=!0):(p=!1,d=e),f=!1,l=null}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return h}},O=function(e,t,n){var r=e[t]&&"object"==typeof e[t][n]?e[t][n]:e[t]||e,o="string"==typeof r?r:r.type,i="object"==typeof r?Object.assign({},r):{};return R[o]?R[o](i):null},w=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(t=Array.isArray(t)?t:[t]).forEach((function(t){e.forEach((function(e){var o=e,i=function(){return n[e]},a=function(t){return n[e]=t};"object"==typeof e&&(o=e.key,i=e.getter||i,a=e.setter||a),t[o]&&!r||(t[o]={get:i,set:a})}))}))},S=function(e){return function(t,n){e.addEventListener(t,n)}},C=function(e){return function(t,n){e.removeEventListener(t,n)}},A=function(e){return null!=e},P={opacity:1,scaleX:1,scaleY:1,translateX:0,translateY:0,rotateX:0,rotateY:0,rotateZ:0,originX:0,originY:0},D=function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,i=e.view,a=Object.assign({},n),c={};w(t,[r,o],n);var u=function(){return[n.translateX||0,n.translateY||0]},s=function(){return[n.scaleX||0,n.scaleY||0]},l=function(){return i.rect?y(i.rect,i.childViews,u(),s()):null};return r.rect={get:l},o.rect={get:l},t.forEach((function(e){n[e]=void 0===a[e]?P[e]:a[e]})),{write:function(){if(L(c,n))return x(i.element,n),Object.assign(c,Object.assign({},n)),!0},destroy:function(){}}},L=function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!0;for(var n in t)if(t[n]!==e[n])return!0;return!1},x=function(e,t){var n=t.opacity,r=t.perspective,o=t.translateX,i=t.translateY,a=t.scaleX,c=t.scaleY,u=t.rotateX,s=t.rotateY,l=t.rotateZ,f=t.originX,p=t.originY,d=t.width,h=t.height,m="",v="";(A(f)||A(p))&&(v+="transform-origin: "+(f||0)+"px "+(p||0)+"px;"),A(r)&&(m+="perspective("+r+"px) "),(A(o)||A(i))&&(m+="translate3d("+(o||0)+"px, "+(i||0)+"px, 0) "),(A(a)||A(c))&&(m+="scale3d("+(A(a)?a:1)+", "+(A(c)?c:1)+", 1) "),A(l)&&(m+="rotateZ("+l+"rad) "),A(u)&&(m+="rotateX("+u+"rad) "),A(s)&&(m+="rotateY("+s+"rad) "),m.length&&(v+="transform:"+m+";"),A(n)&&(v+="opacity:"+n+";",0===n&&(v+="visibility:hidden;"),n<1&&(v+="pointer-events:none;")),A(h)&&(v+="height:"+h+"px;"),A(d)&&(v+="width:"+d+"px;");var g=e.elementCurrentStyle||"";v.length===g.length&&v===g||(e.style.cssText=v,e.elementCurrentStyle=v)},N={styles:D,listeners:function(e){e.mixinConfig,e.viewProps,e.viewInternalAPI;var t=e.viewExternalAPI,n=(e.viewState,e.view),r=[],o=S(n.element),i=C(n.element);return t.on=function(e,t){r.push({type:e,fn:t}),o(e,t)},t.off=function(e,t){r.splice(r.findIndex((function(n){return n.type===e&&n.fn===t})),1),i(e,t)},{write:function(){return!0},destroy:function(){r.forEach((function(e){i(e.type,e.fn)}))}}},animations:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,a=Object.assign({},n),c=[];return i(t,(function(e,t){var i=O(t);i&&(i.onupdate=function(t){n[e]=t},i.target=a[e],w([{key:e,setter:function(e){i.target!==e&&(i.target=e)},getter:function(){return n[e]}}],[r,o],n,!0),c.push(i))})),{write:function(e){var t=document.hidden,n=!0;return c.forEach((function(r){r.resting||(n=!1),r.interpolate(e,t)})),n},destroy:function(){}}},apis:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewExternalAPI;w(t,r,n)}},M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.layoutCalculated||(e.paddingTop=parseInt(n.paddingTop,10)||0,e.marginTop=parseInt(n.marginTop,10)||0,e.marginRight=parseInt(n.marginRight,10)||0,e.marginBottom=parseInt(n.marginBottom,10)||0,e.marginLeft=parseInt(n.marginLeft,10)||0,t.layoutCalculated=!0),e.left=t.offsetLeft||0,e.top=t.offsetTop||0,e.width=t.offsetWidth||0,e.height=t.offsetHeight||0,e.right=e.left+e.width,e.bottom=e.top+e.height,e.scrollTop=t.scrollTop,e.hidden=null===t.offsetParent,e},G=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.tag,n=void 0===t?"div":t,r=e.name,o=void 0===r?null:r,i=e.attributes,c=void 0===i?{}:i,u=e.read,s=void 0===u?function(){}:u,l=e.write,m=void 0===l?function(){}:l,v=e.create,E=void 0===v?function(){}:v,b=e.destroy,_=void 0===b?function(){}:b,T=e.filterFrameActionsForChild,I=void 0===T?function(e,t){return t}:T,R=e.didCreateView,O=void 0===R?function(){}:R,w=e.didWriteView,S=void 0===w?function(){}:w,C=e.ignoreRect,A=void 0!==C&&C,P=e.ignoreRectUpdate,D=void 0!==P&&P,L=e.mixins,x=void 0===L?[]:L;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=f(n,"filepond--"+o,c),i=window.getComputedStyle(r,null),u=M(),l=null,v=!1,b=[],T=[],R={},w={},C=[m],P=[s],L=[_],G=function(){return r},k=function(){return b.concat()},j=function(){return R},q=function(e){return function(t,n){return t(e,n)}},F=function(){return l||(l=y(u,b,[0,0],[1,1]))},U=function(){l=null,b.forEach((function(e){return e._read()})),!(D&&u.width&&u.height)&&M(u,r,i);var e={root:X,props:t,rect:u};P.forEach((function(t){return t(e)}))},B=function(e,n,r){var o=0===n.length;return C.forEach((function(i){!1===i({props:t,root:X,actions:n,timestamp:e,shouldOptimize:r})&&(o=!1)})),T.forEach((function(t){!1===t.write(e)&&(o=!1)})),b.filter((function(e){return!!e.element.parentNode})).forEach((function(t){t._write(e,I(t,n),r)||(o=!1)})),b.forEach((function(t,i){t.element.parentNode||(X.appendChild(t.element,i),t._read(),t._write(e,I(t,n),r),o=!1)})),v=o,S({props:t,root:X,actions:n,timestamp:e}),o},V=function(){T.forEach((function(e){return e.destroy()})),L.forEach((function(e){e({root:X,props:t})})),b.forEach((function(e){return e._destroy()}))},z={element:{get:G},style:{get:function(){return i}},childViews:{get:k}},H=Object.assign({},z,{rect:{get:F},ref:{get:j},is:function(e){return o===e},appendChild:p(r),createChildView:q(e),linkView:function(e){return b.push(e),e},unlinkView:function(e){b.splice(b.indexOf(e),1)},appendChildView:d(r,b),removeChildView:h(r,b),registerWriter:function(e){return C.push(e)},registerReader:function(e){return P.push(e)},registerDestroyer:function(e){return L.push(e)},invalidateLayout:function(){return r.layoutCalculated=!1},dispatch:e.dispatch,query:e.query}),W={element:{get:G},childViews:{get:k},rect:{get:F},resting:{get:function(){return v}},isRectIgnored:function(){return A},_read:U,_write:B,_destroy:V},Y=Object.assign({},z,{rect:{get:function(){return u}}});Object.keys(x).sort((function(e,t){return"styles"===e?1:"styles"===t?-1:0})).forEach((function(e){var n=N[e]({mixinConfig:x[e],viewProps:t,viewState:w,viewInternalAPI:H,viewExternalAPI:W,view:a(Y)});n&&T.push(n)}));var X=a(H);E({root:X,props:t});var Q=g(r);return b.forEach((function(e,t){X.appendChild(e.element,Q+t)})),O(X),a(W)}},k=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:60,r="__framePainter";if(window[r])return window[r].readers.push(e),void window[r].writers.push(t);window[r]={readers:[e],writers:[t]};var o=window[r],i=1e3/n,a=null,c=null,u=null,s=null,l=function(){document.hidden?(u=function(){return window.setTimeout((function(){return f(performance.now())}),i)},s=function(){return window.clearTimeout(c)}):(u=function(){return window.requestAnimationFrame(f)},s=function(){return window.cancelAnimationFrame(c)})};document.addEventListener("visibilitychange",(function(){s&&s(),l(),f(performance.now())}));var f=function e(t){c=u(e),a||(a=t);var n=t-a;n<=i||(a=t-n%i,o.readers.forEach((function(e){return e()})),o.writers.forEach((function(e){return e(t)})))};return l(),f(performance.now()),{pause:function(){s(c)}}},j=function(e,t){return function(n){var r=n.root,o=n.props,i=n.actions,a=void 0===i?[]:i,c=n.timestamp,u=n.shouldOptimize;a.filter((function(t){return e[t.type]})).forEach((function(t){return e[t.type]({root:r,props:o,action:t.data,timestamp:c,shouldOptimize:u})})),t&&t({root:r,props:o,actions:a,timestamp:c,shouldOptimize:u})}},q=function(e,t){return t.parentNode.insertBefore(e,t)},F=function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},U=function(e){return Array.isArray(e)},B=function(e){return null==e},V=function(e){return e.trim()},z=function(e){return""+e},H=function(e){return"boolean"==typeof e},W=function(e){return H(e)?e:"true"===e},Y=function(e){return"string"==typeof e},X=function(e){return _(e)?e:Y(e)?z(e).replace(/[a-z]+/gi,""):0},Q=function(e){return parseInt(X(e),10)},J=function(e){return parseFloat(X(e))},K=function(e){return _(e)&&isFinite(e)&&Math.floor(e)===e},Z=function(e){if(K(e))return e;var t=z(e).trim();return/MB$/i.test(t)?(t=t.replace(/MB$i/,"").trim(),1e3*Q(t)*1e3):/KB/i.test(t)?(t=t.replace(/KB$i/,"").trim(),1e3*Q(t)):Q(t)},$=function(e){return"function"==typeof e},ee=function(e){for(var t=self,n=e.split("."),r=null;r=n.shift();)if(!(t=t[r]))return null;return t},te={process:"POST",patch:"PATCH",revert:"DELETE",fetch:"GET",restore:"GET",load:"GET"},ne=function(e){var t={};return t.url=Y(e)?e:e.url||"",t.timeout=e.timeout?parseInt(e.timeout,10):0,t.headers=e.headers?e.headers:{},i(te,(function(n){t[n]=re(n,e[n],te[n],t.timeout,t.headers)})),t.remove=e.remove||null,delete t.headers,t},re=function(e,t,n,r,o){if(null===t)return null;if("function"==typeof t)return t;var i={url:"GET"===n||"PATCH"===n?"?"+e+"=":"",method:n,headers:o,withCredentials:!1,timeout:r,onload:null,ondata:null,onerror:null};if(Y(t))return i.url=t,i;if(Object.assign(i,t),Y(i.headers)){var a=i.headers.split(/:(.+)/);i.headers={header:a[0],value:a[1]}}return i.withCredentials=W(i.withCredentials),i},oe=function(e){return null===e},ie=function(e){return"object"==typeof e&&null!==e},ae=function(e){return ie(e)&&Y(e.url)&&ie(e.process)&&ie(e.revert)&&ie(e.restore)&&ie(e.fetch)},ce=function(e){return U(e)?"array":oe(e)?"null":K(e)?"int":/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e)?"bytes":ae(e)?"api":typeof e},ue=function(e){return e.replace(/{\s*'/g,'{"').replace(/'\s*}/g,'"}').replace(/'\s*:/g,'":').replace(/:\s*'/g,':"').replace(/,\s*'/g,',"').replace(/'\s*,/g,'",')},se={array:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return B(e)?[]:U(e)?e:z(e).split(t).map(V).filter((function(e){return e.length}))},boolean:W,int:function(e){return"bytes"===ce(e)?Z(e):Q(e)},number:J,float:J,bytes:Z,string:function(e){return $(e)?e:z(e)},function:function(e){return ee(e)},serverapi:function(e){return ne(e)},object:function(e){try{return JSON.parse(ue(e))}catch(e){return null}}},le=function(e,t){return se[t](e)},fe=function(e,t,n){if(e===t)return e;var r=ce(e);if(r!==n){var o=le(e,n);if(r=ce(o),null===o)throw'Trying to assign value with incorrect type to "'+option+'", allowed type: "'+n+'"';e=o}return e},pe=function(e,t){var n=e;return{enumerable:!0,get:function(){return n},set:function(r){n=fe(r,e,t)}}},de=function(e){var t={};return i(e,(function(n){var r=e[n];t[n]=pe(r[0],r[1])})),a(t)},he=function(e){return{items:[],listUpdateTimeout:null,itemUpdateTimeout:null,processingQueue:[],options:de(e)}},me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.split(/(?=[A-Z])/).map((function(e){return e.toLowerCase()})).join(t)},ve=function(e,t){var n={};return i(t,(function(t){n[t]={get:function(){return e.getState().options[t]},set:function(n){e.dispatch("SET_"+me(t,"_").toUpperCase(),{value:n})}}})),n},ge=function(e){return function(t,n,r){var o={};return i(e,(function(e){var n=me(e,"_").toUpperCase();o["SET_"+n]=function(o){try{r.options[e]=o.value}catch(e){}t("DID_SET_"+n,{value:r.options[e]})}})),o}},ye=function(e){return function(t){var n={};return i(e,(function(e){n["GET_"+me(e,"_").toUpperCase()]=function(n){return t.options[e]}})),n}},Ee={API:1,DROP:2,BROWSE:3,PASTE:4,NONE:5},be=function(){return Math.random().toString(36).substr(2,9)};function _e(e){this.wrapped=e}function Te(t){var n,r;function o(t,o){return new e((function(e,a){var c={key:t,arg:o,resolve:e,reject:a,next:null};r?r=r.next=c:(n=r=c,i(t,o))}))}function i(n,r){try{var o=t[n](r),c=o.value,u=c instanceof _e;e.resolve(u?c.wrapped:c).then((function(e){u?i("next",e):a(o.done?"return":"normal",e)}),(function(e){i("throw",e)}))}catch(e){a("throw",e)}}function a(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=o,"function"!=typeof t.return&&(this.return=void 0)}function Ie(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Re(e,t){if(null==e)return{};var n,r,o=Ie(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Oe(e){return we(e)||Se(e)||Ce()}function we(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function Se(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function Ce(){throw new TypeError("Invalid attempt to spread non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(Te.prototype[Symbol.asyncIterator]=function(){return this}),Te.prototype.next=function(e){return this._invoke("next",e)},Te.prototype.throw=function(e){return this._invoke("throw",e)},Te.prototype.return=function(e){return this._invoke("return",e)};var Ae=function(e,t){return e.splice(t,1)},Pe=function(t,n){n?t():document.hidden?e.resolve(1).then(t):setTimeout(t,0)},De=function(){var e=[],t=function(t,n){Ae(e,e.findIndex((function(e){return e.event===t&&(e.cb===n||!n)})))},n=function(t,n,r){e.filter((function(e){return e.event===t})).map((function(e){return e.cb})).forEach((function(e){return Pe((function(){return e.apply(void 0,Oe(n))}),r)}))};return{fireSync:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!0)},fire:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!1)},on:function(t,n){e.push({event:t,cb:n})},onOnce:function(n,r){e.push({event:n,cb:function(){t(n,r),r.apply(void 0,arguments)}})},off:t}},Le=function(e,t,n){Object.getOwnPropertyNames(e).filter((function(e){return!n.includes(e)})).forEach((function(n){return Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))},xe=["fire","process","revert","load","on","off","onOnce","retryLoad","extend","archive","archived","release","released","requestProcessing","freeze"],Ne=function(e){var t={};return Le(e,t,xe),t},Me=function(e){e.forEach((function(t,n){t.released&&Ae(e,n)}))},Ge={INIT:1,IDLE:2,PROCESSING_QUEUED:9,PROCESSING:3,PROCESSING_COMPLETE:5,PROCESSING_ERROR:6,PROCESSING_REVERT_ERROR:10,LOADING:7,LOAD_ERROR:8},ke={INPUT:1,LIMBO:2,LOCAL:3},je=function(e){return/[^0-9]+/.exec(e)},qe=function(){return je(1.1.toLocaleString())[0]},Fe=function(){var e=qe(),t=1e3.toLocaleString();return t!==1e3.toString()?je(t)[0]:"."===e?",":"."},Ue={BOOLEAN:"boolean",INT:"int",NUMBER:"number",STRING:"string",ARRAY:"array",OBJECT:"object",FUNCTION:"function",ACTION:"action",SERVER_API:"serverapi",REGEX:"regex"},Be=[],Ve=function(t,n,r){return new e((function(e,o){var i=Be.filter((function(e){return e.key===t})).map((function(e){return e.cb}));if(0!==i.length){var a=i.shift();i.reduce((function(e,t){return e.then((function(e){return t(e,r)}))}),a(n,r)).then((function(t){return e(t)})).catch((function(e){return o(e)}))}else e(n)}))},ze=function(e,t,n){return Be.filter((function(t){return t.key===e})).map((function(e){return e.cb(t,n)}))},He=function(e,t){return Be.push({key:e,cb:t})},We=function(e){return Object.assign(Qe,e)},Ye=function(){return Object.assign({},Qe)},Xe=function(e){i(e,(function(e,t){Qe[e]&&(Qe[e][0]=fe(t,Qe[e][0],Qe[e][1]))}))},Qe={id:[null,Ue.STRING],name:["filepond",Ue.STRING],disabled:[!1,Ue.BOOLEAN],className:[null,Ue.STRING],required:[!1,Ue.BOOLEAN],captureMethod:[null,Ue.STRING],allowSyncAcceptAttribute:[!0,Ue.BOOLEAN],allowDrop:[!0,Ue.BOOLEAN],allowBrowse:[!0,Ue.BOOLEAN],allowPaste:[!0,Ue.BOOLEAN],allowMultiple:[!1,Ue.BOOLEAN],allowReplace:[!0,Ue.BOOLEAN],allowRevert:[!0,Ue.BOOLEAN],allowRemove:[!0,Ue.BOOLEAN],allowProcess:[!0,Ue.BOOLEAN],allowReorder:[!1,Ue.BOOLEAN],allowDirectoriesOnly:[!1,Ue.BOOLEAN],forceRevert:[!1,Ue.BOOLEAN],maxFiles:[null,Ue.INT],checkValidity:[!1,Ue.BOOLEAN],itemInsertLocationFreedom:[!0,Ue.BOOLEAN],itemInsertLocation:["before",Ue.STRING],itemInsertInterval:[75,Ue.INT],dropOnPage:[!1,Ue.BOOLEAN],dropOnElement:[!0,Ue.BOOLEAN],dropValidation:[!1,Ue.BOOLEAN],ignoredFiles:[[".ds_store","thumbs.db","desktop.ini"],Ue.ARRAY],instantUpload:[!0,Ue.BOOLEAN],maxParallelUploads:[2,Ue.INT],chunkUploads:[!1,Ue.BOOLEAN],chunkForce:[!1,Ue.BOOLEAN],chunkSize:[5e6,Ue.INT],chunkRetryDelays:[[500,1e3,3e3],Ue.Array],server:[null,Ue.SERVER_API],labelDecimalSeparator:[qe(),Ue.STRING],labelThousandsSeparator:[Fe(),Ue.STRING],labelIdle:['Drag & Drop your files or <span class="filepond--label-action">Browse</span>',Ue.STRING],labelInvalidField:["Field contains invalid files",Ue.STRING],labelFileWaitingForSize:["Waiting for size",Ue.STRING],labelFileSizeNotAvailable:["Size not available",Ue.STRING],labelFileCountSingular:["file in list",Ue.STRING],labelFileCountPlural:["files in list",Ue.STRING],labelFileLoading:["Loading",Ue.STRING],labelFileAdded:["Added",Ue.STRING],labelFileLoadError:["Error during load",Ue.STRING],labelFileRemoved:["Removed",Ue.STRING],labelFileRemoveError:["Error during remove",Ue.STRING],labelFileProcessing:["Uploading",Ue.STRING],labelFileProcessingComplete:["Upload complete",Ue.STRING],labelFileProcessingAborted:["Upload cancelled",Ue.STRING],labelFileProcessingError:["Error during upload",Ue.STRING],labelFileProcessingRevertError:["Error during revert",Ue.STRING],labelTapToCancel:["tap to cancel",Ue.STRING],labelTapToRetry:["tap to retry",Ue.STRING],labelTapToUndo:["tap to undo",Ue.STRING],labelButtonRemoveItem:["Remove",Ue.STRING],labelButtonAbortItemLoad:["Abort",Ue.STRING],labelButtonRetryItemLoad:["Retry",Ue.STRING],labelButtonAbortItemProcessing:["Cancel",Ue.STRING],labelButtonUndoItemProcessing:["Undo",Ue.STRING],labelButtonRetryItemProcessing:["Retry",Ue.STRING],labelButtonProcessItem:["Upload",Ue.STRING],iconRemove:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconProcess:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z" fill="currentColor" fill-rule="evenodd"/></svg>',Ue.STRING],iconRetry:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconUndo:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],iconDone:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z" fill="currentColor" fill-rule="nonzero"/></svg>',Ue.STRING],oninit:[null,Ue.FUNCTION],onwarning:[null,Ue.FUNCTION],onerror:[null,Ue.FUNCTION],onactivatefile:[null,Ue.FUNCTION],oninitfile:[null,Ue.FUNCTION],onaddfilestart:[null,Ue.FUNCTION],onaddfileprogress:[null,Ue.FUNCTION],onaddfile:[null,Ue.FUNCTION],onprocessfilestart:[null,Ue.FUNCTION],onprocessfileprogress:[null,Ue.FUNCTION],onprocessfileabort:[null,Ue.FUNCTION],onprocessfilerevert:[null,Ue.FUNCTION],onprocessfile:[null,Ue.FUNCTION],onprocessfiles:[null,Ue.FUNCTION],onremovefile:[null,Ue.FUNCTION],onpreparefile:[null,Ue.FUNCTION],onupdatefiles:[null,Ue.FUNCTION],onreorderfiles:[null,Ue.FUNCTION],beforeDropFile:[null,Ue.FUNCTION],beforeAddFile:[null,Ue.FUNCTION],beforeRemoveFile:[null,Ue.FUNCTION],stylePanelLayout:[null,Ue.STRING],stylePanelAspectRatio:[null,Ue.STRING],styleItemPanelAspectRatio:[null,Ue.STRING],styleButtonRemoveItemPosition:["left",Ue.STRING],styleButtonProcessItemPosition:["right",Ue.STRING],styleLoadIndicatorPosition:["right",Ue.STRING],styleProgressIndicatorPosition:["right",Ue.STRING],styleButtonRemoveItemAlign:[!1,Ue.BOOLEAN],files:[[],Ue.ARRAY]},Je=function(e,t){return B(t)?e[0]||null:K(t)?e[t]||null:("object"==typeof t&&(t=t.id),e.find((function(e){return e.id===t}))||null)},Ke=function(e){if(B(e))return e;if(/:/.test(e)){var t=e.split(":");return t[1]/t[0]}return parseFloat(e)},Ze=function(e){return e.filter((function(e){return!e.archived}))},$e={EMPTY:0,IDLE:1,ERROR:2,BUSY:3,READY:4},et=[Ge.LOAD_ERROR,Ge.PROCESSING_ERROR,Ge.PROCESSING_REVERT_ERROR],tt=[Ge.LOADING,Ge.PROCESSING,Ge.PROCESSING_QUEUED,Ge.INIT],nt=[Ge.PROCESSING_COMPLETE],rt=function(e){return et.includes(e.status)},ot=function(e){return tt.includes(e.status)},it=function(e){return nt.includes(e.status)},at=function(e){return{GET_STATUS:function(){var t=Ze(e.items),n=$e.EMPTY,r=$e.ERROR,o=$e.BUSY,i=$e.IDLE,a=$e.READY;return 0===t.length?n:t.some(rt)?r:t.some(ot)?o:t.some(it)?a:i},GET_ITEM:function(t){return Je(e.items,t)},GET_ACTIVE_ITEM:function(t){return Je(Ze(e.items),t)},GET_ACTIVE_ITEMS:function(){return Ze(e.items)},GET_ITEMS:function(){return e.items},GET_ITEM_NAME:function(t){var n=Je(e.items,t);return n?n.filename:null},GET_ITEM_SIZE:function(t){var n=Je(e.items,t);return n?n.fileSize:null},GET_STYLES:function(){return Object.keys(e.options).filter((function(e){return/^style/.test(e)})).map((function(t){return{name:t,value:e.options[t]}}))},GET_PANEL_ASPECT_RATIO:function(){return/circle/.test(e.options.stylePanelLayout)?1:Ke(e.options.stylePanelAspectRatio)},GET_ITEM_PANEL_ASPECT_RATIO:function(){return e.options.styleItemPanelAspectRatio},GET_ITEMS_BY_STATUS:function(t){return Ze(e.items).filter((function(e){return e.status===t}))},GET_TOTAL_ITEMS:function(){return Ze(e.items).length},IS_ASYNC:function(){return ie(e.options.server)&&(ie(e.options.server.process)||$(e.options.server.process))}}},ct=function(e){var t=Ze(e.items).length;if(!e.options.allowMultiple)return 0===t;var n=e.options.maxFiles;return null===n||t<n},ut=function(e,t,n){return Math.max(Math.min(n,e),t)},st=function(e,t,n){return e.splice(t,0,n)},lt=function(e,t,n){return B(t)?null:void 0===n?(e.push(t),t):(n=ut(n,0,e.length),st(e,n,t),t)},ft=function(e){return/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i.test(e)},pt=function(e){return e.split("/").pop().split("?").shift()},dt=function(e){return e.split(".").pop()},ht=function(e){if("string"!=typeof e)return"";var t=e.split("/").pop();return/svg/.test(t)?"svg":/zip|compressed/.test(t)?"zip":/plain/.test(t)?"txt":/msword/.test(t)?"doc":/[a-z]+/.test(t)?"jpeg"===t?"jpg":t:""},mt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(t+e).slice(-t.length)},vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return e.getFullYear()+"-"+mt(e.getMonth()+1,"00")+"-"+mt(e.getDate(),"00")+"_"+mt(e.getHours(),"00")+"-"+mt(e.getMinutes(),"00")+"-"+mt(e.getSeconds(),"00")},gt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="string"==typeof n?e.slice(0,e.size,n):e.slice(0,e.size,e.type);return o.lastModifiedDate=new Date,e._relativePath&&(o._relativePath=e._relativePath),Y(t)||(t=vt()),t&&null===r&&dt(t)?o.name=t:(r=r||ht(o.type),o.name=t+(r?"."+r:"")),o},yt=function(){return window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder},Et=function(e,t){var n=yt();if(n){var r=new n;return r.append(e),r.getBlob(t)}return new Blob([e],{type:t})},bt=function(e,t){for(var n=new ArrayBuffer(e.length),r=new Uint8Array(n),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);return Et(n,t)},_t=function(e){return(/^data:(.+);/.exec(e)||[])[1]||null},Tt=function(e){return e.split(",")[1].replace(/\s/g,"")},It=function(e){return atob(Tt(e))},Rt=function(e){var t=_t(e),n=It(e);return bt(n,t)},Ot=function(e,t,n){return gt(Rt(e),t,null,n)},wt=function(e){if(!/^content-disposition:/i.test(e))return null;var t=e.split(/filename=|filename\*=.+''/).splice(1).map((function(e){return e.trim().replace(/^["']|[;"']{0,2}$/g,"")})).filter((function(e){return e.length}));return t.length?decodeURI(t[t.length-1]):null},St=function(e){if(/content-length:/i.test(e)){var t=e.match(/[0-9]+/)[0];return t?parseInt(t,10):null}return null},Ct=function(e){return/x-content-transfer-id:/i.test(e)&&(e.split(":")[1]||"").trim()||null},At=function(e){var t={source:null,name:null,size:null},n=e.split("\n"),r=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var u=a.value,s=wt(u);if(s)t.name=s;else{var l=St(u);if(l)t.size=l;else{var f=Ct(u);f&&(t.source=f)}}}}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t},Pt=function(e){var t={source:null,complete:!1,progress:0,size:null,timestamp:null,duration:0,request:null},n=function(){return t.progress},r=function(){t.request&&t.request.abort&&t.request.abort()},o=function(){var e=t.source;a.fire("init",e),e instanceof File?a.fire("load",e):e instanceof Blob?a.fire("load",gt(e,e.name)):ft(e)?a.fire("load",Ot(e)):i(e)},i=function(n){e?(t.timestamp=Date.now(),t.request=e(n,(function(e){t.duration=Date.now()-t.timestamp,t.complete=!0,e instanceof Blob&&(e=gt(e,e.name||pt(n))),a.fire("load",e instanceof Blob?e:e?e.body:null)}),(function(e){a.fire("error","string"==typeof e?{type:"error",code:0,body:e}:e)}),(function(e,n,r){r&&(t.size=r),t.duration=Date.now()-t.timestamp,e?(t.progress=n/r,a.fire("progress",t.progress)):t.progress=null}),(function(){a.fire("abort")}),(function(e){var n=At("string"==typeof e?e:e.headers);a.fire("meta",{size:t.size||n.size,filename:n.name,source:n.source})}))):a.fire("error",{type:"error",body:"Can't load URL",code:400})},a=Object.assign({},De(),{setSource:function(e){return t.source=e},getProgress:n,abort:r,load:o});return a},Dt=function(e){return/GET|HEAD/.test(e)},Lt=function(e,t,n){var r={onheaders:function(){},onprogress:function(){},onload:function(){},ontimeout:function(){},onerror:function(){},onabort:function(){},abort:function(){o=!0,a.abort()}},o=!1,i=!1;n=Object.assign({method:"POST",headers:{},withCredentials:!1},n),t=encodeURI(t),Dt(n.method)&&e&&(t=""+t+encodeURIComponent("string"==typeof e?e:JSON.stringify(e)));var a=new XMLHttpRequest;return(Dt(n.method)?a:a.upload).onprogress=function(e){o||r.onprogress(e.lengthComputable,e.loaded,e.total)},a.onreadystatechange=function(){a.readyState<2||4===a.readyState&&0===a.status||i||(i=!0,r.onheaders(a))},a.onload=function(){a.status>=200&&a.status<300?r.onload(a):r.onerror(a)},a.onerror=function(){return r.onerror(a)},a.onabort=function(){o=!0,r.onabort()},a.ontimeout=function(){return r.ontimeout(a)},a.open(n.method,t,!0),K(n.timeout)&&(a.timeout=n.timeout),Object.keys(n.headers).forEach((function(e){var t=unescape(encodeURIComponent(n.headers[e]));a.setRequestHeader(e,t)})),n.responseType&&(a.responseType=n.responseType),n.withCredentials&&(a.withCredentials=!0),a.send(e),r},xt=function(e,t,n,r){return{type:e,code:t,body:n,headers:r}},Nt=function(e){return function(t){e(xt("error",0,"Timeout",t.getAllResponseHeaders()))}},Mt=function(e){return/\?/.test(e)},Gt=function(){for(var e="",t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e+=Mt(e)&&Mt(t)?t.replace(/\?/,"&"):t})),e},kt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return null;var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a,c,u,s){var l=Lt(o,Gt(e,t.url),Object.assign({},t,{responseType:"blob"}));return l.onload=function(e){var r=e.getAllResponseHeaders(),a=At(r).name||pt(o);i(xt("load",e.status,"HEAD"===t.method?null:gt(n(e.response),a),r))},l.onerror=function(e){a(xt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},l.onheaders=function(e){s(xt("headers",e.status,null,e.getAllResponseHeaders()))},l.ontimeout=Nt(a),l.onprogress=c,l.onabort=u,l}},jt={QUEUED:0,COMPLETE:1,PROCESSING:2,ERROR:3,WAITING:4},qt=function(e,t,n,r,o,i,a,c,u,s,l){for(var f=[],p=l.chunkTransferId,d=l.chunkServer,h=l.chunkSize,m=l.chunkRetryDelays,v={serverId:p,aborted:!1},g=t.ondata||function(e){return e},y=t.onload||function(e,t){return"HEAD"===t?e.getResponseHeader("Upload-Offset"):e.response},E=t.onerror||function(e){return null},b=function(i){var c=new FormData;ie(o)&&c.append(n,JSON.stringify(o));var u="function"==typeof t.headers?t.headers(r,o):Object.assign({},t.headers,{"Upload-Length":r.size}),s=Object.assign({},t,{headers:u}),l=Lt(g(c),Gt(e,t.url),s);l.onload=function(e){return i(y(e,s.method))},l.onerror=function(e){return a(xt("error",e.status,E(e.response)||e.statusText,e.getAllResponseHeaders()))},l.ontimeout=Nt(a)},_=function(n){var r=Gt(e,d.url,v.serverId),o={headers:"function"==typeof t.headers?t.headers(v.serverId):Object.assign({},t.headers),method:"HEAD"},i=Lt(null,r,o);i.onload=function(e){return n(y(e,o.method))},i.onerror=function(e){return a(xt("error",e.status,E(e.response)||e.statusText,e.getAllResponseHeaders()))},i.ontimeout=Nt(a)},T=Math.floor(r.size/h),I=0;I<=T;I++){var R=I*h,O=r.slice(R,R+h,"application/offset+octet-stream");f[I]={index:I,size:O.size,offset:R,data:O,file:r,progress:0,retries:Oe(m),status:jt.QUEUED,error:null,request:null,timeout:null}}var w=function(){return i(v.serverId)},S=function(e){return e.status===jt.QUEUED||e.status===jt.ERROR},C=function(t){if(!v.aborted)if(t=t||f.find(S)){t.status=jt.PROCESSING,t.progress=null;var n=d.ondata||function(e){return e},o=d.onerror||function(e){return null},i=Gt(e,d.url,v.serverId),c="function"==typeof d.headers?d.headers(t):Object.assign({},d.headers,{"Content-Type":"application/offset+octet-stream","Upload-Offset":t.offset,"Upload-Length":r.size,"Upload-Name":r.name}),s=t.request=Lt(n(t.data),i,Object.assign({},d,{headers:c}));s.onload=function(){t.status=jt.COMPLETE,t.request=null,D()},s.onprogress=function(e,n,r){t.progress=e?n:null,P()},s.onerror=function(e){t.status=jt.ERROR,t.request=null,t.error=o(e.response)||e.statusText,A(t)||a(xt("error",e.status,o(e.response)||e.statusText,e.getAllResponseHeaders()))},s.ontimeout=function(e){t.status=jt.ERROR,t.request=null,A(t)||Nt(a)(e)},s.onabort=function(){t.status=jt.QUEUED,t.request=null,u()}}else f.every((function(e){return e.status===jt.COMPLETE}))&&w()},A=function(e){return 0!==e.retries.length&&(e.status=jt.WAITING,clearTimeout(e.timeout),e.timeout=setTimeout((function(){C(e)}),e.retries.shift()),!0)},P=function(){var e=f.reduce((function(e,t){return null===e||null===t.progress?null:e+t.progress}),0);if(null===e)return c(!1,0,0);var t=f.reduce((function(e,t){return e+t.size}),0);c(!0,e,t)},D=function(){f.filter((function(e){return e.status===jt.PROCESSING})).length>=1||C()},L=function(){f.forEach((function(e){clearTimeout(e.timeout),e.request&&e.request.abort()}))};return v.serverId?_((function(e){v.aborted||(f.filter((function(t){return t.offset<e})).forEach((function(e){e.status=jt.COMPLETE,e.progress=e.size})),D())})):b((function(e){v.aborted||(s(e),v.serverId=e,D())})),{abort:function(){v.aborted=!0,L()}}},Ft=function(e,t,n,r){return function(o,i,a,c,u,s,l){if(o){var f=r.chunkUploads,p=f&&o.size>r.chunkSize,d=f&&(p||r.chunkForce);if(o instanceof Blob&&d)return qt(e,t,n,o,i,a,c,u,s,l,r);var h=t.ondata||function(e){return e},m=t.onload||function(e){return e},v=t.onerror||function(e){return null},g=new FormData;ie(i)&&g.append(n,JSON.stringify(i)),(o instanceof Blob?[{name:null,file:o}]:o).forEach((function(e){g.append(n,e.file,null===e.name?e.file.name:""+e.name+e.file.name)}));var y=Lt(h(g),Gt(e,t.url),t);return y.onload=function(e){a(xt("load",e.status,m(e.response),e.getAllResponseHeaders()))},y.onerror=function(e){c(xt("error",e.status,v(e.response)||e.statusText,e.getAllResponseHeaders()))},y.ontimeout=Nt(c),y.onprogress=u,y.onabort=s,y}}},Ut=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return"function"==typeof t?function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return t.apply(void 0,[n].concat(o,[r]))}:t&&Y(t.url)?Ft(e,t,n,r):null},Bt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return function(e,t){return t()};var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a){var c=Lt(o,e+t.url,t);return c.onload=function(e){i(xt("load",e.status,n(e.response),e.getAllResponseHeaders()))},c.onerror=function(e){a(xt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},c.ontimeout=Nt(a),c}},Vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+Math.random()*(t-e)},zt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,o=null,i=Date.now();return function a(){var c=Date.now()-i,u=Vt(n,r);c+u>t&&(u=c+u-t);var s=c/t;s>=1||document.hidden?e(1):(e(s),o=setTimeout(a,u))}(),{clear:function(){clearTimeout(o)}}},Ht=function(e){var t={complete:!1,perceivedProgress:0,perceivedPerformanceUpdater:null,progress:null,timestamp:null,perceivedDuration:0,duration:0,request:null,response:null},n=function(n,r){var o=function(){0!==t.duration&&null!==t.progress&&c.fire("progress",c.getProgress())},i=function(){t.complete=!0,c.fire("load-perceived",t.response.body)};c.fire("start"),t.timestamp=Date.now(),t.perceivedPerformanceUpdater=zt((function(e){t.perceivedProgress=e,t.perceivedDuration=Date.now()-t.timestamp,o(),t.response&&1===t.perceivedProgress&&!t.complete&&i()}),Vt(750,1500)),t.request=e(n,r,(function(e){t.response=ie(e)?e:{type:"load",code:200,body:""+e,headers:{}},t.duration=Date.now()-t.timestamp,t.progress=1,c.fire("load",t.response.body),1===t.perceivedProgress&&i()}),(function(e){t.perceivedPerformanceUpdater.clear(),c.fire("error",ie(e)?e:{type:"error",code:0,body:""+e})}),(function(e,n,r){t.duration=Date.now()-t.timestamp,t.progress=e?n/r:null,o()}),(function(){t.perceivedPerformanceUpdater.clear(),c.fire("abort",t.response?t.response.body:null)}),(function(e){c.fire("transfer",e)}))},r=function(){t.request&&(t.perceivedPerformanceUpdater.clear(),t.request.abort&&t.request.abort(),t.complete=!0)},o=function(){r(),t.complete=!1,t.perceivedProgress=0,t.progress=0,t.timestamp=null,t.perceivedDuration=0,t.duration=0,t.request=null,t.response=null},i=function(){return t.progress?Math.min(t.progress,t.perceivedProgress):null},a=function(){return Math.min(t.duration,t.perceivedDuration)},c=Object.assign({},De(),{process:n,abort:r,getProgress:i,getDuration:a,reset:o});return c},Wt=function(e){return e.substr(0,e.lastIndexOf("."))||e},Yt=function(e){var t=[e.name,e.size,e.type];return e instanceof Blob||ft(e)?t[0]=e.name||vt():ft(e)?(t[1]=e.length,t[2]=_t(e)):Y(e)&&(t[0]=pt(e),t[1]=0,t[2]="application/octet-stream"),{name:t[0],size:t[1],type:t[2]}},Xt=function(e){return!!(e instanceof File||e instanceof Blob&&e.name)},Qt=function e(t){if(!ie(t))return t;var n=U(t)?[]:{};for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];n[r]=o&&ie(o)?e(o):o}return n},Jt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=be(),i={archived:!1,frozen:!1,released:!1,source:null,file:r,serverFileReference:n,transferId:null,processingAborted:!1,status:n?Ge.PROCESSING_COMPLETE:Ge.INIT,activeLoader:null,activeProcessor:null},c=null,u={},s=function(e){return i.status=e},l=function(e){if(!i.released&&!i.frozen){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];R.fire.apply(R,[e].concat(n))}},f=function(){return dt(i.file.name)},p=function(){return i.file.type},d=function(){return i.file.size},h=function(){return i.file},m=function(e,n,r){i.source=e,R.fireSync("init"),i.file?R.fireSync("load-skip"):(i.file=Yt(e),n.on("init",(function(){l("load-init")})),n.on("meta",(function(e){i.file.size=e.size,i.file.filename=e.filename,e.source&&(t=ke.LIMBO,i.serverFileReference=e.source,i.status=Ge.PROCESSING_COMPLETE),l("load-meta")})),n.on("progress",(function(e){s(Ge.LOADING),l("load-progress",e)})),n.on("error",(function(e){s(Ge.LOAD_ERROR),l("load-request-error",e)})),n.on("abort",(function(){s(Ge.INIT),l("load-abort")})),n.on("load",(function(e){i.activeLoader=null;var n=function(e){i.file=Xt(e)?e:i.file,t===ke.LIMBO&&i.serverFileReference?s(Ge.PROCESSING_COMPLETE):s(Ge.IDLE),l("load")},o=function(t){i.file=e,l("load-meta"),s(Ge.LOAD_ERROR),l("load-file-error",t)};i.serverFileReference?n(e):r(e,n,o)})),n.setSource(e),i.activeLoader=n,n.load())},v=function(){i.activeLoader&&i.activeLoader.load()},g=function(){i.activeLoader?i.activeLoader.abort():(s(Ge.INIT),l("load-abort"))},y=function e(t,n){if(i.processingAborted)i.processingAborted=!1;else if(s(Ge.PROCESSING),c=null,i.file instanceof Blob){t.on("load",(function(e){i.transferId=null,i.serverFileReference=e})),t.on("transfer",(function(e){i.transferId=e})),t.on("load-perceived",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(Ge.PROCESSING_COMPLETE),l("process-complete",e)})),t.on("start",(function(){l("process-start")})),t.on("error",(function(e){i.activeProcessor=null,s(Ge.PROCESSING_ERROR),l("process-error",e)})),t.on("abort",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(Ge.IDLE),l("process-abort"),c&&c()})),t.on("progress",(function(e){l("process-progress",e)}));var r=function(e){i.archived||t.process(e,Object.assign({},u))},o=console.error;n(i.file,r,o),i.activeProcessor=t}else R.on("load",(function(){e(t,n)}))},E=function(){i.processingAborted=!1,s(Ge.PROCESSING_QUEUED)},b=function(){return new e((function(e){if(!i.activeProcessor)return i.processingAborted=!0,s(Ge.IDLE),l("process-abort"),void e();c=function(){e()},i.activeProcessor.abort()}))},_=function(t,n){return new e((function(e,r){null!==i.serverFileReference?(t(i.serverFileReference,(function(){i.serverFileReference=null,e()}),(function(t){n?(s(Ge.PROCESSING_REVERT_ERROR),l("process-revert-error"),r(t)):e()})),s(Ge.IDLE),l("process-revert")):e()}))},T=function(e,t,n){var r=e.split("."),o=r[0],i=r.pop(),a=u;r.forEach((function(e){return a=a[e]})),JSON.stringify(a[i])!==JSON.stringify(t)&&(a[i]=t,n||l("metadata-update",{key:o,value:u[o]}))},I=function(e){return Qt(e?u[e]:u)},R=Object.assign({id:{get:function(){return o}},origin:{get:function(){return t}},serverId:{get:function(){return i.serverFileReference}},transferId:{get:function(){return i.transferId}},status:{get:function(){return i.status}},filename:{get:function(){return i.file.name}},filenameWithoutExtension:{get:function(){return Wt(i.file.name)}},fileExtension:{get:f},fileType:{get:p},fileSize:{get:d},file:{get:h},relativePath:{get:function(){return i.file._relativePath}},source:{get:function(){return i.source}},getMetadata:I,setMetadata:function(e,t,n){if(ie(e)){var r=e;return Object.keys(r).forEach((function(e){T(e,r[e],t)})),e}return T(e,t,n),t},extend:function(e,t){return O[e]=t},abortLoad:g,retryLoad:v,requestProcessing:E,abortProcessing:b,load:m,process:y,revert:_},De(),{freeze:function(){return i.frozen=!0},release:function(){return i.released=!0},released:{get:function(){return i.released}},archive:function(){return i.archived=!0},archived:{get:function(){return i.archived}}}),O=a(R);return O},Kt=function(e,t){return B(t)?0:Y(t)?e.findIndex((function(e){return e.id===t})):-1},Zt=function(e,t){var n=Kt(e,t);if(!(n<0))return e[n]||null},$t=function(e,t,n,r,o,i){var a=Lt(null,e,{method:"GET",responseType:"blob"});return a.onload=function(n){var r=n.getAllResponseHeaders(),o=At(r).name||pt(e);t(xt("load",n.status,gt(n.response,o),r))},a.onerror=function(e){n(xt("error",e.status,e.statusText,e.getAllResponseHeaders()))},a.onheaders=function(e){i(xt("headers",e.status,null,e.getAllResponseHeaders()))},a.ontimeout=Nt(n),a.onprogress=r,a.onabort=o,a},en=function(e){return 0===e.indexOf("//")&&(e=location.protocol+e),e.toLowerCase().replace("blob:","").replace(/([a-z])?:\/\//,"$1").split("/")[0]},tn=function(e){return(e.indexOf(":")>-1||e.indexOf("//")>-1)&&en(location.href)!==en(e)},nn=function(e){return function(){return $(e)?e.apply(void 0,arguments):e}},rn=function(e){return!Xt(e.file)},on=function(e,t){clearTimeout(t.listUpdateTimeout),t.listUpdateTimeout=setTimeout((function(){e("DID_UPDATE_ITEMS",{items:Ze(t.items)})}),0)},an=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return new e((function(e){if(!t)return e(!0);var n=t.apply(void 0,r);return null==n?e(!0):"boolean"==typeof n?e(n):void("function"==typeof n.then&&n.then(e))}))},cn=function(e,t){e.items.sort((function(e,n){return t(Ne(e),Ne(n))}))},un=function(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.query,o=n.success,i=void 0===o?function(){}:o,a=n.failure,c=void 0===a?function(){}:a,u=Re(n,["query","success","failure"]),s=Je(e.items,r);s?t(s,i,c,u||{}):c({error:xt("error",0,"Item not found"),file:null})}},sn=function(t,n,r){return{ABORT_ALL:function(){Ze(r.items).forEach((function(e){e.freeze(),e.abortLoad(),e.abortProcessing()}))},DID_SET_FILES:function(e){var n=e.value,o=(void 0===n?[]:n).map((function(e){return{source:e.source?e.source:e,options:e.options}})),i=Ze(r.items);i.forEach((function(e){o.find((function(t){return t.source===e.source||t.source===e.file}))||t("REMOVE_ITEM",{query:e,remove:!1})})),i=Ze(r.items),o.forEach((function(e,n){i.find((function(t){return t.source===e.source||t.file===e.source}))||t("ADD_ITEM",Object.assign({},e,{interactionMethod:Ee.NONE,index:n}))}))},DID_UPDATE_ITEM_METADATA:function(e){var o=e.id;clearTimeout(r.itemUpdateTimeout),r.itemUpdateTimeout=setTimeout((function(){var e=Zt(r.items,o);if(n("IS_ASYNC")){var i=function(){setTimeout((function(){t("REQUEST_ITEM_PROCESSING",{query:o})}),32)},a=function(t){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(t?i:function(){}).catch((function(){}))},c=function(t){e.abortProcessing().then(t?i:function(){})};return e.status===Ge.PROCESSING_COMPLETE?a(r.options.instantUpload):e.status===Ge.PROCESSING?c(r.options.instantUpload):void(r.options.instantUpload&&i())}Ve("SHOULD_PREPARE_OUTPUT",!1,{item:e,query:n}).then((function(n){n&&t("REQUEST_PREPARE_OUTPUT",{query:o,item:e,success:function(e){t("DID_PREPARE_OUTPUT",{id:o,file:e})}},!0)}))}),0)},MOVE_ITEM:function(e){var t=e.query,n=e.index,o=Je(r.items,t);if(o){var i=r.items.indexOf(o);i!==(n=ut(n,0,r.items.length-1))&&r.items.splice(n,0,r.items.splice(i,1)[0])}},SORT:function(e){var o=e.compare;cn(r,o),t("DID_SORT_ITEMS",{items:n("GET_ACTIVE_ITEMS")})},ADD_ITEMS:function(r){var o=r.items,i=r.index,a=r.interactionMethod,c=r.success,u=void 0===c?function(){}:c,s=r.failure,l=void 0===s?function(){}:s,f=i;if(-1===i||void 0===i){var p=n("GET_ITEM_INSERT_LOCATION"),d=n("GET_TOTAL_ITEMS");f="before"===p?0:d}var h=n("GET_IGNORED_FILES"),m=function(e){return Xt(e)?!h.includes(e.name.toLowerCase()):!B(e)},v=o.filter(m).map((function(n){return new e((function(e,r){t("ADD_ITEM",{interactionMethod:a,source:n.source||n,success:e,failure:r,index:f++,options:n.options||{}})}))}));e.all(v).then(u).catch(l)},ADD_ITEM:function(e){var o=e.source,i=e.index,a=void 0===i?-1:i,c=e.interactionMethod,u=e.success,s=void 0===u?function(){}:u,l=e.failure,f=void 0===l?function(){}:l,p=e.options,d=void 0===p?{}:p;if(B(o))f({error:xt("error",0,"No source"),file:null});else if(!Xt(o)||!r.options.ignoredFiles.includes(o.name.toLowerCase())){if(!ct(r)){if(r.options.allowMultiple||!r.options.allowMultiple&&!r.options.allowReplace){var h=xt("warning",0,"Max files");return t("DID_THROW_MAX_FILES",{source:o,error:h}),void f({error:h,file:null})}var m=Ze(r.items)[0];if(m.status===Ge.PROCESSING_COMPLETE||m.status===Ge.PROCESSING_REVERT_ERROR){var v=n("GET_FORCE_REVERT");if(m.revert(Bt(r.options.server.url,r.options.server.revert),v).then((function(){v&&t("ADD_ITEM",{source:o,index:a,interactionMethod:c,success:s,failure:f,options:d})})).catch((function(){})),v)return}t("REMOVE_ITEM",{query:m.id})}var g="local"===d.type?ke.LOCAL:"limbo"===d.type?ke.LIMBO:ke.INPUT,y=Jt(g,g===ke.INPUT?null:o,d.file);Object.keys(d.metadata||{}).forEach((function(e){y.setMetadata(e,d.metadata[e])})),ze("DID_CREATE_ITEM",y,{query:n,dispatch:t});var E=n("GET_ITEM_INSERT_LOCATION");r.options.itemInsertLocationFreedom||(a="before"===E?-1:r.items.length),lt(r.items,y,a),$(E)&&o&&cn(r,E);var b=y.id;y.on("init",(function(){t("DID_INIT_ITEM",{id:b})})),y.on("load-init",(function(){t("DID_START_ITEM_LOAD",{id:b})})),y.on("load-meta",(function(){t("DID_UPDATE_ITEM_META",{id:b})})),y.on("load-progress",(function(e){t("DID_UPDATE_ITEM_LOAD_PROGRESS",{id:b,progress:e})})),y.on("load-request-error",(function(e){var n=nn(r.options.labelFileLoadError)(e);if(e.code>=400&&e.code<500)return t("DID_THROW_ITEM_INVALID",{id:b,error:e,status:{main:n,sub:e.code+" ("+e.body+")"}}),void f({error:e,file:Ne(y)});t("DID_THROW_ITEM_LOAD_ERROR",{id:b,error:e,status:{main:n,sub:r.options.labelTapToRetry}})})),y.on("load-file-error",(function(e){t("DID_THROW_ITEM_INVALID",{id:b,error:e.status,status:e.status}),f({error:e.status,file:Ne(y)})})),y.on("load-abort",(function(){t("REMOVE_ITEM",{query:b})})),y.on("load-skip",(function(){t("COMPLETE_LOAD_ITEM",{query:b,item:y,data:{source:o,success:s}})})),y.on("load",(function(){var e=function(e){e?(y.on("metadata-update",(function(e){t("DID_UPDATE_ITEM_METADATA",{id:b,change:e})})),Ve("SHOULD_PREPARE_OUTPUT",!1,{item:y,query:n}).then((function(e){var n=function(){t("COMPLETE_LOAD_ITEM",{query:b,item:y,data:{source:o,success:s}}),on(t,r)};e?t("REQUEST_PREPARE_OUTPUT",{query:b,item:y,success:function(e){t("DID_PREPARE_OUTPUT",{id:b,file:e}),n()}},!0):n()}))):t("REMOVE_ITEM",{query:b})};Ve("DID_LOAD_ITEM",y,{query:n,dispatch:t}).then((function(){an(n("GET_BEFORE_ADD_FILE"),Ne(y)).then(e)})).catch((function(){e(!1)}))})),y.on("process-start",(function(){t("DID_START_ITEM_PROCESSING",{id:b})})),y.on("process-progress",(function(e){t("DID_UPDATE_ITEM_PROCESS_PROGRESS",{id:b,progress:e})})),y.on("process-error",(function(e){t("DID_THROW_ITEM_PROCESSING_ERROR",{id:b,error:e,status:{main:nn(r.options.labelFileProcessingError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-revert-error",(function(e){t("DID_THROW_ITEM_PROCESSING_REVERT_ERROR",{id:b,error:e,status:{main:nn(r.options.labelFileProcessingRevertError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-complete",(function(e){t("DID_COMPLETE_ITEM_PROCESSING",{id:b,error:null,serverFileReference:e}),t("DID_DEFINE_VALUE",{id:b,value:e})})),y.on("process-abort",(function(){t("DID_ABORT_ITEM_PROCESSING",{id:b})})),y.on("process-revert",(function(){t("DID_REVERT_ITEM_PROCESSING",{id:b}),t("DID_DEFINE_VALUE",{id:b,value:null})})),t("DID_ADD_ITEM",{id:b,index:a,interactionMethod:c}),on(t,r);var _=r.options.server||{},T=_.url,I=_.load,R=_.restore,O=_.fetch;y.load(o,Pt(g===ke.INPUT?Y(o)&&tn(o)&&O?kt(T,O):$t:g===ke.LIMBO?kt(T,R):kt(T,I)),(function(e,t,r){Ve("LOAD_FILE",e,{query:n}).then(t).catch(r)}))}},REQUEST_PREPARE_OUTPUT:function(e){var t=e.item,r=e.success,o=e.failure,i=void 0===o?function(){}:o,a={error:xt("error",0,"Item not found"),file:null};if(t.archived)return i(a);Ve("PREPARE_OUTPUT",t.file,{query:n,item:t}).then((function(e){Ve("COMPLETE_PREPARE_OUTPUT",e,{query:n,item:t}).then((function(e){if(t.archived)return i(a);r(e)}))}))},COMPLETE_LOAD_ITEM:function(e){var o=e.item,i=e.data,a=i.success,c=i.source,u=n("GET_ITEM_INSERT_LOCATION");if($(u)&&c&&cn(r,u),t("DID_LOAD_ITEM",{id:o.id,error:null,serverFileReference:o.origin===ke.INPUT?null:c}),a(Ne(o)),o.origin!==ke.LOCAL)return o.origin===ke.LIMBO?(t("DID_COMPLETE_ITEM_PROCESSING",{id:o.id,error:null,serverFileReference:c}),void t("DID_DEFINE_VALUE",{id:o.id,value:c})):void(n("IS_ASYNC")&&r.options.instantUpload&&t("REQUEST_ITEM_PROCESSING",{query:o.id}));t("DID_LOAD_LOCAL_ITEM",{id:o.id})},RETRY_ITEM_LOAD:un(r,(function(e){e.retryLoad()})),REQUEST_ITEM_PREPARE:un(r,(function(e,n,r){t("REQUEST_PREPARE_OUTPUT",{query:e.id,item:e,success:function(r){t("DID_PREPARE_OUTPUT",{id:e.id,file:r}),n({file:e,output:r})},failure:r},!0)})),REQUEST_ITEM_PROCESSING:un(r,(function(e,o,i){if(e.status===Ge.IDLE||e.status===Ge.PROCESSING_ERROR)e.status!==Ge.PROCESSING_QUEUED&&(e.requestProcessing(),t("DID_REQUEST_ITEM_PROCESSING",{id:e.id}),t("PROCESS_ITEM",{query:e,success:o,failure:i},!0));else{var a=function(){return t("REQUEST_ITEM_PROCESSING",{query:e,success:o,failure:i})},c=function(){return document.hidden?a():setTimeout(a,32)};e.status===Ge.PROCESSING_COMPLETE||e.status===Ge.PROCESSING_REVERT_ERROR?e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(c).catch((function(){})):e.status===Ge.PROCESSING&&e.abortProcessing().then(c)}})),PROCESS_ITEM:un(r,(function(e,o,i){var a=n("GET_MAX_PARALLEL_UPLOADS");if(n("GET_ITEMS_BY_STATUS",Ge.PROCESSING).length!==a){if(e.status!==Ge.PROCESSING){var c=function e(){var n=r.processingQueue.shift();if(n){var o=n.id,i=n.success,a=n.failure,c=Je(r.items,o);c&&!c.archived?t("PROCESS_ITEM",{query:o,success:i,failure:a},!0):e()}};e.onOnce("process-complete",(function(){o(Ne(e)),c(),n("GET_ITEMS_BY_STATUS",Ge.PROCESSING_COMPLETE).length===r.items.length&&t("DID_COMPLETE_ITEM_PROCESSING_ALL")})),e.onOnce("process-error",(function(t){i({error:t,file:Ne(e)}),c()}));var u=r.options;e.process(Ht(Ut(u.server.url,u.server.process,u.name,{chunkTransferId:e.transferId,chunkServer:u.server.patch,chunkUploads:u.chunkUploads,chunkForce:u.chunkForce,chunkSize:u.chunkSize,chunkRetryDelays:u.chunkRetryDelays})),(function(r,o,i){Ve("PREPARE_OUTPUT",r,{query:n,item:e}).then((function(n){t("DID_PREPARE_OUTPUT",{id:e.id,file:n}),o(n)})).catch(i)}))}}else r.processingQueue.push({id:e.id,success:o,failure:i})})),RETRY_ITEM_PROCESSING:un(r,(function(e){t("REQUEST_ITEM_PROCESSING",{query:e})})),REQUEST_REMOVE_ITEM:un(r,(function(e){an(n("GET_BEFORE_REMOVE_FILE"),Ne(e)).then((function(n){n&&t("REMOVE_ITEM",{query:e})}))})),RELEASE_ITEM:un(r,(function(e){e.release()})),REMOVE_ITEM:un(r,(function(e,o,i,a){var c=function(){var n=e.id;Zt(r.items,n).archive(),t("DID_REMOVE_ITEM",{error:null,id:n,item:e}),on(t,r),o(Ne(e))},u=r.options.server;e.origin===ke.LOCAL&&u&&$(u.remove)&&!1!==a.remove?(t("DID_START_ITEM_REMOVE",{id:e.id}),u.remove(e.source,(function(){return c()}),(function(n){t("DID_THROW_ITEM_REMOVE_ERROR",{id:e.id,error:xt("error",0,n,null),status:{main:nn(r.options.labelFileRemoveError)(n),sub:r.options.labelTapToRetry}})}))):(a.revert&&e.origin!==ke.LOCAL&&null!==e.serverId&&e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")),c())})),ABORT_ITEM_LOAD:un(r,(function(e){e.abortLoad()})),ABORT_ITEM_PROCESSING:un(r,(function(e){e.serverId?t("REVERT_ITEM_PROCESSING",{id:e.id}):e.abortProcessing().then((function(){r.options.instantUpload&&t("REMOVE_ITEM",{query:e.id})}))})),REQUEST_REVERT_ITEM_PROCESSING:un(r,(function(e){if(r.options.instantUpload){var o=function(n){n&&t("REVERT_ITEM_PROCESSING",{query:e})},i=n("GET_BEFORE_REMOVE_FILE");if(!i)return o(!0);var a=i(Ne(e));return null==a?o(!0):"boolean"==typeof a?o(a):void("function"==typeof a.then&&a.then(o))}t("REVERT_ITEM_PROCESSING",{query:e})})),REVERT_ITEM_PROCESSING:un(r,(function(e){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then((function(){(r.options.instantUpload||rn(e))&&t("REMOVE_ITEM",{query:e.id})})).catch((function(){}))})),SET_OPTIONS:function(e){var n=e.options;i(n,(function(e,n){t("SET_"+me(e,"_").toUpperCase(),{value:n})}))}}},ln=function(e){return e},fn=function(e){return document.createElement(e)},pn=function(e,t){var n=e.childNodes[0];n?t!==n.nodeValue&&(n.nodeValue=t):(n=document.createTextNode(t),e.appendChild(n))},dn=function(e,t,n,r){var o=(r%360-90)*Math.PI/180;return{x:e+n*Math.cos(o),y:t+n*Math.sin(o)}},hn=function(e,t,n,r,o,i){var a=dn(e,t,n,o),c=dn(e,t,n,r);return["M",a.x,a.y,"A",n,n,0,i,0,c.x,c.y].join(" ")},mn=function(e,t,n,r,o){var i=1;return o>r&&o-r<=.5&&(i=0),r>o&&r-o>=.5&&(i=0),hn(e,t,n,360*Math.min(.9999,r),360*Math.min(.9999,o),i)},vn=G({tag:"div",name:"progress-indicator",ignoreRectUpdate:!0,ignoreRect:!0,create:function(e){var t=e.root,n=e.props;n.spin=!1,n.progress=0,n.opacity=0;var r=f("svg");t.ref.path=f("path",{"stroke-width":2,"stroke-linecap":"round"}),r.appendChild(t.ref.path),t.ref.svg=r,t.appendChild(r)},write:function(e){var t=e.root,n=e.props;if(0!==n.opacity){n.align&&(t.element.dataset.align=n.align);var r=parseInt(c(t.ref.path,"stroke-width"),10),o=.5*t.rect.element.width,i=0,a=0;n.spin?(i=0,a=.5):(i=0,a=n.progress);var u=mn(o,o,o-r,i,a);c(t.ref.path,"d",u),c(t.ref.path,"stroke-opacity",n.spin||n.progress>0?1:0)}},mixins:{apis:["progress","spin","align"],styles:["opacity"],animations:{opacity:{type:"tween",duration:500},progress:{type:"spring",stiffness:.95,damping:.65,mass:10}}}}),gn=G({tag:"button",attributes:{type:"button"},ignoreRect:!0,ignoreRectUpdate:!0,name:"file-action-button",mixins:{apis:["label"],styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}},listeners:!0},create:function(e){var t=e.root,n=e.props;t.element.innerHTML=(n.icon||"")+"<span>"+n.label+"</span>",n.isDisabled=!1},write:function(e){var t=e.root,n=e.props,r=n.isDisabled,o=t.query("GET_DISABLED")||0===n.opacity;o&&!r?(n.isDisabled=!0,c(t.element,"disabled","disabled")):!o&&r&&(n.isDisabled=!1,t.element.removeAttribute("disabled"))}}),yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".";return(e=Math.round(Math.abs(e)))<1e3?e+" bytes":e<bn?Math.floor(e/En)+" KB":e<_n?Tn(e/bn,1,t)+" MB":Tn(e/_n,2,t)+" GB"},En=1e3,bn=1e6,_n=1e9,Tn=function(e,t,n){return e.toFixed(t).split(".").filter((function(e){return"0"!==e})).join(n)},In=function(e){var t=e.root,n=e.props,r=fn("span");r.className="filepond--file-info-main",c(r,"aria-hidden","true"),t.appendChild(r),t.ref.fileName=r;var o=fn("span");o.className="filepond--file-info-sub",t.appendChild(o),t.ref.fileSize=o,pn(o,t.query("GET_LABEL_FILE_WAITING_FOR_SIZE")),pn(r,ln(t.query("GET_ITEM_NAME",n.id)))},Rn=function(e){var t=e.root,n=e.props;pn(t.ref.fileSize,yn(t.query("GET_ITEM_SIZE",n.id))),pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))},On=function(e){var t=e.root,n=e.props;K(t.query("GET_ITEM_SIZE",n.id))||pn(t.ref.fileSize,t.query("GET_LABEL_FILE_SIZE_NOT_AVAILABLE"))},wn=G({name:"file-info",ignoreRect:!0,ignoreRectUpdate:!0,write:j({DID_LOAD_ITEM:Rn,DID_UPDATE_ITEM_META:Rn,DID_THROW_ITEM_LOAD_ERROR:On,DID_THROW_ITEM_INVALID:On}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},create:In,mixins:{styles:["translateX","translateY"],animations:{translateX:"spring",translateY:"spring"}}}),Sn=function(e){return Math.round(100*e)},Cn=function(e){var t=e.root,n=fn("span");n.className="filepond--file-status-main",t.appendChild(n),t.ref.main=n;var r=fn("span");r.className="filepond--file-status-sub",t.appendChild(r),t.ref.sub=r,An({root:t,action:{progress:null}})},An=function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_LOADING"):t.query("GET_LABEL_FILE_LOADING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},Pn=function(e){var t=e.root;pn(t.ref.main,""),pn(t.ref.sub,"")},Dn=function(e){var t=e.root,n=e.action;pn(t.ref.main,n.status.main),pn(t.ref.sub,n.status.sub)},Ln=G({name:"file-status",ignoreRect:!0,ignoreRectUpdate:!0,write:j({DID_LOAD_ITEM:Pn,DID_REVERT_ITEM_PROCESSING:Pn,DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_ABORT_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_ABORTED")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_RETRY"))},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_COMPLETE")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_UNDO"))},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_PROCESSING"):t.query("GET_LABEL_FILE_PROCESSING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_UPDATE_ITEM_LOAD_PROGRESS:An,DID_THROW_ITEM_LOAD_ERROR:Dn,DID_THROW_ITEM_INVALID:Dn,DID_THROW_ITEM_PROCESSING_ERROR:Dn,DID_THROW_ITEM_PROCESSING_REVERT_ERROR:Dn,DID_THROW_ITEM_REMOVE_ERROR:Dn}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Cn,mixins:{styles:["translateX","translateY","opacity"],animations:{opacity:{type:"tween",duration:250},translateX:"spring",translateY:"spring"}}}),xn={AbortItemLoad:{label:"GET_LABEL_BUTTON_ABORT_ITEM_LOAD",action:"ABORT_ITEM_LOAD",className:"filepond--action-abort-item-load",align:"LOAD_INDICATOR_POSITION"},RetryItemLoad:{label:"GET_LABEL_BUTTON_RETRY_ITEM_LOAD",action:"RETRY_ITEM_LOAD",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-load",align:"BUTTON_PROCESS_ITEM_POSITION"},RemoveItem:{label:"GET_LABEL_BUTTON_REMOVE_ITEM",action:"REQUEST_REMOVE_ITEM",icon:"GET_ICON_REMOVE",className:"filepond--action-remove-item",align:"BUTTON_REMOVE_ITEM_POSITION"},ProcessItem:{label:"GET_LABEL_BUTTON_PROCESS_ITEM",action:"REQUEST_ITEM_PROCESSING",icon:"GET_ICON_PROCESS",className:"filepond--action-process-item",align:"BUTTON_PROCESS_ITEM_POSITION"},AbortItemProcessing:{label:"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING",action:"ABORT_ITEM_PROCESSING",className:"filepond--action-abort-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RetryItemProcessing:{label:"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING",action:"RETRY_ITEM_PROCESSING",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RevertItemProcessing:{label:"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING",action:"REQUEST_REVERT_ITEM_PROCESSING",icon:"GET_ICON_UNDO",className:"filepond--action-revert-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"}},Nn=[];i(xn,(function(e){Nn.push(e)}));var Mn,Gn=function(e){var t=e.ref.buttonRemoveItem.rect.element;return t.hidden?null:t.width+t.left},kn=function(e){return e.ref.buttonAbortItemLoad.rect.element.width},jn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.height/4)},qn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.left/2)},Fn=function(e){return e.query("GET_STYLE_BUTTON_REMOVE_ITEM_POSITION")},Un={buttonAbortItemLoad:{opacity:0},buttonRetryItemLoad:{opacity:0},buttonRemoveItem:{opacity:0},buttonProcessItem:{opacity:0},buttonAbortItemProcessing:{opacity:0},buttonRetryItemProcessing:{opacity:0},buttonRevertItemProcessing:{opacity:0},loadProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_LOAD_INDICATOR_POSITION")}},processProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}},processingCompleteIndicator:{opacity:0,scaleX:.75,scaleY:.75},info:{translateX:0,translateY:0,opacity:0},status:{translateX:0,translateY:0,opacity:0}},Bn={buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn}},Vn={buttonAbortItemProcessing:{opacity:1},processProgressIndicator:{opacity:1},status:{opacity:1}},zn={DID_THROW_ITEM_INVALID:{buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn,opacity:1}},DID_START_ITEM_LOAD:{buttonAbortItemLoad:{opacity:1},loadProgressIndicator:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_LOAD_ERROR:{buttonRetryItemLoad:{opacity:1},buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{opacity:1}},DID_START_ITEM_REMOVE:{processProgressIndicator:{opacity:1,align:Fn},info:{translateX:Gn},status:{opacity:0}},DID_THROW_ITEM_REMOVE_ERROR:{processProgressIndicator:{opacity:0,align:Fn},buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{opacity:1,translateX:Gn}},DID_LOAD_ITEM:Bn,DID_LOAD_LOCAL_ITEM:{buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn}},DID_START_ITEM_PROCESSING:Vn,DID_REQUEST_ITEM_PROCESSING:Vn,DID_UPDATE_ITEM_PROCESS_PROGRESS:Vn,DID_COMPLETE_ITEM_PROCESSING:{buttonRevertItemProcessing:{opacity:1},info:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_PROCESSING_ERROR:{buttonRemoveItem:{opacity:1},buttonRetryItemProcessing:{opacity:1},status:{opacity:1},info:{translateX:Gn}},DID_THROW_ITEM_PROCESSING_REVERT_ERROR:{buttonRevertItemProcessing:{opacity:1},status:{opacity:1},info:{opacity:1}},DID_ABORT_ITEM_PROCESSING:{buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Gn},status:{opacity:1}},DID_REVERT_ITEM_PROCESSING:Bn},Hn=G({create:function(e){var t=e.root;t.element.innerHTML=t.query("GET_ICON_DONE")},name:"processing-complete-indicator",ignoreRect:!0,mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",opacity:{type:"tween",duration:250}}}}),Wn=function(e){var t,n=e.root,r=e.props.id,o=n.query("GET_ALLOW_REVERT"),a=n.query("GET_ALLOW_REMOVE"),c=n.query("GET_ALLOW_PROCESS"),u=n.query("GET_INSTANT_UPLOAD"),s=n.query("IS_ASYNC"),l=n.query("GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN");s?c&&!o?t=function(e){return!/RevertItemProcessing/.test(e)}:!c&&o?t=function(e){return!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e)}:c||o||(t=function(e){return!/Process/.test(e)}):t=function(e){return!/Process/.test(e)};var f=t?Nn.filter(t):Nn.concat();if(u&&o&&(xn.RevertItemProcessing.label="GET_LABEL_BUTTON_REMOVE_ITEM",xn.RevertItemProcessing.icon="GET_ICON_REMOVE"),s&&!o){var p=zn.DID_COMPLETE_ITEM_PROCESSING;p.info.translateX=qn,p.info.translateY=jn,p.status.translateY=jn,p.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}if(s&&!c&&(["DID_START_ITEM_PROCESSING","DID_REQUEST_ITEM_PROCESSING","DID_UPDATE_ITEM_PROCESS_PROGRESS","DID_THROW_ITEM_PROCESSING_ERROR"].forEach((function(e){zn[e].status.translateY=jn})),zn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX=kn),l&&o){xn.RevertItemProcessing.align="BUTTON_REMOVE_ITEM_POSITION";var d=zn.DID_COMPLETE_ITEM_PROCESSING;d.info.translateX=Gn,d.status.translateY=jn,d.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}a||(xn.RemoveItem.disabled=!0),i(xn,(function(e,t){var o=n.createChildView(gn,{label:n.query(t.label),icon:n.query(t.icon),opacity:0});f.includes(e)&&n.appendChildView(o),t.disabled&&(o.element.setAttribute("disabled","disabled"),o.element.setAttribute("hidden","hidden")),o.element.dataset.align=n.query("GET_STYLE_"+t.align),o.element.classList.add(t.className),o.on("click",(function(e){e.stopPropagation(),t.disabled||n.dispatch(t.action,{query:r})})),n.ref["button"+e]=o})),n.ref.processingCompleteIndicator=n.appendChildView(n.createChildView(Hn)),n.ref.processingCompleteIndicator.element.dataset.align=n.query("GET_STYLE_BUTTON_PROCESS_ITEM_POSITION"),n.ref.info=n.appendChildView(n.createChildView(wn,{id:r})),n.ref.status=n.appendChildView(n.createChildView(Ln,{id:r}));var h=n.appendChildView(n.createChildView(vn,{opacity:0,align:n.query("GET_STYLE_LOAD_INDICATOR_POSITION")}));h.element.classList.add("filepond--load-indicator"),n.ref.loadProgressIndicator=h;var m=n.appendChildView(n.createChildView(vn,{opacity:0,align:n.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}));m.element.classList.add("filepond--process-indicator"),n.ref.processProgressIndicator=m,n.ref.activeStyles=[]},Yn=function(e){var t=e.root,n=e.actions,r=e.props;Xn({root:t,actions:n,props:r});var o=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return zn[e.type]}));if(o){t.ref.activeStyles=[];var a=zn[o.type];i(Un,(function(e,n){var r=t.ref[e];i(n,(function(n,o){var i=a[e]&&void 0!==a[e][n]?a[e][n]:o;t.ref.activeStyles.push({control:r,key:n,value:i})}))}))}t.ref.activeStyles.forEach((function(e){var n=e.control,r=e.key,o=e.value;n[r]="function"==typeof o?o(t):o}))},Xn=j({DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemProcessing.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemLoad.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemRemoval.label=n.value},DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_START_ITEM_LOAD:function(e){var t=e.root;t.ref.loadProgressIndicator.spin=!0,t.ref.loadProgressIndicator.progress=0},DID_START_ITEM_REMOVE:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_UPDATE_ITEM_LOAD_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.loadProgressIndicator.spin=!1,t.ref.loadProgressIndicator.progress=n.progress},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.processProgressIndicator.spin=!1,t.ref.processProgressIndicator.progress=n.progress}}),Qn=G({create:Wn,write:Yn,didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},name:"file"}),Jn=G({create:function(e){var t=e.root,n=e.props;t.ref.fileName=fn("legend"),t.appendChild(t.ref.fileName),t.ref.file=t.appendChildView(t.createChildView(Qn,{id:n.id})),t.ref.data=!1},ignoreRect:!0,write:j({DID_LOAD_ITEM:function(e){var t=e.root,n=e.props;pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))}}),didCreateView:function(e){ze("CREATE_VIEW",Object.assign({},e,{view:e}))},tag:"fieldset",name:"file-wrapper"}),Kn={type:"spring",damping:.6,mass:7},Zn=function(e){var t=e.root,n=e.props;[{name:"top"},{name:"center",props:{translateY:null,scaleY:null},mixins:{animations:{scaleY:Kn},styles:["translateY","scaleY"]}},{name:"bottom",props:{translateY:null},mixins:{animations:{translateY:Kn},styles:["translateY"]}}].forEach((function(e){$n(t,e,n.name)})),t.element.classList.add("filepond--"+n.name),t.ref.scalable=null},$n=function(e,t,n){var r=G({name:"panel-"+t.name+" filepond--"+n,mixins:t.mixins,ignoreRectUpdate:!0}),o=e.createChildView(r,t.props);e.ref[t.name]=e.appendChildView(o)},er=G({name:"panel",write:function(e){var t=e.root,n=e.props;if(null!==t.ref.scalable&&n.scalable===t.ref.scalable||(t.ref.scalable=!H(n.scalable)||n.scalable,t.element.dataset.scalable=t.ref.scalable),n.height){var r=t.ref.top.rect.element,o=t.ref.bottom.rect.element,i=Math.max(r.height+o.height,n.height);t.ref.center.translateY=r.height,t.ref.center.scaleY=(i-r.height-o.height)/100,t.ref.bottom.translateY=i-o.height}},create:Zn,ignoreRect:!0,mixins:{apis:["height","scalable"]}}),tr=function(e){var t=e.map((function(e){return e.id})),n=void 0;return{setIndex:function(e){n=e},getIndex:function(){return n},getItemIndex:function(e){return t.indexOf(e.id)}}},nr={type:"spring",stiffness:.75,damping:.45,mass:10},rr="spring",or={DID_START_ITEM_LOAD:"busy",DID_UPDATE_ITEM_LOAD_PROGRESS:"loading",DID_THROW_ITEM_INVALID:"load-invalid",DID_THROW_ITEM_LOAD_ERROR:"load-error",DID_LOAD_ITEM:"idle",DID_THROW_ITEM_REMOVE_ERROR:"remove-error",DID_START_ITEM_REMOVE:"busy",DID_START_ITEM_PROCESSING:"busy processing",DID_REQUEST_ITEM_PROCESSING:"busy processing",DID_UPDATE_ITEM_PROCESS_PROGRESS:"processing",DID_COMPLETE_ITEM_PROCESSING:"processing-complete",DID_THROW_ITEM_PROCESSING_ERROR:"processing-error",DID_THROW_ITEM_PROCESSING_REVERT_ERROR:"processing-revert-error",DID_ABORT_ITEM_PROCESSING:"cancelled",DID_REVERT_ITEM_PROCESSING:"idle"},ir=function(e){var t=e.root,n=e.props;if(t.ref.handleClick=function(e){return t.dispatch("DID_ACTIVATE_ITEM",{id:n.id})},t.element.id="filepond--item-"+n.id,t.element.addEventListener("click",t.ref.handleClick),t.ref.container=t.appendChildView(t.createChildView(Jn,{id:n.id})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"item-panel"})),t.ref.panel.height=null,n.markedForRemoval=!1,t.query("GET_ALLOW_REORDER")){t.element.dataset.dragState="idle";var r=function(e){if(e.isPrimary){var r=!1,o={x:e.pageX,y:e.pageY};n.dragOrigin={x:t.translateX,y:t.translateY},n.dragCenter={x:e.offsetX,y:e.offsetY};var i=tr(t.query("GET_ACTIVE_ITEMS"));t.dispatch("DID_GRAB_ITEM",{id:n.id,dragState:i});var a=function(e){e.isPrimary&&(e.stopPropagation(),e.preventDefault(),n.dragOffset={x:e.pageX-o.x,y:e.pageY-o.y},n.dragOffset.x*n.dragOffset.x+n.dragOffset.y*n.dragOffset.y>16&&!r&&(r=!0,t.element.removeEventListener("click",t.ref.handleClick)),t.dispatch("DID_DRAG_ITEM",{id:n.id,dragState:i}))},c=function e(c){c.isPrimary&&(document.removeEventListener("pointermove",a),document.removeEventListener("pointerup",e),n.dragOffset={x:c.pageX-o.x,y:c.pageY-o.y},t.dispatch("DID_DROP_ITEM",{id:n.id,dragState:i}),r&&setTimeout((function(){return t.element.addEventListener("click",t.ref.handleClick)}),0))};document.addEventListener("pointermove",a),document.addEventListener("pointerup",c)}};t.element.addEventListener("pointerdown",r)}},ar=j({DID_UPDATE_PANEL_HEIGHT:function(e){var t=e.root,n=e.action;t.height=n.height}}),cr=j({DID_GRAB_ITEM:function(e){var t=e.root;e.props.dragOrigin={x:t.translateX,y:t.translateY}},DID_DRAG_ITEM:function(e){e.root.element.dataset.dragState="drag"},DID_DROP_ITEM:function(e){var t=e.root,n=e.props;n.dragOffset=null,n.dragOrigin=null,t.element.dataset.dragState="drop"}},(function(e){var t=e.root,n=e.actions,r=e.props,o=e.shouldOptimize;"drop"===t.element.dataset.dragState&&t.scaleX<=1&&(t.element.dataset.dragState="idle");var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return or[e.type]}));i&&i.type!==r.currentState&&(r.currentState=i.type,t.element.dataset.filepondItemState=or[r.currentState]||"");var a=t.query("GET_ITEM_PANEL_ASPECT_RATIO")||t.query("GET_PANEL_ASPECT_RATIO");a?o||(t.height=t.rect.element.width*a):(ar({root:t,actions:n,props:r}),!t.height&&t.ref.container.rect.element.height>0&&(t.height=t.ref.container.rect.element.height)),o&&(t.ref.panel.height=null),t.ref.panel.height=t.height})),ur=G({create:ir,write:cr,destroy:function(e){var t=e.root,n=e.props;t.element.removeEventListener("click",t.ref.handleClick),t.dispatch("RELEASE_ITEM",{query:n.id})},tag:"li",name:"item",mixins:{apis:["id","interactionMethod","markedForRemoval","spawnDate","dragCenter","dragOrigin","dragOffset"],styles:["translateX","translateY","scaleX","scaleY","opacity","height"],animations:{scaleX:rr,scaleY:rr,translateX:nr,translateY:nr,opacity:{type:"tween",duration:150}}}}),sr=function(e,t,n){if(n){var r=e.rect.element.width,o=t.length,i=null;if(0===o||n.top<t[0].rect.element.top)return-1;var a=t[0].rect.element,c=a.marginLeft+a.marginRight,u=a.width+c,s=Math.round(r/u);if(1===s){for(var l=0;l<o;l++){var f=t[l],p=f.rect.outer.top+.5*f.rect.element.height;if(n.top<p)return l}return o}for(var d=a.marginTop+a.marginBottom,h=a.height+d,m=0;m<o;m++){var v=m%s*u,g=Math.floor(m/s)*h,y=g-a.marginTop,E=v+u,b=g+h+a.marginBottom;if(n.top<b&&n.top>y){if(n.left<E)return m;i=m!==o-1?m:null}}return null!==i?i:o}},lr={height:0,width:0,get getHeight(){return this.height},set setHeight(e){0!==this.height&&0!==e||(this.height=e)},get getWidth(){return this.width},set setWidth(e){0!==this.width&&0!==e||(this.width=e)},setDimensions:function(e,t){0!==this.height&&0!==e||(this.height=e),0!==this.width&&0!==t||(this.width=t)}},fr=function(e){var t=e.root;c(t.element,"role","list"),t.ref.lastItemSpanwDate=Date.now()},pr=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;e.dragOffset?(e.translateX=null,e.translateY=null,e.translateX=e.dragOrigin.x+e.dragOffset.x,e.translateY=e.dragOrigin.y+e.dragOffset.y,e.scaleX=1.025,e.scaleY=1.025):(e.translateX=t,e.translateY=n,Date.now()>e.spawnDate&&(0===e.opacity&&dr(e,t,n,r,o),e.scaleX=1,e.scaleY=1,e.opacity=1))},dr=function(e,t,n,r,o){e.interactionMethod===Ee.NONE?(e.translateX=null,e.translateX=t,e.translateY=null,e.translateY=n):e.interactionMethod===Ee.DROP?(e.translateX=null,e.translateX=t-20*r,e.translateY=null,e.translateY=n-10*o,e.scaleX=.8,e.scaleY=.8):e.interactionMethod===Ee.BROWSE?(e.translateY=null,e.translateY=n-30):e.interactionMethod===Ee.API&&(e.translateX=null,e.translateX=t-30,e.translateY=null)},hr=function(e){return e.rect.element.height+.5*e.rect.element.marginBottom+.5*e.rect.element.marginTop},mr=function(e){return e.rect.element.width+.5*e.rect.element.marginLeft+.5*e.rect.element.marginRight},vr=j({DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.index,i=n.interactionMethod;t.ref.addIndex=o;var a=Date.now(),c=a,u=1;if(i!==Ee.NONE){u=0;var s=t.query("GET_ITEM_INSERT_INTERVAL"),l=a-t.ref.lastItemSpanwDate;c=l<s?a+(s-l):a}t.ref.lastItemSpanwDate=c,t.appendChildView(t.createChildView(ur,{spawnDate:c,id:r,opacity:u,interactionMethod:i}),o)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action.id,r=t.childViews.find((function(e){return e.id===n}));r&&(r.scaleX=.9,r.scaleY=.9,r.opacity=0,r.markedForRemoval=!0)},DID_DRAG_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.dragState,i=t.query("GET_ITEM",{id:r}),a=t.childViews.find((function(e){return e.id===r})),c=t.childViews.length,u=o.getItemIndex(i);if(a){var s={x:a.dragOrigin.x+a.dragOffset.x+a.dragCenter.x,y:a.dragOrigin.y+a.dragOffset.y+a.dragCenter.y},l=hr(a),f=mr(a),p=Math.floor(t.rect.outer.width/f);p>c&&(p=c);var d=Math.floor(c/p+1);lr.setHeight=l*d,lr.setWidth=f*p;var h={y:Math.floor(s.y/l),x:Math.floor(s.x/f),getGridIndex:function(){return s.y>lr.getHeight||s.y<0||s.x>lr.getWidth||s.x<0?u:this.y*p+this.x},getColIndex:function(){for(var e=t.query("GET_ACTIVE_ITEMS"),n=t.childViews.filter((function(e){return e.rect.element.height})),r=e.map((function(e){return n.find((function(t){return t.id===e.id}))})),o=r.findIndex((function(e){return e===a})),i=hr(a),c=r.length,u=c,l=0,f=0,p=0;p<c;p++)if(l=(f=l)+hr(r[p]),s.y<l){if(o>p){if(s.y<f+i){u=p;break}continue}u=p;break}return u}},m=p>1?h.getGridIndex():h.getColIndex();t.dispatch("MOVE_ITEM",{query:a,index:m});var v=o.getIndex();if(void 0===v||v!==m){if(o.setIndex(m),void 0===v)return;t.dispatch("DID_REORDER_ITEMS",{items:t.query("GET_ACTIVE_ITEMS"),origin:u,target:m})}}}}),gr=G({create:fr,write:function(e){var t=e.root,n=e.props,r=e.actions,o=e.shouldOptimize;vr({root:t,props:n,actions:r});var i=n.dragCoordinates,a=t.rect.element.width,c=t.childViews.filter((function(e){return e.rect.element.height})),u=t.query("GET_ACTIVE_ITEMS").map((function(e){return c.find((function(t){return t.id===e.id}))})).filter((function(e){return e})),s=i?sr(t,u,i):null,l=t.ref.addIndex||null;t.ref.addIndex=null;var f=0,p=0,d=0;if(0!==u.length){var h=u[0].rect.element,m=h.marginTop+h.marginBottom,v=h.marginLeft+h.marginRight,g=h.width+v,y=h.height+m,E=Math.round(a/g);if(1===E){var b=0,_=0;u.forEach((function(e,t){if(s){var n=t-s;_=-2===n?.25*-m:-1===n?.75*-m:0===n?.75*m:1===n?.25*m:0}o&&(e.translateX=null,e.translateY=null),e.markedForRemoval||pr(e,0,b+_);var r=(e.rect.element.height+m)*(e.markedForRemoval?e.opacity:1);b+=r}))}else{var T=0,I=0;u.forEach((function(e,t){t===s&&(f=1),t===l&&(d+=1),e.markedForRemoval&&e.opacity<.5&&(p-=1);var n=t+d+f+p,r=n%E,i=Math.floor(n/E),a=r*g,c=i*y,u=Math.sign(a-T),h=Math.sign(c-I);T=a,I=c,e.markedForRemoval||(o&&(e.translateX=null,e.translateY=null),pr(e,a,c,u,h))}))}}},tag:"ul",name:"list",didWriteView:function(e){var t=e.root;t.childViews.filter((function(e){return e.markedForRemoval&&0===e.opacity&&e.resting})).forEach((function(e){e._destroy(),t.removeChildView(e)}))},filterFrameActionsForChild:function(e,t){return t.filter((function(t){return!t.data||!t.data.id||e.id===t.data.id}))},mixins:{apis:["dragCoordinates"]}}),yr=function(e){var t=e.root,n=e.props;t.ref.list=t.appendChildView(t.createChildView(gr)),n.dragCoordinates=null,n.overflowing=!1},Er=j({DID_DRAG:function(e){var t=e.root,n=e.props,r=e.action;t.query("GET_ITEM_INSERT_LOCATION_FREEDOM")&&(n.dragCoordinates={left:r.position.scopeLeft-t.ref.list.rect.element.left,top:r.position.scopeTop-(t.rect.outer.top+t.rect.element.marginTop+t.rect.element.scrollTop)})},DID_END_DRAG:function(e){e.props.dragCoordinates=null}}),br=G({create:yr,write:function(e){var t=e.root,n=e.props,r=e.actions;if(Er({root:t,props:n,actions:r}),t.ref.list.dragCoordinates=n.dragCoordinates,n.overflowing&&!n.overflow&&(n.overflowing=!1,t.element.dataset.state="",t.height=null),n.overflow){var o=Math.round(n.overflow);o!==t.height&&(n.overflowing=!0,t.element.dataset.state="overflow",t.height=o)}},name:"list-scroller",mixins:{apis:["overflow","dragCoordinates"],styles:["height","translateY"],animations:{translateY:"spring"}}}),_r=function(e,t,n){n?c(e,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:""):e.removeAttribute(t)},Tr=function(e){if(e&&""!==e.value){try{e.value=""}catch(e){}if(e.value){var t=fn("form"),n=e.parentNode,r=e.nextSibling;t.appendChild(e),t.reset(),r?n.insertBefore(e,r):n.appendChild(e)}}},Ir=function(e){var t=e.root,n=e.props;t.element.id="filepond--browser-"+n.id,c(t.element,"name",t.query("GET_NAME")),c(t.element,"aria-controls","filepond--assistant-"+n.id),c(t.element,"aria-labelledby","filepond--drop-label-"+n.id),Rr({root:t,action:{value:t.query("GET_ACCEPTED_FILE_TYPES")}}),Or({root:t,action:{value:t.query("GET_ALLOW_MULTIPLE")}}),wr({root:t,action:{value:t.query("GET_ALLOW_DIRECTORIES_ONLY")}}),Sr({root:t}),Cr({root:t,action:{value:t.query("GET_REQUIRED")}}),Ar({root:t,action:{value:t.query("GET_CAPTURE_METHOD")}}),t.ref.handleChange=function(e){if(t.element.value){var r=Array.from(t.element.files).map((function(e){return e._relativePath=e.webkitRelativePath,e}));setTimeout((function(){n.onload(r),Tr(t.element)}),250)}},t.element.addEventListener("change",t.ref.handleChange)},Rr=function(e){var t=e.root,n=e.action;t.query("GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE")&&_r(t.element,"accept",!!n.value,n.value?n.value.join(","):"")},Or=function(e){var t=e.root,n=e.action;_r(t.element,"multiple",n.value)},wr=function(e){var t=e.root,n=e.action;_r(t.element,"webkitdirectory",n.value)},Sr=function(e){var t=e.root,n=t.query("GET_DISABLED"),r=t.query("GET_ALLOW_BROWSE"),o=n||!r;_r(t.element,"disabled",o)},Cr=function(e){var t=e.root;e.action.value?0===t.query("GET_TOTAL_ITEMS")&&_r(t.element,"required",!0):_r(t.element,"required",!1)},Ar=function(e){var t=e.root,n=e.action;_r(t.element,"capture",!!n.value,!0===n.value?"":n.value)},Pr=function(e){var t=e.root,n=t.element;t.query("GET_TOTAL_ITEMS")>0?(_r(n,"required",!1),_r(n,"name",!1)):(_r(n,"name",!0,t.query("GET_NAME")),t.query("GET_CHECK_VALIDITY")&&n.setCustomValidity(""),t.query("GET_REQUIRED")&&_r(n,"required",!0))},Dr=G({tag:"input",name:"browser",ignoreRect:!0,ignoreRectUpdate:!0,attributes:{type:"file"},create:Ir,destroy:function(e){var t=e.root;t.element.removeEventListener("change",t.ref.handleChange)},write:j({DID_LOAD_ITEM:Pr,DID_REMOVE_ITEM:Pr,DID_THROW_ITEM_INVALID:function(e){var t=e.root;t.query("GET_CHECK_VALIDITY")&&t.element.setCustomValidity(t.query("GET_LABEL_INVALID_FIELD"))},DID_SET_DISABLED:Sr,DID_SET_ALLOW_BROWSE:Sr,DID_SET_ALLOW_DIRECTORIES_ONLY:wr,DID_SET_ALLOW_MULTIPLE:Or,DID_SET_ACCEPTED_FILE_TYPES:Rr,DID_SET_CAPTURE_METHOD:Ar,DID_SET_REQUIRED:Cr})}),Lr={ENTER:13,SPACE:32},xr=function(e){var t=e.root,n=e.props,r=fn("label");c(r,"for","filepond--browser-"+n.id),c(r,"id","filepond--drop-label-"+n.id),c(r,"aria-hidden","true"),t.ref.handleKeyDown=function(e){(e.keyCode===Lr.ENTER||e.keyCode===Lr.SPACE)&&(e.preventDefault(),t.ref.label.click())},t.ref.handleClick=function(e){e.target===r||r.contains(e.target)||t.ref.label.click()},r.addEventListener("keydown",t.ref.handleKeyDown),t.element.addEventListener("click",t.ref.handleClick),Nr(r,n.caption),t.appendChild(r),t.ref.label=r},Nr=function(e,t){e.innerHTML=t;var n=e.querySelector(".filepond--label-action");return n&&c(n,"tabindex","0"),t},Mr=G({name:"drop-label",ignoreRect:!0,create:xr,destroy:function(e){var t=e.root;t.ref.label.addEventListener("keydown",t.ref.handleKeyDown),t.element.removeEventListener("click",t.ref.handleClick)},write:j({DID_SET_LABEL_IDLE:function(e){var t=e.root,n=e.action;Nr(t.ref.label,n.value)}}),mixins:{styles:["opacity","translateX","translateY"],animations:{opacity:{type:"tween",duration:150},translateX:"spring",translateY:"spring"}}}),Gr=G({name:"drip-blob",ignoreRect:!0,mixins:{styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}}}}),kr=function(e){var t=e.root,n=.5*t.rect.element.width,r=.5*t.rect.element.height;t.ref.blob=t.appendChildView(t.createChildView(Gr,{opacity:0,scaleX:2.5,scaleY:2.5,translateX:n,translateY:r}))},jr=function(e){var t=e.root,n=e.props,r=e.actions;qr({root:t,props:n,actions:r});var o=t.ref.blob;0===r.length&&o&&0===o.opacity&&(t.removeChildView(o),t.ref.blob=null)},qr=j({DID_DRAG:function(e){var t=e.root,n=e.action;t.ref.blob?(t.ref.blob.translateX=n.position.scopeLeft,t.ref.blob.translateY=n.position.scopeTop,t.ref.blob.scaleX=1,t.ref.blob.scaleY=1,t.ref.blob.opacity=1):kr({root:t})},DID_DROP:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.scaleX=2.5,t.ref.blob.scaleY=2.5,t.ref.blob.opacity=0)},DID_END_DRAG:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.opacity=0)}}),Fr=G({ignoreRect:!0,ignoreRectUpdate:!0,name:"drip",write:jr}),Ur=function(e){return e.root.ref.fields={}},Br=function(e,t){return e.ref.fields[t]},Vr=function(e){e.query("GET_ACTIVE_ITEMS").forEach((function(t){e.ref.fields[t.id]&&e.element.appendChild(e.ref.fields[t.id])}))},zr=function(e){var t=e.root;return Vr(t)},Hr=j({DID_SET_DISABLED:function(e){var t=e.root;t.element.disabled=t.query("GET_DISABLED")},DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=fn("input");r.type="hidden",r.name=t.query("GET_NAME"),r.disabled=t.query("GET_DISABLED"),t.ref.fields[n.id]=r,Vr(t)},DID_LOAD_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&null!==n.serverFileReference&&(r.value=n.serverFileReference)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(r.parentNode.removeChild(r),delete t.ref.fields[n.id])},DID_DEFINE_VALUE:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(null===n.value?r.removeAttribute("value"):r.value=n.value,Vr(t))},DID_REORDER_ITEMS:zr,DID_SORT_ITEMS:zr}),Wr=G({tag:"fieldset",name:"data",create:Ur,write:Hr,ignoreRect:!0}),Yr=function(e){return"getRootNode"in e?e.getRootNode():document},Xr=["jpg","jpeg","png","gif","bmp","webp","svg","tiff"],Qr=["css","csv","html","txt"],Jr={zip:"zip|compressed",epub:"application/epub+zip"},Kr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e=e.toLowerCase(),Xr.includes(e)?"image/"+("jpg"===e?"jpeg":"svg"===e?"svg+xml":e):Qr.includes(e)?"text/"+e:Jr[e]||""},Zr=function(t){return new e((function(e,n){var r=uo(t);if(r.length&&!$r(t))return e(r);eo(t).then(e)}))},$r=function(e){return!!e.files&&e.files.length>0},eo=function(t){return new e((function(n,r){var o=(t.items?Array.from(t.items):[]).filter((function(e){return to(e)})).map((function(e){return no(e)}));o.length?e.all(o).then((function(e){var t=[];e.forEach((function(e){t.push.apply(t,e)})),n(t.filter((function(e){return e})).map((function(e){return e._relativePath||(e._relativePath=e.webkitRelativePath),e})))})).catch(console.error):n(t.files?Array.from(t.files):[])}))},to=function(e){if(ao(e)){var t=co(e);if(t)return t.isFile||t.isDirectory}return"file"===e.kind},no=function(t){return new e((function(e,n){io(t)?ro(co(t)).then(e).catch(n):e([t.getAsFile()])}))},ro=function(t){return new e((function(e,n){var r=[],o=0,i=0,a=function(){0===i&&0===o&&e(r)};!function e(t){o++;var c=t.createReader();!function t(){c.readEntries((function(n){if(0===n.length)return o--,void a();n.forEach((function(t){t.isDirectory?e(t):(i++,t.file((function(e){var n=oo(e);t.fullPath&&(n._relativePath=t.fullPath),r.push(n),i--,a()})))})),t()}),n)}()}(t)}))},oo=function(e){if(e.type.length)return e;var t=e.lastModifiedDate,n=e.name;return(e=e.slice(0,e.size,Kr(dt(e.name)))).name=n,e.lastModifiedDate=t,e},io=function(e){return ao(e)&&(co(e)||{}).isDirectory},ao=function(e){return"webkitGetAsEntry"in e},co=function(e){return e.webkitGetAsEntry()},uo=function(e){var t=[];try{if((t=lo(e)).length)return t;t=so(e)}catch(e){}return t},so=function(e){var t=e.getData("url");return"string"==typeof t&&t.length?[t]:[]},lo=function(e){var t=e.getData("text/html");if("string"==typeof t&&t.length){var n=t.match(/src\s*=\s*"(.+?)"/);if(n)return[n[1]]}return[]},fo=[],po=function(e){return{pageLeft:e.pageX,pageTop:e.pageY,scopeLeft:e.offsetX||e.layerX,scopeTop:e.offsetY||e.layerY}},ho=function(e,t,n){var r=mo(t),o={element:e,filterElement:n,state:null,ondrop:function(){},onenter:function(){},ondrag:function(){},onexit:function(){},onload:function(){},allowdrop:function(){}};return o.destroy=r.addListener(o),o},mo=function(e){var t=fo.find((function(t){return t.element===e}));if(t)return t;var n=vo(e);return fo.push(n),n},vo=function(e){var t=[],n={dragenter:_o,dragover:To,dragleave:Ro,drop:Io},r={};i(n,(function(n,o){r[n]=o(e,t),e.addEventListener(n,r[n],!1)}));var o={element:e,addListener:function(a){return t.push(a),function(){t.splice(t.indexOf(a),1),0===t.length&&(fo.splice(fo.indexOf(o),1),i(n,(function(t){e.removeEventListener(t,r[t],!1)})))}}};return o},go=function(e,t){return"elementFromPoint"in e||(e=document),e.elementFromPoint(t.x,t.y)},yo=function(e,t){var n=Yr(t),r=go(n,{x:e.pageX-window.pageXOffset,y:e.pageY-window.pageYOffset});return r===t||t.contains(r)},Eo=null,bo=function(e,t){try{e.dropEffect=t}catch(e){}},_o=function(e,t){return function(e){e.preventDefault(),Eo=e.target,t.forEach((function(t){var n=t.element,r=t.onenter;yo(e,n)&&(t.state="enter",r(po(e)))}))}},To=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Zr(n).then((function(r){var o=!1;t.some((function(t){var i=t.filterElement,a=t.element,c=t.onenter,u=t.onexit,s=t.ondrag,l=t.allowdrop;bo(n,"copy");var f=l(r);if(f)if(yo(e,a)){if(o=!0,null===t.state)return t.state="enter",void c(po(e));if(t.state="over",i&&!f)return void bo(n,"none");s(po(e))}else i&&!o&&bo(n,"none"),t.state&&(t.state=null,u(po(e)));else bo(n,"none")}))}))}},Io=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Zr(n).then((function(n){t.forEach((function(t){var r=t.filterElement,o=t.element,i=t.ondrop,a=t.onexit,c=t.allowdrop;if(t.state=null,!r||yo(e,o))return c(n)?void i(po(e),n):a(po(e))}))}))}},Ro=function(e,t){return function(e){Eo===e.target&&t.forEach((function(t){var n=t.onexit;t.state=null,n(po(e))}))}},Oo=function(e,t,n){e.classList.add("filepond--hopper");var r=n.catchesDropsOnPage,o=n.requiresDropOnElement,i=n.filterItems,a=void 0===i?function(e){return e}:i,c=ho(e,r?document.documentElement:e,o),u="",s="";c.allowdrop=function(e){return t(a(e))},c.ondrop=function(e,n){var r=a(n);t(r)?(s="drag-drop",l.onload(r,e)):l.ondragend(e)},c.ondrag=function(e){l.ondrag(e)},c.onenter=function(e){s="drag-over",l.ondragstart(e)},c.onexit=function(e){s="drag-exit",l.ondragend(e)};var l={updateHopperState:function(){u!==s&&(e.dataset.hopperState=s,u=s)},onload:function(){},ondragstart:function(){},ondrag:function(){},ondragend:function(){},destroy:function(){c.destroy()}};return l},wo=!1,So=[],Co=function(e){var t=document.activeElement;if(t&&/textarea|input/i.test(t.nodeName)){for(var n=!1,r=t;r!==document.body;){if(r.classList.contains("filepond--root")){n=!0;break}r=r.parentNode}if(!n)return}Zr(e.clipboardData).then((function(e){e.length&&So.forEach((function(t){return t(e)}))}))},Ao=function(e){So.includes(e)||(So.push(e),wo||(wo=!0,document.addEventListener("paste",Co)))},Po=function(e){Ae(So,So.indexOf(e)),0===So.length&&(document.removeEventListener("paste",Co),wo=!1)},Do=function(){var e=function(e){t.onload(e)},t={destroy:function(){Po(e)},onload:function(){}};return Ao(e),t},Lo=null,xo=null,No=[],Mo=function(e,t){e.element.textContent=t},Go=function(e){e.element.textContent=""},ko=function(e,t,n){var r=e.query("GET_TOTAL_ITEMS");Mo(e,n+" "+t+", "+r+" "+(1===r?e.query("GET_LABEL_FILE_COUNT_SINGULAR"):e.query("GET_LABEL_FILE_COUNT_PLURAL"))),clearTimeout(xo),xo=setTimeout((function(){Go(e)}),1500)},jo=function(e){return e.element.parentNode.contains(document.activeElement)},qo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_ABORTED");Mo(t,r+" "+o)},Fo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename;Mo(t,n.status.main+" "+r+" "+n.status.sub)},Uo=G({create:function(e){var t=e.root,n=e.props;t.element.id="filepond--assistant-"+n.id,c(t.element,"role","status"),c(t.element,"aria-live","polite"),c(t.element,"aria-relevant","additions")},ignoreRect:!0,ignoreRectUpdate:!0,write:j({DID_LOAD_ITEM:function(e){var t=e.root,n=e.action;if(jo(t)){t.element.textContent="";var r=t.query("GET_ITEM",n.id);No.push(r.filename),clearTimeout(Lo),Lo=setTimeout((function(){ko(t,No.join(", "),t.query("GET_LABEL_FILE_ADDED")),No.length=0}),750)}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action;if(jo(t)){var r=n.item;ko(t,r.filename,t.query("GET_LABEL_FILE_REMOVED"))}},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_COMPLETE");Mo(t,r+" "+o)},DID_ABORT_ITEM_PROCESSING:qo,DID_REVERT_ITEM_PROCESSING:qo,DID_THROW_ITEM_REMOVE_ERROR:Fo,DID_THROW_ITEM_LOAD_ERROR:Fo,DID_THROW_ITEM_INVALID:Fo,DID_THROW_ITEM_PROCESSING_ERROR:Fo}),tag:"span",name:"assistant"}),Bo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.replace(new RegExp(t+".","g"),(function(e){return e.charAt(1).toUpperCase()}))},Vo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Date.now(),o=null;return function(){for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];clearTimeout(o);var u=Date.now()-r,s=function(){r=Date.now(),e.apply(void 0,a)};u<t?n||(o=setTimeout(s,t-u)):s()}},zo=1e6,Ho=function(e){return e.preventDefault()},Wo=function(e){var t=e.root,n=e.props,r=t.query("GET_ID");r&&(t.element.id=r);var o=t.query("GET_CLASS_NAME");o&&o.split(" ").filter((function(e){return e.length})).forEach((function(e){t.element.classList.add(e)})),t.ref.label=t.appendChildView(t.createChildView(Mr,Object.assign({},n,{translateY:null,caption:t.query("GET_LABEL_IDLE")}))),t.ref.list=t.appendChildView(t.createChildView(br,{translateY:null})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"panel-root"})),t.ref.assistant=t.appendChildView(t.createChildView(Uo,Object.assign({},n))),t.ref.data=t.appendChildView(t.createChildView(Wr,Object.assign({},n))),t.ref.measure=fn("div"),t.ref.measure.style.height="100%",t.element.appendChild(t.ref.measure),t.ref.bounds=null,t.query("GET_STYLES").filter((function(e){return!B(e.value)})).map((function(e){var n=e.name,r=e.value;t.element.dataset[n]=r})),t.ref.widthPrevious=null,t.ref.widthUpdated=Vo((function(){t.ref.updateHistory=[],t.dispatch("DID_RESIZE_ROOT")}),250),t.ref.previousAspectRatio=null,t.ref.updateHistory=[];var i=window.matchMedia("(pointer: fine) and (hover: hover)").matches,a="PointerEvent"in window;t.query("GET_ALLOW_REORDER")&&a&&!i&&(t.element.addEventListener("touchmove",Ho,{passive:!1}),t.element.addEventListener("gesturestart",Ho))},Yo=function(e){var t=e.root,n=e.props,r=e.actions;if(ni({root:t,props:n,actions:r}),r.filter((function(e){return/^DID_SET_STYLE_/.test(e.type)})).filter((function(e){return!B(e.data.value)})).map((function(e){var n=e.type,r=e.data,o=Bo(n.substr(8).toLowerCase(),"_");t.element.dataset[o]=r.value,t.invalidateLayout()})),!t.rect.element.hidden){t.rect.element.width!==t.ref.widthPrevious&&(t.ref.widthPrevious=t.rect.element.width,t.ref.widthUpdated());var o=t.ref.bounds;o||(o=t.ref.bounds=Jo(t),t.element.removeChild(t.ref.measure),t.ref.measure=null);var i=t.ref,a=i.hopper,c=i.label,u=i.list,s=i.panel;a&&a.updateHopperState();var l=t.query("GET_PANEL_ASPECT_RATIO"),f=t.query("GET_ALLOW_MULTIPLE"),p=t.query("GET_TOTAL_ITEMS"),d=p===(f?t.query("GET_MAX_FILES")||zo:1),h=r.find((function(e){return"DID_ADD_ITEM"===e.type}));if(d&&h){var m=h.data.interactionMethod;c.opacity=0,f?c.translateY=-40:m===Ee.API?c.translateX=40:m===Ee.BROWSE?c.translateY=40:c.translateY=30}else d||(c.opacity=1,c.translateX=0,c.translateY=0);var v=Xo(t),g=Qo(t),y=c.rect.element.height,E=!f||d?0:y,b=d?u.rect.element.marginTop:0,_=0===p?0:u.rect.element.marginBottom,T=E+b+g.visual+_,I=E+b+g.bounds+_;if(u.translateY=Math.max(0,E-u.rect.element.marginTop)-v.top,l){var R=t.rect.element.width,O=R*l;l!==t.ref.previousAspectRatio&&(t.ref.previousAspectRatio=l,t.ref.updateHistory=[]);var w=t.ref.updateHistory;w.push(R);var S=2;if(w.length>2*S)for(var C=w.length,A=C-10,P=0,D=C;D>=A;D--)if(w[D]===w[D-2]&&P++,P>=S)return;s.scalable=!1,s.height=O;var L=O-E-(_-v.bottom)-(d?b:0);g.visual>L?u.overflow=L:u.overflow=null,t.height=O}else if(o.fixedHeight){s.scalable=!1;var x=o.fixedHeight-E-(_-v.bottom)-(d?b:0);g.visual>x?u.overflow=x:u.overflow=null}else if(o.cappedHeight){var N=T>=o.cappedHeight,M=Math.min(o.cappedHeight,T);s.scalable=!0,s.height=N?M:M-v.top-v.bottom;var G=M-E-(_-v.bottom)-(d?b:0);T>o.cappedHeight&&g.visual>G?u.overflow=G:u.overflow=null,t.height=Math.min(o.cappedHeight,I-v.top-v.bottom)}else{var k=p>0?v.top+v.bottom:0;s.scalable=!0,s.height=Math.max(y,T-k),t.height=Math.max(y,I-k)}}},Xo=function(e){var t=e.ref.list.childViews[0].childViews[0];return t?{top:t.rect.element.marginTop,bottom:t.rect.element.marginBottom}:{top:0,bottom:0}},Qo=function(e){var t=0,n=0,r=e.ref.list,o=r.childViews[0],i=o.childViews.filter((function(e){return e.rect.element.height})),a=e.query("GET_ACTIVE_ITEMS").map((function(e){return i.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));if(0===a.length)return{visual:t,bounds:n};var c=o.rect.element.width,u=sr(o,a,r.dragCoordinates),s=a[0].rect.element,l=s.marginTop+s.marginBottom,f=s.marginLeft+s.marginRight,p=s.width+f,d=s.height+l,h=void 0!==u&&u>=0?1:0,m=a.find((function(e){return e.markedForRemoval&&e.opacity<.45}))?-1:0,v=a.length+h+m,g=Math.round(c/p);return 1===g?a.forEach((function(e){var r=e.rect.element.height+l;n+=r,t+=r*e.opacity})):(n=Math.ceil(v/g)*d,t=n),{visual:t,bounds:n}},Jo=function(e){var t=e.ref.measureHeight||null;return{cappedHeight:parseInt(e.style.maxHeight,10)||null,fixedHeight:0===t?null:t}},Ko=function(e,t){var n=e.query("GET_ALLOW_REPLACE"),r=e.query("GET_ALLOW_MULTIPLE"),o=e.query("GET_TOTAL_ITEMS"),i=e.query("GET_MAX_FILES"),a=t.length;return!r&&a>1||!!(K(i=r||n?i:1)&&o+a>i)&&(e.dispatch("DID_THROW_MAX_FILES",{source:t,error:xt("warning",0,"Max files")}),!0)},Zo=function(e,t,n){var r=e.childViews[0];return sr(r,t,{left:n.scopeLeft-r.rect.element.left,top:n.scopeTop-(e.rect.outer.top+e.rect.element.marginTop+e.rect.element.scrollTop)})},$o=function(e){var t=e.query("GET_ALLOW_DROP"),n=e.query("GET_DISABLED"),r=t&&!n;if(r&&!e.ref.hopper){var o=Oo(e.element,(function(t){if(Ko(e,t))return!1;var n=e.query("GET_BEFORE_DROP_FILE")||function(){return!0};return!e.query("GET_DROP_VALIDATION")||t.every((function(t){return ze("ALLOW_HOPPER_ITEM",t,{query:e.query}).every((function(e){return!0===e}))&&n(t)}))}),{filterItems:function(t){var n=e.query("GET_IGNORED_FILES");return t.filter((function(e){return!Xt(e)||!n.includes(e.name.toLowerCase())}))},catchesDropsOnPage:e.query("GET_DROP_ON_PAGE"),requiresDropOnElement:e.query("GET_DROP_ON_ELEMENT")});o.onload=function(t,n){var r=e.ref.list.childViews[0].childViews.filter((function(e){return e.rect.element.height})),o=e.query("GET_ACTIVE_ITEMS").map((function(e){return r.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));e.dispatch("ADD_ITEMS",{items:t,index:Zo(e.ref.list,o,n),interactionMethod:Ee.DROP}),e.dispatch("DID_DROP",{position:n}),e.dispatch("DID_END_DRAG",{position:n})},o.ondragstart=function(t){e.dispatch("DID_START_DRAG",{position:t})},o.ondrag=Vo((function(t){e.dispatch("DID_DRAG",{position:t})})),o.ondragend=function(t){e.dispatch("DID_END_DRAG",{position:t})},e.ref.hopper=o,e.ref.drip=e.appendChildView(e.createChildView(Fr))}else!r&&e.ref.hopper&&(e.ref.hopper.destroy(),e.ref.hopper=null,e.removeChildView(e.ref.drip))},ei=function(e,t){var n=e.query("GET_ALLOW_BROWSE"),r=e.query("GET_DISABLED"),o=n&&!r;o&&!e.ref.browser?e.ref.browser=e.appendChildView(e.createChildView(Dr,Object.assign({},t,{onload:function(t){if(Ko(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:Ee.BROWSE})}})),0):!o&&e.ref.browser&&(e.removeChildView(e.ref.browser),e.ref.browser=null)},ti=function(e){var t=e.query("GET_ALLOW_PASTE"),n=e.query("GET_DISABLED"),r=t&&!n;r&&!e.ref.paster?(e.ref.paster=Do(),e.ref.paster.onload=function(t){e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:Ee.PASTE})}):!r&&e.ref.paster&&(e.ref.paster.destroy(),e.ref.paster=null)},ni=j({DID_SET_ALLOW_BROWSE:function(e){var t=e.root,n=e.props;ei(t,n)},DID_SET_ALLOW_DROP:function(e){var t=e.root;$o(t)},DID_SET_ALLOW_PASTE:function(e){var t=e.root;ti(t)},DID_SET_DISABLED:function(e){var t=e.root,n=e.props;$o(t),ti(t),ei(t,n),t.query("GET_DISABLED")?t.element.dataset.disabled="disabled":t.element.removeAttribute("data-disabled")}}),ri=G({name:"root",read:function(e){var t=e.root;t.ref.measure&&(t.ref.measureHeight=t.ref.measure.offsetHeight)},create:Wo,write:Yo,destroy:function(e){var t=e.root;t.ref.paster&&t.ref.paster.destroy(),t.ref.hopper&&t.ref.hopper.destroy(),t.element.removeEventListener("touchmove",Ho),t.element.removeEventListener("gesturestart",Ho)},mixins:{styles:["height"]}}),oi=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=null,o=Ye(),i=r(he(o),[at,ye(o)],[sn,ge(o)]);i.dispatch("SET_OPTIONS",{options:t});var c=function(){document.hidden||i.dispatch("KICK")};document.addEventListener("visibilitychange",c);var u=null,s=!1,l=!1,f=null,p=null,d=function(){s||(s=!0),clearTimeout(u),u=setTimeout((function(){s=!1,f=null,p=null,l&&(l=!1,i.dispatch("DID_STOP_RESIZE"))}),500)};window.addEventListener("resize",d);var h=ri(i,{id:be()}),m=!1,v=!1,g={_read:function(){s&&(p=window.innerWidth,f||(f=p),l||p===f||(i.dispatch("DID_START_RESIZE"),l=!0)),v&&m&&(m=null===h.element.offsetParent),m||(h._read(),v=h.rect.element.hidden)},_write:function(e){var t=i.processActionQueue().filter((function(e){return!/^SET_/.test(e.type)}));m&&!t.length||(T(t),m=h._write(e,t,l),Me(i.query("GET_ITEMS")),m&&i.processDispatchQueue())}},y=function(e){return function(t){var n={type:e};if(!t)return n;if(t.hasOwnProperty("error")&&(n.error=t.error?Object.assign({},t.error):null),t.status&&(n.status=Object.assign({},t.status)),t.file&&(n.output=t.file),t.source)n.file=t.source;else if(t.item||t.id){var r=t.item?t.item:i.query("GET_ITEM",t.id);n.file=r?Ne(r):null}return t.items&&(n.items=t.items.map(Ne)),/progress/.test(e)&&(n.progress=t.progress),t.hasOwnProperty("origin")&&t.hasOwnProperty("target")&&(n.origin=t.origin,n.target=t.target),n}},E={DID_DESTROY:y("destroy"),DID_INIT:y("init"),DID_THROW_MAX_FILES:y("warning"),DID_INIT_ITEM:y("initfile"),DID_START_ITEM_LOAD:y("addfilestart"),DID_UPDATE_ITEM_LOAD_PROGRESS:y("addfileprogress"),DID_LOAD_ITEM:y("addfile"),DID_THROW_ITEM_INVALID:[y("error"),y("addfile")],DID_THROW_ITEM_LOAD_ERROR:[y("error"),y("addfile")],DID_THROW_ITEM_REMOVE_ERROR:[y("error"),y("removefile")],DID_PREPARE_OUTPUT:y("preparefile"),DID_START_ITEM_PROCESSING:y("processfilestart"),DID_UPDATE_ITEM_PROCESS_PROGRESS:y("processfileprogress"),DID_ABORT_ITEM_PROCESSING:y("processfileabort"),DID_COMPLETE_ITEM_PROCESSING:y("processfile"),DID_COMPLETE_ITEM_PROCESSING_ALL:y("processfiles"),DID_REVERT_ITEM_PROCESSING:y("processfilerevert"),DID_THROW_ITEM_PROCESSING_ERROR:[y("error"),y("processfile")],DID_REMOVE_ITEM:y("removefile"),DID_UPDATE_ITEMS:y("updatefiles"),DID_ACTIVATE_ITEM:y("activatefile"),DID_REORDER_ITEMS:y("reorderfiles")},b=function(e){var t=Object.assign({pond:M},e);delete t.type,h.element.dispatchEvent(new CustomEvent("FilePond:"+e.type,{detail:t,bubbles:!0,cancelable:!0,composed:!0}));var n=[];e.hasOwnProperty("error")&&n.push(e.error),e.hasOwnProperty("file")&&n.push(e.file);var r=["type","error","file"];Object.keys(e).filter((function(e){return!r.includes(e)})).forEach((function(t){return n.push(e[t])})),M.fire.apply(M,[e.type].concat(n));var o=i.query("GET_ON"+e.type.toUpperCase());o&&o.apply(void 0,n)},T=function(e){e.length&&e.filter((function(e){return E[e.type]})).forEach((function(e){var t=E[e.type];(Array.isArray(t)?t:[t]).forEach((function(t){"DID_INIT_ITEM"===e.type?b(t(e.data)):setTimeout((function(){b(t(e.data))}),0)}))}))},I=function(e){return i.dispatch("SET_OPTIONS",{options:e})},R=function(e){return i.query("GET_ACTIVE_ITEM",e)},O=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PREPARE",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},w=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new e((function(e,r){A([{source:t,options:n}],{index:n.index}).then((function(t){return e(t&&t[0])})).catch(r)}))},S=function(e){return e.file&&e.id},C=function(e,t){return"object"!=typeof e||S(e)||t||(t=e,e=void 0),i.dispatch("REMOVE_ITEM",Object.assign({},t,{query:e})),null===i.query("GET_ACTIVE_ITEM",e)},A=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new e((function(e,t){var r=[],o={};if(U(n[0]))r.push.apply(r,n[0]),Object.assign(o,n[1]||{});else{var a=n[n.length-1];"object"!=typeof a||a instanceof Blob||Object.assign(o,n.pop()),r.push.apply(r,n)}i.dispatch("ADD_ITEMS",{items:r,index:o.index,interactionMethod:Ee.API,success:e,failure:t})}))},P=function(){return i.query("GET_ACTIVE_ITEMS")},D=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PROCESSING",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},L=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n,i=o.length?o:P();return e.all(i.map(O))},x=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n;if(!o.length){var i=P().filter((function(e){return!(e.status===Ge.IDLE&&e.origin===ke.LOCAL)&&e.status!==Ge.PROCESSING&&e.status!==Ge.PROCESSING_COMPLETE&&e.status!==Ge.PROCESSING_REVERT_ERROR}));return e.all(i.map(D))}return e.all(o.map(D))},N=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o,i=Array.isArray(n[0])?n[0]:n;"object"==typeof i[i.length-1]?o=i.pop():Array.isArray(n[0])&&(o=n[1]);var a=P();return i.length?i.map((function(e){return _(e)?a[e]?a[e].id:null:e})).filter((function(e){return e})).map((function(e){return C(e,o)})):e.all(a.map((function(e){return C(e,o)})))},M=Object.assign({},De(),{},g,{},ve(i,o),{setOptions:I,addFile:w,addFiles:A,getFile:R,processFile:D,prepareFile:O,removeFile:C,moveFile:function(e,t){return i.dispatch("MOVE_ITEM",{query:e,index:t})},getFiles:P,processFiles:x,removeFiles:N,prepareFiles:L,sort:function(e){return i.dispatch("SORT",{compare:e})},browse:function(){var e=h.element.querySelector("input[type=file]");e&&e.click()},destroy:function(){M.fire("destroy",h.element),i.dispatch("ABORT_ALL"),h._destroy(),window.removeEventListener("resize",d),document.removeEventListener("visibilitychange",c),i.dispatch("DID_DESTROY")},insertBefore:function(e){return q(h.element,e)},insertAfter:function(e){return F(h.element,e)},appendTo:function(e){return e.appendChild(h.element)},replaceElement:function(e){q(h.element,e),e.parentNode.removeChild(e),n=e},restoreElement:function(){n&&(F(n,h.element),h.element.parentNode.removeChild(h.element),n=null)},isAttachedTo:function(e){return h.element===e||n===e},element:{get:function(){return h.element}},status:{get:function(){return i.query("GET_STATUS")}}});return i.dispatch("DID_INIT"),a(M)},ii=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return i(Ye(),(function(e,n){t[e]=n[0]})),oi(Object.assign({},t,{},e))},ai=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},ci=function(e){return Bo(e.replace(/^data-/,""))},ui=function e(t,n){i(n,(function(n,r){i(t,(function(e,o){var i=new RegExp(n);if(i.test(e)&&(delete t[e],!1!==r))if(Y(r))t[r]=o;else{var a=r.group;ie(r)&&!t[a]&&(t[a]={}),t[a][ai(e.replace(i,""))]=o}})),r.mapping&&e(t[r.group],r.mapping)}))},si=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];i(e.attributes,(function(t){n.push(e.attributes[t])}));var r=n.filter((function(e){return e.name})).reduce((function(t,n){var r=c(e,n.name);return t[ci(n.name)]=r===n.name||r,t}),{});return ui(r,t),r},li=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={"^class$":"className","^multiple$":"allowMultiple","^capture$":"captureMethod","^webkitdirectory$":"allowDirectoriesOnly","^server":{group:"server",mapping:{"^process":{group:"process"},"^revert":{group:"revert"},"^fetch":{group:"fetch"},"^restore":{group:"restore"},"^load":{group:"load"}}},"^type$":!1,"^files$":!1};ze("SET_ATTRIBUTE_TO_OPTION_MAP",n);var r=Object.assign({},t),o=si("FIELDSET"===e.nodeName?e.querySelector("input[type=file]"):e,n);Object.keys(o).forEach((function(e){ie(o[e])?(ie(r[e])||(r[e]={}),Object.assign(r[e],o[e])):r[e]=o[e]})),r.files=(t.files||[]).concat(Array.from(e.querySelectorAll("input:not([type=file])")).map((function(e){return{source:e.value,options:{type:e.dataset.type}}})));var i=ii(r);return e.files&&Array.from(e.files).forEach((function(e){i.addFile(e)})),i.replaceElement(e),i},fi=function(){return n(arguments.length<=0?void 0:arguments[0])?li.apply(void 0,arguments):ii.apply(void 0,arguments)},pi=["fire","_read","_write"],di=function(e){var t={};return Le(e,t,pi),t},hi=function(e,t){return e.replace(/(?:{([a-zA-Z]+)})/g,(function(e,n){return t[n]}))},mi=function(e){var t=new Blob(["(",e.toString(),")()"],{type:"application/javascript"}),n=URL.createObjectURL(t),r=new Worker(n);return{transfer:function(e,t){},post:function(e,t,n){var o=be();r.onmessage=function(e){e.data.id===o&&t(e.data.message)},r.postMessage({id:o,message:e},n)},terminate:function(){r.terminate(),URL.revokeObjectURL(n)}}},vi=function(t){return new e((function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(e){n(e)},r.src=t}))},gi=function(e,t){var n=e.slice(0,e.size,e.type);return n.lastModifiedDate=e.lastModifiedDate,n.name=t,n},yi=function(e){return gi(e,e.name)},Ei=[],bi=function(e){if(!Ei.includes(e)){Ei.push(e);var t=e({addFilter:He,utils:{Type:Ue,forin:i,isString:Y,isFile:Xt,toNaturalFileSize:yn,replaceInString:hi,getExtensionFromFilename:dt,getFilenameWithoutExtension:Wt,guesstimateMimeType:Kr,getFileFromBlob:gt,getFilenameFromURL:pt,createRoute:j,createWorker:mi,createView:G,createItemAPI:Ne,loadImage:vi,copyFile:yi,renameFile:gi,createBlob:Et,applyFilterChain:Ve,text:pn,getNumericAspectRatioFromString:Ke},views:{fileActionButton:gn}});We(t.options)}},_i=function(){return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)},Ti=function(){return"Promise"in window},Ii=function(){return"slice"in Blob.prototype},Ri=function(){return"URL"in window&&"createObjectURL"in window.URL},Oi=function(){return"visibilityState"in document},wi=function(){return"performance"in window},Si=function(){return"supports"in(window.CSS||{})},Ci=function(){return/MSIE|Trident/.test(window.navigator.userAgent)},Ai=(Mn=v()&&!_i()&&Oi()&&Ti()&&Ii()&&Ri()&&wi()&&(Si()||Ci()),function(){return Mn}),Pi={apps:[]},Di="filepond",Li=function(){};if(t.Status={},t.FileStatus={},t.FileOrigin={},t.OptionTypes={},t.create=Li,t.destroy=Li,t.parse=Li,t.find=Li,t.registerPlugin=Li,t.getOptions=Li,t.setOptions=Li,Ai()){k((function(){Pi.apps.forEach((function(e){return e._read()}))}),(function(e){Pi.apps.forEach((function(t){return t._write(e)}))}));var xi=function e(){document.dispatchEvent(new CustomEvent("FilePond:loaded",{detail:{supported:Ai,create:t.create,destroy:t.destroy,parse:t.parse,find:t.find,registerPlugin:t.registerPlugin,setOptions:t.setOptions}})),document.removeEventListener("DOMContentLoaded",e)};"loading"!==document.readyState?setTimeout((function(){return xi()}),0):document.addEventListener("DOMContentLoaded",xi);var Ni=function(){return i(Ye(),(function(e,n){t.OptionTypes[e]=n[1]}))};t.Status=Object.assign({},$e),t.FileOrigin=Object.assign({},ke),t.FileStatus=Object.assign({},Ge),t.OptionTypes={},Ni(),t.create=function(){var e=fi.apply(void 0,arguments);return e.on("destroy",t.destroy),Pi.apps.push(e),di(e)},t.destroy=function(e){var t=Pi.apps.findIndex((function(t){return t.isAttachedTo(e)}));return t>=0&&(Pi.apps.splice(t,1)[0].restoreElement(),!0)},t.parse=function(e){return Array.from(e.querySelectorAll("."+Di)).filter((function(e){return!Pi.apps.find((function(t){return t.isAttachedTo(e)}))})).map((function(e){return t.create(e)}))},t.find=function(e){var t=Pi.apps.find((function(t){return t.isAttachedTo(e)}));return t?di(t):null},t.registerPlugin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(bi),Ni()},t.getOptions=function(){var e={};return i(Ye(),(function(t,n){e[t]=n[0]})),e},t.setOptions=function(e){return ie(e)&&(Pi.apps.forEach((function(t){t.setOptions(e)})),Xe(e)),t.getOptions()}}t.supported=Ai,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(10))},function(e,t,n){},,,,,,function(e,t,n){"use strict";n.r(t);n(12),n(122);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(124),n(83));n.d(t,"default",(function(){return c.a})),n.d(t,"Lightbox",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},,,,,,,,,,function(e,t,n){var r=n(49),o=n(45),i=n(119),a=n(48),c=n(120),u=[].push,s=function(e){var t=1==e,n=2==e,s=3==e,l=4==e,f=6==e,p=5==e||f;return function(d,h,m,v){for(var g,y,E=i(d),b=o(E),_=r(h,m,3),T=a(b.length),I=0,R=v||c,O=t?R(d,T):n?R(d,0):void 0;T>I;I++)if((p||I in b)&&(y=_(g=b[I],I,E),e))if(t)O[I]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return I;case 2:u.call(O,g)}else if(l)return!1;return f?-1:s||l?l:O}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},,,,,,,function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t,n){var r=n(47);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(11),o=n(121),i=n(50)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(46);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){n(123);var r=n(43);e.exports=r("Array","findIndex")},function(e,t,n){"use strict";var r=n(40),o=n(111).findIndex,i=n(41),a=n(42),c="findIndex",u=!0,s=a(c);c in[]&&Array(1).findIndex((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){},,,,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return nt})),n.d(t,"ChoicesGuide",(function(){return nt})),n.d(t,"ChoicesGuideResult",(function(){return vt}));n(12),n(134),n(118);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(137),n(3)),u=n.n(c),s=n(1),l=n(2),f=n(23),p=n(5);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=v(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).config.aspectRatio=t.config.aspectRatio||"16x9",t.questionId=e.data.id,t.state={value:50,isAnswered:!1},t.onChangeHandler=t.onChangeHandler.bind(y(t)),t.showLightbox=t.showLightbox.bind(y(t)),t}return t=i,(n=[{key:"onChangeHandler",value:function(e){var t=this,n={value:e,isAnswered:!0,error:void 0};this.setState(n,(function(){t.liveUpdates()}))}},{key:"isValid",value:function(){return!(void 0===(this.props.data||{}).value&&!this.state.isAnswered&&(this.setState({error:"Je hebt nog geen keuze gemaakt"}),1))}},{key:"getAnswer",value:function(){if(this.state.isAnswered){var e,t=this.props.data||{},n=(t.values,t.dimensions);try{n=JSON.parse(n)}catch(e){}return n=n||["x"],"number"==typeof this.state.value||"string"==typeof this.state.value?(e={},n.includes("x")&&(e.x=this.state.value),n.includes("y")&&(e.y=this.state.value),n.includes("z")&&(e.z=this.state.value)):(e={},n.includes("x")&&(e.x=this.state.value.x),n.includes("y")&&(e.y=this.state.value.y),n.includes("z")&&(e.z=this.state.value.z)),e}}},{key:"liveUpdates",value:function(){var e=new window.CustomEvent("osc-choices-guide-live-updates");document.dispatchEvent(e)}},{key:"showLightbox",value:function(e){var t=this.props.data||{},n=t.values&&t.values.A&&t.values.A.questionImage;n&&n.length&&(Array.isArray(n)||(n=[n]),n=n[0]);var r=t.values&&t.values.B&&t.values.B.questionImage;r&&r.length&&(Array.isArray(r)||(r=[r]),r=r[0]);var o=[n,r],i=o.findIndex((function(t){return t==e})),a=new window.CustomEvent("osc-show-light-box",{detail:{images:o,startIndex:i,aspectRatio:this.config.aspectRatio}});document.dispatchEvent(a)}},{key:"render",value:function(){var e=this,t=this,n=t.props.data||{},r=!1;t.state.error&&(r=!0);var o=t.state.isAnswered,i="object"==d(n.value)?n.value.x:void 0!==n.value?n.value:"not defined";"not defined"===i?i=this.state.value:o=!0;var a=null,c=n.images||[];if(c&&c.length){Array.isArray(c)||(c=[c]);var u=c[0];a=React.createElement("div",{className:"osc-question-image-container"},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:u}))}var s=null;if(n.moreInfo&&(n.moreInfo.title||n.moreInfo.text)){var l=n.moreInfo.title||"Geen titel",h=n.moreInfo.text||"Geen tekst";s=React.createElement("div",{className:"osc-accordeon"},React.createElement("div",{className:"osc-accordeon-item osc-closed"},React.createElement("div",{className:"osc-title osc-info"},l),React.createElement("div",{className:"osc-description"},h)))}var m=n.values&&n.values.A&&n.values.A.label||"A",v=n.values&&n.values.B&&n.values.B.label||"B",g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),s),y=null;switch(n.type){case"continuous":y=React.createElement("div",{className:"osc-question-selector"},React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:m}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:v}}));break;case"a-to-b":var E=n.values&&n.values.A&&n.values.A.labelBelow||"",b=n.values&&n.values.B&&n.values.B.labelBelow||"",_=n.values&&n.values.A&&n.values.A.questionText,T=n.values&&n.values.B&&n.values.B.questionText,I=null,R=null;_&&T&&(I=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},m),React.createElement("div",{className:"osc-question-description-labeled-text"},_)),R=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},v),React.createElement("div",{className:"osc-question-description-labeled-text"},T)),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),I,R,s));var O=n.values&&n.values.A&&n.values.A.questionImage;O&&O.length&&(Array.isArray(O)||(O=[O]),O=O[0]);var w=n.values&&n.values.B&&n.values.B.questionImage;w&&w.length&&(Array.isArray(w)||(w=[w]),w=w[0]);var S=null,C=null;O&&w&&(S=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-a"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-a"},m),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:O,onClick:function(){return t.showLightbox(O)}}))),C=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-b"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-b"},v),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:w,onClick:function(){return t.showLightbox(w)}})))),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),s,S,C,React.createElement("div",{style:{clear:"both",height:15}}),I,R),y=React.createElement("div",{className:"osc-question-selector"},React.createElement("div",{className:"osc-question-selector-label-a"},m),React.createElement("div",{className:"osc-question-selector-label-b"},v),React.createElement(p.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:E||""}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:b||""}}));break;case"enum-radio":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(r,o){var i=parseInt(1e6*Math.random()),a=!1;return"object"==d(n.value)?(a=!0,Object.keys(n.value).forEach((function(e){n.value[e]!==r.value[e]&&(a=!1)}))):n.value===r.value&&(a=!0),"undefined"!=n.value?n.value:e.state.value,React.createElement("div",{key:"div-value-".concat(i),className:"osc-radio-container"},React.createElement("div",{className:"osc-radio-input".concat(a?" osc-radio-input-checked":"")},React.createElement("input",{name:"enum-radio-".concat(n.id),type:"radio",onChange:function(){return t.onChangeHandler(r.value)},key:"button-value-".concat(i)})),React.createElement("div",{className:"osc-radio-text"},r.text))})));break;case"enum-buttons":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(e,n){return React.createElement("button",{onClick:function(){return t.onChangeHandler(e.value)},key:"button-value-".concat(n)},e.text)})));break;default:y=React.createElement("div",null,"Type ",n.type," is (nog) niet geimplementeerd.")}var A=null;return r&&(A=React.createElement("div",{className:"osc-error-text"},t.state.error)),React.createElement("div",{id:t.props.config.divId,className:"osc-question osc-question-".concat(n.type).concat(r?" osc-error":"")},a,React.createElement("div",{className:"osc-question-content",id:t.props.config.divId+"-content"},React.createElement("h3",{className:"osc-question-title"}," ",n.title),g,y,A))}}])&&h(t.prototype,n),r&&h(t,r),i}(s.a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?T(Object(n),!0).forEach((function(t){R(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):T(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=A(e);if(t){var o=A(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return C(this,n)}}function C(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).noOfQuestionsToShow=t.config.noOfQuestionsToShow||1,t.questionElements=[],t.state={currentQuestion:0,values:{}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"isValid",value:function(){var e=this,t=!0,n=e.props.data.questions.slice(e.state.currentQuestion,e.state.currentQuestion+e.noOfQuestionsToShow),r=!1;return n.forEach((function(n,o){e.questionElements[o].isValid()||(r||setTimeout((function(){document.querySelector("#".concat(e.questionElements[o].config.divId,"-content")).scrollIntoView({behavior:"smooth"})}),250),r=!0,t=!1)})),t}},{key:"getAnswers",value:function(){var e=this,t=u()({},this.props.data&&this.props.data.values,e.state.values);return e.props.data&&e.props.data.questions.forEach((function(n,r){var o=e.questionElements.find((function(e){return e&&e.questionId==n.id}));o&&void 0!==o.getAnswer()&&(t[n.id]=o.getAnswer())})),e.setState({values:t}),t}},{key:"gotoNextQuestion",value:function(){if(this.isValid()){var e=this.state.currentQuestion+this.noOfQuestionsToShow;return e>=this.props.data.questions.length?(e=0,this.setState({currentQuestion:e}),{isReady:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isReady:!1,currentQuestion:e})}}},{key:"gotoPreviousQuestion",value:function(){var e=this.state.currentQuestion-this.noOfQuestionsToShow;return e<0?(e=0,this.setState({currentQuestion:e}),{isBeginning:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isBeginning:!1,currentQuestion:e})}},{key:"render",value:function(){var e,t=this,n=t.props.data||{questions:[]},r=n.questions.slice(t.state.currentQuestion,t.state.currentQuestion+t.noOfQuestionsToShow),o=u()({},this.props.data&&this.props.data.values,t.state.values);return e=React.createElement("div",{className:"osc-questions"},r.map((function(e,n){return React.createElement(b,{config:I(I({},t.config),{},{divId:"osc-question-".concat(e.id)}),data:I(I({},e),{},{value:o[e.id]}),key:"question-".concat(e.id),ref:function(e){t.questionElements[n]=e}})}))),React.createElement("div",{id:this.id,className:"osc-question-group"},React.createElement("h3",{className:"osc-question-group-title"},n.title),React.createElement("div",{className:"osc-question-group-description",dangerouslySetInnerHTML:{__html:n.description}}),e)}}])&&O(t.prototype,n),r&&O(t,r),i}(s.a);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=G(e);if(t){var o=G(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return M(this,n)}}function M(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(i,e);var t,n,r,o=N(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),null==(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null,barColor:{default:"#bed200",min:"#ff9100",max:"#bed200"}})).config.barColor.min&&(t.config.barColor.min="#ff9100"),null==t.config.barColor.max&&(t.config.barColor.max="#bed200"),t.answers=e.data&&e.data.answers||{},Object.keys(t.answers).forEach((function(e){t.answers[e]==parseInt(t.answers[e])&&(t.answers[e]={x:parseInt(t.answers[e])})})),t.state={score:t.props.score||0},t}return t=i,(n=[{key:"getTitle",value:function(e,t){return this.props.data&&this.props.data.title}},{key:"calculateScore",value:function(e){var t=this,n=this.answers,r=e||{},o=(Object.keys(n).length,{});Object.keys(n).forEach((function(e){var i=n[e]||{},a=r[e]||(t.config.startWithAllQuestionsAnswered?{x:50,y:50,z:50}:{}),c=o[e]={};["x","y","z"].forEach((function(e){if(void 0!==i[e]&&void 0!==a[e])return c[e]=100-Math.abs(i[e]-a[e])}))}));var i={};return Object.keys(n).forEach((function(e){["x","y","z"].forEach((function(t){i[t]=i[t]||{score:[],noOfAnswers:0},void 0!==o[e][t]&&i[t].score.push(o[e][t]),n[e]&&void 0!==n[e][t]&&i[t].noOfAnswers++}))})),Object.keys(i).forEach((function(e){i[e]=i[e].score.length?i[e].score.reduce((function(e,t){return e+t}))/i[e].noOfAnswers:void 0})),this.setState({score:i}),i}},{key:"render",value:function(){var e=this,t=e.state.score,n=null;switch(this.config.type){case"plane":var r=null,o=this.props.data&&this.props.data.images||[];if(o&&o.length){Array.isArray(o)||(o=[o]);var i=o[0],a=i;"object"==D(i)&&(a=i.src),r=React.createElement("img",{className:"osc-choice-plane-background-image",src:a,style:{width:this.props.baseSize/2,height:this.props.baseSize/2}})}return React.createElement("div",{className:"osc-choice-plane",style:{width:this.props.baseSize/2,height:this.props.baseSize/2}},r);case"minus-to-plus-100":var c=null,u=parseInt(2*(t.x-50));e.config.withPercentage&&(c=React.createElement("div",{className:"osc-percentage"},u,"%"));var s=e.config.barColor.max.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),l=e.config.barColor.min.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),f=parseInt(l[1],16)+(parseInt(s[1],16)-parseInt(l[1],16))*(t.x/100),p=parseInt(l[2],16)+(parseInt(s[2],16)-parseInt(l[2],16))*(t.x/100),d=parseInt(l[3],16)+(parseInt(s[3],16)-parseInt(l[3],16))*(t.x/100),h={backgroundColor:"rgb(".concat(f,",").concat(p,",").concat(d,")")};u>=0&&(h.width=u/2+"%",h.left="50%",h.right="auto"),u<0&&(h.width=-u/2+"%",h.left="auto",h.right="50%"),n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar osc-from-center".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-progress",style:h})),c);break;case"zero-to-100":default:var m=null;if(e.config.withPercentage){var v=parseInt(t.x);m=React.createElement("div",{className:"osc-percentage"},v,"%")}h={width:(t.x||0)+"%",backgroundColor:e.config.barColor.default},n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:h})),m)}var g=null;return(e.config.minLabel||e.config.maxLabel)&&(g=React.createElement("div",{className:"osc-minmax-labels"},React.createElement("div",{className:"osc-min-label"},e.config.minLabel),React.createElement("div",{className:"osc-max-label"},e.config.maxLabel))),React.createElement("li",{className:"osc-choice"},n,g)}}])&&L(t.prototype,n),r&&L(t,r),i}(s.a);function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=W(e);if(t){var o=W(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return H(this,n)}}function H(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=z(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null})).choiceElements=[],t.state={title:"Je hebt nog geen keuze gemaakt",scores:e.scores,planePos:{x:50,y:50}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.choicesClickListener=function(e){n.setState({random:Math.random()})},document.addEventListener("osc-choices-click",n.choicesClickListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-click",self.choicesClickListener)}},{key:"calculateScores",value:function(e){var t=this,n={};t.choiceElements.forEach((function(t){n[t.config.divId]=t.calculateScore(e)}));var r={x:50,y:50};if(t.config.type){var o=Object.keys(e);if(o.length){r={x:0,y:0};var i={x:0,y:0,z:0};o.forEach((function(t){var n=e[t];["x","y","z"].forEach((function(e){void 0!==n[e]&&(r[e]+=parseInt(n[e])||0,i[e]++)}))})),r.x=i.x?parseInt(r.x/i.x):void 0,r.y=i.y?parseInt(r.y/i.y):void 0}}return t.setState({answers:e,scores:n,planePos:r}),{answers:e,scores:n,planePos:r}}},{key:"getPreferedChoice",value:function(e){var t=e.scores,n=e.planePos,r=this;switch(t=t||r.state.scores,r.config.type){case"plane":return(n=n||r.state.planePos).x<50&&n.y<50?r.choiceElements[0]:n.x>50&&n.y<50?r.choiceElements[1]:n.x<50&&n.y>50?r.choiceElements[2]:n.x>50&&n.y>50?r.choiceElements[3]:null;default:var o=Object.keys(t).sort((function(e,n){return t[n].x-t[e].x}))[0];return r.choiceElements.find((function(e){return e&&e.config.divId==o}))}}},{key:"render",value:function(){var e=this;switch(this.config.type){case"plane":var t=document.querySelector("#".concat(this.divId))&&document.querySelector("#".concat(this.divId)).offsetWidth-1||180,n=(void 0===e.state.planePos.y?50:e.state.planePos.y)*(t/100),r=(void 0===e.state.planePos.x?50:e.state.planePos.x)*(t/100);return React.createElement("div",{id:this.divId,className:"osc-choices osc-choice-plane-plane",ref:function(t){e.planePlaneElement=t}},Object.keys(e.props.choices).map((function(n,r){var o=e.props.choices[n];return React.createElement(k,{config:F({divId:"choice-".concat(o.id)},e.config),data:o,score:e.props.scores&&e.props.scores["choice-".concat(o.id)],key:"choice-".concat(o.id),baseSize:t,ref:function(t){e.choiceElements[r]=t}})})),React.createElement("div",{className:"osc-point",style:{top:n,left:r}}),React.createElement("div",{style:{clear:"both"}}));case"zero-to-100":case"minus-to-plus-100":default:return React.createElement("ul",{className:"osc-choices"},Object.keys(e.props.choices).map((function(t,n){var r=e.props.choices[t];return React.createElement(k,{config:F({divId:"choice-".concat(r.id)},e.config),data:r,score:e.props.scores&&e.props.scores["choice-".concat(r.id)],key:"choice-".concat(r.id),ref:function(t){e.choiceElements[n]=t}})})))}}}])&&B(t.prototype,n),r&&B(t,r),i}(s.a);function X(e){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function J(e,t){return(J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function K(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Z(this,n)}}function Z(e,t){return!t||"object"!==X(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(i,e);var t,n,r,o=K(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={questionEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t;e.questionId&&((t=u.a.recursive(!0,{},this.props.currentTarget.answers))[e.questionId]=t[e.questionId]||{},t[e.questionId][e.dimension]=e.value),t=t||e,console.log("=",JSON.stringify(t,null,2)),this.props.onChange({answers:t})}},{key:"toggleEditMode",value:function(e){this.setState({questionEditModeIndex:this.state.questionEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=(e.props.currentTarget.answers,React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"}),React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Vraag")),React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),e.props.currentTarget.questionGroup.answerDimensions>1&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"30px"}}))),Object.keys(e.props.currentTarget.questionGroup.questions).map((function(t,n){var r=e.props.currentTarget.questionGroup.questions[t],o=[],i=r.dimensions||["x"];return(-1!=i.indexOf("x")||e.props.currentTarget.questionGroup&&1==e.props.currentTarget.questionGroup.answerDimensions)&&o.push("x"),-1!=i.indexOf("y")&&e.props.currentTarget.questionGroup&&2==e.props.currentTarget.questionGroup.answerDimensions&&o.push("y"),-1!=i.indexOf("z")&&e.props.currentTarget.questionGroup&&3==e.props.currentTarget.questionGroup.answerDimensions&&o.push("z"),React.createElement("div",{className:"osc-overview-line",key:"question-".concat(r.id)},React.createElement("div",{className:"osc-overview-line-content"},r.title," (",r.id,")"),o.map((function(t,o){var i=e.props.currentTarget.answers&&e.props.currentTarget.answers[r.id]&&("object"==X(e.props.currentTarget.answers[r.id])?e.props.currentTarget.answers[r.id][t]:e.props.currentTarget.answers[r.id]);return e.state.questionEditModeIndex==n?React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},React.createElement(p.a.Text,{config:{},value:i,onChange:function(n){return e.handleFieldChange({questionId:r.id,dimension:t,value:n.value})},ref:function(t){return e.questionImageBField=t}})):React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},i)})),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}})))}))))),n=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(n=React.createElement("div",null,React.createElement("h3",null,"Afbeelding"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),n,React.createElement("h3",null,"Antwoorden"),t,React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&Q(t.prototype,n),r&&Q(t,r),i}(s.a);function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function oe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ae(e);if(t){var o=ae(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ie(this,n)}}function ie(e,t){return!t||"object"!==te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ae(e){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(i,e);var t,n,r,o=oe(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;void 0!==e.isActive&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.isActive=e.isActive),void 0!==e.submissionType&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.submissionType=e.submissionType),void 0!==e.withExisting&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.withExisting=e.withExisting),void 0!==e.requiredUserRole&&((t={choicesGuideConfig:u.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.requiredUserRole=e.requiredUserRole||null),t=t||e,n.props.onChange(t)}},{key:"render",value:function(){var e=this,t=e.props.currentTarget.choicesGuideConfig||{},n=null;if("true"==t.isActive){var r=null;if("form"==t.submissionType){var o=null;"member"==t.requiredUserRole&&(o=React.createElement("div",null,React.createElement("h4",null,"Als er al een inzending is voor deze gebruiker"),React.createElement(p.a.Select,{config:{choices:[{value:"replace",description:"Overschrijf het bestaande resultaat"},{value:"error",description:"Geef een foutmelding"}]},value:t.withExisting,onChange:function(t){return e.handleFieldChange({withExisting:t.value})},ref:function(t){return e.withExistingField=t}}))),r=React.createElement("div",null,React.createElement("h4",null,"Om te kunnnen insturen moet een gebruiker ingelogd zijn"),React.createElement(p.a.Select,{config:{choices:[{value:null,description:"Nee"},{value:"member",description:"Ja"}]},value:t.requiredUserRole,onChange:function(t){return e.handleFieldChange({requiredUserRole:t.value})},ref:function(t){return e.requiredUserRoleField=t}}),o)}n=React.createElement("div",null,React.createElement("h4",null,"Opslaan van de resultaten"),React.createElement(p.a.Select,{config:{choices:[{value:"none",description:"Niet opslaan"},{value:"auto",description:"Automatisch opslaan"},{value:"form",description:"Laat eerst een formulier invullen"}]},value:t.submissionType,onChange:function(t){return e.handleFieldChange({submissionType:t.value})},ref:function(t){return e.submissionTypeField=t}}),r)}return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Naam"),React.createElement(p.a.InputWithCounter,{key:"x1",config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){e.titleField=t}}),React.createElement("h4",null,"Deze keuzewijzer is actief"),React.createElement(p.a.Select,{config:{choices:[{value:"true",description:"Ja"},{value:"false",description:"Nee"}]},value:t.isActive,onChange:function(t){return e.handleFieldChange({isActive:t.value})},ref:function(t){return e.isActiveField=t}}),n)}}])&&ne(t.prototype,n),r&&ne(t,r),i}(s.a);function ue(e){return(ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=he(e);if(t){var o=he(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ue(t)&&"function"!=typeof t?de(e):t}function de(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var me=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).handleFieldChange=t.handleFieldChange.bind(de(t)),t.state={valueEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;if(void 0!==e.type&&(t={type:e.type},"a-to-b"==n.props.currentTarget.type&&"enum-radio"==e.type&&(t.values=[]),"enum-radio"==n.props.currentTarget.type&&"a-to-b"==e.type&&(t.values={A:{},B:{}})),void 0!==e.moreInfoTitle&&((t={moreInfo:u.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.title=e.moreInfoTitle),void 0!==e.moreInfoText&&((t={moreInfo:u.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.text=e.moreInfoText),void 0!==e.questionTextA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.questionImageA){t={values:u.a.recursive({},n.props.currentTarget.values)};var r=e.questionImageA;try{r=JSON.parse(r)}catch(e){}t.values.A.questionImage=r}if(void 0!==e.questionTextA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.labelA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.label=e.labelA),void 0!==e.labelB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.label=e.labelB),void 0!==e.labelBelowA&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.A.labelBelow=e.labelBelowA),void 0!==e.labelBelowB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.labelBelow=e.labelBelowB),void 0!==e.questionImageB){t={values:u.a.recursive({},n.props.currentTarget.values)};var o=e.questionImageB;try{o=JSON.parse(o)}catch(e){}t.values.B.questionImage=o}void 0!==e.questionTextB&&((t={values:u.a.recursive({},n.props.currentTarget.values)}).values.B.questionText=e.questionTextB),void 0!==e.newValue&&((t={values:n.props.currentTarget.values||[]}).values.push(e.newValue),this.setState({valueEditModeIndex:t.values.length-1})),void 0!==e.deleteIndex&&(t={values:n.props.currentTarget.values||[]}).values.splice(e.deleteIndex,1),void 0!==e.valueIndex&&((t={values:n.props.currentTarget.values||[]}).values[e.valueIndex]=t.values[e.valueIndex]||{text:"",value:{}},e.valueDimension?void 0!==e.valueValue&&("object"!=ue(t.values[e.valueIndex].value)&&(t.values[e.valueIndex].value={}),t.values[e.valueIndex].value[e.valueDimension]=e.valueValue):t.values[e.valueIndex].text=e.valueText),t=t||e,n.props.onChange(t)}},{key:"toggleEditMode",value:function(e){this.setState({valueEditModeIndex:this.state.valueEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}));e.props.currentTarget.moreInfo&&(e.props.currentTarget.moreInfo.title||e.props.currentTarget.moreInfo.text)&&(t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}),React.createElement("h3",null,"Meer informatie text"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.text,onChange:function(t){return e.handleFieldChange({moreInfoText:t.value})},ref:function(t){return e.moreInfoField=t}})));var n=null;if("continuous"==e.props.currentTarget.type&&(n=React.createElement("div",null,React.createElement("h3",null,"Label minimale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:250},value:e.props.currentTarget.minLabel,onChange:function(t){return e.props.onChange({minLabel:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Label maximale waarde"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.maxLabel,onChange:function(t){return e.props.onChange({maxLabel:t.value})},ref:function(t){return e.maxLabelField=t}}))),"a-to-b"==e.props.currentTarget.type&&(n=React.createElement("div",{className:"osc-column-container"},React.createElement("div",{className:"osc-column-50p osc-margin-right-10"},React.createElement("h3",null,"Label voor A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.label,onChange:function(t){return e.handleFieldChange({labelA:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowA:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij A"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionText,onChange:function(t){return e.handleFieldChange({questionTextA:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij A"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionImage,onChange:function(t){return e.handleFieldChange({questionImageA:t.value})},ref:function(t){return e.questionImageAField=t}})),React.createElement("div",{className:"osc-column-50p osc-margin-left-10"},React.createElement("h3",null,"Label voor B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.label,onChange:function(t){return e.handleFieldChange({labelB:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowB:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij B"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionText,onChange:function(t){return e.handleFieldChange({questionTextB:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij B"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionImage,onChange:function(t){return e.handleFieldChange({questionImageB:t.value})},ref:function(t){return e.questionImageBField=t}})))),"enum-buttons"==e.props.currentTarget.type||"enum-radio"==e.props.currentTarget.type){var r=e.props.currentTarget.dimensions||"['x']";n=React.createElement("div",null,React.createElement("h3",null,"Opties"),React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-question-options"},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Tekst")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"60px"}}))),e.props.currentTarget.values&&e.props.currentTarget.values.map&&e.props.currentTarget.values.map((function(t,n){var o=function(r,o){var i=o?t[r][o]:t[r];return e.state.valueEditModeIndex==n?React.createElement(p.a.Text,{config:{},value:i,onChange:function(t){return e.handleFieldChange({valueIndex:n,valueDimension:o,valueText:t.value,valueValue:t.value})}}):i};return React.createElement("div",{className:"osc-overview-line",key:"option-".concat(n)},React.createElement("div",{className:"osc-overview-line-content"},o("text")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","x")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.handleFieldChange({deleteIndex:n})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(){return e.handleFieldChange({newValue:{text:"Nieuwe optie",value:{x:"50",y:"50"}}})}},"Nieuwe optie toevoegen")))))}var o=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(o=React.createElement("div",null,React.createElement("h3",null,"Deze vraag heeft invloed in de richting"),React.createElement(p.a.Select,{config:{choices:[{value:"['x']",description:"Alleen X"},{value:"['y']",description:"Alleen Y"},{value:"['x','y']",description:"X en Y"}]},value:e.props.currentTarget.dimensions,onChange:function(t){return e.props.onChange({dimensions:t.value})},ref:function(t){return e.dimensionsField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),t,React.createElement("h3",null,"Afbeelding boven de vraag"),React.createElement(p.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Type vraag"),React.createElement(p.a.Select,{config:{choices:[{value:"",description:"Maak een keuze"},{value:"a-to-b",description:"van a naar b slider"},,{value:"enum-radio",description:"radio buttons"}],required:!0},value:e.props.currentTarget.type,onChange:function(t){return e.handleFieldChange({type:t.value})},ref:function(t){return e.typeField=t}}),n,o,React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&se(t.prototype,n),r&&se(t,r),i}(s.a);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=Ee(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(p.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(p.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Aantal dimensies voor antwoorden"),React.createElement(p.a.Select,{config:{choices:[{value:"1",description:"1 - liniair"},{value:"2",description:"2 - vlak"}]},value:e.props.currentTarget.answerDimensions,onChange:function(t){return e.props.onChange({answerDimensions:t.value})},ref:function(t){return e.answerDimensionsField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(p.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&ge(t.prototype,n),r&&ge(t,r),i}(s.a);function Ie(e){return(Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function we(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ce(e);if(t){var o=Ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Se(this,n)}}function Se(e,t){return!t||"object"!==Ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t)}(i,e);var t,n,r,o=we(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return(!e.props.questionGroups||e.props.questionGroups.length<1)&&(t=React.createElement("a",{href:"#",onClick:function(t){return e.props.setCurrentForm({what:"question-group"})}},"Nieuwe vraaggroep")),React.createElement("div",{className:"osc-overview"},React.createElement("h2",null,"Vraaggroepen"),Object.keys(e.props.questionGroups).map((function(t,n){var r=e.props.questionGroups[t],o=React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"},React.createElement("h4",null,"Vragen")),Object.keys(r.questions).map((function(t,n){var o=r.questions[t];return React.createElement("div",{className:"osc-overview-line",key:"question-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id,questionId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question",questionGroupId:r.id,questionId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id})}},"Nieuwe vraag"))),i=React.createElement("div",{className:"osc-overview-choices"},React.createElement("h4",null,"Keuze opties"),Object.keys(r.choices).map((function(t,n){var o=r.choices[t];return React.createElement("div",{className:"osc-overview-line",key:"choice-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id,choiceId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"choice",questionGroupId:r.id,choiceId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line",key:"choice-new"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id})}},"Nieuwe keuze optie"))),a=React.createElement("div",{className:"osc-no-button"});return 0==Object.keys(r.choices).length&&0==Object.keys(r.questions).length&&1!=e.props.questionGroups.length&&(a=React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question-group",questionGroupId:r.id,title:r.title})}})),React.createElement("div",{className:"osc-overview-question-group",key:"questiongroup-".concat(r.id)},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("h3",null,r.title)),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question-group",questionGroupId:r.id})}}),a)),o,i)})),React.createElement("br",null),React.createElement("br",null),t)}}])&&Re(t.prototype,n),r&&Re(t,r),i}(s.a);function Pe(e){var t=e.config,n="".concat(t.api&&t.api.url,"/api/site/").concat(t.siteId,"/choicesguide/").concat(t.choicesGuideId,"?includeChoices=1&includeQuestions=1"),r=l.a.api.getHeaders();return fetch(n,{headers:r}).then((function(e){return e.json()})).then((function(e){var t={choicesGuideId:e.id,images:e.images,choicesGuideConfig:e.config,title:e.title,description:e.description,choices:e.choices||[],questionGroups:e.questiongroups||[],status:"active"};if(t.questionGroups&&t.questionGroups.map)return t.questionGroups.map((function(e){e.questions&&e.questions.map&&e.questions.map((function(e){"continuous"==e.type&&(e.type="a-to-b"),"enum-buttons"==e.type&&(e.type="enum-radio"),"a-to-b"==e.type&&(e.values&&e.values.A&&(e.values.A.labelBelow=e.values.A.labelBelow||e.minLabel),e.values&&e.values.B&&(e.values.B.labelBelow=e.values.B.labelBelow||e.maxLabel))}))})),t}))}function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Le(Object(n),!0).forEach((function(t){Ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ge(e,t){return(Ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Fe(e);if(t){var o=Fe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return je(this,n)}}function je(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?qe(e):t}function qe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fe(e){return(Fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ge(e,t)}(i,e);var t,n,r,o=ke(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null}})).handleFieldChange=t.handleFieldChange.bind(qe(t)),t.setCurrentForm=t.setCurrentForm.bind(qe(t)),t.deleteElement=t.deleteElement.bind(qe(t)),t.state={choicesGuideId:t.props.data.choicesGuideId,currentTarget:{},busy:!1},t.onFinished=t.props.onFinished,t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Pe({config:e.config}).then((function(t){e.setState(xe(xe({},t),{},{busy:!1}),(function(){e.setCurrentForm({what:"choices-guide"})}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"handleFieldChange",value:function(e){var t=this.state.currentTarget;Object.keys(e).forEach((function(n){t[n]=e[n]})),this.setState({currentTarget:t})}},{key:"setCurrentForm",value:function(e){var t,n,r;switch(e.what){case"choices-guide":e.title=this.state.title,e.description=this.state.description,e.images=this.state.images?this.state.images:"",e.choicesGuideConfig=this.state.choicesGuideConfig?this.state.choicesGuideConfig:{};break;case"choice":n=e.questionGroupId?(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).choices&&t.choices.find((function(t){return t.id==e.choiceId}))||{}:this.state.choices.find((function(t){return t.id==e.choicesId}))||{},e.questionGroup=t,e.title=n.title,e.description=n.description,e.images=n.images,e.answers=n.answers,e.seqnr=void 0!==n.seqnr?n.seqnr:10;break;case"question-group":t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{},e.title=t.title,e.description=t.description,e.answerDimensions=t.answerDimensions,e.seqnr=void 0!==t.seqnr?t.seqnr:10;break;case"question":r=(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).questions&&t.questions.find((function(t){return t.id==e.questionId}))||{},e.questionGroup=t,e.title=r.title,e.description=r.description,e.moreInfo=r.moreInfo,e.images=r.images,e.minLabel=r.minLabel,e.maxLabel=r.maxLabel,e.type=r.type,e.dimensions=r.dimensions,e.values=r.values,e.seqnr=void 0!==r.seqnr?r.seqnr:10}this.setState({currentTarget:e})}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null,i=this.formfields;return Object.keys(this.state.currentTarget).forEach((function(e){i[e+"Field"]&&i[e+"Field"].validate&&!i[e+"Field"].validate({showErrors:t})&&(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"canSubmit",value:function(){var e=this.config.user||{};return l.a.user.hasRole(e,"moderator")}},{key:"submitForm",value:function(){var e=this;e.setState({busy:!0,submitError:null},(function(){var t,n,r;if(!e.validate({showErrors:!0,scrollTo:!0}))return e.setState({busy:!1});if(!e.canSubmit())return alert("Je mag dit niet");switch(e.state.currentTarget.what){case"choices-guide":r=e.state.choicesGuideId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,config:e.state.currentTarget.choicesGuideConfig};break;case"choice":r=e.state.currentTarget.choiceId,t=e.state.currentTarget.questionGroupId?"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/choice"):"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/choice"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,answers:e.state.currentTarget.answers,seqnr:e.state.currentTarget.seqnr};try{n.answers=JSON.parse(n.answers)}catch(e){}break;case"question-group":r=e.state.currentTarget.questionGroupId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,answerDimensions:e.state.currentTarget.answerDimensions,seqnr:e.state.currentTarget.seqnr};break;case"question":r=e.state.currentTarget.questionId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/question"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,moreInfo:e.state.currentTarget.moreInfo,images:e.state.currentTarget.images,minLabel:e.state.currentTarget.minLabel,maxLabel:e.state.currentTarget.maxLabel,type:e.state.currentTarget.type,dimensions:e.state.currentTarget.dimensions,values:e.state.currentTarget.values,seqnr:e.state.currentTarget.seqnr};try{n.values=JSON.parse(n.values)}catch(e){}}t+=r?"/".concat(r):"";var o=l.a.api.getHeaders(e.config);fetch(t,{method:r?"PUT":"POST",headers:o,body:JSON.stringify(n)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"choices-guide"==e.state.currentTarget.what?e.onFinished():e.fetchData()})).catch((function(t){t.then((function(t){try{"object"==De(t=JSON.parse(t))&&(t=t.message)}catch(e){}return e.setState({submitError:{message:t}}),console.log(t)})),e.setState({busy:!1})}))}))}},{key:"deleteElement",value:function(e){var t=e.what,n=e.questionGroupId,r=e.choiceId,o=e.questionId,i=e.title,a=this;if(a.setState({submitError:null}),confirm("Je gaat "+t+" "+i+" verwijderen. Weet je het zeker?")){var c;switch(t){case"question-group":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n);break;case"choice":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/choice/").concat(r);break;case"question":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/question/").concat(o)}var u=l.a.api.getHeaders(a.config);fetch(c,{method:"DELETE",headers:u}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){a.fetchData()})).catch((function(e){e.then((function(e){try{"object"==De(e=JSON.parse(e))&&(e=e.message)}catch(e){}return a.setState({submitError:{message:e}}),console.log(e)})),a.setState({busy:!1})}))}}},{key:"render",value:function(){var e=this,t=null,n=null,r=null,o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.setCurrentForm({what:"choices-guide"})}},"Terug"),i=React.createElement("button",{className:"osc-button-blue",onClick:function(t){return e.submitForm()}},"Opslaan");switch(e.state.currentTarget.what){case"choices-guide":t="Bewerk keuzewijzer",n=React.createElement(ce,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}}),r=React.createElement(Ae,{questionGroups:e.state.questionGroups,setCurrentForm:e.setCurrentForm,deleteElement:e.deleteElement,ref:function(t){e.formfields=t}}),o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug");break;case"choice":t="Bewerk Keuze",n=React.createElement(ee,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question-group":t="Bewerk Vragengroep",n=React.createElement(Te,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question":t="Bewerk Vraag ".concat(e.state.currentTarget.questionId),n=React.createElement(me,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;default:o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug"),i=null}var a=null;return e.state.submitError&&(a=React.createElement("div",{className:"osc-message osc-error"},e.state.submitError.message)),React.createElement("div",{id:this.divId,className:"osc-form".concat(this.state.busy?" osc-busy":"")},React.createElement("h2",null,t),n,r,a,React.createElement("br",null),React.createElement("br",null),o,i)}}])&&Me(t.prototype,n),r&&Me(t,r),i}(s.a),Be=n(101),Ve=n(89);function ze(e){return(ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function He(e){return function(e){if(Array.isArray(e))return We(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return We(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return We(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function We(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ye(Object(n),!0).forEach((function(t){Qe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Je(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ke(e,t){return(Ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ze(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=tt(e);if(t){var o=tt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return $e(this,n)}}function $e(e,t){return!t||"object"!==ze(t)&&"function"!=typeof t?et(e):t}function et(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var nt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ke(e,t)}(i,e);var t,n,r,o=Ze(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=et(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"<b>Jouw voorkeur:</b>{preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!1,minLabel:null,maxLabel:null}}));!n.config.aspectRatio&&n.config.choices&&n.config.choices.type&&"plane"==n.config.choices.type&&(n.config.aspectRatio="10x7");var r=l.a.localStorage.get("osc-choices-guide.values")||{},a=l.a.localStorage.get("osc-choices-guide.scores")||{};return n.state={title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,currentQuestion:void 0,status:"init",values:r[n.config.choicesGuideId],scores:a[n.config.choicesGuideId]},n.liveUpdates=n.liveUpdates.bind(et(t)),n.hideEditForm=n.hideEditForm.bind(et(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.liveUpdateListener=function(e){n.liveUpdates(e.detail)},document.addEventListener("osc-choices-guide-live-updates",n.liveUpdateListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-guide-live-updates",self.liveUpdateListener)}},{key:"fetchData",value:function(){var e=this;Pe({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e=this,t={currentQuestionGroupIndex:0};e.setState(t,(function(){e.liveUpdates();var t=new window.CustomEvent("osc-choices-guide-is-ready");document.dispatchEvent(t)}))}},{key:"showEditForm",value:function(){this.setState({status:"edit"})}},{key:"hideEditForm",value:function(){var e=l.a.localStorage.get("osc-choices-guide.values")||{},t=l.a.localStorage.get("osc-choices-guide.scores")||{};this.setState({title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,status:"init",values:e[this.config.choicesGuideId],scores:t[this.config.choicesGuideId]},(function(){this.fetchData()}))}},{key:"gotoNextQuestion",value:function(){var e=this,t={};t.values=u()(e.state.values||{},e.questionGroupElement.getAnswers()),e.setState(t),e.choicesElement.calculateScores(t.values),e.userPreference&&e.userPreference.calculateScores();var n=e.questionGroupElement.gotoNextQuestion(),r=n.isReady,o=n.currentQuestion;e.setState({currentQuestion:o},(function(){r?e.gotoNextGroup():window.scrollTo(0,0)}))}},{key:"gotoPreviousQuestion",value:function(){var e=this;if("result"==this.state.status)return this.gotoPreviousGroup();var t={};t.values=u()(this.state.values||{},this.questionGroupElement.getAnswers()),this.setState(t),this.choicesElement.calculateScores(t.values),self.userPreference&&self.userPreference.calculateScores();var n=this.questionGroupElement.gotoPreviousQuestion(),r=n.isBeginning,o=n.currentQuestion;this.setState({currentQuestion:o},(function(){r?e.gotoPreviousGroup():window.scrollTo(0,0)}))}},{key:"gotoNextGroup",value:function(){var e=this,t=Xe({},this.state);t.currentQuestionGroupIndex<t.questionGroups.length-1?(t.values=u()(t.values||{},this.questionGroupElement.getAnswers()),t.currentQuestionGroupIndex++,this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))):this.gotoResult()}},{key:"gotoPreviousGroup",value:function(){var e=this,t={};t.currentQuestionGroupIndex=this.state.currentQuestionGroupIndex-1,"result"==this.state.status&&(t.currentQuestionGroupIndex=this.state.questionGroups.length-1,t.status="active"),this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))}},{key:"gotoResult",value:function(){document.location.href=this.config.afterUrl}},{key:"liveUpdates",value:function(){var e,t=this,n=u()(t.state.values||{},t.questionGroupElement.getAnswers()),r=t.choicesElement.calculateScores(n);e=r.scores,t.userPreference&&t.userPreference.calculateScores(n),t.setState({scores:e,firstAnswerGiven:Object.keys(n).length>0},(function(){var r=l.a.localStorage.get("osc-choices-guide.values")||{};r[t.config.choicesGuideId]=n,l.a.localStorage.set("osc-choices-guide.values",r);var o=l.a.localStorage.get("osc-choices-guide.scores")||{};o[t.config.choicesGuideId]=e,l.a.localStorage.set("osc-choices-guide.scores",o),t.updateChoicesTitle()}))}},{key:"updateChoicesTitle",value:function(){var e=this,t=e.config.choices.title.noPreferenceYet,n=e.choicesElement&&e.choicesElement.getPreferedChoice({});e.state.firstAnswerGiven&&(t=n?e.config.choices.title.preference.replace("{preferredChoice}",n&&n.getTitle(e.state.scores[n.config.divId])||t):e.config.choices.title.inBetween),e.setState({choicesTitle:t})}},{key:"onChoicesClick",value:function(e){this.choicesAccordeon.className.match(" osc-closed")?this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-closed"," osc-open"):this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-open"," osc-closed");var t=new window.CustomEvent("osc-choices-click",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e,t=this,n=t.state.choices;t.state.currentQuestionGroupIndex>=0&&(e=t.state.questionGroups[t.state.currentQuestionGroupIndex])&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=null,o=t.state.images;o&&o.length&&(Array.isArray(o)||(o=[o]),r=React.createElement(f.Image,{className:"osc-top-image-spacer",width:"100%",image:o[0]}));var i=null;if("edit"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement(Ue,{config:t.config,onFinished:t.hideEditForm,data:Xe({},t.state)}));else if("init"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement("div",{className:"osc-intro"},"Laden..."));else{var a=React.createElement("div",{id:"osc-choices-container-"+this.divId,className:"osc-choices-container osc-accordeon osc-closed ".concat("osc-type-"+t.config.choices.type),ref:function(e){t.choicesAccordeon=e}},React.createElement("div",{onClick:function(e){return t.onChoicesClick(e)},className:"osc-accordeon-button",dangerouslySetInnerHTML:{__html:t.state.choicesTitle}}),React.createElement("div",{className:"osc-accordeon-content"},React.createElement(Y,{config:Xe({},t.config.choices),choices:He(n),scores:Xe({},t.state.scores),firstAnswerGiven:!!t.state.firstAnswerGiven,ref:function(e){t.choicesElement=e},key:"choices"}))),c=React.createElement(P,{config:t.config,data:e,ref:function(e){t.questionGroupElement=e},key:"group".concat(t.state.currentQuestionsGroupIndex)}),u=null;t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(u=React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk keuzewijzer"));var s=null,l=null,p=null;t.state.currentQuestionGroupIndex>0||t.state.currentQuestion>0?(l=function(){t.gotoPreviousQuestion()},p="Terug"):t.config.beforeUrl&&(s=t.config.beforeUrl,p="Introductie");var d=null,h=null;"init"==t.state.status?(d=null,h=null):(d=function(){t.gotoNextQuestion()},h="Volgende");var m=null;(p||h)&&(m=React.createElement(Ve.default,{previousAction:l,previousUrl:s,previousLabel:p,nextAction:d,nextUrl:null,nextLabel:h})),i=React.createElement("div",{className:"osc-choices-guide-content"},u,a,c,m)}return React.createElement("div",{id:this.divId,className:"osc-choices-guide"},React.createElement(Be.default,null),r,i)}}])&&Je(t.prototype,n),r&&Je(t,r),i}(s.a),rt=n(131);function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e){return function(e){if(Array.isArray(e))return at(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return at(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return at(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function at(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ut(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(n),!0).forEach((function(t){st(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function st(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=mt(e);if(t){var o=mt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return dt(this,n)}}function dt(e,t){return!t||"object"!==ot(t)&&"function"!=typeof t?ht(e):t}function ht(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var vt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(i,e);var t,n,r,o=pt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",submission:{type:"none",requireLoginSettings:{title:"Stemcode",description:"Om te kunnen stemmen vul je de stemcode in die je per post hebt ontvangen. Wij controleren je stemcode op geldigheid. Als dat gelukt is kun je stemmen.",buttonTextLogin:"Vul je stemcode in",buttonTextLoggedIn:"Geldige stemcode",buttonTextAlreadySubmitted:"Ongeldige stemcode",changeLoginLinkText:"Vul een andere stemcode in",loggedInMessage:"Het controleren van je stemcode is gelukt! Klik op onderstaande knop om je keuze in te sturen.",notYetLoggedInError:"Klik hierboven om je stem te valideren.",alreadySubmittedMessage:"Deze stemcode is al gebruikt om te stemmen. Een stemcode kan maar één keer gebruikt worden."}},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"Jouw voorkeur is {preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!0,minLabel:null,maxLabel:null}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.config.logoutUrl=t.config.logoutUrl||"/oauth/logout?returnTo="+encodeURIComponent(document.location.href);var n=l.a.localStorage.get("osc-choices-guide.values")||{};n=n[t.config.choicesGuideId]||{};var r=l.a.localStorage.get("osc-choices-guide.scores")||{};r=r[t.config.choicesGuideId]||{};var a,c=l.a.localStorage.get("osc-choices-guide.formvalues")||{};c=c[t.config.choicesGuideId]||{};var u=window.location.search.match(/(\?|\&)resultdata=([^\?\&]+)/);if(u){var s=window.atob(u[2]);try{s=JSON.parse(s)}catch(e){}a=s.result.scrollToLogin,c=s.formValues,n=s.result.answers,r=s.result.scores}if("form"==t.config.submission.type){t.onFormChange=t.onFormChange.bind(ht(t));t.config.submission.form.fields.forEach((function(e){var t=e.name||e.title.toLowerCase();void 0!==c[t]&&(e.value=c[t])}))}return t.state={title:"",answers:n,scores:r,scrollToLogin:a,questionGroupId:t.config.questionGroupId},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Pe({config:e.config}).then((function(t){var n=t.questionGroups&&t.questionGroups[0]&&t.questionGroups[0].id;e.setState(ut(ut({},t),{},{questionGroupId:n}),(function(){e.config.submission.type=t.choicesGuideConfig.submissionType||e.config.submission.type,e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e,t,n=this,r=n.choicesElement&&n.choicesElement.calculateScores(n.state.answers);e=r.scores,t=r.planePos;var o="";if(n.choicesElement){var i=n.choicesElement.getPreferedChoice({scores:e,planePos:t});o=i?n.config.choices.title.preference.replace("{preferredChoice}",i&&i.getTitle(n.state.scores[i.config.divId])||o):n.config.choices.title.inBetween,n.setState({title:o});var a=new window.CustomEvent("osc-choices-guide-result-is-ready",{detail:{preferredChoice:{name:void 0,title:o,preferredChoiceId:-1},answers:n.state.answers,scores:n.state.scores}});if(document.dispatchEvent(a),n.state.scrollToLogin){var c=document.querySelector(".osc-require-login");c&&c.scrollIntoView({behavior:"smooth"})}"auto"==n.config.submission.type&&n.submitResult()}}},{key:"submitResult",value:function(){var e,t,n,r=this,o=!(!r.state.choicesGuideConfig||!r.state.choicesGuideConfig.requiredUserRole);if(o&&!r.isUserLoggedIn()){var i=document.querySelector(".osc-require-login");i&&i.scrollIntoView({behavior:"smooth"}),t={submissionError:{message:r.config.submission.requireLoginSettings.notYetLoggedInError,type:"unknown"}}}"form"==r.config.submission.type&&(e=r.form.getValues(),r.form.validate({showErrors:!0,scrollTo:!0})||(n=!0)),t||n?r.setState(t,(function(){r.form.validate({showErrors:!0,scrollTo:!0})})):rt.a.load().then((function(t){t.get().then((function(t){var n=t.visitorId,i="".concat(r.config.api&&r.config.api.url,"/api/site/").concat(r.config.siteId,"/choicesguide/").concat(r.config.choicesGuideId,"/result"),a=l.a.api.getHeaders(r.config),c={result:{answers:r.state.answers,scores:r.state.scores},extraData:e,userFingerprint:n};fetch(i,{method:"POST",headers:a,body:JSON.stringify(c)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){if("form"==r.config.submission.type)return l.a.localStorage.remove("osc-choices-guide.values"),l.a.localStorage.remove("osc-choices-guide.scores"),l.a.localStorage.remove("osc-choices-guide.formvalues"),o?r.logout({afterUrl:r.config.afterUrl}):document.location.href=r.config.afterUrl})).catch((function(e){e.then((function(e){try{e=JSON.parse(e)}catch(e){}var t=Array.isArray(e)&&e[0]&&e[0].message||e[0]||e.message||e;r.setState({submissionError:{message:t.toString(),type:"Je hebt je mening al ingestuurd"==t?"alreadySubmitted":"unknown"}},(function(){return console.log(e)}))}))}))}))}))}},{key:"isUserLoggedIn",value:function(){return this.config.user&&this.config.user.role&&"anonymous"!=this.config.user.role}},{key:"gotoLoginUrl",value:function(){var e=this.config.loginUrl,t={scrollToLogin:!0,formValues:this.form.getValues(),result:{answers:this.state.answers,scores:this.state.scores}},n=e.match(/returnTo=([^\?\&]+)/);if(n){var r=decodeURIComponent(n[1]);r+=r.match(/\?/)?"&":"?",r+="resultdata="+window.btoa(JSON.stringify(t).replace(/=+$/,"")),r=encodeURIComponent(r),e=e.replace(/returnTo=[^\?\&]+/,"returnTo="+r)}else e+=e.match(/\?/)?"&":"?",e+="resultdata="+window.btoa(JSON.stringify(t)).replace(/=+$/,"");document.location.href=e}},{key:"logout",value:function(e){var t=e.afterUrl,n=void 0===t?self.config.afterUrl:t,r=self.config.logoutUrl||"/oauth/logout";fetch(r,{headers:{"Content-type":"application/json"},method:"GET"}).then((function(e){return document.location.href=n})).catch((function(e){return document.location.href=n}))}},{key:"onFormChange",value:function(){var e=this,t=l.a.localStorage.get("osc-choices-guide.formvalues")||{};t[e.config.choicesGuideId]=e.form.getValues(),l.a.localStorage.set("osc-choices-guide.formvalues",t),e.setState({random:Math.random()})}},{key:"render",value:function(){var e,t=this,n=(t.props&&t.props.data,t.state.choices);t.state.questionGroups&&(e=t.state.questionGroups.find((function(e){return e.id==t.state.questionGroupId})))&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=!(!t.state.choicesGuideConfig||!t.state.choicesGuideConfig.requiredUserRole),o=null;n&&(o=React.createElement(Y,{config:ut({},t.config.choices),scores:ut({},t.state.scores),choices:it(n),firstAnswerGiven:!0,ref:function(e){t.choicesElement=e},key:"choices"}));var i=null;t.config.moreInfoUrl&&t.config.moreInfoLabel&&(i=React.createElement("div",{className:"osc-more-info-link"},React.createElement("a",{href:t.config.moreInfoUrl},t.config.moreInfoLabel)));var a=null,c=null,u=null;if("form"==t.config.submission.type){if(a=React.createElement(p.a.Form,{config:t.config.submission.form,onChange:t.onFormChange,ref:function(e){t.form=e}}),r)if(t.isUserLoggedIn()){var s="osc-success",l=t.config.submission.requireLoginSettings.buttonTextLoggedIn,f=t.config.submission.requireLoginSettings.loggedInMessage;t.state.submissionError&&(s="osc-error","alreadySubmitted"==t.state.submissionError.type?(l=t.config.submission.requireLoginSettings.buttonTextAlreadySubmitted,f=t.config.submission.requireLoginSettings.alreadySubmittedMessage):f=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-logged-in osc-logged-in ".concat(s)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},l),React.createElement("div",{className:"change-login-link-text"},React.createElement("a",{onClick:function(e){return t.gotoLoginUrl()}},t.config.submission.requireLoginSettings.changeLoginLinkText)),React.createElement("div",{className:"osc-message"},f)))}else{var d="",h="";t.state.submissionError&&(d="osc-error",h=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-not-yet-logged-in ".concat(d)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},t.config.submission.requireLoginSettings.description,React.createElement("br",null),React.createElement("br",null),React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},t.config.submission.requireLoginSettings.buttonTextLogin),React.createElement("div",{className:"osc-message"},h)))}var m=null,v=null;t.config.beforeUrl&&(m=t.config.beforeUrl,v=t.config.beforeLabel||"Vorige");var g=t.config.afterLabel||"Opslaan",y="form"==t.config.submission.type&&t.form&&!t.form.validate({})||r&&!t.isUserLoggedIn();(v||g)&&(u=React.createElement(Ve.default,{previousAction:null,previousUrl:m,previousLabel:v,nextAction:function(){t.submitResult()},nextUrl:null,nextLabel:g,nextIsDisabled:y}))}var E=null;return t.state.submissionError&&!r&&(E=React.createElement("div",{className:"osc-message osc-error"},t.state.submissionError.message)),React.createElement("div",{className:"osc-choices-guide"},React.createElement("div",{className:"osc-result"},React.createElement("div",{className:"osc-result-content"},React.createElement("div",{className:"osc-choices-container ".concat("osc-type-"+t.config.choices.type)},React.createElement("h3",{dangerouslySetInnerHTML:{__html:t.state.title}}),o),i,a,c,E)),u)}}])&&lt(t.prototype,n),r&&lt(t,r),i}(s.a);nt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(nt,{attributes:n,config:t}),e)},vt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(vt,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";(function(e){var r=n(44);function o(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function i(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function a(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])}function c(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]}function u(e,t){return[e[0]^t[0],e[1]^t[1]]}function s(e){return e=u(e,[0,e[0]>>>1]),e=u(e=i(e,[4283543511,3981806797]),[0,e[0]>>>1]),e=u(e=i(e,[3301882366,444984403]),[0,e[0]>>>1])}function l(e,t){t=t||0;var n,r=(e=e||"").length%16,l=e.length-r,f=[0,t],p=[0,t],d=[0,0],h=[0,0],m=[2277735313,289559509],v=[1291169091,658871167];for(n=0;n<l;n+=16)d=[255&e.charCodeAt(n+4)|(255&e.charCodeAt(n+5))<<8|(255&e.charCodeAt(n+6))<<16|(255&e.charCodeAt(n+7))<<24,255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24],h=[255&e.charCodeAt(n+12)|(255&e.charCodeAt(n+13))<<8|(255&e.charCodeAt(n+14))<<16|(255&e.charCodeAt(n+15))<<24,255&e.charCodeAt(n+8)|(255&e.charCodeAt(n+9))<<8|(255&e.charCodeAt(n+10))<<16|(255&e.charCodeAt(n+11))<<24],d=a(d=i(d,m),31),f=o(f=a(f=u(f,d=i(d,v)),27),p),f=o(i(f,[0,5]),[0,1390208809]),h=a(h=i(h,v),33),p=o(p=a(p=u(p,h=i(h,m)),31),f),p=o(i(p,[0,5]),[0,944331445]);switch(d=[0,0],h=[0,0],r){case 15:h=u(h,c([0,e.charCodeAt(n+14)],48));case 14:h=u(h,c([0,e.charCodeAt(n+13)],40));case 13:h=u(h,c([0,e.charCodeAt(n+12)],32));case 12:h=u(h,c([0,e.charCodeAt(n+11)],24));case 11:h=u(h,c([0,e.charCodeAt(n+10)],16));case 10:h=u(h,c([0,e.charCodeAt(n+9)],8));case 9:h=i(h=u(h,[0,e.charCodeAt(n+8)]),v),p=u(p,h=i(h=a(h,33),m));case 8:d=u(d,c([0,e.charCodeAt(n+7)],56));case 7:d=u(d,c([0,e.charCodeAt(n+6)],48));case 6:d=u(d,c([0,e.charCodeAt(n+5)],40));case 5:d=u(d,c([0,e.charCodeAt(n+4)],32));case 4:d=u(d,c([0,e.charCodeAt(n+3)],24));case 3:d=u(d,c([0,e.charCodeAt(n+2)],16));case 2:d=u(d,c([0,e.charCodeAt(n+1)],8));case 1:d=i(d=u(d,[0,e.charCodeAt(n)]),m),f=u(f,d=i(d=a(d,31),v))}return f=o(f=u(f,[0,e.length]),p=u(p,[0,e.length])),p=o(p,f),f=o(f=s(f),p=s(p)),p=o(p,f),("00000000"+(f[0]>>>0).toString(16)).slice(-8)+("00000000"+(f[1]>>>0).toString(16)).slice(-8)+("00000000"+(p[0]>>>0).toString(16)).slice(-8)+("00000000"+(p[1]>>>0).toString(16)).slice(-8)}var f=window;function p(e){return parseInt(e)}function d(e){return parseFloat(e)}function h(e){return e.reduce((function(e,t){return e+(t?1:0)}),0)}var m=window,v=navigator;document;function g(){return h(["MSCSSMatrix"in m,"msSetImmediate"in m,"msIndexedDB"in m,"msMaxTouchPoints"in v,"msPointerEnabled"in v])>=4}var y=window,E=document;function b(e,t,n){(function(e){return e&&"function"==typeof e.setValueAtTime})(t)&&t.setValueAtTime(n,e.currentTime)}function _(t){return new e((function(e,n){t.oncomplete=function(t){return e(t.renderedBuffer)};var r=3,o=function(){switch(t.startRendering(),t.state){case"running":setTimeout((function(){return n(I("timeout"))}),1e3);break;case"suspended":E.hidden||r--,r>0?setTimeout(o,500):n(I("suspended"))}};o()}))}function T(e){for(var t=0,n=4500;n<5e3;++n)t+=Math.abs(e[n]);return t}function I(e){var t=new Error(e);return t.name=e,t}var R=document,O=["monospace","sans-serif","serif"],w=["sans-serif-thin","ARNO PRO","Agency FB","Arabic Typesetting","Arial Unicode MS","AvantGarde Bk BT","BankGothic Md BT","Batang","Bitstream Vera Sans Mono","Calibri","Century","Century Gothic","Clarendon","EUROSTILE","Franklin Gothic","Futura Bk BT","Futura Md BT","GOTHAM","Gill Sans","HELV","Haettenschweiler","Helvetica Neue","Humanst521 BT","Leelawadee","Letter Gothic","Levenim MT","Lucida Bright","Lucida Sans","Menlo","MS Mincho","MS Outlook","MS Reference Specialty","MS UI Gothic","MT Extra","MYRIAD PRO","Marlett","Meiryo UI","Microsoft Uighur","Minion Pro","Monotype Corsiva","PMingLiU","Pristina","SCRIPTINA","Segoe UI Light","Serifa","SimHei","Small Fonts","Staccato222 BT","TRAJAN PRO","Univers CE 55 Medium","Vrinda","ZWAdobeF"],S={fontStyle:"normal",fontWeight:"normal",letterSpacing:"normal",lineBreak:"auto",lineHeight:"normal",textTransform:"none",textAlign:"left",textDecoration:"none",textShadow:"none",whiteSpace:"normal",wordBreak:"normal",wordSpacing:"normal",position:"absolute",left:"-9999px",fontSize:"48px"};function C(e){return e.toDataURL()}var A=navigator,P=window;var D=navigator;var L=window;var x=window;var N=window;var M=document;var G={osCpu:function(){return navigator.oscpu},languages:function(){var e=[],t=D.language||D.userLanguage||D.browserLanguage||D.systemLanguage;if(void 0!==t&&e.push([t]),Array.isArray(D.languages))h(["webkitPersistentStorage"in v,"webkitTemporaryStorage"in v,0===v.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in m,"BatteryManager"in m,"webkitMediaStream"in m,"webkitSpeechGrammar"in m])>=5&&h([!("MediaSettingsRange"in m),"RTCEncodedAudioFrame"in m,""+m.Intl=="[object Intl]",""+m.Reflect=="[object Reflect]"])>=3||e.push(D.languages);else if("string"==typeof D.languages){var n=D.languages;n&&e.push(n.split(","))}return e},colorDepth:function(){return window.screen.colorDepth},deviceMemory:function(){return e=d(navigator.deviceMemory),t=void 0,"number"==typeof e&&isNaN(e)?t:e;var e,t},screenResolution:function(){var e=[p(L.screen.width),p(L.screen.height)];return e.sort().reverse(),e},availableScreenResolution:function(){if(x.screen.availWidth&&x.screen.availHeight){var e=[p(x.screen.availWidth),p(x.screen.availHeight)];return e.sort().reverse(),e}},hardwareConcurrency:function(){try{var e=p(navigator.hardwareConcurrency);return isNaN(e)?1:e}catch(e){return 1}},timezoneOffset:function(){var e=(new Date).getFullYear();return Math.max(d(new Date(e,0,1).getTimezoneOffset()),d(new Date(e,6,1).getTimezoneOffset()))},timezone:function(){var e;if(null===(e=N.Intl)||void 0===e?void 0:e.DateTimeFormat)return(new N.Intl.DateTimeFormat).resolvedOptions().timeZone},sessionStorage:function(){try{return!!window.sessionStorage}catch(e){return!0}},localStorage:function(){try{return!!window.localStorage}catch(e){return!0}},indexedDB:function(){if(!(g()||h(["msWriteProfilerMark"in m,"MSStream"in m,"msLaunchUri"in v,"msSaveBlob"in v])>=3&&!g()))try{return!!window.indexedDB}catch(e){return!0}},openDatabase:function(){return!!window.openDatabase},cpuClass:function(){return navigator.cpuClass},platform:function(){return navigator.platform},plugins:function(){if(g())return[];if(navigator.plugins){for(var e=[],t=0;t<navigator.plugins.length;++t){var n=navigator.plugins[t];if(n){for(var r=[],o=0;o<n.length;++o){var i=n[o];r.push({type:i.type,suffixes:i.suffixes})}e.push({name:n.name,description:n.description,mimeTypes:r})}}return e}},canvas:function(){var e=function(){var e=document.createElement("canvas");return e.width=240,e.height=140,e.style.display="inline",[e,e.getContext("2d")]}(),t=e[0],n=e[1];if(!function(e,t){return!(!t||!e.toDataURL)}(t,n))return{winding:!1,data:""};n.rect(0,0,10,10),n.rect(2,2,6,6);var r=!n.isPointInPath(5,5,"evenodd");n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",n.font="11pt no-real-font-123";var o="Cwm fjordbank 😃 gly";return n.fillText(o,2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText(o,4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),{winding:r,data:C(t)}},touchSupport:function(){var e,t=0;void 0!==A.maxTouchPoints?t=p(A.maxTouchPoints):void 0!==A.msMaxTouchPoints&&(t=A.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return{maxTouchPoints:t,touchEvent:e,touchStart:"ontouchstart"in P}},fonts:function(){var e=R.body,t=R.createElement("div"),n=R.createElement("div"),r={},o={},i=function(){var e=R.createElement("span");e.textContent="mmMwWLliI0O&1";for(var t=0,n=Object.keys(S);t<n.length;t++){var r=n[t];e.style[r]=S[r]}return e},a=function(e){return O.some((function(t,n){return e[n].offsetWidth!==r[t]||e[n].offsetHeight!==o[t]}))},c=O.map((function(e){var n=i();return n.style.fontFamily=e,t.appendChild(n),n}));e.appendChild(t);for(var u=0,s=O.length;u<s;u++)r[O[u]]=c[u].offsetWidth,o[O[u]]=c[u].offsetHeight;var l=function(){for(var e={},t=function(t){e[t]=O.map((function(e){var r=function(e,t){var n=i();return n.style.fontFamily="'"+e+"',"+t,n}(t,e);return n.appendChild(r),r}))},r=0,o=w;r<o.length;r++){t(o[r])}return e}();e.appendChild(n);for(var f=[],p=0,d=w.length;p<d;p++)a(l[w[p]])&&f.push(w[p]);return e.removeChild(n),e.removeChild(t),f},audio:function(){return Object(r.b)(this,void 0,void 0,(function(){var e,t,n,o,i,a;return Object(r.c)(this,(function(r){switch(r.label){case 0:if(!(e=y.OfflineAudioContext||y.webkitOfflineAudioContext))return[2,-2];if(h(["ApplePayError"in m,"CSSPrimitiveValue"in m,"Counter"in m,0===v.vendor.indexOf("Apple"),"getStorageUpdates"in v,"WebKitMediaKeys"in m])>=4&&!(h(["safari"in m,!("DeviceMotionEvent"in m),!("ongestureend"in m),!("standalone"in v)])>=3)&&!(h(["DOMRectList"in m,"RTCPeerConnectionIceEvent"in m,"SVGGeometryElement"in m,"ontransitioncancel"in m])>=3))return[2,-1];t=new e(1,44100,44100),(n=t.createOscillator()).type="triangle",b(t,n.frequency,1e4),o=t.createDynamicsCompressor(),b(t,o.threshold,-50),b(t,o.knee,40),b(t,o.ratio,12),b(t,o.reduction,-20),b(t,o.attack,0),b(t,o.release,.25),n.connect(o),o.connect(t.destination),n.start(0),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,_(t)];case 2:return i=r.sent(),[3,5];case 3:if("timeout"===(a=r.sent()).name||"suspended"===a.name)return[2,-3];throw a;case 4:return n.disconnect(),o.disconnect(),[7];case 5:return[2,T(i.getChannelData(0))]}}))}))},pluginsSupport:function(){return void 0!==navigator.plugins},productSub:function(){return navigator.productSub},emptyEvalLength:function(){return eval.toString().length},errorFF:function(){try{throw"a"}catch(e){try{return e.toSource(),!0}catch(e){return!1}}},vendor:function(){return navigator.vendor},chrome:function(){return void 0!==window.chrome},cookiesEnabled:function(){try{M.cookie="cookietest=1; SameSite=Strict;";var e=-1!==M.cookie.indexOf("cookietest=");return M.cookie="cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT",e}catch(e){return!1}}};function k(){return function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,i,a,c,u,s,l,f,p;return Object(r.c)(this,(function(d){switch(d.label){case 0:o=Date.now(),i={},a=0,c=Object.keys(e),d.label=1;case 1:if(!(a<c.length))return[3,7];if(u=c[a],function(e,t){for(var n=0,r=e.length;n<r;++n)if(e[n]===t)return!0;return!1}(n,u))return[3,6];s=void 0,d.label=2;case 2:return d.trys.push([2,4,,5]),p={},[4,e[u](t)];case 3:return p.value=d.sent(),s=p,[3,5];case 4:return l=d.sent(),s=l&&"object"==typeof l&&"message"in l?{error:l}:{error:{message:l}},[3,5];case 5:f=Date.now(),i[u]=Object(r.a)(Object(r.a)({},s),{duration:f-o}),o=f,d.label=6;case 6:return a++,[3,1];case 7:return[2,i]}}))}))}(G,void 0,[])}function j(e){return JSON.stringify(e,(function(e,t){return t instanceof Error?(n=t,Object(r.a)({name:n.name,message:n.message,stack:null===(o=n.stack)||void 0===o?void 0:o.split("\n")},n)):t;var n,o}),2)}function q(e){return l(function(e){for(var t="",n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o],a=i.error?"error":JSON.stringify(i.value);t+=(t?"|":"")+o.replace(/([:|\\])/g,"\\$1")+":"+a}return t}(e))}var F=function(){function e(){}return e.prototype.get=function(e){return void 0===e&&(e={}),Object(r.b)(this,void 0,void 0,(function(){var t,n;return Object(r.c)(this,(function(r){switch(r.label){case 0:return[4,k()];case 1:return t=r.sent(),n=function(e){var t;return{components:e,get visitorId(){return void 0===t&&(t=q(this.components)),t},set visitorId(e){t=e}}}(t),e.debug&&console.log("Copy the text below to get the debug data:\n\n```\nversion: 3.0.5\nuserAgent: "+navigator.userAgent+"\ngetOptions: "+JSON.stringify(e,void 0,2)+"\nvisitorId: "+n.visitorId+"\ncomponents: "+j(t)+"\n```"),[2,n]}}))}))},e}();var U={load:function(t){var n=(void 0===t?{}:t).delayFallback,o=void 0===n?50:n;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.c)(this,(function(t){switch(t.label){case 0:return[4,(n=o,r=2*o,void 0===r&&(r=1/0),new e((function(e){f.requestIdleCallback?f.requestIdleCallback((function(){return e()}),{timeout:r}):setTimeout(e,Math.min(n,r))})))];case 1:return t.sent(),[2,new F]}var n,r}))}))},hashComponents:q,componentsToDebugString:j};t.a=U}).call(this,n(10))},,,function(e,t,n){n(136);var r=n(43);e.exports=r("Array","find")},,function(e,t,n){"use strict";var r=n(40),o=n(111).find,i=n(41),a=n(42),c="find",u=!0,s=a(c);c in[]&&Array(1).find((function(){u=!1})),r({target:"Array",proto:!0,forced:u||!s},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvc2Vzc2lvbi1zdG9yYWdlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi91c2VyL2dldC1qd3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3VzZXIvaGFzLXJvbGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2xvY2FsLXN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi9hcGkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2FwaS9nZXQtaGVhZGVycy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9nZXQtdXNlci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9sb2dvdXQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2lkZWFzLXNvcnQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3JlYWN0LXRlbXBsYXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9tZXJnZS9tZXJnZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvZGVmYXVsdC1pbnB1dC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9oaWRkZW4uanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvaW1hZ2UtdXBsb2FkLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2h0bWxhcmVhLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2lucHV0LXdpdGgtY291bnRlci5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9yYWRpb3MuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvcG9zdGNvZGUuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvc2VsZWN0LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L3RleHRpbnB1dC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC90ZXh0YXJlYS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9mb3JtLWZpZWxkLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2Zvcm0uanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvc2xpZGVyLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pbWFnZS9jb21wb25lbnQvaW1hZ2UuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9pbWFnZS9jb21wb25lbnQvaWRlYS1pbWFnZS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2ltYWdlL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudHJ5LXVuYmluZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvQGZpbmdlcnByaW50anMvZmluZ2VycHJpbnRqcy9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZpbGVwb25kL2Rpc3QvcmVhY3QtZmlsZXBvbmQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQtcGx1Z2luLWltYWdlLXByZXZpZXcvZGlzdC9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQtcGx1Z2luLWZpbGUtdmFsaWRhdGUtdHlwZS9kaXN0L2ZpbGVwb25kLXBsdWdpbi1maWxlLXZhbGlkYXRlLXR5cGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2ZpbGVwb25kLXBsdWdpbi1maWxlLXZhbGlkYXRlLXNpemUvZGlzdC9maWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS1zaXplLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9maWxlcG9uZC1wbHVnaW4tZmlsZS1wb3N0ZXIvZGlzdC9maWxlcG9uZC1wbHVnaW4tZmlsZS1wb3N0ZXIuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpZ2h0Ym94L2NvbXBvbmVudC9saWdodGJveC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL3ByZXZpb3VzLW5leHQtYnV0dG9uLWJsb2NrL2NvbXBvbmVudC9wcmV2aW91cy1uZXh0LWJ1dHRvbi1ibG9jay5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL3ByZXZpb3VzLW5leHQtYnV0dG9uLWJsb2NrL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlnaHRib3gvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2N1c3RvbS1ldmVudC1wb2x5ZmlsbC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvYXJyYXkvZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Nob2ljZXMtZ3VpZGUvY29tcG9uZW50L3F1ZXN0aW9uLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvcXVlc3Rpb24tZ3JvdXAuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9jaG9pY2VzLWd1aWRlL2NvbXBvbmVudC9jaG9pY2UuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9jaG9pY2VzLWd1aWRlL2NvbXBvbmVudC9jaG9pY2VzLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvZWRpdC9jaG9pY2UtZm9ybS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Nob2ljZXMtZ3VpZGUvY29tcG9uZW50L2VkaXQvY2hvaWNlcy1ndWlkZS1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvZWRpdC9xdWVzdGlvbi1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvZWRpdC9xdWVzdGlvbi1ncm91cC1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvZWRpdC9vdmVydmlldy5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Nob2ljZXMtZ3VpZGUvbGliL2ZldGNoLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9jaG9pY2VzLWd1aWRlL2NvbXBvbmVudC9lZGl0L2Zvcm0uanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9jaG9pY2VzLWd1aWRlL2NvbXBvbmVudC9jaG9pY2VzLWd1aWRlLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY2hvaWNlcy1ndWlkZS9jb21wb25lbnQvY2hvaWNlcy1ndWlkZS1yZXN1bHQuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9jaG9pY2VzLWd1aWRlL2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvQGZpbmdlcnByaW50anMvZmluZ2VycHJpbnRqcy9kaXN0L2ZwLmVzbS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lcy9hcnJheS9maW5kLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIndpbmRvdyIsIk9wZW5TdGFkQ29tcG9uZW50IiwicHJvcHMiLCJkZWZhdWx0Q29uZmlnIiwiZGVmYXVsdGRlZmF1bHRDb25maWciLCJzZWxmIiwiYXR0cmlidXRlcyIsImtleXMiLCJmb3JFYWNoIiwiYXR0cmlidXRlIiwiY29uZmlnIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwicHJvcHNDb25maWciLCJyZW1vdmVVbmRlZkFuZE51bGwiLCJtZXJnZSIsInJlY3Vyc2l2ZSIsInNpdGVJZCIsImFwaSIsInVybCIsImhlYWRlcnMiLCJpc1VzZXJMb2dnZWRJbiIsInVzZXIiLCJkaXZJZCIsImlkIiwicGFyc2VJbnQiLCJNYXRoIiwicmFuZG9tIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJvYmoiLCJvc2NTZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiand0IiwibWF0Y2giLCJsb2NhdGlvbiIsInNlYXJjaCIsInNldCIsImRvY3VtZW50IiwicmVwbGFjZSIsInJvbGVzIiwiYWRtaW4iLCJtb2RlcmF0b3IiLCJlZGl0b3IiLCJtZW1iZXIiLCJhbm9ueW1vdXMiLCJhbGwiLCJvd25lciIsIm9zY0xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIk9wZW5TdGFkQ29tcG9uZW50TGlicyIsImdldEhlYWRlcnMiLCJnZXRKV1QiLCJnZXRVc2VyIiwibmV4dCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJqc29uIiwibG9nb3V0IiwiaGFzUm9sZSIsInJlcXVpcmVkUm9sZSIsInVzZXJSb2xlIiwicm9sZSIsImluY2x1ZGVzIiwiaWRlYXNTb3J0IiwiaWRlYXMiLCJzb3J0T3JkZXIiLCJjZW50ZXIiLCJzb3J0IiwiYSIsImIiLCJ0aXRsZSIsInRvTG93ZXJDYXNlIiwicmFua2luZyIsInllcyIsIkRhdGUiLCJjcmVhdGVkQXQiLCJnZXRUaW1lIiwibGF0IiwibG5nIiwiY29vcmRpbmF0ZXMiLCJtYXAiLCJpZGVhIiwiX2Rpc3RhbmNlIiwic3FydCIsInBvdyIsImFyZ0NvdW50IiwicmVhY3RUZW1wbGF0ZSIsImh0bWwiLCJhcmdzIiwiYXJndW1lbnRzIiwibWF0Y2hlcyIsIlJlZ0V4cCIsImV4ZWMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImlzTm9kZSIsIlB1YmxpYyIsImNsb25lIiwibWVyZ2VfcmVjdXJzaXZlIiwiYmFzZSIsImV4dGVuZCIsInR5cGVPZiIsImFyZ3YiLCJyZXN1bHQiLCJzaXplIiwibGVuZ3RoIiwiaW5kZXgiLCJpdGVtIiwic2l0ZW0iLCJpbnB1dCIsInRvU3RyaW5nIiwic2xpY2UiLCJvdXRwdXQiLCJ0eXBlIiwiaXQiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJGdW5jdGlvbiIsIk9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IiwiY2hvaWNlcyIsInBsYWNlaG9sZGVyIiwiZGlzYWJsZWQiLCJyZXF1aXJlZCIsInN0YXRlIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJvbkNoYW5nZSIsInNob3dFcnJvcnMiLCJpc1ZhbGlkIiwidGhpcyIsInNldFN0YXRlIiwiZGF0YSIsInZhbGlkYXRlIiwiT3BlblN0YWRDb21wb25lbnRTZWxlY3QiLCJlIiwiaGFuZGxlT25DaGFuZ2UiLCJyZWYiLCJlbCIsInJlZ2lzdGVyUGx1Z2luIiwiRmlsZXBvbmRQbHVnaW5JbWFnZVByZXZpZXciLCJGaWxlcG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVR5cGUiLCJGaWxlcG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVNpemUiLCJGaWxlcG9uZFBsdWdpbkZpbGVQb3N0ZXIiLCJPcGVuU3RhZENvbXBvbmVudEltYWdlVXBsb2FkIiwiYWxsb3dNdWx0aXBsZSIsImltYWdlc2VydmVyIiwicHJvY2VzcyIsInVwbG9hZGVkRmlsZXMiLCJBcnJheSIsImlzQXJyYXkiLCJpbWFnZSIsInNyYyIsInB1c2giLCJzb3VyY2UiLCJvcHRpb25zIiwiZmlsZSIsIm1ldGFkYXRhIiwicG9zdGVyIiwiaW1hZ2V1cGxvYWRlciIsImdldEZpbGVzIiwic2VydmVySWQiLCJhZGRGaWxlIiwicmVtb3ZlRmlsZSIsImN1cnJlbnQiLCJmaWx0ZXIiLCJmaWxlSXRlbSIsImZpbGVzIiwiYXNKc29uIiwiYXMiLCJvbmluaXQiLCJpbml0Iiwib25wcm9jZXNzZmlsZSIsInVwZGF0ZVVwbG9hZGVkRmlsZXMiLCJ1cGRhdGVWYWx1ZSIsIm9ucmVtb3ZlZmlsZSIsInNlcnZlciIsImFjY2VwdGVkRmlsZVR5cGVzIiwiYWxsb3dGaWxlU2l6ZVZhbGlkYXRpb24iLCJhbGxvd1Jlb3JkZXIiLCJzdHlsZUl0ZW1QYW5lbEFzcGVjdFJhdGlvIiwibWF4RmlsZVNpemUiLCJtYXhGaWxlcyIsImFsbG93QnJvd3NlIiwiaW1hZ2VSZXNpemVUYXJnZXRXaWR0aCIsImltYWdlUmVzaXplVGFyZ2V0SGVpZ2h0IiwiaW1hZ2VDcm9wQXNwZWN0UmF0aW8iLCJsYWJlbElkbGUiLCJsYWJlbEludmFsaWRGaWVsZCIsImxhYmVsRmlsZVdhaXRpbmdGb3JTaXplIiwibGFiZWxGaWxlU2l6ZU5vdEF2YWlsYWJsZSIsImxhYmVsRmlsZUNvdW50U2luZ3VsYXIiLCJsYWJlbEZpbGVDb3VudFBsdXJhbCIsImxhYmVsRmlsZUxvYWRpbmciLCJsYWJlbEZpbGVBZGRlZCIsImxhYmVsRmlsZUxvYWRFcnJvciIsImxhYmVsRmlsZVJlbW92ZWQiLCJsYWJlbEZpbGVSZW1vdmVFcnJvciIsImxhYmVsRmlsZVByb2Nlc3NpbmciLCJsYWJlbEZpbGVQcm9jZXNzaW5nQ29tcGxldGUiLCJsYWJlbEZpbGVQcm9jZXNzaW5nQWJvcnRlZCIsImxhYmVsRmlsZVByb2Nlc3NpbmdFcnJvciIsImxhYmVsRmlsZVByb2Nlc3NpbmdSZXZlcnRFcnJvciIsImxhYmVsVGFwVG9DYW5jZWwiLCJsYWJlbFRhcFRvUmV0cnkiLCJsYWJlbFRhcFRvVW5kbyIsImxhYmVsQnV0dG9uUmVtb3ZlSXRlbSIsImxhYmVsQnV0dG9uQWJvcnRJdGVtTG9hZCIsImxhYmVsQnV0dG9uUmV0cnlJdGVtTG9hZCIsImxhYmVsQnV0dG9uQWJvcnRJdGVtUHJvY2Vzc2luZyIsImxhYmVsQnV0dG9uVW5kb0l0ZW1Qcm9jZXNzaW5nIiwibGFiZWxCdXR0b25SZXRyeUl0ZW1Qcm9jZXNzaW5nIiwibGFiZWxCdXR0b25Qcm9jZXNzSXRlbSIsIk9wZW5TdGFkQ29tcG9uZW50SFRNTEFyZWEiLCJvbktleVVweCIsImZpbHRlckhUTUwiLCJpbm5lckhUTUwiLCJjb21tYW5kIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJleGVjQ29tbWFuZCIsIm9uS2V5VXAiLCJvbkZvY3VzIiwib25CbHVyIiwiY2xhc3NOYW1lIiwib25Nb3VzZURvd24iLCJleGVjdXRlQWN0aW9uIiwicHJvbXB0IiwiY29udGVudEVkaXRhYmxlIiwiRm9ybWZpZWxkSW5wdXRXaXRoQ291bnRlciIsImlucHV0VHlwZSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImZvY3VzZWQiLCJ2YWx1ZUxlbmd0aCIsInVzZUtleSIsIm9uSW5wdXRGb2N1cyIsIm9uSW5wdXRCbHVyIiwib25JbnB1dEtleVVwIiwid2FybmluZyIsInNob3dXYXJuaW5nIiwiY291bnRlciIsImlucHV0SFRNTCIsImluc3RhbmNlIiwiT3BlblN0YWRDb21wb25lbnRSYWRpb3MiLCJlcnJvckhUTUwiLCJjaG9pY2UiLCJkYW5nZXJvdXNEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiT3BlblN0YWRDb21wb25lbnRQb3N0Y29kZSIsInRleHQiLCJPcGVuU3RhZENvbXBvbmVudFRleHQiLCJPcGVuU3RhZENvbXBvbmVudFRleHRBcmVhIiwiT3BlblN0YWRDb21wb25lbnRGb3JtRmllbGQiLCJ2YWxpZGF0ZUFjdGlvbiIsImNoYW5nZUFjdGlvbiIsImluaXRWYWx1ZSIsInRpdGxlSFRNTCIsImRlc2NyaXB0aW9uSFRNTCIsImZpZWxkSFRNTCIsIk9wZW5TdGFkQ29tcG9uZW50Rm9ybSIsImludHJvIiwiZmllbGRzIiwiaW5pdFZhbHVlcyIsInZhbHVlcyIsImZpZWxkQ29uZmlnIiwic2Nyb2xsVG8iLCJmaXJzdEludmFsaWQiLCJmaWVsZCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJpbnRyb0hUTUwiLCJmaWVsZHNIVE1MIiwiU2xpZGVyIiwidG91Y2hlZCIsImhhbmRsZUNoYW5nZSIsImV2ZW50IiwidGFyZ2V0IiwibWluIiwibWF4Iiwic3RlcCIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2FsY1Byb2dyZXNzIiwib25DbGljayIsImRvVG91Y2giLCJGb3JtIiwiRm9ybUZpZWxkIiwiSGlkZGVuIiwiSW1hZ2VVcGxvYWQiLCJJbnB1dFdpdGhDb3VudGVyIiwiUG9zdGNvZGUiLCJSYWRpb3MiLCJTZWxlY3QiLCJUZXh0IiwiVGV4dGFyZWEiLCJmYWlscyIsIlByb21pc2UiLCJzdXBwb3J0IiwiQmxvYiIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImluZGV4T2YiLCJub3JtYWxpemVOYW1lIiwiU3RyaW5nIiwidGVzdCIsIlR5cGVFcnJvciIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwic2hpZnQiLCJkb25lIiwiSGVhZGVycyIsImFwcGVuZCIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsInJlamVjdCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlc29sdmUiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJhcnJheUJ1ZmZlciIsInJlYWRBc1RleHQiLCJjaGFycyIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJmb3JtRGF0YSIsImRlY29kZSIsIm9sZFZhbHVlIiwiaGFzIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwiZW50cmllcyIsIm1ldGhvZHMiLCJSZXF1ZXN0IiwibWV0aG9kIiwidXBjYXNlZCIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsIkRPTUV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJzdGFjayIsImNvbnN0cnVjdG9yIiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJERVNDUklQVE9SUyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiaXNPYmplY3QiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImciLCJPcGVuU3RhZENvbXBvbmVudEltYWdlIiwiYXNwZWN0UmF0aW8iLCJhbGxvd011bHRpcGxlSW1hZ2VzIiwiY3VycmVudEltYWdlSW5kZXgiLCJ3aWR0aCIsImVsZW0iLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50Tm9kZSIsIm9mZnNldFdpZHRoIiwid2hpY2giLCJpbWFnZXMiLCJpbWFnZVNyYyIsImhlaWdodCIsImdldEFzcGVjdFJhdGlvRmFjdG9yIiwiZ2V0SW1hZ2VzRnJvbVByb3BzIiwiZ2V0V2lkdGhIZWlnaHQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJnZXRJbWFnZVNyYyIsInRodW1iIiwidGh1bWJoZWlnaHQiLCJ0aHVtYndpZHRoIiwidGh1bWJsZWZ0IiwibGVmdCIsInpJbmRleCIsInNldEN1cnJlbnRJbWFnZUluZGV4IiwiT3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UiLCJleHRyYURhdGEiLCJwb3N0ZXJJbWFnZSIsInJlbmRlckVsZW1lbnQiLCJSZWFjdERPTSIsInJlbmRlciIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwiY3JlYXRlRWxlbWVudCIsIkVYSVNUUyIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJzZXRHbG9iYWwiLCJTSEFSRUQiLCJzaGFyZWQiLCJ1aWQiLCJJU19QVVJFIiwidmVyc2lvbiIsImNvcHlyaWdodCIsInBvc3RmaXgiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJoaWRkZW5LZXlzIiwibmFtZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJjZWlsIiwiZmxvb3IiLCJhcmd1bWVudCIsImlzTmFOIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicmVkZWZpbmUiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInNoYW0iLCJ3ZWxsS25vd25TeW1ib2wiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiY2FjaGUiLCJ0aHJvd2VyIiwiTUVUSE9EX05BTUUiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJDT05TVFJVQ1RPUiIsIk1FVEhPRCIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXBwbHkiLCJfX2F3YWl0ZXIiLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwiX19nZW5lcmF0b3IiLCJ5IiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidiIsIm9wIiwicG9wIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9JbnRlZ2VyIiwidGhhdCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJmYWN0b3J5IiwiaXNGdW5jdGlvbiIsIngiLCJsZW4iLCJ2ZXJ0eE5leHQiLCJjdXN0b21TY2hlZHVsZXJGbiIsImFzYXAiLCJhcmciLCJxdWV1ZSIsImZsdXNoIiwic2NoZWR1bGVGbHVzaCIsImJyb3dzZXJXaW5kb3ciLCJicm93c2VyR2xvYmFsIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzV29ya2VyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJpbXBvcnRTY3JpcHRzIiwiTWVzc2FnZUNoYW5uZWwiLCJ1c2VTZXRUaW1lb3V0IiwiZ2xvYmFsU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJjaGFubmVsIiwiaXRlcmF0aW9ucyIsIm9ic2VydmVyIiwibm9kZSIsIm9uRnVsZmlsbG1lbnQiLCJvblJlamVjdGlvbiIsInBhcmVudCIsImNoaWxkIiwibm9vcCIsIlBST01JU0VfSUQiLCJtYWtlUHJvbWlzZSIsIl9zdGF0ZSIsImludm9rZUNhbGxiYWNrIiwiX3Jlc3VsdCIsInN1YnNjcmliZSIsIl9yZXNvbHZlIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwidmVydHgiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJhdHRlbXB0VmVydHgiLCJzdWJzdHJpbmciLCJQRU5ESU5HIiwiR0VUX1RIRU5fRVJST1IiLCJFcnJvck9iamVjdCIsImdldFRoZW4iLCJoYW5kbGVNYXliZVRoZW5hYmxlIiwibWF5YmVUaGVuYWJsZSIsInRoZW4kJCIsInRoZW5hYmxlIiwiZnVsZmlsbCIsIl9yZWplY3QiLCJyZWFzb24iLCJoYW5kbGVPd25UaGVuYWJsZSIsInNlYWxlZCIsImZ1bGZpbGxtZW50SGFuZGxlciIsInJlamVjdGlvbkhhbmRsZXIiLCJ0cnlUaGVuIiwiX2xhYmVsIiwiaGFuZGxlRm9yZWlnblRoZW5hYmxlIiwicHVibGlzaFJlamVjdGlvbiIsIl9vbmVycm9yIiwicHVibGlzaCIsIl9zdWJzY3JpYmVycyIsInN1YnNjcmliZXJzIiwic2V0dGxlZCIsImRldGFpbCIsIlRSWV9DQVRDSF9FUlJPUiIsImhhc0NhbGxiYWNrIiwic3VjY2VlZGVkIiwiZmFpbGVkIiwidHJ5Q2F0Y2giLCJFbnVtZXJhdG9yIiwiQ29uc3RydWN0b3IiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsIl9pbnB1dCIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwicmVzb2x2ZXIiLCJuZWVkc1Jlc29sdmVyIiwiaW5pdGlhbGl6ZVByb21pc2UiLCJuZWVkc05ldyIsImxvY2FsIiwicHJvbWlzZVRvU3RyaW5nIiwiY2FzdCIsIl9lYWNoRW50cnkiLCJlbnRyeSIsInJlc29sdmUkJCIsIl90aGVuIiwiX3NldHRsZWRBdCIsIl93aWxsU2V0dGxlQXQiLCJlbnVtZXJhdG9yIiwicmFjZSIsIl9zZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwiX3NldEFzYXAiLCJhc2FwRm4iLCJfYXNhcCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsImJyb3dzZXIiLCJlbnYiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiRmlsZVBvbmQiLCJGaWxlU3RhdHVzIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdCIsIl9yZWFjdDIiLCJkZWZhdWx0IiwiX2ZpbGVwb25kIiwiaXNTdXBwb3J0ZWQiLCJzdXBwb3J0ZWQiLCJmaWx0ZXJlZE1ldGhvZHMiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJhbGxvd0ZpbGVzU3luYyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiX3RoaXMyIiwib251cGRhdGVmaWxlcyIsImNiIiwiX3BvbmQiLCJfZWxlbWVudCIsImRlc3Ryb3kiLCJzZXRPcHRpb25zIiwiX3RoaXMzIiwiX3Byb3BzIiwiY2FwdHVyZU1ldGhvZCIsImFjY2VwdCIsIm11bHRpcGxlIiwiY2FwdHVyZSIsImVsZW1lbnQiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwiVFlQRSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRCdWlsdEluIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImludGVybmFsT2JqZWN0S2V5cyIsImludGVnZXIiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsImFjdGl2ZVhEb2N1bWVudCIsImVudW1CdWdLZXlzIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIkYiLCJQcm9wZXJ0aWVzIiwib2JqZWN0S2V5cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJlbnRyeVVuYmluZCIsIiQiLCIkaW5jbHVkZXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwicHJvdG8iLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsImlzUHJldmlld2FibGVJbWFnZSIsIl9Bd2FpdFZhbHVlIiwid3JhcHBlZCIsIl9Bc3luY0dlbmVyYXRvciIsImdlbiIsImZyb250IiwiYmFjayIsInJlc3VtZSIsIndyYXBwZWRBd2FpdCIsInNldHRsZSIsIl9pbnZva2UiLCJyZXR1cm4iLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsImFzeW5jSXRlcmF0b3IiLCJ0aHJvdyIsInZlY3Rvck11bHRpcGx5IiwiYW1vdW50IiwiY3JlYXRlVmVjdG9yIiwidmVjdG9yQWRkIiwidmVjdG9yTm9ybWFsaXplIiwidmVjdG9yUm90YXRlIiwicmFkaWFucyIsIm9yaWdpbiIsImNvcyIsInNpbiIsImdldE1hcmt1cFZhbHVlIiwic2NhbGFyIiwiYXhpcyIsInBhcnNlRmxvYXQiLCJnZXRNYXJrdXBTdHlsZXMiLCJtYXJrdXAiLCJzY2FsZSIsImxpbmVTdHlsZSIsImJvcmRlclN0eWxlIiwiZmlsbCIsImJhY2tncm91bmRDb2xvciIsImZvbnRDb2xvciIsInN0cm9rZSIsImJvcmRlckNvbG9yIiwibGluZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJib3JkZXJXaWR0aCIsImxpbmVXaWR0aCIsImxpbmVDYXAiLCJsaW5lSm9pbiIsIm9wYWNpdHkiLCJpc0RlZmluZWQiLCJnZXRNYXJrdXBSZWN0IiwicmVjdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwicG9pbnRzVG9QYXRoU2hhcGUiLCJwb2ludHMiLCJwb2ludCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwic3ZnIiwidGFnIiwiY3JlYXRlRWxlbWVudE5TIiwidXBkYXRlUmVjdCIsInN0eWxlcyIsInVwZGF0ZUVsbGlwc2UiLCJjeCIsImN5IiwicngiLCJyeSIsIklNQUdFX0ZJVF9TVFlMRSIsImNvbnRhaW4iLCJjb3ZlciIsInVwZGF0ZUltYWdlIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsImZpdCIsIlRFWFRfQU5DSE9SIiwidXBkYXRlVGV4dCIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJ0ZXh0Q29udGVudCIsInVwZGF0ZUxpbmUiLCJjaGlsZE5vZGVzIiwiYmVnaW4iLCJlbmQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImxpbmVEZWNvcmF0aW9uIiwiYXJyb3dCZWdpblJvdGF0aW9uUG9pbnQiLCJhcnJvd0JlZ2luQ2VudGVyIiwiYXJyb3dCZWdpbkEiLCJhcnJvd0JlZ2luQiIsImFycm93RW5kUm90YXRpb25Qb2ludCIsImFycm93RW5kQ2VudGVyIiwiYXJyb3dFbmRBIiwiYXJyb3dFbmRCIiwidXBkYXRlUGF0aCIsImNyZWF0ZVNoYXBlIiwiY3JlYXRlTGluZSIsInNoYXBlIiwiQ1JFQVRFX1RZUEVfUk9VVEVTIiwic2V0QXR0cmlidXRlTlMiLCJlbGxpcHNlIiwiVVBEQVRFX1RZUEVfUk9VVEVTIiwiY3JlYXRlTWFya3VwQnlUeXBlIiwidXBkYXRlTWFya3VwQnlUeXBlIiwiTUFSS1VQX1JFQ1QiLCJ0b09wdGlvbmFsRnJhY3Rpb24iLCJwcmVwYXJlTWFya3VwIiwiX21hcmt1cCIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwic29ydE1hcmt1cEJ5WkluZGV4IiwiY3JlYXRlTWFya3VwVmlldyIsInV0aWxzIiwiY3JlYXRlVmlldyIsImlnbm9yZVJlY3QiLCJtaXhpbnMiLCJhcGlzIiwiX3JlZiIsInJvb3QiLCJkaXJ0eSIsImNyb3AiLCJyZXNpemUiLCJ2aWV3V2lkdGgiLCJ2aWV3SGVpZ2h0IiwiY3JvcFdpZHRoIiwiY3JvcEhlaWdodCIsIl9zaXplIiwib3V0cHV0V2lkdGgiLCJvdXRwdXRIZWlnaHQiLCJvdXRwdXRGaXQiLCJvdXRwdXRVcHNjYWxlIiwidXBzY2FsZSIsInNob3VsZFVwc2NhbGUiLCJzY2FsYXJXaWR0aCIsInNjYWxhckhlaWdodCIsIm1hcmt1cEZpbHRlciIsInF1ZXJ5Iiwic2V0dGluZ3MiLCJjcmVhdGVWZWN0b3IkMSIsInZlY3RvckRvdCIsInZlY3RvclN1YnRyYWN0IiwidmVjdG9yRGlzdGFuY2VTcXVhcmVkIiwidmVjdG9yRGlzdGFuY2UiLCJnZXRPZmZzZXRQb2ludE9uRWRnZSIsInJvdGF0aW9uIiwiQSIsIkIiLCJDIiwic2luQSIsInNpbkIiLCJzaW5DIiwiY29zQyIsInJhdGlvIiwiZ2V0Um90YXRlZFJlY3RTaXplIiwidyIsImgiLCJob3IiLCJ2ZXIiLCJ0bCIsImFicyIsInRyIiwiYmwiLCJjYWxjdWxhdGVDYW52YXNTaXplIiwiY2FudmFzQXNwZWN0UmF0aW8iLCJ6b29tIiwiaW1hZ2VBc3BlY3RSYXRpbyIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCJnZXRJbWFnZVJlY3Rab29tRmFjdG9yIiwiaW1hZ2VSZWN0IiwiY3JvcFJlY3QiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJyb3RhdGVkQ3JvcFNpemUiLCJnZXRDZW50ZXJlZENyb3BSZWN0IiwiY29udGFpbmVyIiwiZ2V0Q3VycmVudENyb3BTaXplIiwiaW1hZ2VTaXplIiwiY2FudmFzU2l6ZSIsImNhbnZhc0NlbnRlciIsInN0YWdlIiwic2hvdWxkTGltaXQiLCJzY2FsZVRvRml0Iiwid2lkdGhGbG9hdCIsImhlaWdodEZsb2F0Iiwicm91bmQiLCJJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMiLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwibWFzcyIsImNyZWF0ZUJpdG1hcFZpZXciLCJjcmVhdGVJbWFnZUNhbnZhc1dyYXBwZXIiLCJhbmltYXRpb25zIiwib3JpZ2luWCIsIm9yaWdpblkiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZVoiLCJfcmVmMiIsImFwcGVuZENoaWxkVmlldyIsImNyZWF0ZUNoaWxkVmlldyIsIl9yZWYzIiwiZmxpcCIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImNyZWF0ZUNsaXBWaWV3IiwiZHVyYXRpb24iLCJkaWRXcml0ZVZpZXciLCJfcmVmNCIsImJhY2tncm91bmQiLCJfcmVmNSIsImNyZWF0ZU1hcmt1cCIsImRlc3Ryb3lNYXJrdXAiLCJyZW1vdmVDaGlsZFZpZXciLCJ0cmFuc3BhcmVuY3lJbmRpY2F0b3IiLCJkYXRhc2V0IiwiX3JlZjYiLCJzaG91bGRPcHRpbWl6ZSIsInRyYW5zbGF0aW9uIiwiUEkiLCJjcm9wQXNwZWN0UmF0aW8iLCJzdGFnZVpvb21GYWN0b3IiLCJpbWFnZVZpZXciLCJjcmVhdGVJbWFnZVZpZXciLCJfcmVmNyIsImNsaXAiLCJfcmVmOCIsImhpZGRlbiIsImNvbnRhaW5lcldpZHRoIiwiaW5uZXIiLCJjb250YWluZXJIZWlnaHQiLCJmaXhlZFByZXZpZXdIZWlnaHQiLCJtaW5QcmV2aWV3SGVpZ2h0IiwibWF4UHJldmlld0hlaWdodCIsInBhbmVsQXNwZWN0UmF0aW8iLCJjbGlwSGVpZ2h0IiwiY2xpcFdpZHRoIiwiU1ZHX01BU0siLCJjaGVja2VkTXlCYXNlcyIsIlNWR01hc2tVbmlxdWVJZCIsImNyZWF0ZUltYWdlT3ZlcmxheVZpZXciLCJmcEFQSSIsImhyZWYiLCJoYXNoIiwiY2xhc3NMaXN0IiwiYWRkIiwiQml0bWFwV29ya2VyIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJDb2xvck1hdHJpeFdvcmtlciIsImltYWdlRGF0YSIsIm1hdHJpeCIsImNvbG9yTWF0cml4IiwibTExIiwibTEyIiwibTEzIiwibTE0IiwibTE1IiwibTIxIiwibTIyIiwibTIzIiwibTI0IiwibTI1IiwibTMxIiwibTMyIiwibTMzIiwibTM0IiwibTM1IiwibTQxIiwibTQyIiwibTQzIiwibTQ0IiwibTQ1IiwiZ2V0SW1hZ2VTaXplIiwiSW1hZ2UiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwidHJhbnNmb3JtcyIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCJmaXhJbWFnZU9yaWVudGF0aW9uIiwiY3R4Iiwib3JpZW50YXRpb24iLCJjcmVhdGVQcmV2aWV3SW1hZ2UiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiaXNCaXRtYXAiLCJNQVhfV0lEVEgiLCJNQVhfSEVJR0hUIiwiY2FsY3VsYXRlQXZlcmFnZUNvbG9yIiwiZ2V0SW1hZ2VEYXRhIiwiYXZlcmFnZUNvbG9yIiwiY2xvbmVDYW52YXMiLCJjbG9uZUltYWdlRGF0YSIsIkltYWdlRGF0YSIsImNyZWF0ZUltYWdlRGF0YSIsImxvYWRJbWFnZSIsImltZyIsImNyb3NzT3JpZ2luIiwiY3JlYXRlSW1hZ2VXcmFwcGVyVmlldyIsIk92ZXJsYXlWaWV3IiwiSW1hZ2VWaWV3IiwiY3JlYXRlV29ya2VyIiwiYXBwbHlGaWx0ZXIiLCJwdXRJbWFnZURhdGEiLCJ3b3JrZXIiLCJwb3N0IiwidGVybWluYXRlIiwicmVtb3ZlSW1hZ2VWaWV3IiwiX2Rlc3Ryb3kiLCJzaGlmdEltYWdlIiwiaW1hZ2VWaWV3QmluIiwicHVzaEltYWdlIiwiZ2V0TWV0YWRhdGEiLCJjaGlsZFZpZXdzIiwiZGlzcGF0Y2giLCJkaWRVcGRhdGVJdGVtTWV0YWRhdGEiLCJhY3Rpb24iLCJjaGFuZ2UiLCJfaW1hZ2VWaWV3IiwiY2FuQ3JlYXRlSW1hZ2VCaXRtYXAiLCJpc0ZpcmVmb3giLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkaWRDcmVhdGVQcmV2aWV3Q29udGFpbmVyIiwiZmlsZVVSTCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImRyYXdQcmV2aWV3IiwibG9hZFByZXZpZXdGYWxsYmFjayIsInByZXZpZXdJbWFnZUxvYWRlZCIsInJldm9rZU9iamVjdFVSTCIsInBpeGVsRGVuc2l0eUZhY3RvciIsImRldmljZVBpeGVsUmF0aW8iLCJzY2FsZUZhY3RvciIsInByZXZpZXdJbWFnZVJhdGlvIiwicHJldmlld0NvbnRhaW5lcldpZHRoIiwicHJldmlld0NvbnRhaW5lckhlaWdodCIsInByZXZpZXdJbWFnZSIsInNldE1ldGFkYXRhIiwib3ZlcmxheVNoYWRvdyIsImltYWdlQml0bWFwIiwiZGlkRHJhd1ByZXZpZXciLCJyZXN0b3JlT3ZlcmxheSIsIl9yZWY5Iiwib3ZlcmxheUVycm9yIiwib3ZlcmxheVN1Y2Nlc3MiLCJkaWRUaHJvd0Vycm9yIiwiX3JlZjEwIiwiZGlkQ29tcGxldGVQcm9jZXNzaW5nIiwiX3JlZjExIiwiX3JlZjEyIiwiX3JlZjEzIiwiX3JlZjE0IiwiY3JlYXRlUm91dGUiLCJESURfSU1BR0VfUFJFVklFV19EUkFXIiwiRElEX0lNQUdFX1BSRVZJRVdfQ09OVEFJTkVSX0NSRUFURSIsIkRJRF9GSU5JU0hfQ0FMQ1VMQVRFX1BSRVZJRVdTSVpFIiwiRElEX1VQREFURV9JVEVNX01FVEFEQVRBIiwiRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUiIsIkRJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfRVJST1IiLCJESURfVEhST1dfSVRFTV9JTlZBTElEIiwiRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORyIsIkRJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkciLCJESURfUkVWRVJUX0lURU1fUFJPQ0VTU0lORyIsIl9yZWYxNSIsInZpZXdzVG9SZW1vdmUiLCJwbHVnaW4iLCJhZGRGaWx0ZXIiLCJUeXBlIiwiaXNGaWxlIiwiaW1hZ2VQcmV2aWV3VmlldyIsInZpZXdBUEkiLCJpcyIsImRpZExvYWRJdGVtIiwiYXJjaGl2ZWQiLCJzdXBwb3J0c0NyZWF0ZUltYWdlQml0bWFwIiwibWF4UHJldmlld0ZpbGVTaXplIiwiaW1hZ2VQcmV2aWV3IiwicmVzY2FsZUl0ZW0iLCJpdGVtUGFuZWxBc3BlY3RSYXRpbyIsImZpeGVkSGVpZ2h0IiwiX3Jvb3QkcmVmIiwicHJldmlld0FzcGVjdFJhdGlvIiwicHJldmlld0hlaWdodE1heCIsIml0ZW1XaWR0aCIsInByZXZpZXdIZWlnaHQiLCJkaWRSZXNpemVWaWV3Iiwic2hvdWxkUmVzY2FsZSIsImRpZENhbGN1bGF0ZVByZXZpZXdTaXplIiwic2hvdWxkRHJhd1ByZXZpZXciLCJyZWdpc3RlcldyaXRlciIsIkRJRF9SRVNJWkVfUk9PVCIsIkRJRF9TVE9QX1JFU0laRSIsIkRJRF9MT0FEX0lURU0iLCJESURfSU1BR0VfUFJFVklFV19DQUxDVUxBVEVfU0laRSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFsbG93SW1hZ2VQcmV2aWV3IiwiQk9PTEVBTiIsImltYWdlUHJldmlld0ZpbHRlckl0ZW0iLCJGVU5DVElPTiIsImltYWdlUHJldmlld0hlaWdodCIsIklOVCIsImltYWdlUHJldmlld01pbkhlaWdodCIsImltYWdlUHJldmlld01heEhlaWdodCIsImltYWdlUHJldmlld01heEZpbGVTaXplIiwiaW1hZ2VQcmV2aWV3Wm9vbUZhY3RvciIsImltYWdlUHJldmlld1Vwc2NhbGUiLCJpbWFnZVByZXZpZXdNYXhJbnN0YW50UHJldmlld0ZpbGVTaXplIiwiaW1hZ2VQcmV2aWV3VHJhbnNwYXJlbmN5SW5kaWNhdG9yIiwiU1RSSU5HIiwiaW1hZ2VQcmV2aWV3Q2FsY3VsYXRlQXZlcmFnZUltYWdlQ29sb3IiLCJpbWFnZVByZXZpZXdNYXJrdXBTaG93IiwiaW1hZ2VQcmV2aWV3TWFya3VwRmlsdGVyIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiaXNTdHJpbmciLCJyZXBsYWNlSW5TdHJpbmciLCJndWVzc3RpbWF0ZU1pbWVUeXBlIiwiZ2V0RXh0ZW5zaW9uRnJvbUZpbGVuYW1lIiwiZ2V0RmlsZW5hbWVGcm9tVVJMIiwibWltZVR5cGVNYXRjaGVzV2lsZENhcmQiLCJtaW1lVHlwZSIsIndpbGRjYXJkIiwiaXNWYWxpZE1pbWVUeXBlIiwiYWNjZXB0ZWRUeXBlcyIsInVzZXJJbnB1dFR5cGUiLCJzb21lIiwiYWNjZXB0ZWRUeXBlIiwiZ2V0SXRlbVR5cGUiLCJmaWxlbmFtZSIsImV4dGVuc2lvbiIsInZhbGlkYXRlRmlsZSIsInR5cGVEZXRlY3RvciIsImRldGVjdGVkVHlwZSIsImNhdGNoIiwiYXBwbHlNaW1lVHlwZU1hcCIsImFjY2VwdGVkRmlsZVR5cGUiLCJ2YWxpZGF0aW9uUmVzdWx0IiwiaGFuZGxlUmVqZWN0aW9uIiwiYWNjZXB0ZWRGaWxlVHlwZXNNYXBwZWQiLCJtYWluIiwic3ViIiwiYWxsVHlwZXMiLCJhbGxCdXRMYXN0VHlwZSIsImxhc3RUeXBlIiwiYWxsb3dGaWxlVHlwZVZhbGlkYXRpb24iLCJBUlJBWSIsImxhYmVsRmlsZVR5cGVOb3RBbGxvd2VkIiwiZmlsZVZhbGlkYXRlVHlwZUxhYmVsRXhwZWN0ZWRUeXBlcyIsImZpbGVWYWxpZGF0ZVR5cGVMYWJlbEV4cGVjdGVkVHlwZXNNYXAiLCJPQkpFQ1QiLCJmaWxlVmFsaWRhdGVUeXBlRGV0ZWN0VHlwZSIsInRvTmF0dXJhbEZpbGVTaXplIiwic2l6ZU1heCIsInNpemVNaW4iLCJmaWxlRmlsdGVyIiwiZmlsZXNpemUiLCJ0b3RhbFNpemVNYXgiLCJ0b3RhbCIsImZpbGVTaXplIiwibWluRmlsZVNpemUiLCJtYXhUb3RhbEZpbGVTaXplIiwiZmlsZVZhbGlkYXRlU2l6ZUZpbHRlciIsImxhYmVsTWluRmlsZVNpemVFeGNlZWRlZCIsImxhYmVsTWluRmlsZVNpemUiLCJsYWJlbE1heEZpbGVTaXplRXhjZWVkZWQiLCJsYWJlbE1heEZpbGVTaXplIiwibGFiZWxNYXhUb3RhbEZpbGVTaXplRXhjZWVkZWQiLCJsYWJlbE1heFRvdGFsRmlsZVNpemUiLCJjcmVhdGVQb3N0ZXJWaWV3IiwiRElEX0ZJTEVfUE9TVEVSX0xPQUQiLCJhcHBseVRlbXBsYXRlIiwiY3JlYXRlUG9zdGVyT3ZlcmxheVZpZXciLCJ0ZW1wbGF0ZSIsImVhc2VJbk91dFNpbmUiLCJhZGRHcmFkaWVudFN0ZXBzIiwiZ3JhZGllbnQiLCJjb2xvciIsImFscGhhIiwiZWFzZUZuIiwic3RlcHMiLCJvZmZzZXQiLCJyYW5nZSIsInJnYiIsInN0b3AiLCJhZGRDb2xvclN0b3AiLCJkcmF3VGVtcGxhdGUiLCJhbHBoYVRhcmdldCIsImhvcml6b250YWxDZW50ZXIiLCJncmFkIiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJzYXZlIiwidHJhbnNsYXRlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwiaGFzTmF2aWdhdG9yIiwib3ZlcmxheVRlbXBsYXRlU2hhZG93Iiwib3ZlcmxheVRlbXBsYXRlRXJyb3IiLCJvdmVybGF5VGVtcGxhdGVTdWNjZXNzIiwiY3Jvc3NPcmlnaW5WYWx1ZSIsImNyZWF0ZVBvc3RlcldyYXBwZXJWaWV3Iiwib3ZlcmxheSIsImRpZExvYWRQcmV2aWV3IiwiRElEX0ZJTEVfUE9TVEVSX0RSQVciLCJESURfRklMRV9QT1NURVJfQ09OVEFJTkVSX0NSRUFURSIsImZpbGVQb3N0ZXJWaWV3IiwidXBkYXRlSXRlbVBvc3RlciIsImZpbGVQb3N0ZXIiLCJzaG91bGRVcGRhdGVQYW5lbEhlaWdodCIsImdldFBvc3RlckhlaWdodCIsImZpeGVkUG9zdGVySGVpZ2h0IiwibWluUG9zdGVySGVpZ2h0IiwibWF4UG9zdGVySGVpZ2h0IiwiRElEX0ZJTEVfUE9TVEVSX0NBTENVTEFURV9TSVpFIiwiYWxsb3dGaWxlUG9zdGVyIiwiZmlsZVBvc3RlckhlaWdodCIsImZpbGVQb3N0ZXJNaW5IZWlnaHQiLCJmaWxlUG9zdGVyTWF4SGVpZ2h0IiwiZmlsZVBvc3RlckZpbHRlckl0ZW0iLCJmaWxlUG9zdGVyQ2FsY3VsYXRlQXZlcmFnZUltYWdlQ29sb3IiLCJmaWxlUG9zdGVyQ3Jvc3NPcmlnaW5BdHRyaWJ1dGVWYWx1ZSIsIk9wZW5TdGFkQ29tcG9uZW50TGlnaHRib3giLCJzdGFydEluZGV4IiwicmVjYWxjU2l6ZXMiLCJzaG93TGlnaHRCb3hMaXN0ZW5lciIsInNob3dMaWdodGJveCIsImV2YWwiLCJtYWluSW1hZ2UiLCJtYWluQ29udGFpbmVyIiwibWFpbldpZHRoIiwibWFpbkhlaWdodCIsIm9mZnNldEhlaWdodCIsIm1haW5JbWFnZUNvbnRhaW5lciIsIm5hdkltZ1dpZHRoIiwibmF2aWdhdGlvbkNvbnRhaW5lciIsImhpZGVMaWdodGJveCIsInNob3dJbWFnZSIsIk9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2siLCJwcmV2aW91c0J1dHRvbkhUTUwiLCJuZXh0QnV0dG9uSFRNTCIsInByZXZpb3VzQWN0aW9uIiwicHJldmlvdXNVcmwiLCJwcmV2aW91c0lzRGlzYWJsZWQiLCJwcmV2aW91c0xhYmVsIiwibmV4dEFjdGlvbiIsIm5leHRVcmwiLCJuZXh0SXNEaXNhYmxlZCIsIm5leHRMYWJlbCIsIkhUTUxFbGVtZW50IiwiY3JlYXRlU3RvcmUiLCJpbml0aWFsU3RhdGUiLCJxdWVyaWVzIiwiYWN0aW9ucyIsImFjdGlvblF1ZXVlIiwiZGlzcGF0Y2hRdWV1ZSIsInByb2Nlc3NEaXNwYXRjaFF1ZXVlIiwiaXNCbG9ja2luZyIsImFjdGlvbkhhbmRsZXJzIiwic3RyIiwiX3F1ZXJ5SGFuZGxlcyIsIl9sZW4iLCJfa2V5IiwicXVlcnlIYW5kbGVzIiwiZ2V0U3RhdGUiLCJwcm9jZXNzQWN0aW9uUXVldWUiLCJkZWZpbml0aW9uIiwiZm9yaW4iLCJjcmVhdGVPYmplY3QiLCJnZXRBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJzdmdFbGVtZW50cyIsImlzU1ZHRWxlbWVudCIsImluc2VydEJlZm9yZSIsInNwbGljZSIsInJlbW92ZUNoaWxkIiwiSVNfQlJPV1NFUiIsImlzQnJvd3NlciIsImdldENoaWxkQ291bnQiLCJnZXRWaWV3UmVjdCIsImVsZW1lbnRSZWN0Iiwib3V0ZXIiLCJjaGlsZFZpZXciLCJpc1JlY3RJZ25vcmVkIiwiY2hpbGRWaWV3UmVjdCIsImV4cGFuZFJlY3QiLCJjYWxjdWxhdGVSZWN0U2l6ZSIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiaXNOdW1iZXIiLCJ0aGVyZVlldCIsInBvc2l0aW9uIiwiZGVzdGluYXRpb24iLCJ2ZWxvY2l0eSIsImVycm9yTWFyZ2luIiwiZWFzZUluT3V0UXVhZCIsImFuaW1hdG9yIiwic3ByaW5nIiwiX3JlZiRzdGlmZm5lc3MiLCJfcmVmJGRhbXBpbmciLCJfcmVmJG1hc3MiLCJyZXN0aW5nIiwiaW50ZXJwb2xhdGUiLCJ0cyIsInNraXBUb0VuZFN0YXRlIiwib251cGRhdGUiLCJvbmNvbXBsZXRlIiwidHdlZW4iLCJfcmVmJGR1cmF0aW9uIiwiX3JlZiRlYXNpbmciLCJlYXNpbmciLCJfcmVmJGRlbGF5IiwiZGVsYXkiLCJzdGFydCIsInJldmVyc2UiLCJjcmVhdGVBbmltYXRvciIsImNhdGVnb3J5IiwiZGVmIiwiYWRkR2V0U2V0Iiwib3ZlcndyaXRlIiwic2V0dGVyIiwiYWRkRXZlbnQiLCJyZW1vdmVFdmVudCIsImRlZmF1bHRzIiwicm90YXRlWCIsInJvdGF0ZVkiLCJtaXhpbkNvbmZpZyIsInZpZXdQcm9wcyIsInZpZXdJbnRlcm5hbEFQSSIsInZpZXdFeHRlcm5hbEFQSSIsImluaXRpYWxQcm9wcyIsImN1cnJlbnRQcm9wcyIsImdldE9mZnNldCIsImdldFNjYWxlIiwiZ2V0UmVjdCIsInByb3BzSGF2ZUNoYW5nZWQiLCJhcHBseVN0eWxlcyIsIm5ld1Byb3BzIiwicHJvcCIsInBlcnNwZWN0aXZlIiwiZWxlbWVudEN1cnJlbnRTdHlsZSIsImNzc1RleHQiLCJNaXhpbnMiLCJ2aWV3U3RhdGUiLCJldmVudHMiLCJyZW1vdmUiLCJmaW5kSW5kZXgiLCJhbmltYXRpb24iLCJsYXlvdXRDYWxjdWxhdGVkIiwicGFkZGluZ1RvcCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsVG9wIiwib2Zmc2V0UGFyZW50IiwiX3JlZiR0YWciLCJfcmVmJG5hbWUiLCJfcmVmJGF0dHJpYnV0ZXMiLCJfcmVmJHJlYWQiLCJyZWFkIiwiX3JlZiR3cml0ZSIsIl9yZWYkY3JlYXRlIiwiX3JlZiRkZXN0cm95IiwiX3JlZiRmaWx0ZXJGcmFtZUFjdGlvIiwiZmlsdGVyRnJhbWVBY3Rpb25zRm9yQ2hpbGQiLCJfcmVmJGRpZENyZWF0ZVZpZXciLCJkaWRDcmVhdGVWaWV3IiwiX3JlZiRkaWRXcml0ZVZpZXciLCJfcmVmJGlnbm9yZVJlY3QiLCJfcmVmJGlnbm9yZVJlY3RVcGRhdGUiLCJpZ25vcmVSZWN0VXBkYXRlIiwiX3JlZiRtaXhpbnMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZnJhbWVSZWN0IiwiaXNSZXN0aW5nIiwiYWN0aXZlTWl4aW5zIiwid3JpdGVycyIsInJlYWRlcnMiLCJkZXN0cm95ZXJzIiwiZ2V0RWxlbWVudCIsImdldENoaWxkVmlld3MiLCJnZXRSZWZlcmVuY2UiLCJfcmVhZCIsImludGVybmFsQVBJIiwiX3dyaXRlIiwiZnJhbWVBY3Rpb25zIiwid3JpdGVyIiwidGltZXN0YW1wIiwibWl4aW4iLCJkZXN0cm95ZXIiLCJzaGFyZWRBUElEZWZpbml0aW9uIiwiaW50ZXJuYWxBUElEZWZpbml0aW9uIiwibmVlZGxlIiwibGlua1ZpZXciLCJ1bmxpbmtWaWV3IiwicmVnaXN0ZXJSZWFkZXIiLCJyZWdpc3RlckRlc3Ryb3llciIsImludmFsaWRhdGVMYXlvdXQiLCJleHRlcm5hbEFQSURlZmluaXRpb24iLCJtaXhpbkFQSURlZmluaXRpb24iLCJtaXhpbkFQSSIsImNoaWxkQ291bnQiLCJjcmVhdGVQYWludGVyIiwiZnBzIiwicGFpbnRlciIsImludGVydmFsIiwibGFzdCIsInJlcXVlc3RUaWNrIiwiY2FuY2VsVGljayIsInNldFRpbWVyVHlwZSIsInRpY2siLCJwZXJmb3JtYW5jZSIsIm5vdyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZGVsdGEiLCJwYXVzZSIsInJvdXRlcyIsIl9yZWYkYWN0aW9ucyIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwiaW5zZXJ0QWZ0ZXIiLCJuZXh0U2libGluZyIsImlzRW1wdHkiLCJpc0Jvb2xlYW4iLCJ0b0Jvb2xlYW4iLCJ0b051bWJlciIsInRvSW50IiwidG9GbG9hdCIsImlzSW50IiwiaXNGaW5pdGUiLCJ0b0J5dGVzIiwibmF0dXJhbEZpbGVTaXplIiwidG9GdW5jdGlvblJlZmVyZW5jZSIsImxldmVscyIsImxldmVsIiwicGF0Y2giLCJyZXZlcnQiLCJsb2FkIiwiY3JlYXRlU2VydmVyQVBJIiwib3V0bGluZSIsImNyZWF0ZUFjdGlvbiIsIm9uZGF0YSIsImlzTnVsbCIsImlzQVBJIiwiZ2V0VHlwZSIsInJlcGxhY2VTaW5nbGVRdW90ZXMiLCJjb252ZXJzaW9uVGFibGUiLCJzcGxpdHRlciIsImJvb2xlYW4iLCJpbnQiLCJudW1iZXIiLCJmbG9hdCIsImZ1bmN0aW9uIiwic2VydmVyYXBpIiwiY29udmVydFRvIiwiZ2V0VmFsdWVCeVR5cGUiLCJuZXdWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsInZhbHVlVHlwZSIsIm5ld1ZhbHVlVHlwZSIsImNvbnZlcnRlZFZhbHVlIiwib3B0aW9uIiwiY3JlYXRlT3B0aW9uIiwiY3VycmVudFZhbHVlIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbkRlZmluaXRpb24iLCJjcmVhdGVJbml0aWFsU3RhdGUiLCJsaXN0VXBkYXRlVGltZW91dCIsIml0ZW1VcGRhdGVUaW1lb3V0IiwicHJvY2Vzc2luZ1F1ZXVlIiwiZnJvbUNhbWVscyIsInNlcGFyYXRvciIsInBhcnQiLCJjcmVhdGVPcHRpb25BUEkiLCJjcmVhdGVPcHRpb25BY3Rpb25zIiwiY3JlYXRlT3B0aW9uUXVlcmllcyIsIkludGVyYWN0aW9uTWV0aG9kIiwiQVBJIiwiRFJPUCIsIkJST1dTRSIsIlBBU1RFIiwiTk9ORSIsImdldFVuaXF1ZUlkIiwic3Vic3RyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJpdGVyIiwiZnJvbSIsImFycmF5UmVtb3ZlIiwic3luYyIsImxpc3RlbmVyIiwiX2ZpcmUiLCJmaXJlU3luYyIsImZpcmUiLCJfbGVuMiIsIl9rZXkyIiwib25PbmNlIiwiX2NiIiwiY29weU9iamVjdFByb3BlcnRpZXNUb09iamVjdCIsIlBSSVZBVEUiLCJjcmVhdGVJdGVtQVBJIiwicmVtb3ZlUmVsZWFzZWRJdGVtcyIsInJlbGVhc2VkIiwiSXRlbVN0YXR1cyIsIklOSVQiLCJJRExFIiwiUFJPQ0VTU0lOR19RVUVVRUQiLCJQUk9DRVNTSU5HIiwiUFJPQ0VTU0lOR19DT01QTEVURSIsIlBST0NFU1NJTkdfRVJST1IiLCJQUk9DRVNTSU5HX1JFVkVSVF9FUlJPUiIsIkxPQURJTkciLCJMT0FEX0VSUk9SIiwiRmlsZU9yaWdpbiIsIklOUFVUIiwiTElNQk8iLCJMT0NBTCIsImdldE5vbk51bWVyaWMiLCJnZXREZWNpbWFsU2VwYXJhdG9yIiwidG9Mb2NhbGVTdHJpbmciLCJnZXRUaG91c2FuZHNTZXBhcmF0b3IiLCJkZWNpbWFsU2VwYXJhdG9yIiwidGhvdXNhbmRzU3RyaW5nV2l0aFNlcGFyYXRvciIsIk5VTUJFUiIsIkFDVElPTiIsIlNFUlZFUl9BUEkiLCJSRUdFWCIsImZpbHRlcnMiLCJhcHBseUZpbHRlckNoYWluIiwibWF0Y2hpbmdGaWx0ZXJzIiwiaW5pdGlhbEZpbHRlciIsImFwcGx5RmlsdGVycyIsImV4dGVuZERlZmF1bHRPcHRpb25zIiwiYWRkaXRpb25hbE9wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImdldE9wdGlvbnMiLCJvcHRzIiwiYWxsb3dTeW5jQWNjZXB0QXR0cmlidXRlIiwiYWxsb3dEcm9wIiwiYWxsb3dQYXN0ZSIsImFsbG93UmVwbGFjZSIsImFsbG93UmV2ZXJ0IiwiYWxsb3dSZW1vdmUiLCJhbGxvd1Byb2Nlc3MiLCJhbGxvd0RpcmVjdG9yaWVzT25seSIsImZvcmNlUmV2ZXJ0IiwiY2hlY2tWYWxpZGl0eSIsIml0ZW1JbnNlcnRMb2NhdGlvbkZyZWVkb20iLCJpdGVtSW5zZXJ0TG9jYXRpb24iLCJpdGVtSW5zZXJ0SW50ZXJ2YWwiLCJkcm9wT25QYWdlIiwiZHJvcE9uRWxlbWVudCIsImRyb3BWYWxpZGF0aW9uIiwiaWdub3JlZEZpbGVzIiwiaW5zdGFudFVwbG9hZCIsIm1heFBhcmFsbGVsVXBsb2FkcyIsImNodW5rVXBsb2FkcyIsImNodW5rRm9yY2UiLCJjaHVua1NpemUiLCJjaHVua1JldHJ5RGVsYXlzIiwibGFiZWxEZWNpbWFsU2VwYXJhdG9yIiwibGFiZWxUaG91c2FuZHNTZXBhcmF0b3IiLCJpY29uUmVtb3ZlIiwiaWNvblByb2Nlc3MiLCJpY29uUmV0cnkiLCJpY29uVW5kbyIsImljb25Eb25lIiwib253YXJuaW5nIiwib25hY3RpdmF0ZWZpbGUiLCJvbmluaXRmaWxlIiwib25hZGRmaWxlc3RhcnQiLCJvbmFkZGZpbGVwcm9ncmVzcyIsIm9uYWRkZmlsZSIsIm9ucHJvY2Vzc2ZpbGVzdGFydCIsIm9ucHJvY2Vzc2ZpbGVwcm9ncmVzcyIsIm9ucHJvY2Vzc2ZpbGVhYm9ydCIsIm9ucHJvY2Vzc2ZpbGVyZXZlcnQiLCJvbnByb2Nlc3NmaWxlcyIsIm9ucHJlcGFyZWZpbGUiLCJvbnJlb3JkZXJmaWxlcyIsImJlZm9yZURyb3BGaWxlIiwiYmVmb3JlQWRkRmlsZSIsImJlZm9yZVJlbW92ZUZpbGUiLCJzdHlsZVBhbmVsTGF5b3V0Iiwic3R5bGVQYW5lbEFzcGVjdFJhdGlvIiwic3R5bGVCdXR0b25SZW1vdmVJdGVtUG9zaXRpb24iLCJzdHlsZUJ1dHRvblByb2Nlc3NJdGVtUG9zaXRpb24iLCJzdHlsZUxvYWRJbmRpY2F0b3JQb3NpdGlvbiIsInN0eWxlUHJvZ3Jlc3NJbmRpY2F0b3JQb3NpdGlvbiIsInN0eWxlQnV0dG9uUmVtb3ZlSXRlbUFsaWduIiwiZ2V0SXRlbUJ5UXVlcnkiLCJmaW5kIiwiZ2V0TnVtZXJpY0FzcGVjdFJhdGlvRnJvbVN0cmluZyIsImdldEFjdGl2ZUl0ZW1zIiwiU3RhdHVzIiwiRU1QVFkiLCJFUlJPUiIsIkJVU1kiLCJSRUFEWSIsIklURU1fRVJST1IiLCJJVEVNX0JVU1kiLCJJVEVNX1JFQURZIiwiaXNJdGVtSW5FcnJvclN0YXRlIiwiaXNJdGVtSW5CdXN5U3RhdGUiLCJpc0l0ZW1JblJlYWR5U3RhdGUiLCJHRVRfU1RBVFVTIiwiR0VUX0lURU0iLCJHRVRfQUNUSVZFX0lURU0iLCJHRVRfQUNUSVZFX0lURU1TIiwiR0VUX0lURU1TIiwiR0VUX0lURU1fTkFNRSIsIkdFVF9JVEVNX1NJWkUiLCJHRVRfU1RZTEVTIiwiR0VUX1BBTkVMX0FTUEVDVF9SQVRJTyIsIkdFVF9JVEVNX1BBTkVMX0FTUEVDVF9SQVRJTyIsIkdFVF9JVEVNU19CWV9TVEFUVVMiLCJHRVRfVE9UQUxfSVRFTVMiLCJJU19BU1lOQyIsImhhc1Jvb21Gb3JJdGVtIiwiY291bnQiLCJtYXhGaWxlQ291bnQiLCJsaW1pdCIsImFycmF5SW5zZXJ0IiwiaW5zZXJ0SXRlbSIsImlzQmFzZTY0RGF0YVVSSSIsImd1ZXNzdGltYXRlRXh0ZW5zaW9uIiwic3VidHlwZSIsImxlZnRQYWQiLCJwYWRkaW5nIiwiZ2V0RGF0ZVN0cmluZyIsImRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRGaWxlRnJvbUJsb2IiLCJsYXN0TW9kaWZpZWREYXRlIiwiX3JlbGF0aXZlUGF0aCIsImdldEJsb2JCdWlsZGVyIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsImNyZWF0ZUJsb2IiLCJCQiIsImJiIiwiZ2V0QmxvYiIsImdldEJsb2JGcm9tQnl0ZVN0cmluZ1dpdGhNaW1lVHlwZSIsImJ5dGVTdHJpbmciLCJhYiIsImlhIiwiY2hhckNvZGVBdCIsImdldE1pbWVUeXBlRnJvbUJhc2U2NERhdGFVUkkiLCJkYXRhVVJJIiwiZ2V0QmFzZTY0RGF0YUZyb21CYXNlNjREYXRhVVJJIiwiZ2V0Qnl0ZVN0cmluZ0Zyb21CYXNlNjREYXRhVVJJIiwiYXRvYiIsImdldEJsb2JGcm9tQmFzZTY0RGF0YVVSSSIsImdldEZpbGVGcm9tQmFzZTY0RGF0YVVSSSIsImdldEZpbGVOYW1lRnJvbUhlYWRlciIsImRlY29kZVVSSSIsImdldEZpbGVTaXplRnJvbUhlYWRlciIsImdldFRyYW5mc2VySWRGcm9tSGVhZGVyIiwiZ2V0RmlsZUluZm9Gcm9tSGVhZGVycyIsImluZm8iLCJyb3dzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsImNyZWF0ZUZpbGVMb2FkZXIiLCJmZXRjaEZuIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImdldFByb2dyZXNzIiwiRmlsZSIsImxvYWRVUkwiLCJjb2RlIiwiY29tcHV0YWJsZSIsImZpbGVpbmZvIiwic2V0U291cmNlIiwiaXNHZXQiLCJzZW5kUmVxdWVzdCIsIm9uaGVhZGVycyIsIm9ucHJvZ3Jlc3MiLCJoZWFkZXJzUmVjZWl2ZWQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cGxvYWQiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwidW5lc2NhcGUiLCJjcmVhdGVSZXNwb25zZSIsImNyZWF0ZVRpbWVvdXRSZXNwb25zZSIsImhhc1FTIiwiYnVpbGRVUkwiLCJjcmVhdGVGZXRjaEZ1bmN0aW9uIiwiYXBpVXJsIiwicmVzIiwiQ2h1bmtTdGF0dXMiLCJRVUVVRUQiLCJDT01QTEVURSIsIldBSVRJTkciLCJwcm9jZXNzRmlsZUNodW5rZWQiLCJ0cmFuc2ZlciIsImNodW5rcyIsImNodW5rVHJhbnNmZXJJZCIsImNodW5rU2VydmVyIiwiZmQiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlcXVlc3RUcmFuc2ZlcklkIiwicmVxdWVzdFBhcmFtcyIsInJlcXVlc3RUcmFuc2Zlck9mZnNldCIsInJlcXVlc3RVcmwiLCJsYXN0Q2h1bmtJbmRleCIsInJldHJpZXMiLCJjb21wbGV0ZVByb2Nlc3NpbmdDaHVua3MiLCJjYW5Qcm9jZXNzQ2h1bmsiLCJjaHVuayIsInByb2Nlc3NDaHVuayIsInByb2Nlc3NDaHVua3MiLCJ1cGRhdGVUb3RhbFByb2dyZXNzIiwicmV0cnlQcm9jZXNzQ2h1bmsiLCJldmVyeSIsInRvdGFsQnl0ZXNUcmFuc2ZlcmVkIiwidG90YWxTaXplIiwiYWJvcnRDaHVua3MiLCJjcmVhdGVGaWxlUHJvY2Vzc29yRnVuY3Rpb24iLCJjYW5DaHVua1VwbG9hZCIsInNob3VsZENodW5rVXBsb2FkIiwid2lsbENodW5rVXBsb2FkIiwiY3JlYXRlUHJvY2Vzc29yRnVuY3Rpb24iLCJwYXJhbXMiLCJjcmVhdGVSZXZlcnRGdW5jdGlvbiIsInVuaXF1ZUZpbGVJZCIsImdldFJhbmRvbU51bWJlciIsImNyZWF0ZVBlcmNlaXZlZFBlcmZvcm1hbmNlVXBkYXRlciIsInRpY2tNaW4iLCJ0aWNrTWF4IiwicnVudGltZSIsImNsZWFyIiwiY3JlYXRlRmlsZVByb2Nlc3NvciIsInByb2Nlc3NGbiIsInBlcmNlaXZlZFByb2dyZXNzIiwicGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyIiwicGVyY2VpdmVkRHVyYXRpb24iLCJwcm9ncmVzc0ZuIiwiY29tcGxldGVGbiIsInRyYW5zZmVySWQiLCJyZXNldCIsImdldER1cmF0aW9uIiwiZ2V0RmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uIiwibGFzdEluZGV4T2YiLCJjcmVhdGVGaWxlU3R1YiIsImRlZXBDbG9uZU9iamVjdCIsImNyZWF0ZUl0ZW0iLCJzZXJ2ZXJGaWxlUmVmZXJlbmNlIiwiZnJvemVuIiwicHJvY2Vzc2luZ0Fib3J0ZWQiLCJhY3RpdmVMb2FkZXIiLCJhY3RpdmVQcm9jZXNzb3IiLCJhYm9ydFByb2Nlc3NpbmdSZXF1ZXN0Q29tcGxldGUiLCJzZXRTdGF0dXMiLCJnZXRGaWxlRXh0ZW5zaW9uIiwiZ2V0RmlsZVR5cGUiLCJnZXRGaWxlU2l6ZSIsImdldEZpbGUiLCJsb2FkZXIiLCJtZXRhIiwic3VjY2VzcyIsInJldHJ5TG9hZCIsImFib3J0TG9hZCIsInByb2Nlc3NvciIsIm9ucHJvY2VzcyIsInJlcXVlc3RQcm9jZXNzaW5nIiwiYWJvcnRQcm9jZXNzaW5nIiwicmV2ZXJ0RmlsZVVwbG9hZCIsIl9zZXRNZXRhZGF0YSIsInNpbGVudCIsImZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbiIsImZpbGVFeHRlbnNpb24iLCJmaWxlVHlwZSIsInJlbGF0aXZlUGF0aCIsImhhbmRsZXIiLCJpdGVtQVBJIiwiZnJlZXplIiwicmVsZWFzZSIsImFyY2hpdmUiLCJnZXRJdGVtSW5kZXhCeVF1ZXJ5IiwiZ2V0SXRlbUJ5SWQiLCJpdGVtSWQiLCJmZXRjaEJsb2IiLCJnZXREb21haW5Gcm9tVVJMIiwicHJvdG9jb2wiLCJpc0V4dGVybmFsVVJMIiwiZHluYW1pY0xhYmVsIiwiaXNNb2NrSXRlbSIsImxpc3RVcGRhdGVkIiwib3B0aW9uYWxQcm9taXNlIiwic29ydEl0ZW1zIiwiY29tcGFyZSIsImdldEl0ZW1CeVF1ZXJ5RnJvbVN0YXRlIiwiaXRlbUhhbmRsZXIiLCJfcmVmJHN1Y2Nlc3MiLCJfcmVmJGZhaWx1cmUiLCJmYWlsdXJlIiwiQUJPUlRfQUxMIiwiRElEX1NFVF9GSUxFUyIsIl9yZWYyJHZhbHVlIiwiYWN0aXZlSXRlbXMiLCJpbnRlcmFjdGlvbk1ldGhvZCIsImRvVXBsb2FkIiwic2hvdWxkUHJlcGFyZU91dHB1dCIsIk1PVkVfSVRFTSIsImN1cnJlbnRJbmRleCIsIlNPUlQiLCJBRERfSVRFTVMiLCJfcmVmNiRzdWNjZXNzIiwiX3JlZjYkZmFpbHVyZSIsImluc2VydExvY2F0aW9uIiwidG90YWxJdGVtcyIsImlzVmFsaWRGaWxlIiwicHJvbWlzZXMiLCJBRERfSVRFTSIsIl9yZWY3JGluZGV4IiwiX3JlZjckc3VjY2VzcyIsIl9yZWY3JGZhaWx1cmUiLCJfcmVmNyRvcHRpb25zIiwiX2l0ZW0iLCJtYWluU3RhdHVzIiwiaGFuZGxlQWRkIiwic2hvdWxkQWRkIiwibG9hZENvbXBsZXRlIiwiUkVRVUVTVF9QUkVQQVJFX09VVFBVVCIsIl9yZWY5JGZhaWx1cmUiLCJDT01QTEVURV9MT0FEX0lURU0iLCJSRVRSWV9JVEVNX0xPQUQiLCJSRVFVRVNUX0lURU1fUFJFUEFSRSIsIl9zdWNjZXNzIiwiUkVRVUVTVF9JVEVNX1BST0NFU1NJTkciLCJwcm9jZXNzTm93IiwiUFJPQ0VTU19JVEVNIiwicHJvY2Vzc05leHQiLCJxdWV1ZUVudHJ5IiwiaXRlbVJlZmVyZW5jZSIsIlJFVFJZX0lURU1fUFJPQ0VTU0lORyIsIlJFUVVFU1RfUkVNT1ZFX0lURU0iLCJzaG91bGRSZW1vdmUiLCJSRUxFQVNFX0lURU0iLCJSRU1PVkVfSVRFTSIsInJlbW92ZUZyb21WaWV3IiwiQUJPUlRfSVRFTV9MT0FEIiwiQUJPUlRfSVRFTV9QUk9DRVNTSU5HIiwiUkVRVUVTVF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HIiwiaGFuZGxlUmV2ZXJ0Iiwic2hvdWxkUmV2ZXJ0IiwicmVxdWVzdFJlbW92ZVJlc3VsdCIsIlJFVkVSVF9JVEVNX1BST0NFU1NJTkciLCJTRVRfT1BUSU9OUyIsImZvcm1hdEZpbGVuYW1lIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsInRleHROb2RlIiwibm9kZVZhbHVlIiwicG9sYXJUb0NhcnRlc2lhbiIsImNlbnRlclgiLCJjZW50ZXJZIiwicmFkaXVzIiwiYW5nbGVJbkRlZ3JlZXMiLCJhbmdsZUluUmFkaWFucyIsImRlc2NyaWJlQXJjIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYXJjU3dlZXAiLCJwZXJjZW50YWdlQXJjIiwidG8iLCJwcm9ncmVzc0luZGljYXRvciIsInNwaW4iLCJhbGlnbiIsInJpbmdTdHJva2VXaWR0aCIsInJpbmdGcm9tIiwicmluZ1RvIiwiZmlsZUFjdGlvbkJ1dHRvbiIsImljb24iLCJpc0Rpc2FibGVkIiwic2hvdWxkRGlzYWJsZSIsInJlbW92ZUF0dHJpYnV0ZSIsIk1CIiwiS0IiLCJHQiIsInJlbW92ZURlY2ltYWxzV2hlblplcm8iLCJkZWNpbWFsQ291bnQiLCJ0b0ZpeGVkIiwiY3JlYXRlJDIiLCJmaWxlTmFtZSIsInVwZGF0ZUZpbGUiLCJ1cGRhdGVGaWxlU2l6ZU9uRXJyb3IiLCJmaWxlSW5mbyIsIkRJRF9VUERBVEVfSVRFTV9NRVRBIiwidG9QZXJjZW50YWdlIiwiY3JlYXRlJDMiLCJkaWRTZXRJdGVtTG9hZFByb2dyZXNzIiwiZmlsZVN0YXR1cyIsIkRJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORyIsIkRJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkciLCJESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTUyIsIkRJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTIiwiRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19SRVZFUlRfRVJST1IiLCJESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1IiLCJCdXR0b25zIiwiQWJvcnRJdGVtTG9hZCIsIlJldHJ5SXRlbUxvYWQiLCJSZW1vdmVJdGVtIiwiUHJvY2Vzc0l0ZW0iLCJBYm9ydEl0ZW1Qcm9jZXNzaW5nIiwiUmV0cnlJdGVtUHJvY2Vzc2luZyIsIlJldmVydEl0ZW1Qcm9jZXNzaW5nIiwiQnV0dG9uS2V5cyIsImNhbGN1bGF0ZUZpbGVJbmZvT2Zmc2V0IiwiYnV0dG9uUmVjdCIsImJ1dHRvblJlbW92ZUl0ZW0iLCJjYWxjdWxhdGVCdXR0b25XaWR0aCIsImJ1dHRvbkFib3J0SXRlbUxvYWQiLCJjYWxjdWxhdGVGaWxlVmVydGljYWxDZW50ZXJPZmZzZXQiLCJjYWxjdWxhdGVGaWxlSG9yaXpvbnRhbENlbnRlck9mZnNldCIsImdldFJlbW92ZUluZGljYXRvckFsaWdtZW50IiwiRGVmYXVsdFN0eWxlIiwiYnV0dG9uUmV0cnlJdGVtTG9hZCIsImJ1dHRvblByb2Nlc3NJdGVtIiwiYnV0dG9uQWJvcnRJdGVtUHJvY2Vzc2luZyIsImJ1dHRvblJldHJ5SXRlbVByb2Nlc3NpbmciLCJidXR0b25SZXZlcnRJdGVtUHJvY2Vzc2luZyIsImxvYWRQcm9ncmVzc0luZGljYXRvciIsInByb2Nlc3NQcm9ncmVzc0luZGljYXRvciIsInByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvciIsIklkbGVTdHlsZSIsIlByb2Nlc3NpbmdTdHlsZSIsIlN0eWxlTWFwIiwiRElEX1NUQVJUX0lURU1fTE9BRCIsIkRJRF9TVEFSVF9JVEVNX1JFTU9WRSIsIkRJRF9MT0FEX0xPQ0FMX0lURU0iLCJwcm9jZXNzaW5nQ29tcGxldGVJbmRpY2F0b3JWaWV3IiwiY3JlYXRlJDQiLCJidXR0b25GaWx0ZXIiLCJpc0FzeW5jIiwiYWxpZ25SZW1vdmVJdGVtQnV0dG9uIiwiZW5hYmxlZEJ1dHRvbnMiLCJfbWFwIiwiYnV0dG9uVmlldyIsImxvYWRJbmRpY2F0b3JWaWV3IiwicHJvZ3Jlc3NJbmRpY2F0b3JWaWV3IiwiYWN0aXZlU3R5bGVzIiwid3JpdGUkMiIsInJvdXRlIiwic3R5bGVzVG9BcHBseSIsImRlZmF1bHRTdHlsZXMiLCJjb250cm9sIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9QUk9DRVNTSU5HIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9MT0FEIiwiRElEX1NFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9SRU1PVkFMIiwiYnV0dG9uQWJvcnRJdGVtUmVtb3ZhbCIsImZpbGVXcmFwcGVyIiwiUEFORUxfU1BSSU5HX1BST1BTIiwiY3JlYXRlJDYiLCJzZWN0aW9uIiwiY3JlYXRlU2VjdGlvbiIsInNjYWxhYmxlIiwidmlld0NvbnN0cnVjdG9yIiwicGFuZWwiLCJ0b3BSZWN0IiwiYm90dG9tUmVjdCIsImNyZWF0ZURyYWdIZWxwZXIiLCJpdGVtSWRzIiwicHJldkluZGV4Iiwic2V0SW5kZXgiLCJnZXRJbmRleCIsImdldEl0ZW1JbmRleCIsIklURU1fVFJBTlNMQVRFX1NQUklORyIsIklURU1fU0NBTEVfU1BSSU5HIiwiU3RhdGVNYXAiLCJjcmVhdGUkNyIsImhhbmRsZUNsaWNrIiwibWFya2VkRm9yUmVtb3ZhbCIsImRyYWdTdGF0ZSIsImdyYWIiLCJpc1ByaW1hcnkiLCJyZW1vdmVkQWN0aXZhdGVMaXN0ZW5lciIsInBhZ2VYIiwicGFnZVkiLCJkcmFnT3JpZ2luIiwiZHJhZ0NlbnRlciIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZHJhZyIsImRyYWdPZmZzZXQiLCJkcm9wIiwicm91dGUkMSIsIkRJRF9VUERBVEVfUEFORUxfSEVJR0hUIiwid3JpdGUkNCIsIkRJRF9HUkFCX0lURU0iLCJESURfRFJBR19JVEVNIiwiRElEX0RST1BfSVRFTSIsImN1cnJlbnRTdGF0ZSIsImZpbGVwb25kSXRlbVN0YXRlIiwiZ2V0SXRlbUluZGV4QnlQb3NpdGlvbiIsInBvc2l0aW9uSW5WaWV3IiwiaG9yaXpvbnRhbFNwYWNlIiwiaXRlbVJlY3QiLCJpdGVtSG9yaXpvbnRhbE1hcmdpbiIsIml0ZW1zUGVyUm93IiwiY2hpbGRNaWQiLCJpdGVtVmVydGljYWxNYXJnaW4iLCJpdGVtSGVpZ2h0IiwiX2luZGV4IiwiaXRlbVRvcCIsIml0ZW1SaWdodCIsIml0ZW1Cb3R0b20iLCJkcm9wQXJlYURpbWVuc2lvbnMiLCJzZXREaW1lbnNpb25zIiwiY3JlYXRlJDgiLCJsYXN0SXRlbVNwYW53RGF0ZSIsIm1vdmVJdGVtIiwidngiLCJ2eSIsInNwYXduRGF0ZSIsImludHJvSXRlbVZpZXciLCJnZXRJdGVtSGVpZ2h0IiwiZ2V0SXRlbVdpZHRoIiwicm91dGUkMiIsIkRJRF9BRERfSVRFTSIsImFkZEluZGV4IiwiY29vbGRvd24iLCJkaXN0IiwiRElEX1JFTU9WRV9JVEVNIiwibnVtSXRlbXMiLCJvbGRJbmRleCIsImRyYWdQb3NpdGlvbiIsImRyYWdIZWlnaHQiLCJkcmFnV2lkdGgiLCJjb2xzIiwic2V0SGVpZ2h0Iiwic2V0V2lkdGgiLCJnZXRHcmlkSW5kZXgiLCJnZXRIZWlnaHQiLCJnZXRXaWR0aCIsImdldENvbEluZGV4IiwidmlzaWJsZUNoaWxkcmVuIiwiaWR4IiwiY2hpbGRCb3R0b20iLCJjaGlsZFRvcCIsImxpc3QiLCJkcmFnQ29vcmRpbmF0ZXMiLCJkcmFnSW5kZXgiLCJkcmFnSW5kZXhPZmZzZXQiLCJyZW1vdmVJbmRleE9mZnNldCIsImFkZEluZGV4T2Zmc2V0IiwiY2hpbGRSZWN0IiwidmlzdWFsSGVpZ2h0IiwicHJldlgiLCJwcmV2WSIsInZpc3VhbEluZGV4IiwiaW5kZXhYIiwiaW5kZXhZIiwidmVjdG9yWCIsInNpZ24iLCJ2ZWN0b3JZIiwiY3JlYXRlJDkiLCJvdmVyZmxvd2luZyIsInJvdXRlJDMiLCJESURfRFJBRyIsInNjb3BlTGVmdCIsInNjb3BlVG9wIiwiRElEX0VORF9EUkFHIiwibGlzdFNjcm9sbGVyIiwib3ZlcmZsb3ciLCJuZXdIZWlnaHQiLCJhdHRyVG9nZ2xlIiwicmVzZXRGaWxlSW5wdXQiLCJjcmVhdGUkYSIsInNldEFjY2VwdGVkRmlsZVR5cGVzIiwidG9nZ2xlQWxsb3dNdWx0aXBsZSIsInRvZ2dsZURpcmVjdG9yeUZpbHRlciIsInRvZ2dsZURpc2FibGVkIiwidG9nZ2xlUmVxdWlyZWQiLCJzZXRDYXB0dXJlTWV0aG9kIiwid2Via2l0UmVsYXRpdmVQYXRoIiwiZG9lc0FsbG93QnJvd3NlIiwiZGlzYWJsZUZpZWxkIiwidXBkYXRlUmVxdWlyZWRTdGF0dXMiLCJzZXRDdXN0b21WYWxpZGl0eSIsIkRJRF9TRVRfRElTQUJMRUQiLCJESURfU0VUX0FMTE9XX0JST1dTRSIsIkRJRF9TRVRfQUxMT1dfRElSRUNUT1JJRVNfT05MWSIsIkRJRF9TRVRfQUxMT1dfTVVMVElQTEUiLCJESURfU0VUX0FDQ0VQVEVEX0ZJTEVfVFlQRVMiLCJESURfU0VUX0NBUFRVUkVfTUVUSE9EIiwiRElEX1NFVF9SRVFVSVJFRCIsIktleSIsIkVOVEVSIiwiU1BBQ0UiLCJjcmVhdGUkYiIsImhhbmRsZUtleURvd24iLCJrZXlDb2RlIiwiY2xpY2siLCJjb250YWlucyIsInVwZGF0ZUxhYmVsVmFsdWUiLCJjYXB0aW9uIiwiY2xpY2thYmxlIiwiZHJvcExhYmVsIiwiRElEX1NFVF9MQUJFTF9JRExFIiwiYWRkQmxvYiIsIndyaXRlJDciLCJyb3V0ZSQ0IiwiRElEX0RST1AiLCJkcmlwIiwiY3JlYXRlJGMiLCJnZXRGaWVsZCIsInN5bmNGaWVsZFBvc2l0aW9uc1dpdGhJdGVtcyIsImRpZFJlb3JkZXJJdGVtcyIsIndyaXRlJDgiLCJkYXRhQ29udGFpbmVyIiwiRElEX0RFRklORV9WQUxVRSIsIkRJRF9SRU9SREVSX0lURU1TIiwiRElEX1NPUlRfSVRFTVMiLCJnZXRSb290Tm9kZSIsInRleHQkMSIsInppcCIsImVwdWIiLCJyZXF1ZXN0RGF0YVRyYW5zZmVySXRlbXMiLCJkYXRhVHJhbnNmZXIiLCJsaW5rcyIsImdldExpbmtzIiwiaGFzRmlsZXMiLCJwcm9taXNlZEZpbGVzIiwiaXNGaWxlU3lzdGVtSXRlbSIsImdldEZpbGVzRnJvbUl0ZW0iLCJyZXR1cm5lZEZpbGVHcm91cHMiLCJncm91cCIsImlzRW50cnkiLCJnZXRBc0VudHJ5IiwiaXNEaXJlY3RvcnkiLCJraW5kIiwiaXNEaXJlY3RvcnlFbnRyeSIsImdldEZpbGVzSW5EaXJlY3RvcnkiLCJnZXRBc0ZpbGUiLCJkaXJDb3VudGVyIiwiZmlsZUNvdW50ZXIiLCJyZXNvbHZlSWZEb25lIiwicmVhZEVudHJpZXMiLCJkaXJFbnRyeSIsImRpcmVjdG9yeVJlYWRlciIsImNyZWF0ZVJlYWRlciIsInJlYWRCYXRjaCIsImNvcnJlY3RlZEZpbGUiLCJjb3JyZWN0TWlzc2luZ0ZpbGVUeXBlIiwiZnVsbFBhdGgiLCJ3ZWJraXRHZXRBc0VudHJ5IiwiZ2V0TGlua3NGcm9tVHJhbnNmZXJNZXRhRGF0YSIsImdldExpbmtzRnJvbVRyYW5zZmVyVVJMRGF0YSIsImdldERhdGEiLCJkcmFnTkRyb3BPYnNlcnZlcnMiLCJldmVudFBvc2l0aW9uIiwicGFnZUxlZnQiLCJwYWdlVG9wIiwibGF5ZXJYIiwibGF5ZXJZIiwiY3JlYXRlRHJhZ05Ecm9wQ2xpZW50Iiwic2NvcGVUb09ic2VydmUiLCJmaWx0ZXJFbGVtZW50IiwiZ2V0RHJhZ05Ecm9wT2JzZXJ2ZXIiLCJjbGllbnQiLCJvbmRyb3AiLCJvbmVudGVyIiwib25kcmFnIiwib25leGl0IiwiYWxsb3dkcm9wIiwibmV3T2JzZXJ2ZXIiLCJjcmVhdGVEcmFnTkRyb3BPYnNlcnZlciIsImNsaWVudHMiLCJkcmFnZW50ZXIiLCJkcmFnb3ZlciIsImRyYWdsZWF2ZSIsImhhbmRsZXJzIiwiY3JlYXRlSGFuZGxlciIsImVsZW1lbnRGcm9tUG9pbnQiLCJpc0V2ZW50VGFyZ2V0IiwiZWxlbWVudEF0UG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiaW5pdGlhbFRhcmdldCIsInNldERyb3BFZmZlY3QiLCJlZmZlY3QiLCJkcm9wRWZmZWN0Iiwib3ZlckRyb3BUYXJnZXQiLCJhbGxvd3NUcmFuc2ZlciIsImNyZWF0ZUhvcHBlciIsInNjb3BlIiwidmFsaWRhdGVJdGVtcyIsImNhdGNoZXNEcm9wc09uUGFnZSIsInJlcXVpcmVzRHJvcE9uRWxlbWVudCIsIl9vcHRpb25zJGZpbHRlckl0ZW1zIiwiZmlsdGVySXRlbXMiLCJkb2N1bWVudEVsZW1lbnQiLCJsYXN0U3RhdGUiLCJmaWx0ZXJlZEl0ZW1zIiwib25kcmFnZW5kIiwib25kcmFnc3RhcnQiLCJ1cGRhdGVIb3BwZXJTdGF0ZSIsImhvcHBlclN0YXRlIiwibGlzdGVuaW5nIiwibGlzdGVuZXJzJDEiLCJoYW5kbGVQYXN0ZSIsImFjdGl2ZUVsIiwiYWN0aXZlRWxlbWVudCIsIm5vZGVOYW1lIiwiaW5TY29wZSIsImNsaXBib2FyZERhdGEiLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsImNyZWF0ZVBhc3RlciIsImFkZEZpbGVzTm90aWZpY2F0aW9uVGltZW91dCIsIm5vdGlmaWNhdGlvbkNsZWFyVGltZW91dCIsImZpbGVuYW1lcyIsImFzc2lzdCIsImNsZWFyJDEiLCJsaXN0TW9kaWZpZWQiLCJpc1VzaW5nRmlsZVBvbmQiLCJpdGVtUHJvY2Vzc2VkVW5kbyIsIml0ZW1FcnJvciIsImFzc2lzdGFudCIsInRvQ2FtZWxzIiwiY2hhckF0IiwiZGVib3VuY2UiLCJmdW5jIiwiaW1taWRpYXRlT25seSIsIk1BWF9GSUxFU19MSU1JVCIsInByZXZlbnQiLCJjcmVhdGUkZSIsIm1lYXN1cmUiLCJib3VuZHMiLCJ3aWR0aFByZXZpb3VzIiwid2lkdGhVcGRhdGVkIiwidXBkYXRlSGlzdG9yeSIsInByZXZpb3VzQXNwZWN0UmF0aW8iLCJjYW5Ib3ZlciIsIm1hdGNoTWVkaWEiLCJoYXNQb2ludGVyRXZlbnRzIiwicGFzc2l2ZSIsIndyaXRlJDkiLCJyb3V0ZSQ1IiwiY2FsY3VsYXRlUm9vdEJvdW5kaW5nQm94SGVpZ2h0IiwiaG9wcGVyIiwiaXNNdWx0aUl0ZW0iLCJhdE1heENhcGFjaXR5IiwiYWRkQWN0aW9uIiwibGlzdEl0ZW1NYXJnaW4iLCJjYWxjdWxhdGVMaXN0SXRlbU1hcmdpbiIsImxpc3RIZWlnaHQiLCJjYWxjdWxhdGVMaXN0SGVpZ2h0IiwibGFiZWxIZWlnaHQiLCJjdXJyZW50TGFiZWxIZWlnaHQiLCJsaXN0TWFyZ2luVG9wIiwibGlzdE1hcmdpbkJvdHRvbSIsInZpc3VhbCIsImJvdW5kc0hlaWdodCIsImhpc3RvcnkiLCJNQVhfQk9VTkNFUyIsImJvdW5jZXMiLCJsaXN0QXZhaWxhYmxlSGVpZ2h0IiwiX2xpc3RBdmFpbGFibGVIZWlnaHQiLCJjYXBwZWRIZWlnaHQiLCJpc0NhcHBlZEhlaWdodCIsInBhbmVsSGVpZ2h0IiwiX2xpc3RBdmFpbGFibGVIZWlnaHQyIiwiaXRlbU1hcmdpbiIsInNjcm9sbExpc3QiLCJpdGVtTGlzdCIsIm5ld0l0ZW0iLCJyZW1vdmVkSXRlbSIsInZlcnRpY2FsSXRlbUNvdW50IiwibWVhc3VyZUhlaWdodCIsIm1heEhlaWdodCIsImV4Y2VlZHNNYXhGaWxlcyIsIm1heEl0ZW1zIiwidG90YWxCcm93c2VJdGVtcyIsImdldERyYWdJbmRleCIsInRvZ2dsZURyb3AiLCJpc0FsbG93ZWQiLCJlbmFibGVkIiwidG9nZ2xlQnJvd3NlIiwidG9nZ2xlUGFzdGUiLCJwYXN0ZXIiLCJESURfU0VUX0FMTE9XX0RST1AiLCJESURfU0VUX0FMTE9XX1BBU1RFIiwiY3JlYXRlQXBwIiwiaW5pdGlhbE9wdGlvbnMiLCJvcmlnaW5hbEVsZW1lbnQiLCJ2aXNpYmlsaXR5SGFuZGxlciIsInJlc2l6ZURvbmVUaW1lciIsImlzUmVzaXppbmciLCJpc1Jlc2l6aW5nSG9yaXpvbnRhbGx5IiwiaW5pdGlhbFdpbmRvd1dpZHRoIiwiY3VycmVudFdpbmRvd1dpZHRoIiwicmVzaXplSGFuZGxlciIsImlzSGlkZGVuIiwicmVhZFdyaXRlQXBpIiwiaW5uZXJXaWR0aCIsInJvdXRlQWN0aW9uc1RvRXZlbnRzIiwiY3JlYXRlRXZlbnQiLCJldmVudFJvdXRlcyIsIkRJRF9ERVNUUk9ZIiwiRElEX0lOSVQiLCJESURfVEhST1dfTUFYX0ZJTEVTIiwiRElEX0lOSVRfSVRFTSIsIkRJRF9QUkVQQVJFX09VVFBVVCIsIkRJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkdfQUxMIiwiRElEX1VQREFURV9JVEVNUyIsIkRJRF9BQ1RJVkFURV9JVEVNIiwiZXhwb3NlRXZlbnQiLCJwb25kIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsImZpbHRlcmVkIiwicHJlcGFyZUZpbGUiLCJhZGRGaWxlcyIsImlzRmlsZVBvbmRGaWxlIiwic291cmNlcyIsImxhc3RBcmd1bWVudCIsInByb2Nlc3NGaWxlIiwicHJlcGFyZUZpbGVzIiwicHJvY2Vzc0ZpbGVzIiwiX2xlbjMiLCJfa2V5MyIsInJlbW92ZUZpbGVzIiwiX2xlbjQiLCJfa2V5NCIsInEiLCJtb3ZlRmlsZSIsImJyb3dzZSIsImFwcGVuZFRvIiwicmVwbGFjZUVsZW1lbnQiLCJyZXN0b3JlRWxlbWVudCIsImlzQXR0YWNoZWRUbyIsImNyZWF0ZUFwcE9iamVjdCIsImN1c3RvbU9wdGlvbnMiLCJsb3dlckNhc2VGaXJzdExldHRlciIsImF0dHJpYnV0ZU5hbWVUb1Byb3BlcnR5TmFtZSIsImF0dHJpYnV0ZU5hbWUiLCJtYXBPYmplY3QiLCJwcm9wZXJ0eU1hcCIsInNlbGVjdG9yIiwibWFwcGluZyIsInNlbGVjdG9yUmVnRXhwIiwiZ2V0QXR0cmlidXRlc0FzT2JqZWN0IiwiYXR0cmlidXRlTWFwcGluZyIsImNyZWF0ZUFwcEF0RWxlbWVudCIsIm1lcmdlZE9wdGlvbnMiLCJhdHRyaWJ1dGVPcHRpb25zIiwicXVlcnlTZWxlY3RvckFsbCIsImFwcCIsImNyZWF0ZUFwcCQxIiwiUFJJVkFURV9NRVRIT0RTIiwiY3JlYXRlQXBwQVBJIiwicmVwbGFjZW1lbnRzIiwid29ya2VyQmxvYiIsIndvcmtlclVSTCIsIldvcmtlciIsInRyYW5zZmVyTGlzdCIsInJlbmFtZUZpbGUiLCJyZW5hbWVkRmlsZSIsImNvcHlGaWxlIiwicmVnaXN0ZXJlZFBsdWdpbnMiLCJjcmVhdGVBcHBQbHVnaW4iLCJwbHVnaW5PdXRsaW5lIiwidmlld3MiLCJpc09wZXJhTWluaSIsIm9wZXJhbWluaSIsImhhc1Byb21pc2VzIiwiaGFzQmxvYlNsaWNlIiwiaGFzQ3JlYXRlT2JqZWN0VVJMIiwiaGFzVmlzaWJpbGl0eSIsImhhc1RpbWluZyIsImhhc0NTU1N1cHBvcnRzIiwiQ1NTIiwiaXNJRTExIiwiYXBwcyIsIk9wdGlvblR5cGVzIiwidXBkYXRlT3B0aW9uVHlwZXMiLCJob29rIiwiaW5kZXhUb1JlbW92ZSIsImNvbnRleHQiLCJuZXdIb29rIiwicGx1Z2lucyIsInRvT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsImNlIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2dCIsIm9yaWdQcmV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiRXZlbnQiLCJTUEVDSUVTIiwib3JpZ2luYWxBcnJheSIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCJVU0VTX1RPX0xFTkdUSCIsIk9wZW5TdGFkQ29tcG9uZW50UXVlc3Rpb24iLCJxdWVzdGlvbklkIiwiaXNBbnN3ZXJlZCIsIm9uQ2hhbmdlSGFuZGxlciIsImxpdmVVcGRhdGVzIiwiZGltZW5zaW9ucyIsInoiLCJzdGFydFdpdGgiLCJxdWVzdGlvbkltYWdlQSIsInF1ZXN0aW9uSW1hZ2UiLCJxdWVzdGlvbkltYWdlQiIsImlzRXJyb3IiLCJpbWFnZUhUTUwiLCJtb3JlSW5mb0hUTUwiLCJtb3JlSW5mbyIsImxhYmVsQSIsImxhYmVsQiIsInF1ZXN0aW9uSFRNTCIsInNlbGVjdG9ySFRNTCIsImxhYmVsQmVsb3dBIiwibGFiZWxCZWxvdyIsImxhYmVsQmVsb3dCIiwicXVlc3Rpb25UZXh0QSIsInF1ZXN0aW9uVGV4dCIsInF1ZXN0aW9uVGV4dEIiLCJxdWVzdGlvbkFIVE1MIiwicXVlc3Rpb25CSFRNTCIsInF1ZXN0aW9uSW1hZ2VBSFRNTCIsInF1ZXN0aW9uSW1hZ2VCSFRNTCIsImNoZWNrZWQiLCJPcGVuU3RhZENvbXBvbmVudFF1ZXN0aW9uR3JvdXAiLCJub09mUXVlc3Rpb25zVG9TaG93IiwicXVlc3Rpb25FbGVtZW50cyIsImN1cnJlbnRRdWVzdGlvbiIsInNob3duUXVlc3Rpb25zIiwicXVlc3Rpb25zIiwic2Nyb2xsRG9uZSIsInF1ZXN0aW9uIiwiZ2V0QW5zd2VyIiwiaXNSZWFkeSIsImlzQmVnaW5uaW5nIiwicXVlc3Rpb25zSFRNTCIsIk9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlIiwid2l0aFBlcmNlbnRhZ2UiLCJtaW5MYWJlbCIsIm1heExhYmVsIiwiYmFyQ29sb3IiLCJhbnN3ZXJzIiwic2NvcmUiLCJuYW1lT25seSIsImNob2ljZUFuc3dlcnMiLCJ1c2VyQW5zd2VycyIsInJlc3VsdHMiLCJjaG9pY2VBbnN3ZXIiLCJ1c2VyQW5zd2VyIiwic3RhcnRXaXRoQWxsUXVlc3Rpb25zQW5zd2VyZWQiLCJkaW1lbnNpb24iLCJzY29yZXMiLCJub09mQW5zd2VycyIsImFjY3VtdWxhdG9yIiwic2NvcmVIVE1MIiwiYmFzZVNpemUiLCJ2YWx1ZUhUTUwiLCJwZXJjZW50YWdlIiwibWF4Q29sb3JNYXRjaCIsIm1pbkNvbG9yTWF0Y2giLCJwZXJjZW50YWdlSFRNTCIsIm1pbm1heExhYmVsc0hUTUwiLCJPcGVuU3RhZENvbXBvbmVudENob2ljZXMiLCJjaG9pY2VFbGVtZW50cyIsInBsYW5lUG9zIiwiY2hvaWNlc0NsaWNrTGlzdGVuZXIiLCJjaG9pY2VFbGVtZW50IiwiY2FsY3VsYXRlU2NvcmUiLCJsZW5ndGhzIiwiZmlyc3QiLCJwbGFuZVBsYW5lRWxlbWVudCIsIkNob2ljZUZvcm0iLCJxdWVzdGlvbkVkaXRNb2RlSW5kZXgiLCJwYXJzZWREYXRhIiwiY3VycmVudFRhcmdldCIsImFuc3dlcnNIVE1MIiwicXVlc3Rpb25Hcm91cCIsImFuc3dlckRpbWVuc2lvbnMiLCJxdWVzdGlvbkRpbWVuc2lvbnMiLCJqIiwiYW5zd2VyVmFsdWUiLCJoYW5kbGVGaWVsZENoYW5nZSIsInF1ZXN0aW9uSW1hZ2VCRmllbGQiLCJ0b2dnbGVFZGl0TW9kZSIsImltYWdlc0ZpZWxkIiwidGl0bGVGaWVsZCIsImRlc2NyaXB0aW9uRmllbGQiLCJzZXFuciIsInNlcW5yRmllbGQiLCJDaG9pY2VzR3VpZGVGb3JtIiwiaXNBY3RpdmUiLCJjaG9pY2VzR3VpZGVDb25maWciLCJzdWJtaXNzaW9uVHlwZSIsIndpdGhFeGlzdGluZyIsInJlcXVpcmVkVXNlclJvbGUiLCJtb3JlQ29uZmlnSFRNTCIsInJlcXVpcmVkVXNlclJvbGVDb25maWdIVE1MIiwid2l0aEV4aXN0aW5nQ29uZmlnSFRNTCIsIndpdGhFeGlzdGluZ0ZpZWxkIiwicmVxdWlyZWRVc2VyUm9sZUZpZWxkIiwic3VibWlzc2lvblR5cGVGaWVsZCIsImlzQWN0aXZlRmllbGQiLCJRdWVzdGlvbkZvcm0iLCJ2YWx1ZUVkaXRNb2RlSW5kZXgiLCJtb3JlSW5mb1RpdGxlIiwibW9yZUluZm9UZXh0IiwiZGVsZXRlSW5kZXgiLCJ2YWx1ZUluZGV4IiwidmFsdWVEaW1lbnNpb24iLCJ2YWx1ZVZhbHVlIiwidmFsdWVUZXh0IiwibW9yZUluZm9GaWVsZCIsInZhbHVlc0hUTUwiLCJtaW5MYWJlbEZpZWxkIiwibWF4TGFiZWxGaWVsZCIsImxhYmVsRmllbGQiLCJsYWJlbEJlbG93RmllbGQiLCJxdWVzdGlvbkltYWdlQUZpZWxkIiwic2hvd0VudHJ5IiwiZmllbGRuYW1lIiwiZGltZW5zaW9uc0hUTUwiLCJkaW1lbnNpb25zRmllbGQiLCJ0eXBlRmllbGQiLCJRdWVzdGlvbkdyb3VwRm9ybSIsImFuc3dlckRpbWVuc2lvbnNGaWVsZCIsIm5ld0dyb3VwQnV0dG9uSFRNTCIsInF1ZXN0aW9uR3JvdXBzIiwic2V0Q3VycmVudEZvcm0iLCJ3aGF0IiwicXVlc3Rpb25Hcm91cElkIiwiZGVsZXRlRWxlbWVudCIsImNob2ljZXNIVE1MIiwiY2hvaWNlSWQiLCJkZWxldGVCdXR0b24iLCJmZXRjaENob2ljZXNHdWlkZSIsImNob2ljZXNHdWlkZUlkIiwicXVlc3Rpb25ncm91cHMiLCJxdWVzdGlvbmdyb3VwIiwiT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVGb3JtIiwibG9naW5VcmwiLCJidXN5Iiwib25GaW5pc2hlZCIsImZldGNoRGF0YSIsImNob2ljZXNJZCIsImZvcm1maWVsZHMiLCJzdWJtaXRFcnJvciIsInRhcmdldElkIiwiY2FuU3VibWl0IiwiYWxlcnQiLCJtZXNzYWdlcyIsImNvbmZpcm0iLCJmb3JtZmllbGRzSFRNTCIsIm92ZXJ2aWV3SFRNTCIsImJhY2tCdXR0b25IVE1MIiwic3VibWl0QnV0dG9uSFRNTCIsInN1Ym1pdEZvcm0iLCJlcnJvck1lc3NhZ2VIVE1MIiwiT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGUiLCJub1ByZWZlcmVuY2VZZXQiLCJwcmVmZXJlbmNlIiwiaW5CZXR3ZWVuIiwiYWxsVmFsdWVzIiwiYWxsU2NvcmVzIiwiY3VycmVudFF1ZXN0aW9uR3JvdXBJbmRleCIsImhpZGVFZGl0Rm9ybSIsImxpdmVVcGRhdGVMaXN0ZW5lciIsInN0YXJ0R3VpZGUiLCJxdWVzdGlvbkdyb3VwRWxlbWVudCIsImdldEFuc3dlcnMiLCJjaG9pY2VzRWxlbWVudCIsImNhbGN1bGF0ZVNjb3JlcyIsInVzZXJQcmVmZXJlbmNlIiwiZ290b05leHRRdWVzdGlvbiIsImdvdG9OZXh0R3JvdXAiLCJnb3RvUHJldmlvdXNHcm91cCIsImdvdG9QcmV2aW91c1F1ZXN0aW9uIiwiZ290b1Jlc3VsdCIsImFmdGVyVXJsIiwiZmlyc3RBbnN3ZXJHaXZlbiIsInVwZGF0ZUNob2ljZXNUaXRsZSIsImNob2ljZXNUaXRsZSIsImdldFByZWZlcmVkQ2hvaWNlIiwiZ2V0VGl0bGUiLCJjaG9pY2VzQWNjb3JkZW9uIiwiY29udGVudEhUTUwiLCJvbkNob2ljZXNDbGljayIsInF1ZXN0aW9uR3JvdXBIVE1MIiwiY3VycmVudFF1ZXN0aW9uc0dyb3VwSW5kZXgiLCJlZGl0QnV0dG9uSFRNTCIsInNob3dFZGl0Rm9ybSIsImJlZm9yZVVybCIsInByZXZpb3VzTmV4dEJ1dHRvbnNIVE1MIiwiT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVSZXN1bHQiLCJzdWJtaXNzaW9uIiwicmVxdWlyZUxvZ2luU2V0dGluZ3MiLCJidXR0b25UZXh0TG9naW4iLCJidXR0b25UZXh0TG9nZ2VkSW4iLCJidXR0b25UZXh0QWxyZWFkeVN1Ym1pdHRlZCIsImNoYW5nZUxvZ2luTGlua1RleHQiLCJsb2dnZWRJbk1lc3NhZ2UiLCJub3RZZXRMb2dnZWRJbkVycm9yIiwiYWxyZWFkeVN1Ym1pdHRlZE1lc3NhZ2UiLCJsb2dvdXRVcmwiLCJzY3JvbGxUb0xvZ2luIiwiYWxsRm9ybXZhbHVlcyIsInJlc3VsdGRhdGEiLCJmb3JtVmFsdWVzIiwib25Gb3JtQ2hhbmdlIiwicHJlZmVycmVkQ2hvaWNlIiwicHJlZmVycmVkQ2hvaWNlSWQiLCJzdWJtaXRSZXN1bHQiLCJlcnJvclN0YXRlMSIsImVycm9yU3RhdGUyIiwicmVxdWlyZUxvZ2luIiwic3VibWlzc2lvbkVycm9yIiwiZ2V0VmFsdWVzIiwiRmluZ2VycHJpbnRKUyIsImZwIiwidmlzaXRvcklkIiwidXNlckZpbmdlcnByaW50IiwicmV0dXJuVG8iLCJidG9hIiwibW9yZUluZm9VcmwiLCJtb3JlSW5mb0xhYmVsIiwiZm9ybUhUTUwiLCJyZXF1aXJlTG9naW5IVE1MIiwiYnV0dG9uVGV4dCIsImdvdG9Mb2dpblVybCIsImJlZm9yZUxhYmVsIiwiYWZ0ZXJMYWJlbCIsIng2NEFkZCIsIng2NE11bHRpcGx5IiwieDY0Um90bCIsIng2NExlZnRTaGlmdCIsIng2NFhvciIsIng2NEZtaXgiLCJ4NjRoYXNoMTI4Iiwic2VlZCIsInJlbWFpbmRlciIsImgxIiwiaDIiLCJrMSIsImsyIiwiYzEiLCJjMiIsImNvdW50VHJ1dGh5Iiwic3VtIiwidyQxIiwiaXNUcmlkZW50IiwidyQyIiwiZCQxIiwic2V0QXVkaW9QYXJhbSIsInBhcmFtIiwic2V0VmFsdWVBdFRpbWUiLCJpc0F1ZGlvUGFyYW0iLCJjdXJyZW50VGltZSIsInJlbmRlckF1ZGlvIiwicmVuZGVyZWRCdWZmZXIiLCJyZXN1bWVUcmllc0xlZnQiLCJ0cnlSZXN1bWUiLCJzdGFydFJlbmRlcmluZyIsIm1ha2VJbm5lckVycm9yIiwiZ2V0SGFzaCIsImQkMiIsImJhc2VGb250cyIsImZvbnRMaXN0IiwiZm9udFNwYW5TdHlsZSIsImZvbnRTdHlsZSIsImxldHRlclNwYWNpbmciLCJsaW5lQnJlYWsiLCJsaW5lSGVpZ2h0IiwidGV4dFRyYW5zZm9ybSIsInRleHREZWNvcmF0aW9uIiwidGV4dFNoYWRvdyIsIndoaXRlU3BhY2UiLCJ3b3JkQnJlYWsiLCJ3b3JkU3BhY2luZyIsInRvRGF0YVVSTCIsIm4kMSIsInckMyIsIm4kMiIsInckNCIsInckNSIsInckNiIsImQkMyIsIm9zQ3B1Iiwib3NjcHUiLCJsYW5ndWFnZXMiLCJsYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsImJyb3dzZXJMYW5ndWFnZSIsInN5c3RlbUxhbmd1YWdlIiwidmVuZG9yIiwiSW50bCIsIlJlZmxlY3QiLCJjb2xvckRlcHRoIiwic2NyZWVuIiwiZGV2aWNlTWVtb3J5Iiwic2NyZWVuUmVzb2x1dGlvbiIsImF2YWlsYWJsZVNjcmVlblJlc29sdXRpb24iLCJhdmFpbFdpZHRoIiwiYXZhaWxIZWlnaHQiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiY29uY3VycmVuY3kiLCJ0aW1lem9uZU9mZnNldCIsImN1cnJlbnRZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0aW1lem9uZSIsIl9hIiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJ0aW1lWm9uZSIsImluZGV4ZWREQiIsIm9wZW5EYXRhYmFzZSIsImNwdUNsYXNzIiwicGxhdGZvcm0iLCJtaW1lVHlwZXMiLCJzdWZmaXhlcyIsIm1ha2VDYW52YXNDb250ZXh0Iiwid2luZGluZyIsImlzUG9pbnRJblBhdGgiLCJ0ZXh0QmFzZWxpbmUiLCJmb250IiwicHJpbnRlZFRleHQiLCJmaWxsVGV4dCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsInRvdWNoU3VwcG9ydCIsInRvdWNoRXZlbnQiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJ0b3VjaFN0YXJ0IiwiZm9udHMiLCJiYXNlRm9udHNEaXYiLCJmb250c0RpdiIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRIZWlnaHQiLCJjcmVhdGVTcGFuIiwic3BhbiIsImlzRm9udEF2YWlsYWJsZSIsImZvbnRTcGFucyIsImJhc2VGb250IiwiYmFzZUZvbnRJbmRleCIsImJhc2VGb250c1NwYW5zIiwibGVuZ3RoXzEiLCJmb250c1NwYW5zIiwic3BhbnMiLCJfbG9vcF8xIiwiZm9udFRvRGV0ZWN0IiwiY3JlYXRlU3BhbldpdGhGb250cyIsImZvbnRMaXN0XzEiLCJpbml0aWFsaXplRm9udHNTcGFucyIsImF2YWlsYWJsZSIsImF1ZGlvIiwiQXVkaW9Db250ZXh0Iiwib3NjaWxsYXRvciIsImNvbXByZXNzb3IiLCJlcnJvcl8xIiwiT2ZmbGluZUF1ZGlvQ29udGV4dCIsIndlYmtpdE9mZmxpbmVBdWRpb0NvbnRleHQiLCJjcmVhdGVPc2NpbGxhdG9yIiwiZnJlcXVlbmN5IiwiY3JlYXRlRHluYW1pY3NDb21wcmVzc29yIiwidGhyZXNob2xkIiwia25lZSIsInJlZHVjdGlvbiIsImF0dGFjayIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiZ2V0Q2hhbm5lbERhdGEiLCJwbHVnaW5zU3VwcG9ydCIsInByb2R1Y3RTdWIiLCJlbXB0eUV2YWxMZW5ndGgiLCJlcnJvckZGIiwidG9Tb3VyY2UiLCJlMiIsImNocm9tZSIsImNvb2tpZXNFbmFibGVkIiwiY29va2llIiwiZ2V0QnVpbHRpbkNvbXBvbmVudHMiLCJzb3VyY2VPcHRpb25zIiwiZXhjbHVkZVNvdXJjZXMiLCJjb21wb25lbnRzIiwic291cmNlS2V5IiwibmV4dFRpbWVzdGFtcCIsIl9iIiwiX2MiLCJoYXlzdGFjayIsImdldENvbXBvbmVudHMiLCJjb21wb25lbnRzVG9EZWJ1Z1N0cmluZyIsImhhc2hDb21wb25lbnRzIiwiY29tcG9uZW50S2V5IiwiY29tcG9uZW50IiwiY29tcG9uZW50c1RvQ2Fub25pY2FsU3RyaW5nIiwiT3BlbkFnZW50IiwidmlzaXRvcklkQ2FjaGUiLCJtYWtlTGF6eUdldFJlc3VsdCIsImRlYnVnIiwiZGVsYXlGYWxsYmFjayIsImZhbGxiYWNrVGltZW91dCIsImRlYWRsaW5lVGltZW91dCIsIkluZmluaXR5IiwicmVxdWVzdElkbGVDYWxsYmFjayIsIiRmaW5kIiwiRklORCJdLCJtYXBwaW5ncyI6IjtzQ0FDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFB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RSxHQUd6Q0EsSUFBUSxJQUFJcndGLE1BQU0sR0FBTyxNQUFFLFdBQWN1MkUsR0FBYyxLQUkzRDd0RCxFQUFFLENBQUUxZ0IsT0FBUSxRQUFTNmdCLE9BQU8sRUFBTW5TLE9BQVE2L0QsSUFBZ0JDLEdBQWtCLENBQzFFNXpCLEtBQU0sU0FBYzh5QixHQUNsQixPQUFPMGEsRUFBTXZ4RixLQUFNNjJFLEVBQVl0NUUsVUFBVWdCLE9BQVMsRUFBSWhCLFVBQVUsUUFBS29DLE1BS3pFb3FCLEVBQWlCeW5FLEkiLCJmaWxlIjoiY2hvaWNlcy1ndWlkZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMzApO1xuIiwiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvd1tcIlJlYWN0XCJdOyB9KCkpOyIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdjb3JlLWpzL2VzL2FycmF5L2luY2x1ZGVzJztcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGRlZmF1bHRDb25maWcgPSB7fSwgZGVmYXVsdGRlZmF1bHRDb25maWcgPSB7fSkge1xuXG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHByb3BzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIE9iamVjdC5rZXlzKHByb3BzLmF0dHJpYnV0ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBsZXQgYXR0cmlidXRlID0gcHJvcHMuYXR0cmlidXRlc1trZXldO1xuICAgICAgICBzZWxmW2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuXHRcdC8vIGNvbmZpZ1xuICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcgPT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuY29uZmlnID0gSlNPTi5wYXJzZShzZWxmLmNvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuICAgIGxldCBwcm9wc0NvbmZpZyA9IHByb3BzLmNvbmZpZyB8fCB7fTtcbiAgICBwcm9wc0NvbmZpZyA9IHJlbW92ZVVuZGVmQW5kTnVsbChwcm9wc0NvbmZpZyk7IC8vIHJlbW92ZSB1bmRlZmluZWQgYW5kIG51bGxcblx0XHRzZWxmLmNvbmZpZyA9IG1lcmdlLnJlY3Vyc2l2ZSh7XG4gICAgICBzaXRlSWQ6IG51bGwsXG5cdFx0XHRhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgICBpc1VzZXJMb2dnZWRJbjogZmFsc2UsXG4gICAgICB9LFxuICAgICAgdXNlcjoge30sXG4gICAgfSwgZGVmYXVsdENvbmZpZywgZGVmYXVsdGRlZmF1bHRDb25maWcsIHByb3BzQ29uZmlnKVxuXG4gICAgc2VsZi5kaXZJZCA9IHNlbGYuZGl2SWQgfHwgKCBzZWxmLmNvbmZpZyAmJiBzZWxmLmNvbmZpZy5kaXZJZCApIHx8IHByb3BzLmlkIHx8IGBvcGVuc3RhZC1jb21wb25lbnQtJHsgIHBhcnNlSW50KCAxMDAwMDAwMDAgKiBNYXRoLnJhbmRvbSgpICl9YDtcbiAgICBcbiAgICB3aW5kb3dbc2VsZi5kaXZJZF0gPSBzZWxmO1xuXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIC8vIGxldCBldmVudCA9IG5ldyBFdmVudCgnaXNSZWFkeScpO1xuICAgIC8vIHNlbGYuaXNSZWFkeSA9IHRydWU7XG4gICAgLy8gc2VsZi5pbnN0YW5jZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVVuZGVmQW5kTnVsbChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT0gJ29iamVjdCcpIHJldHVybiBvYmo7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAndW5kZWZpbmVkJyB8fCBvYmpba2V5XSA9PSBudWxsKSBkZWxldGUgb2JqW2tleV07XG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0Jykgb2JqW2tleV0gPSByZW1vdmVVbmRlZkFuZE51bGwob2JqW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuICBvYmo7XG59XG4iLCJsZXQgb3NjU2Vzc2lvblN0b3JhZ2UgPSB7fTtcblxub3NjU2Vzc2lvblN0b3JhZ2UuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuXG5cdHZhciB2YWx1ZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obmFtZSk7XG5cblx0dHJ5IHtcblx0XHR2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuXHR9IGNhdGNoKGVycikge31cblxuXHRyZXR1cm4gdmFsdWU7XG5cbn1cblxub3NjU2Vzc2lvblN0b3JhZ2Uuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblxuXHRpZiAoIHR5cGVvZiBuYW1lICE9ICdzdHJpbmcnICkgcmV0dXJuO1xuXG5cdGlmICggdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnICkgdmFsdWUgPSBcIlwiO1xuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyApIHtcblx0XHR0cnkge1xuXHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdFx0fSBjYXRjaChlcnIpIHt9XG5cdH07XG5cblx0c2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSggbmFtZSwgdmFsdWUgKTtcblxufVxuXG5cbm9zY1Nlc3Npb25TdG9yYWdlLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShuYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBvc2NTZXNzaW9uU3RvcmFnZTtcbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbmZpZykge1xuXG4gIGxldCBqd3Q7XG5cbiAgLy8gand0IGluIHVybFxuICBsZXQgbWF0Y2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLm1hdGNoKC8oPzpcXD98Jilqd3Q9KFtBLVphLXowLTktXz1dK1xcLltBLVphLXowLTktXz1dK1xcLj9bQS1aYS16MC05LV8uKy89XSopKD86JnwkKS8pO1xuICBpZiAobWF0Y2gpIHtcbiAgICBqd3QgPSBtYXRjaFsxXTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy1qd3QnLCBqd3QpO1xuICAgIGxldCBzZWFyY2ggPSBkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZSgnand0PScgKyBqd3QsICcnKTtcbiAgICBpZiAoc2VhcmNoID09ICc/Jykgc2VhcmNoID0gJyc7XG4gICAgZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoID0gc2VhcmNoO1xuICB9XG5cbiAgand0ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0KCdvc2Mtand0Jyk7XG5cbiAgaWYgKGNvbmZpZyAmJiBjb25maWcuand0KSB7XG4gICAgand0ID0gY29uZmlnLmp3dDtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy1qd3QnLCBqd3QpXG4gIH1cblxuICByZXR1cm4gand0O1xuICBcbn1cbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGdldEpXVCBmcm9tICcuL2dldC1qd3QuanMnO1xuXG5sZXQgcm9sZXMgPSB7XG4gIGFkbWluOiBbJ2FkbWluJywgJ21vZGVyYXRvcicsICdlZGl0b3InLCAnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgbW9kZXJhdG9yOiBbJ21vZGVyYXRvcicsICdlZGl0b3InLCAnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgZWRpdG9yOiBbJ2VkaXRvcicsICdtZW1iZXInLCAnYW5vbnltb3VzJywgJ2FsbCddLFxuICBtZW1iZXI6IFsnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgYW5vbnltb3VzOiBbJ2Fub255bW91cycsICdhbGwnXSxcbiAgYWxsOiBbJ2FsbCddLCAgIC8vIHNwZWNpYWxcbiAgb3duZXI6IG51bGwsIC8vIHNwZWNpYWxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXNlciwgcmVxdWlyZWRSb2xlKSB7XG4gIGxldCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgaWYgKCFPYmplY3Qua2V5cyhyb2xlcykuaW5jbHVkZXModXNlclJvbGUpKSB1c2VyUm9sZSA9ICdhbGwnO1xuICByZXR1cm4gcm9sZXNbdXNlclJvbGVdLmluY2x1ZGVzKHJlcXVpcmVkUm9sZSk7XG59XG4iLCJsZXQgb3NjTG9jYWxTdG9yYWdlID0ge307XG5cbm9zY0xvY2FsU3RvcmFnZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG5cblx0dmFyIHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG5cblx0dHJ5IHtcblx0XHR2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuXHR9IGNhdGNoKGVycikge31cblxuXHRyZXR1cm4gdmFsdWU7XG5cbn1cblxub3NjTG9jYWxTdG9yYWdlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPSAnc3RyaW5nJyApIHJldHVybjtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJyApIHZhbHVlID0gXCJcIjtcblx0aWYgKCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdH0gY2F0Y2goZXJyKSB7fVxuXHR9O1xuXG5cdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCBuYW1lLCB2YWx1ZSApO1xuXG59XG5cblxub3NjTG9jYWxTdG9yYWdlLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3NjTG9jYWxTdG9yYWdlO1xuIiwiLy8gcG9seWZpbGxzXG4vL2ltcG9ydCAnY29yZS1qcy9lcy9tYXAnO1xuLy9pbXBvcnQgJ2NvcmUtanMvZXMvc2V0JztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLy8gcmVhY3RcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuLy8gaW1wb3J0IGNzcyB0byBtYWtlIHN1cmUgaXQgaXMgZ2VuZXJhdGVkIGluIHRoZSByZXN1bHRcbmltcG9ydCAnLi9jc3MvZGVmYXVsdC5sZXNzJztcblxuLy8gdGhlIG1vZHVsZVxuaW1wb3J0IGFwaSBmcm9tICcuL2xpYi9hcGkvaW5kZXguanMnO1xuaW1wb3J0IHVzZXIgZnJvbSAnLi9saWIvdXNlci9pbmRleC5qcyc7XG5pbXBvcnQgaWRlYXNTb3J0IGZyb20gJy4vbGliL2lkZWFzLXNvcnQuanMnO1xuaW1wb3J0IGxvY2FsU3RvcmFnZSBmcm9tICcuL2xpYi9sb2NhbC1zdG9yYWdlLmpzJztcbmltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuL2xpYi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IHJlYWN0VGVtcGxhdGUgZnJvbSAnLi9saWIvcmVhY3QtdGVtcGxhdGUuanMnO1xuXG5sZXQgT3BlblN0YWRDb21wb25lbnRMaWJzID0ge1xuICBhcGksXG4gIHVzZXIsXG4gIGlkZWFzU29ydCxcbiAgbG9jYWxTdG9yYWdlLFxuICBzZXNzaW9uU3RvcmFnZSxcbiAgcmVhY3RUZW1wbGF0ZSxcbn1cbmV4cG9ydCBkZWZhdWx0IE9wZW5TdGFkQ29tcG9uZW50TGlicztcblxuIiwiaW1wb3J0IGdldEhlYWRlcnMgZnJvbSAnLi9nZXQtaGVhZGVycy5qcydcblxubGV0IE9wZW5TdGFkQ29tcG9uZW50QVBJID0ge1xuICBnZXRIZWFkZXJzLFxufVxuXG5leHBvcnQgZGVmYXVsdCBPcGVuU3RhZENvbXBvbmVudEFQSTtcblxuIiwiaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlJztcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi4vdXNlci9nZXQtand0LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uZmlnKSB7XG5cbiAgbGV0IGhlYWRlcnMgPSBtZXJnZS5yZWN1cnNpdmUoeyAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIGNvbmZpZyAmJiBjb25maWcuYXBpICYmIGNvbmZpZy5hcGkuaGVhZGVycyk7XG5cbiAgbGV0IGp3dCA9IGdldEpXVCgpO1xuICBpZiAoand0KSB7XG4gICAgaGVhZGVycyA9IG1lcmdlLnJlY3Vyc2l2ZSh7IFwiWC1BdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgand0IH0sIGhlYWRlcnMpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG4gIFxufVxuIiwiaW1wb3J0IGdldFVzZXIgZnJvbSAnLi9nZXQtdXNlci5qcydcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi9nZXQtand0LmpzJ1xuaW1wb3J0IGxvZ291dCBmcm9tICcuL2xvZ291dC5qcydcbmltcG9ydCBoYXNSb2xlIGZyb20gJy4vaGFzLXJvbGUuanMnXG5cbmxldCBPcGVuU3RhZENvbXBvbmVudFVzZXIgPSB7XG4gIGdldFVzZXIsXG4gIGdldEpXVCxcbiAgbG9nb3V0LFxuICBoYXNSb2xlLFxufVxuXG5leHBvcnQgZGVmYXVsdCBPcGVuU3RhZENvbXBvbmVudFVzZXI7XG5cbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGdldEpXVCBmcm9tICcuL2dldC1qd3QuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25maWcsIG5leHQpIHtcblxuICBuZXh0ID0gbmV4dCB8fCBmdW5jdGlvbih1c2VyKSB7XG4gICAgY29uc29sZS5sb2coJ2dldFVzZXI6IG5leHQgbm90IGRlZmluZWQuJyk7XG4gICAgY29uc29sZS5sb2codXNlcik7XG4gIH07XG5cbiAgbGV0IHVzZXIgPSBjb25maWcudXNlciB8fCBzZXNzaW9uU3RvcmFnZS5nZXQoJ29zYy11c2VyJyk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICAvLyByZXR1cm4gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHVzZXIpO1xuICB9XG5cbiAgLy8gand0XG4gIGxldCBqd3QgPSBnZXRKV1QoY29uZmlnKTtcblxuICBpZiAoIWp3dCkge1xuICAgIC8vIHJldHVybiBubyB1c2VyXG4gICAgcmV0dXJuIG5leHQobnVsbCwge30pO1xuICB9XG5cbiAgLy8gZmV0Y2ggdXNlclxuICBsZXQgdXJsID0gYCR7Y29uZmlnLmFwaS51cmwgIH0vb2F1dGgvc2l0ZS8keyAgY29uZmlnLnNpdGVJZCAgfS9tZWA7XG4gIGxldCBoZWFkZXJzID0geyAnWC1BdXRob3JpemF0aW9uJzogYEJlYXJlciAkeyAgand0fWAsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgZmV0Y2godXJsLCB7IGhlYWRlcnMgfSApXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIGZldGNoJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG4gICAgLnRoZW4oIChqc29uKSA9PiB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy11c2VyJywganNvbik7XG4gICAgICBuZXh0KG51bGwsIGpzb24pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9KTtcblxufVxuIiwiaW1wb3J0IHNlc3Npb25TdG9yYWdlIGZyb20gJy4uL3Nlc3Npb24tc3RvcmFnZS5qcyc7XG5pbXBvcnQgZ2V0SldUIGZyb20gJy4vZ2V0LWp3dC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbmZpZywgbmV4dCkge1xuXG4gIG5leHQgPSBuZXh0IHx8IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICBjb25zb2xlLmxvZygnbG9nb3V0OiBuZXh0IG5vdCBkZWZpbmVkLicpO1xuICB9XG5cbiAgbGV0IHVzZXIgPSBjb25maWcudXNlciB8fCBzZXNzaW9uU3RvcmFnZS5nZXQoJ29zYy11c2VyJyk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICAvLyByZXR1cm4gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHVzZXIpO1xuICB9XG5cbiAgLy8gand0XG4gIGxldCBqd3QgPSBnZXRKV1QoY29uZmlnKTtcblxuICBpZiAoIWp3dCkge1xuICAgIC8vIHJldHVybiBubyB1c2VyXG4gICAgcmV0dXJuIG5leHQobnVsbCwge30pXG4gIH1cblxuICAvLyBmZXRjaCB1c2VyXG4gIGxldCB1cmwgPSBjb25maWcuYXBpLnVybCArICcvb2F1dGgvc2l0ZS8nICsgY29uZmlnLnNpdGVJZCArICcvbWUnO1xuICBsZXQgaGVhZGVycyA9IHsgJ1gtQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGp3dCwgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICBmZXRjaCh1cmwsIHsgaGVhZGVycyB9IClcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcignRXJyb3Igb24gZmV0Y2gnKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KVxuICAgIC50aGVuKCBqc29uID0+IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldCgnb3NjLXVzZXInLCBqc29uKVxuICAgICAgbmV4dChudWxsLCBqc29uKVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH0pO1xuICBcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlYXNTb3J0KHsgaWRlYXMsIHNvcnRPcmRlciwgY2VudGVyIH0pIHtcblxuICBzb3J0T3JkZXIgPSBzb3J0T3JkZXIgfHwgJ3JhbmRvbSc7XG5cblx0c3dpdGNoKHNvcnRPcmRlcil7XG5cdFx0Y2FzZSAndGl0bGUnOlxuXHRcdFx0aWRlYXMgPSBpZGVhcy5zb3J0KCBmdW5jdGlvbihhLGIpIHsgaWYgKGEudGl0bGUudG9Mb3dlckNhc2UoKSA8IGIudGl0bGUudG9Mb3dlckNhc2UoKSkgeyByZXR1cm4gLTE7IH0gaWYgKGIudGl0bGUudG9Mb3dlckNhc2UoKSA8IGEudGl0bGUudG9Mb3dlckNhc2UoKSkgeyByZXR1cm4gMTsgfSByZXR1cm4gMDsgfSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyYW5raW5nLGFzYyc6XG5cdFx0XHRpZGVhcyA9IGlkZWFzLnNvcnQoIGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gYS5yYW5raW5nIC0gYi5yYW5raW5nIH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbGlrZXMsYXNjJzpcblx0XHRcdGlkZWFzID0gaWRlYXMuc29ydCggZnVuY3Rpb24oYSxiKSB7IHJldHVybiBhLnllcyAtIGIueWVzIH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbGlrZXMsZGVzYyc6XG5cdFx0XHRpZGVhcyA9IGlkZWFzLnNvcnQoIGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gYi55ZXMgLSBhLnllcyB9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2NyZWF0ZWR0aW1lLGRlc2MnOlxuXHRcdFx0aWRlYXMgPSBpZGVhcy5zb3J0KCBmdW5jdGlvbihhLGIpIHsgcmV0dXJuIG5ldyBEYXRlKGIuY3JlYXRlZEF0KS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLmNyZWF0ZWRBdCkuZ2V0VGltZSgpIH0pO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY3JlYXRlZHRpbWUsYXNjJzpcblx0XHRcdGlkZWFzID0gaWRlYXMuc29ydCggZnVuY3Rpb24oYSxiKSB7IHJldHVybiBuZXcgRGF0ZShhLmNyZWF0ZWRBdCkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYi5jcmVhdGVkQXQpLmdldFRpbWUoKSB9KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Rpc3RhbmNlJzpcbiAgICAgIGNlbnRlciA9IGNlbnRlciB8fCB7bGF0OiA1Mi4zNzEwNDY0NDQ2MzU4NiwgbG5nOjkwMDQwMjkxMTAwNzQwNX07XG4gICAgICBpZiAoY2VudGVyLmNvb3JkaW5hdGVzKSB7XG4gICAgICAgIGNlbnRlci5sYXQgPSBjZW50ZXIuY29vcmRpbmF0ZXNbMF07XG4gICAgICAgIGNlbnRlci5sbmcgPSBjZW50ZXIuY29vcmRpbmF0ZXNbMV07XG4gICAgICB9XG5cdFx0XHRpZGVhcyA9IGlkZWFzXG4gICAgICAgIC5tYXAoIGlkZWEgPT4geyBpZGVhLl9kaXN0YW5jZSA9IE1hdGguc3FydCggTWF0aC5wb3coIGlkZWEubG9jYXRpb24uY29vcmRpbmF0ZXNbMF0gLSBjZW50ZXIubGF0LCAyICkgKyBNYXRoLnBvdyggaWRlYS5sb2NhdGlvbi5jb29yZGluYXRlc1sxXSAtIGNlbnRlci5sbmcsIDIgKSApOyByZXR1cm4gaWRlYTsgfSApXG4gICAgICAgIC5zb3J0KCBmdW5jdGlvbihhLGIpIHsgcmV0dXJuIGEuX2Rpc3RhbmNlIC0gYi5fZGlzdGFuY2UgfSlcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2FyZ3MsZGVzYyc6XG5cdFx0XHRpZGVhcyA9IGlkZWFzLnNvcnQoIGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gYi5hcmdDb3VudCAtIGEuYXJnQ291bnQgfSlcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2FyZ3MsYXNjJzpcblx0XHRcdGlkZWFzID0gaWRlYXMuc29ydCggZnVuY3Rpb24oYSxiKSB7IHJldHVybiBhLmFyZ0NvdW50IC0gYi5hcmdDb3VudCB9KVxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAncmFuZG9tJzpcblx0XHRkZWZhdWx0OlxuXHRcdFx0aWRlYXMgPSBpZGVhcy5zb3J0KCBmdW5jdGlvbihhLGIpIHsgcmV0dXJuIE1hdGgucmFuZG9tKCkgLSAwLjUgfSk7XG5cdFx0XHRicmVhaztcblx0fVxuXG4gIHJldHVybiBpZGVhcztcbiAgXG59XG4iLCJpbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuXG4vLyBUT0RPOiBkaXQgd2Vya3QgYWxsZWVuIGFscyBoZXQgZXIgMSBpc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IGh0bWw9JycgfSkge1xuXG4gIGxldCBhcmdzID0gYXJndW1lbnRzWzBdO1xuICBkZWxldGUgYXJncy5odG1sO1xuXG4gIGxldCBtYXRjaGVzID0gMDtcblxuICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKChrZXkpID0+IHtcblxuICAgIGxldCByZWdFeCA9IG5ldyBSZWdFeHAoYF4oKD86LnxcXG58XFxyKSopXFxcXHske2tleX1cXFxcfSgoPzoufFxcbnxcXHIpKikkYCwgJ2cnKTtcbiAgICBsZXQgbWF0Y2ggPSByZWdFeC5leGVjKGh0bWwpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBtYXRjaGVzKys7XG4gICAgICBodG1sID0gKFxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBtYXRjaFsxXSB9fT48L3NwYW4+XG4gICAgICAgIHthcmdzW2tleV19XG4gICAgICAgIDxzcGFuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbWF0Y2hbMl0gfX0+PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICApO1xuICAgIH1cblxuICB9KTtcblxuICBpZiAobWF0Y2hlcyA9PSAwKSBodG1sID0gPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBodG1sIH19Pjwvc3Bhbj5cbiAgcmV0dXJuIGh0bWw7XG4gIFxufVxuIiwiLyohXHJcbiAqIEBuYW1lIEphdmFTY3JpcHQvTm9kZUpTIE1lcmdlIHYxLjIuMVxyXG4gKiBAYXV0aG9yIHllaWtvc1xyXG4gKiBAcmVwb3NpdG9yeSBodHRwczovL2dpdGh1Yi5jb20veWVpa29zL2pzLm1lcmdlXHJcblxyXG4gKiBDb3B5cmlnaHQgMjAxNCB5ZWlrb3MgLSBNSVQgbGljZW5zZVxyXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL3llaWtvcy9qcy5tZXJnZS9tYXN0ZXIvTElDRU5TRVxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24oaXNOb2RlKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIG9uZSBvciBtb3JlIG9iamVjdHMgXHJcblx0ICogQHBhcmFtIGJvb2w/IGNsb25lXHJcblx0ICogQHBhcmFtIG1peGVkLC4uLiBhcmd1bWVudHNcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHR2YXIgUHVibGljID0gZnVuY3Rpb24oY2xvbmUpIHtcclxuXHJcblx0XHRyZXR1cm4gbWVyZ2UoY2xvbmUgPT09IHRydWUsIGZhbHNlLCBhcmd1bWVudHMpO1xyXG5cclxuXHR9LCBwdWJsaWNOYW1lID0gJ21lcmdlJztcclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0cyByZWN1cnNpdmVseSBcclxuXHQgKiBAcGFyYW0gYm9vbD8gY2xvbmVcclxuXHQgKiBAcGFyYW0gbWl4ZWQsLi4uIGFyZ3VtZW50c1xyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblxyXG5cdFB1YmxpYy5yZWN1cnNpdmUgPSBmdW5jdGlvbihjbG9uZSkge1xyXG5cclxuXHRcdHJldHVybiBtZXJnZShjbG9uZSA9PT0gdHJ1ZSwgdHJ1ZSwgYXJndW1lbnRzKTtcclxuXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ2xvbmUgdGhlIGlucHV0IHJlbW92aW5nIGFueSByZWZlcmVuY2VcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblxyXG5cdFB1YmxpYy5jbG9uZSA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcblxyXG5cdFx0dmFyIG91dHB1dCA9IGlucHV0LFxyXG5cdFx0XHR0eXBlID0gdHlwZU9mKGlucHV0KSxcclxuXHRcdFx0aW5kZXgsIHNpemU7XHJcblxyXG5cdFx0aWYgKHR5cGUgPT09ICdhcnJheScpIHtcclxuXHJcblx0XHRcdG91dHB1dCA9IFtdO1xyXG5cdFx0XHRzaXplID0gaW5wdXQubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yIChpbmRleD0wO2luZGV4PHNpemU7KytpbmRleClcclxuXHJcblx0XHRcdFx0b3V0cHV0W2luZGV4XSA9IFB1YmxpYy5jbG9uZShpbnB1dFtpbmRleF0pO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcclxuXHJcblx0XHRcdG91dHB1dCA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yIChpbmRleCBpbiBpbnB1dClcclxuXHJcblx0XHRcdFx0b3V0cHV0W2luZGV4XSA9IFB1YmxpYy5jbG9uZShpbnB1dFtpbmRleF0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBNZXJnZSB0d28gb2JqZWN0cyByZWN1cnNpdmVseVxyXG5cdCAqIEBwYXJhbSBtaXhlZCBpbnB1dFxyXG5cdCAqIEBwYXJhbSBtaXhlZCBleHRlbmRcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblxyXG5cdGZ1bmN0aW9uIG1lcmdlX3JlY3Vyc2l2ZShiYXNlLCBleHRlbmQpIHtcclxuXHJcblx0XHRpZiAodHlwZU9mKGJhc2UpICE9PSAnb2JqZWN0JylcclxuXHJcblx0XHRcdHJldHVybiBleHRlbmQ7XHJcblxyXG5cdFx0Zm9yICh2YXIga2V5IGluIGV4dGVuZCkge1xyXG5cclxuXHRcdFx0aWYgKHR5cGVPZihiYXNlW2tleV0pID09PSAnb2JqZWN0JyAmJiB0eXBlT2YoZXh0ZW5kW2tleV0pID09PSAnb2JqZWN0Jykge1xyXG5cclxuXHRcdFx0XHRiYXNlW2tleV0gPSBtZXJnZV9yZWN1cnNpdmUoYmFzZVtrZXldLCBleHRlbmRba2V5XSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRiYXNlW2tleV0gPSBleHRlbmRba2V5XTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGJhc2U7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0c1xyXG5cdCAqIEBwYXJhbSBib29sIGNsb25lXHJcblx0ICogQHBhcmFtIGJvb2wgcmVjdXJzaXZlXHJcblx0ICogQHBhcmFtIGFycmF5IGFyZ3ZcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHRmdW5jdGlvbiBtZXJnZShjbG9uZSwgcmVjdXJzaXZlLCBhcmd2KSB7XHJcblxyXG5cdFx0dmFyIHJlc3VsdCA9IGFyZ3ZbMF0sXHJcblx0XHRcdHNpemUgPSBhcmd2Lmxlbmd0aDtcclxuXHJcblx0XHRpZiAoY2xvbmUgfHwgdHlwZU9mKHJlc3VsdCkgIT09ICdvYmplY3QnKVxyXG5cclxuXHRcdFx0cmVzdWx0ID0ge307XHJcblxyXG5cdFx0Zm9yICh2YXIgaW5kZXg9MDtpbmRleDxzaXplOysraW5kZXgpIHtcclxuXHJcblx0XHRcdHZhciBpdGVtID0gYXJndltpbmRleF0sXHJcblxyXG5cdFx0XHRcdHR5cGUgPSB0eXBlT2YoaXRlbSk7XHJcblxyXG5cdFx0XHRpZiAodHlwZSAhPT0gJ29iamVjdCcpIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIGl0ZW0pIHtcclxuXHJcblx0XHRcdFx0aWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHR2YXIgc2l0ZW0gPSBjbG9uZSA/IFB1YmxpYy5jbG9uZShpdGVtW2tleV0pIDogaXRlbVtrZXldO1xyXG5cclxuXHRcdFx0XHRpZiAocmVjdXJzaXZlKSB7XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBtZXJnZV9yZWN1cnNpdmUocmVzdWx0W2tleV0sIHNpdGVtKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRyZXN1bHRba2V5XSA9IHNpdGVtO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHR5cGUgb2YgdmFyaWFibGVcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqXHJcblx0ICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS90eXBlb2Z2YXJcclxuXHQgKi9cclxuXHJcblx0ZnVuY3Rpb24gdHlwZU9mKGlucHV0KSB7XHJcblxyXG5cdFx0cmV0dXJuICh7fSkudG9TdHJpbmcuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKGlzTm9kZSkge1xyXG5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gUHVibGljO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdHdpbmRvd1twdWJsaWNOYW1lXSA9IFB1YmxpYztcclxuXHJcblx0fVxyXG5cclxufSkodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpOyIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGRlZmF1bHRDb25maWcgPSB7fSkge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGNob2ljZXM6IFtdLFxuXHRcdFx0bmFtZTogJycsXG4gICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG5cdFx0fSwgZGVmYXVsdENvbmZpZyk7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHR5cGVvZiBwcm9wcy52YWx1ZSAhPSB1bmRlZmluZWQgPyBwcm9wcy52YWx1ZSA6ICcnLFxuICAgICAgZXJyb3I6IG51bGwsXG5cdFx0fTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICB9XG5cblx0dmFsaWRhdGUoeyBzaG93RXJyb3JzIH0pIHtcblx0XHRsZXQgaXNWYWxpZCA9IHRoaXMuY29uZmlnLnJlcXVpcmVkID8gISF0aGlzLnN0YXRlLnZhbHVlIDogdHJ1ZTtcbiAgICBsZXQgZXJyb3IgPSAnJztcbiAgICBpZiAoIWlzVmFsaWQgJiYgc2hvd0Vycm9ycykgZXJyb3IgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1ZhbGlkLCBlcnJvciB9KVxuXHRcdHJldHVybiBpc1ZhbGlkO1xuXHR9XG5cblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuXHRcdGxldCBzZWxmID0gdGhpcztcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcblx0XHRzZWxmLnNldFN0YXRlKGRhdGEsICgpID0+IHtcbiAgICAgIHNlbGYudmFsaWRhdGUoe30pO1xuICAgIH0pXG5cdFx0aWYgKHR5cGVvZiBzZWxmLm9uQ2hhbmdlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdHNlbGYub25DaGFuZ2UoeyBuYW1lOiBzZWxmLmNvbmZpZy5uYW1lLCB2YWx1ZTogZGF0YS52YWx1ZSB9KTtcblx0XHR9XG5cdH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQge1xuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGlucHV0IHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsImltcG9ydCB7IEZpbGVQb25kLCByZWdpc3RlclBsdWdpbiB9IGZyb20gXCJyZWFjdC1maWxlcG9uZFwiO1xuLy8gVE9ETzogZGl0IGdhYXQgbWlzIG9tZGF0IHdlYnBhY2sgbnUgZ2VlbiBjc3MgbHVzdFxuLy8gaW1wb3J0IFwiZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5taW4uY3NzXCI7XG4vLyBtb2V0IGZpbGVwb25kLXBvbHlmaWxsIG9vayBub2c/XG5pbXBvcnQgRmlsZXBvbmRQbHVnaW5JbWFnZVByZXZpZXcgZnJvbSBcImZpbGVwb25kLXBsdWdpbi1pbWFnZS1wcmV2aWV3XCI7XG5pbXBvcnQgRmlsZXBvbmRQbHVnaW5GaWxlVmFsaWRhdGVUeXBlIGZyb20gXCJmaWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS10eXBlXCI7XG5pbXBvcnQgRmlsZXBvbmRQbHVnaW5GaWxlVmFsaWRhdGVTaXplIGZyb20gXCJmaWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS1zaXplXCI7XG5pbXBvcnQgRmlsZXBvbmRQbHVnaW5GaWxlUG9zdGVyIGZyb20gXCJmaWxlcG9uZC1wbHVnaW4tZmlsZS1wb3N0ZXJcIjtcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG4vLyBSZWdpc3RlciB0aGUgcGx1Z2luc1xucmVnaXN0ZXJQbHVnaW4oRmlsZXBvbmRQbHVnaW5JbWFnZVByZXZpZXcsIEZpbGVwb25kUGx1Z2luRmlsZVZhbGlkYXRlVHlwZSwgRmlsZXBvbmRQbHVnaW5GaWxlVmFsaWRhdGVTaXplLCBGaWxlcG9uZFBsdWdpbkZpbGVQb3N0ZXIpO1xuXG4vLyBPdXIgYXBwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50SW1hZ2VVcGxvYWQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICBuYW1lOiAnaW1hZ2UnLFxuICAgICAgYWxsb3dNdWx0aXBsZTogZmFsc2UsXG5cdFx0XHRpbWFnZXNlcnZlcjoge1xuXHRcdFx0XHRwcm9jZXNzOiAnL2ltYWdlJyxcblx0XHRcdFx0ZmV0Y2g6ICcvaW1hZ2UnXG5cdFx0XHR9LFxuICAgIH0pO1xuXG4gICAgdmFyIHVwbG9hZGVkRmlsZXMgPSBbXTtcbiAgICBsZXQgdmFsdWUgPSBwcm9wcy52YWx1ZSB8fCBbXTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gW3ZhbHVlXTtcbiAgICB2YWx1ZS5mb3JFYWNoKChpbWFnZSkgPT4ge1xuICAgICAgbGV0IHNyYyA9IHR5cGVvZiBpbWFnZSA9PSAnb2JqZWN0JyA/IGltYWdlLnNyYyA6IGltYWdlO1xuICAgICAgdXBsb2FkZWRGaWxlcy5wdXNoKHtcbiAgICAgICAgc291cmNlOiB7IHVybDogc3JjIH0sXG4gICAgICAgIG9wdGlvbnMgOiB7XG4gICAgICAgICAgdHlwZTogJ2xvY2FsJyxcbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICBuYW1lOiBzcmMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgcG9zdGVyOiBzcmMsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVwbG9hZGVkRmlsZXM6IHVwbG9hZGVkRmlsZXMsXG4gICAgfVxuXG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICBsZXQgaXNWYWxpZCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLmltYWdldXBsb2FkZXIgJiYgdGhpcy5pbWFnZXVwbG9hZGVyLmdldEZpbGVzICkge1xuXHRcdFx0dmFyIGltYWdlcyA9IHRoaXMuaW1hZ2V1cGxvYWRlci5nZXRGaWxlcygpO1xuXHRcdFx0aW1hZ2VzLmZvckVhY2goZnVuY3Rpb24oaW1hZ2UpIHtcblx0XHRcdFx0aWYgKCFpbWFnZS5zZXJ2ZXJJZCkge1xuXHRcdFx0XHRcdGlzVmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuICAgIHJldHVybiBpc1ZhbGlkO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgfVxuXG4gIHVwZGF0ZVVwbG9hZGVkRmlsZXMoeyBhZGRGaWxlLCByZW1vdmVGaWxlLCBuZXh0IH0pIHtcblx0XHRpZiAoIHRoaXMuaW1hZ2V1cGxvYWRlciAmJiB0aGlzLmltYWdldXBsb2FkZXIuZ2V0RmlsZXMgKSB7XG4gICAgICBsZXQgY3VycmVudCA9IHRoaXMuaW1hZ2V1cGxvYWRlci5nZXRGaWxlcygpO1xuICAgICAgaWYgKHJlbW92ZUZpbGUpIHtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuZmlsdGVyKGZpbGUgPT4gZmlsZS5zZXJ2ZXJJZCAhPSByZW1vdmVGaWxlLnNlcnZlcklkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB1cGxvYWRlZEZpbGVzOiBjdXJyZW50Lm1hcChmaWxlSXRlbSA9PiBmaWxlSXRlbS5maWxlKSB9LCAoKSA9PiB7XG4gICAgICAgIGlmIChuZXh0KSBuZXh0KGN1cnJlbnQpO1xuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICB1cGRhdGVWYWx1ZShmaWxlcykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgdmFsdWUgPSBbXTtcbiAgICB2YXIgYXNKc29uID0gc2VsZi5jb25maWcuYXMgJiYgc2VsZi5jb25maWcuYXMgPT0gJ2pzb24nO1xuXHRcdGZpbGVzLmZvckVhY2goKGltYWdlKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgc2VydmVySWQgPSB0eXBlb2YgaW1hZ2Uuc2VydmVySWQgPT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGltYWdlLnNlcnZlcklkKSA6IGltYWdlLnNlcnZlcklkO1xuXHRcdFx0XHR2YWx1ZS5wdXNoKCBhc0pzb24gPyB7IFwic3JjXCI6IHNlcnZlcklkLnVybCB9IDogc2VydmVySWQudXJsICApXG5cdFx0XHR9IGNhdGNoKGVycikgeyBjb25zb2xlLmxvZyhlcnIpIH1cblx0XHR9KTtcbiAgICBzZWxmLmhhbmRsZU9uQ2hhbmdlKHtuYW1lOiBzZWxmLmNvbmZpZy5uYW1lLCB2YWx1ZX0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIChcbiAgICA8RmlsZVBvbmRcblxuICAgICAgcmVmPXtyZWYgPT4gKHRoaXMuaW1hZ2V1cGxvYWRlciA9IHJlZil9XG4gICAgICBmaWxlcz17dGhpcy5zdGF0ZS51cGxvYWRlZEZpbGVzfVxuXG4gICAgICBvbmluaXQ9e3NlbGYuaW5pdH1cbiAgICAgIG9ucHJvY2Vzc2ZpbGU9eyggZXJyLCBmaWxlICkgPT4gc2VsZi51cGRhdGVVcGxvYWRlZEZpbGVzKHsgYWRkRmlsZTogZmlsZSwgbmV4dDogZmlsZXMgPT4gc2VsZi51cGRhdGVWYWx1ZShmaWxlcykgfSl9XG4gICAgICBvbnJlbW92ZWZpbGU9eyggZXJyLCBmaWxlICkgPT4gc2VsZi51cGRhdGVVcGxvYWRlZEZpbGVzKHsgcmVtb3ZlRmlsZTogZmlsZSwgbmV4dDogZmlsZXMgPT4gc2VsZi51cGRhdGVWYWx1ZShmaWxlcykgfSl9XG4gICAgICAgIFxuICAgICAgbmFtZT17c2VsZi5jb25maWcubmFtZX1cbiAgICAgIHNlcnZlcj17dGhpcy5jb25maWcuaW1hZ2VzZXJ2ZXIucHJvY2Vzc31cbiAgICAgIGFsbG93TXVsdGlwbGU9e3RoaXMuY29uZmlnLmFsbG93TXVsdGlwbGV9XG4gICAgICBcbiAgICAgIC8vIHRvZG86IG1hYWsgZGl0IGFsbGVtYWFsIGNvbmZpZ3VyYWJlbFxuXHRcdFx0YWNjZXB0ZWRGaWxlVHlwZXM9e1snaW1hZ2UvKiddfVxuXHRcdFx0YWxsb3dGaWxlU2l6ZVZhbGlkYXRpb249XCJ0cnVlXCJcbiAgICAgIGFsbG93UmVvcmRlcj17dHJ1ZX1cbiAgICAgIHN0eWxlSXRlbVBhbmVsQXNwZWN0UmF0aW89XCIxXCJcblx0XHRcdG1heEZpbGVTaXplPVwiOG1iXCJcblx0XHRcdG1heEZpbGVzPVwiNVwiXG5cdFx0XHRhbGxvd0Jyb3dzZT1cInRydWVcIlxuXHRcdFx0aW1hZ2VSZXNpemVUYXJnZXRXaWR0aD1cIjgwXCJcblx0XHRcdGltYWdlUmVzaXplVGFyZ2V0SGVpZ2h0PVwiODBcIlxuXHRcdFx0aW1hZ2VDcm9wQXNwZWN0UmF0aW89XCIxNjo5XCJcblx0XHRcdGxhYmVsSWRsZT1cIlNsZWVwIGFmYmVlbGRpbmcoZW4pIG5hYXIgZGV6ZSBwbGVrIG9mIDxzcGFuIGNsYXNzPSdmaWxlcG9uZC0tbGFiZWwtYWN0aW9uJz5LTElLIEhJRVI8L3NwYW4+XCJcblx0XHRcdGxhYmVsSW52YWxpZEZpZWxkPVwiRmllbGQgY29udGFpbnMgaW52YWxpZCBmaWxlc1wiXG5cdFx0XHRsYWJlbEZpbGVXYWl0aW5nRm9yU2l6ZT1cIldhY2h0ZW5kIG9wIGdyb290dGVcIlxuXHRcdFx0bGFiZWxGaWxlU2l6ZU5vdEF2YWlsYWJsZT1cIkdyb290dGUgbmlldCBiZXNjaGlrYmFhclwiXG5cdFx0XHRsYWJlbEZpbGVDb3VudFNpbmd1bGFyPVwiQmVzdGFuZCBpbiBsaWpzdFwiXG5cdFx0XHRsYWJlbEZpbGVDb3VudFBsdXJhbD1cIkJlc3RhbmRlbiBpbiBsaWpzdFwiXG5cdFx0XHRsYWJlbEZpbGVMb2FkaW5nPVwiTGFkZW5cIlxuXHRcdFx0bGFiZWxGaWxlQWRkZWQ9XCJUb2VnZXZvZWdkXCJcblx0XHRcdGxhYmVsRmlsZUxvYWRFcnJvcj1cIkZvdXQgYmlqIGhldCB1cGxvYWRlblwiXG5cdFx0XHRsYWJlbEZpbGVSZW1vdmVkPVwiVmVyd2lqZGVyZFwiXG5cdFx0XHRsYWJlbEZpbGVSZW1vdmVFcnJvcj1cIkZvdXQgYmlqIGhldCB2ZXJ3aWpkZXJlblwiXG5cdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nPVwiTGFkZW5cIlxuXHRcdFx0bGFiZWxGaWxlUHJvY2Vzc2luZ0NvbXBsZXRlPVwiQWZiZWVsZGluZyBnZWxhZGVuXCJcblx0XHRcdGxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkPVwiVXBsb2FkIGNhbmNlbGxlZFwiXG5cdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nRXJyb3I9XCJFcnJvciBkdXJpbmcgdXBsb2FkXCJcblx0XHRcdGxhYmVsRmlsZVByb2Nlc3NpbmdSZXZlcnRFcnJvcj1cIkVycm9yIGR1cmluZyByZXZlcnRcIlxuXHRcdFx0bGFiZWxUYXBUb0NhbmNlbD1cInRhcCB0byBjYW5jZWxcIlxuXHRcdFx0bGFiZWxUYXBUb1JldHJ5PVwidGFwIHRvIHJldHJ5XCJcblx0XHRcdGxhYmVsVGFwVG9VbmRvPVwidGFwIHRvIHVuZG9cIlxuXHRcdFx0bGFiZWxCdXR0b25SZW1vdmVJdGVtPVwiVmVyd2lqZGVyZW5cIlxuXHRcdFx0bGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkPVwiQWJvcnRcIlxuXHRcdFx0bGFiZWxCdXR0b25SZXRyeUl0ZW1Mb2FkPVwiUmV0cnlcIlxuXHRcdFx0bGFiZWxCdXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nPVwiVmVyd2lqZGVyXCJcblx0XHRcdGxhYmVsQnV0dG9uVW5kb0l0ZW1Qcm9jZXNzaW5nPVwiVW5kb1wiXG5cdFx0XHRsYWJlbEJ1dHRvblJldHJ5SXRlbVByb2Nlc3Npbmc9XCJSZXRyeVwiXG5cdFx0XHRsYWJlbEJ1dHRvblByb2Nlc3NJdGVtPVwiVXBsb2FkXCJcblxuICAgIC8+KTtcblxuICB9XG59XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbi8vIFRPRE86IGl0IGlzIHByb2JhYmx5IG5vdCBvayB0byB3cml0ZSB5b3VyIG93biBodG1sIGVkaXRvciwgYnV0IGFmdGVyIGludGVyZ3JhdGluZyBja2VkaXRvciBvciByZWFjdC1ydGUgdGhlIGJ1aWxkIHdhcyAobW9yZSB0aGFuKSB0d2ljZSBhcyBsYXJnZTsgYSBiZXR0dGVyIHNvbHV0aW9uIG11c3QgYmUgcG9zc2libGVcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEhUTUxBcmVhIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQgIHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcblx0ICB9O1xuXG4gICAgdGhpcy5vbktleVVweCA9IHRoaXMub25LZXlVcHguYmluZCh0aGlzKTtcblxuICB9XG5cblx0Y29tcG9uZW50RGlkTW91bnQocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIHZhbHVlID0gdGhpcy5maWx0ZXJIVE1MKHZhbHVlKTtcbiAgICB0aGlzLmlucHV0LmlubmVySFRNTCA9IHZhbHVlO1xuICB9XG5cbiAgZmlsdGVySFRNTCh2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvPChcXC8/XFxzKig/OmEgW14+XSt8YXxifGl8c3Ryb25nfGVtfHB8ZGl2fGJyfHVsfGxpKVxccypcXC8/KT4vZywgXCJbW1skMV1dXVwiKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLzxbXj5dKz4vZywgXCJcIik7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFtcXFtcXFsoW15cXF1dKylcXF1cXF1cXF0vZywgXCI8JDE+XCIpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGV4ZWN1dGVBY3Rpb24oZSwgY29tbWFuZCwgYXJncykge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoY29tbWFuZCxmYWxzZSxhcmdzKTtcbiAgICB0aGlzLm9uS2V5VXAoKTtcbiAgfVxuICBcbiAgb25Gb2N1cyhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cihlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoeyB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICBvbktleVVweCgpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0LmlubmVySFRNTDtcbiAgICB2YWx1ZSA9IHRoaXMuZmlsdGVySFRNTCh2YWx1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlIH0pXG4gICAgaWYgKHRoaXMucHJvcHMub25LZXlVcCkge1xuICAgICAgdGhpcy5wcm9wcy5vbktleVVwKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbnNcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1odG1sLWVkaXRvci1idXR0b24gb3NjLWh0bWwtZWRpdG9yLWJ1dHRvbi1ib2xkXCIgb25Nb3VzZURvd249e2UgPT4gdGhpcy5leGVjdXRlQWN0aW9uKGUsICdib2xkJyl9PiZuYnNwOzwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbiBvc2MtaHRtbC1lZGl0b3ItYnV0dG9uLWl0YWxpY1wiIG9uTW91c2VEb3duPXtlID0+IHRoaXMuZXhlY3V0ZUFjdGlvbihlLCAnaXRhbGljJyl9PiZuYnNwOzwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbiBvc2MtaHRtbC1lZGl0b3ItYnV0dG9uLWluc2VydHVub3JkZXJlZGxpc3RcIiBvbk1vdXNlRG93bj17ZSA9PiB0aGlzLmV4ZWN1dGVBY3Rpb24oZSwgJ2luc2VydHVub3JkZXJlZGxpc3QnKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3ItYnV0dG9uIG9zYy1odG1sLWVkaXRvci1idXR0b24tY3JlYXRlbGlua1wiIG9uTW91c2VEb3duPXtlID0+IHRoaXMuZXhlY3V0ZUFjdGlvbihlLCAnY3JlYXRlbGluaycsIHByb21wdCgnTGFuayBuYWFyJywnaHR0cDovLycpKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1odG1sLWVkaXRvci1jb250ZW50XCIgY29udGVudEVkaXRhYmxlPXt0cnVlfVxuICAgICAgICAgICAgIG9uRm9jdXM9eyBlID0+IHRoaXMub25Gb2N1cyhlKX1cbiAgICAgICAgICAgICBvbkJsdXI9eyBlID0+IHRoaXMub25CbHVyKGUpfVxuICAgICAgICAgICAgIG9uS2V5VXA9eyBlID0+IHRoaXMub25LZXlVcHgoKX1cbiAgICAgICAgICAgICAvLyBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuc3RhdGUudmFsdWUgfX1cbiAgICAgICAgICAgICByZWY9e2VsID0+ICh0aGlzLmlucHV0ID0gZWwpfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIEVkaXRCdXR0b24ocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBrZXk9e3Byb3BzLmNtZH1cbiAgICAgIG9uTW91c2VEb3duPXtldnQgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsgLy8gQXZvaWRzIGxvb3NpbmcgZm9jdXMgZnJvbSB0aGUgZWRpdGFibGUgYXJlYVxuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChwcm9wcy5jbWQsIGZhbHNlLCBwcm9wcy5hcmcpOyAvLyBTZW5kIHRoZSBjb21tYW5kIHRvIHRoZSBicm93c2VyXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtwcm9wcy5uYW1lIHx8IHByb3BzLmNtZH1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy9pbXBvcnQgQ0tFZGl0b3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS1yZWFjdCc7XG4vL2ltcG9ydCBDbGFzc2ljRWRpdG9yIGZyb20gJ0Bja2VkaXRvci9ja2VkaXRvcjUtYnVpbGQtY2xhc3NpYyc7XG5pbXBvcnQgSFRNTEFyZWEgZnJvbSAnLi9odG1sYXJlYS5qc3gnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1maWVsZElucHV0V2l0aENvdW50ZXIgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG5cdFx0XHRuYW1lOiAndGVrc3QnLFxuXHRcdFx0aW5wdXRUeXBlOiAnaW5wdXQnLFxuXHRcdFx0bWluTGVuZ3RoOiA1LFxuXHRcdFx0bWF4TGVuZ3RoOiAxMDI0LFxuICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdHNlbGYuaWQgPSBwcm9wcy5pZCB8fCAnb3NjLWZvcm1maWVsZHMtcGxhaW50ZXh0LXdpdGgtY291bnRlci0nICsgcGFyc2VJbnQoIDEwMDAwMDAgKiBNYXRoLnJhbmRvbSgpIClcblxuICAgIHNlbGYuc3RhdGUgPSB7XG5cdFx0XHRmb2N1c2VkOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSB8fCAnJyxcblx0XHRcdHZhbHVlTGVuZ3RoOiBwcm9wcy52YWx1ZSAmJiBwcm9wcy52YWx1ZS5sZW5ndGggfHwgMCxcblx0XHR9O1xuXG4gICAgc2VsZi5rZXkgPSBwcm9wcy51c2VLZXkgfHwgKCBzZWxmLmlkIHx8ICdvc2MtaW5wdXQtd2l0aC1jb3VudGVyLScgKSArIHBhcnNlSW50KCAxMDAwMDAwMCAqIE1hdGgucmFuZG9tICk7XG5cbiAgICB0aGlzLm9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2U7XG5cbiAgICBzZWxmLmhhbmRsZU9uQ2hhbmdlID0gc2VsZi5oYW5kbGVPbkNoYW5nZS5iaW5kKHRoaXMpXG4gICAgc2VsZi5vbklucHV0Rm9jdXMgPSBzZWxmLm9uSW5wdXRGb2N1cy5iaW5kKHRoaXMpXG4gICAgc2VsZi5vbklucHV0Qmx1ciA9IHNlbGYub25JbnB1dEJsdXIuYmluZCh0aGlzKVxuICAgIHNlbGYub25JbnB1dEtleVVwID0gc2VsZi5vbklucHV0S2V5VXAuYmluZCh0aGlzKVxuXG4gIH1cblxuXHRpc1ZhbGlkKCkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLmlzVmFsaWQgPSB0cnVlO1xuXHRcdHN0YXRlLndhcm5pbmcgPSBudWxsO1xuXHRcdGlmICh0aGlzLnN0YXRlLnZhbHVlTGVuZ3RoIDwgdGhpcy5jb25maWcubWluTGVuZ3RoKSB7XG5cdFx0XHRzdGF0ZS53YXJuaW5nID0gYERlIHRla3N0IGlzIHRlIGtvcnRgO1xuXHRcdFx0c3RhdGUuaXNWYWxpZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zdGF0ZS52YWx1ZUxlbmd0aCA+IHRoaXMuY29uZmlnLm1heExlbmd0aCkge1xuXHRcdFx0c3RhdGUud2FybmluZyA9IGBEZSB0ZWtzdCBpcyB0ZSBsYW5nYDtcblx0XHRcdHN0YXRlLmlzVmFsaWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSlcblx0XHRyZXR1cm4gc3RhdGUuaXNWYWxpZDtcbiAgfVxuXG5cdHZhbGlkYXRlKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoeyBzaG93V2FybmluZzogdHJ1ZSB9KVxuXHRcdHJldHVybiB0aGlzLmlzVmFsaWQoKTtcblx0fVxuICBcblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuXHRcdHRoaXMuc2V0U3RhdGUoZGF0YSlcblx0XHRpZiAodHlwZW9mIHRoaXMub25DaGFuZ2UgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5vbkNoYW5nZSh7IG5hbWU6IHRoaXMuY29uZmlnLm5hbWUsIHZhbHVlOiBkYXRhLnZhbHVlIH0pO1xuXHRcdH1cblx0fVxuXG5cdG9uSW5wdXRGb2N1cygpIHtcblx0XHRsZXQgc3RhdGUgPSB7fTtcblx0XHRzdGF0ZS5mb2N1c2VkID0gdHJ1ZTtcblx0XHRzdGF0ZS5zaG93V2FybmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUpXG5cdH1cblxuXHRvbklucHV0Qmx1cigpIHtcblx0XHRsZXQgc3RhdGUgPSB7fTtcblx0XHRzdGF0ZS5mb2N1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSlcblx0fVxuXG5cdG9uSW5wdXRLZXlVcCh2YWx1ZSkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLnZhbHVlID0gdmFsdWUgfHwgdGhpcy5pbnB1dC52YWx1ZTtcblx0XHRsZXQgdmFsdWVMZW5ndGggPSBzdGF0ZS52YWx1ZS5sZW5ndGg7XG5cdFx0c3RhdGUudmFsdWVMZW5ndGggPSB2YWx1ZUxlbmd0aDtcblx0XHRzdGF0ZS5pc1ZhbGlkID0gdmFsdWVMZW5ndGggPj0gdGhpcy5jb25maWcubWluTGVuZ3RoICYmIHZhbHVlTGVuZ3RoIDw9IHRoaXMuY29uZmlnLm1heExlbmd0aDtcblx0XHR0aGlzLnNldFN0YXRlKHN0YXRlKVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0bGV0IGNvdW50ZXIgPSBudWxsO1xuXHRcdGxldCB3YXJuaW5nID0gbnVsbDtcblx0XHRpZiAoc2VsZi5zdGF0ZS5mb2N1c2VkKSB7XG5cdFx0XHRpZiAoc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aCA8IHNlbGYuY29uZmlnLm1pbkxlbmd0aCkge1xuXHRcdFx0XHRjb3VudGVyID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tY291bnRlciBvc2MtZm9ybS1lcnJvclwiPk5vZyBtaW5pbWFhbCA8c3BhbiBjbGFzc05hbWU9XCJcIj57c2VsZi5jb25maWcubWluTGVuZ3RoIC0gc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aH08L3NwYW4+IHRla2VuczwvZGl2Pilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBlcnJvciA9IHNlbGYuc3RhdGUudmFsdWVMZW5ndGggPiBzZWxmLmNvbmZpZy5tYXhMZW5ndGggPyAnb3NjLWZvcm0tZXJyb3InIDogJyc7XG5cdFx0XHRcdGNvdW50ZXIgPSAoPGRpdiBjbGFzc05hbWU9eydvc2MtZm9ybS1jb3VudGVyICcgKyBlcnJvcn0+SmUgaGVidCBub2cgPHNwYW4gY2xhc3NOYW1lPVwiXCI+e3NlbGYuY29uZmlnLm1heExlbmd0aCAtIHNlbGYuc3RhdGUudmFsdWVMZW5ndGh9PC9zcGFuPiB0ZWtlbnMgb3Zlci48L2Rpdj4pXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNlbGYuc3RhdGUuc2hvd1dhcm5pbmcgJiYgc2VsZi5zdGF0ZS53YXJuaW5nKSB7XG5cdFx0XHR3YXJuaW5nID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0td2FybmluZ1wiIHJlZj17IGVsID0+IHRoaXNbJ2Zvcm0td2FybmluZyddID0gZWwgIH0+e3NlbGYuc3RhdGUud2FybmluZ308L2Rpdj4pXG5cdFx0fVxuXG4gICAgbGV0IGlucHV0SFRNTCA9IG51bGw7XG5cbiAgICBzd2l0Y2goc2VsZi5jb25maWcuaW5wdXRUeXBlKSB7XG4gICAgICAgIFxuICAgICAgY2FzZSAnaHRtbGFyZWEnOlxuICAgICAgICBpbnB1dEhUTUwgPSAoXG4gICAgICAgICAgPEhUTUxBcmVhXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfVxuICAgICAgICAgICAgb25Gb2N1cz17c2VsZi5vbklucHV0Rm9jdXN9XG4gICAgICAgICAgICBvbkJsdXI9e3NlbGYub25JbnB1dEJsdXJ9XG4gICAgICAgICAgICBvbktleVVwPXtzZWxmLm9uSW5wdXRLZXlVcH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgICAvLyBpbnB1dEhUTUwgPSAoXG4gICAgICAgIC8vICAgPENLRWRpdG9yXG4gICAgICAgIC8vICAgICBlZGl0b3I9eyBDbGFzc2ljRWRpdG9yIH1cbiAgICAgICAgLy8gICAgIGNvbmZpZz17eyB0b29sYmFyOiBbICdoMycsICdib2xkJywgJ2l0YWxpYycsICdsaW5rJyBdIH19XG4gICAgICAgIC8vICAgICBkYXRhPXt0aGlzLnN0YXRlLnZhbHVlfVxuICAgICAgICAvLyAgICAgb25Jbml0PXsgZWRpdG9yID0+IHtcbiAgICAgICAgLy8gICAgICAgLy8gVE9ETzogYmV0ZXJlIHNlbGVjdG9yXG4gICAgICAgIC8vICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jay1jb250ZW50JykuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vICAgICAgICAgc2VsZi5vbklucHV0S2V5VXAoZSwgZWRpdG9yLmdldERhdGEoKSlcbiAgICAgICAgLy8gICAgICAgfSlcbiAgICAgICAgLy8gICAgIH19XG4gICAgICAgIC8vICAgICBvbkNoYW5nZT17KCBldmVudCwgZWRpdG9yICkgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBlZGl0b3IuZ2V0RGF0YSgpIH0pfVxuICAgICAgICAvLyAgICAgb25Gb2N1cz17ZSA9PiBzZWxmLm9uSW5wdXRGb2N1cyhlKX1cbiAgICAgICAgLy8gICAgIG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfVxuICAgICAgICAvLyAgIC8+XG4gICAgICAgIC8vICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgaW5wdXRIVE1MID0gKFxuXHRcdFx0XHQgIDx0ZXh0YXJlYSBrZXk9e3NlbGYua2V5fSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfSB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSBvbktleVVwPXtlID0+IHNlbGYub25JbnB1dEtleVVwKCl9IG9uRm9jdXM9e2UgPT4gc2VsZi5vbklucHV0Rm9jdXMoZSl9IG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfT48L3RleHRhcmVhPlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW5wdXRIVE1MID0gKFxuXHRcdFx0XHQgIDxpbnB1dCBrZXk9e3NlbGYua2V5fSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfSB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSBvbktleVVwPXtlID0+IHNlbGYub25JbnB1dEtleVVwKCl9IG9uRm9jdXM9e2UgPT4gc2VsZi5vbklucHV0Rm9jdXMoZSl9IG9uQmx1cj17ZSA9PiBzZWxmLm9uSW5wdXRCbHVyKGUpfT48L2lucHV0PlxuICAgICAgICApO1xuXG4gICAgfVxuXHRcdFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGlkPXtzZWxmLmlkfSByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSBjbGFzc05hbWU9XCJvc2MtaW5wdXQtd2l0aC1jb3VudGVyXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZmVlZGJhY2tcIj5cblx0XHRcdFx0XHR7aW5wdXRIVE1MfVxuXHRcdFx0XHRcdHtjb3VudGVyfVxuXHRcdFx0XHRcdHt3YXJuaW5nfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCBmcm9tICcuL2RlZmF1bHQtaW5wdXQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRSYWRpb3MgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yIG9zYy1mb3JtLWZpZWxkLWVycm9yXCI+SmUgaGVidCBub2cgZ2VlbiBrZXV6ZSBnZW1hYWt0PC9kaXY+KVxuICAgIH1cblxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpb3NcIj5cbiAgICAgICAge3NlbGYuY29uZmlnLmNob2ljZXMubWFwKCBjaG9pY2UgPT4ge1xuICAgICAgICAgIGlmIChjaG9pY2UuZGFuZ2Vyb3VzRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpby1jb250YWluZXJcIiBrZXk9e2Nob2ljZS52YWx1ZX0+PGRpdiBjbGFzc05hbWU9e2Bvc2MtcmFkaW8taW5wdXQkeyBzZWxmLnN0YXRlLnZhbHVlID09IGNob2ljZS52YWx1ZSA/ICcgb3NjLXJhZGlvLWlucHV0LWNoZWNrZWQnIDogJyd9YH0+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9e3NlbGYuZGl2SWR9IHZhbHVlPXtjaG9pY2UudmFsdWV9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogY2hvaWNlLnZhbHVlIH0pfSAvPjwvZGl2PjxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLXRleHRcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNob2ljZS5kYW5nZXJvdXNEZXNjcmlwdGlvbiB9fS8+PC9kaXY+XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yYWRpby1jb250YWluZXJcIiBrZXk9e2Nob2ljZS52YWx1ZX0+PGRpdiBjbGFzc05hbWU9e2Bvc2MtcmFkaW8taW5wdXQkeyBzZWxmLnN0YXRlLnZhbHVlID09IGNob2ljZS52YWx1ZSA/ICcgb3NjLXJhZGlvLWlucHV0LWNoZWNrZWQnIDogJyd9YH0+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9e3NlbGYuZGl2SWR9IHZhbHVlPXtjaG9pY2UudmFsdWV9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogY2hvaWNlLnZhbHVlIH0pfSAvPjwvZGl2PjxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLXRleHRcIj57Y2hvaWNlLmRhbmdlcm91c0Rlc2NyaXB0aW9uID8gbnVsbCA6IGNob2ljZS5kZXNjcmlwdGlvbiB8fCBjaG9pY2UudGl0bGUgfHwgY2hvaWNlLnZhbHVlfTwvZGl2PjwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgfSl9XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UG9zdGNvZGUgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0dmFsaWRhdGUoeyBzaG93RXJyb3JzIH0pIHtcblx0XHRsZXQgaXNWYWxpZCA9IHRydWU7XG4gICAgbGV0IGVycm9yID0gJyc7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnZhbHVlIHx8ICF0aGlzLnN0YXRlLnZhbHVlLm1hdGNoKC9eXFxzKlxcZHs0fVxccypbYS16QS1aXVthLXpBLVpdXFxzKiQvKSkge1xuICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgaWYgKHNob3dFcnJvcnMpIGVycm9yID0gJ0RpdCBpcyBnZWVuIHBvc3Rjb2RlJztcbiAgICB9XG4gICAgaWYgKHRoaXMuY29uZmlnLnJlcXVpcmVkICYmICF0aGlzLnN0YXRlLnZhbHVlKSB7XG4gICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICBpZiAoc2hvd0Vycm9ycykgZXJyb3IgPSAnSmUgaGVidCBub2cgbmlldHMgaW5nZXZ1bGQnO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNWYWxpZCwgZXJyb3IgfSlcblxuXHRcdHJldHVybiBpc1ZhbGlkO1xuXHR9XG4gIFxuICByZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3Igb3NjLWZvcm0tZmllbGQtZXJyb3JcIj57c2VsZi5zdGF0ZS5lcnJvcn08L2Rpdj4pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy10ZXh0aW5wdXRcIj5cblx0XHRcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogc2VsZi5pbnB1dC52YWx1ZSB9KX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFNlbGVjdCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBpbml0IHZhbHVlXG4gICAgbGV0IHZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZSB8fCAoIHRoaXMuY29uZmlnLmNob2ljZXNbMF0gJiYgdGhpcy5jb25maWcuY2hvaWNlc1swXS52YWx1ZSApO1xuICAgIHRoaXMuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZSB9KVxuICB9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yIG9zYy1mb3JtLWZpZWxkLWVycm9yXCI+SmUgaGVidCBub2cgZ2VlbiBrZXV6ZSBnZW1hYWt0PC9kaXY+KVxuICAgIH1cblxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zZWxlY3RcIj5cblx0XHRcdCAgPHNlbGVjdCB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZSB8fCAnJ30gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfT5cbiAgICAgICAgICB7c2VsZi5jb25maWcuY2hvaWNlcy5tYXAoIChjaG9pY2UsIGkpID0+IHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gY2hvaWNlLmRlc2NyaXB0aW9uIHx8IGNob2ljZS50aXRsZSB8fCBjaG9pY2UudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17Y2hvaWNlLnZhbHVlIHx8ICcnfSBrZXk9e2Ake3RleHR9LSR7Y2hvaWNlLnZhbHVlfS0ke2l9YH0+e3RleHR9PC9vcHRpb24+XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFRleHQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yIG9zYy1mb3JtLWZpZWxkLWVycm9yXCI+SmUgaGVidCBub2cgbmlldHMgaW5nZXZ1bGQ8L2Rpdj4pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy10ZXh0aW5wdXRcIj5cblx0XHRcdCAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogc2VsZi5pbnB1dC52YWx1ZSB9KX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICB7ZXJyb3JIVE1MfVxuXHRcdCAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFRleHRBcmVhIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQge1xuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBlcnJvckhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLnN0YXRlLmVycm9yKSB7XG4gICAgICBlcnJvckhUTUwgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1lcnJvciBvc2MtZm9ybS1maWVsZC1lcnJvclwiPkplIGhlYnQgbm9nIG5pZXRzIGluZ2V2dWxkPC9kaXY+KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtdGV4dGFyZWFcIj5cblx0XHRcdCAgPHRleHRhcmVhIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Pnt0aGlzLnN0YXRlLnZhbHVlfTwvdGV4dGFyZWE+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEhpZGRlbiBmcm9tICcuL2hpZGRlbi5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50SW1hZ2VVcGxvYWQgZnJvbSAnLi9pbWFnZS11cGxvYWQuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudElucHV0V2l0aENvdW50ZXIgZnJvbSAnLi9pbnB1dC13aXRoLWNvdW50ZXIuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudFJhZGlvcyBmcm9tICcuL3JhZGlvcy5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UG9zdGNvZGUgZnJvbSAnLi9wb3N0Y29kZS5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGZyb20gJy4vc2VsZWN0LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRUZXh0IGZyb20gJy4vdGV4dGlucHV0LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRUZXh0QXJlYSBmcm9tICcuL3RleHRhcmVhLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50Rm9ybUZpZWxkIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgaW5wdXRUeXBlOiBudWxsLFxuXG4gICAgICB2YWxpZGF0ZUFjdGlvbjogbnVsbCxcbiAgICAgIGNoYW5nZUFjdGlvbjogbnVsbCxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcblxuICAgICAgdGl0bGU6IG51bGwsXG4gICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgIGNob2ljZXM6IFtdLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5jb25maWcubmFtZSA9IHNlbGYuY29uZmlnLm5hbWUgfHwgc2VsZi5jb25maWcudGl0bGUudG9Mb3dlckNhc2UoKTtcblxuICAgIHNlbGYuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogcHJvcHMuaW5pdFZhbHVlIHx8IHVuZGVmaW5lZCxcblx0XHR9O1xuXG4gICAgc2VsZi5oYW5kbGVPbkNoYW5nZSA9IHNlbGYuaGFuZGxlT25DaGFuZ2UuYmluZChzZWxmKTtcblxuICAgIHNlbGYub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICB9XG4gIFxuXHR2YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkge1xuICAgIHJldHVybiB0aGlzLmlucHV0ID8gdGhpcy5pbnB1dC52YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkgOiB0cnVlO1xuXHR9XG5cblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiZm9ybSBmaWVsZCBjaGFuZ2VcIiwgZGF0YSk7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLm9uQ2hhbmdlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRoaXMub25DaGFuZ2UoZGF0YSk7XG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHRpdGxlSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLnRpdGxlKSB7XG4gICAgICB0aXRsZUhUTUwgPSA8aDMgY2xhc3NOYW1lPVwib3NjLWZvcm0tdGl0bGVcIj57c2VsZi5jb25maWcudGl0bGV9PC9oMz5cbiAgICB9XG5cbiAgICBsZXQgZGVzY3JpcHRpb25IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcuZGVzY3JpcHRpb24pIHtcbiAgICAgIGRlc2NyaXB0aW9uSFRNTCA9IDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZGVzY3JpcHRpb25cIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uIH19PjwvZGl2PlxuICAgIH1cblxuICAgIGxldCBmaWVsZEhUTUwgPSBudWxsO1xuXG4gICAgc3dpdGNoIChzZWxmLmNvbmZpZy5pbnB1dFR5cGUpIHtcblxuICAgICAgY2FzZSAnaGlkZGVuJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SGlkZGVuIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5zdGF0ZS52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdodG1sLXdpdGgtY291bnRlcic6XG4gICAgICBjYXNlICdodG1sYXJlYS13aXRoLWNvdW50ZXInOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyAuLi5zZWxmLmNvbmZpZywgaW5wdXRUeXBlOiAnaHRtbGFyZWEnIH19IHZhbHVlPXsgdGhpcy5zdGF0ZS52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpbWFnZS11cGxvYWQnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbWFnZVVwbG9hZCBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaW5wdXQtd2l0aC1jb3VudGVyJzpcbiAgICAgIGNhc2UgJ3RleHQtd2l0aC1jb3VudGVyJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCAuLi5zZWxmLmNvbmZpZyB9fSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9zdGNvZGUnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRQb3N0Y29kZSBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncmFkaW9zJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50UmFkaW9zIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5zdGF0ZS52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnbXVsdGlwbGUtY2hvaWNlJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5zdGF0ZS52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50VGV4dCBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRUZXh0QXJlYSBjb25maWc9e3NlbGYuY29uZmlnfSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGV4dGFyZWEtd2l0aC1jb3VudGVyJzpcbiAgICAgICAgZmllbGRIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50SW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgLi4uc2VsZi5jb25maWcsIGlucHV0VHlwZTogJ3RleHRhcmVhJyB9fSB2YWx1ZT17IHRoaXMuc3RhdGUudmFsdWUgfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29uc29sZS5sb2coJ0Zvcm0gZmllbGQgJyArIHNlbGYuY29uZmlnLmlucHV0VHlwZSArICdub3QgeWV0IGltcGxlbWVudGVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgaWQ9e3NlbGYuaWR9IHJlZj17ZWwgPT4gKHNlbGYuaW5zdGFuY2UgPSBlbCl9IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWZpZWxkXCI+XG5cdFx0XHRcdHt0aXRsZUhUTUx9XG5cdFx0XHRcdHtkZXNjcmlwdGlvbkhUTUx9XG5cdFx0XHRcdHtmaWVsZEhUTUx9XG5cdFx0XHQ8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRMaWJzIGZyb20gJy4uLy4uL2xpYnMvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEZvcm1GaWVsZCBmcm9tICcuL2Zvcm0tZmllbGQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRGb3JtIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgdGl0bGU6IG51bGwsXG4gICAgICBpbnRybzogbnVsbCxcbiAgICAgIGZpZWxkczogW10sXG5cdFx0fSk7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgaW5pdFZhbHVlcyA9IHByb3BzLnZhbHVlcztcbiAgICBpZiAoICFpbml0VmFsdWVzICYmIHNlbGYuY29uZmlnLmZpZWxkcyAmJiBzZWxmLmNvbmZpZy5maWVsZHMubGVuZ3RoKSB7XG4gICAgICBpbml0VmFsdWVzID0ge307XG4gICAgICBzZWxmLmNvbmZpZy5maWVsZHMubWFwKChmaWVsZENvbmZpZywgaSkgPT4ge1xuICAgICAgICBsZXQgbmFtZSA9IGZpZWxkQ29uZmlnLm5hbWUgfHwgZmllbGRDb25maWcudGl0bGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaW5pdFZhbHVlc1tuYW1lXSA9IGZpZWxkQ29uZmlnLnZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHNlbGYuc3RhdGUgPSB7XG4gICAgICB2YWx1ZXM6IGluaXRWYWx1ZXMgfHwge30sXG5cdFx0fTtcblxuICAgIHNlbGYuaGFuZGxlT25DaGFuZ2UgPSBzZWxmLmhhbmRsZU9uQ2hhbmdlLmJpbmQodGhpcyk7XG5cbiAgICBzZWxmLmZpZWxkcyA9IFtdO1xuXG4gIH1cbiAgXG5cbiAgZ2V0VmFsdWVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnZhbHVlcztcblx0fVxuXG5cdHZhbGlkYXRlKHsgc2hvd0Vycm9ycywgc2Nyb2xsVG8gfSkge1xuICAgIGxldCBzZWxmPSB0aGlzO1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBsZXQgZmlyc3RJbnZhbGlkID0gbnVsbFxuICAgIHNlbGYuZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICBpZiAoIWZpZWxkLnZhbGlkYXRlKHsgc2hvd0Vycm9ycyB9KSkgeyBcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBpZiAoIWZpcnN0SW52YWxpZCkgZmlyc3RJbnZhbGlkID0gZmllbGQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc2Nyb2xsVG8gJiYgZmlyc3RJbnZhbGlkICYmIGZpcnN0SW52YWxpZC5pbnN0YW5jZSAmJiBmaXJzdEludmFsaWQuaW5zdGFuY2Uuc2Nyb2xsSW50b1ZpZXcpIGZpcnN0SW52YWxpZC5pbnN0YW5jZS5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnfSk7XG4gICAgcmV0dXJuIGlzVmFsaWQ7ICAgIFxuXG5cdH1cblxuXHRoYW5kbGVPbkNoYW5nZShkYXRhKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCB2YWx1ZXMgPSB7IC4uLnRoaXMuc3RhdGUudmFsdWVzIH07XG4gICAgdmFsdWVzW2RhdGEubmFtZV0gPSBkYXRhLnZhbHVlO1xuXHRcdHRoaXMuc2V0U3RhdGUoeyB2YWx1ZXMgfSwgKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQ2hhbmdlID09ICdmdW5jdGlvbicpIHRoaXMucHJvcHMub25DaGFuZ2UoZGF0YSlcbiAgICB9KTtcblx0fVxuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCB0aXRsZUhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy50aXRsZSkge1xuICAgICAgdGl0bGVIVE1MID0gPGgyIGNsYXNzTmFtZT1cIm9zYy1mb3JtLXRpdGxlXCI+e3NlbGYuY29uZmlnLnRpdGxlfTwvaDI+XG4gICAgfVxuXG4gICAgbGV0IGludHJvSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmludHJvKSB7XG4gICAgICBpbnRyb0hUTUwgPSA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWludHJvXCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBzZWxmLmNvbmZpZy5pbnRybyB9fT48L2Rpdj5cbiAgICB9XG5cbiAgICBsZXQgZmllbGRzSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmZpZWxkcyAmJiBzZWxmLmNvbmZpZy5maWVsZHMubGVuZ3RoKSB7XG4gICAgICBmaWVsZHNIVE1MID1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1maWVsZHNcIj5cbiAgICAgICAgICB7IHNlbGYuY29uZmlnLmZpZWxkcy5tYXAoKGZpZWxkQ29uZmlnLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gPE9wZW5TdGFkQ29tcG9uZW50Rm9ybUZpZWxkIGNvbmZpZz17ZmllbGRDb25maWd9IGluaXRWYWx1ZT17ZmllbGRDb25maWcudmFsdWV9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfSBrZXk9e2Bvc2MtZm9ybS1maWVsZC0ke2l9YH0gcmVmPXtlbCA9PiB7IHNlbGYuZmllbGRzW2ldID0gZWw7IH19Lz5cbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgfVxuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgaWQ9e3NlbGYuZGl2SWR9IGNsYXNzTmFtZT1cIm9zYy1mb3JtXCIgcmVmPXtlbCA9PiAoc2VsZi5pbnN0YW5jZSA9IGVsKX0+XG5cdFx0XHRcdHt0aXRsZUhUTUx9XG5cdFx0XHRcdHtpbnRyb0hUTUx9XG5cdFx0XHRcdHtmaWVsZHNIVE1MfVxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICB0b3VjaGVkOiB0aGlzLnByb3BzLnRvdWNoZWQgfHwgZmFsc2UsXG4gICAgfVxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0XG5cbiAgICBpZih0eXBlb2YgdGhpcy5wcm9wcy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlKVxuICAgIH1cbiAgICBcbiAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZSwgdG91Y2hlZDogdHJ1ZX0pXG4gIH1cblxuICBkb1RvdWNoKCkge1xuXG4gICAgaWYodHlwZW9mIHRoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicpe1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSg1MClcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHt0b3VjaGVkOiB0cnVlfSlcblxuICB9XG5cbiAgY2FsY1Byb2dyZXNzKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluXG4gICAgY29uc3QgcHJvZ0luUmFuZ2UgPSB2YWx1ZSAtIG1pblxuICAgIHJldHVybiAoKHByb2dJblJhbmdlKjIpL3JhbmdlKS0xXG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgeyB2YWx1ZSwgdG91Y2hlZCB9ID0gc2VsZi5zdGF0ZVxuICAgIGNvbnN0IHsgbWluLCBtYXgsIHN0ZXAgfSA9IHNlbGYucHJvcHNcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7c2VsZi5wcm9wcy5jbGFzc05hbWV9IG9zYy1zbGlkZXJgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFja1wiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1wcm9ncmVzcy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1wcm9ncmVzc1wiIHN0eWxlPXt7IHRyYW5zZm9ybTogJ3NjYWxlWCgnICsgc2VsZi5jYWxjUHJvZ3Jlc3MobWluLCBtYXgsIHZhbHVlKSArICcpJyB9fT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stZG90LWVuZCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1sZWZ0XCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLWRvdC1zdGFydCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1jZW50ZXJcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stZG90LWVuZCBvc2Mtc2xpZGVyLXRyYWNrLWRvdC1yaWdodFwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J3JhbmdlJyBtaW49e21pbn0gbWF4PXttYXh9IHN0ZXA9e3N0ZXB9IHZhbHVlPXt2YWx1ZX0gb25DbGljaz17KCkgPT4geyBpZiAoIXRvdWNoZWQpIHNlbGYuZG9Ub3VjaCgpOyB9IH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlQ2hhbmdlfSBjbGFzc05hbWU9e3RvdWNoZWQgPyAnb3NjLXNsaWRlci1pbnB1dC1yYW5nZScgOiAnb3NjLXNsaWRlci1pbnB1dC1yYW5nZSBvc2Mtc2xpZGVyLXVudG91Y2hlZCd9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXI7XG4iLCIvLyBwb2x5ZmlsbHNcbi8vaW1wb3J0ICdjb3JlLWpzL2VzL21hcCc7XG4vL2ltcG9ydCAnY29yZS1qcy9lcy9zZXQnO1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgRm9ybSBmcm9tICcuL2NvbXBvbmVudC9mb3JtLmpzeCc7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4vY29tcG9uZW50L2Zvcm0tZmllbGQuanN4JztcbmltcG9ydCBIaWRkZW4gZnJvbSAnLi9jb21wb25lbnQvaGlkZGVuLmpzeCc7XG5pbXBvcnQgSW1hZ2VVcGxvYWQgZnJvbSAnLi9jb21wb25lbnQvaW1hZ2UtdXBsb2FkLmpzeCc7XG5pbXBvcnQgSW5wdXRXaXRoQ291bnRlciBmcm9tICcuL2NvbXBvbmVudC9pbnB1dC13aXRoLWNvdW50ZXIuanN4JztcbmltcG9ydCBQb3N0Y29kZSBmcm9tICcuL2NvbXBvbmVudC9wb3N0Y29kZS5qc3gnO1xuaW1wb3J0IFJhZGlvcyBmcm9tICcuL2NvbXBvbmVudC9yYWRpb3MuanN4JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9jb21wb25lbnQvc2VsZWN0LmpzeCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuL2NvbXBvbmVudC90ZXh0aW5wdXQuanN4JztcbmltcG9ydCBUZXh0YXJlYSBmcm9tICcuL2NvbXBvbmVudC90ZXh0YXJlYS5qc3gnO1xuaW1wb3J0IFNsaWRlciBmcm9tICcuL2NvbXBvbmVudC9zbGlkZXIuanN4JztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgRm9ybSxcbiAgRm9ybUZpZWxkLFxuICBIaWRkZW4sXG4gIEltYWdlVXBsb2FkLFxuICBJbnB1dFdpdGhDb3VudGVyLFxuICBQb3N0Y29kZSxcbiAgUmFkaW9zLFxuICBTZWxlY3QsXG4gIFRleHQsXG4gIFRleHRhcmVhLFxuICBTbGlkZXIsXG59XG5cbi8vIHJlbmRlciB0aGUgYmFzZSBlbGVtZW50XG4vLyBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4vLyAgIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuLy8gICBSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbi8vIH1cbi8vIGV4cG9ydCB7cmVuZGVyRWxlbWVudH1cblxuIiwiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvd1tcIlJlYWN0RE9NXCJdOyB9KCkpOyIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudEltYWdlIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcyk7XG5cblx0XHQvLyBjb25maWdcblx0XHRsZXQgZGVmYXVsdENvbmZpZyA9IHtcbiAgICAgIGFzcGVjdFJhdGlvOiAnMTZ4OScsXG4gICAgICBhbGxvd011bHRpcGxlSW1hZ2VzOiBmYWxzZSxcblx0XHR9O1xuXHRcdHRoaXMuY29uZmlnID0gbWVyZ2UucmVjdXJzaXZlKGRlZmF1bHRDb25maWcsIHRoaXMuY29uZmlnLCB0aGlzLnByb3BzLmNvbmZpZyB8fCB7fSlcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50SW1hZ2VJbmRleDogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBsZXQgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuZGl2SWR9YCkucGFyZW50Tm9kZTtcbiAgICB0aGlzLnNldFN0YXRlKHt3aWR0aDogZWxlbS5vZmZzZXRXaWR0aH0pXG4gIH1cblxuICBzZXRDdXJyZW50SW1hZ2VJbmRleCAod2hpY2gpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtjdXJyZW50SW1hZ2VJbmRleDogd2hpY2h9KVxuICB9XG5cbiAgZ2V0SW1hZ2VzRnJvbVByb3BzKCkge1xuICAgIGxldCBpbWFnZXMgPSB0aGlzLnByb3BzLmltYWdlcyB8fCBbXTtcbiAgICBsZXQgaW1hZ2UgPSB0aGlzLnByb3BzLmltYWdlIHx8IGltYWdlc1t0aGlzLnN0YXRlLmN1cnJlbnRJbWFnZUluZGV4XTtcbiAgICByZXR1cm4gW3RoaXMucHJvcHMuaW1hZ2UsIGltYWdlc107XG4gIH1cblxuICBnZXRJbWFnZVNyYyhpbWFnZSkge1xuICAgIGxldCBpbWFnZVNyYyA9IGltYWdlO1xuICAgIGlmICggdHlwZW9mIGltYWdlID09ICdvYmplY3QnICYmIGltYWdlLnNyYyApIGltYWdlU3JjID0gaW1hZ2Uuc3JjO1xuICAgIHJldHVybiBpbWFnZVNyYztcbiAgfVxuXG4gIGdldEFzcGVjdFJhdGlvRmFjdG9yKCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2lkdGggJiYgdGhpcy5wcm9wcy5oZWlnaHQpIHJldHVybiB0aGlzLnByb3BzLndpZHRoL3RoaXMucHJvcHMuaGVpZ2h0XG4gICAgXG4gICAgbGV0IG1hdGNoID0gdGhpcy5jb25maWcuYXNwZWN0UmF0aW8ubWF0Y2goLyhcXGQrKXgoXFxkKykvKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSAvIG1hdGNoWzJdIDogMTYvOVxuICB9XG5cbiAgZ2V0V2lkdGhIZWlnaHQoKSB7XG4gICAgbGV0IHdpZHRoID0gdGhpcy5wcm9wcy53aWR0aCB8fCB0aGlzLnN0YXRlLndpZHRoO1xuICAgIGxldCBoZWlnaHQgPSB0aGlzLnByb3BzLmhlaWdodCB8fCB3aWR0aCAqICggMSAvIHRoaXMuZ2V0QXNwZWN0UmF0aW9GYWN0b3IoKSApIHx8IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gWyB3aWR0aCwgaGVpZ2h0IF1cbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBpbWFnZXMsIGltYWdlO1xuICAgIFsgaW1hZ2UsIGltYWdlcyBdID0gc2VsZi5nZXRJbWFnZXNGcm9tUHJvcHMoKTtcblxuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgIFsgd2lkdGgsIGhlaWdodCBdID0gc2VsZi5nZXRXaWR0aEhlaWdodCgpO1xuXG4gICAgaWYgKHNlbGYuY29uZmlnLmFsbG93TXVsdGlwbGVJbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gbXVsdGlwbGVcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9e3NlbGYuZGl2SWR9IGNsYXNzTmFtZT17YG9zYy1tdWx0aXBsZS1pbWFnZXMgJHtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnJ31gfT5cbiAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2Utc3BhY2VyXCIgc3R5bGU9e3sgd2lkdGgsIGhlaWdodCB9fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWltYWdlXCIgc3R5bGU9e2ltYWdlID8geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtzZWxmLmdldEltYWdlU3JjKGltYWdlKX0pYCB9IDoge319IGtleT17J2ltYWdlLScgKyBzZWxmLmRpdklkfT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW11bHRpcGxlLWltYWdlcy10aHVtYnNcIiBzdHlsZT17eyBoZWlnaHQ6IDAuMSAqIHNlbGYuc3RhdGUud2lkdGggfX0+XG5cbiAgICAgICAgICAgIHtpbWFnZXMubWFwKCggdGh1bWIsIGkgKSA9PiB7XG4gICAgICAgICAgICAgIGxldCB0aHVtYmhlaWdodCA9IDAuMSAqIHdpZHRoO1xuICAgICAgICAgICAgICBsZXQgdGh1bWJ3aWR0aCA9IHRodW1iaGVpZ2h0ICogc2VsZi5nZXRBc3BlY3RSYXRpb0ZhY3RvcigpO1xuICAgICAgICAgICAgICBsZXQgdGh1bWJsZWZ0ID0gKCB0aHVtYndpZHRoICogIDEuMDUgKSAqIGk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtdGh1bWItc3BhY2VyXCIga2V5PXtgb3NjLWltYWdlLXRodW1iLSR7aX1gfSBzdHlsZT17eyBsZWZ0OiB0aHVtYmxlZnQsIHdpZHRoOiB0aHVtYndpZHRoLCBoZWlnaHQ6IHRodW1iaGVpZ2h0IH19PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtdGh1bWJcIiBzdHlsZT17dGh1bWIgPyB7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3NlbGYuZ2V0SW1hZ2VTcmModGh1bWIpfSlgLCB6SW5kZXg6IDEwLWkgfSA6IHt9fSBvbkNsaWNrPXtlID0+IHNlbGYuc2V0Q3VycmVudEltYWdlSW5kZXgoaSl9PjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBzaW5ndWxhclxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD17c2VsZi5kaXZJZH0gY2xhc3NOYW1lPXtgb3NjLWltYWdlLXNwYWNlciAke3NlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICcnfWB9IHN0eWxlPXt7IHdpZHRoLCBoZWlnaHQgfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2VcIiBzdHlsZT17aW1hZ2UgPyB7IGJhY2tncm91bmRJbWFnZTogYHVybCgke3NlbGYuZ2V0SW1hZ2VTcmMoaW1hZ2UpfSlgIH0gOiB7fX0gb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfSBrZXk9eydpbWFnZS0nICsgc2VsZi5kaXZJZH0+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICAgIFxuICAgIH1cblxuICB9XG5cbn1cbiIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRJbWFnZSBmcm9tICcuL2ltYWdlLmpzeCc7XG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudEltYWdlIHtcblxuICBnZXRJbWFnZXNGcm9tUHJvcHMoKSB7XG5cbiAgICBsZXQgaWRlYSA9IHRoaXMucHJvcHMuaWRlYTtcbiAgICBpZiAoIWlkZWEpIHJldHVybiBbICcnLCBbICcnIF0gXTtcblxuICAgIGxldCBpbWFnZXMgPSAoaWRlYS5leHRyYURhdGEgJiYgaWRlYS5leHRyYURhdGEuaW1hZ2VzKSB8fCBbXTtcbiAgICBsZXQgaW1hZ2UgPSAoaWRlYS5wb3N0ZXJJbWFnZSAmJiBpZGVhLnBvc3RlckltYWdlLmtleSkgfHwgKGlkZWEuZXh0cmFEYXRhICYmIGlkZWEuZXh0cmFEYXRhLmltYWdlcyAmJiBpZGVhLmV4dHJhRGF0YS5pbWFnZXNbdGhpcy5zdGF0ZS5jdXJyZW50SW1hZ2VJbmRleF0pO1xuXG4gICAgcmV0dXJuIFtpbWFnZSwgaW1hZ2VzXVxuXG4gIH1cblxufVxuIiwiLy8gcG9seWZpbGxzXG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIHJlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8vIGltcG9ydCBjc3MgdG8gbWFrZSBzdXJlIGl0IGlzIGdlbmVyYXRlZCBpbiB0aGUgcmVzdWx0XG5pbXBvcnQgJy4vY3NzL2RlZmF1bHQubGVzcyc7XG5cbi8vIHRoZSBtb2R1bGVcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEltYWdlIGZyb20gJy4vY29tcG9uZW50L2ltYWdlLmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRJZGVhSW1hZ2UgZnJvbSAnLi9jb21wb25lbnQvaWRlYS1pbWFnZS5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50SWRlYUltYWdlLnJlbmRlckVsZW1lbnQgPSBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4gIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuXHRSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudElkZWFJbWFnZSBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbn1cblxuZXhwb3J0IHtcbiAgT3BlblN0YWRDb21wb25lbnRJbWFnZSBhcyBkZWZhdWx0LFxuICBPcGVuU3RhZENvbXBvbmVudEltYWdlIGFzIEltYWdlLFxuICBPcGVuU3RhZENvbXBvbmVudElkZWFJbWFnZSBhcyBJZGVhSW1hZ2UsXG59O1xuXG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjUnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24uY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1IsIE1FVEhPRCwgbGVuZ3RoKSB7XG4gIHJldHVybiBiaW5kKGNhbGwsIGdsb2JhbFtDT05TVFJVQ1RPUl0ucHJvdG90eXBlW01FVEhPRF0sIGxlbmd0aCk7XG59O1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiLyohXG4gKiBAb3ZlcnZpZXcgZXM2LXByb21pc2UgLSBhIHRpbnkgaW1wbGVtZW50YXRpb24gb2YgUHJvbWlzZXMvQSsuXG4gKiBAY29weXJpZ2h0IENvcHlyaWdodCAoYykgMjAxNCBZZWh1ZGEgS2F0eiwgVG9tIERhbGUsIFN0ZWZhbiBQZW5uZXIgYW5kIGNvbnRyaWJ1dG9ycyAoQ29udmVyc2lvbiB0byBFUzYgQVBJIGJ5IEpha2UgQXJjaGliYWxkKVxuICogQGxpY2Vuc2UgICBMaWNlbnNlZCB1bmRlciBNSVQgbGljZW5zZVxuICogICAgICAgICAgICBTZWUgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N0ZWZhbnBlbm5lci9lczYtcHJvbWlzZS9tYXN0ZXIvTElDRU5TRVxuICogQHZlcnNpb24gICAzLjMuMVxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbC5FUzZQcm9taXNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG52YXIgX2lzQXJyYXkgPSB1bmRlZmluZWQ7XG5pZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG59IGVsc2Uge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG59XG5cbnZhciBpc0FycmF5ID0gX2lzQXJyYXk7XG5cbnZhciBsZW4gPSAwO1xudmFyIHZlcnR4TmV4dCA9IHVuZGVmaW5lZDtcbnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHVuZGVmaW5lZDtcblxudmFyIGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZVtsZW4gKyAxXSA9IGFyZztcbiAgbGVuICs9IDI7XG4gIGlmIChsZW4gPT09IDIpIHtcbiAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgaWYgKGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICBjdXN0b21TY2hlZHVsZXJGbihmbHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gIGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbn1cblxuZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgYXNhcCA9IGFzYXBGbjtcbn1cblxudmFyIGJyb3dzZXJXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgaXNOb2RlID0gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAoe30pLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbnZhciBpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciByID0gcmVxdWlyZTtcbiAgICB2YXIgdmVydHggPSByKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB1bmRlZmluZWQ7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBfYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAgYFByb21pc2UucmVzb2x2ZWAgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSByZXNvbHZlZCB3aXRoIHRoZVxuICBwYXNzZWQgYHZhbHVlYC4gSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlc29sdmUoMSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKDEpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gdmFsdWUgPT09IDFcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVzb2x2ZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSB2YWx1ZSB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aFxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIGZ1bGZpbGxlZCB3aXRoIHRoZSBnaXZlblxuICBgdmFsdWVgXG4qL1xuZnVuY3Rpb24gcmVzb2x2ZShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygxNik7XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgUEVORElORyA9IHZvaWQgMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcblxudmFyIEdFVF9USEVOX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRoZW4ocHJvbWlzZSkge1xuICB0cnkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICByZXR1cm4gR0VUX1RIRU5fRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gIGFzYXAoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0sICdTZXR0bGU6ICcgKyAocHJvbWlzZS5fbGFiZWwgfHwgJyB1bmtub3duIHByb21pc2UnKSk7XG5cbiAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH1cbiAgfSwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKSB7XG4gIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yICYmIHRoZW4kJCA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUpIHtcbiAgICBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhlbiQkID09PSBHRVRfVEhFTl9FUlJPUikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBHRVRfVEhFTl9FUlJPUi5lcnJvcik7XG4gICAgfSBlbHNlIGlmICh0aGVuJCQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odGhlbiQkKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgc2VsZkZ1bGZpbGxtZW50KCkpO1xuICB9IGVsc2UgaWYgKG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgZ2V0VGhlbih2YWx1ZSkpO1xuICB9IGVsc2Uge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgfVxuXG4gIHB1Ymxpc2gocHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gIHByb21pc2UuX3N0YXRlID0gRlVMRklMTEVEO1xuXG4gIGlmIChwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggIT09IDApIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHByb21pc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm9taXNlLl9zdGF0ZSA9IFJFSkVDVEVEO1xuICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG5cbiAgYXNhcChwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBfc3Vic2NyaWJlcnMgPSBwYXJlbnQuX3N1YnNjcmliZXJzO1xuICB2YXIgbGVuZ3RoID0gX3N1YnNjcmliZXJzLmxlbmd0aDtcblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHVuZGVmaW5lZCxcbiAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gRXJyb3JPYmplY3QoKSB7XG4gIHRoaXMuZXJyb3IgPSBudWxsO1xufVxuXG52YXIgVFJZX0NBVENIX0VSUk9SID0gbmV3IEVycm9yT2JqZWN0KCk7XG5cbmZ1bmN0aW9uIHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgcmV0dXJuIFRSWV9DQVRDSF9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHZhciBoYXNDYWxsYmFjayA9IGlzRnVuY3Rpb24oY2FsbGJhY2spLFxuICAgICAgdmFsdWUgPSB1bmRlZmluZWQsXG4gICAgICBlcnJvciA9IHVuZGVmaW5lZCxcbiAgICAgIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZCxcbiAgICAgIGZhaWxlZCA9IHVuZGVmaW5lZDtcblxuICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICB2YWx1ZSA9IHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpO1xuXG4gICAgaWYgKHZhbHVlID09PSBUUllfQ0FUQ0hfRVJST1IpIHtcbiAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgdmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBjYW5ub3RSZXR1cm5Pd24oKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZGV0YWlsO1xuICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gIH1cblxuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAvLyBub29wXG4gIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgICAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICB0aGlzLnByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgdGhpcy5fZW51bWVyYXRlKCk7XG4gICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBfcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRpb25FcnJvcigpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcignQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5Jyk7XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIHZhciBfaW5wdXQgPSB0aGlzLl9pbnB1dDtcblxuICBmb3IgKHZhciBpID0gMDsgdGhpcy5fc3RhdGUgPT09IFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fZWFjaEVudHJ5KF9pbnB1dFtpXSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGkpIHtcbiAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICB2YXIgcmVzb2x2ZSQkID0gYy5yZXNvbHZlO1xuXG4gIGlmIChyZXNvbHZlJCQgPT09IHJlc29sdmUpIHtcbiAgICB2YXIgX3RoZW4gPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgIGlmIChfdGhlbiA9PT0gdGhlbiAmJiBlbnRyeS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICAgIHRoaXMuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IGVudHJ5O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSkge1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgYyhub29wKTtcbiAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUkJChlbnRyeSk7XG4gICAgICB9KSwgaSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlJCQoZW50cnkpLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uIChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nLS07XG5cbiAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBpKSB7XG4gIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgfSk7XG59O1xuXG4vKipcbiAgYFByb21pc2UuYWxsYCBhY2NlcHRzIGFuIGFycmF5IG9mIHByb21pc2VzLCBhbmQgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoXG4gIGlzIGZ1bGZpbGxlZCB3aXRoIGFuIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlcyBmb3IgdGhlIHBhc3NlZCBwcm9taXNlcywgb3JcbiAgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uIG9mIHRoZSBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBiZSByZWplY3RlZC4gSXQgY2FzdHMgYWxsXG4gIGVsZW1lbnRzIG9mIHRoZSBwYXNzZWQgaXRlcmFibGUgdG8gcHJvbWlzZXMgYXMgaXQgcnVucyB0aGlzIGFsZ29yaXRobS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVzb2x2ZSgyKTtcbiAgbGV0IHByb21pc2UzID0gcmVzb2x2ZSgzKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIFRoZSBhcnJheSBoZXJlIHdvdWxkIGJlIFsgMSwgMiwgMyBdO1xuICB9KTtcbiAgYGBgXG5cbiAgSWYgYW55IG9mIHRoZSBgcHJvbWlzZXNgIGdpdmVuIHRvIGBhbGxgIGFyZSByZWplY3RlZCwgdGhlIGZpcnN0IHByb21pc2VcbiAgdGhhdCBpcyByZWplY3RlZCB3aWxsIGJlIGdpdmVuIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSByZXR1cm5lZCBwcm9taXNlcydzXG4gIHJlamVjdGlvbiBoYW5kbGVyLiBGb3IgZXhhbXBsZTpcblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gcmVzb2x2ZSgxKTtcbiAgbGV0IHByb21pc2UyID0gcmVqZWN0KG5ldyBFcnJvcihcIjJcIikpO1xuICBsZXQgcHJvbWlzZTMgPSByZWplY3QobmV3IEVycm9yKFwiM1wiKSk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVucyBiZWNhdXNlIHRoZXJlIGFyZSByZWplY3RlZCBwcm9taXNlcyFcbiAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAvLyBlcnJvci5tZXNzYWdlID09PSBcIjJcIlxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCBhbGxcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBlbnRyaWVzIGFycmF5IG9mIHByb21pc2VzXG4gIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2hlbiBhbGwgYHByb21pc2VzYCBoYXZlIGJlZW5cbiAgZnVsZmlsbGVkLCBvciByZWplY3RlZCBpZiBhbnkgb2YgdGhlbSBiZWNvbWUgcmVqZWN0ZWQuXG4gIEBzdGF0aWNcbiovXG5mdW5jdGlvbiBhbGwoZW50cmllcykge1xuICByZXR1cm4gbmV3IEVudW1lcmF0b3IodGhpcywgZW50cmllcykucHJvbWlzZTtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJhY2VgIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaCBpcyBzZXR0bGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gc2V0dGxlLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAyJyk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gcmVzdWx0ID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIGl0IHdhcyByZXNvbHZlZCBiZWZvcmUgcHJvbWlzZTFcbiAgICAvLyB3YXMgcmVzb2x2ZWQuXG4gIH0pO1xuICBgYGBcblxuICBgUHJvbWlzZS5yYWNlYCBpcyBkZXRlcm1pbmlzdGljIGluIHRoYXQgb25seSB0aGUgc3RhdGUgb2YgdGhlIGZpcnN0XG4gIHNldHRsZWQgcHJvbWlzZSBtYXR0ZXJzLiBGb3IgZXhhbXBsZSwgZXZlbiBpZiBvdGhlciBwcm9taXNlcyBnaXZlbiB0byB0aGVcbiAgYHByb21pc2VzYCBhcnJheSBhcmd1bWVudCBhcmUgcmVzb2x2ZWQsIGJ1dCB0aGUgZmlyc3Qgc2V0dGxlZCBwcm9taXNlIGhhc1xuICBiZWNvbWUgcmVqZWN0ZWQgYmVmb3JlIHRoZSBvdGhlciBwcm9taXNlcyBiZWNhbWUgZnVsZmlsbGVkLCB0aGUgcmV0dXJuZWRcbiAgcHJvbWlzZSB3aWxsIGJlY29tZSByZWplY3RlZDpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdwcm9taXNlIDInKSk7XG4gICAgfSwgMTAwKTtcbiAgfSk7XG5cbiAgUHJvbWlzZS5yYWNlKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnNcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBwcm9taXNlIDIgYmVjYW1lIHJlamVjdGVkIGJlZm9yZVxuICAgIC8vIHByb21pc2UgMSBiZWNhbWUgZnVsZmlsbGVkXG4gIH0pO1xuICBgYGBcblxuICBBbiBleGFtcGxlIHJlYWwtd29ybGQgdXNlIGNhc2UgaXMgaW1wbGVtZW50aW5nIHRpbWVvdXRzOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgUHJvbWlzZS5yYWNlKFthamF4KCdmb28uanNvbicpLCB0aW1lb3V0KDUwMDApXSlcbiAgYGBgXG5cbiAgQG1ldGhvZCByYWNlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gcHJvbWlzZXMgYXJyYXkgb2YgcHJvbWlzZXMgdG8gb2JzZXJ2ZVxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB3aGljaCBzZXR0bGVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgZmlyc3QgcGFzc2VkXG4gIHByb21pc2UgdG8gc2V0dGxlLlxuKi9cbmZ1bmN0aW9uIHJhY2UoZW50cmllcykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmICghaXNBcnJheShlbnRyaWVzKSkge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGFuIGFycmF5IHRvIHJhY2UuJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAgYFByb21pc2UucmVqZWN0YCByZXR1cm5zIGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBwYXNzZWQgYHJlYXNvbmAuXG4gIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgLy8gQ29kZSBoZXJlIGRvZXNuJ3QgcnVuIGJlY2F1c2UgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQhXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdXSE9PUFMnXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlamVjdFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QW55fSByZWFzb24gdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGguXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIGdpdmVuIGByZWFzb25gLlxuKi9cbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgdGhpcyBpbnN0YW5jZW9mIFByb21pc2UgPyBpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcikgOiBuZWVkc05ldygpO1xuICB9XG59XG5cblByb21pc2UuYWxsID0gYWxsO1xuUHJvbWlzZS5yYWNlID0gcmFjZTtcblByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5Qcm9taXNlLnJlamVjdCA9IHJlamVjdDtcblByb21pc2UuX3NldFNjaGVkdWxlciA9IHNldFNjaGVkdWxlcjtcblByb21pc2UuX3NldEFzYXAgPSBzZXRBc2FwO1xuUHJvbWlzZS5fYXNhcCA9IGFzYXA7XG5cblByb21pc2UucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUHJvbWlzZSxcblxuICAvKipcbiAgICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICAgIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBDaGFpbmluZ1xuICAgIC0tLS0tLS0tXG4gIFxuICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gICAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICAgIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICAgIH0pO1xuICBcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgICB9KTtcbiAgICBgYGBcbiAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQXNzaW1pbGF0aW9uXG4gICAgLS0tLS0tLS0tLS0tXG4gIFxuICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFNpbXBsZSBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IHJlc3VsdDtcbiAgXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgLS0tLS0tLS0tLS0tLS1cbiAgXG4gICAgU3luY2hyb25vdXMgRXhhbXBsZVxuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgbGV0IGF1dGhvciwgYm9va3M7XG4gIFxuICAgIHRyeSB7XG4gICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgXG4gICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICBcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kQXV0aG9yKCkuXG4gICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIHRoZW5cbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgdGhlbjogdGhlbixcblxuICAvKipcbiAgICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgXG4gICAgYGBganNcbiAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkbid0IGZpbmQgdGhhdCBhdXRob3InKTtcbiAgICB9XG4gIFxuICAgIC8vIHN5bmNocm9ub3VzXG4gICAgdHJ5IHtcbiAgICAgIGZpbmRBdXRob3IoKTtcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9XG4gIFxuICAgIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgY2F0Y2hcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICAnY2F0Y2gnOiBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgdmFyIGxvY2FsID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gZ2xvYmFsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxvY2FsID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFAgPSBsb2NhbC5Qcm9taXNlO1xuXG4gICAgaWYgKFApIHtcbiAgICAgICAgdmFyIHByb21pc2VUb1N0cmluZyA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzaWxlbnRseSBpZ25vcmVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9jYWwuUHJvbWlzZSA9IFByb21pc2U7XG59XG5cbnBvbHlmaWxsKCk7XG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlLnBvbHlmaWxsID0gcG9seWZpbGw7XG5Qcm9taXNlLlByb21pc2UgPSBQcm9taXNlO1xuXG5yZXR1cm4gUHJvbWlzZTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzNi1wcm9taXNlLm1hcCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiFcbiAqIHJlYWN0LWZpbGVwb25kIHY3LjEuMFxuICogQSBoYW5keSBGaWxlUG9uZCBhZGFwdGVyIGNvbXBvbmVudCBmb3IgUmVhY3RcbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDIwIFBRSU5BXG4gKiBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kXG4gKiBcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZpbGVQb25kID0gZXhwb3J0cy5GaWxlU3RhdHVzID0gZXhwb3J0cy5yZWdpc3RlclBsdWdpbiA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ZpbGVwb25kID0gcmVxdWlyZSgnZmlsZXBvbmQnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vLyBJbXBvcnQgcmVxdWlyZWQgbWV0aG9kcyBhbmQgc3R5bGVzIGZyb20gdGhlIEZpbGVQb25kIG1vZHVsZSwgc2hvdWxkIG5vdCBuZWVkIGFueXRoaW5nIGVsc2VcblxuXG4vLyBXZSBuZWVkIHRvIGJlIGFibGUgdG8gY2FsbCB0aGUgcmVnaXN0ZXJQbHVnaW4gbWV0aG9kIGRpcmVjdGx5IHNvIHdlIGNhbiBhZGQgcGx1Z2luc1xuZXhwb3J0cy5yZWdpc3RlclBsdWdpbiA9IF9maWxlcG9uZC5yZWdpc3RlclBsdWdpbjtcbmV4cG9ydHMuRmlsZVN0YXR1cyA9IF9maWxlcG9uZC5GaWxlU3RhdHVzO1xuXG4vLyBEbyB0aGlzIG9uY2VcblxudmFyIGlzU3VwcG9ydGVkID0gKDAsIF9maWxlcG9uZC5zdXBwb3J0ZWQpKCk7XG5cbi8vIGZpbHRlcmVkIG1ldGhvZHNcbnZhciBmaWx0ZXJlZE1ldGhvZHMgPSBbJ3NldE9wdGlvbnMnLCAnb24nLCAnb2ZmJywgJ29uT25jZScsICdhcHBlbmRUbycsICdpbnNlcnRBZnRlcicsICdpbnNlcnRCZWZvcmUnLCAnaXNBdHRhY2hlZFRvJywgJ3JlcGxhY2VFbGVtZW50JywgJ3Jlc3RvcmVFbGVtZW50JywgJ2Rlc3Ryb3knXTtcblxuLy8gVGhlIFJlYWN0IDxGaWxlUG9uZC8+IHdyYXBwZXJcblxudmFyIEZpbGVQb25kID0gZXhwb3J0cy5GaWxlUG9uZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGaWxlUG9uZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlsZVBvbmQocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVBvbmQpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZpbGVQb25kLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRmlsZVBvbmQpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5hbGxvd0ZpbGVzU3luYyA9IHRydWU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLy8gV2lsbCBzZXR1cCBGaWxlUG9uZCBpbnN0YW5jZSB3aGVuIG1vdW50ZWRcblxuXG4gIF9jcmVhdGVDbGFzcyhGaWxlUG9uZCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8vIGV4aXQgaGVyZSBpZiBub3Qgc3VwcG9ydGVkXG4gICAgICBpZiAoIWlzU3VwcG9ydGVkKSByZXR1cm47XG5cbiAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIC8vIGlmIG9udXBkYXRlIGZpbGVzIGlzIGRlZmluZWQsIG1ha2Ugc3VyZSBzZXRGaWxlcyBkb2VzIG5vdCBjYXVzZSByYWNlIGNvbmRpdGlvblxuICAgICAgaWYgKG9wdGlvbnMub251cGRhdGVmaWxlcykge1xuICAgICAgICB2YXIgY2IgPSBvcHRpb25zLm9udXBkYXRlZmlsZXM7XG4gICAgICAgIG9wdGlvbnMub251cGRhdGVmaWxlcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgIF90aGlzMi5hbGxvd0ZpbGVzU3luYyA9IGZhbHNlO1xuICAgICAgICAgIGNiKGl0ZW1zKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIG91ciBwb25kXG4gICAgICB0aGlzLl9wb25kID0gKDAsIF9maWxlcG9uZC5jcmVhdGUpKHRoaXMuX2VsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBSZWZlcmVuY2UgcG9uZCBtZXRob2RzIHRvIEZpbGVQb25kIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgICAgT2JqZWN0LmtleXModGhpcy5fcG9uZCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuICFmaWx0ZXJlZE1ldGhvZHMuaW5jbHVkZXMoa2V5KTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpczJba2V5XSA9IF90aGlzMi5fcG9uZFtrZXldO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gV2lsbCBjbGVhbiB1cCBGaWxlUG9uZCBpbnN0YW5jZSB3aGVuIHVubW91bnRlZFxuXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgLy8gZXhpdCB3aGVuIG5vIHBvbmQgZGVmaW5lZFxuICAgICAgaWYgKCF0aGlzLl9wb25kKSByZXR1cm47XG4gICAgICB0aGlzLl9wb25kLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuYWxsb3dGaWxlc1N5bmMgPSB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgIGlmICghdGhpcy5hbGxvd0ZpbGVzU3luYykge1xuICAgICAgICB0aGlzLmFsbG93RmlsZXNTeW5jID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gU29tZXRoaW5nIGNoYW5nZWRcblxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuXG4gICAgICAvLyBleGl0IHdoZW4gbm8gcG9uZCBkZWZpbmVkXG4gICAgICBpZiAoIXRoaXMuX3BvbmQpIHJldHVybjtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgICAgLy8gdGhpcyBpcyBvbmx5IHNldCBvbmNlcywgb24gZGlkbW91bnRcbiAgICAgIGRlbGV0ZSBvcHRpb25zLm9udXBkYXRlZmlsZXM7XG5cbiAgICAgIC8vIHVwZGF0ZSBwb25kIG9wdGlvbnMgYmFzZWQgb24gbmV3IHByb3BzXG4gICAgICB0aGlzLl9wb25kLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVycyBiYXNpYyBlbGVtZW50IGhvb2sgZm9yIEZpbGVQb25kIHRvIGF0dGFjaCB0b1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaWQgPSBfcHJvcHMuaWQsXG4gICAgICAgICAgbmFtZSA9IF9wcm9wcy5uYW1lLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgYWxsb3dNdWx0aXBsZSA9IF9wcm9wcy5hbGxvd011bHRpcGxlLFxuICAgICAgICAgIHJlcXVpcmVkID0gX3Byb3BzLnJlcXVpcmVkLFxuICAgICAgICAgIGNhcHR1cmVNZXRob2QgPSBfcHJvcHMuY2FwdHVyZU1ldGhvZCxcbiAgICAgICAgICBhY2NlcHRlZEZpbGVUeXBlcyA9IF9wcm9wcy5hY2NlcHRlZEZpbGVUeXBlcztcblxuICAgICAgcmV0dXJuICgwLCBfcmVhY3QuY3JlYXRlRWxlbWVudCkoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmlsZXBvbmQtLXdyYXBwZXInIH0sICgwLCBfcmVhY3QuY3JlYXRlRWxlbWVudCkoJ2lucHV0Jywge1xuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgYWNjZXB0OiBhY2NlcHRlZEZpbGVUeXBlcyxcbiAgICAgICAgbXVsdGlwbGU6IGFsbG93TXVsdGlwbGUsXG4gICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIGNhcHR1cmU6IGNhcHR1cmVNZXRob2QsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBGaWxlUG9uZDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgIVN5bWJvbC5zaGFtXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzJyk7XG52YXIgZW50cnlVbmJpbmQgPSByZXF1aXJlKCcuLi8uLi9pbnRlcm5hbHMvZW50cnktdW5iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW50cnlVbmJpbmQoJ0FycmF5JywgJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnaW5kZXhPZicsIHsgQUNDRVNTT1JTOiB0cnVlLCAxOiAwIH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiLyohXG4gKiBGaWxlUG9uZFBsdWdpbkltYWdlUHJldmlldyA0LjYuNVxuICogTGljZW5zZWQgdW5kZXIgTUlULCBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC9cbiAqIFBsZWFzZSB2aXNpdCBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kLyBmb3IgZGV0YWlscy5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4oZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpKVxuICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgPyBkZWZpbmUoZmFjdG9yeSlcbiAgICA6ICgoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYpLFxuICAgICAgKGdsb2JhbC5GaWxlUG9uZFBsdWdpbkltYWdlUHJldmlldyA9IGZhY3RvcnkoKSkpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyB0ZXN0IGlmIGZpbGUgaXMgb2YgdHlwZSBpbWFnZSBhbmQgY2FuIGJlIHZpZXdlZCBpbiBjYW52YXNcbiAgdmFyIGlzUHJldmlld2FibGVJbWFnZSA9IGZ1bmN0aW9uIGlzUHJldmlld2FibGVJbWFnZShmaWxlKSB7XG4gICAgcmV0dXJuIC9eaW1hZ2UvLnRlc3QoZmlsZS50eXBlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7XG4gICAgICBfdHlwZW9mID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmXG4gICAgICAgICAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmXG4gICAgICAgICAgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlXG4gICAgICAgICAgPyAnc3ltYm9sJ1xuICAgICAgICAgIDogdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbiAgfVxuXG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cbiAgZnVuY3Rpb24gX2pzeCh0eXBlLCBwcm9wcywga2V5LCBjaGlsZHJlbikge1xuICAgIGlmICghUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICBSRUFDVF9FTEVNRU5UX1RZUEUgPVxuICAgICAgICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIFN5bWJvbC5mb3IgJiZcbiAgICAgICAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgICAgIDB4ZWFjNztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMztcblxuICAgIGlmICghcHJvcHMgJiYgY2hpbGRyZW5MZW5ndGggIT09IDApIHtcbiAgICAgIHByb3BzID0ge1xuICAgICAgICBjaGlsZHJlbjogdm9pZCAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChwcm9wcyAmJiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB2b2lkIDApIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcHJvcHMpIHtcbiAgICAgIHByb3BzID0gZGVmYXVsdFByb3BzIHx8IHt9O1xuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGNoaWxkQXJyYXkgPSBuZXcgQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgM107XG4gICAgICB9XG5cbiAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBrZXk6IGtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsga2V5LFxuICAgICAgcmVmOiBudWxsLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgX293bmVyOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3luY0l0ZXJhdG9yKGl0ZXJhYmxlKSB7XG4gICAgdmFyIG1ldGhvZDtcblxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICAgICAgbWV0aG9kID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdO1xuICAgICAgICBpZiAobWV0aG9kICE9IG51bGwpIHJldHVybiBtZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgbWV0aG9kID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXTtcbiAgICAgICAgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdCBpcyBub3QgYXN5bmMgaXRlcmFibGUnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9Bd2FpdFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy53cmFwcGVkID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBfQXN5bmNHZW5lcmF0b3IoZ2VuKSB7XG4gICAgdmFyIGZyb250LCBiYWNrO1xuXG4gICAgZnVuY3Rpb24gc2VuZChrZXksIGFyZykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgIHJlamVjdDogcmVqZWN0LFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYmFjaykge1xuICAgICAgICAgIGJhY2sgPSBiYWNrLm5leHQgPSByZXF1ZXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZyb250ID0gYmFjayA9IHJlcXVlc3Q7XG4gICAgICAgICAgcmVzdW1lKGtleSwgYXJnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuW2tleV0oYXJnKTtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICB2YXIgd3JhcHBlZEF3YWl0ID0gdmFsdWUgaW5zdGFuY2VvZiBfQXdhaXRWYWx1ZTtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHdyYXBwZWRBd2FpdCA/IHZhbHVlLndyYXBwZWQgOiB2YWx1ZSkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGlmICh3cmFwcGVkQXdhaXQpIHtcbiAgICAgICAgICAgICAgcmVzdW1lKCduZXh0JywgYXJnKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXR0bGUocmVzdWx0LmRvbmUgPyAncmV0dXJuJyA6ICdub3JtYWwnLCBhcmcpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICByZXN1bWUoJ3Rocm93JywgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc2V0dGxlKCd0aHJvdycsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncmV0dXJuJzpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd0aHJvdyc6XG4gICAgICAgICAgZnJvbnQucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZnJvbnQgPSBmcm9udC5uZXh0O1xuXG4gICAgICBpZiAoZnJvbnQpIHtcbiAgICAgICAgcmVzdW1lKGZyb250LmtleSwgZnJvbnQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhY2sgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2ludm9rZSA9IHNlbmQ7XG5cbiAgICBpZiAodHlwZW9mIGdlbi5yZXR1cm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yKSB7XG4gICAgX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gIH1cblxuICBfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCduZXh0JywgYXJnKTtcbiAgfTtcblxuICBfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgndGhyb3cnLCBhcmcpO1xuICB9O1xuXG4gIF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZSgncmV0dXJuJywgYXJnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBfd3JhcEFzeW5jR2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBfQXN5bmNHZW5lcmF0b3IoZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hd2FpdEFzeW5jR2VuZXJhdG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBfQXdhaXRWYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfYXN5bmNHZW5lcmF0b3JEZWxlZ2F0ZShpbm5lciwgYXdhaXRXcmFwKSB7XG4gICAgdmFyIGl0ZXIgPSB7fSxcbiAgICAgIHdhaXRpbmcgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHB1bXAoa2V5LCB2YWx1ZSkge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG4gICAgICB2YWx1ZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgcmVzb2x2ZShpbm5lcltrZXldKHZhbHVlKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogYXdhaXRXcmFwKHZhbHVlKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHVtcCgnbmV4dCcsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBpbm5lci50aHJvdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaXRlci50aHJvdyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgICAgd2FpdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHB1bXAoJ3Rocm93JywgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlubmVyLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaXRlci5yZXR1cm4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcHVtcCgncmV0dXJuJywgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoXG4gICAgICAgICAgICBnZW4sXG4gICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgX25leHQsXG4gICAgICAgICAgICBfdGhyb3csXG4gICAgICAgICAgICAnbmV4dCcsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAndGhyb3cnLCBlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXMob2JqLCBkZXNjcykge1xuICAgIGZvciAodmFyIGtleSBpbiBkZXNjcykge1xuICAgICAgdmFyIGRlc2MgPSBkZXNjc1trZXldO1xuICAgICAgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYykgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIGRlc2MpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgb2JqZWN0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZGVzY3MpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdFN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN5bSA9IG9iamVjdFN5bWJvbHNbaV07XG4gICAgICAgIHZhciBkZXNjID0gZGVzY3Nbc3ltXTtcbiAgICAgICAgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgc3ltLCBkZXNjKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlZmF1bHRzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsdWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZmF1bHRzLCBrZXkpO1xuXG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUuY29uZmlndXJhYmxlICYmIG9ialtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICAgIF9leHRlbmRzID1cbiAgICAgIE9iamVjdC5hc3NpZ24gfHxcbiAgICAgIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9O1xuXG4gICAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChcbiAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uKHN5bSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2ZcbiAgICAgID8gT2JqZWN0LmdldFByb3RvdHlwZU9mXG4gICAgICA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICAgICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgICAgICAgfTtcbiAgICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBfc2V0UHJvdG90eXBlT2YgPVxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICAgIHJldHVybiBvO1xuICAgICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2YgUHJveHkgPT09ICdmdW5jdGlvbicpIHJldHVybiB0cnVlO1xuXG4gICAgdHJ5IHtcbiAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uKCkge30pKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZignW25hdGl2ZSBjb2RlXScpICE9PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICAgIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgICBpZiAodHlwZW9mIENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgICB9XG5cbiAgICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luc3RhbmNlb2YobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAoXG4gICAgICByaWdodCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXVxuICAgICkge1xuICAgICAgcmV0dXJuIHJpZ2h0W1N5bWJvbC5oYXNJbnN0YW5jZV0obGVmdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsZWZ0IGluc3RhbmNlb2YgcmlnaHQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlXG4gICAgICA/IG9ialxuICAgICAgOiB7XG4gICAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV3T2JqID0ge307XG5cbiAgICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZXNjID1cbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgICAgICAgICAgICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpXG4gICAgICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX25ld0Fycm93Q2hlY2soaW5uZXJUaGlzLCBib3VuZFRoaXMpIHtcbiAgICBpZiAoaW5uZXJUaGlzICE9PSBib3VuZFRoaXMpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBpbnN0YW50aWF0ZSBhbiBhcnJvdyBmdW5jdGlvbicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgZGVzdHJ1Y3R1cmUgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gICAgdmFyIHRhcmdldCA9IHt9O1xuICAgIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICB2YXIga2V5LCBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICAgIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICAgIHZhciBrZXksIGk7XG5cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcbiAgICAgICAgXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBjYWxsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgcmV0dXJuIGNhbGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG4gIH1cblxuICBmdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgIG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3QuZ2V0KSB7XG4gICAgICBfZ2V0ID0gUmVmbGVjdC5nZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG4gICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBSZWZsZWN0LnNldCkge1xuICAgICAgc2V0ID0gUmVmbGVjdC5zZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcblxuICAgICAgICB2YXIgZGVzYztcblxuICAgICAgICBpZiAoYmFzZSkge1xuICAgICAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcblxuICAgICAgICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgICAgICAgZGVzYy5zZXQuY2FsbChyZWNlaXZlciwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY2VpdmVyLCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgZGVzYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2RlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyLCBpc1N0cmljdCkge1xuICAgIHZhciBzID0gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlciB8fCB0YXJnZXQpO1xuXG4gICAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBzZXQgcHJvcGVydHknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICAgIGlmICghcmF3KSB7XG4gICAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywge1xuICAgICAgICByYXc6IHtcbiAgICAgICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShzdHJpbmdzLCByYXcpIHtcbiAgICBpZiAoIXJhdykge1xuICAgICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgICB9XG5cbiAgICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgICByZXR1cm4gc3RyaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIF90ZW1wb3JhbFJlZih2YWwsIG5hbWUpIHtcbiAgICBpZiAodmFsID09PSBfdGVtcG9yYWxVbmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihuYW1lICsgJyBpcyBub3QgZGVmaW5lZCAtIHRlbXBvcmFsIGRlYWQgem9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9yZWFkT25seUVycm9yKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG5hbWUgKyAnXCIgaXMgcmVhZC1vbmx5Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NOYW1lVERaRXJyb3IobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDbGFzcyBcIicgKyBuYW1lICsgJ1wiIGNhbm5vdCBiZSByZWZlcmVuY2VkIGluIGNvbXB1dGVkIHByb3BlcnR5IGtleXMuJ1xuICAgICk7XG4gIH1cblxuICB2YXIgX3RlbXBvcmFsVW5kZWZpbmVkID0ge307XG5cbiAgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8XG4gICAgICBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fFxuICAgICAgX25vbkl0ZXJhYmxlUmVzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5TG9vc2UoYXJyLCBpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8XG4gICAgICBfaXRlcmFibGVUb0FycmF5TGltaXRMb29zZShhcnIsIGkpIHx8XG4gICAgICBfbm9uSXRlcmFibGVSZXN0KClcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspXG4gICAgICAgIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICAgIHJldHVybiBhcnIyO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gICAgaWYgKFxuICAgICAgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fFxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAnW29iamVjdCBBcmd1bWVudHNdJ1xuICAgIClcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChcbiAgICAgICAgdmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7XG4gICAgICAgICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpO1xuICAgICAgICBfbiA9IHRydWVcbiAgICAgICkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSAhPSBudWxsKSBfaVsncmV0dXJuJ10oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXRMb29zZShhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuXG4gICAgZm9yIChcbiAgICAgIHZhciBfaXRlcmF0b3IgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDtcbiAgICAgICEoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lO1xuXG4gICAgKSB7XG4gICAgICBfYXJyLnB1c2goX3N0ZXAudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3NraXBGaXJzdEdlbmVyYXRvck5leHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXQgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaXQubmV4dCgpO1xuICAgICAgcmV0dXJuIGl0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnb2JqZWN0JyB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICAgIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcblxuICAgIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgJ2RlZmF1bHQnKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzICE9PSAnb2JqZWN0JykgcmV0dXJuIHJlcztcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0BAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChoaW50ID09PSAnc3RyaW5nJyA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7XG4gICAgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsICdzdHJpbmcnKTtcblxuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3ltYm9sJyA/IGtleSA6IFN0cmluZyhrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaXRpYWxpemVyV2FybmluZ0hlbHBlcihkZXNjcmlwdG9yLCBjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArXG4gICAgICAgICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHNldCB0byB1c2UgbG9vc2UgbW9kZS4gJyArXG4gICAgICAgICdUbyB1c2UgcHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpbiBzcGVjIG1vZGUgd2l0aCBkZWNvcmF0b3JzLCB3YWl0IGZvciAnICtcbiAgICAgICAgJ3RoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgZGVjb3JhdG9ycyBpbiBzdGFnZSAyLidcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkge1xuICAgIGlmICghZGVzY3JpcHRvcikgcmV0dXJuO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7XG4gICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgICBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLFxuICAgICAgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsXG4gICAgICB2YWx1ZTogZGVzY3JpcHRvci5pbml0aWFsaXplclxuICAgICAgICA/IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KVxuICAgICAgICA6IHZvaWQgMFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihcbiAgICB0YXJnZXQsXG4gICAgcHJvcGVydHksXG4gICAgZGVjb3JhdG9ycyxcbiAgICBkZXNjcmlwdG9yLFxuICAgIGNvbnRleHRcbiAgKSB7XG4gICAgdmFyIGRlc2MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhkZXNjcmlwdG9yKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgZGVzY1trZXldID0gZGVzY3JpcHRvcltrZXldO1xuICAgIH0pO1xuICAgIGRlc2MuZW51bWVyYWJsZSA9ICEhZGVzYy5lbnVtZXJhYmxlO1xuICAgIGRlc2MuY29uZmlndXJhYmxlID0gISFkZXNjLmNvbmZpZ3VyYWJsZTtcblxuICAgIGlmICgndmFsdWUnIGluIGRlc2MgfHwgZGVzYy5pbml0aWFsaXplcikge1xuICAgICAgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZGVzYyA9IGRlY29yYXRvcnNcbiAgICAgIC5zbGljZSgpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAucmVkdWNlKGZ1bmN0aW9uKGRlc2MsIGRlY29yYXRvcikge1xuICAgICAgICByZXR1cm4gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MpIHx8IGRlc2M7XG4gICAgICB9LCBkZXNjKTtcblxuICAgIGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkge1xuICAgICAgZGVzYy52YWx1ZSA9IGRlc2MuaW5pdGlhbGl6ZXIgPyBkZXNjLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDA7XG4gICAgICBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTtcbiAgICAgIGRlc2MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBkZXNjO1xuICB9XG5cbiAgdmFyIGlkID0gMDtcblxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRMb29zZUtleShuYW1lKSB7XG4gICAgcmV0dXJuICdfX3ByaXZhdGVfJyArIGlkKysgKyAnXycgKyBuYW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlKHJlY2VpdmVyLCBwcml2YXRlS2V5KSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVjZWl2ZXIsIHByaXZhdGVLZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gdXNlIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY2VpdmVyO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVzY3JpcHRvciA9IHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcblxuICAgIGlmIChkZXNjcmlwdG9yLmdldCkge1xuICAgICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZXNjcmlwdG9yLnZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XG5cbiAgICBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFkZXNjcmlwdG9yLndyaXRhYmxlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGQnKTtcbiAgICAgIH1cblxuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQoXG4gICAgcmVjZWl2ZXIsXG4gICAgY2xhc3NDb25zdHJ1Y3RvcixcbiAgICBkZXNjcmlwdG9yXG4gICkge1xuICAgIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJpdmF0ZSBzdGF0aWMgYWNjZXNzIG9mIHdyb25nIHByb3ZlbmFuY2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQoXG4gICAgcmVjZWl2ZXIsXG4gICAgY2xhc3NDb25zdHJ1Y3RvcixcbiAgICBkZXNjcmlwdG9yLFxuICAgIHZhbHVlXG4gICkge1xuICAgIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJpdmF0ZSBzdGF0aWMgYWNjZXNzIG9mIHdyb25nIHByb3ZlbmFuY2UnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGQnKTtcbiAgICB9XG5cbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZEdldChyZWNlaXZlciwgY2xhc3NDb25zdHJ1Y3RvciwgbWV0aG9kKSB7XG4gICAgaWYgKHJlY2VpdmVyICE9PSBjbGFzc0NvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcml2YXRlIHN0YXRpYyBhY2Nlc3Mgb2Ygd3JvbmcgcHJvdmVuYW5jZScpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXRob2Q7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NTdGF0aWNQcml2YXRlTWV0aG9kU2V0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHN0YXRpYyBwcml2YXRlIGZpZWxkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVjb3JhdGUoZGVjb3JhdG9ycywgZmFjdG9yeSwgc3VwZXJDbGFzcywgbWl4aW5zKSB7XG4gICAgdmFyIGFwaSA9IF9nZXREZWNvcmF0b3JzQXBpKCk7XG5cbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcGkgPSBtaXhpbnNbaV0oYXBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgciA9IGZhY3RvcnkoZnVuY3Rpb24gaW5pdGlhbGl6ZShPKSB7XG4gICAgICBhcGkuaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHMoTywgZGVjb3JhdGVkLmVsZW1lbnRzKTtcbiAgICB9LCBzdXBlckNsYXNzKTtcbiAgICB2YXIgZGVjb3JhdGVkID0gYXBpLmRlY29yYXRlQ2xhc3MoXG4gICAgICBfY29hbGVzY2VDbGFzc0VsZW1lbnRzKHIuZC5tYXAoX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKSksXG4gICAgICBkZWNvcmF0b3JzXG4gICAgKTtcbiAgICBhcGkuaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHMoci5GLCBkZWNvcmF0ZWQuZWxlbWVudHMpO1xuICAgIHJldHVybiBhcGkucnVuQ2xhc3NGaW5pc2hlcnMoci5GLCBkZWNvcmF0ZWQuZmluaXNoZXJzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXREZWNvcmF0b3JzQXBpKCkge1xuICAgIF9nZXREZWNvcmF0b3JzQXBpID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXBpO1xuICAgIH07XG5cbiAgICB2YXIgYXBpID0ge1xuICAgICAgZWxlbWVudHNEZWZpbml0aW9uT3JkZXI6IFtbJ21ldGhvZCddLCBbJ2ZpZWxkJ11dLFxuICAgICAgaW5pdGlhbGl6ZUluc3RhbmNlRWxlbWVudHM6IGZ1bmN0aW9uKE8sIGVsZW1lbnRzKSB7XG4gICAgICAgIFsnbWV0aG9kJywgJ2ZpZWxkJ10uZm9yRWFjaChmdW5jdGlvbihraW5kKSB7XG4gICAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5raW5kID09PSBraW5kICYmIGVsZW1lbnQucGxhY2VtZW50ID09PSAnb3duJykge1xuICAgICAgICAgICAgICB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChPLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LFxuICAgICAgaW5pdGlhbGl6ZUNsYXNzRWxlbWVudHM6IGZ1bmN0aW9uKEYsIGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBwcm90byA9IEYucHJvdG90eXBlO1xuICAgICAgICBbJ21ldGhvZCcsICdmaWVsZCddLmZvckVhY2goZnVuY3Rpb24oa2luZCkge1xuICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IGVsZW1lbnQucGxhY2VtZW50O1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGVsZW1lbnQua2luZCA9PT0ga2luZCAmJlxuICAgICAgICAgICAgICAocGxhY2VtZW50ID09PSAnc3RhdGljJyB8fCBwbGFjZW1lbnQgPT09ICdwcm90b3R5cGUnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHBsYWNlbWVudCA9PT0gJ3N0YXRpYycgPyBGIDogcHJvdG87XG4gICAgICAgICAgICAgIHRoaXMuZGVmaW5lQ2xhc3NFbGVtZW50KHJlY2VpdmVyLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LFxuICAgICAgZGVmaW5lQ2xhc3NFbGVtZW50OiBmdW5jdGlvbihyZWNlaXZlciwgZWxlbWVudCkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjtcblxuICAgICAgICBpZiAoZWxlbWVudC5raW5kID09PSAnZmllbGQnKSB7XG4gICAgICAgICAgdmFyIGluaXRpYWxpemVyID0gZWxlbWVudC5pbml0aWFsaXplcjtcbiAgICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLFxuICAgICAgICAgICAgdmFsdWU6IGluaXRpYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0aWFsaXplci5jYWxsKHJlY2VpdmVyKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIGVsZW1lbnQua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH0sXG4gICAgICBkZWNvcmF0ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50cywgZGVjb3JhdG9ycykge1xuICAgICAgICB2YXIgbmV3RWxlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuICAgICAgICB2YXIgcGxhY2VtZW50cyA9IHtcbiAgICAgICAgICBzdGF0aWM6IFtdLFxuICAgICAgICAgIHByb3RvdHlwZTogW10sXG4gICAgICAgICAgb3duOiBbXVxuICAgICAgICB9O1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoIV9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSByZXR1cm4gbmV3RWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICB2YXIgZWxlbWVudEZpbmlzaGVyc0V4dHJhcyA9IHRoaXMuZGVjb3JhdGVFbGVtZW50KFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIHBsYWNlbWVudHNcbiAgICAgICAgICApO1xuICAgICAgICAgIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5lbGVtZW50KTtcbiAgICAgICAgICBuZXdFbGVtZW50cy5wdXNoLmFwcGx5KG5ld0VsZW1lbnRzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmV4dHJhcyk7XG4gICAgICAgICAgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmZpbmlzaGVycyk7XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIGlmICghZGVjb3JhdG9ycykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbGVtZW50czogbmV3RWxlbWVudHMsXG4gICAgICAgICAgICBmaW5pc2hlcnM6IGZpbmlzaGVyc1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5kZWNvcmF0ZUNvbnN0cnVjdG9yKG5ld0VsZW1lbnRzLCBkZWNvcmF0b3JzKTtcbiAgICAgICAgZmluaXNoZXJzLnB1c2guYXBwbHkoZmluaXNoZXJzLCByZXN1bHQuZmluaXNoZXJzKTtcbiAgICAgICAgcmVzdWx0LmZpbmlzaGVycyA9IGZpbmlzaGVycztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgICBhZGRFbGVtZW50UGxhY2VtZW50OiBmdW5jdGlvbihlbGVtZW50LCBwbGFjZW1lbnRzLCBzaWxlbnQpIHtcbiAgICAgICAgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTtcblxuICAgICAgICBpZiAoIXNpbGVudCAmJiBrZXlzLmluZGV4T2YoZWxlbWVudC5rZXkpICE9PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0R1cGxpY2F0ZWQgZWxlbWVudCAoJyArIGVsZW1lbnQua2V5ICsgJyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChlbGVtZW50LmtleSk7XG4gICAgICB9LFxuICAgICAgZGVjb3JhdGVFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBwbGFjZW1lbnRzKSB7XG4gICAgICAgIHZhciBleHRyYXMgPSBbXTtcbiAgICAgICAgdmFyIGZpbmlzaGVycyA9IFtdO1xuXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnMsIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgaSA+PSAwO1xuICAgICAgICAgIGktLVxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIga2V5cyA9IHBsYWNlbWVudHNbZWxlbWVudC5wbGFjZW1lbnRdO1xuICAgICAgICAgIGtleXMuc3BsaWNlKGtleXMuaW5kZXhPZihlbGVtZW50LmtleSksIDEpO1xuICAgICAgICAgIHZhciBlbGVtZW50T2JqZWN0ID0gdGhpcy5mcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCk7XG4gICAgICAgICAgdmFyIGVsZW1lbnRGaW5pc2hlckV4dHJhcyA9IHRoaXMudG9FbGVtZW50RmluaXNoZXJFeHRyYXMoXG4gICAgICAgICAgICAoMCwgZGVjb3JhdG9yc1tpXSkoZWxlbWVudE9iamVjdCkgfHwgZWxlbWVudE9iamVjdFxuICAgICAgICAgICk7XG4gICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5lbGVtZW50O1xuICAgICAgICAgIHRoaXMuYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcblxuICAgICAgICAgIGlmIChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpIHtcbiAgICAgICAgICAgIGZpbmlzaGVycy5wdXNoKGVsZW1lbnRGaW5pc2hlckV4dHJhcy5maW5pc2hlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5ld0V4dHJhcyA9IGVsZW1lbnRGaW5pc2hlckV4dHJhcy5leHRyYXM7XG5cbiAgICAgICAgICBpZiAobmV3RXh0cmFzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0V4dHJhcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQobmV3RXh0cmFzW2pdLCBwbGFjZW1lbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXh0cmFzLnB1c2guYXBwbHkoZXh0cmFzLCBuZXdFeHRyYXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICBmaW5pc2hlcnM6IGZpbmlzaGVycyxcbiAgICAgICAgICBleHRyYXM6IGV4dHJhc1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGRlY29yYXRlQ29uc3RydWN0b3I6IGZ1bmN0aW9uKGVsZW1lbnRzLCBkZWNvcmF0b3JzKSB7XG4gICAgICAgIHZhciBmaW5pc2hlcnMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHZhciBvYmogPSB0aGlzLmZyb21DbGFzc0Rlc2NyaXB0b3IoZWxlbWVudHMpO1xuICAgICAgICAgIHZhciBlbGVtZW50c0FuZEZpbmlzaGVyID0gdGhpcy50b0NsYXNzRGVzY3JpcHRvcihcbiAgICAgICAgICAgICgwLCBkZWNvcmF0b3JzW2ldKShvYmopIHx8IG9ialxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmaW5pc2hlcnMucHVzaChlbGVtZW50c0FuZEZpbmlzaGVyLmZpbmlzaGVyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudHNBbmRGaW5pc2hlci5lbGVtZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlbGVtZW50cyA9IGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWxlbWVudHMubGVuZ3RoIC0gMTsgaisrKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGsgPSBqICsgMTsgayA8IGVsZW1lbnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZWxlbWVudHNbal0ua2V5ID09PSBlbGVtZW50c1trXS5rZXkgJiZcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2pdLnBsYWNlbWVudCA9PT0gZWxlbWVudHNba10ucGxhY2VtZW50XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnRHVwbGljYXRlZCBlbGVtZW50ICgnICsgZWxlbWVudHNbal0ua2V5ICsgJyknXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgICAgIGZpbmlzaGVyczogZmluaXNoZXJzXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZnJvbUVsZW1lbnREZXNjcmlwdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAga2luZDogZWxlbWVudC5raW5kLFxuICAgICAgICAgIGtleTogZWxlbWVudC5rZXksXG4gICAgICAgICAgcGxhY2VtZW50OiBlbGVtZW50LnBsYWNlbWVudCxcbiAgICAgICAgICBkZXNjcmlwdG9yOiBlbGVtZW50LmRlc2NyaXB0b3JcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRlc2MgPSB7XG4gICAgICAgICAgdmFsdWU6ICdEZXNjcmlwdG9yJyxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgU3ltYm9sLnRvU3RyaW5nVGFnLCBkZXNjKTtcbiAgICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gJ2ZpZWxkJykgb2JqLmluaXRpYWxpemVyID0gZWxlbWVudC5pbml0aWFsaXplcjtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sXG4gICAgICB0b0VsZW1lbnREZXNjcmlwdG9yczogZnVuY3Rpb24oZWxlbWVudE9iamVjdHMpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIF90b0FycmF5KGVsZW1lbnRPYmplY3RzKS5tYXAoZnVuY3Rpb24oZWxlbWVudE9iamVjdCkge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuICAgICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShcbiAgICAgICAgICAgIGVsZW1lbnRPYmplY3QsXG4gICAgICAgICAgICAnZmluaXNoZXInLFxuICAgICAgICAgICAgJ0FuIGVsZW1lbnQgZGVzY3JpcHRvcidcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShcbiAgICAgICAgICAgIGVsZW1lbnRPYmplY3QsXG4gICAgICAgICAgICAnZXh0cmFzJyxcbiAgICAgICAgICAgICdBbiBlbGVtZW50IGRlc2NyaXB0b3InXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9LFxuICAgICAgdG9FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24oZWxlbWVudE9iamVjdCkge1xuICAgICAgICB2YXIga2luZCA9IFN0cmluZyhlbGVtZW50T2JqZWN0LmtpbmQpO1xuXG4gICAgICAgIGlmIChraW5kICE9PSAnbWV0aG9kJyAmJiBraW5kICE9PSAnZmllbGQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdBbiBlbGVtZW50IGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgZWl0aGVyIFwibWV0aG9kXCIgb3InICtcbiAgICAgICAgICAgICAgJyBcImZpZWxkXCIsIGJ1dCBhIGRlY29yYXRvciBjcmVhdGVkIGFuIGVsZW1lbnQgZGVzY3JpcHRvciB3aXRoJyArXG4gICAgICAgICAgICAgICcgLmtpbmQgXCInICtcbiAgICAgICAgICAgICAga2luZCArXG4gICAgICAgICAgICAgICdcIidcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleSA9IF90b1Byb3BlcnR5S2V5KGVsZW1lbnRPYmplY3Qua2V5KTtcblxuICAgICAgICB2YXIgcGxhY2VtZW50ID0gU3RyaW5nKGVsZW1lbnRPYmplY3QucGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcGxhY2VtZW50ICE9PSAnc3RhdGljJyAmJlxuICAgICAgICAgIHBsYWNlbWVudCAhPT0gJ3Byb3RvdHlwZScgJiZcbiAgICAgICAgICBwbGFjZW1lbnQgIT09ICdvd24nXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAnQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAucGxhY2VtZW50IHByb3BlcnR5IG11c3QgYmUgb25lIG9mIFwic3RhdGljXCIsJyArXG4gICAgICAgICAgICAgICcgXCJwcm90b3R5cGVcIiBvciBcIm93blwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3InICtcbiAgICAgICAgICAgICAgJyB3aXRoIC5wbGFjZW1lbnQgXCInICtcbiAgICAgICAgICAgICAgcGxhY2VtZW50ICtcbiAgICAgICAgICAgICAgJ1wiJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnRPYmplY3QuZGVzY3JpcHRvcjtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KFxuICAgICAgICAgIGVsZW1lbnRPYmplY3QsXG4gICAgICAgICAgJ2VsZW1lbnRzJyxcbiAgICAgICAgICAnQW4gZWxlbWVudCBkZXNjcmlwdG9yJ1xuICAgICAgICApO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHtcbiAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICAgIGRlc2NyaXB0b3I6IE9iamVjdC5hc3NpZ24oe30sIGRlc2NyaXB0b3IpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGtpbmQgIT09ICdmaWVsZCcpIHtcbiAgICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoXG4gICAgICAgICAgICBlbGVtZW50T2JqZWN0LFxuICAgICAgICAgICAgJ2luaXRpYWxpemVyJyxcbiAgICAgICAgICAgICdBIG1ldGhvZCBkZXNjcmlwdG9yJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KFxuICAgICAgICAgICAgZGVzY3JpcHRvcixcbiAgICAgICAgICAgICdnZXQnLFxuICAgICAgICAgICAgJ1RoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIGEgZmllbGQgZGVzY3JpcHRvcidcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShcbiAgICAgICAgICAgIGRlc2NyaXB0b3IsXG4gICAgICAgICAgICAnc2V0JyxcbiAgICAgICAgICAgICdUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3InXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoXG4gICAgICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICAgICdUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3InXG4gICAgICAgICAgKTtcbiAgICAgICAgICBlbGVtZW50LmluaXRpYWxpemVyID0gZWxlbWVudE9iamVjdC5pbml0aWFsaXplcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgfSxcbiAgICAgIHRvRWxlbWVudEZpbmlzaGVyRXh0cmFzOiBmdW5jdGlvbihlbGVtZW50T2JqZWN0KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuXG4gICAgICAgIHZhciBmaW5pc2hlciA9IF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkoZWxlbWVudE9iamVjdCwgJ2ZpbmlzaGVyJyk7XG5cbiAgICAgICAgdmFyIGV4dHJhcyA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcnMoZWxlbWVudE9iamVjdC5leHRyYXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgZmluaXNoZXI6IGZpbmlzaGVyLFxuICAgICAgICAgIGV4dHJhczogZXh0cmFzXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZnJvbUNsYXNzRGVzY3JpcHRvcjogZnVuY3Rpb24oZWxlbWVudHMpIHtcbiAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICBraW5kOiAnY2xhc3MnLFxuICAgICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cy5tYXAodGhpcy5mcm9tRWxlbWVudERlc2NyaXB0b3IsIHRoaXMpXG4gICAgICAgIH07XG4gICAgICAgIHZhciBkZXNjID0ge1xuICAgICAgICAgIHZhbHVlOiAnRGVzY3JpcHRvcicsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LFxuICAgICAgdG9DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIga2luZCA9IFN0cmluZyhvYmoua2luZCk7XG5cbiAgICAgICAgaWYgKGtpbmQgIT09ICdjbGFzcycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0EgY2xhc3MgZGVzY3JpcHRvclxcJ3MgLmtpbmQgcHJvcGVydHkgbXVzdCBiZSBcImNsYXNzXCIsIGJ1dCBhIGRlY29yYXRvcicgK1xuICAgICAgICAgICAgICAnIGNyZWF0ZWQgYSBjbGFzcyBkZXNjcmlwdG9yIHdpdGggLmtpbmQgXCInICtcbiAgICAgICAgICAgICAga2luZCArXG4gICAgICAgICAgICAgICdcIidcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgJ2tleScsICdBIGNsYXNzIGRlc2NyaXB0b3InKTtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgJ3BsYWNlbWVudCcsICdBIGNsYXNzIGRlc2NyaXB0b3InKTtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgJ2Rlc2NyaXB0b3InLCAnQSBjbGFzcyBkZXNjcmlwdG9yJyk7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosICdpbml0aWFsaXplcicsICdBIGNsYXNzIGRlc2NyaXB0b3InKTtcbiAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KG9iaiwgJ2V4dHJhcycsICdBIGNsYXNzIGRlc2NyaXB0b3InKTtcblxuICAgICAgICB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgJ2ZpbmlzaGVyJyk7XG5cbiAgICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy50b0VsZW1lbnREZXNjcmlwdG9ycyhvYmouZWxlbWVudHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgICAgICBmaW5pc2hlcjogZmluaXNoZXJcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBydW5DbGFzc0ZpbmlzaGVyczogZnVuY3Rpb24oY29uc3RydWN0b3IsIGZpbmlzaGVycykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbmlzaGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdDb25zdHJ1Y3RvciA9ICgwLCBmaW5pc2hlcnNbaV0pKGNvbnN0cnVjdG9yKTtcblxuICAgICAgICAgIGlmIChuZXdDb25zdHJ1Y3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0NvbnN0cnVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpbmlzaGVycyBtdXN0IHJldHVybiBhIGNvbnN0cnVjdG9yLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdHJ1Y3RvciA9IG5ld0NvbnN0cnVjdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICAgIH0sXG4gICAgICBkaXNhbGxvd1Byb3BlcnR5OiBmdW5jdGlvbihvYmosIG5hbWUsIG9iamVjdFR5cGUpIHtcbiAgICAgICAgaWYgKG9ialtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgIG9iamVjdFR5cGUgKyBcIiBjYW4ndCBoYXZlIGEgLlwiICsgbmFtZSArICcgcHJvcGVydHkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcGk7XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudERlc2NyaXB0b3IoZGVmKSB7XG4gICAgdmFyIGtleSA9IF90b1Byb3BlcnR5S2V5KGRlZi5rZXkpO1xuXG4gICAgdmFyIGRlc2NyaXB0b3I7XG5cbiAgICBpZiAoZGVmLmtpbmQgPT09ICdtZXRob2QnKSB7XG4gICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICB2YWx1ZTogZGVmLnZhbHVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSAnZ2V0Jykge1xuICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgZ2V0OiBkZWYudmFsdWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gJ3NldCcpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIHNldDogZGVmLnZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09ICdmaWVsZCcpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICBraW5kOiBkZWYua2luZCA9PT0gJ2ZpZWxkJyA/ICdmaWVsZCcgOiAnbWV0aG9kJyxcbiAgICAgIGtleToga2V5LFxuICAgICAgcGxhY2VtZW50OiBkZWYuc3RhdGljXG4gICAgICAgID8gJ3N0YXRpYydcbiAgICAgICAgOiBkZWYua2luZCA9PT0gJ2ZpZWxkJ1xuICAgICAgICA/ICdvd24nXG4gICAgICAgIDogJ3Byb3RvdHlwZScsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yXG4gICAgfTtcbiAgICBpZiAoZGVmLmRlY29yYXRvcnMpIGVsZW1lbnQuZGVjb3JhdG9ycyA9IGRlZi5kZWNvcmF0b3JzO1xuICAgIGlmIChkZWYua2luZCA9PT0gJ2ZpZWxkJykgZWxlbWVudC5pbml0aWFsaXplciA9IGRlZi52YWx1ZTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jb2FsZXNjZUdldHRlclNldHRlcihlbGVtZW50LCBvdGhlcikge1xuICAgIGlmIChlbGVtZW50LmRlc2NyaXB0b3IuZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG90aGVyLmRlc2NyaXB0b3IuZ2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXIuZGVzY3JpcHRvci5zZXQgPSBlbGVtZW50LmRlc2NyaXB0b3Iuc2V0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoZWxlbWVudHMpIHtcbiAgICB2YXIgbmV3RWxlbWVudHMgPSBbXTtcblxuICAgIHZhciBpc1NhbWVFbGVtZW50ID0gZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG90aGVyLmtpbmQgPT09ICdtZXRob2QnICYmXG4gICAgICAgIG90aGVyLmtleSA9PT0gZWxlbWVudC5rZXkgJiZcbiAgICAgICAgb3RoZXIucGxhY2VtZW50ID09PSBlbGVtZW50LnBsYWNlbWVudFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgIHZhciBvdGhlcjtcblxuICAgICAgaWYgKFxuICAgICAgICBlbGVtZW50LmtpbmQgPT09ICdtZXRob2QnICYmXG4gICAgICAgIChvdGhlciA9IG5ld0VsZW1lbnRzLmZpbmQoaXNTYW1lRWxlbWVudCkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIF9pc0RhdGFEZXNjcmlwdG9yKGVsZW1lbnQuZGVzY3JpcHRvcikgfHxcbiAgICAgICAgICBfaXNEYXRhRGVzY3JpcHRvcihvdGhlci5kZXNjcmlwdG9yKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkgfHwgX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXG4gICAgICAgICAgICAgICdEdXBsaWNhdGVkIG1ldGhvZHMgKCcgKyBlbGVtZW50LmtleSArIFwiKSBjYW4ndCBiZSBkZWNvcmF0ZWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3RoZXIuZGVzY3JpcHRvciA9IGVsZW1lbnQuZGVzY3JpcHRvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmIChfaGFzRGVjb3JhdG9ycyhvdGhlcikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFxuICAgICAgICAgICAgICAgIFwiRGVjb3JhdG9ycyBjYW4ndCBiZSBwbGFjZWQgb24gZGlmZmVyZW50IGFjY2Vzc29ycyB3aXRoIGZvciBcIiArXG4gICAgICAgICAgICAgICAgICAndGhlIHNhbWUgcHJvcGVydHkgKCcgK1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5rZXkgK1xuICAgICAgICAgICAgICAgICAgJykuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdGhlci5kZWNvcmF0b3JzID0gZWxlbWVudC5kZWNvcmF0b3JzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9jb2FsZXNjZUdldHRlclNldHRlcihlbGVtZW50LCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld0VsZW1lbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2hhc0RlY29yYXRvcnMoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmRlY29yYXRvcnMgJiYgZWxlbWVudC5kZWNvcmF0b3JzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc0RhdGFEZXNjcmlwdG9yKGRlc2MpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZGVzYyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAhKGRlc2MudmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZXNjLndyaXRhYmxlID09PSB1bmRlZmluZWQpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vcHRpb25hbENhbGxhYmxlUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgJ1wiICsgbmFtZSArIFwiJyB0byBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVNZXRob2RHZXQocmVjZWl2ZXIsIHByaXZhdGVTZXQsIGZuKSB7XG4gICAgaWYgKCFwcml2YXRlU2V0LmhhcyhyZWNlaXZlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kU2V0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byByZWFzc2lnbiBwcml2YXRlIG1ldGhvZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3dyYXBSZWdFeHAocmUsIGdyb3Vwcykge1xuICAgIF93cmFwUmVnRXhwID0gZnVuY3Rpb24ocmUsIGdyb3Vwcykge1xuICAgICAgcmV0dXJuIG5ldyBCYWJlbFJlZ0V4cChyZSwgZ3JvdXBzKTtcbiAgICB9O1xuXG4gICAgdmFyIF9SZWdFeHAgPSBfd3JhcE5hdGl2ZVN1cGVyKFJlZ0V4cCk7XG5cbiAgICB2YXIgX3N1cGVyID0gUmVnRXhwLnByb3RvdHlwZTtcblxuICAgIHZhciBfZ3JvdXBzID0gbmV3IFdlYWtNYXAoKTtcblxuICAgIGZ1bmN0aW9uIEJhYmVsUmVnRXhwKHJlLCBncm91cHMpIHtcbiAgICAgIHZhciBfdGhpcyA9IF9SZWdFeHAuY2FsbCh0aGlzLCByZSk7XG5cbiAgICAgIF9ncm91cHMuc2V0KF90aGlzLCBncm91cHMpO1xuXG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2luaGVyaXRzKEJhYmVsUmVnRXhwLCBfUmVnRXhwKTtcblxuICAgIEJhYmVsUmVnRXhwLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gX3N1cGVyLmV4ZWMuY2FsbCh0aGlzLCBzdHIpO1xuXG4gICAgICBpZiAocmVzdWx0KSByZXN1bHQuZ3JvdXBzID0gYnVpbGRHcm91cHMocmVzdWx0LCB0aGlzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIEJhYmVsUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wucmVwbGFjZV0gPSBmdW5jdGlvbihzdHIsIHN1YnN0aXR1dGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBzdWJzdGl0dXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBncm91cHMgPSBfZ3JvdXBzLmdldCh0aGlzKTtcblxuICAgICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgc3RyLFxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5yZXBsYWNlKC9cXCQ8KFtePl0rKT4vZywgZnVuY3Rpb24oXywgbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICckJyArIGdyb3Vwc1tuYW1lXTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3Vic3RpdHV0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgYXJncy5wdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChidWlsZEdyb3VwcyhhcmdzLCBfdGhpcykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzdGl0dXRpb24uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGJ1aWxkR3JvdXBzKHJlc3VsdCwgcmUpIHtcbiAgICAgIHZhciBnID0gX2dyb3Vwcy5nZXQocmUpO1xuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZykucmVkdWNlKGZ1bmN0aW9uKGdyb3VwcywgbmFtZSkge1xuICAgICAgICBncm91cHNbbmFtZV0gPSByZXN1bHRbZ1tuYW1lXV07XG4gICAgICAgIHJldHVybiBncm91cHM7XG4gICAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3dyYXBSZWdFeHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHZhciB2ZWN0b3JNdWx0aXBseSA9IGZ1bmN0aW9uIHZlY3Rvck11bHRpcGx5KHYsIGFtb3VudCkge1xuICAgIHJldHVybiBjcmVhdGVWZWN0b3Iodi54ICogYW1vdW50LCB2LnkgKiBhbW91bnQpO1xuICB9O1xuXG4gIHZhciB2ZWN0b3JBZGQgPSBmdW5jdGlvbiB2ZWN0b3JBZGQoYSwgYikge1xuICAgIHJldHVybiBjcmVhdGVWZWN0b3IoYS54ICsgYi54LCBhLnkgKyBiLnkpO1xuICB9O1xuXG4gIHZhciB2ZWN0b3JOb3JtYWxpemUgPSBmdW5jdGlvbiB2ZWN0b3JOb3JtYWxpemUodikge1xuICAgIHZhciBsID0gTWF0aC5zcXJ0KHYueCAqIHYueCArIHYueSAqIHYueSk7XG4gICAgaWYgKGwgPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVWZWN0b3Iodi54IC8gbCwgdi55IC8gbCk7XG4gIH07XG5cbiAgdmFyIHZlY3RvclJvdGF0ZSA9IGZ1bmN0aW9uIHZlY3RvclJvdGF0ZSh2LCByYWRpYW5zLCBvcmlnaW4pIHtcbiAgICB2YXIgY29zID0gTWF0aC5jb3MocmFkaWFucyk7XG4gICAgdmFyIHNpbiA9IE1hdGguc2luKHJhZGlhbnMpO1xuICAgIHZhciB0ID0gY3JlYXRlVmVjdG9yKHYueCAtIG9yaWdpbi54LCB2LnkgLSBvcmlnaW4ueSk7XG4gICAgcmV0dXJuIGNyZWF0ZVZlY3RvcihcbiAgICAgIG9yaWdpbi54ICsgY29zICogdC54IC0gc2luICogdC55LFxuICAgICAgb3JpZ2luLnkgKyBzaW4gKiB0LnggKyBjb3MgKiB0LnlcbiAgICApO1xuICB9O1xuXG4gIHZhciBjcmVhdGVWZWN0b3IgPSBmdW5jdGlvbiBjcmVhdGVWZWN0b3IoKSB7XG4gICAgdmFyIHggPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuICAgIHZhciB5ID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG4gIH07XG5cbiAgdmFyIGdldE1hcmt1cFZhbHVlID0gZnVuY3Rpb24gZ2V0TWFya3VwVmFsdWUodmFsdWUsIHNpemUpIHtcbiAgICB2YXIgc2NhbGFyID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICB2YXIgYXhpcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzY2FsYXI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdmFsdWUgKiAoYXhpcyA/IHNpemVbYXhpc10gOiBNYXRoLm1pbihzaXplLndpZHRoLCBzaXplLmhlaWdodCkpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH07XG5cbiAgdmFyIGdldE1hcmt1cFN0eWxlcyA9IGZ1bmN0aW9uIGdldE1hcmt1cFN0eWxlcyhtYXJrdXAsIHNpemUsIHNjYWxlKSB7XG4gICAgdmFyIGxpbmVTdHlsZSA9IG1hcmt1cC5ib3JkZXJTdHlsZSB8fCBtYXJrdXAubGluZVN0eWxlIHx8ICdzb2xpZCc7XG4gICAgdmFyIGZpbGwgPSBtYXJrdXAuYmFja2dyb3VuZENvbG9yIHx8IG1hcmt1cC5mb250Q29sb3IgfHwgJ3RyYW5zcGFyZW50JztcbiAgICB2YXIgc3Ryb2tlID0gbWFya3VwLmJvcmRlckNvbG9yIHx8IG1hcmt1cC5saW5lQ29sb3IgfHwgJ3RyYW5zcGFyZW50JztcbiAgICB2YXIgc3Ryb2tlV2lkdGggPSBnZXRNYXJrdXBWYWx1ZShcbiAgICAgIG1hcmt1cC5ib3JkZXJXaWR0aCB8fCBtYXJrdXAubGluZVdpZHRoLFxuICAgICAgc2l6ZSxcbiAgICAgIHNjYWxlXG4gICAgKTtcbiAgICB2YXIgbGluZUNhcCA9IG1hcmt1cC5saW5lQ2FwIHx8ICdyb3VuZCc7XG4gICAgdmFyIGxpbmVKb2luID0gbWFya3VwLmxpbmVKb2luIHx8ICdyb3VuZCc7XG4gICAgdmFyIGRhc2hlcyA9XG4gICAgICB0eXBlb2YgbGluZVN0eWxlID09PSAnc3RyaW5nJ1xuICAgICAgICA/ICcnXG4gICAgICAgIDogbGluZVN0eWxlXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldE1hcmt1cFZhbHVlKHYsIHNpemUsIHNjYWxlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignLCcpO1xuICAgIHZhciBvcGFjaXR5ID0gbWFya3VwLm9wYWNpdHkgfHwgMTtcbiAgICByZXR1cm4ge1xuICAgICAgJ3N0cm9rZS1saW5lY2FwJzogbGluZUNhcCxcbiAgICAgICdzdHJva2UtbGluZWpvaW4nOiBsaW5lSm9pbixcbiAgICAgICdzdHJva2Utd2lkdGgnOiBzdHJva2VXaWR0aCB8fCAwLFxuICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiBkYXNoZXMsXG4gICAgICBzdHJva2U6IHN0cm9rZSxcbiAgICAgIGZpbGw6IGZpbGwsXG4gICAgICBvcGFjaXR5OiBvcGFjaXR5XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaXNEZWZpbmVkID0gZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG4gIH07XG5cbiAgdmFyIGdldE1hcmt1cFJlY3QgPSBmdW5jdGlvbiBnZXRNYXJrdXBSZWN0KHJlY3QsIHNpemUpIHtcbiAgICB2YXIgc2NhbGFyID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcblxuICAgIHZhciBsZWZ0ID1cbiAgICAgIGdldE1hcmt1cFZhbHVlKHJlY3QueCwgc2l6ZSwgc2NhbGFyLCAnd2lkdGgnKSB8fFxuICAgICAgZ2V0TWFya3VwVmFsdWUocmVjdC5sZWZ0LCBzaXplLCBzY2FsYXIsICd3aWR0aCcpO1xuICAgIHZhciB0b3AgPVxuICAgICAgZ2V0TWFya3VwVmFsdWUocmVjdC55LCBzaXplLCBzY2FsYXIsICdoZWlnaHQnKSB8fFxuICAgICAgZ2V0TWFya3VwVmFsdWUocmVjdC50b3AsIHNpemUsIHNjYWxhciwgJ2hlaWdodCcpO1xuICAgIHZhciB3aWR0aCA9IGdldE1hcmt1cFZhbHVlKHJlY3Qud2lkdGgsIHNpemUsIHNjYWxhciwgJ3dpZHRoJyk7XG4gICAgdmFyIGhlaWdodCA9IGdldE1hcmt1cFZhbHVlKHJlY3QuaGVpZ2h0LCBzaXplLCBzY2FsYXIsICdoZWlnaHQnKTtcbiAgICB2YXIgcmlnaHQgPSBnZXRNYXJrdXBWYWx1ZShyZWN0LnJpZ2h0LCBzaXplLCBzY2FsYXIsICd3aWR0aCcpO1xuICAgIHZhciBib3R0b20gPSBnZXRNYXJrdXBWYWx1ZShyZWN0LmJvdHRvbSwgc2l6ZSwgc2NhbGFyLCAnaGVpZ2h0Jyk7XG5cbiAgICBpZiAoIWlzRGVmaW5lZCh0b3ApKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGhlaWdodCkgJiYgaXNEZWZpbmVkKGJvdHRvbSkpIHtcbiAgICAgICAgdG9wID0gc2l6ZS5oZWlnaHQgLSBoZWlnaHQgLSBib3R0b207XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3AgPSBib3R0b207XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpc0RlZmluZWQobGVmdCkpIHtcbiAgICAgIGlmIChpc0RlZmluZWQod2lkdGgpICYmIGlzRGVmaW5lZChyaWdodCkpIHtcbiAgICAgICAgbGVmdCA9IHNpemUud2lkdGggLSB3aWR0aCAtIHJpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVmdCA9IHJpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNEZWZpbmVkKHdpZHRoKSkge1xuICAgICAgaWYgKGlzRGVmaW5lZChsZWZ0KSAmJiBpc0RlZmluZWQocmlnaHQpKSB7XG4gICAgICAgIHdpZHRoID0gc2l6ZS53aWR0aCAtIGxlZnQgLSByaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWlzRGVmaW5lZChoZWlnaHQpKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHRvcCkgJiYgaXNEZWZpbmVkKGJvdHRvbSkpIHtcbiAgICAgICAgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSB0b3AgLSBib3R0b207XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWlnaHQgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB4OiBsZWZ0IHx8IDAsXG4gICAgICB5OiB0b3AgfHwgMCxcbiAgICAgIHdpZHRoOiB3aWR0aCB8fCAwLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQgfHwgMFxuICAgIH07XG4gIH07XG5cbiAgdmFyIHBvaW50c1RvUGF0aFNoYXBlID0gZnVuY3Rpb24gcG9pbnRzVG9QYXRoU2hhcGUocG9pbnRzKSB7XG4gICAgcmV0dXJuIHBvaW50c1xuICAgICAgLm1hcChmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgLmNvbmNhdChpbmRleCA9PT0gMCA/ICdNJyA6ICdMJywgJyAnKVxuICAgICAgICAgIC5jb25jYXQocG9pbnQueCwgJyAnKVxuICAgICAgICAgIC5jb25jYXQocG9pbnQueSk7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJyAnKTtcbiAgfTtcblxuICB2YXIgc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgYXR0cltrZXldKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICB2YXIgc3ZnID0gZnVuY3Rpb24gc3ZnKHRhZywgYXR0cikge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCB0YWcpO1xuICAgIGlmIChhdHRyKSB7XG4gICAgICBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHIpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICB2YXIgdXBkYXRlUmVjdCA9IGZ1bmN0aW9uIHVwZGF0ZVJlY3QoZWxlbWVudCkge1xuICAgIHJldHVybiBzZXRBdHRyaWJ1dGVzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQucmVjdCwgZWxlbWVudC5zdHlsZXMpXG4gICAgKTtcbiAgfTtcblxuICB2YXIgdXBkYXRlRWxsaXBzZSA9IGZ1bmN0aW9uIHVwZGF0ZUVsbGlwc2UoZWxlbWVudCkge1xuICAgIHZhciBjeCA9IGVsZW1lbnQucmVjdC54ICsgZWxlbWVudC5yZWN0LndpZHRoICogMC41O1xuICAgIHZhciBjeSA9IGVsZW1lbnQucmVjdC55ICsgZWxlbWVudC5yZWN0LmhlaWdodCAqIDAuNTtcbiAgICB2YXIgcnggPSBlbGVtZW50LnJlY3Qud2lkdGggKiAwLjU7XG4gICAgdmFyIHJ5ID0gZWxlbWVudC5yZWN0LmhlaWdodCAqIDAuNTtcbiAgICByZXR1cm4gc2V0QXR0cmlidXRlcyhcbiAgICAgIGVsZW1lbnQsXG4gICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgY3g6IGN4LFxuICAgICAgICAgIGN5OiBjeSxcbiAgICAgICAgICByeDogcngsXG4gICAgICAgICAgcnk6IHJ5XG4gICAgICAgIH0sXG4gICAgICAgIGVsZW1lbnQuc3R5bGVzXG4gICAgICApXG4gICAgKTtcbiAgfTtcblxuICB2YXIgSU1BR0VfRklUX1NUWUxFID0ge1xuICAgIGNvbnRhaW46ICd4TWlkWU1pZCBtZWV0JyxcbiAgICBjb3ZlcjogJ3hNaWRZTWlkIHNsaWNlJ1xuICB9O1xuXG4gIHZhciB1cGRhdGVJbWFnZSA9IGZ1bmN0aW9uIHVwZGF0ZUltYWdlKGVsZW1lbnQsIG1hcmt1cCkge1xuICAgIHNldEF0dHJpYnV0ZXMoXG4gICAgICBlbGVtZW50LFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgZWxlbWVudC5yZWN0LCBlbGVtZW50LnN0eWxlcywge1xuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBJTUFHRV9GSVRfU1RZTEVbbWFya3VwLmZpdF0gfHwgJ25vbmUnXG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgdmFyIFRFWFRfQU5DSE9SID0ge1xuICAgIGxlZnQ6ICdzdGFydCcsXG4gICAgY2VudGVyOiAnbWlkZGxlJyxcbiAgICByaWdodDogJ2VuZCdcbiAgfTtcblxuICB2YXIgdXBkYXRlVGV4dCA9IGZ1bmN0aW9uIHVwZGF0ZVRleHQoZWxlbWVudCwgbWFya3VwLCBzaXplLCBzY2FsZSkge1xuICAgIHZhciBmb250U2l6ZSA9IGdldE1hcmt1cFZhbHVlKG1hcmt1cC5mb250U2l6ZSwgc2l6ZSwgc2NhbGUpO1xuICAgIHZhciBmb250RmFtaWx5ID0gbWFya3VwLmZvbnRGYW1pbHkgfHwgJ3NhbnMtc2VyaWYnO1xuICAgIHZhciBmb250V2VpZ2h0ID0gbWFya3VwLmZvbnRXZWlnaHQgfHwgJ25vcm1hbCc7XG4gICAgdmFyIHRleHRBbGlnbiA9IFRFWFRfQU5DSE9SW21hcmt1cC50ZXh0QWxpZ25dIHx8ICdzdGFydCc7XG5cbiAgICBzZXRBdHRyaWJ1dGVzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQucmVjdCwgZWxlbWVudC5zdHlsZXMsIHtcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAsXG4gICAgICAgICdmb250LXdlaWdodCc6IGZvbnRXZWlnaHQsXG4gICAgICAgICdmb250LXNpemUnOiBmb250U2l6ZSxcbiAgICAgICAgJ2ZvbnQtZmFtaWx5JzogZm9udEZhbWlseSxcbiAgICAgICAgJ3RleHQtYW5jaG9yJzogdGV4dEFsaWduXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyB1cGRhdGUgdGV4dFxuICAgIGlmIChlbGVtZW50LnRleHQgIT09IG1hcmt1cC50ZXh0KSB7XG4gICAgICBlbGVtZW50LnRleHQgPSBtYXJrdXAudGV4dDtcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBtYXJrdXAudGV4dC5sZW5ndGggPyBtYXJrdXAudGV4dCA6ICcgJztcbiAgICB9XG4gIH07XG5cbiAgdmFyIHVwZGF0ZUxpbmUgPSBmdW5jdGlvbiB1cGRhdGVMaW5lKGVsZW1lbnQsIG1hcmt1cCwgc2l6ZSwgc2NhbGUpIHtcbiAgICBzZXRBdHRyaWJ1dGVzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQucmVjdCwgZWxlbWVudC5zdHlsZXMsIHtcbiAgICAgICAgZmlsbDogJ25vbmUnXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB2YXIgbGluZSA9IGVsZW1lbnQuY2hpbGROb2Rlc1swXTtcbiAgICB2YXIgYmVnaW4gPSBlbGVtZW50LmNoaWxkTm9kZXNbMV07XG4gICAgdmFyIGVuZCA9IGVsZW1lbnQuY2hpbGROb2Rlc1syXTtcblxuICAgIHZhciBvcmlnaW4gPSBlbGVtZW50LnJlY3Q7XG5cbiAgICB2YXIgdGFyZ2V0ID0ge1xuICAgICAgeDogZWxlbWVudC5yZWN0LnggKyBlbGVtZW50LnJlY3Qud2lkdGgsXG4gICAgICB5OiBlbGVtZW50LnJlY3QueSArIGVsZW1lbnQucmVjdC5oZWlnaHRcbiAgICB9O1xuXG4gICAgc2V0QXR0cmlidXRlcyhsaW5lLCB7XG4gICAgICB4MTogb3JpZ2luLngsXG4gICAgICB5MTogb3JpZ2luLnksXG4gICAgICB4MjogdGFyZ2V0LngsXG4gICAgICB5MjogdGFyZ2V0LnlcbiAgICB9KTtcblxuICAgIGlmICghbWFya3VwLmxpbmVEZWNvcmF0aW9uKSByZXR1cm47XG5cbiAgICBiZWdpbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGVuZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgdmFyIHYgPSB2ZWN0b3JOb3JtYWxpemUoe1xuICAgICAgeDogdGFyZ2V0LnggLSBvcmlnaW4ueCxcbiAgICAgIHk6IHRhcmdldC55IC0gb3JpZ2luLnlcbiAgICB9KTtcblxuICAgIHZhciBsID0gZ2V0TWFya3VwVmFsdWUoMC4wNSwgc2l6ZSwgc2NhbGUpO1xuXG4gICAgaWYgKG1hcmt1cC5saW5lRGVjb3JhdGlvbi5pbmRleE9mKCdhcnJvdy1iZWdpbicpICE9PSAtMSkge1xuICAgICAgdmFyIGFycm93QmVnaW5Sb3RhdGlvblBvaW50ID0gdmVjdG9yTXVsdGlwbHkodiwgbCk7XG4gICAgICB2YXIgYXJyb3dCZWdpbkNlbnRlciA9IHZlY3RvckFkZChvcmlnaW4sIGFycm93QmVnaW5Sb3RhdGlvblBvaW50KTtcbiAgICAgIHZhciBhcnJvd0JlZ2luQSA9IHZlY3RvclJvdGF0ZShvcmlnaW4sIDIsIGFycm93QmVnaW5DZW50ZXIpO1xuICAgICAgdmFyIGFycm93QmVnaW5CID0gdmVjdG9yUm90YXRlKG9yaWdpbiwgLTIsIGFycm93QmVnaW5DZW50ZXIpO1xuXG4gICAgICBzZXRBdHRyaWJ1dGVzKGJlZ2luLCB7XG4gICAgICAgIHN0eWxlOiAnZGlzcGxheTpibG9jazsnLFxuICAgICAgICBkOiAnTSdcbiAgICAgICAgICAuY29uY2F0KGFycm93QmVnaW5BLngsICcsJylcbiAgICAgICAgICAuY29uY2F0KGFycm93QmVnaW5BLnksICcgTCcpXG4gICAgICAgICAgLmNvbmNhdChvcmlnaW4ueCwgJywnKVxuICAgICAgICAgIC5jb25jYXQob3JpZ2luLnksICcgTCcpXG4gICAgICAgICAgLmNvbmNhdChhcnJvd0JlZ2luQi54LCAnLCcpXG4gICAgICAgICAgLmNvbmNhdChhcnJvd0JlZ2luQi55KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcmt1cC5saW5lRGVjb3JhdGlvbi5pbmRleE9mKCdhcnJvdy1lbmQnKSAhPT0gLTEpIHtcbiAgICAgIHZhciBhcnJvd0VuZFJvdGF0aW9uUG9pbnQgPSB2ZWN0b3JNdWx0aXBseSh2LCAtbCk7XG4gICAgICB2YXIgYXJyb3dFbmRDZW50ZXIgPSB2ZWN0b3JBZGQodGFyZ2V0LCBhcnJvd0VuZFJvdGF0aW9uUG9pbnQpO1xuICAgICAgdmFyIGFycm93RW5kQSA9IHZlY3RvclJvdGF0ZSh0YXJnZXQsIDIsIGFycm93RW5kQ2VudGVyKTtcbiAgICAgIHZhciBhcnJvd0VuZEIgPSB2ZWN0b3JSb3RhdGUodGFyZ2V0LCAtMiwgYXJyb3dFbmRDZW50ZXIpO1xuXG4gICAgICBzZXRBdHRyaWJ1dGVzKGVuZCwge1xuICAgICAgICBzdHlsZTogJ2Rpc3BsYXk6YmxvY2s7JyxcbiAgICAgICAgZDogJ00nXG4gICAgICAgICAgLmNvbmNhdChhcnJvd0VuZEEueCwgJywnKVxuICAgICAgICAgIC5jb25jYXQoYXJyb3dFbmRBLnksICcgTCcpXG4gICAgICAgICAgLmNvbmNhdCh0YXJnZXQueCwgJywnKVxuICAgICAgICAgIC5jb25jYXQodGFyZ2V0LnksICcgTCcpXG4gICAgICAgICAgLmNvbmNhdChhcnJvd0VuZEIueCwgJywnKVxuICAgICAgICAgIC5jb25jYXQoYXJyb3dFbmRCLnkpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHVwZGF0ZVBhdGggPSBmdW5jdGlvbiB1cGRhdGVQYXRoKGVsZW1lbnQsIG1hcmt1cCwgc2l6ZSwgc2NhbGUpIHtcbiAgICBzZXRBdHRyaWJ1dGVzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQuc3R5bGVzLCB7XG4gICAgICAgIGZpbGw6ICdub25lJyxcbiAgICAgICAgZDogcG9pbnRzVG9QYXRoU2hhcGUoXG4gICAgICAgICAgbWFya3VwLnBvaW50cy5tYXAoZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHg6IGdldE1hcmt1cFZhbHVlKHBvaW50LngsIHNpemUsIHNjYWxlLCAnd2lkdGgnKSxcbiAgICAgICAgICAgICAgeTogZ2V0TWFya3VwVmFsdWUocG9pbnQueSwgc2l6ZSwgc2NhbGUsICdoZWlnaHQnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVNoYXBlID0gZnVuY3Rpb24gY3JlYXRlU2hhcGUobm9kZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihtYXJrdXApIHtcbiAgICAgIHJldHVybiBzdmcobm9kZSwgeyBpZDogbWFya3VwLmlkIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUltYWdlID0gZnVuY3Rpb24gY3JlYXRlSW1hZ2UobWFya3VwKSB7XG4gICAgdmFyIHNoYXBlID0gc3ZnKCdpbWFnZScsIHtcbiAgICAgIGlkOiBtYXJrdXAuaWQsXG4gICAgICAnc3Ryb2tlLWxpbmVjYXAnOiAncm91bmQnLFxuICAgICAgJ3N0cm9rZS1saW5lam9pbic6ICdyb3VuZCcsXG4gICAgICBvcGFjaXR5OiAnMCdcbiAgICB9KTtcblxuICAgIHNoYXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2hhcGUuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgbWFya3VwLm9wYWNpdHkgfHwgMSk7XG4gICAgfTtcbiAgICBzaGFwZS5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgICAgICd4bGluazpocmVmJyxcbiAgICAgIG1hcmt1cC5zcmNcbiAgICApO1xuICAgIHJldHVybiBzaGFwZTtcbiAgfTtcblxuICB2YXIgY3JlYXRlTGluZSA9IGZ1bmN0aW9uIGNyZWF0ZUxpbmUobWFya3VwKSB7XG4gICAgdmFyIHNoYXBlID0gc3ZnKCdnJywge1xuICAgICAgaWQ6IG1hcmt1cC5pZCxcbiAgICAgICdzdHJva2UtbGluZWNhcCc6ICdyb3VuZCcsXG4gICAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ3JvdW5kJ1xuICAgIH0pO1xuXG4gICAgdmFyIGxpbmUgPSBzdmcoJ2xpbmUnKTtcbiAgICBzaGFwZS5hcHBlbmRDaGlsZChsaW5lKTtcblxuICAgIHZhciBiZWdpbiA9IHN2ZygncGF0aCcpO1xuICAgIHNoYXBlLmFwcGVuZENoaWxkKGJlZ2luKTtcblxuICAgIHZhciBlbmQgPSBzdmcoJ3BhdGgnKTtcbiAgICBzaGFwZS5hcHBlbmRDaGlsZChlbmQpO1xuXG4gICAgcmV0dXJuIHNoYXBlO1xuICB9O1xuXG4gIHZhciBDUkVBVEVfVFlQRV9ST1VURVMgPSB7XG4gICAgaW1hZ2U6IGNyZWF0ZUltYWdlLFxuICAgIHJlY3Q6IGNyZWF0ZVNoYXBlKCdyZWN0JyksXG4gICAgZWxsaXBzZTogY3JlYXRlU2hhcGUoJ2VsbGlwc2UnKSxcbiAgICB0ZXh0OiBjcmVhdGVTaGFwZSgndGV4dCcpLFxuICAgIHBhdGg6IGNyZWF0ZVNoYXBlKCdwYXRoJyksXG4gICAgbGluZTogY3JlYXRlTGluZVxuICB9O1xuXG4gIHZhciBVUERBVEVfVFlQRV9ST1VURVMgPSB7XG4gICAgcmVjdDogdXBkYXRlUmVjdCxcbiAgICBlbGxpcHNlOiB1cGRhdGVFbGxpcHNlLFxuICAgIGltYWdlOiB1cGRhdGVJbWFnZSxcbiAgICB0ZXh0OiB1cGRhdGVUZXh0LFxuICAgIHBhdGg6IHVwZGF0ZVBhdGgsXG4gICAgbGluZTogdXBkYXRlTGluZVxuICB9O1xuXG4gIHZhciBjcmVhdGVNYXJrdXBCeVR5cGUgPSBmdW5jdGlvbiBjcmVhdGVNYXJrdXBCeVR5cGUodHlwZSwgbWFya3VwKSB7XG4gICAgcmV0dXJuIENSRUFURV9UWVBFX1JPVVRFU1t0eXBlXShtYXJrdXApO1xuICB9O1xuXG4gIHZhciB1cGRhdGVNYXJrdXBCeVR5cGUgPSBmdW5jdGlvbiB1cGRhdGVNYXJrdXBCeVR5cGUoXG4gICAgZWxlbWVudCxcbiAgICB0eXBlLFxuICAgIG1hcmt1cCxcbiAgICBzaXplLFxuICAgIHNjYWxlXG4gICkge1xuICAgIGlmICh0eXBlICE9PSAncGF0aCcpIHtcbiAgICAgIGVsZW1lbnQucmVjdCA9IGdldE1hcmt1cFJlY3QobWFya3VwLCBzaXplLCBzY2FsZSk7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVzID0gZ2V0TWFya3VwU3R5bGVzKG1hcmt1cCwgc2l6ZSwgc2NhbGUpO1xuICAgIFVQREFURV9UWVBFX1JPVVRFU1t0eXBlXShlbGVtZW50LCBtYXJrdXAsIHNpemUsIHNjYWxlKTtcbiAgfTtcblxuICB2YXIgTUFSS1VQX1JFQ1QgPSBbXG4gICAgJ3gnLFxuICAgICd5JyxcbiAgICAnbGVmdCcsXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJyxcbiAgICAnd2lkdGgnLFxuICAgICdoZWlnaHQnXG4gIF07XG5cbiAgdmFyIHRvT3B0aW9uYWxGcmFjdGlvbiA9IGZ1bmN0aW9uIHRvT3B0aW9uYWxGcmFjdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIC8lLy50ZXN0KHZhbHVlKVxuICAgICAgPyBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMFxuICAgICAgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBhZGRzIGRlZmF1bHQgbWFya3VwIHByb3BlcnRpZXMsIGNsb25lcyBtYXJrdXBcbiAgdmFyIHByZXBhcmVNYXJrdXAgPSBmdW5jdGlvbiBwcmVwYXJlTWFya3VwKG1hcmt1cCkge1xuICAgIHZhciBfbWFya3VwID0gX3NsaWNlZFRvQXJyYXkobWFya3VwLCAyKSxcbiAgICAgIHR5cGUgPSBfbWFya3VwWzBdLFxuICAgICAgcHJvcHMgPSBfbWFya3VwWzFdO1xuXG4gICAgdmFyIHJlY3QgPSBwcm9wcy5wb2ludHNcbiAgICAgID8ge31cbiAgICAgIDogTUFSS1VQX1JFQ1QucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cnIpIHtcbiAgICAgICAgICBwcmV2W2N1cnJdID0gdG9PcHRpb25hbEZyYWN0aW9uKHByb3BzW2N1cnJdKTtcbiAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwge30pO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHR5cGUsXG4gICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgekluZGV4OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzLFxuICAgICAgICByZWN0XG4gICAgICApXG4gICAgXTtcbiAgfTtcblxuICB2YXIgc29ydE1hcmt1cEJ5WkluZGV4ID0gZnVuY3Rpb24gc29ydE1hcmt1cEJ5WkluZGV4KGEsIGIpIHtcbiAgICBpZiAoYVsxXS56SW5kZXggPiBiWzFdLnpJbmRleCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChhWzFdLnpJbmRleCA8IGJbMV0uekluZGV4KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHZhciBjcmVhdGVNYXJrdXBWaWV3ID0gZnVuY3Rpb24gY3JlYXRlTWFya3VwVmlldyhfKSB7XG4gICAgcmV0dXJuIF8udXRpbHMuY3JlYXRlVmlldyh7XG4gICAgICBuYW1lOiAnaW1hZ2UtcHJldmlldy1tYXJrdXAnLFxuICAgICAgdGFnOiAnc3ZnJyxcbiAgICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgICBtaXhpbnM6IHtcbiAgICAgICAgYXBpczogWyd3aWR0aCcsICdoZWlnaHQnLCAnY3JvcCcsICdtYXJrdXAnLCAncmVzaXplJywgJ2RpcnR5J11cbiAgICAgIH0sXG5cbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShfcmVmKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcblxuICAgICAgICBpZiAoIXByb3BzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHZhciBjcm9wID0gcHJvcHMuY3JvcCxcbiAgICAgICAgICByZXNpemUgPSBwcm9wcy5yZXNpemUsXG4gICAgICAgICAgbWFya3VwID0gcHJvcHMubWFya3VwO1xuXG4gICAgICAgIHZhciB2aWV3V2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICAgICAgdmFyIHZpZXdIZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIGNyb3BXaWR0aCA9IGNyb3Aud2lkdGg7XG4gICAgICAgIHZhciBjcm9wSGVpZ2h0ID0gY3JvcC5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKHJlc2l6ZSkge1xuICAgICAgICAgIHZhciBfc2l6ZSA9IHJlc2l6ZS5zaXplO1xuXG4gICAgICAgICAgdmFyIG91dHB1dFdpZHRoID0gX3NpemUgJiYgX3NpemUud2lkdGg7XG4gICAgICAgICAgdmFyIG91dHB1dEhlaWdodCA9IF9zaXplICYmIF9zaXplLmhlaWdodDtcbiAgICAgICAgICB2YXIgb3V0cHV0Rml0ID0gcmVzaXplLm1vZGU7XG4gICAgICAgICAgdmFyIG91dHB1dFVwc2NhbGUgPSByZXNpemUudXBzY2FsZTtcblxuICAgICAgICAgIGlmIChvdXRwdXRXaWR0aCAmJiAhb3V0cHV0SGVpZ2h0KSBvdXRwdXRIZWlnaHQgPSBvdXRwdXRXaWR0aDtcbiAgICAgICAgICBpZiAob3V0cHV0SGVpZ2h0ICYmICFvdXRwdXRXaWR0aCkgb3V0cHV0V2lkdGggPSBvdXRwdXRIZWlnaHQ7XG5cbiAgICAgICAgICB2YXIgc2hvdWxkVXBzY2FsZSA9XG4gICAgICAgICAgICBjcm9wV2lkdGggPCBvdXRwdXRXaWR0aCAmJiBjcm9wSGVpZ2h0IDwgb3V0cHV0SGVpZ2h0O1xuXG4gICAgICAgICAgaWYgKCFzaG91bGRVcHNjYWxlIHx8IChzaG91bGRVcHNjYWxlICYmIG91dHB1dFVwc2NhbGUpKSB7XG4gICAgICAgICAgICB2YXIgc2NhbGFyV2lkdGggPSBvdXRwdXRXaWR0aCAvIGNyb3BXaWR0aDtcbiAgICAgICAgICAgIHZhciBzY2FsYXJIZWlnaHQgPSBvdXRwdXRIZWlnaHQgLyBjcm9wSGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAob3V0cHV0Rml0ID09PSAnZm9yY2UnKSB7XG4gICAgICAgICAgICAgIGNyb3BXaWR0aCA9IG91dHB1dFdpZHRoO1xuICAgICAgICAgICAgICBjcm9wSGVpZ2h0ID0gb3V0cHV0SGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHNjYWxhcjtcbiAgICAgICAgICAgICAgaWYgKG91dHB1dEZpdCA9PT0gJ2NvdmVyJykge1xuICAgICAgICAgICAgICAgIHNjYWxhciA9IE1hdGgubWF4KHNjYWxhcldpZHRoLCBzY2FsYXJIZWlnaHQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91dHB1dEZpdCA9PT0gJ2NvbnRhaW4nKSB7XG4gICAgICAgICAgICAgICAgc2NhbGFyID0gTWF0aC5taW4oc2NhbGFyV2lkdGgsIHNjYWxhckhlaWdodCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY3JvcFdpZHRoID0gY3JvcFdpZHRoICogc2NhbGFyO1xuICAgICAgICAgICAgICBjcm9wSGVpZ2h0ID0gY3JvcEhlaWdodCAqIHNjYWxhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2l6ZSA9IHtcbiAgICAgICAgICB3aWR0aDogdmlld1dpZHRoLFxuICAgICAgICAgIGhlaWdodDogdmlld0hlaWdodFxuICAgICAgICB9O1xuXG4gICAgICAgIHJvb3QuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgc2l6ZS53aWR0aCk7XG4gICAgICAgIHJvb3QuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHNpemUuaGVpZ2h0KTtcblxuICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLm1pbih2aWV3V2lkdGggLyBjcm9wV2lkdGgsIHZpZXdIZWlnaHQgLyBjcm9wSGVpZ2h0KTtcblxuICAgICAgICAvLyBjbGVhclxuICAgICAgICByb290LmVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgLy8gZ2V0IGZpbHRlclxuICAgICAgICB2YXIgbWFya3VwRmlsdGVyID0gcm9vdC5xdWVyeSgnR0VUX0lNQUdFX1BSRVZJRVdfTUFSS1VQX0ZJTFRFUicpO1xuXG4gICAgICAgIC8vIGRyYXcgbmV3XG4gICAgICAgIG1hcmt1cFxuICAgICAgICAgIC5maWx0ZXIobWFya3VwRmlsdGVyKVxuICAgICAgICAgIC5tYXAocHJlcGFyZU1hcmt1cClcbiAgICAgICAgICAuc29ydChzb3J0TWFya3VwQnlaSW5kZXgpXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obWFya3VwKSB7XG4gICAgICAgICAgICB2YXIgX21hcmt1cCA9IF9zbGljZWRUb0FycmF5KG1hcmt1cCwgMiksXG4gICAgICAgICAgICAgIHR5cGUgPSBfbWFya3VwWzBdLFxuICAgICAgICAgICAgICBzZXR0aW5ncyA9IF9tYXJrdXBbMV07XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZVxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBjcmVhdGVNYXJrdXBCeVR5cGUodHlwZSwgc2V0dGluZ3MpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgICAgIHVwZGF0ZU1hcmt1cEJ5VHlwZShlbGVtZW50LCB0eXBlLCBzZXR0aW5ncywgc2l6ZSwgc2NhbGUpO1xuXG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIHJvb3QuZWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlVmVjdG9yJDEgPSBmdW5jdGlvbiBjcmVhdGVWZWN0b3IoeCwgeSkge1xuICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgfTtcblxuICB2YXIgdmVjdG9yRG90ID0gZnVuY3Rpb24gdmVjdG9yRG90KGEsIGIpIHtcbiAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55O1xuICB9O1xuXG4gIHZhciB2ZWN0b3JTdWJ0cmFjdCA9IGZ1bmN0aW9uIHZlY3RvclN1YnRyYWN0KGEsIGIpIHtcbiAgICByZXR1cm4gY3JlYXRlVmVjdG9yJDEoYS54IC0gYi54LCBhLnkgLSBiLnkpO1xuICB9O1xuXG4gIHZhciB2ZWN0b3JEaXN0YW5jZVNxdWFyZWQgPSBmdW5jdGlvbiB2ZWN0b3JEaXN0YW5jZVNxdWFyZWQoYSwgYikge1xuICAgIHJldHVybiB2ZWN0b3JEb3QodmVjdG9yU3VidHJhY3QoYSwgYiksIHZlY3RvclN1YnRyYWN0KGEsIGIpKTtcbiAgfTtcblxuICB2YXIgdmVjdG9yRGlzdGFuY2UgPSBmdW5jdGlvbiB2ZWN0b3JEaXN0YW5jZShhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh2ZWN0b3JEaXN0YW5jZVNxdWFyZWQoYSwgYikpO1xuICB9O1xuXG4gIHZhciBnZXRPZmZzZXRQb2ludE9uRWRnZSA9IGZ1bmN0aW9uIGdldE9mZnNldFBvaW50T25FZGdlKGxlbmd0aCwgcm90YXRpb24pIHtcbiAgICB2YXIgYSA9IGxlbmd0aDtcblxuICAgIHZhciBBID0gMS41NzA3OTYzMjY3OTQ4OTY2O1xuICAgIHZhciBCID0gcm90YXRpb247XG4gICAgdmFyIEMgPSAxLjU3MDc5NjMyNjc5NDg5NjYgLSByb3RhdGlvbjtcblxuICAgIHZhciBzaW5BID0gTWF0aC5zaW4oQSk7XG4gICAgdmFyIHNpbkIgPSBNYXRoLnNpbihCKTtcbiAgICB2YXIgc2luQyA9IE1hdGguc2luKEMpO1xuICAgIHZhciBjb3NDID0gTWF0aC5jb3MoQyk7XG4gICAgdmFyIHJhdGlvID0gYSAvIHNpbkE7XG4gICAgdmFyIGIgPSByYXRpbyAqIHNpbkI7XG4gICAgdmFyIGMgPSByYXRpbyAqIHNpbkM7XG5cbiAgICByZXR1cm4gY3JlYXRlVmVjdG9yJDEoY29zQyAqIGIsIGNvc0MgKiBjKTtcbiAgfTtcblxuICB2YXIgZ2V0Um90YXRlZFJlY3RTaXplID0gZnVuY3Rpb24gZ2V0Um90YXRlZFJlY3RTaXplKHJlY3QsIHJvdGF0aW9uKSB7XG4gICAgdmFyIHcgPSByZWN0LndpZHRoO1xuICAgIHZhciBoID0gcmVjdC5oZWlnaHQ7XG5cbiAgICB2YXIgaG9yID0gZ2V0T2Zmc2V0UG9pbnRPbkVkZ2Uodywgcm90YXRpb24pO1xuICAgIHZhciB2ZXIgPSBnZXRPZmZzZXRQb2ludE9uRWRnZShoLCByb3RhdGlvbik7XG5cbiAgICB2YXIgdGwgPSBjcmVhdGVWZWN0b3IkMShyZWN0LnggKyBNYXRoLmFicyhob3IueCksIHJlY3QueSAtIE1hdGguYWJzKGhvci55KSk7XG5cbiAgICB2YXIgdHIgPSBjcmVhdGVWZWN0b3IkMShcbiAgICAgIHJlY3QueCArIHJlY3Qud2lkdGggKyBNYXRoLmFicyh2ZXIueSksXG4gICAgICByZWN0LnkgKyBNYXRoLmFicyh2ZXIueClcbiAgICApO1xuXG4gICAgdmFyIGJsID0gY3JlYXRlVmVjdG9yJDEoXG4gICAgICByZWN0LnggLSBNYXRoLmFicyh2ZXIueSksXG4gICAgICByZWN0LnkgKyByZWN0LmhlaWdodCAtIE1hdGguYWJzKHZlci54KVxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHZlY3RvckRpc3RhbmNlKHRsLCB0ciksXG4gICAgICBoZWlnaHQ6IHZlY3RvckRpc3RhbmNlKHRsLCBibClcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjYWxjdWxhdGVDYW52YXNTaXplID0gZnVuY3Rpb24gY2FsY3VsYXRlQ2FudmFzU2l6ZShcbiAgICBpbWFnZSxcbiAgICBjYW52YXNBc3BlY3RSYXRpb1xuICApIHtcbiAgICB2YXIgem9vbSA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG5cbiAgICB2YXIgaW1hZ2VBc3BlY3RSYXRpbyA9IGltYWdlLmhlaWdodCAvIGltYWdlLndpZHRoO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGFjdHVhbCBwaXhlbHMgb24geCBhbmQgeSBheGlzXG4gICAgdmFyIGNhbnZhc1dpZHRoID0gMTtcbiAgICB2YXIgY2FudmFzSGVpZ2h0ID0gY2FudmFzQXNwZWN0UmF0aW87XG4gICAgdmFyIGltZ1dpZHRoID0gMTtcbiAgICB2YXIgaW1nSGVpZ2h0ID0gaW1hZ2VBc3BlY3RSYXRpbztcbiAgICBpZiAoaW1nSGVpZ2h0ID4gY2FudmFzSGVpZ2h0KSB7XG4gICAgICBpbWdIZWlnaHQgPSBjYW52YXNIZWlnaHQ7XG4gICAgICBpbWdXaWR0aCA9IGltZ0hlaWdodCAvIGltYWdlQXNwZWN0UmF0aW87XG4gICAgfVxuXG4gICAgdmFyIHNjYWxhciA9IE1hdGgubWF4KGNhbnZhc1dpZHRoIC8gaW1nV2lkdGgsIGNhbnZhc0hlaWdodCAvIGltZ0hlaWdodCk7XG4gICAgdmFyIHdpZHRoID0gaW1hZ2Uud2lkdGggLyAoem9vbSAqIHNjYWxhciAqIGltZ1dpZHRoKTtcbiAgICB2YXIgaGVpZ2h0ID0gd2lkdGggKiBjYW52YXNBc3BlY3RSYXRpbztcblxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH07XG4gIH07XG5cbiAgdmFyIGdldEltYWdlUmVjdFpvb21GYWN0b3IgPSBmdW5jdGlvbiBnZXRJbWFnZVJlY3Rab29tRmFjdG9yKFxuICAgIGltYWdlUmVjdCxcbiAgICBjcm9wUmVjdCxcbiAgICByb3RhdGlvbixcbiAgICBjZW50ZXJcbiAgKSB7XG4gICAgLy8gY2FsY3VsYXRlIGF2YWlsYWJsZSBzcGFjZSByb3VuZCBpbWFnZSBjZW50ZXIgcG9zaXRpb25cbiAgICB2YXIgY3ggPSBjZW50ZXIueCA+IDAuNSA/IDEgLSBjZW50ZXIueCA6IGNlbnRlci54O1xuICAgIHZhciBjeSA9IGNlbnRlci55ID4gMC41ID8gMSAtIGNlbnRlci55IDogY2VudGVyLnk7XG4gICAgdmFyIGltYWdlV2lkdGggPSBjeCAqIDIgKiBpbWFnZVJlY3Qud2lkdGg7XG4gICAgdmFyIGltYWdlSGVpZ2h0ID0gY3kgKiAyICogaW1hZ2VSZWN0LmhlaWdodDtcblxuICAgIC8vIGNhbGN1bGF0ZSByb3RhdGVkIGNyb3AgcmVjdGFuZ2xlIHNpemVcbiAgICB2YXIgcm90YXRlZENyb3BTaXplID0gZ2V0Um90YXRlZFJlY3RTaXplKGNyb3BSZWN0LCByb3RhdGlvbik7XG5cbiAgICAvLyBjYWxjdWxhdGUgc2NhbGFyIHJlcXVpcmVkIHRvIGZpdCBpbWFnZVxuICAgIHJldHVybiBNYXRoLm1heChcbiAgICAgIHJvdGF0ZWRDcm9wU2l6ZS53aWR0aCAvIGltYWdlV2lkdGgsXG4gICAgICByb3RhdGVkQ3JvcFNpemUuaGVpZ2h0IC8gaW1hZ2VIZWlnaHRcbiAgICApO1xuICB9O1xuXG4gIHZhciBnZXRDZW50ZXJlZENyb3BSZWN0ID0gZnVuY3Rpb24gZ2V0Q2VudGVyZWRDcm9wUmVjdChcbiAgICBjb250YWluZXIsXG4gICAgYXNwZWN0UmF0aW9cbiAgKSB7XG4gICAgdmFyIHdpZHRoID0gY29udGFpbmVyLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSB3aWR0aCAqIGFzcGVjdFJhdGlvO1xuICAgIGlmIChoZWlnaHQgPiBjb250YWluZXIuaGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBjb250YWluZXIuaGVpZ2h0O1xuICAgICAgd2lkdGggPSBoZWlnaHQgLyBhc3BlY3RSYXRpbztcbiAgICB9XG4gICAgdmFyIHggPSAoY29udGFpbmVyLndpZHRoIC0gd2lkdGgpICogMC41O1xuICAgIHZhciB5ID0gKGNvbnRhaW5lci5oZWlnaHQgLSBoZWlnaHQpICogMC41O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICB9O1xuICB9O1xuXG4gIHZhciBnZXRDdXJyZW50Q3JvcFNpemUgPSBmdW5jdGlvbiBnZXRDdXJyZW50Q3JvcFNpemUoaW1hZ2VTaXplKSB7XG4gICAgdmFyIGNyb3AgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgem9vbSA9IGNyb3Auem9vbSxcbiAgICAgIHJvdGF0aW9uID0gY3JvcC5yb3RhdGlvbixcbiAgICAgIGNlbnRlciA9IGNyb3AuY2VudGVyLFxuICAgICAgYXNwZWN0UmF0aW8gPSBjcm9wLmFzcGVjdFJhdGlvO1xuXG4gICAgaWYgKCFhc3BlY3RSYXRpbykgYXNwZWN0UmF0aW8gPSBpbWFnZVNpemUuaGVpZ2h0IC8gaW1hZ2VTaXplLndpZHRoO1xuXG4gICAgdmFyIGNhbnZhc1NpemUgPSBjYWxjdWxhdGVDYW52YXNTaXplKGltYWdlU2l6ZSwgYXNwZWN0UmF0aW8sIHpvb20pO1xuXG4gICAgdmFyIGNhbnZhc0NlbnRlciA9IHtcbiAgICAgIHg6IGNhbnZhc1NpemUud2lkdGggKiAwLjUsXG4gICAgICB5OiBjYW52YXNTaXplLmhlaWdodCAqIDAuNVxuICAgIH07XG5cbiAgICB2YXIgc3RhZ2UgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHdpZHRoOiBjYW52YXNTaXplLndpZHRoLFxuICAgICAgaGVpZ2h0OiBjYW52YXNTaXplLmhlaWdodCxcbiAgICAgIGNlbnRlcjogY2FudmFzQ2VudGVyXG4gICAgfTtcblxuICAgIHZhciBzaG91bGRMaW1pdCA9IHR5cGVvZiBjcm9wLnNjYWxlVG9GaXQgPT09ICd1bmRlZmluZWQnIHx8IGNyb3Auc2NhbGVUb0ZpdDtcblxuICAgIHZhciBzdGFnZVpvb21GYWN0b3IgPSBnZXRJbWFnZVJlY3Rab29tRmFjdG9yKFxuICAgICAgaW1hZ2VTaXplLFxuICAgICAgZ2V0Q2VudGVyZWRDcm9wUmVjdChzdGFnZSwgYXNwZWN0UmF0aW8pLFxuICAgICAgcm90YXRpb24sXG4gICAgICBzaG91bGRMaW1pdCA/IGNlbnRlciA6IHsgeDogMC41LCB5OiAwLjUgfVxuICAgICk7XG5cbiAgICB2YXIgc2NhbGUgPSB6b29tICogc3RhZ2Vab29tRmFjdG9yO1xuXG4gICAgLy8gc3RhcnQgZHJhd2luZ1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aEZsb2F0OiBjYW52YXNTaXplLndpZHRoIC8gc2NhbGUsXG4gICAgICBoZWlnaHRGbG9hdDogY2FudmFzU2l6ZS5oZWlnaHQgLyBzY2FsZSxcbiAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKGNhbnZhc1NpemUud2lkdGggLyBzY2FsZSksXG4gICAgICBoZWlnaHQ6IE1hdGgucm91bmQoY2FudmFzU2l6ZS5oZWlnaHQgLyBzY2FsZSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMgPSB7XG4gICAgdHlwZTogJ3NwcmluZycsXG4gICAgc3RpZmZuZXNzOiAwLjUsXG4gICAgZGFtcGluZzogMC40NSxcbiAgICBtYXNzOiAxMFxuICB9O1xuXG4gIC8vIGRvZXMgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgZmxpcHBpbmdcbiAgdmFyIGNyZWF0ZUJpdG1hcFZpZXcgPSBmdW5jdGlvbiBjcmVhdGVCaXRtYXBWaWV3KF8pIHtcbiAgICByZXR1cm4gXy51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdpbWFnZS1iaXRtYXAnLFxuICAgICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICAgIG1peGluczogeyBzdHlsZXM6IFsnc2NhbGVYJywgJ3NjYWxlWSddIH0sXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZChwcm9wcy5pbWFnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gc2hpZnRzIGFuZCByb3RhdGVzIGltYWdlXG4gIHZhciBjcmVhdGVJbWFnZUNhbnZhc1dyYXBwZXIgPSBmdW5jdGlvbiBjcmVhdGVJbWFnZUNhbnZhc1dyYXBwZXIoXykge1xuICAgIHJldHVybiBfLnV0aWxzLmNyZWF0ZVZpZXcoe1xuICAgICAgbmFtZTogJ2ltYWdlLWNhbnZhcy13cmFwcGVyJyxcbiAgICAgIHRhZzogJ2RpdicsXG4gICAgICBpZ25vcmVSZWN0OiB0cnVlLFxuICAgICAgbWl4aW5zOiB7XG4gICAgICAgIGFwaXM6IFsnY3JvcCcsICd3aWR0aCcsICdoZWlnaHQnXSxcblxuICAgICAgICBzdHlsZXM6IFtcbiAgICAgICAgICAnb3JpZ2luWCcsXG4gICAgICAgICAgJ29yaWdpblknLFxuICAgICAgICAgICd0cmFuc2xhdGVYJyxcbiAgICAgICAgICAndHJhbnNsYXRlWScsXG4gICAgICAgICAgJ3NjYWxlWCcsXG4gICAgICAgICAgJ3NjYWxlWScsXG4gICAgICAgICAgJ3JvdGF0ZVonXG4gICAgICAgIF0sXG5cbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgIG9yaWdpblg6IElNQUdFX1NDQUxFX1NQUklOR19QUk9QUyxcbiAgICAgICAgICBvcmlnaW5ZOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgc2NhbGVYOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgc2NhbGVZOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgdHJhbnNsYXRlWDogSU1BR0VfU0NBTEVfU1BSSU5HX1BST1BTLFxuICAgICAgICAgIHRyYW5zbGF0ZVk6IElNQUdFX1NDQUxFX1NQUklOR19QUk9QUyxcbiAgICAgICAgICByb3RhdGVaOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFNcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoX3JlZjIpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZjIucHJvcHM7XG4gICAgICAgIHByb3BzLndpZHRoID0gcHJvcHMuaW1hZ2Uud2lkdGg7XG4gICAgICAgIHByb3BzLmhlaWdodCA9IHByb3BzLmltYWdlLmhlaWdodDtcbiAgICAgICAgcm9vdC5yZWYuYml0bWFwID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoY3JlYXRlQml0bWFwVmlldyhfKSwgeyBpbWFnZTogcHJvcHMuaW1hZ2UgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoX3JlZjMpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZjMucHJvcHM7XG4gICAgICAgIHZhciBmbGlwID0gcHJvcHMuY3JvcC5mbGlwO1xuICAgICAgICB2YXIgYml0bWFwID0gcm9vdC5yZWYuYml0bWFwO1xuICAgICAgICBiaXRtYXAuc2NhbGVYID0gZmxpcC5ob3Jpem9udGFsID8gLTEgOiAxO1xuICAgICAgICBiaXRtYXAuc2NhbGVZID0gZmxpcC52ZXJ0aWNhbCA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvLyBjbGlwcyBjYW52YXMgdG8gY29ycmVjdCBhc3BlY3QgcmF0aW9cbiAgdmFyIGNyZWF0ZUNsaXBWaWV3ID0gZnVuY3Rpb24gY3JlYXRlQ2xpcFZpZXcoXykge1xuICAgIHJldHVybiBfLnV0aWxzLmNyZWF0ZVZpZXcoe1xuICAgICAgbmFtZTogJ2ltYWdlLWNsaXAnLFxuICAgICAgdGFnOiAnZGl2JyxcbiAgICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgICBtaXhpbnM6IHtcbiAgICAgICAgYXBpczogW1xuICAgICAgICAgICdjcm9wJyxcbiAgICAgICAgICAnbWFya3VwJyxcbiAgICAgICAgICAncmVzaXplJyxcbiAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICdkaXJ0eScsXG4gICAgICAgICAgJ2JhY2tncm91bmQnXG4gICAgICAgIF0sXG5cbiAgICAgICAgc3R5bGVzOiBbJ3dpZHRoJywgJ2hlaWdodCcsICdvcGFjaXR5J10sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICBvcGFjaXR5OiB7IHR5cGU6ICd0d2VlbicsIGR1cmF0aW9uOiAyNTAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBkaWRXcml0ZVZpZXc6IGZ1bmN0aW9uIGRpZFdyaXRlVmlldyhfcmVmNCkge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWY0LnJvb3QsXG4gICAgICAgICAgcHJvcHMgPSBfcmVmNC5wcm9wcztcbiAgICAgICAgaWYgKCFwcm9wcy5iYWNrZ3JvdW5kKSByZXR1cm47XG4gICAgICAgIHJvb3QuZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKF9yZWY1KSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWY1LnByb3BzO1xuXG4gICAgICAgIHJvb3QucmVmLmltYWdlID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoXG4gICAgICAgICAgICBjcmVhdGVJbWFnZUNhbnZhc1dyYXBwZXIoXyksXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBwcm9wcylcbiAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgcm9vdC5yZWYuY3JlYXRlTWFya3VwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHJvb3QucmVmLm1hcmt1cCkgcmV0dXJuO1xuICAgICAgICAgIHJvb3QucmVmLm1hcmt1cCA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoY3JlYXRlTWFya3VwVmlldyhfKSwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMpKVxuICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcm9vdC5yZWYuZGVzdHJveU1hcmt1cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghcm9vdC5yZWYubWFya3VwKSByZXR1cm47XG4gICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZFZpZXcocm9vdC5yZWYubWFya3VwKTtcbiAgICAgICAgICByb290LnJlZi5tYXJrdXAgPSBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNldCB1cCB0cmFuc3BhcmVuY3kgZ3JpZFxuICAgICAgICB2YXIgdHJhbnNwYXJlbmN5SW5kaWNhdG9yID0gcm9vdC5xdWVyeShcbiAgICAgICAgICAnR0VUX0lNQUdFX1BSRVZJRVdfVFJBTlNQQVJFTkNZX0lORElDQVRPUidcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRyYW5zcGFyZW5jeUluZGljYXRvciA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIGdyaWQgcGF0dGVyblxuICAgICAgICBpZiAodHJhbnNwYXJlbmN5SW5kaWNhdG9yID09PSAnZ3JpZCcpIHtcbiAgICAgICAgICByb290LmVsZW1lbnQuZGF0YXNldC50cmFuc3BhcmVuY3lJbmRpY2F0b3IgPSB0cmFuc3BhcmVuY3lJbmRpY2F0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmFzaWMgY29sb3JcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcm9vdC5lbGVtZW50LmRhdGFzZXQudHJhbnNwYXJlbmN5SW5kaWNhdG9yID0gJ2NvbG9yJztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShfcmVmNikge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3QsXG4gICAgICAgICAgcHJvcHMgPSBfcmVmNi5wcm9wcyxcbiAgICAgICAgICBzaG91bGRPcHRpbWl6ZSA9IF9yZWY2LnNob3VsZE9wdGltaXplO1xuICAgICAgICB2YXIgY3JvcCA9IHByb3BzLmNyb3AsXG4gICAgICAgICAgbWFya3VwID0gcHJvcHMubWFya3VwLFxuICAgICAgICAgIHJlc2l6ZSA9IHByb3BzLnJlc2l6ZSxcbiAgICAgICAgICBkaXJ0eSA9IHByb3BzLmRpcnR5LFxuICAgICAgICAgIHdpZHRoID0gcHJvcHMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xuXG4gICAgICAgIHJvb3QucmVmLmltYWdlLmNyb3AgPSBjcm9wO1xuXG4gICAgICAgIHZhciBzdGFnZSA9IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgeDogd2lkdGggKiAwLjUsXG4gICAgICAgICAgICB5OiBoZWlnaHQgKiAwLjVcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGltYWdlID0ge1xuICAgICAgICAgIHdpZHRoOiByb290LnJlZi5pbWFnZS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHJvb3QucmVmLmltYWdlLmhlaWdodFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvcmlnaW4gPSB7XG4gICAgICAgICAgeDogY3JvcC5jZW50ZXIueCAqIGltYWdlLndpZHRoLFxuICAgICAgICAgIHk6IGNyb3AuY2VudGVyLnkgKiBpbWFnZS5oZWlnaHRcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSB7XG4gICAgICAgICAgeDogc3RhZ2UuY2VudGVyLnggLSBpbWFnZS53aWR0aCAqIGNyb3AuY2VudGVyLngsXG4gICAgICAgICAgeTogc3RhZ2UuY2VudGVyLnkgLSBpbWFnZS5oZWlnaHQgKiBjcm9wLmNlbnRlci55XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJvdGF0aW9uID0gTWF0aC5QSSAqIDIgKyAoY3JvcC5yb3RhdGlvbiAlIChNYXRoLlBJICogMikpO1xuXG4gICAgICAgIHZhciBjcm9wQXNwZWN0UmF0aW8gPSBjcm9wLmFzcGVjdFJhdGlvIHx8IGltYWdlLmhlaWdodCAvIGltYWdlLndpZHRoO1xuXG4gICAgICAgIHZhciBzaG91bGRMaW1pdCA9XG4gICAgICAgICAgdHlwZW9mIGNyb3Auc2NhbGVUb0ZpdCA9PT0gJ3VuZGVmaW5lZCcgfHwgY3JvcC5zY2FsZVRvRml0O1xuXG4gICAgICAgIHZhciBzdGFnZVpvb21GYWN0b3IgPSBnZXRJbWFnZVJlY3Rab29tRmFjdG9yKFxuICAgICAgICAgIGltYWdlLFxuICAgICAgICAgIGdldENlbnRlcmVkQ3JvcFJlY3Qoc3RhZ2UsIGNyb3BBc3BlY3RSYXRpbyksXG5cbiAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICBzaG91bGRMaW1pdCA/IGNyb3AuY2VudGVyIDogeyB4OiAwLjUsIHk6IDAuNSB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIHNjYWxlID0gY3JvcC56b29tICogc3RhZ2Vab29tRmFjdG9yO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBtYXJrdXAgdmlld1xuICAgICAgICBpZiAobWFya3VwICYmIG1hcmt1cC5sZW5ndGgpIHtcbiAgICAgICAgICByb290LnJlZi5jcmVhdGVNYXJrdXAoKTtcbiAgICAgICAgICByb290LnJlZi5tYXJrdXAud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICByb290LnJlZi5tYXJrdXAuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgIHJvb3QucmVmLm1hcmt1cC5yZXNpemUgPSByZXNpemU7XG4gICAgICAgICAgcm9vdC5yZWYubWFya3VwLmRpcnR5ID0gZGlydHk7XG4gICAgICAgICAgcm9vdC5yZWYubWFya3VwLm1hcmt1cCA9IG1hcmt1cDtcbiAgICAgICAgICByb290LnJlZi5tYXJrdXAuY3JvcCA9IGdldEN1cnJlbnRDcm9wU2l6ZShpbWFnZSwgY3JvcCk7XG4gICAgICAgIH0gZWxzZSBpZiAocm9vdC5yZWYubWFya3VwKSB7XG4gICAgICAgICAgcm9vdC5yZWYuZGVzdHJveU1hcmt1cCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGltYWdlIHZpZXdcbiAgICAgICAgdmFyIGltYWdlVmlldyA9IHJvb3QucmVmLmltYWdlO1xuXG4gICAgICAgIC8vIGRvbid0IHVwZGF0ZSBjbGlwIGxheW91dFxuICAgICAgICBpZiAoc2hvdWxkT3B0aW1pemUpIHtcbiAgICAgICAgICBpbWFnZVZpZXcub3JpZ2luWCA9IG51bGw7XG4gICAgICAgICAgaW1hZ2VWaWV3Lm9yaWdpblkgPSBudWxsO1xuICAgICAgICAgIGltYWdlVmlldy50cmFuc2xhdGVYID0gbnVsbDtcbiAgICAgICAgICBpbWFnZVZpZXcudHJhbnNsYXRlWSA9IG51bGw7XG4gICAgICAgICAgaW1hZ2VWaWV3LnJvdGF0ZVogPSBudWxsO1xuICAgICAgICAgIGltYWdlVmlldy5zY2FsZVggPSBudWxsO1xuICAgICAgICAgIGltYWdlVmlldy5zY2FsZVkgPSBudWxsO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlVmlldy5vcmlnaW5YID0gb3JpZ2luLng7XG4gICAgICAgIGltYWdlVmlldy5vcmlnaW5ZID0gb3JpZ2luLnk7XG4gICAgICAgIGltYWdlVmlldy50cmFuc2xhdGVYID0gdHJhbnNsYXRpb24ueDtcbiAgICAgICAgaW1hZ2VWaWV3LnRyYW5zbGF0ZVkgPSB0cmFuc2xhdGlvbi55O1xuICAgICAgICBpbWFnZVZpZXcucm90YXRlWiA9IHJvdGF0aW9uO1xuICAgICAgICBpbWFnZVZpZXcuc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIGltYWdlVmlldy5zY2FsZVkgPSBzY2FsZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlSW1hZ2VWaWV3ID0gZnVuY3Rpb24gY3JlYXRlSW1hZ2VWaWV3KF8pIHtcbiAgICByZXR1cm4gXy51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdpbWFnZS1wcmV2aWV3JyxcbiAgICAgIHRhZzogJ2RpdicsXG4gICAgICBpZ25vcmVSZWN0OiB0cnVlLFxuICAgICAgbWl4aW5zOiB7XG4gICAgICAgIGFwaXM6IFsnaW1hZ2UnLCAnY3JvcCcsICdtYXJrdXAnLCAncmVzaXplJywgJ2RpcnR5JywgJ2JhY2tncm91bmQnXSxcblxuICAgICAgICBzdHlsZXM6IFsndHJhbnNsYXRlWScsICdzY2FsZVgnLCAnc2NhbGVZJywgJ29wYWNpdHknXSxcblxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgc2NhbGVYOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgc2NhbGVZOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgdHJhbnNsYXRlWTogSU1BR0VfU0NBTEVfU1BSSU5HX1BST1BTLFxuICAgICAgICAgIG9wYWNpdHk6IHsgdHlwZTogJ3R3ZWVuJywgZHVyYXRpb246IDQwMCB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKF9yZWY3KSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjcucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWY3LnByb3BzO1xuICAgICAgICByb290LnJlZi5jbGlwID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoY3JlYXRlQ2xpcFZpZXcoXyksIHtcbiAgICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICAgIGltYWdlOiBwcm9wcy5pbWFnZSxcbiAgICAgICAgICAgIGNyb3A6IHByb3BzLmNyb3AsXG4gICAgICAgICAgICBtYXJrdXA6IHByb3BzLm1hcmt1cCxcbiAgICAgICAgICAgIHJlc2l6ZTogcHJvcHMucmVzaXplLFxuICAgICAgICAgICAgZGlydHk6IHByb3BzLmRpcnR5LFxuICAgICAgICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKF9yZWY4KSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjgucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWY4LnByb3BzLFxuICAgICAgICAgIHNob3VsZE9wdGltaXplID0gX3JlZjguc2hvdWxkT3B0aW1pemU7XG4gICAgICAgIHZhciBjbGlwID0gcm9vdC5yZWYuY2xpcDtcbiAgICAgICAgdmFyIGltYWdlID0gcHJvcHMuaW1hZ2UsXG4gICAgICAgICAgY3JvcCA9IHByb3BzLmNyb3AsXG4gICAgICAgICAgbWFya3VwID0gcHJvcHMubWFya3VwLFxuICAgICAgICAgIHJlc2l6ZSA9IHByb3BzLnJlc2l6ZSxcbiAgICAgICAgICBkaXJ0eSA9IHByb3BzLmRpcnR5O1xuXG4gICAgICAgIGNsaXAuY3JvcCA9IGNyb3A7XG4gICAgICAgIGNsaXAubWFya3VwID0gbWFya3VwO1xuICAgICAgICBjbGlwLnJlc2l6ZSA9IHJlc2l6ZTtcbiAgICAgICAgY2xpcC5kaXJ0eSA9IGRpcnR5O1xuXG4gICAgICAgIC8vIGRvbid0IHVwZGF0ZSBjbGlwIGxheW91dFxuICAgICAgICBjbGlwLm9wYWNpdHkgPSBzaG91bGRPcHRpbWl6ZSA/IDAgOiAxO1xuXG4gICAgICAgIC8vIGRvbid0IHJlLXJlbmRlciBpZiBvcHRpbWl6aW5nIG9yIGhpZGRlbiAod2lkdGggd2lsbCBiZSB6ZXJvIHJlc3VsdGluZyBpbiB3ZWlyZCBhbmltYXRpb25zKVxuICAgICAgICBpZiAoc2hvdWxkT3B0aW1pemUgfHwgcm9vdC5yZWN0LmVsZW1lbnQuaGlkZGVuKSByZXR1cm47XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHNjYWxlZCBwcmV2aWV3IGltYWdlIHNpemVcbiAgICAgICAgdmFyIGltYWdlQXNwZWN0UmF0aW8gPSBpbWFnZS5oZWlnaHQgLyBpbWFnZS53aWR0aDtcbiAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gY3JvcC5hc3BlY3RSYXRpbyB8fCBpbWFnZUFzcGVjdFJhdGlvO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBjb250YWluZXIgc2l6ZVxuICAgICAgICB2YXIgY29udGFpbmVyV2lkdGggPSByb290LnJlY3QuaW5uZXIud2lkdGg7XG4gICAgICAgIHZhciBjb250YWluZXJIZWlnaHQgPSByb290LnJlY3QuaW5uZXIuaGVpZ2h0O1xuXG4gICAgICAgIHZhciBmaXhlZFByZXZpZXdIZWlnaHQgPSByb290LnF1ZXJ5KCdHRVRfSU1BR0VfUFJFVklFV19IRUlHSFQnKTtcbiAgICAgICAgdmFyIG1pblByZXZpZXdIZWlnaHQgPSByb290LnF1ZXJ5KCdHRVRfSU1BR0VfUFJFVklFV19NSU5fSEVJR0hUJyk7XG4gICAgICAgIHZhciBtYXhQcmV2aWV3SGVpZ2h0ID0gcm9vdC5xdWVyeSgnR0VUX0lNQUdFX1BSRVZJRVdfTUFYX0hFSUdIVCcpO1xuXG4gICAgICAgIHZhciBwYW5lbEFzcGVjdFJhdGlvID0gcm9vdC5xdWVyeSgnR0VUX1BBTkVMX0FTUEVDVF9SQVRJTycpO1xuICAgICAgICB2YXIgYWxsb3dNdWx0aXBsZSA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19NVUxUSVBMRScpO1xuXG4gICAgICAgIGlmIChwYW5lbEFzcGVjdFJhdGlvICYmICFhbGxvd011bHRpcGxlKSB7XG4gICAgICAgICAgZml4ZWRQcmV2aWV3SGVpZ2h0ID0gY29udGFpbmVyV2lkdGggKiBwYW5lbEFzcGVjdFJhdGlvO1xuICAgICAgICAgIGFzcGVjdFJhdGlvID0gcGFuZWxBc3BlY3RSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRldGVybWluZSBjbGlwIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgdmFyIGNsaXBIZWlnaHQgPVxuICAgICAgICAgIGZpeGVkUHJldmlld0hlaWdodCAhPT0gbnVsbFxuICAgICAgICAgICAgPyBmaXhlZFByZXZpZXdIZWlnaHRcbiAgICAgICAgICAgIDogTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgbWluUHJldmlld0hlaWdodCxcbiAgICAgICAgICAgICAgICBNYXRoLm1pbihjb250YWluZXJXaWR0aCAqIGFzcGVjdFJhdGlvLCBtYXhQcmV2aWV3SGVpZ2h0KVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIHZhciBjbGlwV2lkdGggPSBjbGlwSGVpZ2h0IC8gYXNwZWN0UmF0aW87XG4gICAgICAgIGlmIChjbGlwV2lkdGggPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgICAgIGNsaXBXaWR0aCA9IGNvbnRhaW5lcldpZHRoO1xuICAgICAgICAgIGNsaXBIZWlnaHQgPSBjbGlwV2lkdGggKiBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGlwSGVpZ2h0ID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgICAgICAgY2xpcEhlaWdodCA9IGNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgICBjbGlwV2lkdGggPSBjb250YWluZXJIZWlnaHQgLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaXAud2lkdGggPSBjbGlwV2lkdGg7XG4gICAgICAgIGNsaXAuaGVpZ2h0ID0gY2xpcEhlaWdodDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgU1ZHX01BU0sgPVxuICAgICc8c3ZnIHdpZHRoPVwiNTAwXCIgaGVpZ2h0PVwiMjAwXCIgdmlld0JveD1cIjAgMCA1MDAgMjAwXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIj5cXG4gICAgPGRlZnM+XFxuICAgICAgICA8cmFkaWFsR3JhZGllbnQgaWQ9XCJncmFkaWVudC1fX1VJRF9fXCIgY3g9XCIuNVwiIGN5PVwiMS4yNVwiIHI9XCIxLjE1XCI+XFxuICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVxcJzUwJVxcJyBzdG9wLWNvbG9yPVxcJyMwMDAwMDBcXCcvPlxcbiAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cXCc1NiVcXCcgc3RvcC1jb2xvcj1cXCcjMGEwYTBhXFwnLz5cXG4gICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XFwnNjMlXFwnIHN0b3AtY29sb3I9XFwnIzI2MjYyNlxcJy8+XFxuICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVxcJzY5JVxcJyBzdG9wLWNvbG9yPVxcJyM0ZjRmNGZcXCcvPlxcbiAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cXCc3NSVcXCcgc3RvcC1jb2xvcj1cXCcjODA4MDgwXFwnLz5cXG4gICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XFwnODElXFwnIHN0b3AtY29sb3I9XFwnI2IxYjFiMVxcJy8+XFxuICAgICAgICAgICAgPHN0b3Agb2Zmc2V0PVxcJzg4JVxcJyBzdG9wLWNvbG9yPVxcJyNkYWRhZGFcXCcvPlxcbiAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cXCc5NCVcXCcgc3RvcC1jb2xvcj1cXCcjZjZmNmY2XFwnLz5cXG4gICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XFwnMTAwJVxcJyBzdG9wLWNvbG9yPVxcJyNmZmZmZmZcXCcvPlxcbiAgICAgICAgPC9yYWRpYWxHcmFkaWVudD5cXG4gICAgICAgIDxtYXNrIGlkPVwibWFzay1fX1VJRF9fXCI+XFxuICAgICAgICAgICAgPHJlY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiNTAwXCIgaGVpZ2h0PVwiMjAwXCIgZmlsbD1cInVybCgjZ3JhZGllbnQtX19VSURfXylcIj48L3JlY3Q+XFxuICAgICAgICA8L21hc2s+XFxuICAgIDwvZGVmcz5cXG4gICAgPHJlY3QgeD1cIjBcIiB3aWR0aD1cIjUwMFwiIGhlaWdodD1cIjIwMFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBtYXNrPVwidXJsKCNtYXNrLV9fVUlEX18pXCI+PC9yZWN0Plxcbjwvc3ZnPic7XG5cbiAgdmFyIGNoZWNrZWRNeUJhc2VzID0gZmFsc2U7XG4gIHZhciBTVkdNYXNrVW5pcXVlSWQgPSAwO1xuXG4gIHZhciBjcmVhdGVJbWFnZU92ZXJsYXlWaWV3ID0gZnVuY3Rpb24gY3JlYXRlSW1hZ2VPdmVybGF5VmlldyhmcEFQSSkge1xuICAgIHJldHVybiBmcEFQSS51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdpbWFnZS1wcmV2aWV3LW92ZXJsYXknLFxuICAgICAgdGFnOiAnZGl2JyxcbiAgICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcblxuICAgICAgICBpZiAoIWNoZWNrZWRNeUJhc2VzICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKSkge1xuICAgICAgICAgIFNWR19NQVNLID0gU1ZHX01BU0sucmVwbGFjZShcbiAgICAgICAgICAgIC91cmxcXChcXCMvZyxcbiAgICAgICAgICAgICd1cmwoJyArXG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhhc2gsICcnKSArXG4gICAgICAgICAgICAgICcjJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY2hlY2tlZE15QmFzZXMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgU1ZHTWFza1VuaXF1ZUlkKys7XG4gICAgICAgIHJvb3QuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFxuICAgICAgICAgICdmaWxlcG9uZC0taW1hZ2UtcHJldmlldy1vdmVybGF5LScuY29uY2F0KHByb3BzLnN0YXR1cylcbiAgICAgICAgKTtcbiAgICAgICAgcm9vdC5lbGVtZW50LmlubmVySFRNTCA9IFNWR19NQVNLLnJlcGxhY2UoL19fVUlEX18vZywgU1ZHTWFza1VuaXF1ZUlkKTtcbiAgICAgIH0sXG4gICAgICBtaXhpbnM6IHtcbiAgICAgICAgc3R5bGVzOiBbJ29wYWNpdHknXSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgIG9wYWNpdHk6IHsgdHlwZTogJ3NwcmluZycsIG1hc3M6IDI1IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBCaXRtYXAgV29ya2VyXG4gICAqL1xuICB2YXIgQml0bWFwV29ya2VyID0gZnVuY3Rpb24gQml0bWFwV29ya2VyKCkge1xuICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgY3JlYXRlSW1hZ2VCaXRtYXAoZS5kYXRhLm1lc3NhZ2UuZmlsZSkudGhlbihmdW5jdGlvbihiaXRtYXApIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IGlkOiBlLmRhdGEuaWQsIG1lc3NhZ2U6IGJpdG1hcCB9LCBbYml0bWFwXSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb2xvck1hdHJpeCBXb3JrZXJcbiAgICovXG4gIHZhciBDb2xvck1hdHJpeFdvcmtlciA9IGZ1bmN0aW9uIENvbG9yTWF0cml4V29ya2VyKCkge1xuICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IGUuZGF0YS5tZXNzYWdlLmltYWdlRGF0YTtcbiAgICAgIHZhciBtYXRyaXggPSBlLmRhdGEubWVzc2FnZS5jb2xvck1hdHJpeDtcblxuICAgICAgdmFyIGRhdGEgPSBpbWFnZURhdGEuZGF0YTtcbiAgICAgIHZhciBsID0gZGF0YS5sZW5ndGg7XG5cbiAgICAgIHZhciBtMTEgPSBtYXRyaXhbMF07XG4gICAgICB2YXIgbTEyID0gbWF0cml4WzFdO1xuICAgICAgdmFyIG0xMyA9IG1hdHJpeFsyXTtcbiAgICAgIHZhciBtMTQgPSBtYXRyaXhbM107XG4gICAgICB2YXIgbTE1ID0gbWF0cml4WzRdO1xuXG4gICAgICB2YXIgbTIxID0gbWF0cml4WzVdO1xuICAgICAgdmFyIG0yMiA9IG1hdHJpeFs2XTtcbiAgICAgIHZhciBtMjMgPSBtYXRyaXhbN107XG4gICAgICB2YXIgbTI0ID0gbWF0cml4WzhdO1xuICAgICAgdmFyIG0yNSA9IG1hdHJpeFs5XTtcblxuICAgICAgdmFyIG0zMSA9IG1hdHJpeFsxMF07XG4gICAgICB2YXIgbTMyID0gbWF0cml4WzExXTtcbiAgICAgIHZhciBtMzMgPSBtYXRyaXhbMTJdO1xuICAgICAgdmFyIG0zNCA9IG1hdHJpeFsxM107XG4gICAgICB2YXIgbTM1ID0gbWF0cml4WzE0XTtcblxuICAgICAgdmFyIG00MSA9IG1hdHJpeFsxNV07XG4gICAgICB2YXIgbTQyID0gbWF0cml4WzE2XTtcbiAgICAgIHZhciBtNDMgPSBtYXRyaXhbMTddO1xuICAgICAgdmFyIG00NCA9IG1hdHJpeFsxOF07XG4gICAgICB2YXIgbTQ1ID0gbWF0cml4WzE5XTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgciA9IDAuMCxcbiAgICAgICAgZyA9IDAuMCxcbiAgICAgICAgYiA9IDAuMCxcbiAgICAgICAgYSA9IDAuMDtcblxuICAgICAgZm9yICg7IGluZGV4IDwgbDsgaW5kZXggKz0gNCkge1xuICAgICAgICByID0gZGF0YVtpbmRleF0gLyAyNTU7XG4gICAgICAgIGcgPSBkYXRhW2luZGV4ICsgMV0gLyAyNTU7XG4gICAgICAgIGIgPSBkYXRhW2luZGV4ICsgMl0gLyAyNTU7XG4gICAgICAgIGEgPSBkYXRhW2luZGV4ICsgM10gLyAyNTU7XG4gICAgICAgIGRhdGFbaW5kZXhdID0gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbigociAqIG0xMSArIGcgKiBtMTIgKyBiICogbTEzICsgYSAqIG0xNCArIG0xNSkgKiAyNTUsIDI1NSlcbiAgICAgICAgKTtcbiAgICAgICAgZGF0YVtpbmRleCArIDFdID0gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbigociAqIG0yMSArIGcgKiBtMjIgKyBiICogbTIzICsgYSAqIG0yNCArIG0yNSkgKiAyNTUsIDI1NSlcbiAgICAgICAgKTtcbiAgICAgICAgZGF0YVtpbmRleCArIDJdID0gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbigociAqIG0zMSArIGcgKiBtMzIgKyBiICogbTMzICsgYSAqIG0zNCArIG0zNSkgKiAyNTUsIDI1NSlcbiAgICAgICAgKTtcbiAgICAgICAgZGF0YVtpbmRleCArIDNdID0gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbigociAqIG00MSArIGcgKiBtNDIgKyBiICogbTQzICsgYSAqIG00NCArIG00NSkgKiAyNTUsIDI1NSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IGlkOiBlLmRhdGEuaWQsIG1lc3NhZ2U6IGltYWdlRGF0YSB9LCBbXG4gICAgICAgIGltYWdlRGF0YS5kYXRhLmJ1ZmZlclxuICAgICAgXSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZ2V0SW1hZ2VTaXplID0gZnVuY3Rpb24gZ2V0SW1hZ2VTaXplKHVybCwgY2IpIHtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aDtcbiAgICAgIHZhciBoZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgaW1hZ2UgPSBudWxsO1xuICAgICAgY2Iod2lkdGgsIGhlaWdodCk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH07XG5cbiAgdmFyIHRyYW5zZm9ybXMgPSB7XG4gICAgMTogZnVuY3Rpb24gXygpIHtcbiAgICAgIHJldHVybiBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgfSxcbiAgICAyOiBmdW5jdGlvbiBfKHdpZHRoKSB7XG4gICAgICByZXR1cm4gWy0xLCAwLCAwLCAxLCB3aWR0aCwgMF07XG4gICAgfSxcbiAgICAzOiBmdW5jdGlvbiBfKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHJldHVybiBbLTEsIDAsIDAsIC0xLCB3aWR0aCwgaGVpZ2h0XTtcbiAgICB9LFxuICAgIDQ6IGZ1bmN0aW9uIF8od2lkdGgsIGhlaWdodCkge1xuICAgICAgcmV0dXJuIFsxLCAwLCAwLCAtMSwgMCwgaGVpZ2h0XTtcbiAgICB9LFxuICAgIDU6IGZ1bmN0aW9uIF8oKSB7XG4gICAgICByZXR1cm4gWzAsIDEsIDEsIDAsIDAsIDBdO1xuICAgIH0sXG4gICAgNjogZnVuY3Rpb24gXyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gWzAsIDEsIC0xLCAwLCBoZWlnaHQsIDBdO1xuICAgIH0sXG4gICAgNzogZnVuY3Rpb24gXyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gWzAsIC0xLCAtMSwgMCwgaGVpZ2h0LCB3aWR0aF07XG4gICAgfSxcbiAgICA4OiBmdW5jdGlvbiBfKHdpZHRoKSB7XG4gICAgICByZXR1cm4gWzAsIC0xLCAxLCAwLCAwLCB3aWR0aF07XG4gICAgfVxuICB9O1xuXG4gIHZhciBmaXhJbWFnZU9yaWVudGF0aW9uID0gZnVuY3Rpb24gZml4SW1hZ2VPcmllbnRhdGlvbihcbiAgICBjdHgsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIG9yaWVudGF0aW9uXG4gICkge1xuICAgIC8vIG5vIG9yaWVudGF0aW9uIHN1cHBsaWVkXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCB0cmFuc2Zvcm1zW29yaWVudGF0aW9uXSh3aWR0aCwgaGVpZ2h0KSk7XG4gIH07XG5cbiAgLy8gZHJhd3MgdGhlIHByZXZpZXcgaW1hZ2UgdG8gY2FudmFzXG4gIHZhciBjcmVhdGVQcmV2aWV3SW1hZ2UgPSBmdW5jdGlvbiBjcmVhdGVQcmV2aWV3SW1hZ2UoXG4gICAgZGF0YSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgb3JpZW50YXRpb25cbiAgKSB7XG4gICAgLy8gY2FuJ3QgZHJhdyBvbiBoYWxmIHBpeGVsc1xuICAgIHdpZHRoID0gTWF0aC5yb3VuZCh3aWR0aCk7XG4gICAgaGVpZ2h0ID0gTWF0aC5yb3VuZChoZWlnaHQpO1xuXG4gICAgLy8gZHJhdyBpbWFnZVxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIC8vIGlmIGlzIHJvdGF0ZWQgaW5jb3JyZWN0bHkgc3dhcCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgaWYgKG9yaWVudGF0aW9uID49IDUgJiYgb3JpZW50YXRpb24gPD0gOCkge1xuICAgICAgdmFyIF9yZWYgPSBbaGVpZ2h0LCB3aWR0aF07XG4gICAgICB3aWR0aCA9IF9yZWZbMF07XG4gICAgICBoZWlnaHQgPSBfcmVmWzFdO1xuICAgIH1cblxuICAgIC8vIGNvcnJlY3QgaW1hZ2Ugb3JpZW50YXRpb25cbiAgICBmaXhJbWFnZU9yaWVudGF0aW9uKGN0eCwgd2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pO1xuXG4gICAgLy8gZHJhdyB0aGUgaW1hZ2VcbiAgICBjdHguZHJhd0ltYWdlKGRhdGEsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfTtcblxuICB2YXIgaXNCaXRtYXAgPSBmdW5jdGlvbiBpc0JpdG1hcChmaWxlKSB7XG4gICAgcmV0dXJuIC9eaW1hZ2UvLnRlc3QoZmlsZS50eXBlKSAmJiAhL3N2Zy8udGVzdChmaWxlLnR5cGUpO1xuICB9O1xuXG4gIHZhciBNQVhfV0lEVEggPSAxMDtcbiAgdmFyIE1BWF9IRUlHSFQgPSAxMDtcblxuICB2YXIgY2FsY3VsYXRlQXZlcmFnZUNvbG9yID0gZnVuY3Rpb24gY2FsY3VsYXRlQXZlcmFnZUNvbG9yKGltYWdlKSB7XG4gICAgdmFyIHNjYWxhciA9IE1hdGgubWluKE1BWF9XSURUSCAvIGltYWdlLndpZHRoLCBNQVhfSEVJR0hUIC8gaW1hZ2UuaGVpZ2h0KTtcblxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdmFyIHdpZHRoID0gKGNhbnZhcy53aWR0aCA9IE1hdGguY2VpbChpbWFnZS53aWR0aCAqIHNjYWxhcikpO1xuICAgIHZhciBoZWlnaHQgPSAoY2FudmFzLmhlaWdodCA9IE1hdGguY2VpbChpbWFnZS5oZWlnaHQgKiBzY2FsYXIpKTtcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBsID0gZGF0YS5sZW5ndGg7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGcgPSAwO1xuICAgIHZhciBiID0gMDtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkgKz0gNCkge1xuICAgICAgciArPSBkYXRhW2ldICogZGF0YVtpXTtcbiAgICAgIGcgKz0gZGF0YVtpICsgMV0gKiBkYXRhW2kgKyAxXTtcbiAgICAgIGIgKz0gZGF0YVtpICsgMl0gKiBkYXRhW2kgKyAyXTtcbiAgICB9XG5cbiAgICByID0gYXZlcmFnZUNvbG9yKHIsIGwpO1xuICAgIGcgPSBhdmVyYWdlQ29sb3IoZywgbCk7XG4gICAgYiA9IGF2ZXJhZ2VDb2xvcihiLCBsKTtcblxuICAgIHJldHVybiB7IHI6IHIsIGc6IGcsIGI6IGIgfTtcbiAgfTtcblxuICB2YXIgYXZlcmFnZUNvbG9yID0gZnVuY3Rpb24gYXZlcmFnZUNvbG9yKGMsIGwpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnNxcnQoYyAvIChsIC8gNCkpKTtcbiAgfTtcblxuICB2YXIgY2xvbmVDYW52YXMgPSBmdW5jdGlvbiBjbG9uZUNhbnZhcyhvcmlnaW4sIHRhcmdldCkge1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0YXJnZXQud2lkdGggPSBvcmlnaW4ud2lkdGg7XG4gICAgdGFyZ2V0LmhlaWdodCA9IG9yaWdpbi5oZWlnaHQ7XG4gICAgdmFyIGN0eCA9IHRhcmdldC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5kcmF3SW1hZ2Uob3JpZ2luLCAwLCAwKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHZhciBjbG9uZUltYWdlRGF0YSA9IGZ1bmN0aW9uIGNsb25lSW1hZ2VEYXRhKGltYWdlRGF0YSkge1xuICAgIHZhciBpZDtcbiAgICB0cnkge1xuICAgICAgaWQgPSBuZXcgSW1hZ2VEYXRhKGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgaWQgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCk7XG4gICAgfVxuICAgIGlkLmRhdGEuc2V0KG5ldyBVaW50OENsYW1wZWRBcnJheShpbWFnZURhdGEuZGF0YSkpO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICB2YXIgbG9hZEltYWdlID0gZnVuY3Rpb24gbG9hZEltYWdlKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltZy5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICB9O1xuICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH07XG4gICAgICBpbWcuc3JjID0gdXJsO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVJbWFnZVdyYXBwZXJWaWV3ID0gZnVuY3Rpb24gY3JlYXRlSW1hZ2VXcmFwcGVyVmlldyhfKSB7XG4gICAgLy8gY3JlYXRlIG92ZXJsYXkgdmlld1xuICAgIHZhciBPdmVybGF5VmlldyA9IGNyZWF0ZUltYWdlT3ZlcmxheVZpZXcoXyk7XG5cbiAgICB2YXIgSW1hZ2VWaWV3ID0gY3JlYXRlSW1hZ2VWaWV3KF8pO1xuICAgIHZhciBjcmVhdGVXb3JrZXIgPSBfLnV0aWxzLmNyZWF0ZVdvcmtlcjtcblxuICAgIHZhciBhcHBseUZpbHRlciA9IGZ1bmN0aW9uIGFwcGx5RmlsdGVyKHJvb3QsIGZpbHRlciwgdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAvLyB3aWxsIHN0b3JlIGltYWdlIGRhdGEgZm9yIGZ1dHVyZSBmaWx0ZXIgdXBkYXRlc1xuICAgICAgICBpZiAoIXJvb3QucmVmLmltYWdlRGF0YSkge1xuICAgICAgICAgIHJvb3QucmVmLmltYWdlRGF0YSA9IHRhcmdldFxuICAgICAgICAgICAgLmdldENvbnRleHQoJzJkJylcbiAgICAgICAgICAgIC5nZXRJbWFnZURhdGEoMCwgMCwgdGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCBpbWFnZSBkYXRhIHJlZmVyZW5jZVxuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gY2xvbmVJbWFnZURhdGEocm9vdC5yZWYuaW1hZ2VEYXRhKTtcblxuICAgICAgICBpZiAoIWZpbHRlciB8fCBmaWx0ZXIubGVuZ3RoICE9PSAyMCkge1xuICAgICAgICAgIHRhcmdldC5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd29ya2VyID0gY3JlYXRlV29ya2VyKENvbG9yTWF0cml4V29ya2VyKTtcbiAgICAgICAgd29ya2VyLnBvc3QoXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW1hZ2VEYXRhOiBpbWFnZURhdGEsXG4gICAgICAgICAgICBjb2xvck1hdHJpeDogZmlsdGVyXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAvLyBhcHBseSBmaWx0ZXJlZCBjb2xvcnNcbiAgICAgICAgICAgIHRhcmdldC5nZXRDb250ZXh0KCcyZCcpLnB1dEltYWdlRGF0YShyZXNwb25zZSwgMCwgMCk7XG5cbiAgICAgICAgICAgIC8vIHN0b3Agd29ya2VyXG4gICAgICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIGRvbmUhXG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbaW1hZ2VEYXRhLmRhdGEuYnVmZmVyXVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciByZW1vdmVJbWFnZVZpZXcgPSBmdW5jdGlvbiByZW1vdmVJbWFnZVZpZXcocm9vdCwgaW1hZ2VWaWV3KSB7XG4gICAgICByb290LnJlbW92ZUNoaWxkVmlldyhpbWFnZVZpZXcpO1xuICAgICAgaW1hZ2VWaWV3LmltYWdlLndpZHRoID0gMTtcbiAgICAgIGltYWdlVmlldy5pbWFnZS5oZWlnaHQgPSAxO1xuICAgICAgaW1hZ2VWaWV3Ll9kZXN0cm95KCk7XG4gICAgfTtcblxuICAgIC8vIHJlbW92ZSBhbiBpbWFnZVxuICAgIHZhciBzaGlmdEltYWdlID0gZnVuY3Rpb24gc2hpZnRJbWFnZShfcmVmKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYucm9vdDtcbiAgICAgIHZhciBpbWFnZVZpZXcgPSByb290LnJlZi5pbWFnZXMuc2hpZnQoKTtcbiAgICAgIGltYWdlVmlldy5vcGFjaXR5ID0gMDtcbiAgICAgIGltYWdlVmlldy50cmFuc2xhdGVZID0gLTE1O1xuICAgICAgcm9vdC5yZWYuaW1hZ2VWaWV3QmluLnB1c2goaW1hZ2VWaWV3KTtcbiAgICAgIHJldHVybiBpbWFnZVZpZXc7XG4gICAgfTtcblxuICAgIC8vIGFkZCBuZXcgaW1hZ2VcbiAgICB2YXIgcHVzaEltYWdlID0gZnVuY3Rpb24gcHVzaEltYWdlKF9yZWYyKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICAgIHByb3BzID0gX3JlZjIucHJvcHMsXG4gICAgICAgIGltYWdlID0gX3JlZjIuaW1hZ2U7XG5cbiAgICAgIHZhciBpZCA9IHByb3BzLmlkO1xuICAgICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIHsgaWQ6IGlkIH0pO1xuICAgICAgaWYgKCFpdGVtKSByZXR1cm47XG5cbiAgICAgIHZhciBjcm9wID0gaXRlbS5nZXRNZXRhZGF0YSgnY3JvcCcpIHx8IHtcbiAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgeDogMC41LFxuICAgICAgICAgIHk6IDAuNVxuICAgICAgICB9LFxuXG4gICAgICAgIGZsaXA6IHtcbiAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICB6b29tOiAxLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgYXNwZWN0UmF0aW86IG51bGxcbiAgICAgIH07XG5cbiAgICAgIHZhciBiYWNrZ3JvdW5kID0gcm9vdC5xdWVyeShcbiAgICAgICAgJ0dFVF9JTUFHRV9UUkFOU0ZPUk1fQ0FOVkFTX0JBQ0tHUk9VTkRfQ09MT1InXG4gICAgICApO1xuXG4gICAgICB2YXIgbWFya3VwO1xuICAgICAgdmFyIHJlc2l6ZTtcbiAgICAgIHZhciBkaXJ0eSA9IGZhbHNlO1xuICAgICAgaWYgKHJvb3QucXVlcnkoJ0dFVF9JTUFHRV9QUkVWSUVXX01BUktVUF9TSE9XJykpIHtcbiAgICAgICAgbWFya3VwID0gaXRlbS5nZXRNZXRhZGF0YSgnbWFya3VwJykgfHwgW107XG4gICAgICAgIHJlc2l6ZSA9IGl0ZW0uZ2V0TWV0YWRhdGEoJ3Jlc2l6ZScpO1xuICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGVuZCBpbWFnZSBwcmVzZW50ZXJcbiAgICAgIHZhciBpbWFnZVZpZXcgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoSW1hZ2VWaWV3LCB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIGltYWdlOiBpbWFnZSxcbiAgICAgICAgICBjcm9wOiBjcm9wLFxuICAgICAgICAgIHJlc2l6ZTogcmVzaXplLFxuICAgICAgICAgIG1hcmt1cDogbWFya3VwLFxuICAgICAgICAgIGRpcnR5OiBkaXJ0eSxcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgc2NhbGVYOiAxLjE1LFxuICAgICAgICAgIHNjYWxlWTogMS4xNSxcbiAgICAgICAgICB0cmFuc2xhdGVZOiAxNVxuICAgICAgICB9KSxcblxuICAgICAgICByb290LmNoaWxkVmlld3MubGVuZ3RoXG4gICAgICApO1xuXG4gICAgICByb290LnJlZi5pbWFnZXMucHVzaChpbWFnZVZpZXcpO1xuXG4gICAgICAvLyByZXZlYWwgdGhlIHByZXZpZXcgaW1hZ2VcbiAgICAgIGltYWdlVmlldy5vcGFjaXR5ID0gMTtcbiAgICAgIGltYWdlVmlldy5zY2FsZVggPSAxO1xuICAgICAgaW1hZ2VWaWV3LnNjYWxlWSA9IDE7XG4gICAgICBpbWFnZVZpZXcudHJhbnNsYXRlWSA9IDA7XG5cbiAgICAgIC8vIHRoZSBwcmV2aWV3IGlzIG5vdyByZWFkeSB0byBiZSBkcmF3blxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0lNQUdFX1BSRVZJRVdfU0hPVycsIHsgaWQ6IGlkIH0pO1xuICAgICAgfSwgMjUwKTtcbiAgICB9O1xuXG4gICAgdmFyIHVwZGF0ZUltYWdlID0gZnVuY3Rpb24gdXBkYXRlSW1hZ2UoX3JlZjMpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjMucm9vdCxcbiAgICAgICAgcHJvcHMgPSBfcmVmMy5wcm9wcztcbiAgICAgIHZhciBpdGVtID0gcm9vdC5xdWVyeSgnR0VUX0lURU0nLCB7IGlkOiBwcm9wcy5pZCB9KTtcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgICAgdmFyIGltYWdlVmlldyA9IHJvb3QucmVmLmltYWdlc1tyb290LnJlZi5pbWFnZXMubGVuZ3RoIC0gMV07XG4gICAgICBpbWFnZVZpZXcuY3JvcCA9IGl0ZW0uZ2V0TWV0YWRhdGEoJ2Nyb3AnKTtcbiAgICAgIGltYWdlVmlldy5iYWNrZ3JvdW5kID0gcm9vdC5xdWVyeShcbiAgICAgICAgJ0dFVF9JTUFHRV9UUkFOU0ZPUk1fQ0FOVkFTX0JBQ0tHUk9VTkRfQ09MT1InXG4gICAgICApO1xuICAgICAgaWYgKHJvb3QucXVlcnkoJ0dFVF9JTUFHRV9QUkVWSUVXX01BUktVUF9TSE9XJykpIHtcbiAgICAgICAgaW1hZ2VWaWV3LmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgaW1hZ2VWaWV3LnJlc2l6ZSA9IGl0ZW0uZ2V0TWV0YWRhdGEoJ3Jlc2l6ZScpO1xuICAgICAgICBpbWFnZVZpZXcubWFya3VwID0gaXRlbS5nZXRNZXRhZGF0YSgnbWFya3VwJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIHJlcGxhY2UgaW1hZ2UgcHJldmlld1xuICAgIHZhciBkaWRVcGRhdGVJdGVtTWV0YWRhdGEgPSBmdW5jdGlvbiBkaWRVcGRhdGVJdGVtTWV0YWRhdGEoX3JlZjQpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjQucm9vdCxcbiAgICAgICAgcHJvcHMgPSBfcmVmNC5wcm9wcyxcbiAgICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uO1xuXG4gICAgICAvLyBvbmx5IGZpbHRlciBhbmQgY3JvcCB0cmlnZ2VyIHJlZHJhd1xuICAgICAgaWYgKCEvY3JvcHxmaWx0ZXJ8bWFya3VwfHJlc2l6ZS8udGVzdChhY3Rpb24uY2hhbmdlLmtleSkpIHJldHVybjtcblxuICAgICAgLy8gbm8gaW1hZ2VzIHRvIHVwZGF0ZSwgZXhpdFxuICAgICAgaWYgKCFyb290LnJlZi5pbWFnZXMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgIC8vIG5vIGl0ZW0gZm91bmQsIGV4aXRcbiAgICAgIHZhciBpdGVtID0gcm9vdC5xdWVyeSgnR0VUX0lURU0nLCB7IGlkOiBwcm9wcy5pZCB9KTtcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xuXG4gICAgICAvLyBmb3Igbm93LCB1cGRhdGUgZXhpc3RpbmcgaW1hZ2Ugd2hlbiBmaWx0ZXJpbmdcbiAgICAgIGlmICgvZmlsdGVyLy50ZXN0KGFjdGlvbi5jaGFuZ2Uua2V5KSkge1xuICAgICAgICB2YXIgaW1hZ2VWaWV3ID0gcm9vdC5yZWYuaW1hZ2VzW3Jvb3QucmVmLmltYWdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgYXBwbHlGaWx0ZXIocm9vdCwgYWN0aW9uLmNoYW5nZS52YWx1ZSwgaW1hZ2VWaWV3LmltYWdlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoL2Nyb3B8bWFya3VwfHJlc2l6ZS8udGVzdChhY3Rpb24uY2hhbmdlLmtleSkpIHtcbiAgICAgICAgdmFyIGNyb3AgPSBpdGVtLmdldE1ldGFkYXRhKCdjcm9wJyk7XG4gICAgICAgIHZhciBpbWFnZSA9IHJvb3QucmVmLmltYWdlc1tyb290LnJlZi5pbWFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgLy8gaWYgYXNwZWN0IHJhdGlvIGhhcyBjaGFuZ2VkLCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBpbWFnZVxuICAgICAgICBpZiAoTWF0aC5hYnMoY3JvcC5hc3BlY3RSYXRpbyAtIGltYWdlLmNyb3AuYXNwZWN0UmF0aW8pID4gMC4wMDAwMSkge1xuICAgICAgICAgIHZhciBfaW1hZ2VWaWV3ID0gc2hpZnRJbWFnZSh7IHJvb3Q6IHJvb3QgfSk7XG4gICAgICAgICAgcHVzaEltYWdlKHtcbiAgICAgICAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgICAgICBpbWFnZTogY2xvbmVDYW52YXMoX2ltYWdlVmlldy5pbWFnZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBub3QsIHdlIGNhbiB1cGRhdGUgdGhlIGN1cnJlbnQgaW1hZ2VcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdXBkYXRlSW1hZ2UoeyByb290OiByb290LCBwcm9wczogcHJvcHMgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNhbkNyZWF0ZUltYWdlQml0bWFwID0gZnVuY3Rpb24gY2FuQ3JlYXRlSW1hZ2VCaXRtYXAoZmlsZSkge1xuICAgICAgLy8gRmlyZWZveCB2ZXJzaW9ucyBiZWZvcmUgNTggd2lsbCBmcmVlemUgd2hlbiBydW5uaW5nIGNyZWF0ZUltYWdlQml0bWFwXG4gICAgICAvLyBpbiBhIFdlYiBXb3JrZXIgc28gd2UgZGV0ZWN0IHRob3NlIHZlcnNpb25zIGFuZCByZXR1cm4gZmFsc2UgZm9yIHN1cHBvcnRcbiAgICAgIHZhciB1c2VyQWdlbnQgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIHZhciBpc0ZpcmVmb3ggPSB1c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oWzAtOV0rKVxcLi8pO1xuICAgICAgdmFyIGZpcmVmb3hWZXJzaW9uID0gaXNGaXJlZm94ID8gcGFyc2VJbnQoaXNGaXJlZm94WzFdKSA6IG51bGw7XG4gICAgICBpZiAoZmlyZWZveFZlcnNpb24gPD0gNTgpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuICdjcmVhdGVJbWFnZUJpdG1hcCcgaW4gd2luZG93ICYmIGlzQml0bWFwKGZpbGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSBoYW5kbGVyIGZvciB3aGVuIHByZXZpZXcgY29udGFpbmVyIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICAgKi9cbiAgICB2YXIgZGlkQ3JlYXRlUHJldmlld0NvbnRhaW5lciA9IGZ1bmN0aW9uIGRpZENyZWF0ZVByZXZpZXdDb250YWluZXIoX3JlZjUpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgICAgcHJvcHMgPSBfcmVmNS5wcm9wcztcbiAgICAgIHZhciBpZCA9IHByb3BzLmlkO1xuXG4gICAgICAvLyB3ZSBuZWVkIHRvIGdldCB0aGUgZmlsZSBkYXRhIHRvIGRldGVybWluZSB0aGUgZXZlbnR1YWwgaW1hZ2Ugc2l6ZVxuICAgICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIGlkKTtcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xuXG4gICAgICAvLyBnZXQgdXJsIHRvIGZpbGUgKHdlJ2xsIHJldm9rZSBpdCBsYXRlciBvbiB3aGVuIGRvbmUpXG4gICAgICB2YXIgZmlsZVVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoaXRlbS5maWxlKTtcblxuICAgICAgLy8gZGV0ZXJtaW5lIGltYWdlIHNpemUgb2YgdGhpcyBpdGVtXG4gICAgICBnZXRJbWFnZVNpemUoZmlsZVVSTCwgZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyB3ZSBjYW4gbm93IHNjYWxlIHRoZSBwYW5lbCB0byB0aGUgZmluYWwgc2l6ZVxuICAgICAgICByb290LmRpc3BhdGNoKCdESURfSU1BR0VfUFJFVklFV19DQUxDVUxBVEVfU0laRScsIHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBkcmF3UHJldmlldyA9IGZ1bmN0aW9uIGRyYXdQcmV2aWV3KF9yZWY2KSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3QsXG4gICAgICAgIHByb3BzID0gX3JlZjYucHJvcHM7XG4gICAgICB2YXIgaWQgPSBwcm9wcy5pZDtcblxuICAgICAgLy8gd2UgbmVlZCB0byBnZXQgdGhlIGZpbGUgZGF0YSB0byBkZXRlcm1pbmUgdGhlIGV2ZW50dWFsIGltYWdlIHNpemVcbiAgICAgIHZhciBpdGVtID0gcm9vdC5xdWVyeSgnR0VUX0lURU0nLCBpZCk7XG4gICAgICBpZiAoIWl0ZW0pIHJldHVybjtcblxuICAgICAgLy8gZ2V0IHVybCB0byBmaWxlICh3ZSdsbCByZXZva2UgaXQgbGF0ZXIgb24gd2hlbiBkb25lKVxuICAgICAgdmFyIGZpbGVVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGl0ZW0uZmlsZSk7XG5cbiAgICAgIC8vIGZhbGxiYWNrXG4gICAgICB2YXIgbG9hZFByZXZpZXdGYWxsYmFjayA9IGZ1bmN0aW9uIGxvYWRQcmV2aWV3RmFsbGJhY2soKSB7XG4gICAgICAgIC8vIGxldCdzIHNjYWxlIHRoZSBpbWFnZSBpbiB0aGUgbWFpbiB0aHJlYWQgOihcbiAgICAgICAgbG9hZEltYWdlKGZpbGVVUkwpLnRoZW4ocHJldmlld0ltYWdlTG9hZGVkKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIGltYWdlIGlzIG5vdyByZWFkeVxuICAgICAgdmFyIHByZXZpZXdJbWFnZUxvYWRlZCA9IGZ1bmN0aW9uIHByZXZpZXdJbWFnZUxvYWRlZChpbWFnZURhdGEpIHtcbiAgICAgICAgLy8gdGhlIGZpbGUgdXJsIGlzIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChmaWxlVVJMKTtcblxuICAgICAgICAvLyBkcmF3IHRoZSBzY2FsZWQgZG93biB2ZXJzaW9uIGhlcmUgYW5kIHVzZSB0aGF0IGFzIHNvdXJjZSBzbyBiaXRtYXBkYXRhIGNhbiBiZSBjbG9zZWRcbiAgICAgICAgLy8gb3JpZW50YXRpb24gaW5mb1xuICAgICAgICB2YXIgZXhpZiA9IGl0ZW0uZ2V0TWV0YWRhdGEoJ2V4aWYnKSB8fCB7fTtcbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gZXhpZi5vcmllbnRhdGlvbiB8fCAtMTtcblxuICAgICAgICAvLyBnZXQgd2lkdGggYW5kIGhlaWdodCBmcm9tIGFjdGlvbiwgYW5kIHN3YXAgaWYgb3JpZW50YXRpb24gaXMgaW5jb3JyZWN0XG4gICAgICAgIHZhciB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuXG4gICAgICAgIC8vIGlmIG5vIHdpZHRoIG9yIGhlaWdodCwganVzdCByZXR1cm4gZWFybHkuXG4gICAgICAgIGlmICghd2lkdGggfHwgIWhlaWdodCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA+PSA1ICYmIG9yaWVudGF0aW9uIDw9IDgpIHtcbiAgICAgICAgICB2YXIgX3JlZjcgPSBbaGVpZ2h0LCB3aWR0aF07XG4gICAgICAgICAgd2lkdGggPSBfcmVmN1swXTtcbiAgICAgICAgICBoZWlnaHQgPSBfcmVmN1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjYWxlIGNhbnZhcyBiYXNlZCBvbiBwaXhlbCBkZW5zaXR5XG4gICAgICAgIC8vIHdlIG11bHRpcGx5IGJ5IC43NSBhcyB0aGF0IGNyZWF0ZXMgc21hbGxlciBidXQgc3RpbGwgY2xlYXIgaW1hZ2VzIG9uIHNjcmVlbnMgd2l0aCBoaWdoIHJlcyBkaXNwbGF5c1xuICAgICAgICB2YXIgcGl4ZWxEZW5zaXR5RmFjdG9yID0gTWF0aC5tYXgoMSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gKiAwLjc1KTtcblxuICAgICAgICAvLyB3ZSB3YW50IGFzIG11Y2ggcGl4ZWxzIHRvIHdvcmsgd2l0aCBhcyBwb3NzaWJsZSxcbiAgICAgICAgLy8gdGhpcyBtdWx0aXBsaWVzIHRoZSBtaW5pbXVtIGltYWdlIHJlc29sdXRpb24sXG4gICAgICAgIC8vIHNvIHdoZW4gem9vbWluZyBpbiBpdCBkb2Vzbid0IGdldCB0b28gYmx1cnJ5XG4gICAgICAgIHZhciB6b29tRmFjdG9yID0gcm9vdC5xdWVyeSgnR0VUX0lNQUdFX1BSRVZJRVdfWk9PTV9GQUNUT1InKTtcblxuICAgICAgICAvLyBpbWFlZyBzY2FsZSBmYWN0b3JcbiAgICAgICAgdmFyIHNjYWxlRmFjdG9yID0gem9vbUZhY3RvciAqIHBpeGVsRGVuc2l0eUZhY3RvcjtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgc2NhbGVkIHByZXZpZXcgaW1hZ2Ugc2l6ZVxuICAgICAgICB2YXIgcHJldmlld0ltYWdlUmF0aW8gPSBoZWlnaHQgLyB3aWR0aDtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgaW1hZ2UgcHJldmlldyBoZWlnaHQgYW5kIHdpZHRoXG4gICAgICAgIHZhciBwcmV2aWV3Q29udGFpbmVyV2lkdGggPSByb290LnJlY3QuZWxlbWVudC53aWR0aDtcbiAgICAgICAgdmFyIHByZXZpZXdDb250YWluZXJIZWlnaHQgPSByb290LnJlY3QuZWxlbWVudC5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIGltYWdlV2lkdGggPSBwcmV2aWV3Q29udGFpbmVyV2lkdGg7XG4gICAgICAgIHZhciBpbWFnZUhlaWdodCA9IGltYWdlV2lkdGggKiBwcmV2aWV3SW1hZ2VSYXRpbztcblxuICAgICAgICBpZiAocHJldmlld0ltYWdlUmF0aW8gPiAxKSB7XG4gICAgICAgICAgaW1hZ2VXaWR0aCA9IE1hdGgubWluKHdpZHRoLCBwcmV2aWV3Q29udGFpbmVyV2lkdGggKiBzY2FsZUZhY3Rvcik7XG4gICAgICAgICAgaW1hZ2VIZWlnaHQgPSBpbWFnZVdpZHRoICogcHJldmlld0ltYWdlUmF0aW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW1hZ2VIZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIHByZXZpZXdDb250YWluZXJIZWlnaHQgKiBzY2FsZUZhY3Rvcik7XG4gICAgICAgICAgaW1hZ2VXaWR0aCA9IGltYWdlSGVpZ2h0IC8gcHJldmlld0ltYWdlUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0cmFuc2ZlciB0byBpbWFnZSB0YWcgc28gbm8gY2FudmFzIG1lbW9yeSB3YXN0ZWQgb24gaU9TXG4gICAgICAgIHZhciBwcmV2aWV3SW1hZ2UgPSBjcmVhdGVQcmV2aWV3SW1hZ2UoXG4gICAgICAgICAgaW1hZ2VEYXRhLFxuICAgICAgICAgIGltYWdlV2lkdGgsXG4gICAgICAgICAgaW1hZ2VIZWlnaHQsXG4gICAgICAgICAgb3JpZW50YXRpb25cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBkb25lXG4gICAgICAgIHZhciBkb25lID0gZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgICAgICAvLyBjYWxjdWxhdGUgYXZlcmFnZSBpbWFnZSBjb2xvciwgZGlzYWJsZWQgZm9yIG5vd1xuICAgICAgICAgIHZhciBhdmVyYWdlQ29sb3IgPSByb290LnF1ZXJ5KFxuICAgICAgICAgICAgJ0dFVF9JTUFHRV9QUkVWSUVXX0NBTENVTEFURV9BVkVSQUdFX0lNQUdFX0NPTE9SJ1xuICAgICAgICAgIClcbiAgICAgICAgICAgID8gY2FsY3VsYXRlQXZlcmFnZUNvbG9yKGRhdGEpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgaXRlbS5zZXRNZXRhZGF0YSgnY29sb3InLCBhdmVyYWdlQ29sb3IsIHRydWUpO1xuXG4gICAgICAgICAgLy8gZGF0YSBoYXMgYmVlbiB0cmFuc2ZlcnJlZCB0byBjYW52YXMgKCBpZiB3YXMgSW1hZ2VCaXRtYXAgKVxuICAgICAgICAgIGlmICgnY2xvc2UnIGluIGltYWdlRGF0YSkge1xuICAgICAgICAgICAgaW1hZ2VEYXRhLmNsb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2hvdyB0aGUgb3ZlcmxheVxuICAgICAgICAgIHJvb3QucmVmLm92ZXJsYXlTaGFkb3cub3BhY2l0eSA9IDE7XG5cbiAgICAgICAgICAvLyBjcmVhdGUgdGhlIGZpcnN0IGltYWdlXG4gICAgICAgICAgcHVzaEltYWdlKHsgcm9vdDogcm9vdCwgcHJvcHM6IHByb3BzLCBpbWFnZTogcHJldmlld0ltYWdlIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGFwcGx5IGZpbHRlclxuICAgICAgICB2YXIgZmlsdGVyID0gaXRlbS5nZXRNZXRhZGF0YSgnZmlsdGVyJyk7XG4gICAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgICBhcHBseUZpbHRlcihyb290LCBmaWx0ZXIsIHByZXZpZXdJbWFnZSkudGhlbihkb25lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIGlmIHdlIHN1cHBvcnQgc2NhbGluZyB1c2luZyBjcmVhdGVJbWFnZUJpdG1hcCB3ZSB1c2UgYSB3b3JrZXJcbiAgICAgIGlmIChjYW5DcmVhdGVJbWFnZUJpdG1hcChpdGVtLmZpbGUpKSB7XG4gICAgICAgIC8vIGxldCdzIHNjYWxlIHRoZSBpbWFnZSBpbiBhIHdvcmtlclxuICAgICAgICB2YXIgd29ya2VyID0gY3JlYXRlV29ya2VyKEJpdG1hcFdvcmtlcik7XG5cbiAgICAgICAgd29ya2VyLnBvc3QoXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmlsZTogaXRlbS5maWxlXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGltYWdlQml0bWFwKSB7XG4gICAgICAgICAgICAvLyBkZXN0cm95IHdvcmtlclxuICAgICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuXG4gICAgICAgICAgICAvLyBubyBiaXRtYXAgcmV0dXJuZWQsIG11c3QgYmUgc29tZXRoaW5nIHdyb25nLFxuICAgICAgICAgICAgLy8gdHJ5IHRoZSBvbGRzY2hvb2wgd2F5XG4gICAgICAgICAgICBpZiAoIWltYWdlQml0bWFwKSB7XG4gICAgICAgICAgICAgIGxvYWRQcmV2aWV3RmFsbGJhY2soKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB5YXkgd2UgZ290IG91ciBiaXRtYXAsIGxldCdzIGNvbnRpbnVlIHNob3dpbmcgdGhlIHByZXZpZXdcbiAgICAgICAgICAgIHByZXZpZXdJbWFnZUxvYWRlZChpbWFnZUJpdG1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlIGZhbGxiYWNrIHByZXZpZXdcbiAgICAgICAgbG9hZFByZXZpZXdGYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSBoYW5kbGVyIGZvciB3aGVuIHRoZSBwcmV2aWV3IGltYWdlIGlzIHJlYWR5IHRvIGJlIGFuaW1hdGVkXG4gICAgICovXG4gICAgdmFyIGRpZERyYXdQcmV2aWV3ID0gZnVuY3Rpb24gZGlkRHJhd1ByZXZpZXcoX3JlZjgpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjgucm9vdDtcbiAgICAgIC8vIGdldCBsYXN0IGFkZGVkIGltYWdlXG4gICAgICB2YXIgaW1hZ2UgPSByb290LnJlZi5pbWFnZXNbcm9vdC5yZWYuaW1hZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgaW1hZ2UudHJhbnNsYXRlWSA9IDA7XG4gICAgICBpbWFnZS5zY2FsZVggPSAxLjA7XG4gICAgICBpbWFnZS5zY2FsZVkgPSAxLjA7XG4gICAgICBpbWFnZS5vcGFjaXR5ID0gMTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogV3JpdGUgaGFuZGxlciBmb3Igd2hlbiB0aGUgcHJldmlldyBoYXMgYmVlbiBsb2FkZWRcbiAgICAgKi9cbiAgICB2YXIgcmVzdG9yZU92ZXJsYXkgPSBmdW5jdGlvbiByZXN0b3JlT3ZlcmxheShfcmVmOSkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmOS5yb290O1xuICAgICAgcm9vdC5yZWYub3ZlcmxheVNoYWRvdy5vcGFjaXR5ID0gMTtcbiAgICAgIHJvb3QucmVmLm92ZXJsYXlFcnJvci5vcGFjaXR5ID0gMDtcbiAgICAgIHJvb3QucmVmLm92ZXJsYXlTdWNjZXNzLm9wYWNpdHkgPSAwO1xuICAgIH07XG5cbiAgICB2YXIgZGlkVGhyb3dFcnJvciA9IGZ1bmN0aW9uIGRpZFRocm93RXJyb3IoX3JlZjEwKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYxMC5yb290O1xuICAgICAgcm9vdC5yZWYub3ZlcmxheVNoYWRvdy5vcGFjaXR5ID0gMC4yNTtcbiAgICAgIHJvb3QucmVmLm92ZXJsYXlFcnJvci5vcGFjaXR5ID0gMTtcbiAgICB9O1xuXG4gICAgdmFyIGRpZENvbXBsZXRlUHJvY2Vzc2luZyA9IGZ1bmN0aW9uIGRpZENvbXBsZXRlUHJvY2Vzc2luZyhfcmVmMTEpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjExLnJvb3Q7XG4gICAgICByb290LnJlZi5vdmVybGF5U2hhZG93Lm9wYWNpdHkgPSAwLjI1O1xuICAgICAgcm9vdC5yZWYub3ZlcmxheVN1Y2Nlc3Mub3BhY2l0eSA9IDE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShfcmVmMTIpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjEyLnJvb3Q7XG5cbiAgICAgIC8vIGltYWdlIHZpZXdcbiAgICAgIHJvb3QucmVmLmltYWdlcyA9IFtdO1xuXG4gICAgICAvLyB0aGUgcHJldmlldyBpbWFnZSBkYXRhICh3ZSBuZWVkIHRoaXMgdG8gZmlsdGVyIHRoZSBpbWFnZSlcbiAgICAgIHJvb3QucmVmLmltYWdlRGF0YSA9IG51bGw7XG5cbiAgICAgIC8vIGltYWdlIGJpblxuICAgICAgcm9vdC5yZWYuaW1hZ2VWaWV3QmluID0gW107XG5cbiAgICAgIC8vIGltYWdlIG92ZXJsYXlzXG4gICAgICByb290LnJlZi5vdmVybGF5U2hhZG93ID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KE92ZXJsYXlWaWV3LCB7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICBzdGF0dXM6ICdpZGxlJ1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgcm9vdC5yZWYub3ZlcmxheVN1Y2Nlc3MgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoT3ZlcmxheVZpZXcsIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICByb290LnJlZi5vdmVybGF5RXJyb3IgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoT3ZlcmxheVZpZXcsIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHN0YXR1czogJ2ZhaWx1cmUnXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gXy51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdpbWFnZS1wcmV2aWV3LXdyYXBwZXInLFxuICAgICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgICBzdHlsZXM6IFsnaGVpZ2h0J10sXG5cbiAgICAgIGFwaXM6IFsnaGVpZ2h0J10sXG5cbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koX3JlZjEzKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjEzLnJvb3Q7XG4gICAgICAgIC8vIHdlIHJlc2l6ZSB0aGUgaW1hZ2Ugc28gbWVtb3J5IG9uIGlPUyAxMiBpcyByZWxlYXNlZCBtb3JlIHF1aWNrbHkgKGl0IHNlZW1zKVxuICAgICAgICByb290LnJlZi5pbWFnZXMuZm9yRWFjaChmdW5jdGlvbihpbWFnZVZpZXcpIHtcbiAgICAgICAgICBpbWFnZVZpZXcuaW1hZ2Uud2lkdGggPSAxO1xuICAgICAgICAgIGltYWdlVmlldy5pbWFnZS5oZWlnaHQgPSAxO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBkaWRXcml0ZVZpZXc6IGZ1bmN0aW9uIGRpZFdyaXRlVmlldyhfcmVmMTQpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmMTQucm9vdDtcbiAgICAgICAgcm9vdC5yZWYuaW1hZ2VzLmZvckVhY2goZnVuY3Rpb24oaW1hZ2VWaWV3KSB7XG4gICAgICAgICAgaW1hZ2VWaWV3LmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHdyaXRlOiBfLnV0aWxzLmNyZWF0ZVJvdXRlKFxuICAgICAgICB7XG4gICAgICAgICAgLy8gaW1hZ2UgcHJldmlldyBzdGF0ZWRcbiAgICAgICAgICBESURfSU1BR0VfUFJFVklFV19EUkFXOiBkaWREcmF3UHJldmlldyxcbiAgICAgICAgICBESURfSU1BR0VfUFJFVklFV19DT05UQUlORVJfQ1JFQVRFOiBkaWRDcmVhdGVQcmV2aWV3Q29udGFpbmVyLFxuICAgICAgICAgIERJRF9GSU5JU0hfQ0FMQ1VMQVRFX1BSRVZJRVdTSVpFOiBkcmF3UHJldmlldyxcbiAgICAgICAgICBESURfVVBEQVRFX0lURU1fTUVUQURBVEE6IGRpZFVwZGF0ZUl0ZW1NZXRhZGF0YSxcblxuICAgICAgICAgIC8vIGZpbGUgc3RhdGVzXG4gICAgICAgICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjogZGlkVGhyb3dFcnJvcixcbiAgICAgICAgICBESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOiBkaWRUaHJvd0Vycm9yLFxuICAgICAgICAgIERJRF9USFJPV19JVEVNX0lOVkFMSUQ6IGRpZFRocm93RXJyb3IsXG4gICAgICAgICAgRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzogZGlkQ29tcGxldGVQcm9jZXNzaW5nLFxuICAgICAgICAgIERJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkc6IHJlc3RvcmVPdmVybGF5LFxuICAgICAgICAgIERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOiByZXN0b3JlT3ZlcmxheVxuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihfcmVmMTUpIHtcbiAgICAgICAgICB2YXIgcm9vdCA9IF9yZWYxNS5yb290O1xuXG4gICAgICAgICAgLy8gdmlld3Mgb24gZGVhdGggcm93XG4gICAgICAgICAgdmFyIHZpZXdzVG9SZW1vdmUgPSByb290LnJlZi5pbWFnZVZpZXdCaW4uZmlsdGVyKGZ1bmN0aW9uKGltYWdlVmlldykge1xuICAgICAgICAgICAgcmV0dXJuIGltYWdlVmlldy5vcGFjaXR5ID09PSAwO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gdmlld3MgdG8gcmV0YWluXG4gICAgICAgICAgcm9vdC5yZWYuaW1hZ2VWaWV3QmluID0gcm9vdC5yZWYuaW1hZ2VWaWV3QmluLmZpbHRlcihmdW5jdGlvbihcbiAgICAgICAgICAgIGltYWdlVmlld1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGltYWdlVmlldy5vcGFjaXR5ID4gMDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHJlbW92ZSB0aGVzZSB2aWV3c1xuICAgICAgICAgIHZpZXdzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbihpbWFnZVZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVJbWFnZVZpZXcocm9vdCwgaW1hZ2VWaWV3KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2aWV3c1RvUmVtb3ZlLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogSW1hZ2UgUHJldmlldyBQbHVnaW5cbiAgICovXG4gIHZhciBwbHVnaW4gPSBmdW5jdGlvbiBwbHVnaW4oZnBBUEkpIHtcbiAgICB2YXIgYWRkRmlsdGVyID0gZnBBUEkuYWRkRmlsdGVyLFxuICAgICAgdXRpbHMgPSBmcEFQSS51dGlscztcbiAgICB2YXIgVHlwZSA9IHV0aWxzLlR5cGUsXG4gICAgICBjcmVhdGVSb3V0ZSA9IHV0aWxzLmNyZWF0ZVJvdXRlLFxuICAgICAgaXNGaWxlID0gdXRpbHMuaXNGaWxlO1xuXG4gICAgLy8gaW1hZ2VQcmV2aWV3Vmlld1xuICAgIHZhciBpbWFnZVByZXZpZXdWaWV3ID0gY3JlYXRlSW1hZ2VXcmFwcGVyVmlldyhmcEFQSSk7XG5cbiAgICAvLyBjYWxsZWQgZm9yIGVhY2ggdmlldyB0aGF0IGlzIGNyZWF0ZWQgcmlnaHQgYWZ0ZXIgdGhlICdjcmVhdGUnIG1ldGhvZFxuICAgIGFkZEZpbHRlcignQ1JFQVRFX1ZJRVcnLCBmdW5jdGlvbih2aWV3QVBJKSB7XG4gICAgICAvLyBnZXQgcmVmZXJlbmNlIHRvIGNyZWF0ZWQgdmlld1xuICAgICAgdmFyIGlzID0gdmlld0FQSS5pcyxcbiAgICAgICAgdmlldyA9IHZpZXdBUEkudmlldyxcbiAgICAgICAgcXVlcnkgPSB2aWV3QVBJLnF1ZXJ5O1xuXG4gICAgICAvLyBvbmx5IGhvb2sgdXAgdG8gaXRlbSB2aWV3IGFuZCBvbmx5IGlmIGlzIGVuYWJsZWQgZm9yIHRoaXMgY3JvcHBlclxuICAgICAgaWYgKCFpcygnZmlsZScpIHx8ICFxdWVyeSgnR0VUX0FMTE9XX0lNQUdFX1BSRVZJRVcnKSkgcmV0dXJuO1xuXG4gICAgICAvLyBjcmVhdGUgdGhlIGltYWdlIHByZXZpZXcgcGx1Z2luLCBidXQgb25seSBkbyBzbyBpZiB0aGUgaXRlbSBpcyBhbiBpbWFnZVxuICAgICAgdmFyIGRpZExvYWRJdGVtID0gZnVuY3Rpb24gZGlkTG9hZEl0ZW0oX3JlZikge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgICAgIHZhciBpZCA9IHByb3BzLmlkO1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXJ5KCdHRVRfSVRFTScsIGlkKTtcblxuICAgICAgICAvLyBpdGVtIGNvdWxkIHRoZW9yZXRpY2FsbHkgaGF2ZSBiZWVuIHJlbW92ZWQgaW4gdGhlIG1lYW4gdGltZVxuICAgICAgICBpZiAoIWl0ZW0gfHwgIWlzRmlsZShpdGVtLmZpbGUpIHx8IGl0ZW0uYXJjaGl2ZWQpIHJldHVybjtcblxuICAgICAgICAvLyBnZXQgdGhlIGZpbGUgb2JqZWN0XG4gICAgICAgIHZhciBmaWxlID0gaXRlbS5maWxlO1xuXG4gICAgICAgIC8vIGV4aXQgaWYgdGhpcyBpcyBub3QgYW4gaW1hZ2VcbiAgICAgICAgaWYgKCFpc1ByZXZpZXdhYmxlSW1hZ2UoZmlsZSkpIHJldHVybjtcblxuICAgICAgICAvLyB0ZXN0IGlmIGlzIGZpbHRlcmVkXG4gICAgICAgIGlmICghcXVlcnkoJ0dFVF9JTUFHRV9QUkVWSUVXX0ZJTFRFUl9JVEVNJykoaXRlbSkpIHJldHVybjtcblxuICAgICAgICAvLyBleGl0IGlmIGltYWdlIHNpemUgaXMgdG9vIGhpZ2ggYW5kIG5vIGNyZWF0ZUltYWdlQml0bWFwIHN1cHBvcnRcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBzaW1wbHkgYnJpbmcgdGhlIGJyb3dzZXIgdG8gaXRzIGtuZWVzIGFuZCB0aGF0IGlzIG5vdCB3aGF0IHdlIHdhbnRcbiAgICAgICAgdmFyIHN1cHBvcnRzQ3JlYXRlSW1hZ2VCaXRtYXAgPSAnY3JlYXRlSW1hZ2VCaXRtYXAnIGluICh3aW5kb3cgfHwge30pO1xuICAgICAgICB2YXIgbWF4UHJldmlld0ZpbGVTaXplID0gcXVlcnkoJ0dFVF9JTUFHRV9QUkVWSUVXX01BWF9GSUxFX1NJWkUnKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFzdXBwb3J0c0NyZWF0ZUltYWdlQml0bWFwICYmXG4gICAgICAgICAgbWF4UHJldmlld0ZpbGVTaXplICYmXG4gICAgICAgICAgZmlsZS5zaXplID4gbWF4UHJldmlld0ZpbGVTaXplXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gc2V0IHByZXZpZXcgdmlld1xuICAgICAgICByb290LnJlZi5pbWFnZVByZXZpZXcgPSB2aWV3LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgICB2aWV3LmNyZWF0ZUNoaWxkVmlldyhpbWFnZVByZXZpZXdWaWV3LCB7IGlkOiBpZCB9KVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBoZWlnaHQgaWYgaXMgZml4ZWRcbiAgICAgICAgdmFyIGZpeGVkUHJldmlld0hlaWdodCA9IHJvb3QucXVlcnkoJ0dFVF9JTUFHRV9QUkVWSUVXX0hFSUdIVCcpO1xuICAgICAgICBpZiAoZml4ZWRQcmV2aWV3SGVpZ2h0KSB7XG4gICAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX1VQREFURV9QQU5FTF9IRUlHSFQnLCB7XG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgIGhlaWdodDogZml4ZWRQcmV2aWV3SGVpZ2h0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBub3cgcmVhZHlcbiAgICAgICAgdmFyIHF1ZXVlID1cbiAgICAgICAgICAhc3VwcG9ydHNDcmVhdGVJbWFnZUJpdG1hcCAmJlxuICAgICAgICAgIGZpbGUuc2l6ZSA+IHF1ZXJ5KCdHRVRfSU1BR0VfUFJFVklFV19NQVhfSU5TVEFOVF9QUkVWSUVXX0ZJTEVfU0laRScpO1xuICAgICAgICByb290LmRpc3BhdGNoKCdESURfSU1BR0VfUFJFVklFV19DT05UQUlORVJfQ1JFQVRFJywgeyBpZDogaWQgfSwgcXVldWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlc2NhbGVJdGVtID0gZnVuY3Rpb24gcmVzY2FsZUl0ZW0ocm9vdCwgcHJvcHMpIHtcbiAgICAgICAgaWYgKCFyb290LnJlZi5pbWFnZVByZXZpZXcpIHJldHVybjtcbiAgICAgICAgdmFyIGlkID0gcHJvcHMuaWQ7XG5cbiAgICAgICAgLy8gZ2V0IGl0ZW1cbiAgICAgICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIHsgaWQ6IGlkIH0pO1xuICAgICAgICBpZiAoIWl0ZW0pIHJldHVybjtcblxuICAgICAgICAvLyBpZiBpcyBmaXhlZCBoZWlnaHQgb3IgcGFuZWwgaGFzIGFzcGVjdCByYXRpbywgZXhpdCBoZXJlLCBoZWlnaHQgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkXG4gICAgICAgIHZhciBwYW5lbEFzcGVjdFJhdGlvID0gcm9vdC5xdWVyeSgnR0VUX1BBTkVMX0FTUEVDVF9SQVRJTycpO1xuICAgICAgICB2YXIgaXRlbVBhbmVsQXNwZWN0UmF0aW8gPSByb290LnF1ZXJ5KCdHRVRfSVRFTV9QQU5FTF9BU1BFQ1RfUkFUSU8nKTtcbiAgICAgICAgdmFyIGZpeGVkSGVpZ2h0ID0gcm9vdC5xdWVyeSgnR0VUX0lNQUdFX1BSRVZJRVdfSEVJR0hUJyk7XG4gICAgICAgIGlmIChwYW5lbEFzcGVjdFJhdGlvIHx8IGl0ZW1QYW5lbEFzcGVjdFJhdGlvIHx8IGZpeGVkSGVpZ2h0KSByZXR1cm47XG5cbiAgICAgICAgLy8gbm8gZGF0YSFcbiAgICAgICAgdmFyIF9yb290JHJlZiA9IHJvb3QucmVmLFxuICAgICAgICAgIGltYWdlV2lkdGggPSBfcm9vdCRyZWYuaW1hZ2VXaWR0aCxcbiAgICAgICAgICBpbWFnZUhlaWdodCA9IF9yb290JHJlZi5pbWFnZUhlaWdodDtcbiAgICAgICAgaWYgKCFpbWFnZVdpZHRoIHx8ICFpbWFnZUhlaWdodCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIGdldCBoZWlnaHQgbWluIGFuZCBtYXhcbiAgICAgICAgdmFyIG1pblByZXZpZXdIZWlnaHQgPSByb290LnF1ZXJ5KCdHRVRfSU1BR0VfUFJFVklFV19NSU5fSEVJR0hUJyk7XG4gICAgICAgIHZhciBtYXhQcmV2aWV3SGVpZ2h0ID0gcm9vdC5xdWVyeSgnR0VUX0lNQUdFX1BSRVZJRVdfTUFYX0hFSUdIVCcpO1xuXG4gICAgICAgIC8vIG9yaWVudGF0aW9uIGluZm9cbiAgICAgICAgdmFyIGV4aWYgPSBpdGVtLmdldE1ldGFkYXRhKCdleGlmJykgfHwge307XG4gICAgICAgIHZhciBvcmllbnRhdGlvbiA9IGV4aWYub3JpZW50YXRpb24gfHwgLTE7XG5cbiAgICAgICAgLy8gZ2V0IHdpZHRoIGFuZCBoZWlnaHQgZnJvbSBhY3Rpb24sIGFuZCBzd2FwIG9mIG9yaWVudGF0aW9uIGlzIGluY29ycmVjdFxuICAgICAgICBpZiAob3JpZW50YXRpb24gPj0gNSAmJiBvcmllbnRhdGlvbiA8PSA4KSB7XG4gICAgICAgICAgdmFyIF9yZWYyID0gW2ltYWdlSGVpZ2h0LCBpbWFnZVdpZHRoXTtcbiAgICAgICAgICBpbWFnZVdpZHRoID0gX3JlZjJbMF07XG4gICAgICAgICAgaW1hZ2VIZWlnaHQgPSBfcmVmMlsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNjYWxlIHVwIHdpZHRoIGFuZCBoZWlnaHQgd2hlbiB3ZSdyZSBkZWFsaW5nIHdpdGggYW4gU1ZHXG4gICAgICAgIGlmICghaXNCaXRtYXAoaXRlbS5maWxlKSB8fCByb290LnF1ZXJ5KCdHRVRfSU1BR0VfUFJFVklFV19VUFNDQUxFJykpIHtcbiAgICAgICAgICB2YXIgc2NhbGFyID0gMjA0OCAvIGltYWdlV2lkdGg7XG4gICAgICAgICAgaW1hZ2VXaWR0aCAqPSBzY2FsYXI7XG4gICAgICAgICAgaW1hZ2VIZWlnaHQgKj0gc2NhbGFyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW1hZ2UgYXNwZWN0IHJhdGlvXG4gICAgICAgIHZhciBpbWFnZUFzcGVjdFJhdGlvID0gaW1hZ2VIZWlnaHQgLyBpbWFnZVdpZHRoO1xuXG4gICAgICAgIC8vIHdlIG5lZWQgdGhlIGl0ZW0gdG8gZ2V0IHRvIHRoZSBjcm9wIHNpemVcbiAgICAgICAgdmFyIHByZXZpZXdBc3BlY3RSYXRpbyA9XG4gICAgICAgICAgKGl0ZW0uZ2V0TWV0YWRhdGEoJ2Nyb3AnKSB8fCB7fSkuYXNwZWN0UmF0aW8gfHwgaW1hZ2VBc3BlY3RSYXRpbztcblxuICAgICAgICAvLyBwcmV2aWV3IGhlaWdodCByYW5nZVxuICAgICAgICB2YXIgcHJldmlld0hlaWdodE1heCA9IE1hdGgubWF4KFxuICAgICAgICAgIG1pblByZXZpZXdIZWlnaHQsXG4gICAgICAgICAgTWF0aC5taW4oaW1hZ2VIZWlnaHQsIG1heFByZXZpZXdIZWlnaHQpXG4gICAgICAgICk7XG4gICAgICAgIHZhciBpdGVtV2lkdGggPSByb290LnJlY3QuZWxlbWVudC53aWR0aDtcbiAgICAgICAgdmFyIHByZXZpZXdIZWlnaHQgPSBNYXRoLm1pbihcbiAgICAgICAgICBpdGVtV2lkdGggKiBwcmV2aWV3QXNwZWN0UmF0aW8sXG4gICAgICAgICAgcHJldmlld0hlaWdodE1heFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHJlcXVlc3QgdXBkYXRlIHRvIHBhbmVsIGhlaWdodFxuICAgICAgICByb290LmRpc3BhdGNoKCdESURfVVBEQVRFX1BBTkVMX0hFSUdIVCcsIHtcbiAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICBoZWlnaHQ6IHByZXZpZXdIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZGlkUmVzaXplVmlldyA9IGZ1bmN0aW9uIGRpZFJlc2l6ZVZpZXcoX3JlZjMpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmMy5yb290O1xuICAgICAgICAvLyBhY3Rpb25zIGluIG5leHQgd3JpdGUgb3BlcmF0aW9uXG4gICAgICAgIHJvb3QucmVmLnNob3VsZFJlc2NhbGUgPSB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIGRpZFVwZGF0ZUl0ZW1NZXRhZGF0YSA9IGZ1bmN0aW9uIGRpZFVwZGF0ZUl0ZW1NZXRhZGF0YShfcmVmNCkge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWY0LnJvb3QsXG4gICAgICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uO1xuXG4gICAgICAgIGlmIChhY3Rpb24uY2hhbmdlLmtleSAhPT0gJ2Nyb3AnKSByZXR1cm47XG5cbiAgICAgICAgLy8gYWN0aW9ucyBpbiBuZXh0IHdyaXRlIG9wZXJhdGlvblxuICAgICAgICByb290LnJlZi5zaG91bGRSZXNjYWxlID0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBkaWRDYWxjdWxhdGVQcmV2aWV3U2l6ZSA9IGZ1bmN0aW9uIGRpZENhbGN1bGF0ZVByZXZpZXdTaXplKF9yZWY1KSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgICAgICBhY3Rpb24gPSBfcmVmNS5hY3Rpb247XG5cbiAgICAgICAgLy8gcmVtZW1iZXIgZGltZW5zaW9uc1xuICAgICAgICByb290LnJlZi5pbWFnZVdpZHRoID0gYWN0aW9uLndpZHRoO1xuICAgICAgICByb290LnJlZi5pbWFnZUhlaWdodCA9IGFjdGlvbi5oZWlnaHQ7XG5cbiAgICAgICAgLy8gYWN0aW9ucyBpbiBuZXh0IHdyaXRlIG9wZXJhdGlvblxuICAgICAgICByb290LnJlZi5zaG91bGRSZXNjYWxlID0gdHJ1ZTtcbiAgICAgICAgcm9vdC5yZWYuc2hvdWxkRHJhd1ByZXZpZXcgPSB0cnVlO1xuXG4gICAgICAgIC8vIGFzIGltYWdlIGxvYWQgY291bGQgdGFrZSBhIHdoaWxlIGFuZCBmaXJlIHdoZW4gZHJhdyBsb29wIGlzIHJlc3Rpbmcgd2UgbmVlZCB0byBnaXZlIGl0IGEga2lja1xuICAgICAgICByb290LmRpc3BhdGNoKCdLSUNLJyk7XG4gICAgICB9O1xuXG4gICAgICAvLyBzdGFydCB3cml0aW5nXG4gICAgICB2aWV3LnJlZ2lzdGVyV3JpdGVyKFxuICAgICAgICBjcmVhdGVSb3V0ZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBESURfUkVTSVpFX1JPT1Q6IGRpZFJlc2l6ZVZpZXcsXG4gICAgICAgICAgICBESURfU1RPUF9SRVNJWkU6IGRpZFJlc2l6ZVZpZXcsXG4gICAgICAgICAgICBESURfTE9BRF9JVEVNOiBkaWRMb2FkSXRlbSxcbiAgICAgICAgICAgIERJRF9JTUFHRV9QUkVWSUVXX0NBTENVTEFURV9TSVpFOiBkaWRDYWxjdWxhdGVQcmV2aWV3U2l6ZSxcbiAgICAgICAgICAgIERJRF9VUERBVEVfSVRFTV9NRVRBREFUQTogZGlkVXBkYXRlSXRlbU1ldGFkYXRhXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihfcmVmNikge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBfcmVmNi5yb290LFxuICAgICAgICAgICAgICBwcm9wcyA9IF9yZWY2LnByb3BzO1xuXG4gICAgICAgICAgICAvLyBubyBwcmV2aWV3IHZpZXcgYXR0YWNoZWRcbiAgICAgICAgICAgIGlmICghcm9vdC5yZWYuaW1hZ2VQcmV2aWV3KSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIHdoaWxlIGhpZGRlblxuICAgICAgICAgICAgaWYgKHJvb3QucmVjdC5lbGVtZW50LmhpZGRlbikgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyByZXNpemUgdGhlIGl0ZW0gcGFuZWxcbiAgICAgICAgICAgIGlmIChyb290LnJlZi5zaG91bGRSZXNjYWxlKSB7XG4gICAgICAgICAgICAgIHJlc2NhbGVJdGVtKHJvb3QsIHByb3BzKTtcbiAgICAgICAgICAgICAgcm9vdC5yZWYuc2hvdWxkUmVzY2FsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm9vdC5yZWYuc2hvdWxkRHJhd1ByZXZpZXcpIHtcbiAgICAgICAgICAgICAgLy8gcXVldWUgdGlsbCBuZXh0IGZyYW1lIHNvIHdlJ3JlIHN1cmUgdGhlIGhlaWdodCBoYXMgYmVlbiBhcHBsaWVkIHRoaXMgZm9yY2VzIHRoZSBkcmF3IGltYWdlIGNhbGwgaW5zaWRlIHRoZSB3cmFwcGVyIHZpZXcgdG8gdXNlIHRoZSBjb3JyZWN0IGhlaWdodFxuICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0ZJTklTSF9DQUxDVUxBVEVfUFJFVklFV1NJWkUnLCB7XG4gICAgICAgICAgICAgICAgICBpZDogcHJvcHMuaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJvb3QucmVmLnNob3VsZERyYXdQcmV2aWV3ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgLy8gZXhwb3NlIHBsdWdpblxuICAgIHJldHVybiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIC8vIEVuYWJsZSBvciBkaXNhYmxlIGltYWdlIHByZXZpZXdcbiAgICAgICAgYWxsb3dJbWFnZVByZXZpZXc6IFt0cnVlLCBUeXBlLkJPT0xFQU5dLFxuXG4gICAgICAgIC8vIGZpbHRlcnMgZmlsZSBpdGVtcyB0byBkZXRlcm1pbmUgd2hpY2ggYXJlIHNob3duIGFzIHByZXZpZXdcbiAgICAgICAgaW1hZ2VQcmV2aWV3RmlsdGVySXRlbTogW1xuICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBUeXBlLkZVTkNUSU9OXG4gICAgICAgIF0sXG5cbiAgICAgICAgLy8gRml4ZWQgcHJldmlldyBoZWlnaHRcbiAgICAgICAgaW1hZ2VQcmV2aWV3SGVpZ2h0OiBbbnVsbCwgVHlwZS5JTlRdLFxuXG4gICAgICAgIC8vIE1pbiBpbWFnZSBoZWlnaHRcbiAgICAgICAgaW1hZ2VQcmV2aWV3TWluSGVpZ2h0OiBbNDQsIFR5cGUuSU5UXSxcblxuICAgICAgICAvLyBNYXggaW1hZ2UgaGVpZ2h0XG4gICAgICAgIGltYWdlUHJldmlld01heEhlaWdodDogWzI1NiwgVHlwZS5JTlRdLFxuXG4gICAgICAgIC8vIE1heCBzaXplIG9mIHByZXZpZXcgZmlsZSBmb3Igd2hlbiBjcmVhdGVJbWFnZUJpdG1hcCBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGltYWdlUHJldmlld01heEZpbGVTaXplOiBbbnVsbCwgVHlwZS5JTlRdLFxuXG4gICAgICAgIC8vIFRoZSBhbW91bnQgb2YgZXh0cmEgcGl4ZWxzIGFkZGVkIHRvIHRoZSBpbWFnZSBwcmV2aWV3IHRvIGFsbG93IGNvbWZvcnRhYmxlIHpvb21pbmdcbiAgICAgICAgaW1hZ2VQcmV2aWV3Wm9vbUZhY3RvcjogWzIsIFR5cGUuSU5UXSxcblxuICAgICAgICAvLyBTaG91bGQgd2UgdXBzY2FsZSBzbWFsbCBpbWFnZXMgdG8gZml0IHRoZSBtYXggYm91bmRpbmcgYm94IG9mIHRoZSBwcmV2aWV3IGFyZWFcbiAgICAgICAgaW1hZ2VQcmV2aWV3VXBzY2FsZTogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLFxuXG4gICAgICAgIC8vIE1heCBzaXplIG9mIHByZXZpZXcgZmlsZSB0aGF0IHdlIGFsbG93IHRvIHRyeSB0byBpbnN0YW50IHByZXZpZXcgaWYgY3JlYXRlSW1hZ2VCaXRtYXAgaXMgbm90IHN1cHBvcnRlZCwgZWxzZSBpbWFnZSBpcyBxdWV1ZWQgZm9yIGxvYWRpbmdcbiAgICAgICAgaW1hZ2VQcmV2aWV3TWF4SW5zdGFudFByZXZpZXdGaWxlU2l6ZTogWzEwMDAwMDAsIFR5cGUuSU5UXSxcblxuICAgICAgICAvLyBTdHlsZSBvZiB0aGUgdHJhbnNwYXJhbmN5IGluZGljYXRvciB1c2VkIGJlaGluZCBpbWFnZXNcbiAgICAgICAgaW1hZ2VQcmV2aWV3VHJhbnNwYXJlbmN5SW5kaWNhdG9yOiBbbnVsbCwgVHlwZS5TVFJJTkddLFxuXG4gICAgICAgIC8vIEVuYWJsZXMgb3IgZGlzYWJsZXMgcmVhZGluZyBhdmVyYWdlIGltYWdlIGNvbG9yXG4gICAgICAgIGltYWdlUHJldmlld0NhbGN1bGF0ZUF2ZXJhZ2VJbWFnZUNvbG9yOiBbZmFsc2UsIFR5cGUuQk9PTEVBTl0sXG5cbiAgICAgICAgLy8gRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgcHJldmlld2luZyBvZiBtYXJrdXBcbiAgICAgICAgaW1hZ2VQcmV2aWV3TWFya3VwU2hvdzogW3RydWUsIFR5cGUuQk9PTEVBTl0sXG5cbiAgICAgICAgLy8gQWxsb3dzIGZpbHRlcmluZyBvZiBtYXJrdXAgdG8gb25seSBzaG93IGNlcnRhaW4gc2hhcGVzXG4gICAgICAgIGltYWdlUHJldmlld01hcmt1cEZpbHRlcjogW1xuICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBUeXBlLkZVTkNUSU9OXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIGZpcmUgcGx1Z2lubG9hZGVkIGV2ZW50IGlmIHJ1bm5pbmcgaW4gYnJvd3NlciwgdGhpcyBhbGxvd3MgcmVnaXN0ZXJpbmcgdGhlIHBsdWdpbiB3aGVuIHVzaW5nIGFzeW5jIHNjcmlwdCB0YWdzXG4gIHZhciBpc0Jyb3dzZXIgPVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudCgnRmlsZVBvbmQ6cGx1Z2lubG9hZGVkJywgeyBkZXRhaWw6IHBsdWdpbiB9KVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSk7XG4iLCIvKiFcbiAqIEZpbGVQb25kUGx1Z2luRmlsZVZhbGlkYXRlVHlwZSAxLjIuNVxuICogTGljZW5zZWQgdW5kZXIgTUlULCBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC9cbiAqIFBsZWFzZSB2aXNpdCBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kLyBmb3IgZGV0YWlscy5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4oZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpKVxuICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgPyBkZWZpbmUoZmFjdG9yeSlcbiAgICA6ICgoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYpLFxuICAgICAgKGdsb2JhbC5GaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVR5cGUgPSBmYWN0b3J5KCkpKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHBsdWdpbiA9IGZ1bmN0aW9uIHBsdWdpbihfcmVmKSB7XG4gICAgdmFyIGFkZEZpbHRlciA9IF9yZWYuYWRkRmlsdGVyLFxuICAgICAgdXRpbHMgPSBfcmVmLnV0aWxzO1xuICAgIC8vIGdldCBxdWljayByZWZlcmVuY2UgdG8gVHlwZSB1dGlsc1xuICAgIHZhciBUeXBlID0gdXRpbHMuVHlwZSxcbiAgICAgIGlzU3RyaW5nID0gdXRpbHMuaXNTdHJpbmcsXG4gICAgICByZXBsYWNlSW5TdHJpbmcgPSB1dGlscy5yZXBsYWNlSW5TdHJpbmcsXG4gICAgICBndWVzc3RpbWF0ZU1pbWVUeXBlID0gdXRpbHMuZ3Vlc3N0aW1hdGVNaW1lVHlwZSxcbiAgICAgIGdldEV4dGVuc2lvbkZyb21GaWxlbmFtZSA9IHV0aWxzLmdldEV4dGVuc2lvbkZyb21GaWxlbmFtZSxcbiAgICAgIGdldEZpbGVuYW1lRnJvbVVSTCA9IHV0aWxzLmdldEZpbGVuYW1lRnJvbVVSTDtcblxuICAgIHZhciBtaW1lVHlwZU1hdGNoZXNXaWxkQ2FyZCA9IGZ1bmN0aW9uIG1pbWVUeXBlTWF0Y2hlc1dpbGRDYXJkKFxuICAgICAgbWltZVR5cGUsXG4gICAgICB3aWxkY2FyZFxuICAgICkge1xuICAgICAgdmFyIG1pbWVUeXBlR3JvdXAgPSAoL15bXi9dKy8uZXhlYyhtaW1lVHlwZSkgfHwgW10pLnBvcCgpOyAvLyBpbWFnZS9wbmcgLT4gaW1hZ2VcbiAgICAgIHZhciB3aWxkY2FyZEdyb3VwID0gd2lsZGNhcmQuc2xpY2UoMCwgLTIpOyAvLyBpbWFnZS8qIC0+IGltYWdlXG4gICAgICByZXR1cm4gbWltZVR5cGVHcm91cCA9PT0gd2lsZGNhcmRHcm91cDtcbiAgICB9O1xuXG4gICAgdmFyIGlzVmFsaWRNaW1lVHlwZSA9IGZ1bmN0aW9uIGlzVmFsaWRNaW1lVHlwZShcbiAgICAgIGFjY2VwdGVkVHlwZXMsXG4gICAgICB1c2VySW5wdXRUeXBlXG4gICAgKSB7XG4gICAgICByZXR1cm4gYWNjZXB0ZWRUeXBlcy5zb21lKGZ1bmN0aW9uKGFjY2VwdGVkVHlwZSkge1xuICAgICAgICAvLyBhY2NlcHRlZCBpcyB3aWxkY2FyZCBtaW1lIHR5cGVcbiAgICAgICAgaWYgKC9cXCokLy50ZXN0KGFjY2VwdGVkVHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gbWltZVR5cGVNYXRjaGVzV2lsZENhcmQodXNlcklucHV0VHlwZSwgYWNjZXB0ZWRUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlzIG5vcm1hbCBtaW1lIHR5cGVcbiAgICAgICAgcmV0dXJuIGFjY2VwdGVkVHlwZSA9PT0gdXNlcklucHV0VHlwZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0SXRlbVR5cGUgPSBmdW5jdGlvbiBnZXRJdGVtVHlwZShpdGVtKSB7XG4gICAgICAvLyBpZiB0aGUgaXRlbSBpcyBhIHVybCB3ZSBndWVzcyB0aGUgbWltZSB0eXBlIGJ5IHRoZSBleHRlbnNpb25cbiAgICAgIHZhciB0eXBlID0gJyc7XG4gICAgICBpZiAoaXNTdHJpbmcoaXRlbSkpIHtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gZ2V0RmlsZW5hbWVGcm9tVVJMKGl0ZW0pO1xuICAgICAgICB2YXIgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uRnJvbUZpbGVuYW1lKGZpbGVuYW1lKTtcbiAgICAgICAgaWYgKGV4dGVuc2lvbikge1xuICAgICAgICAgIHR5cGUgPSBndWVzc3RpbWF0ZU1pbWVUeXBlKGV4dGVuc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH07XG5cbiAgICB2YXIgdmFsaWRhdGVGaWxlID0gZnVuY3Rpb24gdmFsaWRhdGVGaWxlKFxuICAgICAgaXRlbSxcbiAgICAgIGFjY2VwdGVkRmlsZVR5cGVzLFxuICAgICAgdHlwZURldGVjdG9yXG4gICAgKSB7XG4gICAgICAvLyBubyB0eXBlcyBkZWZpbmVkLCBldmVyeXRoaW5nIGlzIGFsbG93ZWQgXFxvL1xuICAgICAgaWYgKGFjY2VwdGVkRmlsZVR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gZ2V0cyB0aGUgaXRlbSB0eXBlXG4gICAgICB2YXIgdHlwZSA9IGdldEl0ZW1UeXBlKGl0ZW0pO1xuXG4gICAgICAvLyBubyB0eXBlIGRldGVjdG9yLCB0ZXN0IG5vd1xuICAgICAgaWYgKCF0eXBlRGV0ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWRNaW1lVHlwZShhY2NlcHRlZEZpbGVUeXBlcywgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHVzZSB0eXBlIGRldGVjdG9yXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHR5cGVEZXRlY3RvcihpdGVtLCB0eXBlKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRldGVjdGVkVHlwZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRNaW1lVHlwZShhY2NlcHRlZEZpbGVUeXBlcywgZGV0ZWN0ZWRUeXBlKSkge1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBhcHBseU1pbWVUeXBlTWFwID0gZnVuY3Rpb24gYXBwbHlNaW1lVHlwZU1hcChtYXApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihhY2NlcHRlZEZpbGVUeXBlKSB7XG4gICAgICAgIHJldHVybiBtYXBbYWNjZXB0ZWRGaWxlVHlwZV0gPT09IG51bGxcbiAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgOiBtYXBbYWNjZXB0ZWRGaWxlVHlwZV0gfHwgYWNjZXB0ZWRGaWxlVHlwZTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIHNldHVwIGF0dHJpYnV0ZSBtYXBwaW5nIGZvciBhY2NlcHRcbiAgICBhZGRGaWx0ZXIoJ1NFVF9BVFRSSUJVVEVfVE9fT1BUSU9OX01BUCcsIGZ1bmN0aW9uKG1hcCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obWFwLCB7XG4gICAgICAgIGFjY2VwdDogJ2FjY2VwdGVkRmlsZVR5cGVzJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBmaWx0ZXJpbmcgaWYgYW4gaXRlbSBpcyBhbGxvd2VkIGluIGhvcHBlclxuICAgIGFkZEZpbHRlcignQUxMT1dfSE9QUEVSX0lURU0nLCBmdW5jdGlvbihmaWxlLCBfcmVmMikge1xuICAgICAgdmFyIHF1ZXJ5ID0gX3JlZjIucXVlcnk7XG4gICAgICAvLyBpZiB3ZSBhcmUgbm90IGRvaW5nIGZpbGUgdHlwZSB2YWxpZGF0aW9uIGV4aXRcbiAgICAgIGlmICghcXVlcnkoJ0dFVF9BTExPV19GSUxFX1RZUEVfVkFMSURBVElPTicpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB3ZSB2YWxpZGF0ZSB0aGUgZmlsZSBhZ2FpbnN0IHRoZSBhY2NlcHRlZCBmaWxlIHR5cGVzXG4gICAgICByZXR1cm4gdmFsaWRhdGVGaWxlKGZpbGUsIHF1ZXJ5KCdHRVRfQUNDRVBURURfRklMRV9UWVBFUycpKTtcbiAgICB9KTtcblxuICAgIC8vIGNhbGxlZCBmb3IgZWFjaCBmaWxlIHRoYXQgaXMgbG9hZGVkXG4gICAgLy8gcmlnaHQgYmVmb3JlIGl0IGlzIHNldCB0byB0aGUgaXRlbSBzdGF0ZVxuICAgIC8vIHNob3VsZCByZXR1cm4gYSBwcm9taXNlXG4gICAgYWRkRmlsdGVyKCdMT0FEX0ZJTEUnLCBmdW5jdGlvbihmaWxlLCBfcmVmMykge1xuICAgICAgdmFyIHF1ZXJ5ID0gX3JlZjMucXVlcnk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmICghcXVlcnkoJ0dFVF9BTExPV19GSUxFX1RZUEVfVkFMSURBVElPTicpKSB7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWNjZXB0ZWRGaWxlVHlwZXMgPSBxdWVyeSgnR0VUX0FDQ0VQVEVEX0ZJTEVfVFlQRVMnKTtcblxuICAgICAgICAvLyBjdXN0b20gdHlwZSBkZXRlY3RvciBtZXRob2RcbiAgICAgICAgdmFyIHR5cGVEZXRlY3RvciA9IHF1ZXJ5KCdHRVRfRklMRV9WQUxJREFURV9UWVBFX0RFVEVDVF9UWVBFJyk7XG5cbiAgICAgICAgLy8gaWYgaW52YWxpZCwgZXhpdCBoZXJlXG4gICAgICAgIHZhciB2YWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdGVGaWxlKFxuICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgYWNjZXB0ZWRGaWxlVHlwZXMsXG4gICAgICAgICAgdHlwZURldGVjdG9yXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIGhhbmRsZVJlamVjdGlvbiA9IGZ1bmN0aW9uIGhhbmRsZVJlamVjdGlvbigpIHtcbiAgICAgICAgICB2YXIgYWNjZXB0ZWRGaWxlVHlwZXNNYXBwZWQgPSBhY2NlcHRlZEZpbGVUeXBlc1xuICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgYXBwbHlNaW1lVHlwZU1hcChcbiAgICAgICAgICAgICAgICBxdWVyeSgnR0VUX0ZJTEVfVkFMSURBVEVfVFlQRV9MQUJFTF9FWFBFQ1RFRF9UWVBFU19NQVAnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGxhYmVsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsYWJlbCAhPT0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgICAgbWFpbjogcXVlcnkoJ0dFVF9MQUJFTF9GSUxFX1RZUEVfTk9UX0FMTE9XRUQnKSxcbiAgICAgICAgICAgICAgc3ViOiByZXBsYWNlSW5TdHJpbmcoXG4gICAgICAgICAgICAgICAgcXVlcnkoJ0dFVF9GSUxFX1ZBTElEQVRFX1RZUEVfTEFCRUxfRVhQRUNURURfVFlQRVMnKSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhbGxUeXBlczogYWNjZXB0ZWRGaWxlVHlwZXNNYXBwZWQuam9pbignLCAnKSxcbiAgICAgICAgICAgICAgICAgIGFsbEJ1dExhc3RUeXBlOiBhY2NlcHRlZEZpbGVUeXBlc01hcHBlZFxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpLFxuICAgICAgICAgICAgICAgICAgbGFzdFR5cGU6XG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkRmlsZVR5cGVzTWFwcGVkW2FjY2VwdGVkRmlsZVR5cGVzTWFwcGVkLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaGFzIHJldHVybmVkIG5ldyBmaWxlbmFtZSBpbW1pZGlhdGVseVxuICAgICAgICBpZiAodHlwZW9mIHZhbGlkYXRpb25SZXN1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICghdmFsaWRhdGlvblJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVJlamVjdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmaWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlzIHByb21pc2VcbiAgICAgICAgdmFsaWRhdGlvblJlc3VsdFxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZShmaWxlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChoYW5kbGVSZWplY3Rpb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBleHBvc2UgcGx1Z2luXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICAvLyBFbmFibGUgb3IgZGlzYWJsZSBmaWxlIHR5cGUgdmFsaWRhdGlvblxuICAgICAgICBhbGxvd0ZpbGVUeXBlVmFsaWRhdGlvbjogW3RydWUsIFR5cGUuQk9PTEVBTl0sXG5cbiAgICAgICAgLy8gV2hhdCBmaWxlIHR5cGVzIHRvIGFjY2VwdFxuICAgICAgICBhY2NlcHRlZEZpbGVUeXBlczogW1tdLCBUeXBlLkFSUkFZXSxcbiAgICAgICAgLy8gLSBtdXN0IGJlIGNvbW1hIHNlcGFyYXRlZFxuICAgICAgICAvLyAtIG1pbWUgdHlwZXM6IGltYWdlL3BuZywgaW1hZ2UvanBlZywgaW1hZ2UvZ2lmXG4gICAgICAgIC8vIC0gZXh0ZW5zaW9uczogLnBuZywgLmpwZywgLmpwZWcgKCBub3QgZW5hYmxlZCB5ZXQgKVxuICAgICAgICAvLyAtIHdpbGRjYXJkczogaW1hZ2UvKlxuXG4gICAgICAgIC8vIGxhYmVsIHRvIHNob3cgd2hlbiBhIHR5cGUgaXMgbm90IGFsbG93ZWRcbiAgICAgICAgbGFiZWxGaWxlVHlwZU5vdEFsbG93ZWQ6IFsnRmlsZSBpcyBvZiBpbnZhbGlkIHR5cGUnLCBUeXBlLlNUUklOR10sXG5cbiAgICAgICAgLy8gbmljZXIgbGFiZWxcbiAgICAgICAgZmlsZVZhbGlkYXRlVHlwZUxhYmVsRXhwZWN0ZWRUeXBlczogW1xuICAgICAgICAgICdFeHBlY3RzIHthbGxCdXRMYXN0VHlwZX0gb3Ige2xhc3RUeXBlfScsXG4gICAgICAgICAgVHlwZS5TVFJJTkdcbiAgICAgICAgXSxcblxuICAgICAgICAvLyBtYXAgbWltZSB0eXBlcyB0byBleHRlbnNpb25zXG4gICAgICAgIGZpbGVWYWxpZGF0ZVR5cGVMYWJlbEV4cGVjdGVkVHlwZXNNYXA6IFt7fSwgVHlwZS5PQkpFQ1RdLFxuXG4gICAgICAgIC8vIEN1c3RvbSBmdW5jdGlvbiB0byBkZXRlY3QgdHlwZSBvZiBmaWxlXG4gICAgICAgIGZpbGVWYWxpZGF0ZVR5cGVEZXRlY3RUeXBlOiBbbnVsbCwgVHlwZS5GVU5DVElPTl1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIGZpcmUgcGx1Z2lubG9hZGVkIGV2ZW50IGlmIHJ1bm5pbmcgaW4gYnJvd3NlciwgdGhpcyBhbGxvd3MgcmVnaXN0ZXJpbmcgdGhlIHBsdWdpbiB3aGVuIHVzaW5nIGFzeW5jIHNjcmlwdCB0YWdzXG4gIHZhciBpc0Jyb3dzZXIgPVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgIG5ldyBDdXN0b21FdmVudCgnRmlsZVBvbmQ6cGx1Z2lubG9hZGVkJywgeyBkZXRhaWw6IHBsdWdpbiB9KVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSk7XG4iLCIvKiFcbiAqIEZpbGVQb25kUGx1Z2luRmlsZVZhbGlkYXRlU2l6ZSAyLjIuMVxuICogTGljZW5zZWQgdW5kZXIgTUlULCBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC9cbiAqIFBsZWFzZSB2aXNpdCBodHRwczovL3BxaW5hLm5sL2ZpbGVwb25kLyBmb3IgZGV0YWlscy5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4oZnVuY3Rpb24oZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgID8gKG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpKVxuICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kXG4gICAgPyBkZWZpbmUoZmFjdG9yeSlcbiAgICA6ICgoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYpLFxuICAgICAgKGdsb2JhbC5GaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVNpemUgPSBmYWN0b3J5KCkpKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHBsdWdpbiA9IGZ1bmN0aW9uIHBsdWdpbihfcmVmKSB7XG4gICAgdmFyIGFkZEZpbHRlciA9IF9yZWYuYWRkRmlsdGVyLFxuICAgICAgdXRpbHMgPSBfcmVmLnV0aWxzO1xuICAgIC8vIGdldCBxdWljayByZWZlcmVuY2UgdG8gVHlwZSB1dGlsc1xuICAgIHZhciBUeXBlID0gdXRpbHMuVHlwZSxcbiAgICAgIHJlcGxhY2VJblN0cmluZyA9IHV0aWxzLnJlcGxhY2VJblN0cmluZyxcbiAgICAgIHRvTmF0dXJhbEZpbGVTaXplID0gdXRpbHMudG9OYXR1cmFsRmlsZVNpemU7XG5cbiAgICAvLyBmaWx0ZXJpbmcgaWYgYW4gaXRlbSBpcyBhbGxvd2VkIGluIGhvcHBlclxuICAgIGFkZEZpbHRlcignQUxMT1dfSE9QUEVSX0lURU0nLCBmdW5jdGlvbihmaWxlLCBfcmVmMikge1xuICAgICAgdmFyIHF1ZXJ5ID0gX3JlZjIucXVlcnk7XG4gICAgICBpZiAoIXF1ZXJ5KCdHRVRfQUxMT1dfRklMRV9TSVpFX1ZBTElEQVRJT04nKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemVNYXggPSBxdWVyeSgnR0VUX01BWF9GSUxFX1NJWkUnKTtcbiAgICAgIGlmIChzaXplTWF4ICE9PSBudWxsICYmIGZpbGUuc2l6ZSA+PSBzaXplTWF4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemVNaW4gPSBxdWVyeSgnR0VUX01JTl9GSUxFX1NJWkUnKTtcbiAgICAgIGlmIChzaXplTWluICE9PSBudWxsICYmIGZpbGUuc2l6ZSA8PSBzaXplTWluKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBjYWxsZWQgZm9yIGVhY2ggZmlsZSB0aGF0IGlzIGxvYWRlZFxuICAgIC8vIHJpZ2h0IGJlZm9yZSBpdCBpcyBzZXQgdG8gdGhlIGl0ZW0gc3RhdGVcbiAgICAvLyBzaG91bGQgcmV0dXJuIGEgcHJvbWlzZVxuICAgIGFkZEZpbHRlcignTE9BRF9GSUxFJywgZnVuY3Rpb24oZmlsZSwgX3JlZjMpIHtcbiAgICAgIHZhciBxdWVyeSA9IF9yZWYzLnF1ZXJ5O1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBpZiBub3QgYWxsb3dlZCwgYWxsIGZpbmUsIGV4aXRcbiAgICAgICAgaWYgKCFxdWVyeSgnR0VUX0FMTE9XX0ZJTEVfU0laRV9WQUxJREFUSU9OJykpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmaWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIGZpbGUgc2hvdWxkIGJlIGZpbHRlcmVkXG4gICAgICAgIHZhciBmaWxlRmlsdGVyID0gcXVlcnkoJ0dFVF9GSUxFX1ZBTElEQVRFX1NJWkVfRklMVEVSJyk7XG4gICAgICAgIGlmIChmaWxlRmlsdGVyICYmICFmaWxlRmlsdGVyKGZpbGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZWplY3Qgb3IgcmVzb2x2ZSBiYXNlZCBvbiBmaWxlIHNpemVcbiAgICAgICAgdmFyIHNpemVNYXggPSBxdWVyeSgnR0VUX01BWF9GSUxFX1NJWkUnKTtcbiAgICAgICAgaWYgKHNpemVNYXggIT09IG51bGwgJiYgZmlsZS5zaXplID49IHNpemVNYXgpIHtcbiAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICAgIG1haW46IHF1ZXJ5KCdHRVRfTEFCRUxfTUFYX0ZJTEVfU0laRV9FWENFRURFRCcpLFxuICAgICAgICAgICAgICBzdWI6IHJlcGxhY2VJblN0cmluZyhxdWVyeSgnR0VUX0xBQkVMX01BWF9GSUxFX1NJWkUnKSwge1xuICAgICAgICAgICAgICAgIGZpbGVzaXplOiB0b05hdHVyYWxGaWxlU2l6ZShzaXplTWF4KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVqZWN0IG9yIHJlc29sdmUgYmFzZWQgb24gZmlsZSBzaXplXG4gICAgICAgIHZhciBzaXplTWluID0gcXVlcnkoJ0dFVF9NSU5fRklMRV9TSVpFJyk7XG4gICAgICAgIGlmIChzaXplTWluICE9PSBudWxsICYmIGZpbGUuc2l6ZSA8PSBzaXplTWluKSB7XG4gICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICBtYWluOiBxdWVyeSgnR0VUX0xBQkVMX01JTl9GSUxFX1NJWkVfRVhDRUVERUQnKSxcbiAgICAgICAgICAgICAgc3ViOiByZXBsYWNlSW5TdHJpbmcocXVlcnkoJ0dFVF9MQUJFTF9NSU5fRklMRV9TSVpFJyksIHtcbiAgICAgICAgICAgICAgICBmaWxlc2l6ZTogdG9OYXR1cmFsRmlsZVNpemUoc2l6ZU1pbilcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybnMgdGhlIGN1cnJlbnQgb3B0aW9uIHZhbHVlXG4gICAgICAgIHZhciB0b3RhbFNpemVNYXggPSBxdWVyeSgnR0VUX01BWF9UT1RBTF9GSUxFX1NJWkUnKTtcbiAgICAgICAgaWYgKHRvdGFsU2l6ZU1heCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIGdldCB0aGUgY3VycmVudCB0b3RhbCBmaWxlIHNpemVcbiAgICAgICAgICB2YXIgY3VycmVudFRvdGFsU2l6ZSA9IHF1ZXJ5KCdHRVRfQUNUSVZFX0lURU1TJykucmVkdWNlKGZ1bmN0aW9uKFxuICAgICAgICAgICAgdG90YWwsXG4gICAgICAgICAgICBpdGVtXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdG90YWwgKyBpdGVtLmZpbGVTaXplO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgMCk7XG5cbiAgICAgICAgICAvLyBnZXQgdGhlIHNpemUgb2YgdGhlIG5ldyBmaWxlXG4gICAgICAgICAgaWYgKGN1cnJlbnRUb3RhbFNpemUgPiB0b3RhbFNpemVNYXgpIHtcbiAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICAgIG1haW46IHF1ZXJ5KCdHRVRfTEFCRUxfTUFYX1RPVEFMX0ZJTEVfU0laRV9FWENFRURFRCcpLFxuXG4gICAgICAgICAgICAgICAgc3ViOiByZXBsYWNlSW5TdHJpbmcocXVlcnkoJ0dFVF9MQUJFTF9NQVhfVE9UQUxfRklMRV9TSVpFJyksIHtcbiAgICAgICAgICAgICAgICAgIGZpbGVzaXplOiB0b05hdHVyYWxGaWxlU2l6ZSh0b3RhbFNpemVNYXgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaWxlIGlzIGZpbmUsIGxldCdzIHBhc3MgaXQgYmFja1xuICAgICAgICByZXNvbHZlKGZpbGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICAvLyBFbmFibGUgb3IgZGlzYWJsZSBmaWxlIHR5cGUgdmFsaWRhdGlvblxuICAgICAgICBhbGxvd0ZpbGVTaXplVmFsaWRhdGlvbjogW3RydWUsIFR5cGUuQk9PTEVBTl0sXG5cbiAgICAgICAgLy8gTWF4IGluZGl2aWR1YWwgZmlsZSBzaXplIGluIGJ5dGVzXG4gICAgICAgIG1heEZpbGVTaXplOiBbbnVsbCwgVHlwZS5JTlRdLFxuXG4gICAgICAgIC8vIE1pbiBpbmRpdmlkdWFsIGZpbGUgc2l6ZSBpbiBieXRlc1xuICAgICAgICBtaW5GaWxlU2l6ZTogW251bGwsIFR5cGUuSU5UXSxcblxuICAgICAgICAvLyBNYXggdG90YWwgZmlsZSBzaXplIGluIGJ5dGVzXG4gICAgICAgIG1heFRvdGFsRmlsZVNpemU6IFtudWxsLCBUeXBlLklOVF0sXG5cbiAgICAgICAgLy8gRmlsdGVyIHRoZSBmaWxlcyB0aGF0IG5lZWQgdG8gYmUgdmFsaWRhdGVkIGZvciBzaXplXG4gICAgICAgIGZpbGVWYWxpZGF0ZVNpemVGaWx0ZXI6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcblxuICAgICAgICAvLyBlcnJvciBsYWJlbHNcbiAgICAgICAgbGFiZWxNaW5GaWxlU2l6ZUV4Y2VlZGVkOiBbJ0ZpbGUgaXMgdG9vIHNtYWxsJywgVHlwZS5TVFJJTkddLFxuICAgICAgICBsYWJlbE1pbkZpbGVTaXplOiBbJ01pbmltdW0gZmlsZSBzaXplIGlzIHtmaWxlc2l6ZX0nLCBUeXBlLlNUUklOR10sXG5cbiAgICAgICAgbGFiZWxNYXhGaWxlU2l6ZUV4Y2VlZGVkOiBbJ0ZpbGUgaXMgdG9vIGxhcmdlJywgVHlwZS5TVFJJTkddLFxuICAgICAgICBsYWJlbE1heEZpbGVTaXplOiBbJ01heGltdW0gZmlsZSBzaXplIGlzIHtmaWxlc2l6ZX0nLCBUeXBlLlNUUklOR10sXG5cbiAgICAgICAgbGFiZWxNYXhUb3RhbEZpbGVTaXplRXhjZWVkZWQ6IFtcbiAgICAgICAgICAnTWF4aW11bSB0b3RhbCBzaXplIGV4Y2VlZGVkJyxcbiAgICAgICAgICBUeXBlLlNUUklOR1xuICAgICAgICBdLFxuXG4gICAgICAgIGxhYmVsTWF4VG90YWxGaWxlU2l6ZTogW1xuICAgICAgICAgICdNYXhpbXVtIHRvdGFsIGZpbGUgc2l6ZSBpcyB7ZmlsZXNpemV9JyxcbiAgICAgICAgICBUeXBlLlNUUklOR1xuICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBmaXJlIHBsdWdpbmxvYWRlZCBldmVudCBpZiBydW5uaW5nIGluIGJyb3dzZXIsIHRoaXMgYWxsb3dzIHJlZ2lzdGVyaW5nIHRoZSBwbHVnaW4gd2hlbiB1c2luZyBhc3luYyBzY3JpcHQgdGFnc1xuICB2YXIgaXNCcm93c2VyID1cbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ0ZpbGVQb25kOnBsdWdpbmxvYWRlZCcsIHsgZGV0YWlsOiBwbHVnaW4gfSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0pO1xuIiwiLyohXG4gKiBGaWxlUG9uZFBsdWdpbkZpbGVQb3N0ZXIgMi40LjFcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCwgaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQvXG4gKiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9wcWluYS5ubC9maWxlcG9uZC8gZm9yIGRldGFpbHMuXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuKGZ1bmN0aW9uKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IChtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSlcbiAgICA6IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZFxuICAgID8gZGVmaW5lKGZhY3RvcnkpXG4gICAgOiAoKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmKSxcbiAgICAgIChnbG9iYWwuRmlsZVBvbmRQbHVnaW5GaWxlUG9zdGVyID0gZmFjdG9yeSgpKSk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMgPSB7XG4gICAgdHlwZTogJ3NwcmluZycsXG4gICAgc3RpZmZuZXNzOiAwLjUsXG4gICAgZGFtcGluZzogMC40NSxcbiAgICBtYXNzOiAxMFxuICB9O1xuXG4gIHZhciBjcmVhdGVQb3N0ZXJWaWV3ID0gZnVuY3Rpb24gY3JlYXRlUG9zdGVyVmlldyhfKSB7XG4gICAgcmV0dXJuIF8udXRpbHMuY3JlYXRlVmlldyh7XG4gICAgICBuYW1lOiAnZmlsZS1wb3N0ZXInLFxuICAgICAgdGFnOiAnZGl2JyxcbiAgICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZi5yb290O1xuICAgICAgICByb290LnJlZi5pbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICByb290LmVsZW1lbnQuYXBwZW5kQ2hpbGQocm9vdC5yZWYuaW1hZ2UpO1xuICAgICAgfSxcbiAgICAgIHdyaXRlOiBfLnV0aWxzLmNyZWF0ZVJvdXRlKHtcbiAgICAgICAgRElEX0ZJTEVfUE9TVEVSX0xPQUQ6IGZ1bmN0aW9uIERJRF9GSUxFX1BPU1RFUl9MT0FEKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgICAgICAgcHJvcHMgPSBfcmVmMi5wcm9wcztcbiAgICAgICAgICB2YXIgaWQgPSBwcm9wcy5pZDtcblxuICAgICAgICAgIC8vIGdldCBpdGVtXG4gICAgICAgICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIHsgaWQ6IHByb3BzLmlkIH0pO1xuICAgICAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gZ2V0IHBvc3RlclxuICAgICAgICAgIHZhciBwb3N0ZXIgPSBpdGVtLmdldE1ldGFkYXRhKCdwb3N0ZXInKTtcbiAgICAgICAgICByb290LnJlZi5pbWFnZS5zcmMgPSBwb3N0ZXI7XG5cbiAgICAgICAgICAvLyBsZXQgb3RoZXJzIGtub3cgb2Ygb3VyIGZhYnVsb3VzIGFjaGlldmVtZW50IChzbyB0aGUgaW1hZ2UgY2FuIGJlIGZhZGVkIGluKVxuICAgICAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9GSUxFX1BPU1RFUl9EUkFXJywgeyBpZDogaWQgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuXG4gICAgICBtaXhpbnM6IHtcbiAgICAgICAgc3R5bGVzOiBbJ3NjYWxlWCcsICdzY2FsZVknLCAnb3BhY2l0eSddLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgc2NhbGVYOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgc2NhbGVZOiBJTUFHRV9TQ0FMRV9TUFJJTkdfUFJPUFMsXG4gICAgICAgICAgb3BhY2l0eTogeyB0eXBlOiAndHdlZW4nLCBkdXJhdGlvbjogNzUwIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBhcHBseVRlbXBsYXRlID0gZnVuY3Rpb24gYXBwbHlUZW1wbGF0ZShzb3VyY2UsIHRhcmdldCkge1xuICAgIC8vIGNvcHkgd2lkdGggYW5kIGhlaWdodFxuICAgIHRhcmdldC53aWR0aCA9IHNvdXJjZS53aWR0aDtcbiAgICB0YXJnZXQuaGVpZ2h0ID0gc291cmNlLmhlaWdodDtcblxuICAgIC8vIGRyYXcgdGhlIHRlbXBsYXRlXG4gICAgdmFyIGN0eCA9IHRhcmdldC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5kcmF3SW1hZ2Uoc291cmNlLCAwLCAwKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlUG9zdGVyT3ZlcmxheVZpZXcgPSBmdW5jdGlvbiBjcmVhdGVQb3N0ZXJPdmVybGF5VmlldyhmcEFQSSkge1xuICAgIHJldHVybiBmcEFQSS51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdmaWxlLXBvc3Rlci1vdmVybGF5JyxcbiAgICAgIHRhZzogJ2NhbnZhcycsXG4gICAgICBpZ25vcmVSZWN0OiB0cnVlLFxuICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgICAgIGFwcGx5VGVtcGxhdGUocHJvcHMudGVtcGxhdGUsIHJvb3QuZWxlbWVudCk7XG4gICAgICB9LFxuICAgICAgbWl4aW5zOiB7XG4gICAgICAgIHN0eWxlczogWydvcGFjaXR5J10sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICBvcGFjaXR5OiB7IHR5cGU6ICdzcHJpbmcnLCBtYXNzOiAyNSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ2V0SW1hZ2VTaXplID0gZnVuY3Rpb24gZ2V0SW1hZ2VTaXplKHVybCwgY2IpIHtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aDtcbiAgICAgIHZhciBoZWlnaHQgPSBpbWFnZS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgaW1hZ2UgPSBudWxsO1xuICAgICAgY2Iod2lkdGgsIGhlaWdodCk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH07XG5cbiAgdmFyIGVhc2VJbk91dFNpbmUgPSBmdW5jdGlvbiBlYXNlSW5PdXRTaW5lKHQpIHtcbiAgICByZXR1cm4gLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogdCkgLSAxKTtcbiAgfTtcblxuICB2YXIgYWRkR3JhZGllbnRTdGVwcyA9IGZ1bmN0aW9uIGFkZEdyYWRpZW50U3RlcHMoZ3JhZGllbnQsIGNvbG9yKSB7XG4gICAgdmFyIGFscGhhID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICB2YXIgZWFzZUZuID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gYXJndW1lbnRzWzNdXG4gICAgICAgIDogZWFzZUluT3V0U2luZTtcbiAgICB2YXIgc3RlcHMgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxMDtcbiAgICB2YXIgb2Zmc2V0ID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcbiAgICB2YXIgcmFuZ2UgPSAxIC0gb2Zmc2V0O1xuICAgIHZhciByZ2IgPSBjb2xvci5qb2luKCcsJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gc3RlcHM7IGkrKykge1xuICAgICAgdmFyIHAgPSBpIC8gc3RlcHM7XG4gICAgICB2YXIgc3RvcCA9IG9mZnNldCArIHJhbmdlICogcDtcbiAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcChcbiAgICAgICAgc3RvcCxcbiAgICAgICAgJ3JnYmEoJy5jb25jYXQocmdiLCAnLCAnKS5jb25jYXQoZWFzZUZuKHApICogYWxwaGEsICcpJylcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBNQVhfV0lEVEggPSAxMDtcbiAgdmFyIE1BWF9IRUlHSFQgPSAxMDtcblxuICB2YXIgY2FsY3VsYXRlQXZlcmFnZUNvbG9yID0gZnVuY3Rpb24gY2FsY3VsYXRlQXZlcmFnZUNvbG9yKGltYWdlKSB7XG4gICAgdmFyIHNjYWxhciA9IE1hdGgubWluKE1BWF9XSURUSCAvIGltYWdlLndpZHRoLCBNQVhfSEVJR0hUIC8gaW1hZ2UuaGVpZ2h0KTtcblxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdmFyIHdpZHRoID0gKGNhbnZhcy53aWR0aCA9IE1hdGguY2VpbChpbWFnZS53aWR0aCAqIHNjYWxhcikpO1xuICAgIHZhciBoZWlnaHQgPSAoY2FudmFzLmhlaWdodCA9IE1hdGguY2VpbChpbWFnZS5oZWlnaHQgKiBzY2FsYXIpKTtcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBsID0gZGF0YS5sZW5ndGg7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGcgPSAwO1xuICAgIHZhciBiID0gMDtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkgKz0gNCkge1xuICAgICAgciArPSBkYXRhW2ldICogZGF0YVtpXTtcbiAgICAgIGcgKz0gZGF0YVtpICsgMV0gKiBkYXRhW2kgKyAxXTtcbiAgICAgIGIgKz0gZGF0YVtpICsgMl0gKiBkYXRhW2kgKyAyXTtcbiAgICB9XG5cbiAgICByID0gYXZlcmFnZUNvbG9yKHIsIGwpO1xuICAgIGcgPSBhdmVyYWdlQ29sb3IoZywgbCk7XG4gICAgYiA9IGF2ZXJhZ2VDb2xvcihiLCBsKTtcblxuICAgIHJldHVybiB7IHI6IHIsIGc6IGcsIGI6IGIgfTtcbiAgfTtcblxuICB2YXIgYXZlcmFnZUNvbG9yID0gZnVuY3Rpb24gYXZlcmFnZUNvbG9yKGMsIGwpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnNxcnQoYyAvIChsIC8gNCkpKTtcbiAgfTtcblxuICB2YXIgZHJhd1RlbXBsYXRlID0gZnVuY3Rpb24gZHJhd1RlbXBsYXRlKFxuICAgIGNhbnZhcyxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgY29sb3IsXG4gICAgYWxwaGFUYXJnZXRcbiAgKSB7XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICB2YXIgaG9yaXpvbnRhbENlbnRlciA9IHdpZHRoICogMC41O1xuXG4gICAgdmFyIGdyYWQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoXG4gICAgICBob3Jpem9udGFsQ2VudGVyLFxuICAgICAgaGVpZ2h0ICsgMTEwLFxuICAgICAgaGVpZ2h0IC0gMTAwLFxuICAgICAgaG9yaXpvbnRhbENlbnRlcixcbiAgICAgIGhlaWdodCArIDExMCxcbiAgICAgIGhlaWdodCArIDEwMFxuICAgICk7XG5cbiAgICBhZGRHcmFkaWVudFN0ZXBzKGdyYWQsIGNvbG9yLCBhbHBoYVRhcmdldCwgdW5kZWZpbmVkLCA4LCAwLjQpO1xuXG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKC13aWR0aCAqIDAuNSwgMCk7XG4gICAgY3R4LnNjYWxlKDIsIDEpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBncmFkO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9O1xuXG4gIHZhciBoYXNOYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcblxuICB2YXIgd2lkdGggPSA1MDA7XG4gIHZhciBoZWlnaHQgPSAyMDA7XG5cbiAgdmFyIG92ZXJsYXlUZW1wbGF0ZVNoYWRvdyA9IGhhc05hdmlnYXRvciAmJiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdmFyIG92ZXJsYXlUZW1wbGF0ZUVycm9yID0gaGFzTmF2aWdhdG9yICYmIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICB2YXIgb3ZlcmxheVRlbXBsYXRlU3VjY2VzcyA9IGhhc05hdmlnYXRvciAmJiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICBpZiAoaGFzTmF2aWdhdG9yKSB7XG4gICAgZHJhd1RlbXBsYXRlKG92ZXJsYXlUZW1wbGF0ZVNoYWRvdywgd2lkdGgsIGhlaWdodCwgWzQwLCA0MCwgNDBdLCAwLjg1KTtcbiAgICBkcmF3VGVtcGxhdGUob3ZlcmxheVRlbXBsYXRlRXJyb3IsIHdpZHRoLCBoZWlnaHQsIFsxOTYsIDc4LCA3MV0sIDEpO1xuICAgIGRyYXdUZW1wbGF0ZShvdmVybGF5VGVtcGxhdGVTdWNjZXNzLCB3aWR0aCwgaGVpZ2h0LCBbNTQsIDE1MSwgOTldLCAxKTtcbiAgfVxuXG4gIHZhciBsb2FkSW1hZ2UgPSBmdW5jdGlvbiBsb2FkSW1hZ2UodXJsLCBjcm9zc09yaWdpblZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgaWYgKHR5cGVvZiBjcm9zc09yaWdpbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW5WYWx1ZTtcbiAgICAgIH1cbiAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShpbWcpO1xuICAgICAgfTtcbiAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9O1xuICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlUG9zdGVyV3JhcHBlclZpZXcgPSBmdW5jdGlvbiBjcmVhdGVQb3N0ZXJXcmFwcGVyVmlldyhfKSB7XG4gICAgLy8gY3JlYXRlIG92ZXJsYXkgdmlld1xuICAgIHZhciBvdmVybGF5ID0gY3JlYXRlUG9zdGVyT3ZlcmxheVZpZXcoXyk7XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSBoYW5kbGVyIGZvciB3aGVuIHByZXZpZXcgY29udGFpbmVyIGhhcyBiZWVuIGNyZWF0ZWRcbiAgICAgKi9cbiAgICB2YXIgZGlkQ3JlYXRlUHJldmlld0NvbnRhaW5lciA9IGZ1bmN0aW9uIGRpZENyZWF0ZVByZXZpZXdDb250YWluZXIoX3JlZikge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmLnJvb3QsXG4gICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICAgIHZhciBpZCA9IHByb3BzLmlkO1xuXG4gICAgICAvLyB3ZSBuZWVkIHRvIGdldCB0aGUgZmlsZSBkYXRhIHRvIGRldGVybWluZSB0aGUgZXZlbnR1YWwgaW1hZ2Ugc2l6ZVxuICAgICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIGlkKTtcbiAgICAgIGlmICghaXRlbSkgcmV0dXJuO1xuXG4gICAgICAvLyBnZXQgdXJsIHRvIGZpbGVcbiAgICAgIHZhciBmaWxlVVJMID0gaXRlbS5nZXRNZXRhZGF0YSgncG9zdGVyJyk7XG5cbiAgICAgIC8vIGltYWdlIGlzIG5vdyByZWFkeVxuICAgICAgdmFyIHByZXZpZXdJbWFnZUxvYWRlZCA9IGZ1bmN0aW9uIHByZXZpZXdJbWFnZUxvYWRlZChkYXRhKSB7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBhdmVyYWdlIGltYWdlIGNvbG9yLCBpcyBpbiB0cnkgY2F0Y2ggdG8gY2lyY3VtdmVudCBhbnkgY29ycyBlcnJvcnNcbiAgICAgICAgdmFyIGF2ZXJhZ2VDb2xvciA9IHJvb3QucXVlcnkoXG4gICAgICAgICAgJ0dFVF9GSUxFX1BPU1RFUl9DQUxDVUxBVEVfQVZFUkFHRV9JTUFHRV9DT0xPUidcbiAgICAgICAgKVxuICAgICAgICAgID8gY2FsY3VsYXRlQXZlcmFnZUNvbG9yKGRhdGEpXG4gICAgICAgICAgOiBudWxsO1xuICAgICAgICBpdGVtLnNldE1ldGFkYXRhKCdjb2xvcicsIGF2ZXJhZ2VDb2xvciwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gdGhlIHByZXZpZXcgaXMgbm93IHJlYWR5IHRvIGJlIGRyYXduXG4gICAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9GSUxFX1BPU1RFUl9MT0FEJywge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgLy8gZGV0ZXJtaW5lIGltYWdlIHNpemUgb2YgdGhpcyBpdGVtXG4gICAgICBnZXRJbWFnZVNpemUoZmlsZVVSTCwgZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgICAvLyB3ZSBjYW4gbm93IHNjYWxlIHRoZSBwYW5lbCB0byB0aGUgZmluYWwgc2l6ZVxuICAgICAgICByb290LmRpc3BhdGNoKCdESURfRklMRV9QT1NURVJfQ0FMQ1VMQVRFX1NJWkUnLCB7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjcmVhdGUgZmFsbGJhY2sgcHJldmlld1xuICAgICAgICBsb2FkSW1hZ2UoXG4gICAgICAgICAgZmlsZVVSTCxcbiAgICAgICAgICByb290LnF1ZXJ5KCdHRVRfRklMRV9QT1NURVJfQ1JPU1NfT1JJR0lOX0FUVFJJQlVURV9WQUxVRScpXG4gICAgICAgICkudGhlbihwcmV2aWV3SW1hZ2VMb2FkZWQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGhhbmRsZXIgZm9yIHdoZW4gdGhlIHByZXZpZXcgaGFzIGJlZW4gbG9hZGVkXG4gICAgICovXG4gICAgdmFyIGRpZExvYWRQcmV2aWV3ID0gZnVuY3Rpb24gZGlkTG9hZFByZXZpZXcoX3JlZjIpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjIucm9vdDtcbiAgICAgIHJvb3QucmVmLm92ZXJsYXlTaGFkb3cub3BhY2l0eSA9IDE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGhhbmRsZXIgZm9yIHdoZW4gdGhlIHByZXZpZXcgaW1hZ2UgaXMgcmVhZHkgdG8gYmUgYW5pbWF0ZWRcbiAgICAgKi9cbiAgICB2YXIgZGlkRHJhd1ByZXZpZXcgPSBmdW5jdGlvbiBkaWREcmF3UHJldmlldyhfcmVmMykge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmMy5yb290O1xuICAgICAgdmFyIGltYWdlID0gcm9vdC5yZWYuaW1hZ2U7XG5cbiAgICAgIC8vIHJldmVhbCBpbWFnZVxuICAgICAgaW1hZ2Uuc2NhbGVYID0gMS4wO1xuICAgICAgaW1hZ2Uuc2NhbGVZID0gMS4wO1xuICAgICAgaW1hZ2Uub3BhY2l0eSA9IDE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGhhbmRsZXIgZm9yIHdoZW4gdGhlIHByZXZpZXcgaGFzIGJlZW4gbG9hZGVkXG4gICAgICovXG4gICAgdmFyIHJlc3RvcmVPdmVybGF5ID0gZnVuY3Rpb24gcmVzdG9yZU92ZXJsYXkoX3JlZjQpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjQucm9vdDtcbiAgICAgIHJvb3QucmVmLm92ZXJsYXlTaGFkb3cub3BhY2l0eSA9IDE7XG4gICAgICByb290LnJlZi5vdmVybGF5RXJyb3Iub3BhY2l0eSA9IDA7XG4gICAgICByb290LnJlZi5vdmVybGF5U3VjY2Vzcy5vcGFjaXR5ID0gMDtcbiAgICB9O1xuXG4gICAgdmFyIGRpZFRocm93RXJyb3IgPSBmdW5jdGlvbiBkaWRUaHJvd0Vycm9yKF9yZWY1KSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3Q7XG4gICAgICByb290LnJlZi5vdmVybGF5U2hhZG93Lm9wYWNpdHkgPSAwLjI1O1xuICAgICAgcm9vdC5yZWYub3ZlcmxheUVycm9yLm9wYWNpdHkgPSAxO1xuICAgIH07XG5cbiAgICB2YXIgZGlkQ29tcGxldGVQcm9jZXNzaW5nID0gZnVuY3Rpb24gZGlkQ29tcGxldGVQcm9jZXNzaW5nKF9yZWY2KSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3Q7XG4gICAgICByb290LnJlZi5vdmVybGF5U2hhZG93Lm9wYWNpdHkgPSAwLjI1O1xuICAgICAgcm9vdC5yZWYub3ZlcmxheVN1Y2Nlc3Mub3BhY2l0eSA9IDE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShfcmVmNykge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmNy5yb290LFxuICAgICAgICBwcm9wcyA9IF9yZWY3LnByb3BzO1xuXG4gICAgICAvLyBpbWFnZSB2aWV3XG4gICAgICB2YXIgaW1hZ2UgPSBjcmVhdGVQb3N0ZXJWaWV3KF8pO1xuXG4gICAgICAvLyBhcHBlbmQgaW1hZ2UgcHJlc2VudGVyXG4gICAgICByb290LnJlZi5pbWFnZSA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhpbWFnZSwge1xuICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICBzY2FsZVg6IDEuMjUsXG4gICAgICAgICAgc2NhbGVZOiAxLjI1LFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIC8vIGltYWdlIG92ZXJsYXlzXG4gICAgICByb290LnJlZi5vdmVybGF5U2hhZG93ID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KG92ZXJsYXksIHtcbiAgICAgICAgICB0ZW1wbGF0ZTogb3ZlcmxheVRlbXBsYXRlU2hhZG93LFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHJvb3QucmVmLm92ZXJsYXlTdWNjZXNzID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KG92ZXJsYXksIHtcbiAgICAgICAgICB0ZW1wbGF0ZTogb3ZlcmxheVRlbXBsYXRlU3VjY2VzcyxcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICByb290LnJlZi5vdmVybGF5RXJyb3IgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcob3ZlcmxheSwge1xuICAgICAgICAgIHRlbXBsYXRlOiBvdmVybGF5VGVtcGxhdGVFcnJvcixcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gXy51dGlscy5jcmVhdGVWaWV3KHtcbiAgICAgIG5hbWU6ICdmaWxlLXBvc3Rlci13cmFwcGVyJyxcbiAgICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgICAgd3JpdGU6IF8udXRpbHMuY3JlYXRlUm91dGUoe1xuICAgICAgICAvLyBpbWFnZSBwcmV2aWV3IHN0YXRlZFxuICAgICAgICBESURfRklMRV9QT1NURVJfTE9BRDogZGlkTG9hZFByZXZpZXcsXG4gICAgICAgIERJRF9GSUxFX1BPU1RFUl9EUkFXOiBkaWREcmF3UHJldmlldyxcbiAgICAgICAgRElEX0ZJTEVfUE9TVEVSX0NPTlRBSU5FUl9DUkVBVEU6IGRpZENyZWF0ZVByZXZpZXdDb250YWluZXIsXG5cbiAgICAgICAgLy8gZmlsZSBzdGF0ZXNcbiAgICAgICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjogZGlkVGhyb3dFcnJvcixcbiAgICAgICAgRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjogZGlkVGhyb3dFcnJvcixcbiAgICAgICAgRElEX1RIUk9XX0lURU1fSU5WQUxJRDogZGlkVGhyb3dFcnJvcixcbiAgICAgICAgRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzogZGlkQ29tcGxldGVQcm9jZXNzaW5nLFxuICAgICAgICBESURfU1RBUlRfSVRFTV9QUk9DRVNTSU5HOiByZXN0b3JlT3ZlcmxheSxcbiAgICAgICAgRElEX1JFVkVSVF9JVEVNX1BST0NFU1NJTkc6IHJlc3RvcmVPdmVybGF5XG4gICAgICB9KVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGaWxlIFBvc3RlciBQbHVnaW5cbiAgICovXG4gIHZhciBwbHVnaW4gPSBmdW5jdGlvbiBwbHVnaW4oZnBBUEkpIHtcbiAgICB2YXIgYWRkRmlsdGVyID0gZnBBUEkuYWRkRmlsdGVyLFxuICAgICAgdXRpbHMgPSBmcEFQSS51dGlscztcbiAgICB2YXIgVHlwZSA9IHV0aWxzLlR5cGUsXG4gICAgICBjcmVhdGVSb3V0ZSA9IHV0aWxzLmNyZWF0ZVJvdXRlO1xuXG4gICAgLy8gZmlsZVBvc3RlclZpZXdcbiAgICB2YXIgZmlsZVBvc3RlclZpZXcgPSBjcmVhdGVQb3N0ZXJXcmFwcGVyVmlldyhmcEFQSSk7XG5cbiAgICAvLyBjYWxsZWQgZm9yIGVhY2ggdmlldyB0aGF0IGlzIGNyZWF0ZWQgcmlnaHQgYWZ0ZXIgdGhlICdjcmVhdGUnIG1ldGhvZFxuICAgIGFkZEZpbHRlcignQ1JFQVRFX1ZJRVcnLCBmdW5jdGlvbih2aWV3QVBJKSB7XG4gICAgICAvLyBnZXQgcmVmZXJlbmNlIHRvIGNyZWF0ZWQgdmlld1xuICAgICAgdmFyIGlzID0gdmlld0FQSS5pcyxcbiAgICAgICAgdmlldyA9IHZpZXdBUEkudmlldyxcbiAgICAgICAgcXVlcnkgPSB2aWV3QVBJLnF1ZXJ5O1xuXG4gICAgICAvLyBvbmx5IGhvb2sgdXAgdG8gaXRlbSB2aWV3IGFuZCBvbmx5IGlmIGlzIGVuYWJsZWQgZm9yIHRoaXMgY3JvcHBlclxuICAgICAgaWYgKCFpcygnZmlsZScpIHx8ICFxdWVyeSgnR0VUX0FMTE9XX0ZJTEVfUE9TVEVSJykpIHJldHVybjtcblxuICAgICAgLy8gY3JlYXRlIHRoZSBmaWxlIHBvc3RlciBwbHVnaW4sIGJ1dCBvbmx5IGRvIHNvIGlmIHRoZSBpdGVtIGlzIGFuIGltYWdlXG4gICAgICB2YXIgZGlkTG9hZEl0ZW0gPSBmdW5jdGlvbiBkaWRMb2FkSXRlbShfcmVmKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICAgICAgdXBkYXRlSXRlbVBvc3Rlcihyb290LCBwcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZGlkVXBkYXRlSXRlbU1ldGFkYXRhID0gZnVuY3Rpb24gZGlkVXBkYXRlSXRlbU1ldGFkYXRhKF9yZWYyKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWYyLnByb3BzLFxuICAgICAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbjtcbiAgICAgICAgaWYgKCEvcG9zdGVyLy50ZXN0KGFjdGlvbi5jaGFuZ2Uua2V5KSkgcmV0dXJuO1xuICAgICAgICB1cGRhdGVJdGVtUG9zdGVyKHJvb3QsIHByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciB1cGRhdGVJdGVtUG9zdGVyID0gZnVuY3Rpb24gdXBkYXRlSXRlbVBvc3Rlcihyb290LCBwcm9wcykge1xuICAgICAgICB2YXIgaWQgPSBwcm9wcy5pZDtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWVyeSgnR0VUX0lURU0nLCBpZCk7XG5cbiAgICAgICAgLy8gaXRlbSBjb3VsZCB0aGVvcmV0aWNhbGx5IGhhdmUgYmVlbiByZW1vdmVkIGluIHRoZSBtZWFuIHRpbWVcbiAgICAgICAgaWYgKCFpdGVtIHx8ICFpdGVtLmdldE1ldGFkYXRhKCdwb3N0ZXInKSB8fCBpdGVtLmFyY2hpdmVkKSByZXR1cm47XG5cbiAgICAgICAgLy8gdGVzdCBpZiBpcyBmaWx0ZXJlZFxuICAgICAgICBpZiAoIXF1ZXJ5KCdHRVRfRklMRV9QT1NURVJfRklMVEVSX0lURU0nKShpdGVtKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChyb290LnJlZi5maWxlUG9zdGVyKSB7XG4gICAgICAgICAgdmlldy5yZW1vdmVDaGlsZFZpZXcocm9vdC5yZWYuZmlsZVBvc3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgcHJldmlldyB2aWV3XG4gICAgICAgIHJvb3QucmVmLmZpbGVQb3N0ZXIgPSB2aWV3LmFwcGVuZENoaWxkVmlldyhcbiAgICAgICAgICB2aWV3LmNyZWF0ZUNoaWxkVmlldyhmaWxlUG9zdGVyVmlldywgeyBpZDogaWQgfSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBub3cgcmVhZHlcbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0ZJTEVfUE9TVEVSX0NPTlRBSU5FUl9DUkVBVEUnLCB7IGlkOiBpZCB9KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBkaWRDYWxjdWxhdGVQcmV2aWV3U2l6ZSA9IGZ1bmN0aW9uIGRpZENhbGN1bGF0ZVByZXZpZXdTaXplKF9yZWYzKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjMucm9vdCxcbiAgICAgICAgICBhY3Rpb24gPSBfcmVmMy5hY3Rpb247XG5cbiAgICAgICAgLy8gbm8gcG9zdGVyIHNldFxuICAgICAgICBpZiAoIXJvb3QucmVmLmZpbGVQb3N0ZXIpIHJldHVybjtcblxuICAgICAgICAvLyByZW1lbWJlciBkaW1lbnNpb25zXG4gICAgICAgIHJvb3QucmVmLmltYWdlV2lkdGggPSBhY3Rpb24ud2lkdGg7XG4gICAgICAgIHJvb3QucmVmLmltYWdlSGVpZ2h0ID0gYWN0aW9uLmhlaWdodDtcblxuICAgICAgICByb290LnJlZi5zaG91bGRVcGRhdGVQYW5lbEhlaWdodCA9IHRydWU7XG5cbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnS0lDSycpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGdldFBvc3RlckhlaWdodCA9IGZ1bmN0aW9uIGdldFBvc3RlckhlaWdodChfcmVmNCkge1xuICAgICAgICB2YXIgcm9vdCA9IF9yZWY0LnJvb3Q7XG4gICAgICAgIHZhciBmaXhlZFBvc3RlckhlaWdodCA9IHJvb3QucXVlcnkoJ0dFVF9GSUxFX1BPU1RFUl9IRUlHSFQnKTtcblxuICAgICAgICAvLyBpZiBmaXhlZCBoZWlnaHQ6IHJldHVybiBmaXhlZCBpbW1lZGlhdGVseVxuICAgICAgICBpZiAoZml4ZWRQb3N0ZXJIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gZml4ZWRQb3N0ZXJIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUG9zdGVySGVpZ2h0ID0gcm9vdC5xdWVyeSgnR0VUX0ZJTEVfUE9TVEVSX01JTl9IRUlHSFQnKTtcbiAgICAgICAgdmFyIG1heFBvc3RlckhlaWdodCA9IHJvb3QucXVlcnkoJ0dFVF9GSUxFX1BPU1RFUl9NQVhfSEVJR0hUJyk7XG5cbiAgICAgICAgLy8gaWYgbmF0dXJhbCBoZWlnaHQgaXMgc21hbGxlciB0aGFuIG1pbkhlaWdodDogcmV0dXJuIG1pbiBoZWlnaHRcbiAgICAgICAgaWYgKG1pblBvc3RlckhlaWdodCAmJiByb290LnJlZi5pbWFnZUhlaWdodCA8IG1pblBvc3RlckhlaWdodCkge1xuICAgICAgICAgIHJldHVybiBtaW5Qb3N0ZXJIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVpZ2h0ID1cbiAgICAgICAgICByb290LnJlY3QuZWxlbWVudC53aWR0aCAqXG4gICAgICAgICAgKHJvb3QucmVmLmltYWdlSGVpZ2h0IC8gcm9vdC5yZWYuaW1hZ2VXaWR0aCk7XG5cbiAgICAgICAgaWYgKG1pblBvc3RlckhlaWdodCAmJiBoZWlnaHQgPCBtaW5Qb3N0ZXJIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gbWluUG9zdGVySGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhQb3N0ZXJIZWlnaHQgJiYgaGVpZ2h0ID4gbWF4UG9zdGVySGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIG1heFBvc3RlckhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICB9O1xuXG4gICAgICAvLyBzdGFydCB3cml0aW5nXG4gICAgICB2aWV3LnJlZ2lzdGVyV3JpdGVyKFxuICAgICAgICBjcmVhdGVSb3V0ZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBESURfTE9BRF9JVEVNOiBkaWRMb2FkSXRlbSxcbiAgICAgICAgICAgIERJRF9GSUxFX1BPU1RFUl9DQUxDVUxBVEVfU0laRTogZGlkQ2FsY3VsYXRlUHJldmlld1NpemUsXG4gICAgICAgICAgICBESURfVVBEQVRFX0lURU1fTUVUQURBVEE6IGRpZFVwZGF0ZUl0ZW1NZXRhZGF0YVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZnVuY3Rpb24oX3JlZjUpIHtcbiAgICAgICAgICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgICAgICAgICAgcHJvcHMgPSBfcmVmNS5wcm9wcztcblxuICAgICAgICAgICAgLy8gZG9uJ3QgcnVuIHdpdGhvdXQgcG9zdGVyXG4gICAgICAgICAgICBpZiAoIXJvb3QucmVmLmZpbGVQb3N0ZXIpIHJldHVybjtcblxuICAgICAgICAgICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgd2hpbGUgaGlkZGVuXG4gICAgICAgICAgICBpZiAocm9vdC5yZWN0LmVsZW1lbnQuaGlkZGVuKSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIHNob3VsZCB3ZSByZWRyYXdcbiAgICAgICAgICAgIGlmIChyb290LnJlZi5zaG91bGRVcGRhdGVQYW5lbEhlaWdodCkge1xuICAgICAgICAgICAgICAvLyB0aW1lIHRvIHJlc2l6ZSB0aGUgcGFyZW50IHBhbmVsXG4gICAgICAgICAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9VUERBVEVfUEFORUxfSEVJR0hUJywge1xuICAgICAgICAgICAgICAgIGlkOiBwcm9wcy5pZCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGdldFBvc3RlckhlaWdodCh7IHJvb3Q6IHJvb3QgfSlcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gZG9uZSFcbiAgICAgICAgICAgICAgcm9vdC5yZWYuc2hvdWxkVXBkYXRlUGFuZWxIZWlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBleHBvc2UgcGx1Z2luXG4gICAgcmV0dXJuIHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgLy8gRW5hYmxlIG9yIGRpc2FibGUgZmlsZSBwb3N0ZXJcbiAgICAgICAgYWxsb3dGaWxlUG9zdGVyOiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSxcblxuICAgICAgICAvLyBGaXhlZCBwcmV2aWV3IGhlaWdodFxuICAgICAgICBmaWxlUG9zdGVySGVpZ2h0OiBbbnVsbCwgVHlwZS5JTlRdLFxuXG4gICAgICAgIC8vIE1pbiBpbWFnZSBoZWlnaHRcbiAgICAgICAgZmlsZVBvc3Rlck1pbkhlaWdodDogW251bGwsIFR5cGUuSU5UXSxcblxuICAgICAgICAvLyBNYXggaW1hZ2UgaGVpZ2h0XG4gICAgICAgIGZpbGVQb3N0ZXJNYXhIZWlnaHQ6IFtudWxsLCBUeXBlLklOVF0sXG5cbiAgICAgICAgLy8gZmlsdGVycyBmaWxlIGl0ZW1zIHRvIGRldGVybWluZSB3aGljaCBhcmUgc2hvd24gYXMgcG9zdGVyXG4gICAgICAgIGZpbGVQb3N0ZXJGaWx0ZXJJdGVtOiBbXG4gICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIFR5cGUuRlVOQ1RJT05cbiAgICAgICAgXSxcblxuICAgICAgICAvLyBFbmFibGVzIG9yIGRpc2FibGVzIHJlYWRpbmcgYXZlcmFnZSBpbWFnZSBjb2xvclxuICAgICAgICBmaWxlUG9zdGVyQ2FsY3VsYXRlQXZlcmFnZUltYWdlQ29sb3I6IFtmYWxzZSwgVHlwZS5CT09MRUFOXSxcblxuICAgICAgICAvLyBBbGxvd3Mgc2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIENPUlMgYXR0cmlidXRlIChudWxsIGlzIGRvbid0IHNldCBhdHRyaWJ1dGUpXG4gICAgICAgIGZpbGVQb3N0ZXJDcm9zc09yaWdpbkF0dHJpYnV0ZVZhbHVlOiBbJ0Fub255bW91cycsIFR5cGUuU1RSSU5HXVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gZmlyZSBwbHVnaW5sb2FkZWQgZXZlbnQgaWYgcnVubmluZyBpbiBicm93c2VyLCB0aGlzIGFsbG93cyByZWdpc3RlcmluZyB0aGUgcGx1Z2luIHdoZW4gdXNpbmcgYXN5bmMgc2NyaXB0IHRhZ3NcbiAgdmFyIGlzQnJvd3NlciA9XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KCdGaWxlUG9uZDpwbHVnaW5sb2FkZWQnLCB7IGRldGFpbDogcGx1Z2luIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudExpZ2h0Ym94IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW1hZ2VzOiBbXSxcbiAgICAgIHN0YXJ0SW5kZXg6IDAsXG4gICAgfTtcblxuICAgIHRoaXMucmVjYWxjU2l6ZXMgPSB0aGlzLnJlY2FsY1NpemVzLmJpbmQodGhpcyk7XG5cbiAgfVxuXG5cdGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBzdGFydCBvbiBldmVudFxuICAgIHNlbGYuc2hvd0xpZ2h0Qm94TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2VsZi5zaG93TGlnaHRib3goZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1zaG93LWxpZ2h0LWJveCcsIHNlbGYuc2hvd0xpZ2h0Qm94TGlzdGVuZXIpO1xuXG4gICAgLy8gbW92ZSB0byByb290XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmluc3RhbmNlKTtcblxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXNob3ctbGlnaHQtYm94JywgdGhpcy5zaG93TGlnaHRCb3hMaXN0ZW5lcik7XG4gIH1cblxuICBzaG93TGlnaHRib3goZGF0YSkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIFxuICAgIC8vIGV2YWwgYXNwZWN0IHJhdGlvXG4gICAgbGV0IGFzcGVjdFJhdGlvO1xuICAgIHRyeSB7XG4gICAgICBhc3BlY3RSYXRpbyA9IGV2YWwoIGRhdGEuYXNwZWN0UmF0aW8ucmVwbGFjZSAmJiBkYXRhLmFzcGVjdFJhdGlvLnJlcGxhY2UoJ3gnLCAnLycpICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgIGlmICh0eXBlb2YgYXNwZWN0UmF0aW8gIT0gJ251bWJlcicpIGFzcGVjdFJhdGlvID0gMTYvOTtcblxuICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgaW1hZ2VzOiBkYXRhLmltYWdlcyxcbiAgICAgIHN0YXJ0SW5kZXg6IGRhdGEuc3RhcnRJbmRleCxcbiAgICAgIGFzcGVjdFJhdGlvLFxuICAgIH0sICgpID0+IHtcbiAgICAgIHNlbGYuaW5zdGFuY2Uuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIHNlbGYucmVjYWxjU2l6ZXMoKTtcbiAgICB9KVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHNlbGYucmVjYWxjU2l6ZXMpO1xuXG4gIH1cblxuICBoaWRlTGlnaHRib3goKSB7XG4gICAgdGhpcy5pbnN0YW5jZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVjYWxjU2l6ZXMpO1xuICB9XG5cbiAgc2hvd0ltYWdlKGUsIHNyYykge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5tYWluSW1hZ2Uuc3JjID0gc3JjO1xuICB9XG5cbiAgcmVjYWxjU2l6ZXMoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIXNlbGYubWFpbkNvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgbGV0IG1haW5XaWR0aCA9IHNlbGYubWFpbkNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICBsZXQgbWFpbkhlaWdodCA9IHNlbGYubWFpbkNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgaWYgKG1haW5XaWR0aCAvIG1haW5IZWlnaHQgPiBzZWxmLnN0YXRlLmFzcGVjdFJhdGlvKSB7XG4gICAgICBsZXQgaGVpZ2h0ID0gLjggKiBtYWluSGVpZ2h0O1xuICAgICAgc2VsZi5tYWluSW1hZ2VDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgIHNlbGYubWFpbkltYWdlQ29udGFpbmVyLnN0eWxlLndpZHRoID0gKCBzZWxmLnN0YXRlLmFzcGVjdFJhdGlvICogaGVpZ2h0ICkgKyAncHgnO1xuICAgICAgc2VsZi5tYWluSW1hZ2VDb250YWluZXIuc3R5bGUudG9wID0gKCAoIG1haW5IZWlnaHQgLSBoZWlnaHQgKSAvIDIgKSArICdweCc7XG4gICAgICBzZWxmLm1haW5JbWFnZUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gKCAoIG1haW5XaWR0aCAtICggc2VsZi5zdGF0ZS5hc3BlY3RSYXRpbyAqIGhlaWdodCApICkgLyAyICkgKyAncHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgd2lkdGggPSBtYWluV2lkdGg7XG4gICAgICBzZWxmLm1haW5JbWFnZUNvbnRhaW5lci5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgIHNlbGYubWFpbkltYWdlQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICggMS9zZWxmLnN0YXRlLmFzcGVjdFJhdGlvICogd2lkdGggKSArICdweCc7XG4gICAgICBzZWxmLm1haW5JbWFnZUNvbnRhaW5lci5zdHlsZS50b3AgPSAoICggbWFpbkhlaWdodCAtICggMS9zZWxmLnN0YXRlLmFzcGVjdFJhdGlvICogd2lkdGggKSApIC8gMiApICsgJ3B4JztcbiAgICAgIHNlbGYubWFpbkltYWdlQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAwO1xuICAgIH1cblxuICAgIHNlbGYubWFpbkltYWdlLnN0eWxlLndpZHRoID0gc2VsZi5tYWluSW1hZ2VDb250YWluZXIuc3R5bGUud2lkdGg7XG4gICAgc2VsZi5tYWluSW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gc2VsZi5tYWluSW1hZ2VDb250YWluZXIuc3R5bGUuaGVpZ2h0O1xuXG4gICAgbGV0IG5hdkltZ1dpZHRoID0gc2VsZi5zdGF0ZS5hc3BlY3RSYXRpbyAqIHNlbGYubmF2aWdhdGlvbkNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgbGV0IHdpZHRoID0gc2VsZi5zdGF0ZS5pbWFnZXMubGVuZ3RoICogbmF2SW1nV2lkdGggKyBzZWxmLnN0YXRlLmltYWdlcy5sZW5ndGggKiAyMDtcbiAgICBpZiAoIHdpZHRoID4gc2VsZi5uYXZpZ2F0aW9uQ29udGFpbmVyLm9mZnNldFdpZHRoICkge1xuICAgICAgd2lkdGggPSBzZWxmLm5hdmlnYXRpb25Db250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICBuYXZJbWdXaWR0aCA9IHdpZHRoIC8gc2VsZi5zdGF0ZS5pbWFnZXMubGVuZ3RoIC0gMjA7XG4gICAgfVxuICAgIFxuICAgIHNlbGYubmF2aWdhdGlvbkNvbnRhaW5lci5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcblxuICAgIHNlbGYuc3RhdGUuaW1hZ2VzLm1hcCggKCBpbWFnZSwgaSApID0+IHtcbiAgICAgIGxldCB3aWR0aCA9IHBhcnNlSW50KCBuYXZJbWdXaWR0aCApO1xuICAgICAgc2VsZltgbGlnaGJveC1pbWFnZS1jb250YWluZXItJHtpfWBdLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgc2VsZltgbGlnaGJveC1pbWFnZS1jb250YWluZXItJHtpfWBdLnN0eWxlLmhlaWdodCA9IHBhcnNlSW50KCAxL3NlbGYuc3RhdGUuYXNwZWN0UmF0aW8gKiB3aWR0aCApICsgJ3B4JztcblxuICAgICAgc2VsZltgbGlnaGJveC1pbWFnZS0ke2l9YF0uc3R5bGUud2lkdGggPSBzZWxmW2BsaWdoYm94LWltYWdlLWNvbnRhaW5lci0ke2l9YF0uc3R5bGUud2lkdGg7XG4gICAgICBzZWxmW2BsaWdoYm94LWltYWdlLSR7aX1gXS5zdHlsZS5oZWlnaHQgPSBzZWxmW2BsaWdoYm94LWltYWdlLWNvbnRhaW5lci0ke2l9YF0uc3R5bGUuaGVpZ2h0O1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIGdldEltYWdlU3JjKGltYWdlKSB7XG4gICAgbGV0IGltYWdlU3JjID0gaW1hZ2U7XG4gICAgaWYgKCB0eXBlb2YgaW1hZ2UgPT0gJ29iamVjdCcgJiYgaW1hZ2Uuc3JjICkgaW1hZ2VTcmMgPSBpbWFnZS5zcmM7XG4gICAgcmV0dXJuIGltYWdlU3JjO1xuICB9XG5cblx0cmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLWxpZ2h0Ym94XCIgb25DbGljaz17ICgpID0+IHsgdGhpcy5oaWRlTGlnaHRib3goKTsgfSB9IHJlZj17ZWwgPT4gKHNlbGYuaW5zdGFuY2UgPSBlbCl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jbG9zZS1idXR0b25cIiBvbkNsaWNrPXsgKGUpID0+IHNlbGYuaGlkZUxpZ2h0Ym94KGUpIH0gPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1saWdodGJveC1tYWluLWNvbnRhaW5lclwiIHJlZj17ZWwgPT4gKHNlbGYubWFpbkNvbnRhaW5lciA9IGVsKX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaW1hZ2UtY29udGFpbmVyXCIgcmVmPXtlbCA9PiAoc2VsZi5tYWluSW1hZ2VDb250YWluZXIgPSBlbCl9PlxuICAgICAgICAgICAgPGltZyBzcmM9eyBzZWxmLnN0YXRlLmltYWdlc1tzZWxmLnN0YXRlLnN0YXJ0SW5kZXhdICYmIHNlbGYuZ2V0SW1hZ2VTcmMoc2VsZi5zdGF0ZS5pbWFnZXNbc2VsZi5zdGF0ZS5zdGFydEluZGV4XSkgfSByZWY9e2VsID0+IChzZWxmLm1haW5JbWFnZSA9IGVsKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbGlnaHRib3gtbmF2aWdhdGlvbi1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbGlnaHRib3gtbmF2aWdhdGlvblwiIHJlZj17ZWwgPT4gKHNlbGYubmF2aWdhdGlvbkNvbnRhaW5lciA9IGVsKX0+XG4gICAgICAgICAgeyBzZWxmLnN0YXRlLmltYWdlcy5tYXAoICggaW1hZ2UsIGkgKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbWFnZS1jb250YWluZXJcIiBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtzZWxmLmdldEltYWdlU3JjKGltYWdlKX0pYH19IG9uQ2xpY2s9eyAoZSkgPT4gc2VsZi5zaG93SW1hZ2UoZSwgc2VsZi5nZXRJbWFnZVNyYyhpbWFnZSkpIH0ga2V5PXtgbGlnaGJveC1pbWFnZS1jb250YWluZXItJHtpfWB9IHJlZj17IGVsID0+IHNlbGZbYGxpZ2hib3gtaW1hZ2UtY29udGFpbmVyLSR7aX1gXSA9IGVsfT5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17IHNlbGYuZ2V0SW1hZ2VTcmMoaW1hZ2UpIH0gcmVmPXsgZWwgPT4gc2VsZltgbGlnaGJveC1pbWFnZS0ke2l9YF0gPSBlbH0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICB9KVxuICAgICAgICAgIH1cblx0XHRcdCAgPC9kaXY+XG5cdFx0XHQgIDwvZGl2PlxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2sgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7fSk7XG5cbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBwcmV2aW91c0J1dHRvbkhUTUw7XG4gICAgbGV0IHByZXZpb3VzQWN0aW9uID0gdGhpcy5wcm9wcy5wcmV2aW91c0FjdGlvbiB8fCB0aGlzLmNvbmZpZy5wcmV2aW91c0FjdGlvbjtcbiAgICBsZXQgcHJldmlvdXNVcmwgPSB0aGlzLnByb3BzLnByZXZpb3VzVXJsIHx8IHRoaXMuY29uZmlnLnByZXZpb3VzVXJsO1xuICAgIGxldCBwcmV2aW91c0lzRGlzYWJsZWQgPSB0aGlzLnByb3BzLnByZXZpb3VzSXNEaXNhYmxlZCB8fCB0aGlzLmNvbmZpZy5wcmV2aW91c0lzRGlzYWJsZWQ7XG4gICAgbGV0IHByZXZpb3VzTGFiZWwgPSB0aGlzLnByb3BzLnByZXZpb3VzTGFiZWwgfHwgdGhpcy5jb25maWcucHJldmlvdXNMYWJlbDtcbiAgICBcbiAgICBpZiAocHJldmlvdXNVcmwpIHByZXZpb3VzQWN0aW9uID0gKCkgPT4geyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gYCR7cHJldmlvdXNVcmx9YCB9O1xuICAgIGlmICggcHJldmlvdXNBY3Rpb24gKSB7XG4gICAgICBwcmV2aW91c0J1dHRvbkhUTUwgPSA8ZGl2IGNsYXNzTmFtZT17YG9zYy1wcmV2aW91cy1idXR0b24ke3ByZXZpb3VzSXNEaXNhYmxlZCA/ICcgb3NjLWRpc2FibGVkJyA6ICcnfWB9IG9uQ2xpY2s9eyhhcmdzKSA9PiBwcmV2aW91c0FjdGlvbihhcmdzKSB9PntwcmV2aW91c0xhYmVsfTwvZGl2PlxuICAgIH1cblxuICAgIGxldCBuZXh0QnV0dG9uSFRNTDtcbiAgICBsZXQgbmV4dEFjdGlvbiA9IHRoaXMucHJvcHMubmV4dEFjdGlvbiB8fCB0aGlzLmNvbmZpZy5uZXh0QWN0aW9uO1xuICAgIGxldCBuZXh0VXJsID0gdGhpcy5wcm9wcy5uZXh0VXJsIHx8IHRoaXMuY29uZmlnLm5leHRVcmw7XG4gICAgbGV0IG5leHRJc0Rpc2FibGVkID0gdGhpcy5wcm9wcy5uZXh0SXNEaXNhYmxlZCB8fCB0aGlzLmNvbmZpZy5uZXh0SXNEaXNhYmxlZDtcbiAgICBsZXQgbmV4dExhYmVsID0gdGhpcy5wcm9wcy5uZXh0TGFiZWwgfHwgdGhpcy5jb25maWcubmV4dExhYmVsO1xuXG4gICAgaWYgKG5leHRVcmwpIG5leHRBY3Rpb24gPSAoKSA9PiB7IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBgJHtuZXh0VXJsfWAgfTtcbiAgICBpZiAoIG5leHRBY3Rpb24gKSB7XG4gICAgICBuZXh0QnV0dG9uSFRNTCA9IDxkaXYgY2xhc3NOYW1lPXtgb3NjLW5leHQtYnV0dG9uJHtuZXh0SXNEaXNhYmxlZCA/ICcgb3NjLWRpc2FibGVkJyA6ICcnfWB9IG9uQ2xpY2s9eyhhcmdzKSA9PiBuZXh0QWN0aW9uKGFyZ3MpIH0+e25leHRMYWJlbH08L2Rpdj5cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtcHJldmlvdXMtbmV4dC1idXR0b24tYmxvY2tcIiByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfT5cblx0XHRcdFx0e3ByZXZpb3VzQnV0dG9uSFRNTH1cblx0XHRcdFx0e25leHRCdXR0b25IVE1MfVxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIi8vIHBvbHlmaWxsc1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRQcmV2aW91c05leHRCdXR0b25CbG9jayBmcm9tICcuL2NvbXBvbmVudC9wcmV2aW91cy1uZXh0LWJ1dHRvbi1ibG9jay5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2sucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2sgYXR0cmlidXRlcz17YXR0cmlidXRlc30gY29uZmlnPXtjb25maWd9Lz4sIGVsZW0pXG59XG5cbmV4cG9ydCB7XG4gIE9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2sgYXMgZGVmYXVsdCxcbiAgT3BlblN0YWRDb21wb25lbnRQcmV2aW91c05leHRCdXR0b25CbG9jayBhcyBQcmV2aW91c05leHRCdXR0b25CbG9jayxcbn07XG5cbiIsIi8qIVxuICogRmlsZVBvbmQgNC4yMC4xXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQsIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUL1xuICogUGxlYXNlIHZpc2l0IGh0dHBzOi8vcHFpbmEubmwvZmlsZXBvbmQvIGZvciBkZXRhaWxzLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgPyBmYWN0b3J5KGV4cG9ydHMpXG4gICAgOiB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWRcbiAgICA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSlcbiAgICA6ICgoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYpLCBmYWN0b3J5KChnbG9iYWwuRmlsZVBvbmQgPSB7fSkpKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBpc05vZGUgPSBmdW5jdGlvbiBpc05vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfTtcblxuICB2YXIgY3JlYXRlU3RvcmUgPSBmdW5jdGlvbiBjcmVhdGVTdG9yZShpbml0aWFsU3RhdGUpIHtcbiAgICB2YXIgcXVlcmllcyA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgIHZhciBhY3Rpb25zID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG4gICAgLy8gaW50ZXJuYWwgc3RhdGVcbiAgICB2YXIgc3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpO1xuXG4gICAgLy8gY29udGFpbnMgYWxsIGFjdGlvbnMgZm9yIG5leHQgZnJhbWUsIGlzIGNsZWFyIHdoZW4gYWN0aW9ucyBhcmUgcmVxdWVzdGVkXG4gICAgdmFyIGFjdGlvblF1ZXVlID0gW107XG4gICAgdmFyIGRpc3BhdGNoUXVldWUgPSBbXTtcblxuICAgIC8vIHJldHVybnMgYSBkdXBsaWNhdGUgb2YgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICB2YXIgZ2V0U3RhdGUgPSBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIHJldHVybnMgYSBkdXBsaWNhdGUgb2YgdGhlIGFjdGlvbnMgYXJyYXkgYW5kIGNsZWFycyB0aGUgYWN0aW9ucyBhcnJheVxuICAgIHZhciBwcm9jZXNzQWN0aW9uUXVldWUgPSBmdW5jdGlvbiBwcm9jZXNzQWN0aW9uUXVldWUoKSB7XG4gICAgICAvLyBjcmVhdGUgY29weSBvZiBhY3Rpb25zIHF1ZXVlXG4gICAgICB2YXIgcXVldWUgPSBbXS5jb25jYXQoYWN0aW9uUXVldWUpO1xuXG4gICAgICAvLyBjbGVhciBhY3Rpb25zIHF1ZXVlICh3ZSBkb24ndCB3YW50IG5vIGRvdWJsZSBhY3Rpb25zKVxuICAgICAgYWN0aW9uUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH07XG5cbiAgICAvLyBwcm9jZXNzZXMgYWN0aW9ucyB0aGF0IG1pZ2h0IGJsb2NrIHRoZSBtYWluIFVJIHRocmVhZFxuICAgIHZhciBwcm9jZXNzRGlzcGF0Y2hRdWV1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NEaXNwYXRjaFF1ZXVlKCkge1xuICAgICAgLy8gY3JlYXRlIGNvcHkgb2YgYWN0aW9ucyBxdWV1ZVxuICAgICAgdmFyIHF1ZXVlID0gW10uY29uY2F0KGRpc3BhdGNoUXVldWUpO1xuXG4gICAgICAvLyBjbGVhciBhY3Rpb25zIHF1ZXVlICh3ZSBkb24ndCB3YW50IG5vIGRvdWJsZSBhY3Rpb25zKVxuICAgICAgZGlzcGF0Y2hRdWV1ZS5sZW5ndGggPSAwO1xuXG4gICAgICAvLyBub3cgZGlzcGF0Y2ggdGhlc2UgYWN0aW9uc1xuICAgICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbihfcmVmKSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICAgIGRhdGEgPSBfcmVmLmRhdGE7XG4gICAgICAgIGRpc3BhdGNoKHR5cGUsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGFkZHMgYSBuZXcgYWN0aW9uLCBjYWxscyBpdHMgaGFuZGxlciBhbmRcbiAgICB2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCh0eXBlLCBkYXRhLCBpc0Jsb2NraW5nKSB7XG4gICAgICAvLyBpcyBibG9ja2luZyBhY3Rpb24gKHNob3VsZCBuZXZlciBibG9jayBpZiBkb2N1bWVudCBpcyBoaWRkZW4pXG4gICAgICBpZiAoaXNCbG9ja2luZyAmJiAhZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhpcyBhY3Rpb24gaGFzIGEgaGFuZGxlciwgaGFuZGxlIHRoZSBhY3Rpb25cbiAgICAgIGlmIChhY3Rpb25IYW5kbGVyc1t0eXBlXSkge1xuICAgICAgICBhY3Rpb25IYW5kbGVyc1t0eXBlXShkYXRhKTtcbiAgICAgIH1cblxuICAgICAgLy8gbm93IGFkZCBhY3Rpb25cbiAgICAgIGFjdGlvblF1ZXVlLnB1c2goe1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHF1ZXJ5ID0gZnVuY3Rpb24gcXVlcnkoc3RyKSB7XG4gICAgICB2YXIgX3F1ZXJ5SGFuZGxlcztcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSxcbiAgICAgICAgICBfa2V5ID0gMTtcbiAgICAgICAgX2tleSA8IF9sZW47XG4gICAgICAgIF9rZXkrK1xuICAgICAgKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXJ5SGFuZGxlc1tzdHJdXG4gICAgICAgID8gKF9xdWVyeUhhbmRsZXMgPSBxdWVyeUhhbmRsZXMpW3N0cl0uYXBwbHkoX3F1ZXJ5SGFuZGxlcywgYXJncylcbiAgICAgICAgOiBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgYXBpID0ge1xuICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgcHJvY2Vzc0FjdGlvblF1ZXVlOiBwcm9jZXNzQWN0aW9uUXVldWUsXG4gICAgICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZTogcHJvY2Vzc0Rpc3BhdGNoUXVldWUsXG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9O1xuXG4gICAgdmFyIHF1ZXJ5SGFuZGxlcyA9IHt9O1xuICAgIHF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbihxdWVyeSkge1xuICAgICAgcXVlcnlIYW5kbGVzID0gT2JqZWN0LmFzc2lnbih7fSwgcXVlcnkoc3RhdGUpLCB7fSwgcXVlcnlIYW5kbGVzKTtcbiAgICB9KTtcblxuICAgIHZhciBhY3Rpb25IYW5kbGVycyA9IHt9O1xuICAgIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgIGFjdGlvbkhhbmRsZXJzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIGFjdGlvbihkaXNwYXRjaCwgcXVlcnksIHN0YXRlKSxcbiAgICAgICAge30sXG4gICAgICAgIGFjdGlvbkhhbmRsZXJzXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcblxuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCBkZWZpbml0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvYmpbcHJvcGVydHldID0gZGVmaW5pdGlvbjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcGVydHksIE9iamVjdC5hc3NpZ24oe30sIGRlZmluaXRpb24pKTtcbiAgfTtcblxuICB2YXIgZm9yaW4gPSBmdW5jdGlvbiBmb3JpbihvYmosIGNiKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY2Ioa2V5LCBvYmpba2V5XSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVPYmplY3QgPSBmdW5jdGlvbiBjcmVhdGVPYmplY3QoZGVmaW5pdGlvbikge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBmb3JpbihkZWZpbml0aW9uLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wZXJ0eSwgZGVmaW5pdGlvbltwcm9wZXJ0eV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgdmFyIGF0dHIgPSBmdW5jdGlvbiBhdHRyKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpIHx8IG5vZGUuaGFzQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG5cbiAgdmFyIG5zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgdmFyIHN2Z0VsZW1lbnRzID0gWydzdmcnLCAncGF0aCddOyAvLyBvbmx5IHN2ZyBlbGVtZW50cyB1c2VkXG5cbiAgdmFyIGlzU1ZHRWxlbWVudCA9IGZ1bmN0aW9uIGlzU1ZHRWxlbWVudCh0YWcpIHtcbiAgICByZXR1cm4gc3ZnRWxlbWVudHMuaW5jbHVkZXModGFnKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc05hbWUpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgYXR0cmlidXRlcyA9IGNsYXNzTmFtZTtcbiAgICAgIGNsYXNzTmFtZSA9IG51bGw7XG4gICAgfVxuICAgIHZhciBlbGVtZW50ID0gaXNTVkdFbGVtZW50KHRhZylcbiAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zLCB0YWcpXG4gICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoaXNTVkdFbGVtZW50KHRhZykpIHtcbiAgICAgICAgYXR0cihlbGVtZW50LCAnY2xhc3MnLCBjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICB9XG4gICAgfVxuICAgIGZvcmluKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBhdHRyKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcblxuICB2YXIgYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiBhcHBlbmRDaGlsZChwYXJlbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2hpbGQsIGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBwYXJlbnQuY2hpbGRyZW5baW5kZXhdKSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHBhcmVudC5jaGlsZHJlbltpbmRleF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBhcHBlbmRDaGlsZFZpZXcgPSBmdW5jdGlvbiBhcHBlbmRDaGlsZFZpZXcocGFyZW50LCBjaGlsZFZpZXdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZpZXcsIGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjaGlsZFZpZXdzLnNwbGljZShpbmRleCwgMCwgdmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZFZpZXdzLnB1c2godmlldyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2aWV3O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHJlbW92ZUNoaWxkVmlldyA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkVmlldyhwYXJlbnQsIGNoaWxkVmlld3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmlldykge1xuICAgICAgLy8gcmVtb3ZlIGZyb20gY2hpbGQgdmlld3NcbiAgICAgIGNoaWxkVmlld3Muc3BsaWNlKGNoaWxkVmlld3MuaW5kZXhPZih2aWV3KSwgMSk7XG5cbiAgICAgIC8vIHJlbW92ZSB0aGUgZWxlbWVudFxuICAgICAgaWYgKHZpZXcuZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZCh2aWV3LmVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmlldztcbiAgICB9O1xuICB9O1xuXG4gIHZhciBJU19CUk9XU0VSID0gKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICAgICk7XG4gIH0pKCk7XG4gIHZhciBpc0Jyb3dzZXIgPSBmdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuIElTX0JST1dTRVI7XG4gIH07XG5cbiAgdmFyIHRlc3RFbGVtZW50ID0gaXNCcm93c2VyKCkgPyBjcmVhdGVFbGVtZW50KCdzdmcnKSA6IHt9O1xuICB2YXIgZ2V0Q2hpbGRDb3VudCA9XG4gICAgJ2NoaWxkcmVuJyBpbiB0ZXN0RWxlbWVudFxuICAgICAgPyBmdW5jdGlvbihlbCkge1xuICAgICAgICAgIHJldHVybiBlbC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgIH07XG5cbiAgdmFyIGdldFZpZXdSZWN0ID0gZnVuY3Rpb24gZ2V0Vmlld1JlY3QoXG4gICAgZWxlbWVudFJlY3QsXG4gICAgY2hpbGRWaWV3cyxcbiAgICBvZmZzZXQsXG4gICAgc2NhbGVcbiAgKSB7XG4gICAgdmFyIGxlZnQgPSBvZmZzZXRbMF0gfHwgZWxlbWVudFJlY3QubGVmdDtcbiAgICB2YXIgdG9wID0gb2Zmc2V0WzFdIHx8IGVsZW1lbnRSZWN0LnRvcDtcbiAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgZWxlbWVudFJlY3Qud2lkdGg7XG4gICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsZW1lbnRSZWN0LmhlaWdodCAqIChzY2FsZVsxXSB8fCAxKTtcblxuICAgIHZhciByZWN0ID0ge1xuICAgICAgLy8gdGhlIHJlY3RhbmdsZSBvZiB0aGUgZWxlbWVudCBpdHNlbGZcbiAgICAgIGVsZW1lbnQ6IE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnRSZWN0KSxcblxuICAgICAgLy8gdGhlIHJlY3RhbmdsZSBvZiB0aGUgZWxlbWVudCBleHBhbmRlZCB0byBjb250YWluIGl0cyBjaGlsZHJlbiwgZG9lcyBub3QgaW5jbHVkZSBhbnkgbWFyZ2luc1xuICAgICAgaW5uZXI6IHtcbiAgICAgICAgbGVmdDogZWxlbWVudFJlY3QubGVmdCxcbiAgICAgICAgdG9wOiBlbGVtZW50UmVjdC50b3AsXG4gICAgICAgIHJpZ2h0OiBlbGVtZW50UmVjdC5yaWdodCxcbiAgICAgICAgYm90dG9tOiBlbGVtZW50UmVjdC5ib3R0b21cbiAgICAgIH0sXG5cbiAgICAgIC8vIHRoZSByZWN0YW5nbGUgb2YgdGhlIGVsZW1lbnQgZXhwYW5kZWQgdG8gY29udGFpbiBpdHMgY2hpbGRyZW4gaW5jbHVkaW5nIG93biBtYXJnaW4gYW5kIGNoaWxkIG1hcmdpbnNcbiAgICAgIC8vIG1hcmdpbnMgd2lsbCBiZSBhZGRlZCBhZnRlciB3ZSd2ZSByZWNhbGN1bGF0ZWQgdGhlIHNpemVcbiAgICAgIG91dGVyOiB7XG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgIGJvdHRvbTogYm90dG9tXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGV4cGFuZCByZWN0IHRvIGZpdCBhbGwgY2hpbGQgcmVjdGFuZ2xlc1xuICAgIGNoaWxkVmlld3NcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oY2hpbGRWaWV3KSB7XG4gICAgICAgIHJldHVybiAhY2hpbGRWaWV3LmlzUmVjdElnbm9yZWQoKTtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uKGNoaWxkVmlldykge1xuICAgICAgICByZXR1cm4gY2hpbGRWaWV3LnJlY3Q7XG4gICAgICB9KVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oY2hpbGRWaWV3UmVjdCkge1xuICAgICAgICBleHBhbmRSZWN0KHJlY3QuaW5uZXIsIE9iamVjdC5hc3NpZ24oe30sIGNoaWxkVmlld1JlY3QuaW5uZXIpKTtcbiAgICAgICAgZXhwYW5kUmVjdChyZWN0Lm91dGVyLCBPYmplY3QuYXNzaWduKHt9LCBjaGlsZFZpZXdSZWN0Lm91dGVyKSk7XG4gICAgICB9KTtcblxuICAgIC8vIGNhbGN1bGF0ZSBpbm5lciB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgY2FsY3VsYXRlUmVjdFNpemUocmVjdC5pbm5lcik7XG5cbiAgICAvLyBhcHBlbmQgYWRkaXRpb25hbCBtYXJnaW4gKHRvcCBhbmQgbGVmdCBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpbiB0b3AgYW5kIGxlZnQgYXV0b21hdGljYWxseSlcbiAgICByZWN0Lm91dGVyLmJvdHRvbSArPSByZWN0LmVsZW1lbnQubWFyZ2luQm90dG9tO1xuICAgIHJlY3Qub3V0ZXIucmlnaHQgKz0gcmVjdC5lbGVtZW50Lm1hcmdpblJpZ2h0O1xuXG4gICAgLy8gY2FsY3VsYXRlIG91dGVyIHdpZHRoIGFuZCBoZWlnaHRcbiAgICBjYWxjdWxhdGVSZWN0U2l6ZShyZWN0Lm91dGVyKTtcblxuICAgIHJldHVybiByZWN0O1xuICB9O1xuXG4gIHZhciBleHBhbmRSZWN0ID0gZnVuY3Rpb24gZXhwYW5kUmVjdChwYXJlbnQsIGNoaWxkKSB7XG4gICAgLy8gYWRqdXN0IGZvciBwYXJlbnQgb2Zmc2V0XG4gICAgY2hpbGQudG9wICs9IHBhcmVudC50b3A7XG4gICAgY2hpbGQucmlnaHQgKz0gcGFyZW50LmxlZnQ7XG4gICAgY2hpbGQuYm90dG9tICs9IHBhcmVudC50b3A7XG4gICAgY2hpbGQubGVmdCArPSBwYXJlbnQubGVmdDtcblxuICAgIGlmIChjaGlsZC5ib3R0b20gPiBwYXJlbnQuYm90dG9tKSB7XG4gICAgICBwYXJlbnQuYm90dG9tID0gY2hpbGQuYm90dG9tO1xuICAgIH1cblxuICAgIGlmIChjaGlsZC5yaWdodCA+IHBhcmVudC5yaWdodCkge1xuICAgICAgcGFyZW50LnJpZ2h0ID0gY2hpbGQucmlnaHQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYWxjdWxhdGVSZWN0U2l6ZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVJlY3RTaXplKHJlY3QpIHtcbiAgICByZWN0LndpZHRoID0gcmVjdC5yaWdodCAtIHJlY3QubGVmdDtcbiAgICByZWN0LmhlaWdodCA9IHJlY3QuYm90dG9tIC0gcmVjdC50b3A7XG4gIH07XG5cbiAgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBwb3NpdGlvbiBpcyBhdCBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0gcG9zaXRpb25cbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uXG4gICAqIEBwYXJhbSB2ZWxvY2l0eVxuICAgKiBAcGFyYW0gZXJyb3JNYXJnaW5cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB2YXIgdGhlcmVZZXQgPSBmdW5jdGlvbiB0aGVyZVlldChwb3NpdGlvbiwgZGVzdGluYXRpb24sIHZlbG9jaXR5KSB7XG4gICAgdmFyIGVycm9yTWFyZ2luID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMC4wMDE7XG4gICAgcmV0dXJuIChcbiAgICAgIE1hdGguYWJzKHBvc2l0aW9uIC0gZGVzdGluYXRpb24pIDwgZXJyb3JNYXJnaW4gJiZcbiAgICAgIE1hdGguYWJzKHZlbG9jaXR5KSA8IGVycm9yTWFyZ2luXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogU3ByaW5nIGFuaW1hdGlvblxuICAgKi9cbiAgdmFyIHNwcmluZyA9XG4gICAgLy8gZGVmYXVsdCBvcHRpb25zXG4gICAgZnVuY3Rpb24gc3ByaW5nKCkgLy8gbWV0aG9kIGRlZmluaXRpb25cbiAgICB7XG4gICAgICB2YXIgX3JlZiA9XG4gICAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICA6IHt9LFxuICAgICAgICBfcmVmJHN0aWZmbmVzcyA9IF9yZWYuc3RpZmZuZXNzLFxuICAgICAgICBzdGlmZm5lc3MgPSBfcmVmJHN0aWZmbmVzcyA9PT0gdm9pZCAwID8gMC41IDogX3JlZiRzdGlmZm5lc3MsXG4gICAgICAgIF9yZWYkZGFtcGluZyA9IF9yZWYuZGFtcGluZyxcbiAgICAgICAgZGFtcGluZyA9IF9yZWYkZGFtcGluZyA9PT0gdm9pZCAwID8gMC43NSA6IF9yZWYkZGFtcGluZyxcbiAgICAgICAgX3JlZiRtYXNzID0gX3JlZi5tYXNzLFxuICAgICAgICBtYXNzID0gX3JlZiRtYXNzID09PSB2b2lkIDAgPyAxMCA6IF9yZWYkbWFzcztcbiAgICAgIHZhciB0YXJnZXQgPSBudWxsO1xuICAgICAgdmFyIHBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHZhciB2ZWxvY2l0eSA9IDA7XG4gICAgICB2YXIgcmVzdGluZyA9IGZhbHNlO1xuXG4gICAgICAvLyB1cGRhdGVzIHNwcmluZyBzdGF0ZVxuICAgICAgdmFyIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUodHMsIHNraXBUb0VuZFN0YXRlKSB7XG4gICAgICAgIC8vIGluIHJlc3QsIGRvbid0IGFuaW1hdGVcbiAgICAgICAgaWYgKHJlc3RpbmcpIHJldHVybjtcblxuICAgICAgICAvLyBuZWVkIGF0IGxlYXN0IGEgdGFyZ2V0IG9yIHBvc2l0aW9uIHRvIGRvIHNwcmluZ3kgdGhpbmdzXG4gICAgICAgIGlmICghKGlzTnVtYmVyKHRhcmdldCkgJiYgaXNOdW1iZXIocG9zaXRpb24pKSkge1xuICAgICAgICAgIHJlc3RpbmcgPSB0cnVlO1xuICAgICAgICAgIHZlbG9jaXR5ID0gMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxjdWxhdGUgc3ByaW5nIGZvcmNlXG4gICAgICAgIHZhciBmID0gLShwb3NpdGlvbiAtIHRhcmdldCkgKiBzdGlmZm5lc3M7XG5cbiAgICAgICAgLy8gdXBkYXRlIHZlbG9jaXR5IGJ5IGFkZGluZyBmb3JjZSBiYXNlZCBvbiBtYXNzXG4gICAgICAgIHZlbG9jaXR5ICs9IGYgLyBtYXNzO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmVsb2NpdHlcbiAgICAgICAgcG9zaXRpb24gKz0gdmVsb2NpdHk7XG5cbiAgICAgICAgLy8gc2xvdyBkb3duIGJhc2VkIG9uIGFtb3VudCBvZiBkYW1waW5nXG4gICAgICAgIHZlbG9jaXR5ICo9IGRhbXBpbmc7XG5cbiAgICAgICAgLy8gd2UndmUgYXJyaXZlZCBpZiB3ZSdyZSBuZWFyIHRhcmdldCBhbmQgb3VyIHZlbG9jaXR5IGlzIG5lYXIgemVyb1xuICAgICAgICBpZiAodGhlcmVZZXQocG9zaXRpb24sIHRhcmdldCwgdmVsb2NpdHkpIHx8IHNraXBUb0VuZFN0YXRlKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSB0YXJnZXQ7XG4gICAgICAgICAgdmVsb2NpdHkgPSAwO1xuICAgICAgICAgIHJlc3RpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gd2UgZG9uZVxuICAgICAgICAgIGFwaS5vbnVwZGF0ZShwb3NpdGlvbik7XG4gICAgICAgICAgYXBpLm9uY29tcGxldGUocG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHByb2dyZXNzIHVwZGF0ZVxuICAgICAgICAgIGFwaS5vbnVwZGF0ZShwb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IG5ldyB0YXJnZXQgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAgICovXG4gICAgICB2YXIgc2V0VGFyZ2V0ID0gZnVuY3Rpb24gc2V0VGFyZ2V0KHZhbHVlKSB7XG4gICAgICAgIC8vIGlmIGN1cnJlbnRseSBoYXMgbm8gcG9zaXRpb24sIHNldCB0YXJnZXQgYW5kIHBvc2l0aW9uIHRvIHRoaXMgdmFsdWVcbiAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlKSAmJiAhaXNOdW1iZXIocG9zaXRpb24pKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5leHQgdGFyZ2V0IHZhbHVlIHdpbGwgbm90IGJlIGFuaW1hdGVkIHRvXG4gICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgICBwb3NpdGlvbiA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGV0IHN0YXJ0IG1vdmluZyB0byB0YXJnZXRcbiAgICAgICAgdGFyZ2V0ID0gdmFsdWU7XG5cbiAgICAgICAgLy8gYWxyZWFkeSBhdCB0YXJnZXRcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSB0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBub3cgcmVzdGluZyBhcyB0YXJnZXQgaXMgY3VycmVudCBwb3NpdGlvbiwgc3RvcCBtb3ZpbmdcbiAgICAgICAgICByZXN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB2ZWxvY2l0eSA9IDA7XG5cbiAgICAgICAgICAvLyBkb25lIVxuICAgICAgICAgIGFwaS5vbnVwZGF0ZShwb3NpdGlvbik7XG4gICAgICAgICAgYXBpLm9uY29tcGxldGUocG9zaXRpb24pO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdGluZyA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgLy8gbmVlZCAnYXBpJyB0byBjYWxsIG9udXBkYXRlIGNhbGxiYWNrXG4gICAgICB2YXIgYXBpID0gY3JlYXRlT2JqZWN0KHtcbiAgICAgICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICBzZXQ6IHNldFRhcmdldCxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlc3Rpbmc6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN0aW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvbnVwZGF0ZTogZnVuY3Rpb24gb251cGRhdGUodmFsdWUpIHt9LFxuICAgICAgICBvbmNvbXBsZXRlOiBmdW5jdGlvbiBvbmNvbXBsZXRlKHZhbHVlKSB7fVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBhcGk7XG4gICAgfTtcblxuICB2YXIgZWFzZUxpbmVhciA9IGZ1bmN0aW9uIGVhc2VMaW5lYXIodCkge1xuICAgIHJldHVybiB0O1xuICB9O1xuICB2YXIgZWFzZUluT3V0UXVhZCA9IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQodCkge1xuICAgIHJldHVybiB0IDwgMC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQ7XG4gIH07XG5cbiAgdmFyIHR3ZWVuID1cbiAgICAvLyBkZWZhdWx0IHZhbHVlc1xuICAgIGZ1bmN0aW9uIHR3ZWVuKCkgLy8gbWV0aG9kIGRlZmluaXRpb25cbiAgICB7XG4gICAgICB2YXIgX3JlZiA9XG4gICAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYXJndW1lbnRzWzBdXG4gICAgICAgICAgICA6IHt9LFxuICAgICAgICBfcmVmJGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb24gPSBfcmVmJGR1cmF0aW9uID09PSB2b2lkIDAgPyA1MDAgOiBfcmVmJGR1cmF0aW9uLFxuICAgICAgICBfcmVmJGVhc2luZyA9IF9yZWYuZWFzaW5nLFxuICAgICAgICBlYXNpbmcgPSBfcmVmJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzZUluT3V0UXVhZCA6IF9yZWYkZWFzaW5nLFxuICAgICAgICBfcmVmJGRlbGF5ID0gX3JlZi5kZWxheSxcbiAgICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX3JlZiRkZWxheTtcbiAgICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgICB2YXIgdDtcbiAgICAgIHZhciBwO1xuICAgICAgdmFyIHJlc3RpbmcgPSB0cnVlO1xuICAgICAgdmFyIHJldmVyc2UgPSBmYWxzZTtcbiAgICAgIHZhciB0YXJnZXQgPSBudWxsO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh0cywgc2tpcFRvRW5kU3RhdGUpIHtcbiAgICAgICAgaWYgKHJlc3RpbmcgfHwgdGFyZ2V0ID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnQgPSB0cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cyAtIHN0YXJ0IDwgZGVsYXkpIHJldHVybjtcblxuICAgICAgICB0ID0gdHMgLSBzdGFydCAtIGRlbGF5O1xuXG4gICAgICAgIGlmICh0ID49IGR1cmF0aW9uIHx8IHNraXBUb0VuZFN0YXRlKSB7XG4gICAgICAgICAgdCA9IDE7XG4gICAgICAgICAgcCA9IHJldmVyc2UgPyAwIDogMTtcbiAgICAgICAgICBhcGkub251cGRhdGUocCAqIHRhcmdldCk7XG4gICAgICAgICAgYXBpLm9uY29tcGxldGUocCAqIHRhcmdldCk7XG4gICAgICAgICAgcmVzdGluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcCA9IHQgLyBkdXJhdGlvbjtcbiAgICAgICAgICBhcGkub251cGRhdGUoKHQgPj0gMCA/IGVhc2luZyhyZXZlcnNlID8gMSAtIHAgOiBwKSA6IDApICogdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gbmVlZCAnYXBpJyB0byBjYWxsIG9udXBkYXRlIGNhbGxiYWNrXG4gICAgICB2YXIgYXBpID0gY3JlYXRlT2JqZWN0KHtcbiAgICAgICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXZlcnNlID8gMCA6IHRhcmdldDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBpcyBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRhcmdldCA9IHZhbHVlO1xuICAgICAgICAgICAgICBhcGkub251cGRhdGUodmFsdWUpO1xuICAgICAgICAgICAgICBhcGkub25jb21wbGV0ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd2FudCB0byB0d2VlbiB0byBhIHNtYWxsZXIgdmFsdWUgYW5kIGhhdmUgYSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAodmFsdWUgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gMTtcbiAgICAgICAgICAgICAgcmV2ZXJzZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBub3QgdHdlZW5pbmcgdG8gYSBzbWFsbGVyIHZhbHVlXG4gICAgICAgICAgICAgIHJldmVyc2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGFyZ2V0ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxldCdzIGdvIVxuICAgICAgICAgICAgcmVzdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgc3RhcnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZXN0aW5nOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb251cGRhdGU6IGZ1bmN0aW9uIG9udXBkYXRlKHZhbHVlKSB7fSxcbiAgICAgICAgb25jb21wbGV0ZTogZnVuY3Rpb24gb25jb21wbGV0ZSh2YWx1ZSkge31cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYXBpO1xuICAgIH07XG5cbiAgdmFyIGFuaW1hdG9yID0ge1xuICAgIHNwcmluZzogc3ByaW5nLFxuICAgIHR3ZWVuOiB0d2VlblxuICB9O1xuXG4gIC8qXG4gICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ3NwcmluZycsIHN0aWZmbmVzczogLjUsIGRhbXBpbmc6IC43NSwgbWFzczogMTAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgeyB0cmFuc2xhdGlvbjogeyB0eXBlOiAnc3ByaW5nJywgLi4uIH0sIC4uLiB9XG4gICAgICAgICAgICAgICAgICAgICAgIHsgdHJhbnNsYXRpb246IHsgeDogeyB0eXBlOiAnc3ByaW5nJywgLi4uIH0gfSB9XG4gICAgICAgICAgICAgICAgICAgICAgKi9cbiAgdmFyIGNyZWF0ZUFuaW1hdG9yID0gZnVuY3Rpb24gY3JlYXRlQW5pbWF0b3IoZGVmaW5pdGlvbiwgY2F0ZWdvcnksIHByb3BlcnR5KSB7XG4gICAgLy8gZGVmYXVsdCBpcyBzaW5nbGUgZGVmaW5pdGlvblxuICAgIC8vIHdlIGNoZWNrIGlmIHRyYW5zZm9ybSBpcyBzZXQsIGlmIHNvLCB3ZSBjaGVjayBpZiBwcm9wZXJ0eSBpcyBzZXRcbiAgICB2YXIgZGVmID1cbiAgICAgIGRlZmluaXRpb25bY2F0ZWdvcnldICYmIHR5cGVvZiBkZWZpbml0aW9uW2NhdGVnb3J5XVtwcm9wZXJ0eV0gPT09ICdvYmplY3QnXG4gICAgICAgID8gZGVmaW5pdGlvbltjYXRlZ29yeV1bcHJvcGVydHldXG4gICAgICAgIDogZGVmaW5pdGlvbltjYXRlZ29yeV0gfHwgZGVmaW5pdGlvbjtcblxuICAgIHZhciB0eXBlID0gdHlwZW9mIGRlZiA9PT0gJ3N0cmluZycgPyBkZWYgOiBkZWYudHlwZTtcbiAgICB2YXIgcHJvcHMgPSB0eXBlb2YgZGVmID09PSAnb2JqZWN0JyA/IE9iamVjdC5hc3NpZ24oe30sIGRlZikgOiB7fTtcblxuICAgIHJldHVybiBhbmltYXRvclt0eXBlXSA/IGFuaW1hdG9yW3R5cGVdKHByb3BzKSA6IG51bGw7XG4gIH07XG5cbiAgdmFyIGFkZEdldFNldCA9IGZ1bmN0aW9uIGFkZEdldFNldChrZXlzLCBvYmosIHByb3BzKSB7XG4gICAgdmFyIG92ZXJ3cml0ZSA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICAgIG9iaiA9IEFycmF5LmlzQXJyYXkob2JqKSA/IG9iaiA6IFtvYmpdO1xuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uKG8pIHtcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBrZXk7XG4gICAgICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiBnZXR0ZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiBzZXR0ZXIodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gKHByb3BzW2tleV0gPSB2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbmFtZSA9IGtleS5rZXk7XG4gICAgICAgICAgZ2V0dGVyID0ga2V5LmdldHRlciB8fCBnZXR0ZXI7XG4gICAgICAgICAgc2V0dGVyID0ga2V5LnNldHRlciB8fCBzZXR0ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob1tuYW1lXSAmJiAhb3ZlcndyaXRlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb1tuYW1lXSA9IHtcbiAgICAgICAgICBnZXQ6IGdldHRlcixcbiAgICAgICAgICBzZXQ6IHNldHRlclxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gYWRkIHRvIHN0YXRlLFxuICAvLyBhZGQgZ2V0dGVycyBhbmQgc2V0dGVycyB0byBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgYXBpIChpZiBub3Qgc2V0KVxuICAvLyBzZXR1cCBhbmltYXRvcnNcblxuICB2YXIgYW5pbWF0aW9ucyA9IGZ1bmN0aW9uIGFuaW1hdGlvbnMoX3JlZikge1xuICAgIHZhciBtaXhpbkNvbmZpZyA9IF9yZWYubWl4aW5Db25maWcsXG4gICAgICB2aWV3UHJvcHMgPSBfcmVmLnZpZXdQcm9wcyxcbiAgICAgIHZpZXdJbnRlcm5hbEFQSSA9IF9yZWYudmlld0ludGVybmFsQVBJLFxuICAgICAgdmlld0V4dGVybmFsQVBJID0gX3JlZi52aWV3RXh0ZXJuYWxBUEk7XG4gICAgLy8gaW5pdGlhbCBwcm9wZXJ0aWVzXG4gICAgdmFyIGluaXRpYWxQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHZpZXdQcm9wcyk7XG5cbiAgICAvLyBsaXN0IG9mIGFsbCBhY3RpdmUgYW5pbWF0aW9uc1xuICAgIHZhciBhbmltYXRpb25zID0gW107XG5cbiAgICAvLyBzZXR1cCBhbmltYXRvcnNcbiAgICBmb3JpbihtaXhpbkNvbmZpZywgZnVuY3Rpb24ocHJvcGVydHksIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGFuaW1hdG9yID0gY3JlYXRlQW5pbWF0b3IoYW5pbWF0aW9uKTtcbiAgICAgIGlmICghYW5pbWF0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB3aGVuIHRoZSBhbmltYXRvciB1cGRhdGVzLCB1cGRhdGUgdGhlIHZpZXcgc3RhdGUgdmFsdWVcbiAgICAgIGFuaW1hdG9yLm9udXBkYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmlld1Byb3BzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8gc2V0IGFuaW1hdG9yIHRhcmdldFxuICAgICAgYW5pbWF0b3IudGFyZ2V0ID0gaW5pdGlhbFByb3BzW3Byb3BlcnR5XTtcblxuICAgICAgLy8gd2hlbiB2YWx1ZSBpcyBzZXQsIHNldCB0aGUgYW5pbWF0b3IgdGFyZ2V0IHZhbHVlXG4gICAgICB2YXIgcHJvcCA9IHtcbiAgICAgICAga2V5OiBwcm9wZXJ0eSxcbiAgICAgICAgc2V0dGVyOiBmdW5jdGlvbiBzZXR0ZXIodmFsdWUpIHtcbiAgICAgICAgICAvLyBpZiBhbHJlYWR5IGF0IHRhcmdldCwgd2UgZG9uZSFcbiAgICAgICAgICBpZiAoYW5pbWF0b3IudGFyZ2V0ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuaW1hdG9yLnRhcmdldCA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBnZXR0ZXI6IGZ1bmN0aW9uIGdldHRlcigpIHtcbiAgICAgICAgICByZXR1cm4gdmlld1Byb3BzW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gYWRkIGdldHRlcnMgYW5kIHNldHRlcnNcbiAgICAgIGFkZEdldFNldChbcHJvcF0sIFt2aWV3SW50ZXJuYWxBUEksIHZpZXdFeHRlcm5hbEFQSV0sIHZpZXdQcm9wcywgdHJ1ZSk7XG5cbiAgICAgIC8vIGFkZCBpdCB0byB0aGUgbGlzdCBmb3IgZWFzeSB1cGRhdGluZyBmcm9tIHRoZSBfd3JpdGUgbWV0aG9kXG4gICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0b3IpO1xuICAgIH0pO1xuXG4gICAgLy8gZXhwb3NlIGludGVybmFsIHdyaXRlIGFwaVxuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUodHMpIHtcbiAgICAgICAgdmFyIHNraXBUb0VuZFN0YXRlID0gZG9jdW1lbnQuaGlkZGVuO1xuICAgICAgICB2YXIgcmVzdGluZyA9IHRydWU7XG4gICAgICAgIGFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbihhbmltYXRpb24pIHtcbiAgICAgICAgICBpZiAoIWFuaW1hdGlvbi5yZXN0aW5nKSByZXN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgYW5pbWF0aW9uLmludGVycG9sYXRlKHRzLCBza2lwVG9FbmRTdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdGluZztcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge31cbiAgICB9O1xuICB9O1xuXG4gIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uIGFkZEV2ZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbik7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgcmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiByZW1vdmVFdmVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIGZuKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4pO1xuICAgIH07XG4gIH07XG5cbiAgLy8gbWl4aW5cbiAgdmFyIGxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhfcmVmKSB7XG4gICAgdmFyIG1peGluQ29uZmlnID0gX3JlZi5taXhpbkNvbmZpZyxcbiAgICAgIHZpZXdQcm9wcyA9IF9yZWYudmlld1Byb3BzLFxuICAgICAgdmlld0ludGVybmFsQVBJID0gX3JlZi52aWV3SW50ZXJuYWxBUEksXG4gICAgICB2aWV3RXh0ZXJuYWxBUEkgPSBfcmVmLnZpZXdFeHRlcm5hbEFQSSxcbiAgICAgIHZpZXdTdGF0ZSA9IF9yZWYudmlld1N0YXRlLFxuICAgICAgdmlldyA9IF9yZWYudmlldztcbiAgICB2YXIgZXZlbnRzID0gW107XG5cbiAgICB2YXIgYWRkID0gYWRkRXZlbnQodmlldy5lbGVtZW50KTtcbiAgICB2YXIgcmVtb3ZlID0gcmVtb3ZlRXZlbnQodmlldy5lbGVtZW50KTtcblxuICAgIHZpZXdFeHRlcm5hbEFQSS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGZuKSB7XG4gICAgICBldmVudHMucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGZuOiBmblxuICAgICAgfSk7XG5cbiAgICAgIGFkZCh0eXBlLCBmbik7XG4gICAgfTtcblxuICAgIHZpZXdFeHRlcm5hbEFQSS5vZmYgPSBmdW5jdGlvbih0eXBlLCBmbikge1xuICAgICAgZXZlbnRzLnNwbGljZShcbiAgICAgICAgZXZlbnRzLmZpbmRJbmRleChmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIHJldHVybiBldmVudC50eXBlID09PSB0eXBlICYmIGV2ZW50LmZuID09PSBmbjtcbiAgICAgICAgfSksXG4gICAgICAgIDFcbiAgICAgICk7XG5cbiAgICAgIHJlbW92ZSh0eXBlLCBmbik7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7XG4gICAgICAgIC8vIG5vdCBidXN5XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgcmVtb3ZlKGV2ZW50LnR5cGUsIGV2ZW50LmZuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBhZGQgdG8gZXh0ZXJuYWwgYXBpIGFuZCBsaW5rIHRvIHByb3BzXG5cbiAgdmFyIGFwaXMgPSBmdW5jdGlvbiBhcGlzKF9yZWYpIHtcbiAgICB2YXIgbWl4aW5Db25maWcgPSBfcmVmLm1peGluQ29uZmlnLFxuICAgICAgdmlld1Byb3BzID0gX3JlZi52aWV3UHJvcHMsXG4gICAgICB2aWV3RXh0ZXJuYWxBUEkgPSBfcmVmLnZpZXdFeHRlcm5hbEFQSTtcbiAgICBhZGRHZXRTZXQobWl4aW5Db25maWcsIHZpZXdFeHRlcm5hbEFQSSwgdmlld1Byb3BzKTtcbiAgfTtcblxuICB2YXIgaXNEZWZpbmVkID0gZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG4gIH07XG5cbiAgLy8gYWRkIHRvIHN0YXRlLFxuICAvLyBhZGQgZ2V0dGVycyBhbmQgc2V0dGVycyB0byBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgYXBpIChpZiBub3Qgc2V0KVxuICAvLyBzZXQgaW5pdGlhbCBzdGF0ZSBiYXNlZCBvbiBwcm9wcyBpbiB2aWV3UHJvcHNcbiAgLy8gYXBwbHkgYXMgdHJhbnNmb3JtcyBlYWNoIGZyYW1lXG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMSxcbiAgICB0cmFuc2xhdGVYOiAwLFxuICAgIHRyYW5zbGF0ZVk6IDAsXG4gICAgcm90YXRlWDogMCxcbiAgICByb3RhdGVZOiAwLFxuICAgIHJvdGF0ZVo6IDAsXG4gICAgb3JpZ2luWDogMCxcbiAgICBvcmlnaW5ZOiAwXG4gIH07XG5cbiAgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyhfcmVmKSB7XG4gICAgdmFyIG1peGluQ29uZmlnID0gX3JlZi5taXhpbkNvbmZpZyxcbiAgICAgIHZpZXdQcm9wcyA9IF9yZWYudmlld1Byb3BzLFxuICAgICAgdmlld0ludGVybmFsQVBJID0gX3JlZi52aWV3SW50ZXJuYWxBUEksXG4gICAgICB2aWV3RXh0ZXJuYWxBUEkgPSBfcmVmLnZpZXdFeHRlcm5hbEFQSSxcbiAgICAgIHZpZXcgPSBfcmVmLnZpZXc7XG4gICAgLy8gaW5pdGlhbCBwcm9wc1xuICAgIHZhciBpbml0aWFsUHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCB2aWV3UHJvcHMpO1xuXG4gICAgLy8gY3VycmVudCBwcm9wc1xuICAgIHZhciBjdXJyZW50UHJvcHMgPSB7fTtcblxuICAgIC8vIHdlIHdpbGwgYWRkIHRob3NlIHByb3BlcnRpZXMgdG8gdGhlIGV4dGVybmFsIEFQSSBhbmQgbGluayB0aGVtIHRvIHRoZSB2aWV3U3RhdGVcbiAgICBhZGRHZXRTZXQobWl4aW5Db25maWcsIFt2aWV3SW50ZXJuYWxBUEksIHZpZXdFeHRlcm5hbEFQSV0sIHZpZXdQcm9wcyk7XG5cbiAgICAvLyBvdmVycmlkZSByZWN0IG9uIGludGVybmFsIGFuZCBleHRlcm5hbCByZWN0IGdldHRlciBzbyBpdCB0YWtlcyBpbiBhY2NvdW50IHRyYW5zZm9ybXNcbiAgICB2YXIgZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gZ2V0T2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIFt2aWV3UHJvcHNbJ3RyYW5zbGF0ZVgnXSB8fCAwLCB2aWV3UHJvcHNbJ3RyYW5zbGF0ZVknXSB8fCAwXTtcbiAgICB9O1xuXG4gICAgdmFyIGdldFNjYWxlID0gZnVuY3Rpb24gZ2V0U2NhbGUoKSB7XG4gICAgICByZXR1cm4gW3ZpZXdQcm9wc1snc2NhbGVYJ10gfHwgMCwgdmlld1Byb3BzWydzY2FsZVknXSB8fCAwXTtcbiAgICB9O1xuICAgIHZhciBnZXRSZWN0ID0gZnVuY3Rpb24gZ2V0UmVjdCgpIHtcbiAgICAgIHJldHVybiB2aWV3LnJlY3RcbiAgICAgICAgPyBnZXRWaWV3UmVjdCh2aWV3LnJlY3QsIHZpZXcuY2hpbGRWaWV3cywgZ2V0T2Zmc2V0KCksIGdldFNjYWxlKCkpXG4gICAgICAgIDogbnVsbDtcbiAgICB9O1xuICAgIHZpZXdJbnRlcm5hbEFQSS5yZWN0ID0geyBnZXQ6IGdldFJlY3QgfTtcbiAgICB2aWV3RXh0ZXJuYWxBUEkucmVjdCA9IHsgZ2V0OiBnZXRSZWN0IH07XG5cbiAgICAvLyBhcHBseSB2aWV3IHByb3BzXG4gICAgbWl4aW5Db25maWcuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZpZXdQcm9wc1trZXldID1cbiAgICAgICAgdHlwZW9mIGluaXRpYWxQcm9wc1trZXldID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgID8gZGVmYXVsdHNba2V5XVxuICAgICAgICAgIDogaW5pdGlhbFByb3BzW2tleV07XG4gICAgfSk7XG5cbiAgICAvLyBleHBvc2UgYXBpXG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHtcbiAgICAgICAgLy8gc2VlIGlmIHByb3BzIGhhdmUgY2hhbmdlZFxuICAgICAgICBpZiAoIXByb3BzSGF2ZUNoYW5nZWQoY3VycmVudFByb3BzLCB2aWV3UHJvcHMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW92ZXMgZWxlbWVudCB0byBjb3JyZWN0IHBvc2l0aW9uIG9uIHNjcmVlblxuICAgICAgICBhcHBseVN0eWxlcyh2aWV3LmVsZW1lbnQsIHZpZXdQcm9wcyk7XG5cbiAgICAgICAgLy8gc3RvcmUgbmV3IHRyYW5zZm9ybXNcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjdXJyZW50UHJvcHMsIE9iamVjdC5hc3NpZ24oe30sIHZpZXdQcm9wcykpO1xuXG4gICAgICAgIC8vIG5vIGxvbmdlciBidXN5XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7fVxuICAgIH07XG4gIH07XG5cbiAgdmFyIHByb3BzSGF2ZUNoYW5nZWQgPSBmdW5jdGlvbiBwcm9wc0hhdmVDaGFuZ2VkKGN1cnJlbnRQcm9wcywgbmV3UHJvcHMpIHtcbiAgICAvLyBkaWZmZXJlbnQgYW1vdW50IG9mIGtleXNcbiAgICBpZiAoT2JqZWN0LmtleXMoY3VycmVudFByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG5ld1Byb3BzKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGxldHMgYW5hbHl6ZSB0aGUgaW5kaXZpZHVhbCBwcm9wc1xuICAgIGZvciAodmFyIHByb3AgaW4gbmV3UHJvcHMpIHtcbiAgICAgIGlmIChuZXdQcm9wc1twcm9wXSAhPT0gY3VycmVudFByb3BzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB2YXIgYXBwbHlTdHlsZXMgPSBmdW5jdGlvbiBhcHBseVN0eWxlcyhlbGVtZW50LCBfcmVmMikge1xuICAgIHZhciBvcGFjaXR5ID0gX3JlZjIub3BhY2l0eSxcbiAgICAgIHBlcnNwZWN0aXZlID0gX3JlZjIucGVyc3BlY3RpdmUsXG4gICAgICB0cmFuc2xhdGVYID0gX3JlZjIudHJhbnNsYXRlWCxcbiAgICAgIHRyYW5zbGF0ZVkgPSBfcmVmMi50cmFuc2xhdGVZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgcm90YXRlWCA9IF9yZWYyLnJvdGF0ZVgsXG4gICAgICByb3RhdGVZID0gX3JlZjIucm90YXRlWSxcbiAgICAgIHJvdGF0ZVogPSBfcmVmMi5yb3RhdGVaLFxuICAgICAgb3JpZ2luWCA9IF9yZWYyLm9yaWdpblgsXG4gICAgICBvcmlnaW5ZID0gX3JlZjIub3JpZ2luWSxcbiAgICAgIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG5cbiAgICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICAgIHZhciBzdHlsZXMgPSAnJztcblxuICAgIC8vIGhhbmRsZSB0cmFuc2Zvcm0gb3JpZ2luXG4gICAgaWYgKGlzRGVmaW5lZChvcmlnaW5YKSB8fCBpc0RlZmluZWQob3JpZ2luWSkpIHtcbiAgICAgIHN0eWxlcyArPVxuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbjogJyArIChvcmlnaW5YIHx8IDApICsgJ3B4ICcgKyAob3JpZ2luWSB8fCAwKSArICdweDsnO1xuICAgIH1cblxuICAgIC8vIHRyYW5zZm9ybSBvcmRlciBpcyByZWxldmFudFxuICAgIC8vIDAuIHBlcnNwZWN0aXZlXG4gICAgaWYgKGlzRGVmaW5lZChwZXJzcGVjdGl2ZSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gJ3BlcnNwZWN0aXZlKCcgKyBwZXJzcGVjdGl2ZSArICdweCkgJztcbiAgICB9XG5cbiAgICAvLyAxLiB0cmFuc2xhdGVcbiAgICBpZiAoaXNEZWZpbmVkKHRyYW5zbGF0ZVgpIHx8IGlzRGVmaW5lZCh0cmFuc2xhdGVZKSkge1xuICAgICAgdHJhbnNmb3JtcyArPVxuICAgICAgICAndHJhbnNsYXRlM2QoJyArXG4gICAgICAgICh0cmFuc2xhdGVYIHx8IDApICtcbiAgICAgICAgJ3B4LCAnICtcbiAgICAgICAgKHRyYW5zbGF0ZVkgfHwgMCkgK1xuICAgICAgICAncHgsIDApICc7XG4gICAgfVxuXG4gICAgLy8gMi4gc2NhbGVcbiAgICBpZiAoaXNEZWZpbmVkKHNjYWxlWCkgfHwgaXNEZWZpbmVkKHNjYWxlWSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz1cbiAgICAgICAgJ3NjYWxlM2QoJyArXG4gICAgICAgIChpc0RlZmluZWQoc2NhbGVYKSA/IHNjYWxlWCA6IDEpICtcbiAgICAgICAgJywgJyArXG4gICAgICAgIChpc0RlZmluZWQoc2NhbGVZKSA/IHNjYWxlWSA6IDEpICtcbiAgICAgICAgJywgMSkgJztcbiAgICB9XG5cbiAgICAvLyAzLiByb3RhdGVcbiAgICBpZiAoaXNEZWZpbmVkKHJvdGF0ZVopKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9ICdyb3RhdGVaKCcgKyByb3RhdGVaICsgJ3JhZCkgJztcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKHJvdGF0ZVgpKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9ICdyb3RhdGVYKCcgKyByb3RhdGVYICsgJ3JhZCkgJztcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKHJvdGF0ZVkpKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9ICdyb3RhdGVZKCcgKyByb3RhdGVZICsgJ3JhZCkgJztcbiAgICB9XG5cbiAgICAvLyBhZGQgdHJhbnNmb3Jtc1xuICAgIGlmICh0cmFuc2Zvcm1zLmxlbmd0aCkge1xuICAgICAgc3R5bGVzICs9ICd0cmFuc2Zvcm06JyArIHRyYW5zZm9ybXMgKyAnOyc7XG4gICAgfVxuXG4gICAgLy8gYWRkIG9wYWNpdHlcbiAgICBpZiAoaXNEZWZpbmVkKG9wYWNpdHkpKSB7XG4gICAgICBzdHlsZXMgKz0gJ29wYWNpdHk6JyArIG9wYWNpdHkgKyAnOyc7XG5cbiAgICAgIC8vIGlmIHdlIHJlYWNoIHplcm8sIHdlIG1ha2UgdGhlIGVsZW1lbnQgaW5hY2Nlc3NpYmxlXG4gICAgICBpZiAob3BhY2l0eSA9PT0gMCkge1xuICAgICAgICBzdHlsZXMgKz0gJ3Zpc2liaWxpdHk6aGlkZGVuOyc7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlJ3JlIGJlbG93IDEwMCUgb3BhY2l0eSB0aGlzIGVsZW1lbnQgY2FuJ3QgYmUgY2xpY2tlZFxuICAgICAgaWYgKG9wYWNpdHkgPCAxKSB7XG4gICAgICAgIHN0eWxlcyArPSAncG9pbnRlci1ldmVudHM6bm9uZTsnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCBoZWlnaHRcbiAgICBpZiAoaXNEZWZpbmVkKGhlaWdodCkpIHtcbiAgICAgIHN0eWxlcyArPSAnaGVpZ2h0OicgKyBoZWlnaHQgKyAncHg7JztcbiAgICB9XG5cbiAgICAvLyBhZGQgd2lkdGhcbiAgICBpZiAoaXNEZWZpbmVkKHdpZHRoKSkge1xuICAgICAgc3R5bGVzICs9ICd3aWR0aDonICsgd2lkdGggKyAncHg7JztcbiAgICB9XG5cbiAgICAvLyBhcHBseSBzdHlsZXNcbiAgICB2YXIgZWxlbWVudEN1cnJlbnRTdHlsZSA9IGVsZW1lbnQuZWxlbWVudEN1cnJlbnRTdHlsZSB8fCAnJztcblxuICAgIC8vIGlmIG5ldyBzdHlsZXMgZG9lcyBub3QgbWF0Y2ggY3VycmVudCBzdHlsZXMsIGxldHMgdXBkYXRlIVxuICAgIGlmIChcbiAgICAgIHN0eWxlcy5sZW5ndGggIT09IGVsZW1lbnRDdXJyZW50U3R5bGUubGVuZ3RoIHx8XG4gICAgICBzdHlsZXMgIT09IGVsZW1lbnRDdXJyZW50U3R5bGVcbiAgICApIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IHN0eWxlcztcbiAgICAgIC8vIHN0b3JlIGN1cnJlbnQgc3R5bGVzIHNvIHdlIGNhbiBjb21wYXJlIHRoZW0gdG8gbmV3IHN0eWxlcyBsYXRlciBvblxuICAgICAgLy8gX25vdF8gZ2V0dGluZyB0aGUgc3R5bGUgdmFsdWUgaXMgZmFzdGVyXG4gICAgICBlbGVtZW50LmVsZW1lbnRDdXJyZW50U3R5bGUgPSBzdHlsZXM7XG4gICAgfVxuICB9O1xuXG4gIHZhciBNaXhpbnMgPSB7XG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICBhcGlzOiBhcGlzXG4gIH07XG5cbiAgdmFyIHVwZGF0ZVJlY3QgPSBmdW5jdGlvbiB1cGRhdGVSZWN0KCkge1xuICAgIHZhciByZWN0ID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGVsZW1lbnQgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgc3R5bGUgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIGlmICghZWxlbWVudC5sYXlvdXRDYWxjdWxhdGVkKSB7XG4gICAgICByZWN0LnBhZGRpbmdUb3AgPSBwYXJzZUludChzdHlsZS5wYWRkaW5nVG9wLCAxMCkgfHwgMDtcbiAgICAgIHJlY3QubWFyZ2luVG9wID0gcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wLCAxMCkgfHwgMDtcbiAgICAgIHJlY3QubWFyZ2luUmlnaHQgPSBwYXJzZUludChzdHlsZS5tYXJnaW5SaWdodCwgMTApIHx8IDA7XG4gICAgICByZWN0Lm1hcmdpbkJvdHRvbSA9IHBhcnNlSW50KHN0eWxlLm1hcmdpbkJvdHRvbSwgMTApIHx8IDA7XG4gICAgICByZWN0Lm1hcmdpbkxlZnQgPSBwYXJzZUludChzdHlsZS5tYXJnaW5MZWZ0LCAxMCkgfHwgMDtcbiAgICAgIGVsZW1lbnQubGF5b3V0Q2FsY3VsYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmVjdC5sZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0IHx8IDA7XG4gICAgcmVjdC50b3AgPSBlbGVtZW50Lm9mZnNldFRvcCB8fCAwO1xuICAgIHJlY3Qud2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDA7XG4gICAgcmVjdC5oZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAwO1xuXG4gICAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGg7XG4gICAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0O1xuXG4gICAgcmVjdC5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblxuICAgIHJlY3QuaGlkZGVuID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgPT09IG51bGw7XG5cbiAgICByZXR1cm4gcmVjdDtcbiAgfTtcblxuICB2YXIgY3JlYXRlVmlldyA9XG4gICAgLy8gZGVmYXVsdCB2aWV3IGRlZmluaXRpb25cbiAgICBmdW5jdGlvbiBjcmVhdGVWaWV3KCkge1xuICAgICAgdmFyIF9yZWYgPVxuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgX3JlZiR0YWcgPSBfcmVmLnRhZyxcbiAgICAgICAgdGFnID0gX3JlZiR0YWcgPT09IHZvaWQgMCA/ICdkaXYnIDogX3JlZiR0YWcsXG4gICAgICAgIF9yZWYkbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgbmFtZSA9IF9yZWYkbmFtZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkbmFtZSxcbiAgICAgICAgX3JlZiRhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgICBhdHRyaWJ1dGVzID0gX3JlZiRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkYXR0cmlidXRlcyxcbiAgICAgICAgX3JlZiRyZWFkID0gX3JlZi5yZWFkLFxuICAgICAgICByZWFkID0gX3JlZiRyZWFkID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiRyZWFkLFxuICAgICAgICBfcmVmJHdyaXRlID0gX3JlZi53cml0ZSxcbiAgICAgICAgd3JpdGUgPSBfcmVmJHdyaXRlID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiR3cml0ZSxcbiAgICAgICAgX3JlZiRjcmVhdGUgPSBfcmVmLmNyZWF0ZSxcbiAgICAgICAgY3JlYXRlID0gX3JlZiRjcmVhdGUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uKCkge30gOiBfcmVmJGNyZWF0ZSxcbiAgICAgICAgX3JlZiRkZXN0cm95ID0gX3JlZi5kZXN0cm95LFxuICAgICAgICBkZXN0cm95ID0gX3JlZiRkZXN0cm95ID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiRkZXN0cm95LFxuICAgICAgICBfcmVmJGZpbHRlckZyYW1lQWN0aW8gPSBfcmVmLmZpbHRlckZyYW1lQWN0aW9uc0ZvckNoaWxkLFxuICAgICAgICBmaWx0ZXJGcmFtZUFjdGlvbnNGb3JDaGlsZCA9XG4gICAgICAgICAgX3JlZiRmaWx0ZXJGcmFtZUFjdGlvID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gZnVuY3Rpb24oY2hpbGQsIGFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9ucztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfcmVmJGZpbHRlckZyYW1lQWN0aW8sXG4gICAgICAgIF9yZWYkZGlkQ3JlYXRlVmlldyA9IF9yZWYuZGlkQ3JlYXRlVmlldyxcbiAgICAgICAgZGlkQ3JlYXRlVmlldyA9XG4gICAgICAgICAgX3JlZiRkaWRDcmVhdGVWaWV3ID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiRkaWRDcmVhdGVWaWV3LFxuICAgICAgICBfcmVmJGRpZFdyaXRlVmlldyA9IF9yZWYuZGlkV3JpdGVWaWV3LFxuICAgICAgICBkaWRXcml0ZVZpZXcgPVxuICAgICAgICAgIF9yZWYkZGlkV3JpdGVWaWV3ID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiRkaWRXcml0ZVZpZXcsXG4gICAgICAgIF9yZWYkaWdub3JlUmVjdCA9IF9yZWYuaWdub3JlUmVjdCxcbiAgICAgICAgaWdub3JlUmVjdCA9IF9yZWYkaWdub3JlUmVjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlnbm9yZVJlY3QsXG4gICAgICAgIF9yZWYkaWdub3JlUmVjdFVwZGF0ZSA9IF9yZWYuaWdub3JlUmVjdFVwZGF0ZSxcbiAgICAgICAgaWdub3JlUmVjdFVwZGF0ZSA9XG4gICAgICAgICAgX3JlZiRpZ25vcmVSZWN0VXBkYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaWdub3JlUmVjdFVwZGF0ZSxcbiAgICAgICAgX3JlZiRtaXhpbnMgPSBfcmVmLm1peGlucyxcbiAgICAgICAgbWl4aW5zID0gX3JlZiRtaXhpbnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRtaXhpbnM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oXG4gICAgICAgIC8vIGVhY2ggdmlldyByZXF1aXJlcyByZWZlcmVuY2UgdG8gc3RvcmVcbiAgICAgICAgc3RvcmVcbiAgICAgICkge1xuICAgICAgICB2YXIgcHJvcHMgPVxuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgLy8gcm9vdCBlbGVtZW50IHNob3VsZCBub3QgYmUgY2hhbmdlZFxuICAgICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQodGFnLCAnZmlsZXBvbmQtLScgKyBuYW1lLCBhdHRyaWJ1dGVzKTtcblxuICAgICAgICAvLyBzdHlsZSByZWZlcmVuY2Ugc2hvdWxkIGFsc28gbm90IGJlIGNoYW5nZWRcbiAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5cbiAgICAgICAgLy8gZWxlbWVudCByZWN0YW5nbGVcbiAgICAgICAgdmFyIHJlY3QgPSB1cGRhdGVSZWN0KCk7XG4gICAgICAgIHZhciBmcmFtZVJlY3QgPSBudWxsO1xuXG4gICAgICAgIC8vIHJlc3Qgc3RhdGVcbiAgICAgICAgdmFyIGlzUmVzdGluZyA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHByZXR0eSBzZWxmIGV4cGxhbmF0b3J5XG4gICAgICAgIHZhciBjaGlsZFZpZXdzID0gW107XG5cbiAgICAgICAgLy8gbG9hZGVkIG1peGluc1xuICAgICAgICB2YXIgYWN0aXZlTWl4aW5zID0gW107XG5cbiAgICAgICAgLy8gcmVmZXJlbmNlcyB0byBjcmVhdGVkIGNoaWxkcmVuXG4gICAgICAgIHZhciByZWYgPSB7fTtcblxuICAgICAgICAvLyBzdGF0ZSB1c2VkIGZvciBlYWNoIGluc3RhbmNlXG4gICAgICAgIHZhciBzdGF0ZSA9IHt9O1xuXG4gICAgICAgIC8vIGxpc3Qgb2Ygd3JpdGVycyB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIHVwZGF0ZSB0aGlzIHZpZXdcbiAgICAgICAgdmFyIHdyaXRlcnMgPSBbXG4gICAgICAgICAgd3JpdGUgLy8gZGVmYXVsdCB3cml0ZXJcbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgcmVhZGVycyA9IFtcbiAgICAgICAgICByZWFkIC8vIGRlZmF1bHQgcmVhZGVyXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIGRlc3Ryb3llcnMgPSBbXG4gICAgICAgICAgZGVzdHJveSAvLyBkZWZhdWx0IGRlc3Ryb3lcbiAgICAgICAgXTtcblxuICAgICAgICAvLyBjb3JlIHZpZXcgbWV0aG9kc1xuICAgICAgICB2YXIgZ2V0RWxlbWVudCA9IGZ1bmN0aW9uIGdldEVsZW1lbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRDaGlsZFZpZXdzID0gZnVuY3Rpb24gZ2V0Q2hpbGRWaWV3cygpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRWaWV3cy5jb25jYXQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldFJlZmVyZW5jZSA9IGZ1bmN0aW9uIGdldFJlZmVyZW5jZSgpIHtcbiAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlQ2hpbGRWaWV3ID0gZnVuY3Rpb24gY3JlYXRlQ2hpbGRWaWV3KHN0b3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZpZXcsIHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlldyhzdG9yZSwgcHJvcHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBnZXRSZWN0ID0gZnVuY3Rpb24gZ2V0UmVjdCgpIHtcbiAgICAgICAgICBpZiAoZnJhbWVSZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWVSZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcmFtZVJlY3QgPSBnZXRWaWV3UmVjdChyZWN0LCBjaGlsZFZpZXdzLCBbMCwgMF0sIFsxLCAxXSk7XG4gICAgICAgICAgcmV0dXJuIGZyYW1lUmVjdDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWFkIGRhdGEgZnJvbSBET01cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHZhciBfcmVhZCA9IGZ1bmN0aW9uIF9yZWFkKCkge1xuICAgICAgICAgIGZyYW1lUmVjdCA9IG51bGw7XG5cbiAgICAgICAgICAvLyByZWFkIGNoaWxkIHZpZXdzXG4gICAgICAgICAgY2hpbGRWaWV3cy5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuX3JlYWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBzaG91bGRVcGRhdGUgPSAhKGlnbm9yZVJlY3RVcGRhdGUgJiYgcmVjdC53aWR0aCAmJiByZWN0LmhlaWdodCk7XG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgdXBkYXRlUmVjdChyZWN0LCBlbGVtZW50LCBzdHlsZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVhZGVyc1xuICAgICAgICAgIHZhciBhcGkgPSB7IHJvb3Q6IGludGVybmFsQVBJLCBwcm9wczogcHJvcHMsIHJlY3Q6IHJlY3QgfTtcbiAgICAgICAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24ocmVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyKGFwaSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyaXRlIGRhdGEgdG8gRE9NXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlKHRzLCBmcmFtZUFjdGlvbnMsIHNob3VsZE9wdGltaXplKSB7XG4gICAgICAgICAgLy8gaWYgbm8gYWN0aW9ucywgd2UgYXNzdW1lIHRoYXQgdGhlIHZpZXcgaXMgcmVzdGluZ1xuICAgICAgICAgIHZhciByZXN0aW5nID0gZnJhbWVBY3Rpb25zLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICAgIC8vIHdyaXRlcnNcbiAgICAgICAgICB3cml0ZXJzLmZvckVhY2goZnVuY3Rpb24od3JpdGVyKSB7XG4gICAgICAgICAgICB2YXIgd3JpdGVyUmVzdGluZyA9IHdyaXRlcih7XG4gICAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICAgICAgcm9vdDogaW50ZXJuYWxBUEksXG4gICAgICAgICAgICAgIGFjdGlvbnM6IGZyYW1lQWN0aW9ucyxcbiAgICAgICAgICAgICAgdGltZXN0YW1wOiB0cyxcbiAgICAgICAgICAgICAgc2hvdWxkT3B0aW1pemU6IHNob3VsZE9wdGltaXplXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHdyaXRlclJlc3RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJlc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHJ1biBtaXhpbnNcbiAgICAgICAgICBhY3RpdmVNaXhpbnMuZm9yRWFjaChmdW5jdGlvbihtaXhpbikge1xuICAgICAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtaXhpbnMgaXMgc3RpbGwgYnVzeSBhZnRlciB3cml0ZSBvcGVyYXRpb24sIHdlIGFyZSBub3QgcmVzdGluZ1xuICAgICAgICAgICAgdmFyIG1peGluUmVzdGluZyA9IG1peGluLndyaXRlKHRzKTtcbiAgICAgICAgICAgIGlmIChtaXhpblJlc3RpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJlc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHVwZGF0ZXMgY2hpbGQgdmlld3MgdGhhdCBhcmUgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoZSBET01cbiAgICAgICAgICBjaGlsZFZpZXdzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiAhIWNoaWxkLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAvLyBpZiBhIGNoaWxkIHZpZXcgaXMgbm90IHJlc3RpbmcsIHdlIGFyZSBub3QgcmVzdGluZ1xuICAgICAgICAgICAgICB2YXIgY2hpbGRSZXN0aW5nID0gY2hpbGQuX3dyaXRlKFxuICAgICAgICAgICAgICAgIHRzLFxuICAgICAgICAgICAgICAgIGZpbHRlckZyYW1lQWN0aW9uc0ZvckNoaWxkKGNoaWxkLCBmcmFtZUFjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHNob3VsZE9wdGltaXplXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgaWYgKCFjaGlsZFJlc3RpbmcpIHtcbiAgICAgICAgICAgICAgICByZXN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gYXBwZW5kIG5ldyBlbGVtZW50cyB0byBET00gYW5kIHVwZGF0ZSB0aG9zZVxuICAgICAgICAgIGNoaWxkVmlld3NcbiAgICAgICAgICAgIC8vLmZpbHRlcihjaGlsZCA9PiAhY2hpbGQuZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oY2hpbGQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIHNraXBcbiAgICAgICAgICAgICAgaWYgKGNoaWxkLmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGFwcGVuZCB0byBET01cbiAgICAgICAgICAgICAgaW50ZXJuYWxBUEkuYXBwZW5kQ2hpbGQoY2hpbGQuZWxlbWVudCwgaW5kZXgpO1xuXG4gICAgICAgICAgICAgIC8vIGNhbGwgcmVhZCAobmVlZCB0byBrbm93IHRoZSBzaXplIG9mIHRoZXNlIGVsZW1lbnRzKVxuICAgICAgICAgICAgICBjaGlsZC5fcmVhZCgpO1xuXG4gICAgICAgICAgICAgIC8vIHJlLWNhbGwgd3JpdGVcbiAgICAgICAgICAgICAgY2hpbGQuX3dyaXRlKFxuICAgICAgICAgICAgICAgIHRzLFxuICAgICAgICAgICAgICAgIGZpbHRlckZyYW1lQWN0aW9uc0ZvckNoaWxkKGNoaWxkLCBmcmFtZUFjdGlvbnMpLFxuICAgICAgICAgICAgICAgIHNob3VsZE9wdGltaXplXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgLy8gd2UganVzdCBhZGRlZCBzb210aGluZyB0byB0aGUgZG9tLCBubyByZXN0XG4gICAgICAgICAgICAgIHJlc3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHJlc3Rpbmcgc3RhdGVcbiAgICAgICAgICBpc1Jlc3RpbmcgPSByZXN0aW5nO1xuXG4gICAgICAgICAgZGlkV3JpdGVWaWV3KHtcbiAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICAgIHJvb3Q6IGludGVybmFsQVBJLFxuICAgICAgICAgICAgYWN0aW9uczogZnJhbWVBY3Rpb25zLFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0c1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gbGV0IHBhcmVudCBrbm93IGlmIHdlIGFyZSByZXN0aW5nXG4gICAgICAgICAgcmV0dXJuIHJlc3Rpbmc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIF9kZXN0cm95ID0gZnVuY3Rpb24gX2Rlc3Ryb3koKSB7XG4gICAgICAgICAgYWN0aXZlTWl4aW5zLmZvckVhY2goZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgICAgICAgIHJldHVybiBtaXhpbi5kZXN0cm95KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVzdHJveWVycy5mb3JFYWNoKGZ1bmN0aW9uKGRlc3Ryb3llcikge1xuICAgICAgICAgICAgZGVzdHJveWVyKHsgcm9vdDogaW50ZXJuYWxBUEksIHByb3BzOiBwcm9wcyB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGlsZFZpZXdzLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZC5fZGVzdHJveSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNoYXJlZEFQSVxuICAgICAgICB2YXIgc2hhcmVkQVBJRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICBnZXQ6IGdldEVsZW1lbnRcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGdldDogZ2V0U3R5bGVcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgY2hpbGRWaWV3czoge1xuICAgICAgICAgICAgZ2V0OiBnZXRDaGlsZFZpZXdzXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHByaXZhdGUgQVBJIGRlZmluaXRpb25cbiAgICAgICAgdmFyIGludGVybmFsQVBJRGVmaW5pdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIHNoYXJlZEFQSURlZmluaXRpb24sIHtcbiAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICBnZXQ6IGdldFJlY3RcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLy8gYWNjZXNzIHRvIGN1c3RvbSBjaGlsZHJlbiByZWZlcmVuY2VzXG4gICAgICAgICAgcmVmOiB7XG4gICAgICAgICAgICBnZXQ6IGdldFJlZmVyZW5jZVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvLyBkb20gbW9kaWZpZXJzXG4gICAgICAgICAgaXM6IGZ1bmN0aW9uIGlzKG5lZWRsZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IG5lZWRsZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZChlbGVtZW50KSxcbiAgICAgICAgICBjcmVhdGVDaGlsZFZpZXc6IGNyZWF0ZUNoaWxkVmlldyhzdG9yZSksXG4gICAgICAgICAgbGlua1ZpZXc6IGZ1bmN0aW9uIGxpbmtWaWV3KHZpZXcpIHtcbiAgICAgICAgICAgIGNoaWxkVmlld3MucHVzaCh2aWV3KTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdW5saW5rVmlldzogZnVuY3Rpb24gdW5saW5rVmlldyh2aWV3KSB7XG4gICAgICAgICAgICBjaGlsZFZpZXdzLnNwbGljZShjaGlsZFZpZXdzLmluZGV4T2YodmlldyksIDEpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwZW5kQ2hpbGRWaWV3OiBhcHBlbmRDaGlsZFZpZXcoZWxlbWVudCwgY2hpbGRWaWV3cyksXG4gICAgICAgICAgcmVtb3ZlQ2hpbGRWaWV3OiByZW1vdmVDaGlsZFZpZXcoZWxlbWVudCwgY2hpbGRWaWV3cyksXG4gICAgICAgICAgcmVnaXN0ZXJXcml0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyV3JpdGVyKHdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcnMucHVzaCh3cml0ZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVnaXN0ZXJSZWFkZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyUmVhZGVyKHJlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlcnMucHVzaChyZWFkZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVnaXN0ZXJEZXN0cm95ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVzdHJveWVyKGRlc3Ryb3llcikge1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Ryb3llcnMucHVzaChkZXN0cm95ZXIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW52YWxpZGF0ZUxheW91dDogZnVuY3Rpb24gaW52YWxpZGF0ZUxheW91dCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbWVudC5sYXlvdXRDYWxjdWxhdGVkID0gZmFsc2UpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvLyBhY2Nlc3MgdG8gZGF0YSBzdG9yZVxuICAgICAgICAgIGRpc3BhdGNoOiBzdG9yZS5kaXNwYXRjaCxcbiAgICAgICAgICBxdWVyeTogc3RvcmUucXVlcnlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcHVibGljIHZpZXcgQVBJIG1ldGhvZHNcbiAgICAgICAgdmFyIGV4dGVybmFsQVBJRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICBnZXQ6IGdldEVsZW1lbnRcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgY2hpbGRWaWV3czoge1xuICAgICAgICAgICAgZ2V0OiBnZXRDaGlsZFZpZXdzXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHJlY3Q6IHtcbiAgICAgICAgICAgIGdldDogZ2V0UmVjdFxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICByZXN0aW5nOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlzUmVzdGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgaXNSZWN0SWdub3JlZDogZnVuY3Rpb24gaXNSZWN0SWdub3JlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBpZ25vcmVSZWN0O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgX3JlYWQ6IF9yZWFkLFxuICAgICAgICAgIF93cml0ZTogX3dyaXRlLFxuICAgICAgICAgIF9kZXN0cm95OiBfZGVzdHJveVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG1peGluIEFQSSBtZXRob2RzXG4gICAgICAgIHZhciBtaXhpbkFQSURlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBzaGFyZWRBUElEZWZpbml0aW9uLCB7XG4gICAgICAgICAgcmVjdDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIG1peGluIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgT2JqZWN0LmtleXMobWl4aW5zKVxuICAgICAgICAgIC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIC8vIG1vdmUgc3R5bGVzIHRvIHRoZSBiYWNrIG9mIHRoZSBtaXhpbiBsaXN0IChzbyBhZGp1c3RtZW50cyBvZiBvdGhlciBtaXhpbnMgYXJlIGFwcGxpZWQgdG8gdGhlIHByb3BzIGNvcnJlY3RseSlcbiAgICAgICAgICAgIGlmIChhID09PSAnc3R5bGVzJykge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYiA9PT0gJ3N0eWxlcycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBtaXhpbkFQSSA9IE1peGluc1trZXldKHtcbiAgICAgICAgICAgICAgbWl4aW5Db25maWc6IG1peGluc1trZXldLFxuICAgICAgICAgICAgICB2aWV3UHJvcHM6IHByb3BzLFxuICAgICAgICAgICAgICB2aWV3U3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICB2aWV3SW50ZXJuYWxBUEk6IGludGVybmFsQVBJRGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgdmlld0V4dGVybmFsQVBJOiBleHRlcm5hbEFQSURlZmluaXRpb24sXG4gICAgICAgICAgICAgIHZpZXc6IGNyZWF0ZU9iamVjdChtaXhpbkFQSURlZmluaXRpb24pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG1peGluQVBJKSB7XG4gICAgICAgICAgICAgIGFjdGl2ZU1peGlucy5wdXNoKG1peGluQVBJKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBjb25zdHJ1Y3QgcHJpdmF0ZSBhcGlcbiAgICAgICAgdmFyIGludGVybmFsQVBJID0gY3JlYXRlT2JqZWN0KGludGVybmFsQVBJRGVmaW5pdGlvbik7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSB2aWV3XG4gICAgICAgIGNyZWF0ZSh7XG4gICAgICAgICAgcm9vdDogaW50ZXJuYWxBUEksXG4gICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFwcGVuZCBjcmVhdGVkIGNoaWxkIHZpZXdzIHRvIHJvb3Qgbm9kZVxuICAgICAgICB2YXIgY2hpbGRDb3VudCA9IGdldENoaWxkQ291bnQoZWxlbWVudCk7IC8vIG5lZWQgdG8ga25vdyB0aGUgY3VycmVudCBjaGlsZCBjb3VudCBzbyBhcHBlbmRpbmcgaGFwcGVucyBpbiBjb3JyZWN0IG9yZGVyXG4gICAgICAgIGNoaWxkVmlld3MuZm9yRWFjaChmdW5jdGlvbihjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgICBpbnRlcm5hbEFQSS5hcHBlbmRDaGlsZChjaGlsZC5lbGVtZW50LCBjaGlsZENvdW50ICsgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjYWxsIGRpZCBjcmVhdGVcbiAgICAgICAgZGlkQ3JlYXRlVmlldyhpbnRlcm5hbEFQSSk7XG5cbiAgICAgICAgLy8gZXhwb3NlIHB1YmxpYyBhcGlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU9iamVjdChleHRlcm5hbEFQSURlZmluaXRpb24pO1xuICAgICAgfTtcbiAgICB9O1xuXG4gIHZhciBjcmVhdGVQYWludGVyID0gZnVuY3Rpb24gY3JlYXRlUGFpbnRlcihyZWFkLCB3cml0ZSkge1xuICAgIHZhciBmcHMgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA2MDtcblxuICAgIHZhciBuYW1lID0gJ19fZnJhbWVQYWludGVyJztcblxuICAgIC8vIHNldCBnbG9iYWwgcGFpbnRlclxuICAgIGlmICh3aW5kb3dbbmFtZV0pIHtcbiAgICAgIHdpbmRvd1tuYW1lXS5yZWFkZXJzLnB1c2gocmVhZCk7XG4gICAgICB3aW5kb3dbbmFtZV0ud3JpdGVycy5wdXNoKHdyaXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3aW5kb3dbbmFtZV0gPSB7XG4gICAgICByZWFkZXJzOiBbcmVhZF0sXG4gICAgICB3cml0ZXJzOiBbd3JpdGVdXG4gICAgfTtcblxuICAgIHZhciBwYWludGVyID0gd2luZG93W25hbWVdO1xuXG4gICAgdmFyIGludGVydmFsID0gMTAwMCAvIGZwcztcbiAgICB2YXIgbGFzdCA9IG51bGw7XG4gICAgdmFyIGlkID0gbnVsbDtcbiAgICB2YXIgcmVxdWVzdFRpY2sgPSBudWxsO1xuICAgIHZhciBjYW5jZWxUaWNrID0gbnVsbDtcblxuICAgIHZhciBzZXRUaW1lclR5cGUgPSBmdW5jdGlvbiBzZXRUaW1lclR5cGUoKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIHJlcXVlc3RUaWNrID0gZnVuY3Rpb24gcmVxdWVzdFRpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpY2socGVyZm9ybWFuY2Uubm93KCkpO1xuICAgICAgICAgIH0sIGludGVydmFsKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FuY2VsVGljayA9IGZ1bmN0aW9uIGNhbmNlbFRpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiByZXF1ZXN0VGljaygpIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FuY2VsVGljayA9IGZ1bmN0aW9uIGNhbmNlbFRpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjYW5jZWxUaWNrKSBjYW5jZWxUaWNrKCk7XG4gICAgICBzZXRUaW1lclR5cGUoKTtcbiAgICAgIHRpY2socGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIH0pO1xuXG4gICAgdmFyIHRpY2sgPSBmdW5jdGlvbiB0aWNrKHRzKSB7XG4gICAgICAvLyBxdWV1ZSBuZXh0IHRpY2tcbiAgICAgIGlkID0gcmVxdWVzdFRpY2sodGljayk7XG5cbiAgICAgIC8vIGxpbWl0IGZwc1xuICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIGxhc3QgPSB0cztcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gdHMgLSBsYXN0O1xuXG4gICAgICBpZiAoZGVsdGEgPD0gaW50ZXJ2YWwpIHtcbiAgICAgICAgLy8gc2tpcCBmcmFtZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGFsaWduIG5leHQgZnJhbWVcbiAgICAgIGxhc3QgPSB0cyAtIChkZWx0YSAlIGludGVydmFsKTtcblxuICAgICAgLy8gdXBkYXRlIHZpZXdcbiAgICAgIHBhaW50ZXIucmVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHJlYWQpIHtcbiAgICAgICAgcmV0dXJuIHJlYWQoKTtcbiAgICAgIH0pO1xuICAgICAgcGFpbnRlci53cml0ZXJzLmZvckVhY2goZnVuY3Rpb24od3JpdGUpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlKHRzKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZXRUaW1lclR5cGUoKTtcbiAgICB0aWNrKHBlcmZvcm1hbmNlLm5vdygpKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwYXVzZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIGNhbmNlbFRpY2soaWQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVJvdXRlID0gZnVuY3Rpb24gY3JlYXRlUm91dGUocm91dGVzLCBmbikge1xuICAgIHJldHVybiBmdW5jdGlvbihfcmVmKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgICAgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgICAgICBfcmVmJGFjdGlvbnMgPSBfcmVmLmFjdGlvbnMsXG4gICAgICAgIGFjdGlvbnMgPSBfcmVmJGFjdGlvbnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRhY3Rpb25zLFxuICAgICAgICB0aW1lc3RhbXAgPSBfcmVmLnRpbWVzdGFtcCxcbiAgICAgICAgc2hvdWxkT3B0aW1pemUgPSBfcmVmLnNob3VsZE9wdGltaXplO1xuICAgICAgYWN0aW9uc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiByb3V0ZXNbYWN0aW9uLnR5cGVdO1xuICAgICAgICB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gcm91dGVzW2FjdGlvbi50eXBlXSh7XG4gICAgICAgICAgICByb290OiByb290LFxuICAgICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24uZGF0YSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgICAgICAgICAgc2hvdWxkT3B0aW1pemU6IHNob3VsZE9wdGltaXplXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgZm4oe1xuICAgICAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXG4gICAgICAgICAgc2hvdWxkT3B0aW1pemU6IHNob3VsZE9wdGltaXplXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgcmV0dXJuIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEFmdGVyID0gZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIHJldHVybiByZWZlcmVuY2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgbmV3Tm9kZSxcbiAgICAgIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmdcbiAgICApO1xuICB9O1xuXG4gIHZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfTtcblxuICB2YXIgaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgfTtcblxuICB2YXIgdHJpbSA9IGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCk7XG4gIH07XG5cbiAgdmFyIHRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgfTtcblxuICB2YXIgdG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICB2YXIgc3BsaXR0ZXIgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnLCc7XG4gICAgaWYgKGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpXG4gICAgICAuc3BsaXQoc3BsaXR0ZXIpXG4gICAgICAubWFwKHRyaW0pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLmxlbmd0aDtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHZhciBpc0Jvb2xlYW4gPSBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG4gIH07XG5cbiAgdmFyIHRvQm9vbGVhbiA9IGZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiBpc0Jvb2xlYW4odmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA9PT0gJ3RydWUnO1xuICB9O1xuXG4gIHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIH07XG5cbiAgdmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IGlzU3RyaW5nKHZhbHVlKVxuICAgICAgPyB0b1N0cmluZyh2YWx1ZSkucmVwbGFjZSgvW2Etel0rL2dpLCAnJylcbiAgICAgIDogMDtcbiAgfTtcblxuICB2YXIgdG9JbnQgPSBmdW5jdGlvbiB0b0ludCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh0b051bWJlcih2YWx1ZSksIDEwKTtcbiAgfTtcblxuICB2YXIgdG9GbG9hdCA9IGZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0b051bWJlcih2YWx1ZSkpO1xuICB9O1xuXG4gIHZhciBpc0ludCA9IGZ1bmN0aW9uIGlzSW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xuICB9O1xuXG4gIHZhciB0b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcyh2YWx1ZSkge1xuICAgIC8vIGlzIGluIGJ5dGVzXG4gICAgaWYgKGlzSW50KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGlzIG5hdHVyYWwgZmlsZSBzaXplXG4gICAgdmFyIG5hdHVyYWxGaWxlU2l6ZSA9IHRvU3RyaW5nKHZhbHVlKS50cmltKCk7XG5cbiAgICAvLyBpZiBpcyB2YWx1ZSBpbiBtZWdhYnl0ZXNcbiAgICBpZiAoL01CJC9pLnRlc3QobmF0dXJhbEZpbGVTaXplKSkge1xuICAgICAgbmF0dXJhbEZpbGVTaXplID0gbmF0dXJhbEZpbGVTaXplLnJlcGxhY2UoL01CJGkvLCAnJykudHJpbSgpO1xuICAgICAgcmV0dXJuIHRvSW50KG5hdHVyYWxGaWxlU2l6ZSkgKiAxMDAwICogMTAwMDtcbiAgICB9XG5cbiAgICAvLyBpZiBpcyB2YWx1ZSBpbiBraWxvYnl0ZXNcbiAgICBpZiAoL0tCL2kudGVzdChuYXR1cmFsRmlsZVNpemUpKSB7XG4gICAgICBuYXR1cmFsRmlsZVNpemUgPSBuYXR1cmFsRmlsZVNpemUucmVwbGFjZSgvS0IkaS8sICcnKS50cmltKCk7XG4gICAgICByZXR1cm4gdG9JbnQobmF0dXJhbEZpbGVTaXplKSAqIDEwMDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvSW50KG5hdHVyYWxGaWxlU2l6ZSk7XG4gIH07XG5cbiAgdmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfTtcblxuICB2YXIgdG9GdW5jdGlvblJlZmVyZW5jZSA9IGZ1bmN0aW9uIHRvRnVuY3Rpb25SZWZlcmVuY2Uoc3RyaW5nKSB7XG4gICAgdmFyIHJlZiA9IHNlbGY7XG4gICAgdmFyIGxldmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuICAgIHZhciBsZXZlbCA9IG51bGw7XG4gICAgd2hpbGUgKChsZXZlbCA9IGxldmVscy5zaGlmdCgpKSkge1xuICAgICAgcmVmID0gcmVmW2xldmVsXTtcbiAgICAgIGlmICghcmVmKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVmO1xuICB9O1xuXG4gIHZhciBtZXRob2RzID0ge1xuICAgIHByb2Nlc3M6ICdQT1NUJyxcbiAgICBwYXRjaDogJ1BBVENIJyxcbiAgICByZXZlcnQ6ICdERUxFVEUnLFxuICAgIGZldGNoOiAnR0VUJyxcbiAgICByZXN0b3JlOiAnR0VUJyxcbiAgICBsb2FkOiAnR0VUJ1xuICB9O1xuXG4gIHZhciBjcmVhdGVTZXJ2ZXJBUEkgPSBmdW5jdGlvbiBjcmVhdGVTZXJ2ZXJBUEkob3V0bGluZSkge1xuICAgIHZhciBhcGkgPSB7fTtcblxuICAgIGFwaS51cmwgPSBpc1N0cmluZyhvdXRsaW5lKSA/IG91dGxpbmUgOiBvdXRsaW5lLnVybCB8fCAnJztcbiAgICBhcGkudGltZW91dCA9IG91dGxpbmUudGltZW91dCA/IHBhcnNlSW50KG91dGxpbmUudGltZW91dCwgMTApIDogMDtcbiAgICBhcGkuaGVhZGVycyA9IG91dGxpbmUuaGVhZGVycyA/IG91dGxpbmUuaGVhZGVycyA6IHt9O1xuXG4gICAgZm9yaW4obWV0aG9kcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBhcGlba2V5XSA9IGNyZWF0ZUFjdGlvbihcbiAgICAgICAga2V5LFxuICAgICAgICBvdXRsaW5lW2tleV0sXG4gICAgICAgIG1ldGhvZHNba2V5XSxcbiAgICAgICAgYXBpLnRpbWVvdXQsXG4gICAgICAgIGFwaS5oZWFkZXJzXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgLy8gc3BlY2lhbCB0cmVhdG1lbnQgZm9yIHJlbW92ZVxuICAgIGFwaS5yZW1vdmUgPSBvdXRsaW5lLnJlbW92ZSB8fCBudWxsO1xuXG4gICAgLy8gcmVtb3ZlIGdlbmVyaWMgaGVhZGVycyBmcm9tIGFwaSBvYmplY3RcbiAgICBkZWxldGUgYXBpLmhlYWRlcnM7XG5cbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVBY3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVBY3Rpb24oXG4gICAgbmFtZSxcbiAgICBvdXRsaW5lLFxuICAgIG1ldGhvZCxcbiAgICB0aW1lb3V0LFxuICAgIGhlYWRlcnNcbiAgKSB7XG4gICAgLy8gaXMgZXhwbGljaXRlbHkgc2V0IHRvIG51bGwgc28gZGlzYWJsZVxuICAgIGlmIChvdXRsaW5lID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBpZiBpcyBjdXN0b20gZnVuY3Rpb24sIGRvbmUhIERldiBoYW5kbGVzIGV2ZXJ5dGhpbmcuXG4gICAgaWYgKHR5cGVvZiBvdXRsaW5lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gb3V0bGluZTtcbiAgICB9XG5cbiAgICAvLyBidWlsZCBhY3Rpb24gb2JqZWN0XG4gICAgdmFyIGFjdGlvbiA9IHtcbiAgICAgIHVybDogbWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdQQVRDSCcgPyAnPycgKyBuYW1lICsgJz0nIDogJycsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIG9ubG9hZDogbnVsbCxcbiAgICAgIG9uZGF0YTogbnVsbCxcbiAgICAgIG9uZXJyb3I6IG51bGxcbiAgICB9O1xuXG4gICAgLy8gaXMgYSBzaW5nbGUgdXJsXG4gICAgaWYgKGlzU3RyaW5nKG91dGxpbmUpKSB7XG4gICAgICBhY3Rpb24udXJsID0gb3V0bGluZTtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxuXG4gICAgLy8gb3ZlcndyaXRlXG4gICAgT2JqZWN0LmFzc2lnbihhY3Rpb24sIG91dGxpbmUpO1xuXG4gICAgLy8gc2VlIGlmIHNob3VsZCByZWZvcm1hdCBoZWFkZXJzO1xuICAgIGlmIChpc1N0cmluZyhhY3Rpb24uaGVhZGVycykpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGFjdGlvbi5oZWFkZXJzLnNwbGl0KC86KC4rKS8pO1xuICAgICAgYWN0aW9uLmhlYWRlcnMgPSB7XG4gICAgICAgIGhlYWRlcjogcGFydHNbMF0sXG4gICAgICAgIHZhbHVlOiBwYXJ0c1sxXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBpZiBpcyBib29sIHdpdGhDcmVkZW50aWFsc1xuICAgIGFjdGlvbi53aXRoQ3JlZGVudGlhbHMgPSB0b0Jvb2xlYW4oYWN0aW9uLndpdGhDcmVkZW50aWFscyk7XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9O1xuXG4gIHZhciB0b1NlcnZlckFQSSA9IGZ1bmN0aW9uIHRvU2VydmVyQVBJKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVNlcnZlckFQSSh2YWx1ZSk7XG4gIH07XG5cbiAgdmFyIGlzTnVsbCA9IGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgfTtcblxuICB2YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xuICB9O1xuXG4gIHZhciBpc0FQSSA9IGZ1bmN0aW9uIGlzQVBJKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGlzT2JqZWN0KHZhbHVlKSAmJlxuICAgICAgaXNTdHJpbmcodmFsdWUudXJsKSAmJlxuICAgICAgaXNPYmplY3QodmFsdWUucHJvY2VzcykgJiZcbiAgICAgIGlzT2JqZWN0KHZhbHVlLnJldmVydCkgJiZcbiAgICAgIGlzT2JqZWN0KHZhbHVlLnJlc3RvcmUpICYmXG4gICAgICBpc09iamVjdCh2YWx1ZS5mZXRjaClcbiAgICApO1xuICB9O1xuXG4gIHZhciBnZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSh2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVsbCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuXG4gICAgaWYgKGlzSW50KHZhbHVlKSkge1xuICAgICAgcmV0dXJuICdpbnQnO1xuICAgIH1cblxuICAgIGlmICgvXlswLTldKyA/KD86R0J8TUJ8S0IpJC9naS50ZXN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuICdieXRlcyc7XG4gICAgfVxuXG4gICAgaWYgKGlzQVBJKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcGknO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdmFsdWU7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2VTaW5nbGVRdW90ZXMgPSBmdW5jdGlvbiByZXBsYWNlU2luZ2xlUXVvdGVzKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgIC5yZXBsYWNlKC97XFxzKicvZywgJ3tcIicpXG4gICAgICAucmVwbGFjZSgvJ1xccyp9L2csICdcIn0nKVxuICAgICAgLnJlcGxhY2UoLydcXHMqOi9nLCAnXCI6JylcbiAgICAgIC5yZXBsYWNlKC86XFxzKicvZywgJzpcIicpXG4gICAgICAucmVwbGFjZSgvLFxccyonL2csICcsXCInKVxuICAgICAgLnJlcGxhY2UoLydcXHMqLC9nLCAnXCIsJyk7XG4gIH07XG5cbiAgdmFyIGNvbnZlcnNpb25UYWJsZSA9IHtcbiAgICBhcnJheTogdG9BcnJheSxcbiAgICBib29sZWFuOiB0b0Jvb2xlYW4sXG4gICAgaW50OiBmdW5jdGlvbiBpbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBnZXRUeXBlKHZhbHVlKSA9PT0gJ2J5dGVzJyA/IHRvQnl0ZXModmFsdWUpIDogdG9JbnQodmFsdWUpO1xuICAgIH0sXG4gICAgbnVtYmVyOiB0b0Zsb2F0LFxuICAgIGZsb2F0OiB0b0Zsb2F0LFxuICAgIGJ5dGVzOiB0b0J5dGVzLFxuICAgIHN0cmluZzogZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IHRvU3RyaW5nKHZhbHVlKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uOiBmdW5jdGlvbiBfZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0b0Z1bmN0aW9uUmVmZXJlbmNlKHZhbHVlKTtcbiAgICB9LFxuICAgIHNlcnZlcmFwaTogdG9TZXJ2ZXJBUEksXG4gICAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QodmFsdWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlcGxhY2VTaW5nbGVRdW90ZXModmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBjb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8odmFsdWUsIHR5cGUpIHtcbiAgICByZXR1cm4gY29udmVyc2lvblRhYmxlW3R5cGVdKHZhbHVlKTtcbiAgfTtcblxuICB2YXIgZ2V0VmFsdWVCeVR5cGUgPSBmdW5jdGlvbiBnZXRWYWx1ZUJ5VHlwZShcbiAgICBuZXdWYWx1ZSxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICAgdmFsdWVUeXBlXG4gICkge1xuICAgIC8vIGNhbiBhbHdheXMgYXNzaWduIGRlZmF1bHQgdmFsdWVcbiAgICBpZiAobmV3VmFsdWUgPT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIC8vIGdldCB0aGUgdHlwZSBvZiB0aGUgbmV3IHZhbHVlXG4gICAgdmFyIG5ld1ZhbHVlVHlwZSA9IGdldFR5cGUobmV3VmFsdWUpO1xuXG4gICAgLy8gaXMgdmFsaWQgdHlwZT9cbiAgICBpZiAobmV3VmFsdWVUeXBlICE9PSB2YWx1ZVR5cGUpIHtcbiAgICAgIC8vIGlzIHN0cmluZyBpbnB1dCwgbGV0J3MgYXR0ZW1wdCB0byBjb252ZXJ0XG4gICAgICB2YXIgY29udmVydGVkVmFsdWUgPSBjb252ZXJ0VG8obmV3VmFsdWUsIHZhbHVlVHlwZSk7XG5cbiAgICAgIC8vIHdoYXQgaXMgdGhlIHR5cGUgbm93XG4gICAgICBuZXdWYWx1ZVR5cGUgPSBnZXRUeXBlKGNvbnZlcnRlZFZhbHVlKTtcblxuICAgICAgLy8gbm8gdmFsaWQgY29udmVyc2lvbnMgZm91bmRcbiAgICAgIGlmIChjb252ZXJ0ZWRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyAnVHJ5aW5nIHRvIGFzc2lnbiB2YWx1ZSB3aXRoIGluY29ycmVjdCB0eXBlIHRvIFwiJyArXG4gICAgICAgICAgb3B0aW9uICtcbiAgICAgICAgICAnXCIsIGFsbG93ZWQgdHlwZTogXCInICtcbiAgICAgICAgICB2YWx1ZVR5cGUgK1xuICAgICAgICAgICdcIic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvbnZlcnRlZFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFzc2lnbiBuZXcgdmFsdWVcbiAgICByZXR1cm4gbmV3VmFsdWU7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZU9wdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZU9wdGlvbihkZWZhdWx0VmFsdWUsIHZhbHVlVHlwZSkge1xuICAgIHZhciBjdXJyZW50VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBnZXRWYWx1ZUJ5VHlwZShuZXdWYWx1ZSwgZGVmYXVsdFZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZU9wdGlvbnMgPSBmdW5jdGlvbiBjcmVhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yaW4ob3B0aW9ucywgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgdmFyIG9wdGlvbkRlZmluaXRpb24gPSBvcHRpb25zW3Byb3BdO1xuICAgICAgb2JqW3Byb3BdID0gY3JlYXRlT3B0aW9uKG9wdGlvbkRlZmluaXRpb25bMF0sIG9wdGlvbkRlZmluaXRpb25bMV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBjcmVhdGVPYmplY3Qob2JqKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlSW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gbW9kZWxcbiAgICAgIGl0ZW1zOiBbXSxcblxuICAgICAgLy8gdGltZW91dCB1c2VkIGZvciBjYWxsaW5nIHVwZGF0ZSBpdGVtc1xuICAgICAgbGlzdFVwZGF0ZVRpbWVvdXQ6IG51bGwsXG5cbiAgICAgIC8vIHRpbWVvdXQgdXNlZCBmb3Igc3RhY2tpbmcgbWV0YWRhdGEgdXBkYXRlc1xuICAgICAgaXRlbVVwZGF0ZVRpbWVvdXQ6IG51bGwsXG5cbiAgICAgIC8vIHF1ZXVlIG9mIGl0ZW1zIHdhaXRpbmcgdG8gYmUgcHJvY2Vzc2VkXG4gICAgICBwcm9jZXNzaW5nUXVldWU6IFtdLFxuXG4gICAgICAvLyBvcHRpb25zXG4gICAgICBvcHRpb25zOiBjcmVhdGVPcHRpb25zKG9wdGlvbnMpXG4gICAgfTtcbiAgfTtcblxuICB2YXIgZnJvbUNhbWVscyA9IGZ1bmN0aW9uIGZyb21DYW1lbHMoc3RyaW5nKSB7XG4gICAgdmFyIHNlcGFyYXRvciA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICctJztcbiAgICByZXR1cm4gc3RyaW5nXG4gICAgICAuc3BsaXQoLyg/PVtBLVpdKS8pXG4gICAgICAubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pXG4gICAgICAuam9pbihzZXBhcmF0b3IpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVPcHRpb25BUEkgPSBmdW5jdGlvbiBjcmVhdGVPcHRpb25BUEkoc3RvcmUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yaW4ob3B0aW9ucywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBvYmpba2V5XSA9IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCkub3B0aW9uc1trZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKCdTRVRfJyArIGZyb21DYW1lbHMoa2V5LCAnXycpLnRvVXBwZXJDYXNlKCksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZU9wdGlvbkFjdGlvbnMgPSBmdW5jdGlvbiBjcmVhdGVPcHRpb25BY3Rpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGlzcGF0Y2gsIHF1ZXJ5LCBzdGF0ZSkge1xuICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgZm9yaW4ob3B0aW9ucywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBuYW1lID0gZnJvbUNhbWVscyhrZXksICdfJykudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBvYmpbJ1NFVF8nICsgbmFtZV0gPSBmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhdGUub3B0aW9uc1trZXldID0gYWN0aW9uLnZhbHVlO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9IC8vIG5vcGUsIGZhaWxlZFxuXG4gICAgICAgICAgLy8gd2Ugc3VjY2Vzc2Z1bGx5IHNldCB0aGUgdmFsdWUgb2YgdGhpcyBvcHRpb25cbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1NFVF8nICsgbmFtZSwgeyB2YWx1ZTogc3RhdGUub3B0aW9uc1trZXldIH0pO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZU9wdGlvblF1ZXJpZXMgPSBmdW5jdGlvbiBjcmVhdGVPcHRpb25RdWVyaWVzKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgIGZvcmluKG9wdGlvbnMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBvYmpbJ0dFVF8nICsgZnJvbUNhbWVscyhrZXksICdfJykudG9VcHBlckNhc2UoKV0gPSBmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUub3B0aW9uc1trZXldO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIEludGVyYWN0aW9uTWV0aG9kID0ge1xuICAgIEFQSTogMSxcbiAgICBEUk9QOiAyLFxuICAgIEJST1dTRTogMyxcbiAgICBQQVNURTogNCxcbiAgICBOT05FOiA1XG4gIH07XG5cbiAgdmFyIGdldFVuaXF1ZUlkID0gZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKClcbiAgICAgIC50b1N0cmluZygzNilcbiAgICAgIC5zdWJzdHIoMiwgOSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJlxuICAgICAgICAgIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJlxuICAgICAgICAgIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZVxuICAgICAgICAgID8gJ3N5bWJvbCdcbiAgICAgICAgICA6IHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfdHlwZW9mKG9iaik7XG4gIH1cblxuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFO1xuXG4gIGZ1bmN0aW9uIF9qc3godHlwZSwgcHJvcHMsIGtleSwgY2hpbGRyZW4pIHtcbiAgICBpZiAoIVJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgUkVBQ1RfRUxFTUVOVF9UWVBFID1cbiAgICAgICAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICBTeW1ib2xbJ2ZvciddICYmXG4gICAgICAgICAgU3ltYm9sWydmb3InXSgncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgICAgICAweGVhYzc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDM7XG5cbiAgICBpZiAoIXByb3BzICYmIGNoaWxkcmVuTGVuZ3RoICE9PSAwKSB7XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IHZvaWQgMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMgJiYgZGVmYXVsdFByb3BzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXByb3BzKSB7XG4gICAgICBwcm9wcyA9IGRlZmF1bHRQcm9wcyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBjaGlsZEFycmF5ID0gbmV3IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDNdO1xuICAgICAgfVxuXG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAga2V5OiBrZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGtleSxcbiAgICAgIHJlZjogbnVsbCxcbiAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgIF9vd25lcjogbnVsbFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfYXN5bmNJdGVyYXRvcihpdGVyYWJsZSkge1xuICAgIHZhciBtZXRob2Q7XG5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChTeW1ib2wuYXN5bmNJdGVyYXRvcikge1xuICAgICAgICBtZXRob2QgPSBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl07XG4gICAgICAgIGlmIChtZXRob2QgIT0gbnVsbCkgcmV0dXJuIG1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICBtZXRob2QgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICBpZiAobWV0aG9kICE9IG51bGwpIHJldHVybiBtZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0IGlzIG5vdCBhc3luYyBpdGVyYWJsZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gX0F3YWl0VmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLndyYXBwZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9Bc3luY0dlbmVyYXRvcihnZW4pIHtcbiAgICB2YXIgZnJvbnQsIGJhY2s7XG5cbiAgICBmdW5jdGlvbiBzZW5kKGtleSwgYXJnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGFyZzogYXJnLFxuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChiYWNrKSB7XG4gICAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbnQgPSBiYWNrID0gcmVxdWVzdDtcbiAgICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUoa2V5LCBhcmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIHZhciB3cmFwcGVkQXdhaXQgPSB2YWx1ZSBpbnN0YW5jZW9mIF9Bd2FpdFZhbHVlO1xuICAgICAgICBQcm9taXNlLnJlc29sdmUod3JhcHBlZEF3YWl0ID8gdmFsdWUud3JhcHBlZCA6IHZhbHVlKS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgaWYgKHdyYXBwZWRBd2FpdCkge1xuICAgICAgICAgICAgICByZXN1bWUoJ25leHQnLCBhcmcpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldHRsZShyZXN1bHQuZG9uZSA/ICdyZXR1cm4nIDogJ25vcm1hbCcsIGFyZyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIHJlc3VtZSgndGhyb3cnLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzZXR0bGUoJ3Rocm93JywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR0bGUodHlwZSwgdmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdyZXR1cm4nOlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3Rocm93JzpcbiAgICAgICAgICBmcm9udC5yZWplY3QodmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmcm9udCA9IGZyb250Lm5leHQ7XG5cbiAgICAgIGlmIChmcm9udCkge1xuICAgICAgICByZXN1bWUoZnJvbnQua2V5LCBmcm9udC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFjayA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW52b2tlID0gc2VuZDtcblxuICAgIGlmICh0eXBlb2YgZ2VuLnJldHVybiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5yZXR1cm4gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICBfQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfVxuXG4gIF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoJ25leHQnLCBhcmcpO1xuICB9O1xuXG4gIF9Bc3luY0dlbmVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCd0aHJvdycsIGFyZyk7XG4gIH07XG5cbiAgX0FzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKCdyZXR1cm4nLCBhcmcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIF93cmFwQXN5bmNHZW5lcmF0b3IoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IF9Bc3luY0dlbmVyYXRvcihmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2F3YWl0QXN5bmNHZW5lcmF0b3IodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IF9Bd2FpdFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3luY0dlbmVyYXRvckRlbGVnYXRlKGlubmVyLCBhd2FpdFdyYXApIHtcbiAgICB2YXIgaXRlciA9IHt9LFxuICAgICAgd2FpdGluZyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcHVtcChrZXksIHZhbHVlKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIHZhbHVlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICByZXNvbHZlKGlubmVyW2tleV0odmFsdWUpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBhd2FpdFdyYXAodmFsdWUpXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgaXRlcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHdhaXRpbmcpIHtcbiAgICAgICAgd2FpdGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwdW1wKCduZXh0JywgdmFsdWUpO1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGlubmVyLnRocm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpdGVyLnRocm93ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHdhaXRpbmcpIHtcbiAgICAgICAgICB3YWl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHVtcCgndGhyb3cnLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5uZXIucmV0dXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpdGVyLnJldHVybiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwdW1wKCdyZXR1cm4nLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBpdGVyO1xuICB9XG5cbiAgZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChcbiAgICAgICAgICAgIGdlbixcbiAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICBfbmV4dCxcbiAgICAgICAgICAgIF90aHJvdyxcbiAgICAgICAgICAgICduZXh0JyxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICd0aHJvdycsIGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcyhvYmosIGRlc2NzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRlc2NzKSB7XG4gICAgICB2YXIgZGVzYyA9IGRlc2NzW2tleV07XG4gICAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSBkZXNjLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgZGVzYyk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBvYmplY3RTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhkZXNjcyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0U3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3ltID0gb2JqZWN0U3ltYm9sc1tpXTtcbiAgICAgICAgdmFyIGRlc2MgPSBkZXNjc1tzeW1dO1xuICAgICAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9IGRlc2MuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmICgndmFsdWUnIGluIGRlc2MpIGRlc2Mud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBzeW0sIGRlc2MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVmYXVsdHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVmYXVsdHMsIGtleSk7XG5cbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25maWd1cmFibGUgJiYgb2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPVxuICAgICAgT2JqZWN0LmFzc2lnbiB8fFxuICAgICAgZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH07XG5cbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KFxuICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGlmIChlbnVtZXJhYmxlT25seSlcbiAgICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uKHN5bSkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICB9KTtcbiAgICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZlxuICAgICAgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2ZcbiAgICAgIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICAgICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgICAgICB9O1xuICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIF9zZXRQcm90b3R5cGVPZiA9XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICAgIG8uX19wcm90b19fID0gcDtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9O1xuXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24oKSB7fSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICAgIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykgIT09IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gICAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5zdGFuY2VvZihsZWZ0LCByaWdodCkge1xuICAgIGlmIChcbiAgICAgIHJpZ2h0ICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICByaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdXG4gICAgKSB7XG4gICAgICByZXR1cm4gISFyaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdKGxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVmdCBpbnN0YW5jZW9mIHJpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZVxuICAgICAgPyBvYmpcbiAgICAgIDoge1xuICAgICAgICAgIGRlZmF1bHQ6IG9ialxuICAgICAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gICAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5ld09iaiA9IHt9O1xuXG4gICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICB2YXIgZGVzYyA9XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgICAgICAgICAgICAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KVxuICAgICAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9uZXdBcnJvd0NoZWNrKGlubmVyVGhpcywgYm91bmRUaGlzKSB7XG4gICAgaWYgKGlubmVyVGhpcyAhPT0gYm91bmRUaGlzKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgaW5zdGFudGlhdGUgYW4gYXJyb3cgZnVuY3Rpb24nKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0RGVzdHJ1Y3R1cmluZ0VtcHR5KG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGRlc3RydWN0dXJlIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciB0YXJnZXQgPSB7fTtcbiAgICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgdmFyIGtleSwgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgICB2YXIga2V5LCBpO1xuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXG4gICAgICAgIFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgY2FsbCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIHJldHVybiBjYWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcbiAgICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBSZWZsZWN0LmdldCkge1xuICAgICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdC5zZXQpIHtcbiAgICAgIHNldCA9IFJlZmxlY3Quc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgdmFyIGRlc2M7XG5cbiAgICAgICAgaWYgKGJhc2UpIHtcbiAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgICAgIGRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjKSB7XG4gICAgICAgICAgaWYgKCFkZXNjLndyaXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVzYy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgcHJvcGVydHksIGRlc2MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlciwgaXNTdHJpY3QpIHtcbiAgICB2YXIgcyA9IHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcblxuICAgIGlmICghcyAmJiBpc1N0cmljdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gc2V0IHByb3BlcnR5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHtcbiAgICBpZiAoIXJhdykge1xuICAgICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHN0cmluZ3MsIHtcbiAgICAgICAgcmF3OiB7XG4gICAgICAgICAgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2Uoc3RyaW5ncywgcmF3KSB7XG4gICAgaWYgKCFyYXcpIHtcbiAgICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gICAgfVxuXG4gICAgc3RyaW5ncy5yYXcgPSByYXc7XG4gICAgcmV0dXJuIHN0cmluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBfdGVtcG9yYWxSZWYodmFsLCBuYW1lKSB7XG4gICAgaWYgKHZhbCA9PT0gX3RlbXBvcmFsVW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobmFtZSArICcgaXMgbm90IGRlZmluZWQgLSB0ZW1wb3JhbCBkZWFkIHpvbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfcmVhZE9ubHlFcnJvcihuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBuYW1lICsgJ1wiIGlzIHJlYWQtb25seScpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzTmFtZVREWkVycm9yKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2xhc3MgXCInICsgbmFtZSArICdcIiBjYW5ub3QgYmUgcmVmZXJlbmNlZCBpbiBjb21wdXRlZCBwcm9wZXJ0eSBrZXlzLidcbiAgICApO1xuICB9XG5cbiAgdmFyIF90ZW1wb3JhbFVuZGVmaW5lZCA9IHt9O1xuXG4gIGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICAgIHJldHVybiAoXG4gICAgICBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fFxuICAgICAgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHxcbiAgICAgIF9ub25JdGVyYWJsZVJlc3QoKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheUxvb3NlKGFyciwgaSkge1xuICAgIHJldHVybiAoXG4gICAgICBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fFxuICAgICAgX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UoYXJyLCBpKSB8fFxuICAgICAgX25vbkl0ZXJhYmxlUmVzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF90b0FycmF5KGFycikge1xuICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICAgIHJldHVybiAoXG4gICAgICBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKClcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKVxuICAgICAgICBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgICByZXR1cm4gYXJyMjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICAgIGlmIChcbiAgICAgIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHxcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSdcbiAgICApXG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuICAgIHZhciBfbiA9IHRydWU7XG4gICAgdmFyIF9kID0gZmFsc2U7XG4gICAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zO1xuICAgICAgICAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTtcbiAgICAgICAgX24gPSB0cnVlXG4gICAgICApIHtcbiAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9IHRydWU7XG4gICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10gIT0gbnVsbCkgX2lbJ3JldHVybiddKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcblxuICAgIGZvciAoXG4gICAgICB2YXIgX2l0ZXJhdG9yID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7XG4gICAgICAhKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZTtcblxuICAgICkge1xuICAgICAgX2Fyci5wdXNoKF9zdGVwLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9za2lwRmlyc3RHZW5lcmF0b3JOZXh0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGl0ID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGl0Lm5leHQoKTtcbiAgICAgIHJldHVybiBpdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG5cbiAgICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICdkZWZhdWx0Jyk7XG4gICAgICBpZiAodHlwZW9mIHJlcyAhPT0gJ29iamVjdCcpIHJldHVybiByZXM7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLicpO1xuICAgIH1cblxuICAgIHJldHVybiAoaGludCA9PT0gJ3N0cmluZycgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykge1xuICAgIHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCAnc3RyaW5nJyk7XG5cbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3N5bWJvbCcgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIoZGVzY3JpcHRvciwgY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgK1xuICAgICAgICAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBzZXQgdG8gdXNlIGxvb3NlIG1vZGUuICcgK1xuICAgICAgICAnVG8gdXNlIHByb3Bvc2FsLWNsYXNzLXByb3BlcnRpZXMgaW4gc3BlYyBtb2RlIHdpdGggZGVjb3JhdG9ycywgd2FpdCBmb3IgJyArXG4gICAgICAgICd0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGRlY29yYXRvcnMgaW4gc3RhZ2UgMi4nXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwge1xuICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLFxuICAgICAgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXJcbiAgICAgICAgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dClcbiAgICAgICAgOiB2b2lkIDBcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoXG4gICAgdGFyZ2V0LFxuICAgIHByb3BlcnR5LFxuICAgIGRlY29yYXRvcnMsXG4gICAgZGVzY3JpcHRvcixcbiAgICBjb250ZXh0XG4gICkge1xuICAgIHZhciBkZXNjID0ge307XG4gICAgT2JqZWN0LmtleXMoZGVzY3JpcHRvcikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgIGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTtcbiAgICB9KTtcbiAgICBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTtcbiAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7XG5cbiAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHtcbiAgICAgIGRlc2Mud3JpdGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlc2MgPSBkZWNvcmF0b3JzXG4gICAgICAuc2xpY2UoKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLnJlZHVjZShmdW5jdGlvbihkZXNjLCBkZWNvcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjO1xuICAgICAgfSwgZGVzYyk7XG5cbiAgICBpZiAoY29udGV4dCAmJiBkZXNjLmluaXRpYWxpemVyICE9PSB2b2lkIDApIHtcbiAgICAgIGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwO1xuICAgICAgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoZGVzYy5pbml0aWFsaXplciA9PT0gdm9pZCAwKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzYyk7XG4gICAgICBkZXNjID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzYztcbiAgfVxuXG4gIHZhciBpZCA9IDA7XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkobmFtZSkge1xuICAgIHJldHVybiAnX19wcml2YXRlXycgKyBpZCsrICsgJ18nICsgbmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZShyZWNlaXZlciwgcHJpdmF0ZUtleSkge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlY2VpdmVyLCBwcml2YXRlS2V5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXR0ZW1wdGVkIHRvIHVzZSBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZScpO1xuICAgIH1cblxuICAgIHJldHVybiByZWNlaXZlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xuXG4gICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICByZXR1cm4gZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XG5cbiAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFkZXNjcmlwdG9yLndyaXRhYmxlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGQnKTtcbiAgICAgIH1cblxuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZERlc3RydWN0dXJlU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2F0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVzY3JpcHRvciA9IHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcblxuICAgIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgICAgaWYgKCEoJ19fZGVzdHJPYmonIGluIGRlc2NyaXB0b3IpKSB7XG4gICAgICAgIGRlc2NyaXB0b3IuX19kZXN0ck9iaiA9IHtcbiAgICAgICAgICBzZXQgdmFsdWUodikge1xuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgdik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzY3JpcHRvci5fX2Rlc3RyT2JqO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXR0ZW1wdGVkIHRvIHNldCByZWFkIG9ubHkgcHJpdmF0ZSBmaWVsZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjR2V0KFxuICAgIHJlY2VpdmVyLFxuICAgIGNsYXNzQ29uc3RydWN0b3IsXG4gICAgZGVzY3JpcHRvclxuICApIHtcbiAgICBpZiAocmVjZWl2ZXIgIT09IGNsYXNzQ29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ByaXZhdGUgc3RhdGljIGFjY2VzcyBvZiB3cm9uZyBwcm92ZW5hbmNlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjU2V0KFxuICAgIHJlY2VpdmVyLFxuICAgIGNsYXNzQ29uc3RydWN0b3IsXG4gICAgZGVzY3JpcHRvcixcbiAgICB2YWx1ZVxuICApIHtcbiAgICBpZiAocmVjZWl2ZXIgIT09IGNsYXNzQ29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ByaXZhdGUgc3RhdGljIGFjY2VzcyBvZiB3cm9uZyBwcm92ZW5hbmNlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLndyaXRhYmxlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gc2V0IHJlYWQgb25seSBwcml2YXRlIGZpZWxkJyk7XG4gICAgfVxuXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc1N0YXRpY1ByaXZhdGVNZXRob2RHZXQocmVjZWl2ZXIsIGNsYXNzQ29uc3RydWN0b3IsIG1ldGhvZCkge1xuICAgIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJpdmF0ZSBzdGF0aWMgYWNjZXNzIG9mIHdyb25nIHByb3ZlbmFuY2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzU3RhdGljUHJpdmF0ZU1ldGhvZFNldCgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gc2V0IHJlYWQgb25seSBzdGF0aWMgcHJpdmF0ZSBmaWVsZCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlY29yYXRlKGRlY29yYXRvcnMsIGZhY3RvcnksIHN1cGVyQ2xhc3MsIG1peGlucykge1xuICAgIHZhciBhcGkgPSBfZ2V0RGVjb3JhdG9yc0FwaSgpO1xuXG4gICAgaWYgKG1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXhpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXBpID0gbWl4aW5zW2ldKGFwaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHIgPSBmYWN0b3J5KGZ1bmN0aW9uIGluaXRpYWxpemUoTykge1xuICAgICAgYXBpLmluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzKE8sIGRlY29yYXRlZC5lbGVtZW50cyk7XG4gICAgfSwgc3VwZXJDbGFzcyk7XG4gICAgdmFyIGRlY29yYXRlZCA9IGFwaS5kZWNvcmF0ZUNsYXNzKFxuICAgICAgX2NvYWxlc2NlQ2xhc3NFbGVtZW50cyhyLmQubWFwKF9jcmVhdGVFbGVtZW50RGVzY3JpcHRvcikpLFxuICAgICAgZGVjb3JhdG9yc1xuICAgICk7XG4gICAgYXBpLmluaXRpYWxpemVDbGFzc0VsZW1lbnRzKHIuRiwgZGVjb3JhdGVkLmVsZW1lbnRzKTtcbiAgICByZXR1cm4gYXBpLnJ1bkNsYXNzRmluaXNoZXJzKHIuRiwgZGVjb3JhdGVkLmZpbmlzaGVycyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0RGVjb3JhdG9yc0FwaSgpIHtcbiAgICBfZ2V0RGVjb3JhdG9yc0FwaSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFwaTtcbiAgICB9O1xuXG4gICAgdmFyIGFwaSA9IHtcbiAgICAgIGVsZW1lbnRzRGVmaW5pdGlvbk9yZGVyOiBbWydtZXRob2QnXSwgWydmaWVsZCddXSxcbiAgICAgIGluaXRpYWxpemVJbnN0YW5jZUVsZW1lbnRzOiBmdW5jdGlvbihPLCBlbGVtZW50cykge1xuICAgICAgICBbJ21ldGhvZCcsICdmaWVsZCddLmZvckVhY2goZnVuY3Rpb24oa2luZCkge1xuICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0ga2luZCAmJiBlbGVtZW50LnBsYWNlbWVudCA9PT0gJ293bicpIHtcbiAgICAgICAgICAgICAgdGhpcy5kZWZpbmVDbGFzc0VsZW1lbnQoTywgZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSxcbiAgICAgIGluaXRpYWxpemVDbGFzc0VsZW1lbnRzOiBmdW5jdGlvbihGLCBlbGVtZW50cykge1xuICAgICAgICB2YXIgcHJvdG8gPSBGLnByb3RvdHlwZTtcbiAgICAgICAgWydtZXRob2QnLCAnZmllbGQnXS5mb3JFYWNoKGZ1bmN0aW9uKGtpbmQpIHtcbiAgICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSBlbGVtZW50LnBsYWNlbWVudDtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBlbGVtZW50LmtpbmQgPT09IGtpbmQgJiZcbiAgICAgICAgICAgICAgKHBsYWNlbWVudCA9PT0gJ3N0YXRpYycgfHwgcGxhY2VtZW50ID09PSAncHJvdG90eXBlJylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXIgPSBwbGFjZW1lbnQgPT09ICdzdGF0aWMnID8gRiA6IHByb3RvO1xuICAgICAgICAgICAgICB0aGlzLmRlZmluZUNsYXNzRWxlbWVudChyZWNlaXZlciwgZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSxcbiAgICAgIGRlZmluZUNsYXNzRWxlbWVudDogZnVuY3Rpb24ocmVjZWl2ZXIsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gJ2ZpZWxkJykge1xuICAgICAgICAgIHZhciBpbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBkZXNjcmlwdG9yLndyaXRhYmxlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICAgICAgICAgIHZhbHVlOiBpbml0aWFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbGl6ZXIuY2FsbChyZWNlaXZlcilcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBlbGVtZW50LmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9LFxuICAgICAgZGVjb3JhdGVDbGFzczogZnVuY3Rpb24oZWxlbWVudHMsIGRlY29yYXRvcnMpIHtcbiAgICAgICAgdmFyIG5ld0VsZW1lbnRzID0gW107XG4gICAgICAgIHZhciBmaW5pc2hlcnMgPSBbXTtcbiAgICAgICAgdmFyIHBsYWNlbWVudHMgPSB7XG4gICAgICAgICAgc3RhdGljOiBbXSxcbiAgICAgICAgICBwcm90b3R5cGU6IFtdLFxuICAgICAgICAgIG93bjogW11cbiAgICAgICAgfTtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKCFfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSkgcmV0dXJuIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgdmFyIGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMgPSB0aGlzLmRlY29yYXRlRWxlbWVudChcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBwbGFjZW1lbnRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnRGaW5pc2hlcnNFeHRyYXMuZWxlbWVudCk7XG4gICAgICAgICAgbmV3RWxlbWVudHMucHVzaC5hcHBseShuZXdFbGVtZW50cywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5leHRyYXMpO1xuICAgICAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5maW5pc2hlcnMpO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICBpZiAoIWRlY29yYXRvcnMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWxlbWVudHM6IG5ld0VsZW1lbnRzLFxuICAgICAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZGVjb3JhdGVDb25zdHJ1Y3RvcihuZXdFbGVtZW50cywgZGVjb3JhdG9ycyk7XG4gICAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgcmVzdWx0LmZpbmlzaGVycyk7XG4gICAgICAgIHJlc3VsdC5maW5pc2hlcnMgPSBmaW5pc2hlcnM7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgYWRkRWxlbWVudFBsYWNlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgcGxhY2VtZW50cywgc2lsZW50KSB7XG4gICAgICAgIHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07XG5cbiAgICAgICAgaWYgKCFzaWxlbnQgJiYga2V5cy5pbmRleE9mKGVsZW1lbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEdXBsaWNhdGVkIGVsZW1lbnQgKCcgKyBlbGVtZW50LmtleSArICcpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2goZWxlbWVudC5rZXkpO1xuICAgICAgfSxcbiAgICAgIGRlY29yYXRlRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgcGxhY2VtZW50cykge1xuICAgICAgICB2YXIgZXh0cmFzID0gW107XG4gICAgICAgIHZhciBmaW5pc2hlcnMgPSBbXTtcblxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBkZWNvcmF0b3JzID0gZWxlbWVudC5kZWNvcmF0b3JzLCBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxO1xuICAgICAgICAgIGkgPj0gMDtcbiAgICAgICAgICBpLS1cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGtleXMgPSBwbGFjZW1lbnRzW2VsZW1lbnQucGxhY2VtZW50XTtcbiAgICAgICAgICBrZXlzLnNwbGljZShrZXlzLmluZGV4T2YoZWxlbWVudC5rZXkpLCAxKTtcbiAgICAgICAgICB2YXIgZWxlbWVudE9iamVjdCA9IHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpO1xuICAgICAgICAgIHZhciBlbGVtZW50RmluaXNoZXJFeHRyYXMgPSB0aGlzLnRvRWxlbWVudEZpbmlzaGVyRXh0cmFzKFxuICAgICAgICAgICAgKDAsIGRlY29yYXRvcnNbaV0pKGVsZW1lbnRPYmplY3QpIHx8IGVsZW1lbnRPYmplY3RcbiAgICAgICAgICApO1xuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZWxlbWVudDtcbiAgICAgICAgICB0aGlzLmFkZEVsZW1lbnRQbGFjZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cyk7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudEZpbmlzaGVyRXh0cmFzLmZpbmlzaGVyKSB7XG4gICAgICAgICAgICBmaW5pc2hlcnMucHVzaChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuZXdFeHRyYXMgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZXh0cmFzO1xuXG4gICAgICAgICAgaWYgKG5ld0V4dHJhcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdFeHRyYXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50UGxhY2VtZW50KG5ld0V4dHJhc1tqXSwgcGxhY2VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV4dHJhcy5wdXNoLmFwcGx5KGV4dHJhcywgbmV3RXh0cmFzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnMsXG4gICAgICAgICAgZXh0cmFzOiBleHRyYXNcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBkZWNvcmF0ZUNvbnN0cnVjdG9yOiBmdW5jdGlvbihlbGVtZW50cywgZGVjb3JhdG9ycykge1xuICAgICAgICB2YXIgZmluaXNoZXJzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgb2JqID0gdGhpcy5mcm9tQ2xhc3NEZXNjcmlwdG9yKGVsZW1lbnRzKTtcbiAgICAgICAgICB2YXIgZWxlbWVudHNBbmRGaW5pc2hlciA9IHRoaXMudG9DbGFzc0Rlc2NyaXB0b3IoXG4gICAgICAgICAgICAoMCwgZGVjb3JhdG9yc1tpXSkob2JqKSB8fCBvYmpcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZmluaXNoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50c0FuZEZpbmlzaGVyLmVsZW1lbnRzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICAgICAgICBmb3IgKHZhciBrID0gaiArIDE7IGsgPCBlbGVtZW50cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2pdLmtleSA9PT0gZWxlbWVudHNba10ua2V5ICYmXG4gICAgICAgICAgICAgICAgICBlbGVtZW50c1tqXS5wbGFjZW1lbnQgPT09IGVsZW1lbnRzW2tdLnBsYWNlbWVudFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ0R1cGxpY2F0ZWQgZWxlbWVudCAoJyArIGVsZW1lbnRzW2pdLmtleSArICcpJ1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgICAgICBmaW5pc2hlcnM6IGZpbmlzaGVyc1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGZyb21FbGVtZW50RGVzY3JpcHRvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgIGtpbmQ6IGVsZW1lbnQua2luZCxcbiAgICAgICAgICBrZXk6IGVsZW1lbnQua2V5LFxuICAgICAgICAgIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsXG4gICAgICAgICAgZGVzY3JpcHRvcjogZWxlbWVudC5kZXNjcmlwdG9yXG4gICAgICAgIH07XG4gICAgICAgIHZhciBkZXNjID0ge1xuICAgICAgICAgIHZhbHVlOiAnRGVzY3JpcHRvcicsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFN5bWJvbC50b1N0cmluZ1RhZywgZGVzYyk7XG4gICAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09ICdmaWVsZCcpIG9iai5pbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgICB9LFxuICAgICAgdG9FbGVtZW50RGVzY3JpcHRvcnM6IGZ1bmN0aW9uKGVsZW1lbnRPYmplY3RzKSB7XG4gICAgICAgIGlmIChlbGVtZW50T2JqZWN0cyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIHJldHVybiBfdG9BcnJheShlbGVtZW50T2JqZWN0cykubWFwKGZ1bmN0aW9uKGVsZW1lbnRPYmplY3QpIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTtcbiAgICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoXG4gICAgICAgICAgICBlbGVtZW50T2JqZWN0LFxuICAgICAgICAgICAgJ2ZpbmlzaGVyJyxcbiAgICAgICAgICAgICdBbiBlbGVtZW50IGRlc2NyaXB0b3InXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoXG4gICAgICAgICAgICBlbGVtZW50T2JqZWN0LFxuICAgICAgICAgICAgJ2V4dHJhcycsXG4gICAgICAgICAgICAnQW4gZWxlbWVudCBkZXNjcmlwdG9yJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHRvRWxlbWVudERlc2NyaXB0b3I6IGZ1bmN0aW9uKGVsZW1lbnRPYmplY3QpIHtcbiAgICAgICAgdmFyIGtpbmQgPSBTdHJpbmcoZWxlbWVudE9iamVjdC5raW5kKTtcblxuICAgICAgICBpZiAoa2luZCAhPT0gJ21ldGhvZCcgJiYga2luZCAhPT0gJ2ZpZWxkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAnQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIGVpdGhlciBcIm1ldGhvZFwiIG9yJyArXG4gICAgICAgICAgICAgICcgXCJmaWVsZFwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3Igd2l0aCcgK1xuICAgICAgICAgICAgICAnIC5raW5kIFwiJyArXG4gICAgICAgICAgICAgIGtpbmQgK1xuICAgICAgICAgICAgICAnXCInXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShlbGVtZW50T2JqZWN0LmtleSk7XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IFN0cmluZyhlbGVtZW50T2JqZWN0LnBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBsYWNlbWVudCAhPT0gJ3N0YXRpYycgJiZcbiAgICAgICAgICBwbGFjZW1lbnQgIT09ICdwcm90b3R5cGUnICYmXG4gICAgICAgICAgcGxhY2VtZW50ICE9PSAnb3duJ1xuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0FuIGVsZW1lbnQgZGVzY3JpcHRvclxcJ3MgLnBsYWNlbWVudCBwcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZiBcInN0YXRpY1wiLCcgK1xuICAgICAgICAgICAgICAnIFwicHJvdG90eXBlXCIgb3IgXCJvd25cIiwgYnV0IGEgZGVjb3JhdG9yIGNyZWF0ZWQgYW4gZWxlbWVudCBkZXNjcmlwdG9yJyArXG4gICAgICAgICAgICAgICcgd2l0aCAucGxhY2VtZW50IFwiJyArXG4gICAgICAgICAgICAgIHBsYWNlbWVudCArXG4gICAgICAgICAgICAgICdcIidcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50T2JqZWN0LmRlc2NyaXB0b3I7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShcbiAgICAgICAgICBlbGVtZW50T2JqZWN0LFxuICAgICAgICAgICdlbGVtZW50cycsXG4gICAgICAgICAgJ0FuIGVsZW1lbnQgZGVzY3JpcHRvcidcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgICBkZXNjcmlwdG9yOiBPYmplY3QuYXNzaWduKHt9LCBkZXNjcmlwdG9yKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChraW5kICE9PSAnZmllbGQnKSB7XG4gICAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KFxuICAgICAgICAgICAgZWxlbWVudE9iamVjdCxcbiAgICAgICAgICAgICdpbml0aWFsaXplcicsXG4gICAgICAgICAgICAnQSBtZXRob2QgZGVzY3JpcHRvcidcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShcbiAgICAgICAgICAgIGRlc2NyaXB0b3IsXG4gICAgICAgICAgICAnZ2V0JyxcbiAgICAgICAgICAgICdUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3InXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkoXG4gICAgICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgJ3NldCcsXG4gICAgICAgICAgICAnVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5kaXNhbGxvd1Byb3BlcnR5KFxuICAgICAgICAgICAgZGVzY3JpcHRvcixcbiAgICAgICAgICAgICd2YWx1ZScsXG4gICAgICAgICAgICAnVGhlIHByb3BlcnR5IGRlc2NyaXB0b3Igb2YgYSBmaWVsZCBkZXNjcmlwdG9yJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZWxlbWVudC5pbml0aWFsaXplciA9IGVsZW1lbnRPYmplY3QuaW5pdGlhbGl6ZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0sXG4gICAgICB0b0VsZW1lbnRGaW5pc2hlckV4dHJhczogZnVuY3Rpb24oZWxlbWVudE9iamVjdCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTtcblxuICAgICAgICB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KGVsZW1lbnRPYmplY3QsICdmaW5pc2hlcicpO1xuXG4gICAgICAgIHZhciBleHRyYXMgPSB0aGlzLnRvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3QuZXh0cmFzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgIGZpbmlzaGVyOiBmaW5pc2hlcixcbiAgICAgICAgICBleHRyYXM6IGV4dHJhc1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGZyb21DbGFzc0Rlc2NyaXB0b3I6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAga2luZDogJ2NsYXNzJyxcbiAgICAgICAgICBlbGVtZW50czogZWxlbWVudHMubWFwKHRoaXMuZnJvbUVsZW1lbnREZXNjcmlwdG9yLCB0aGlzKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZGVzYyA9IHtcbiAgICAgICAgICB2YWx1ZTogJ0Rlc2NyaXB0b3InLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSxcbiAgICAgIHRvQ2xhc3NEZXNjcmlwdG9yOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgdmFyIGtpbmQgPSBTdHJpbmcob2JqLmtpbmQpO1xuXG4gICAgICAgIGlmIChraW5kICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdBIGNsYXNzIGRlc2NyaXB0b3JcXCdzIC5raW5kIHByb3BlcnR5IG11c3QgYmUgXCJjbGFzc1wiLCBidXQgYSBkZWNvcmF0b3InICtcbiAgICAgICAgICAgICAgJyBjcmVhdGVkIGEgY2xhc3MgZGVzY3JpcHRvciB3aXRoIC5raW5kIFwiJyArXG4gICAgICAgICAgICAgIGtpbmQgK1xuICAgICAgICAgICAgICAnXCInXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosICdrZXknLCAnQSBjbGFzcyBkZXNjcmlwdG9yJyk7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosICdwbGFjZW1lbnQnLCAnQSBjbGFzcyBkZXNjcmlwdG9yJyk7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosICdkZXNjcmlwdG9yJywgJ0EgY2xhc3MgZGVzY3JpcHRvcicpO1xuICAgICAgICB0aGlzLmRpc2FsbG93UHJvcGVydHkob2JqLCAnaW5pdGlhbGl6ZXInLCAnQSBjbGFzcyBkZXNjcmlwdG9yJyk7XG4gICAgICAgIHRoaXMuZGlzYWxsb3dQcm9wZXJ0eShvYmosICdleHRyYXMnLCAnQSBjbGFzcyBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgdmFyIGZpbmlzaGVyID0gX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eShvYmosICdmaW5pc2hlcicpO1xuXG4gICAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMudG9FbGVtZW50RGVzY3JpcHRvcnMob2JqLmVsZW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXG4gICAgICAgICAgZmluaXNoZXI6IGZpbmlzaGVyXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgcnVuQ2xhc3NGaW5pc2hlcnM6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmaW5pc2hlcnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaW5pc2hlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmV3Q29uc3RydWN0b3IgPSAoMCwgZmluaXNoZXJzW2ldKShjb25zdHJ1Y3Rvcik7XG5cbiAgICAgICAgICBpZiAobmV3Q29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaW5pc2hlcnMgbXVzdCByZXR1cm4gYSBjb25zdHJ1Y3Rvci4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3RydWN0b3IgPSBuZXdDb25zdHJ1Y3RvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3I7XG4gICAgICB9LFxuICAgICAgZGlzYWxsb3dQcm9wZXJ0eTogZnVuY3Rpb24ob2JqLCBuYW1lLCBvYmplY3RUeXBlKSB7XG4gICAgICAgIGlmIChvYmpbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICBvYmplY3RUeXBlICsgXCIgY2FuJ3QgaGF2ZSBhIC5cIiArIG5hbWUgKyAnIHByb3BlcnR5LidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXBpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKGRlZikge1xuICAgIHZhciBrZXkgPSBfdG9Qcm9wZXJ0eUtleShkZWYua2V5KTtcblxuICAgIHZhciBkZXNjcmlwdG9yO1xuXG4gICAgaWYgKGRlZi5raW5kID09PSAnbWV0aG9kJykge1xuICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgdmFsdWU6IGRlZi52YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gJ2dldCcpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgIGdldDogZGVmLnZhbHVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09ICdzZXQnKSB7XG4gICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICBzZXQ6IGRlZi52YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSAnZmllbGQnKSB7XG4gICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAga2luZDogZGVmLmtpbmQgPT09ICdmaWVsZCcgPyAnZmllbGQnIDogJ21ldGhvZCcsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIHBsYWNlbWVudDogZGVmLnN0YXRpY1xuICAgICAgICA/ICdzdGF0aWMnXG4gICAgICAgIDogZGVmLmtpbmQgPT09ICdmaWVsZCdcbiAgICAgICAgPyAnb3duJ1xuICAgICAgICA6ICdwcm90b3R5cGUnLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvclxuICAgIH07XG4gICAgaWYgKGRlZi5kZWNvcmF0b3JzKSBlbGVtZW50LmRlY29yYXRvcnMgPSBkZWYuZGVjb3JhdG9ycztcbiAgICBpZiAoZGVmLmtpbmQgPT09ICdmaWVsZCcpIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPSBkZWYudmFsdWU7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpIHtcbiAgICBpZiAoZWxlbWVudC5kZXNjcmlwdG9yLmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdGhlci5kZXNjcmlwdG9yLmdldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5nZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyLmRlc2NyaXB0b3Iuc2V0ID0gZWxlbWVudC5kZXNjcmlwdG9yLnNldDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY29hbGVzY2VDbGFzc0VsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgdmFyIG5ld0VsZW1lbnRzID0gW107XG5cbiAgICB2YXIgaXNTYW1lRWxlbWVudCA9IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBvdGhlci5raW5kID09PSAnbWV0aG9kJyAmJlxuICAgICAgICBvdGhlci5rZXkgPT09IGVsZW1lbnQua2V5ICYmXG4gICAgICAgIG90aGVyLnBsYWNlbWVudCA9PT0gZWxlbWVudC5wbGFjZW1lbnRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICB2YXIgb3RoZXI7XG5cbiAgICAgIGlmIChcbiAgICAgICAgZWxlbWVudC5raW5kID09PSAnbWV0aG9kJyAmJlxuICAgICAgICAob3RoZXIgPSBuZXdFbGVtZW50cy5maW5kKGlzU2FtZUVsZW1lbnQpKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBfaXNEYXRhRGVzY3JpcHRvcihlbGVtZW50LmRlc2NyaXB0b3IpIHx8XG4gICAgICAgICAgX2lzRGF0YURlc2NyaXB0b3Iob3RoZXIuZGVzY3JpcHRvcilcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHx8IF9oYXNEZWNvcmF0b3JzKG90aGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFxuICAgICAgICAgICAgICAnRHVwbGljYXRlZCBtZXRob2RzICgnICsgZWxlbWVudC5rZXkgKyBcIikgY2FuJ3QgYmUgZGVjb3JhdGVkLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG90aGVyLmRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcbiAgICAgICAgICAgICAgICBcIkRlY29yYXRvcnMgY2FuJ3QgYmUgcGxhY2VkIG9uIGRpZmZlcmVudCBhY2Nlc3NvcnMgd2l0aCBmb3IgXCIgK1xuICAgICAgICAgICAgICAgICAgJ3RoZSBzYW1lIHByb3BlcnR5ICgnICtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQua2V5ICtcbiAgICAgICAgICAgICAgICAgICcpLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3RoZXIuZGVjb3JhdG9ycyA9IGVsZW1lbnQuZGVjb3JhdG9ycztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfY29hbGVzY2VHZXR0ZXJTZXR0ZXIoZWxlbWVudCwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdFbGVtZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kZWNvcmF0b3JzICYmIGVsZW1lbnQuZGVjb3JhdG9ycy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBfaXNEYXRhRGVzY3JpcHRvcihkZXNjKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGRlc2MgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgIShkZXNjLnZhbHVlID09PSB1bmRlZmluZWQgJiYgZGVzYy53cml0YWJsZSA9PT0gdW5kZWZpbmVkKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgbmFtZSkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkICdcIiArIG5hbWUgKyBcIicgdG8gYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kR2V0KHJlY2VpdmVyLCBwcml2YXRlU2V0LCBmbikge1xuICAgIGlmICghcHJpdmF0ZVNldC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZU1ldGhvZFNldCgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdHRlbXB0ZWQgdG8gcmVhc3NpZ24gcHJpdmF0ZSBtZXRob2QnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF93cmFwUmVnRXhwKHJlLCBncm91cHMpIHtcbiAgICBfd3JhcFJlZ0V4cCA9IGZ1bmN0aW9uKHJlLCBncm91cHMpIHtcbiAgICAgIHJldHVybiBuZXcgQmFiZWxSZWdFeHAocmUsIGdyb3Vwcyk7XG4gICAgfTtcblxuICAgIHZhciBfUmVnRXhwID0gX3dyYXBOYXRpdmVTdXBlcihSZWdFeHApO1xuXG4gICAgdmFyIF9zdXBlciA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbiAgICB2YXIgX2dyb3VwcyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgICBmdW5jdGlvbiBCYWJlbFJlZ0V4cChyZSwgZ3JvdXBzKSB7XG4gICAgICB2YXIgX3RoaXMgPSBfUmVnRXhwLmNhbGwodGhpcywgcmUpO1xuXG4gICAgICBfZ3JvdXBzLnNldChfdGhpcywgZ3JvdXBzKTtcblxuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIF9pbmhlcml0cyhCYWJlbFJlZ0V4cCwgX1JlZ0V4cCk7XG5cbiAgICBCYWJlbFJlZ0V4cC5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uKHN0cikge1xuICAgICAgdmFyIHJlc3VsdCA9IF9zdXBlci5leGVjLmNhbGwodGhpcywgc3RyKTtcblxuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0Lmdyb3VwcyA9IGJ1aWxkR3JvdXBzKHJlc3VsdCwgdGhpcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBCYWJlbFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLnJlcGxhY2VdID0gZnVuY3Rpb24oc3RyLCBzdWJzdGl0dXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygc3Vic3RpdHV0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgZ3JvdXBzID0gX2dyb3Vwcy5nZXQodGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHN0cixcbiAgICAgICAgICBzdWJzdGl0dXRpb24ucmVwbGFjZSgvXFwkPChbXj5dKyk+L2csIGZ1bmN0aW9uKF8sIG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiAnJCcgKyBncm91cHNbbmFtZV07XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGFyZ3MucHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2goYnVpbGRHcm91cHMoYXJncywgX3RoaXMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBidWlsZEdyb3VwcyhyZXN1bHQsIHJlKSB7XG4gICAgICB2YXIgZyA9IF9ncm91cHMuZ2V0KHJlKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGcpLnJlZHVjZShmdW5jdGlvbihncm91cHMsIG5hbWUpIHtcbiAgICAgICAgZ3JvdXBzW25hbWVdID0gcmVzdWx0W2dbbmFtZV1dO1xuICAgICAgICByZXR1cm4gZ3JvdXBzO1xuICAgICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF93cmFwUmVnRXhwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICB2YXIgYXJyYXlSZW1vdmUgPSBmdW5jdGlvbiBhcnJheVJlbW92ZShhcnIsIGluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9O1xuXG4gIHZhciBydW4gPSBmdW5jdGlvbiBydW4oY2IsIHN5bmMpIHtcbiAgICBpZiAoc3luYykge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKDEpLnRoZW4oY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KGNiLCAwKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uID0gZnVuY3Rpb24gb24oKSB7XG4gICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgIHZhciBvZmYgPSBmdW5jdGlvbiBvZmYoZXZlbnQsIGNiKSB7XG4gICAgICBhcnJheVJlbW92ZShcbiAgICAgICAgbGlzdGVuZXJzLFxuICAgICAgICBsaXN0ZW5lcnMuZmluZEluZGV4KGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyLmV2ZW50ID09PSBldmVudCAmJiAobGlzdGVuZXIuY2IgPT09IGNiIHx8ICFjYik7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH07XG4gICAgdmFyIF9maXJlID0gZnVuY3Rpb24gZmlyZShldmVudCwgYXJncywgc3luYykge1xuICAgICAgbGlzdGVuZXJzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdGVuZXIuZXZlbnQgPT09IGV2ZW50O1xuICAgICAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGxpc3RlbmVyLmNiO1xuICAgICAgICB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihjYikge1xuICAgICAgICAgIHJldHVybiBydW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICAgICAgICAgIH0sIHN5bmMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBmaXJlU3luYzogZnVuY3Rpb24gZmlyZVN5bmMoZXZlbnQpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSxcbiAgICAgICAgICAgIF9rZXkgPSAxO1xuICAgICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICAgIF9rZXkrK1xuICAgICAgICApIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBfZmlyZShldmVudCwgYXJncywgdHJ1ZSk7XG4gICAgICB9LFxuICAgICAgZmlyZTogZnVuY3Rpb24gZmlyZShldmVudCkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLFxuICAgICAgICAgICAgX2tleTIgPSAxO1xuICAgICAgICAgIF9rZXkyIDwgX2xlbjI7XG4gICAgICAgICAgX2tleTIrK1xuICAgICAgICApIHtcbiAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG4gICAgICAgIF9maXJlKGV2ZW50LCBhcmdzLCBmYWxzZSk7XG4gICAgICB9LFxuICAgICAgb246IGZ1bmN0aW9uIG9uKGV2ZW50LCBjYikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaCh7IGV2ZW50OiBldmVudCwgY2I6IGNiIH0pO1xuICAgICAgfSxcbiAgICAgIG9uT25jZTogZnVuY3Rpb24gb25PbmNlKGV2ZW50LCBfY2IpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBjYjogZnVuY3Rpb24gY2IoKSB7XG4gICAgICAgICAgICBvZmYoZXZlbnQsIF9jYik7XG4gICAgICAgICAgICBfY2IuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb2ZmOiBvZmZcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb3B5T2JqZWN0UHJvcGVydGllc1RvT2JqZWN0ID0gZnVuY3Rpb24gY29weU9iamVjdFByb3BlcnRpZXNUb09iamVjdChcbiAgICBzcmMsXG4gICAgdGFyZ2V0LFxuICAgIGV4Y2x1ZGVkXG4gICkge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNyYylcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuICFleGNsdWRlZC5pbmNsdWRlcyhwcm9wZXJ0eSk7XG4gICAgICB9KVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNyYywga2V5KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH07XG5cbiAgdmFyIFBSSVZBVEUgPSBbXG4gICAgJ2ZpcmUnLFxuICAgICdwcm9jZXNzJyxcbiAgICAncmV2ZXJ0JyxcbiAgICAnbG9hZCcsXG4gICAgJ29uJyxcbiAgICAnb2ZmJyxcbiAgICAnb25PbmNlJyxcbiAgICAncmV0cnlMb2FkJyxcbiAgICAnZXh0ZW5kJyxcbiAgICAnYXJjaGl2ZScsXG4gICAgJ2FyY2hpdmVkJyxcbiAgICAncmVsZWFzZScsXG4gICAgJ3JlbGVhc2VkJyxcbiAgICAncmVxdWVzdFByb2Nlc3NpbmcnLFxuICAgICdmcmVlemUnXG4gIF07XG5cbiAgdmFyIGNyZWF0ZUl0ZW1BUEkgPSBmdW5jdGlvbiBjcmVhdGVJdGVtQVBJKGl0ZW0pIHtcbiAgICB2YXIgYXBpID0ge307XG4gICAgY29weU9iamVjdFByb3BlcnRpZXNUb09iamVjdChpdGVtLCBhcGksIFBSSVZBVEUpO1xuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJlbGVhc2VkSXRlbXMgPSBmdW5jdGlvbiByZW1vdmVSZWxlYXNlZEl0ZW1zKGl0ZW1zKSB7XG4gICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgaWYgKGl0ZW0ucmVsZWFzZWQpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUoaXRlbXMsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgSXRlbVN0YXR1cyA9IHtcbiAgICBJTklUOiAxLFxuICAgIElETEU6IDIsXG4gICAgUFJPQ0VTU0lOR19RVUVVRUQ6IDksXG4gICAgUFJPQ0VTU0lORzogMyxcbiAgICBQUk9DRVNTSU5HX0NPTVBMRVRFOiA1LFxuICAgIFBST0NFU1NJTkdfRVJST1I6IDYsXG4gICAgUFJPQ0VTU0lOR19SRVZFUlRfRVJST1I6IDEwLFxuICAgIExPQURJTkc6IDcsXG4gICAgTE9BRF9FUlJPUjogOFxuICB9O1xuXG4gIHZhciBGaWxlT3JpZ2luID0ge1xuICAgIElOUFVUOiAxLFxuICAgIExJTUJPOiAyLFxuICAgIExPQ0FMOiAzXG4gIH07XG5cbiAgdmFyIGdldE5vbk51bWVyaWMgPSBmdW5jdGlvbiBnZXROb25OdW1lcmljKHN0cikge1xuICAgIHJldHVybiAvW14wLTldKy8uZXhlYyhzdHIpO1xuICB9O1xuXG4gIHZhciBnZXREZWNpbWFsU2VwYXJhdG9yID0gZnVuY3Rpb24gZ2V0RGVjaW1hbFNlcGFyYXRvcigpIHtcbiAgICByZXR1cm4gZ2V0Tm9uTnVtZXJpYygoMS4xKS50b0xvY2FsZVN0cmluZygpKVswXTtcbiAgfTtcblxuICB2YXIgZ2V0VGhvdXNhbmRzU2VwYXJhdG9yID0gZnVuY3Rpb24gZ2V0VGhvdXNhbmRzU2VwYXJhdG9yKCkge1xuICAgIC8vIEFkZGVkIGZvciBicm93c2VycyB0aGF0IGRvIG5vdCByZXR1cm4gdGhlIHRob3VzYW5kcyBzZXBhcmF0b3IgKGhhcHBlbmQgb24gbmF0aXZlIGJyb3dzZXIgQW5kcm9pZCA0LjQuNClcbiAgICAvLyBXZSBjaGVjayBhZ2FpbnN0IHRoZSBub3JtYWwgdG9TdHJpbmcgb3V0cHV0IGFuZCBpZiB0aGV5J3JlIHRoZSBzYW1lIHJldHVybiBhIGNvbW1hIHdoZW4gZGVjaW1hbCBzZXBhcmF0b3IgaXMgYSBkb3RcbiAgICB2YXIgZGVjaW1hbFNlcGFyYXRvciA9IGdldERlY2ltYWxTZXBhcmF0b3IoKTtcbiAgICB2YXIgdGhvdXNhbmRzU3RyaW5nV2l0aFNlcGFyYXRvciA9ICgxMDAwLjApLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgdmFyIHRob3VzYW5kc1N0cmluZ1dpdGhvdXRTZXBhcmF0b3IgPSAoMTAwMC4wKS50b1N0cmluZygpO1xuICAgIGlmICh0aG91c2FuZHNTdHJpbmdXaXRoU2VwYXJhdG9yICE9PSB0aG91c2FuZHNTdHJpbmdXaXRob3V0U2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gZ2V0Tm9uTnVtZXJpYyh0aG91c2FuZHNTdHJpbmdXaXRoU2VwYXJhdG9yKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY2ltYWxTZXBhcmF0b3IgPT09ICcuJyA/ICcsJyA6ICcuJztcbiAgfTtcblxuICB2YXIgVHlwZSA9IHtcbiAgICBCT09MRUFOOiAnYm9vbGVhbicsXG4gICAgSU5UOiAnaW50JyxcbiAgICBOVU1CRVI6ICdudW1iZXInLFxuICAgIFNUUklORzogJ3N0cmluZycsXG4gICAgQVJSQVk6ICdhcnJheScsXG4gICAgT0JKRUNUOiAnb2JqZWN0JyxcbiAgICBGVU5DVElPTjogJ2Z1bmN0aW9uJyxcbiAgICBBQ1RJT046ICdhY3Rpb24nLFxuICAgIFNFUlZFUl9BUEk6ICdzZXJ2ZXJhcGknLFxuICAgIFJFR0VYOiAncmVnZXgnXG4gIH07XG5cbiAgLy8gYWxsIHJlZ2lzdGVyZWQgZmlsdGVyc1xuICB2YXIgZmlsdGVycyA9IFtdO1xuXG4gIC8vIGxvb3BzIG92ZXIgbWF0Y2hpbmcgZmlsdGVycyBhbmQgcGFzc2VzIG9wdGlvbnMgdG8gZWFjaCBmaWx0ZXIsIHJldHVybmluZyB0aGUgbWFwcGVkIHJlc3VsdHNcbiAgdmFyIGFwcGx5RmlsdGVyQ2hhaW4gPSBmdW5jdGlvbiBhcHBseUZpbHRlckNoYWluKGtleSwgdmFsdWUsIHV0aWxzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gZmluZCBtYXRjaGluZyBmaWx0ZXJzIGZvciB0aGlzIGtleVxuICAgICAgdmFyIG1hdGNoaW5nRmlsdGVycyA9IGZpbHRlcnNcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihmKSB7XG4gICAgICAgICAgcmV0dXJuIGYua2V5ID09PSBrZXk7XG4gICAgICAgIH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oZikge1xuICAgICAgICAgIHJldHVybiBmLmNiO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gcmVzb2x2ZSBub3dcbiAgICAgIGlmIChtYXRjaGluZ0ZpbHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGZpcnN0IGZpbHRlciB0byBraWNrIHRoaW5ncyBvZlxuICAgICAgdmFyIGluaXRpYWxGaWx0ZXIgPSBtYXRjaGluZ0ZpbHRlcnMuc2hpZnQoKTtcblxuICAgICAgLy8gY2hhaW4gZmlsdGVyc1xuICAgICAgbWF0Y2hpbmdGaWx0ZXJzXG4gICAgICAgIC5yZWR1Y2UoXG4gICAgICAgICAgLy8gbG9vcCBvdmVyIHByb21pc2VzIHBhc3NpbmcgdmFsdWUgdG8gbmV4dCBwcm9taXNlXG4gICAgICAgICAgZnVuY3Rpb24oY3VycmVudCwgbmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dCh2YWx1ZSwgdXRpbHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8vIGNhbGwgaW5pdGlhbCBmaWx0ZXIsIHdpbGwgcmV0dXJuIGEgcHJvbWlzZVxuICAgICAgICAgIGluaXRpYWxGaWx0ZXIodmFsdWUsIHV0aWxzKVxuXG4gICAgICAgICAgLy8gYWxsIGV4ZWN1dGVkXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYXBwbHlGaWx0ZXJzID0gZnVuY3Rpb24gYXBwbHlGaWx0ZXJzKGtleSwgdmFsdWUsIHV0aWxzKSB7XG4gICAgcmV0dXJuIGZpbHRlcnNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZikge1xuICAgICAgICByZXR1cm4gZi5rZXkgPT09IGtleTtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgcmV0dXJuIGYuY2IodmFsdWUsIHV0aWxzKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIC8vIGFkZHMgYSBuZXcgZmlsdGVyIHRvIHRoZSBsaXN0XG4gIHZhciBhZGRGaWx0ZXIgPSBmdW5jdGlvbiBhZGRGaWx0ZXIoa2V5LCBjYikge1xuICAgIHJldHVybiBmaWx0ZXJzLnB1c2goeyBrZXk6IGtleSwgY2I6IGNiIH0pO1xuICB9O1xuXG4gIHZhciBleHRlbmREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIGV4dGVuZERlZmF1bHRPcHRpb25zKGFkZGl0aW9uYWxPcHRpb25zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgfTtcblxuICB2YXIgZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zKTtcbiAgfTtcblxuICB2YXIgc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0cykge1xuICAgIGZvcmluKG9wdHMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIC8vIGtleSBkb2VzIG5vdCBleGlzdCwgc28gdGhpcyBvcHRpb24gY2Fubm90IGJlIHNldFxuICAgICAgaWYgKCFkZWZhdWx0T3B0aW9uc1trZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHRPcHRpb25zW2tleV1bMF0gPSBnZXRWYWx1ZUJ5VHlwZShcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRPcHRpb25zW2tleV1bMF0sXG4gICAgICAgIGRlZmF1bHRPcHRpb25zW2tleV1bMV1cbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gZGVmYXVsdCBvcHRpb25zIG9uIGFwcFxuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgLy8gdGhlIGlkIHRvIGFkZCB0byB0aGUgcm9vdCBlbGVtZW50XG4gICAgaWQ6IFtudWxsLCBUeXBlLlNUUklOR10sXG5cbiAgICAvLyBpbnB1dCBmaWVsZCBuYW1lIHRvIHVzZVxuICAgIG5hbWU6IFsnZmlsZXBvbmQnLCBUeXBlLlNUUklOR10sXG5cbiAgICAvLyBkaXNhYmxlIHRoZSBmaWVsZFxuICAgIGRpc2FibGVkOiBbZmFsc2UsIFR5cGUuQk9PTEVBTl0sXG5cbiAgICAvLyBjbGFzc25hbWUgdG8gcHV0IG9uIHdyYXBwZXJcbiAgICBjbGFzc05hbWU6IFtudWxsLCBUeXBlLlNUUklOR10sXG5cbiAgICAvLyBpcyB0aGUgZmllbGQgcmVxdWlyZWRcbiAgICByZXF1aXJlZDogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLFxuXG4gICAgLy8gQWxsb3cgbWVkaWEgY2FwdHVyZSB3aGVuIHZhbHVlIGlzIHNldFxuICAgIGNhcHR1cmVNZXRob2Q6IFtudWxsLCBUeXBlLlNUUklOR10sXG4gICAgLy8gLSBcImNhbWVyYVwiLCBcIm1pY3JvcGhvbmVcIiBvciBcImNhbWNvcmRlclwiLFxuICAgIC8vIC0gRG9lcyBub3Qgd29yayB3aXRoIG11bHRpcGxlIG9uIGFwcGxlIGRldmljZXNcbiAgICAvLyAtIElmIHNldCwgYWNjZXB0ZWRGaWxlVHlwZXMgbXVzdCBiZSBtYWRlIHRvIG1hdGNoIHdpdGggbWVkaWEgd2lsZGNhcmQgXCJpbWFnZS8qXCIsIFwiYXVkaW8vKlwiIG9yIFwidmlkZW8vKlwiXG5cbiAgICAvLyBzeW5jIGBhY2NlcHRlZEZpbGVUeXBlc2AgcHJvcGVydHkgd2l0aCBgYWNjZXB0YCBhdHRyaWJ1dGVcbiAgICBhbGxvd1N5bmNBY2NlcHRBdHRyaWJ1dGU6IFt0cnVlLCBUeXBlLkJPT0xFQU5dLFxuXG4gICAgLy8gRmVhdHVyZSB0b2dnbGVzXG4gICAgYWxsb3dEcm9wOiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSwgLy8gQWxsb3cgZHJvcHBpbmcgb2YgZmlsZXNcbiAgICBhbGxvd0Jyb3dzZTogW3RydWUsIFR5cGUuQk9PTEVBTl0sIC8vIEFsbG93IGJyb3dzaW5nIHRoZSBmaWxlIHN5c3RlbVxuICAgIGFsbG93UGFzdGU6IFt0cnVlLCBUeXBlLkJPT0xFQU5dLCAvLyBBbGxvdyBwYXN0aW5nIGZpbGVzXG4gICAgYWxsb3dNdWx0aXBsZTogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLCAvLyBBbGxvdyBtdWx0aXBsZSBmaWxlcyAoZGlzYWJsZWQgYnkgZGVmYXVsdCwgYXMgbXVsdGlwbGUgYXR0cmlidXRlIGlzIGFsc28gcmVxdWlyZWQgb24gaW5wdXQgdG8gYWxsb3cgbXVsdGlwbGUpXG4gICAgYWxsb3dSZXBsYWNlOiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSwgLy8gQWxsb3cgZHJvcHBpbmcgYSBmaWxlIG9uIG90aGVyIGZpbGUgdG8gcmVwbGFjZSBpdCAob25seSB3b3JrcyB3aGVuIG11bHRpcGxlIGlzIHNldCB0byBmYWxzZSlcbiAgICBhbGxvd1JldmVydDogW3RydWUsIFR5cGUuQk9PTEVBTl0sIC8vIEFsbG93cyB1c2VyIHRvIHJldmVydCBmaWxlIHVwbG9hZFxuICAgIGFsbG93UmVtb3ZlOiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSwgLy8gQWxsb3cgdXNlciB0byByZW1vdmUgYSBmaWxlXG4gICAgYWxsb3dQcm9jZXNzOiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSwgLy8gQWxsb3dzIHVzZXIgdG8gcHJvY2VzcyBhIGZpbGUsIHdoZW4gc2V0IHRvIGZhbHNlLCB0aGlzIHJlbW92ZXMgdGhlIGZpbGUgdXBsb2FkIGJ1dHRvblxuICAgIGFsbG93UmVvcmRlcjogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLCAvLyBBbGxvdyByZW9yZGVyaW5nIG9mIGZpbGVzXG4gICAgYWxsb3dEaXJlY3Rvcmllc09ubHk6IFtmYWxzZSwgVHlwZS5CT09MRUFOXSwgLy8gQWxsb3cgb25seSBzZWxlY3RpbmcgZGlyZWN0b3JpZXMgd2l0aCBicm93c2UgKG5vIHN1cHBvcnQgZm9yIGZpbHRlcmluZyBkbmQgYXQgdGhpcyBwb2ludClcblxuICAgIC8vIFJldmVydCBtb2RlXG4gICAgZm9yY2VSZXZlcnQ6IFtmYWxzZSwgVHlwZS5CT09MRUFOXSwgLy8gU2V0IHRvICdmb3JjZScgdG8gcmVxdWlyZSB0aGUgZmlsZSB0byBiZSByZXZlcnRlZCBiZWZvcmUgcmVtb3ZhbFxuXG4gICAgLy8gSW5wdXQgcmVxdWlyZW1lbnRzXG4gICAgbWF4RmlsZXM6IFtudWxsLCBUeXBlLklOVF0sIC8vIE1heCBudW1iZXIgb2YgZmlsZXNcbiAgICBjaGVja1ZhbGlkaXR5OiBbZmFsc2UsIFR5cGUuQk9PTEVBTl0sIC8vIEVuYWJsZXMgY3VzdG9tIHZhbGlkaXR5IG1lc3NhZ2VzXG5cbiAgICAvLyBXaGVyZSB0byBwdXQgZmlsZVxuICAgIGl0ZW1JbnNlcnRMb2NhdGlvbkZyZWVkb206IFt0cnVlLCBUeXBlLkJPT0xFQU5dLCAvLyBTZXQgdG8gZmFsc2UgdG8gYWx3YXlzIGFkZCBpdGVtcyB0byBiZWdpbiBvciBlbmQgb2YgbGlzdFxuICAgIGl0ZW1JbnNlcnRMb2NhdGlvbjogWydiZWZvcmUnLCBUeXBlLlNUUklOR10sIC8vIERlZmF1bHQgaW5kZXggaW4gbGlzdCB0byBhZGQgaXRlbXMgdGhhdCBoYXZlIGJlZW4gZHJvcHBlZCBhdCB0aGUgdG9wIG9mIHRoZSBsaXN0XG4gICAgaXRlbUluc2VydEludGVydmFsOiBbNzUsIFR5cGUuSU5UXSxcblxuICAgIC8vIERyYWcgJ24gRHJvcCByZWxhdGVkXG4gICAgZHJvcE9uUGFnZTogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLCAvLyBBbGxvdyBkcm9wcGluZyBvZiBmaWxlcyBhbnl3aGVyZSBvbiBwYWdlIChwcmV2ZW50cyBicm93c2VyIGZyb20gb3BlbmluZyBmaWxlIGlmIGRyb3BwZWQgb3V0c2lkZSBvZiBVcClcbiAgICBkcm9wT25FbGVtZW50OiBbdHJ1ZSwgVHlwZS5CT09MRUFOXSwgLy8gRHJvcCBuZWVkcyB0byBoYXBwZW4gb24gZWxlbWVudCAoc2V0IHRvIGZhbHNlIHRvIGFsc28gbG9hZCBkcm9wcyBvdXRzaWRlIG9mIFVwKVxuICAgIGRyb3BWYWxpZGF0aW9uOiBbZmFsc2UsIFR5cGUuQk9PTEVBTl0sIC8vIEVuYWJsZSBvciBkaXNhYmxlIHZhbGlkYXRpbmcgZmlsZXMgb24gZHJvcFxuICAgIGlnbm9yZWRGaWxlczogW1snLmRzX3N0b3JlJywgJ3RodW1icy5kYicsICdkZXNrdG9wLmluaSddLCBUeXBlLkFSUkFZXSxcblxuICAgIC8vIFVwbG9hZCByZWxhdGVkXG4gICAgaW5zdGFudFVwbG9hZDogW3RydWUsIFR5cGUuQk9PTEVBTl0sIC8vIFNob3VsZCB1cGxvYWQgZmlsZXMgaW1taWRpYXRlbHkgb24gZHJvcFxuICAgIG1heFBhcmFsbGVsVXBsb2FkczogWzIsIFR5cGUuSU5UXSwgLy8gTWF4aW11bSBmaWxlcyB0byB1cGxvYWQgaW4gcGFyYWxsZWxcblxuICAgIC8vIENodW5rc1xuICAgIGNodW5rVXBsb2FkczogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLCAvLyBFbmFibGUgY2h1bmtlZCB1cGxvYWRzXG4gICAgY2h1bmtGb3JjZTogW2ZhbHNlLCBUeXBlLkJPT0xFQU5dLCAvLyBGb3JjZSB1c2Ugb2YgY2h1bmsgdXBsb2FkcyBldmVuIGZvciBmaWxlcyBzbWFsbGVyIHRoYW4gY2h1bmsgc2l6ZVxuICAgIGNodW5rU2l6ZTogWzUwMDAwMDAsIFR5cGUuSU5UXSwgLy8gU2l6ZSBvZiBjaHVua3MgKDVNQiBkZWZhdWx0KVxuICAgIGNodW5rUmV0cnlEZWxheXM6IFtbNTAwLCAxMDAwLCAzMDAwXSwgVHlwZS5BcnJheV0sIC8vIEFtb3VudCBvZiB0aW1lcyB0byByZXRyeSB1cGxvYWQgb2YgYSBjaHVuayB3aGVuIGl0IGZhaWxzXG5cbiAgICAvLyBUaGUgc2VydmVyIGFwaSBlbmQgcG9pbnRzIHRvIHVzZSBmb3IgdXBsb2FkaW5nIChzZWUgZG9jcylcbiAgICBzZXJ2ZXI6IFtudWxsLCBUeXBlLlNFUlZFUl9BUEldLFxuXG4gICAgLy8gTGFiZWxzIGFuZCBzdGF0dXMgbWVzc2FnZXNcbiAgICBsYWJlbERlY2ltYWxTZXBhcmF0b3I6IFtnZXREZWNpbWFsU2VwYXJhdG9yKCksIFR5cGUuU1RSSU5HXSwgLy8gRGVmYXVsdCBpcyBsb2NhbGUgc2VwYXJhdG9yXG4gICAgbGFiZWxUaG91c2FuZHNTZXBhcmF0b3I6IFtnZXRUaG91c2FuZHNTZXBhcmF0b3IoKSwgVHlwZS5TVFJJTkddLCAvLyBEZWZhdWx0IGlzIGxvY2FsZSBzZXBhcmF0b3JcblxuICAgIGxhYmVsSWRsZTogW1xuICAgICAgJ0RyYWcgJiBEcm9wIHlvdXIgZmlsZXMgb3IgPHNwYW4gY2xhc3M9XCJmaWxlcG9uZC0tbGFiZWwtYWN0aW9uXCI+QnJvd3NlPC9zcGFuPicsXG4gICAgICBUeXBlLlNUUklOR1xuICAgIF0sXG4gICAgbGFiZWxJbnZhbGlkRmllbGQ6IFsnRmllbGQgY29udGFpbnMgaW52YWxpZCBmaWxlcycsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbEZpbGVXYWl0aW5nRm9yU2l6ZTogWydXYWl0aW5nIGZvciBzaXplJywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsRmlsZVNpemVOb3RBdmFpbGFibGU6IFsnU2l6ZSBub3QgYXZhaWxhYmxlJywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsRmlsZUNvdW50U2luZ3VsYXI6IFsnZmlsZSBpbiBsaXN0JywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsRmlsZUNvdW50UGx1cmFsOiBbJ2ZpbGVzIGluIGxpc3QnLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxGaWxlTG9hZGluZzogWydMb2FkaW5nJywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsRmlsZUFkZGVkOiBbJ0FkZGVkJywgVHlwZS5TVFJJTkddLCAvLyBhc3Npc3RpdmUgb25seVxuICAgIGxhYmVsRmlsZUxvYWRFcnJvcjogWydFcnJvciBkdXJpbmcgbG9hZCcsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbEZpbGVSZW1vdmVkOiBbJ1JlbW92ZWQnLCBUeXBlLlNUUklOR10sIC8vIGFzc2lzdGl2ZSBvbmx5XG4gICAgbGFiZWxGaWxlUmVtb3ZlRXJyb3I6IFsnRXJyb3IgZHVyaW5nIHJlbW92ZScsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbEZpbGVQcm9jZXNzaW5nOiBbJ1VwbG9hZGluZycsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbEZpbGVQcm9jZXNzaW5nQ29tcGxldGU6IFsnVXBsb2FkIGNvbXBsZXRlJywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkOiBbJ1VwbG9hZCBjYW5jZWxsZWQnLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxGaWxlUHJvY2Vzc2luZ0Vycm9yOiBbJ0Vycm9yIGR1cmluZyB1cGxvYWQnLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxGaWxlUHJvY2Vzc2luZ1JldmVydEVycm9yOiBbJ0Vycm9yIGR1cmluZyByZXZlcnQnLCBUeXBlLlNUUklOR10sXG5cbiAgICBsYWJlbFRhcFRvQ2FuY2VsOiBbJ3RhcCB0byBjYW5jZWwnLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxUYXBUb1JldHJ5OiBbJ3RhcCB0byByZXRyeScsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbFRhcFRvVW5kbzogWyd0YXAgdG8gdW5kbycsIFR5cGUuU1RSSU5HXSxcblxuICAgIGxhYmVsQnV0dG9uUmVtb3ZlSXRlbTogWydSZW1vdmUnLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkOiBbJ0Fib3J0JywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsQnV0dG9uUmV0cnlJdGVtTG9hZDogWydSZXRyeScsIFR5cGUuU1RSSU5HXSxcbiAgICBsYWJlbEJ1dHRvbkFib3J0SXRlbVByb2Nlc3Npbmc6IFsnQ2FuY2VsJywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsQnV0dG9uVW5kb0l0ZW1Qcm9jZXNzaW5nOiBbJ1VuZG8nLCBUeXBlLlNUUklOR10sXG4gICAgbGFiZWxCdXR0b25SZXRyeUl0ZW1Qcm9jZXNzaW5nOiBbJ1JldHJ5JywgVHlwZS5TVFJJTkddLFxuICAgIGxhYmVsQnV0dG9uUHJvY2Vzc0l0ZW06IFsnVXBsb2FkJywgVHlwZS5TVFJJTkddLFxuXG4gICAgLy8gbWFrZSBzdXJlIHdpZHRoIGFuZCBoZWlnaHQgcGx1cyB2aWV3cG94IGFyZSBldmVuIG51bWJlcnMgc28gaWNvbnMgYXJlIG5pY2VseSBjZW50ZXJlZFxuICAgIGljb25SZW1vdmU6IFtcbiAgICAgICc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMS41ODYgMTNsLTIuMjkzIDIuMjkzYTEgMSAwIDAgMCAxLjQxNCAxLjQxNEwxMyAxNC40MTRsMi4yOTMgMi4yOTNhMSAxIDAgMCAwIDEuNDE0LTEuNDE0TDE0LjQxNCAxM2wyLjI5My0yLjI5M2ExIDEgMCAwIDAtMS40MTQtMS40MTRMMTMgMTEuNTg2bC0yLjI5My0yLjI5M2ExIDEgMCAwIDAtMS40MTQgMS40MTRMMTEuNTg2IDEzelwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBmaWxsLXJ1bGU9XCJub256ZXJvXCIvPjwvc3ZnPicsXG4gICAgICBUeXBlLlNUUklOR1xuICAgIF0sXG5cbiAgICBpY29uUHJvY2VzczogW1xuICAgICAgJzxzdmcgd2lkdGg9XCIyNlwiIGhlaWdodD1cIjI2XCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTE0IDEwLjQxNHYzLjU4NWExIDEgMCAwIDEtMiAwdi0zLjU4NWwtMS4yOTMgMS4yOTNhMSAxIDAgMCAxLTEuNDE0LTEuNDE1bDMtM2ExIDEgMCAwIDEgMS40MTQgMGwzIDNhMSAxIDAgMCAxLTEuNDE0IDEuNDE1TDE0IDEwLjQxNHpNOSAxOGExIDEgMCAwIDEgMC0yaDhhMSAxIDAgMCAxIDAgMkg5elwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIvPjwvc3ZnPicsXG4gICAgICBUeXBlLlNUUklOR1xuICAgIF0sXG5cbiAgICBpY29uUmV0cnk6IFtcbiAgICAgICc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMC44MSA5LjE4NWwtLjAzOC4wMkE0Ljk5NyA0Ljk5NyAwIDAgMCA4IDEzLjY4M2E1IDUgMCAwIDAgNSA1IDUgNSAwIDAgMCA1LTUgMSAxIDAgMCAxIDIgMEE3IDcgMCAxIDEgOS43MjIgNy40OTZsLS44NDItLjIxYS45OTkuOTk5IDAgMSAxIC40ODQtMS45NGwzLjIzLjgwNmMuNTM1LjEzMy44Ni42NzUuNzMgMS4yMWwtLjgwNCAzLjIzM2EuOTk3Ljk5NyAwIDAgMS0xLjIxLjczLjk5Ny45OTcgMCAwIDEtLjczLTEuMjFsLjIzLS45Mjh2LS4wMDJ6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIi8+PC9zdmc+JyxcbiAgICAgIFR5cGUuU1RSSU5HXG4gICAgXSxcblxuICAgIGljb25VbmRvOiBbXG4gICAgICAnPHN2ZyB3aWR0aD1cIjI2XCIgaGVpZ2h0PVwiMjZcIiB2aWV3Qm94PVwiMCAwIDI2IDI2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNOS4xODUgMTAuODFsLjAyLS4wMzhBNC45OTcgNC45OTcgMCAwIDEgMTMuNjgzIDhhNSA1IDAgMCAxIDUgNSA1IDUgMCAwIDEtNSA1IDEgMSAwIDAgMCAwIDJBNyA3IDAgMSAwIDcuNDk2IDkuNzIybC0uMjEtLjg0MmEuOTk5Ljk5OSAwIDEgMC0xLjk0LjQ4NGwuODA2IDMuMjNjLjEzMy41MzUuNjc1Ljg2IDEuMjEuNzNsMy4yMzMtLjgwM2EuOTk3Ljk5NyAwIDAgMCAuNzMtMS4yMS45OTcuOTk3IDAgMCAwLTEuMjEtLjczbC0uOTI4LjIzLS4wMDItLjAwMXpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgZmlsbC1ydWxlPVwibm9uemVyb1wiLz48L3N2Zz4nLFxuICAgICAgVHlwZS5TVFJJTkdcbiAgICBdLFxuXG4gICAgaWNvbkRvbmU6IFtcbiAgICAgICc8c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyNlwiIHZpZXdCb3g9XCIwIDAgMjYgMjZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xOC4yOTMgOS4yOTNhMSAxIDAgMCAxIDEuNDE0IDEuNDE0bC03LjAwMiA3YTEgMSAwIDAgMS0xLjQxNCAwbC0zLjk5OC00YTEgMSAwIDEgMSAxLjQxNC0xLjQxNEwxMiAxNS41ODZsNi4yOTQtNi4yOTN6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIGZpbGwtcnVsZT1cIm5vbnplcm9cIi8+PC9zdmc+JyxcbiAgICAgIFR5cGUuU1RSSU5HXG4gICAgXSxcblxuICAgIC8vIGV2ZW50IGhhbmRsZXJzXG4gICAgb25pbml0OiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb253YXJuaW5nOiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25lcnJvcjogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuICAgIG9uYWN0aXZhdGVmaWxlOiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25pbml0ZmlsZTogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuICAgIG9uYWRkZmlsZXN0YXJ0OiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25hZGRmaWxlcHJvZ3Jlc3M6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbmFkZGZpbGU6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbnByb2Nlc3NmaWxlc3RhcnQ6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbnByb2Nlc3NmaWxlcHJvZ3Jlc3M6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbnByb2Nlc3NmaWxlYWJvcnQ6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbnByb2Nlc3NmaWxlcmV2ZXJ0OiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25wcm9jZXNzZmlsZTogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuICAgIG9ucHJvY2Vzc2ZpbGVzOiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25yZW1vdmVmaWxlOiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG4gICAgb25wcmVwYXJlZmlsZTogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuICAgIG9udXBkYXRlZmlsZXM6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBvbnJlb3JkZXJmaWxlczogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuXG4gICAgLy8gaG9va3NcbiAgICBiZWZvcmVEcm9wRmlsZTogW251bGwsIFR5cGUuRlVOQ1RJT05dLFxuICAgIGJlZm9yZUFkZEZpbGU6IFtudWxsLCBUeXBlLkZVTkNUSU9OXSxcbiAgICBiZWZvcmVSZW1vdmVGaWxlOiBbbnVsbCwgVHlwZS5GVU5DVElPTl0sXG5cbiAgICAvLyBzdHlsZXNcbiAgICBzdHlsZVBhbmVsTGF5b3V0OiBbbnVsbCwgVHlwZS5TVFJJTkddLCAvLyBudWxsICdpbnRlZ3JhdGVkJywgJ2NvbXBhY3QnLCAnY2lyY2xlJ1xuICAgIHN0eWxlUGFuZWxBc3BlY3RSYXRpbzogW251bGwsIFR5cGUuU1RSSU5HXSwgLy8gbnVsbCBvciAnMzoyJyBvciAxXG4gICAgc3R5bGVJdGVtUGFuZWxBc3BlY3RSYXRpbzogW251bGwsIFR5cGUuU1RSSU5HXSxcbiAgICBzdHlsZUJ1dHRvblJlbW92ZUl0ZW1Qb3NpdGlvbjogWydsZWZ0JywgVHlwZS5TVFJJTkddLFxuICAgIHN0eWxlQnV0dG9uUHJvY2Vzc0l0ZW1Qb3NpdGlvbjogWydyaWdodCcsIFR5cGUuU1RSSU5HXSxcbiAgICBzdHlsZUxvYWRJbmRpY2F0b3JQb3NpdGlvbjogWydyaWdodCcsIFR5cGUuU1RSSU5HXSxcbiAgICBzdHlsZVByb2dyZXNzSW5kaWNhdG9yUG9zaXRpb246IFsncmlnaHQnLCBUeXBlLlNUUklOR10sXG4gICAgc3R5bGVCdXR0b25SZW1vdmVJdGVtQWxpZ246IFtmYWxzZSwgVHlwZS5CT09MRUFOXSxcblxuICAgIC8vIGN1c3RvbSBpbml0aWFsIGZpbGVzIGFycmF5XG4gICAgZmlsZXM6IFtbXSwgVHlwZS5BUlJBWV1cbiAgfTtcblxuICB2YXIgZ2V0SXRlbUJ5UXVlcnkgPSBmdW5jdGlvbiBnZXRJdGVtQnlRdWVyeShpdGVtcywgcXVlcnkpIHtcbiAgICAvLyBqdXN0IHJldHVybiBmaXJzdCBpbmRleFxuICAgIGlmIChpc0VtcHR5KHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIGl0ZW1zWzBdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLy8gcXVlcnkgaXMgaW5kZXhcbiAgICBpZiAoaXNJbnQocXVlcnkpKSB7XG4gICAgICByZXR1cm4gaXRlbXNbcXVlcnldIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLy8gaWYgcXVlcnkgaXMgaXRlbSwgZ2V0IHRoZSBpZFxuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LmlkO1xuICAgIH1cblxuICAgIC8vIGFzc3VtZSBxdWVyeSBpcyBhIHN0cmluZyBhbmQgcmV0dXJuIGl0ZW0gYnkgaWRcbiAgICByZXR1cm4gKFxuICAgICAgaXRlbXMuZmluZChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmlkID09PSBxdWVyeTtcbiAgICAgIH0pIHx8IG51bGxcbiAgICApO1xuICB9O1xuXG4gIHZhciBnZXROdW1lcmljQXNwZWN0UmF0aW9Gcm9tU3RyaW5nID0gZnVuY3Rpb24gZ2V0TnVtZXJpY0FzcGVjdFJhdGlvRnJvbVN0cmluZyhcbiAgICBhc3BlY3RSYXRpb1xuICApIHtcbiAgICBpZiAoaXNFbXB0eShhc3BlY3RSYXRpbykpIHtcbiAgICAgIHJldHVybiBhc3BlY3RSYXRpbztcbiAgICB9XG4gICAgaWYgKC86Ly50ZXN0KGFzcGVjdFJhdGlvKSkge1xuICAgICAgdmFyIHBhcnRzID0gYXNwZWN0UmF0aW8uc3BsaXQoJzonKTtcbiAgICAgIHJldHVybiBwYXJ0c1sxXSAvIHBhcnRzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VGbG9hdChhc3BlY3RSYXRpbyk7XG4gIH07XG5cbiAgdmFyIGdldEFjdGl2ZUl0ZW1zID0gZnVuY3Rpb24gZ2V0QWN0aXZlSXRlbXMoaXRlbXMpIHtcbiAgICByZXR1cm4gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbS5hcmNoaXZlZDtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgU3RhdHVzID0ge1xuICAgIEVNUFRZOiAwLFxuICAgIElETEU6IDEsIC8vIHdhaXRpbmdcbiAgICBFUlJPUjogMiwgLy8gYSBmaWxlIGlzIGluIGVycm9yIHN0YXRlXG4gICAgQlVTWTogMywgLy8gYnVzeSBwcm9jZXNzaW5nIG9yIGxvYWRpbmdcbiAgICBSRUFEWTogNCAvLyBhbGwgZmlsZXMgdXBsb2FkZWRcbiAgfTtcblxuICB2YXIgSVRFTV9FUlJPUiA9IFtcbiAgICBJdGVtU3RhdHVzLkxPQURfRVJST1IsXG4gICAgSXRlbVN0YXR1cy5QUk9DRVNTSU5HX0VSUk9SLFxuICAgIEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19SRVZFUlRfRVJST1JcbiAgXTtcbiAgdmFyIElURU1fQlVTWSA9IFtcbiAgICBJdGVtU3RhdHVzLkxPQURJTkcsXG4gICAgSXRlbVN0YXR1cy5QUk9DRVNTSU5HLFxuICAgIEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19RVUVVRUQsXG4gICAgSXRlbVN0YXR1cy5JTklUXG4gIF07XG4gIHZhciBJVEVNX1JFQURZID0gW0l0ZW1TdGF0dXMuUFJPQ0VTU0lOR19DT01QTEVURV07XG5cbiAgdmFyIGlzSXRlbUluRXJyb3JTdGF0ZSA9IGZ1bmN0aW9uIGlzSXRlbUluRXJyb3JTdGF0ZShpdGVtKSB7XG4gICAgcmV0dXJuIElURU1fRVJST1IuaW5jbHVkZXMoaXRlbS5zdGF0dXMpO1xuICB9O1xuICB2YXIgaXNJdGVtSW5CdXN5U3RhdGUgPSBmdW5jdGlvbiBpc0l0ZW1JbkJ1c3lTdGF0ZShpdGVtKSB7XG4gICAgcmV0dXJuIElURU1fQlVTWS5pbmNsdWRlcyhpdGVtLnN0YXR1cyk7XG4gIH07XG4gIHZhciBpc0l0ZW1JblJlYWR5U3RhdGUgPSBmdW5jdGlvbiBpc0l0ZW1JblJlYWR5U3RhdGUoaXRlbSkge1xuICAgIHJldHVybiBJVEVNX1JFQURZLmluY2x1ZGVzKGl0ZW0uc3RhdHVzKTtcbiAgfTtcblxuICB2YXIgcXVlcmllcyA9IGZ1bmN0aW9uIHF1ZXJpZXMoc3RhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgR0VUX1NUQVRVUzogZnVuY3Rpb24gR0VUX1NUQVRVUygpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gZ2V0QWN0aXZlSXRlbXMoc3RhdGUuaXRlbXMpO1xuICAgICAgICB2YXIgRU1QVFkgPSBTdGF0dXMuRU1QVFksXG4gICAgICAgICAgRVJST1IgPSBTdGF0dXMuRVJST1IsXG4gICAgICAgICAgQlVTWSA9IFN0YXR1cy5CVVNZLFxuICAgICAgICAgIElETEUgPSBTdGF0dXMuSURMRSxcbiAgICAgICAgICBSRUFEWSA9IFN0YXR1cy5SRUFEWTtcblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSByZXR1cm4gRU1QVFk7XG5cbiAgICAgICAgaWYgKGl0ZW1zLnNvbWUoaXNJdGVtSW5FcnJvclN0YXRlKSkgcmV0dXJuIEVSUk9SO1xuXG4gICAgICAgIGlmIChpdGVtcy5zb21lKGlzSXRlbUluQnVzeVN0YXRlKSkgcmV0dXJuIEJVU1k7XG5cbiAgICAgICAgaWYgKGl0ZW1zLnNvbWUoaXNJdGVtSW5SZWFkeVN0YXRlKSkgcmV0dXJuIFJFQURZO1xuXG4gICAgICAgIHJldHVybiBJRExFO1xuICAgICAgfSxcblxuICAgICAgR0VUX0lURU06IGZ1bmN0aW9uIEdFVF9JVEVNKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBnZXRJdGVtQnlRdWVyeShzdGF0ZS5pdGVtcywgcXVlcnkpO1xuICAgICAgfSxcblxuICAgICAgR0VUX0FDVElWRV9JVEVNOiBmdW5jdGlvbiBHRVRfQUNUSVZFX0lURU0ocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIGdldEl0ZW1CeVF1ZXJ5KGdldEFjdGl2ZUl0ZW1zKHN0YXRlLml0ZW1zKSwgcXVlcnkpO1xuICAgICAgfSxcblxuICAgICAgR0VUX0FDVElWRV9JVEVNUzogZnVuY3Rpb24gR0VUX0FDVElWRV9JVEVNUygpIHtcbiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZUl0ZW1zKHN0YXRlLml0ZW1zKTtcbiAgICAgIH0sXG5cbiAgICAgIEdFVF9JVEVNUzogZnVuY3Rpb24gR0VUX0lURU1TKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuaXRlbXM7XG4gICAgICB9LFxuXG4gICAgICBHRVRfSVRFTV9OQU1FOiBmdW5jdGlvbiBHRVRfSVRFTV9OQU1FKHF1ZXJ5KSB7XG4gICAgICAgIHZhciBpdGVtID0gZ2V0SXRlbUJ5UXVlcnkoc3RhdGUuaXRlbXMsIHF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmZpbGVuYW1lIDogbnVsbDtcbiAgICAgIH0sXG5cbiAgICAgIEdFVF9JVEVNX1NJWkU6IGZ1bmN0aW9uIEdFVF9JVEVNX1NJWkUocXVlcnkpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBnZXRJdGVtQnlRdWVyeShzdGF0ZS5pdGVtcywgcXVlcnkpO1xuICAgICAgICByZXR1cm4gaXRlbSA/IGl0ZW0uZmlsZVNpemUgOiBudWxsO1xuICAgICAgfSxcblxuICAgICAgR0VUX1NUWUxFUzogZnVuY3Rpb24gR0VUX1NUWUxFUygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0YXRlLm9wdGlvbnMpXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAvXnN0eWxlLy50ZXN0KGtleSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogb3B0aW9uLFxuICAgICAgICAgICAgICB2YWx1ZTogc3RhdGUub3B0aW9uc1tvcHRpb25dXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgR0VUX1BBTkVMX0FTUEVDVF9SQVRJTzogZnVuY3Rpb24gR0VUX1BBTkVMX0FTUEVDVF9SQVRJTygpIHtcbiAgICAgICAgdmFyIGlzU2hhcGVDaXJjbGUgPSAvY2lyY2xlLy50ZXN0KHN0YXRlLm9wdGlvbnMuc3R5bGVQYW5lbExheW91dCk7XG4gICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IGlzU2hhcGVDaXJjbGVcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IGdldE51bWVyaWNBc3BlY3RSYXRpb0Zyb21TdHJpbmcoXG4gICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc3R5bGVQYW5lbEFzcGVjdFJhdGlvXG4gICAgICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgICB9LFxuXG4gICAgICBHRVRfSVRFTV9QQU5FTF9BU1BFQ1RfUkFUSU86IGZ1bmN0aW9uIEdFVF9JVEVNX1BBTkVMX0FTUEVDVF9SQVRJTygpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLm9wdGlvbnMuc3R5bGVJdGVtUGFuZWxBc3BlY3RSYXRpbztcbiAgICAgIH0sXG5cbiAgICAgIEdFVF9JVEVNU19CWV9TVEFUVVM6IGZ1bmN0aW9uIEdFVF9JVEVNU19CWV9TVEFUVVMoc3RhdHVzKSB7XG4gICAgICAgIHJldHVybiBnZXRBY3RpdmVJdGVtcyhzdGF0ZS5pdGVtcykuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5zdGF0dXMgPT09IHN0YXR1cztcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBHRVRfVE9UQUxfSVRFTVM6IGZ1bmN0aW9uIEdFVF9UT1RBTF9JVEVNUygpIHtcbiAgICAgICAgcmV0dXJuIGdldEFjdGl2ZUl0ZW1zKHN0YXRlLml0ZW1zKS5sZW5ndGg7XG4gICAgICB9LFxuXG4gICAgICBJU19BU1lOQzogZnVuY3Rpb24gSVNfQVNZTkMoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgaXNPYmplY3Qoc3RhdGUub3B0aW9ucy5zZXJ2ZXIpICYmXG4gICAgICAgICAgKGlzT2JqZWN0KHN0YXRlLm9wdGlvbnMuc2VydmVyLnByb2Nlc3MpIHx8XG4gICAgICAgICAgICBpc0Z1bmN0aW9uKHN0YXRlLm9wdGlvbnMuc2VydmVyLnByb2Nlc3MpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhc1Jvb21Gb3JJdGVtID0gZnVuY3Rpb24gaGFzUm9vbUZvckl0ZW0oc3RhdGUpIHtcbiAgICB2YXIgY291bnQgPSBnZXRBY3RpdmVJdGVtcyhzdGF0ZS5pdGVtcykubGVuZ3RoO1xuXG4gICAgLy8gaWYgY2Fubm90IGhhdmUgbXVsdGlwbGUgaXRlbXMsIHRvIGFkZCBvbmUgaXRlbSBpdCBzaG91bGQgY3VycmVudGx5IG5vdCBjb250YWluIGl0ZW1zXG4gICAgaWYgKCFzdGF0ZS5vcHRpb25zLmFsbG93TXVsdGlwbGUpIHtcbiAgICAgIHJldHVybiBjb3VudCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBpZiBhbGxvd3MgbXVsdGlwbGUgaXRlbXMsIHdlIGNoZWNrIGlmIGEgbWF4IGl0ZW0gY291bnQgaGFzIGJlZW4gc2V0LCBpZiBub3QsIHRoZXJlJ3Mgbm8gbGltaXRcbiAgICB2YXIgbWF4RmlsZUNvdW50ID0gc3RhdGUub3B0aW9ucy5tYXhGaWxlcztcbiAgICBpZiAobWF4RmlsZUNvdW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyB3ZSBjaGVjayBpZiB0aGUgY3VycmVudCBjb3VudCBpcyBzbWFsbGVyIHRoYW4gdGhlIG1heCBjb3VudCwgaWYgc28sIGFub3RoZXIgZmlsZSBjYW4gc3RpbGwgYmUgYWRkZWRcbiAgICBpZiAoY291bnQgPCBtYXhGaWxlQ291bnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIG5vIG1vcmUgcm9vbSBmb3IgYW5vdGhlciBmaWxlXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHZhciBsaW1pdCA9IGZ1bmN0aW9uIGxpbWl0KHZhbHVlLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihtYXgsIHZhbHVlKSwgbWluKTtcbiAgfTtcblxuICB2YXIgYXJyYXlJbnNlcnQgPSBmdW5jdGlvbiBhcnJheUluc2VydChhcnIsIGluZGV4LCBpdGVtKSB7XG4gICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDAsIGl0ZW0pO1xuICB9O1xuXG4gIHZhciBpbnNlcnRJdGVtID0gZnVuY3Rpb24gaW5zZXJ0SXRlbShpdGVtcywgaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoaXNFbXB0eShpdGVtKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gaWYgaW5kZXggaXMgdW5kZWZpbmVkLCBhcHBlbmRcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIC8vIGxpbWl0IHRoZSBpbmRleCB0byB0aGUgc2l6ZSBvZiB0aGUgaXRlbXMgYXJyYXlcbiAgICBpbmRleCA9IGxpbWl0KGluZGV4LCAwLCBpdGVtcy5sZW5ndGgpO1xuXG4gICAgLy8gYWRkIGl0ZW0gdG8gYXJyYXlcbiAgICBhcnJheUluc2VydChpdGVtcywgaW5kZXgsIGl0ZW0pO1xuXG4gICAgLy8gZXhwb3NlXG4gICAgcmV0dXJuIGl0ZW07XG4gIH07XG5cbiAgdmFyIGlzQmFzZTY0RGF0YVVSSSA9IGZ1bmN0aW9uIGlzQmFzZTY0RGF0YVVSSShzdHIpIHtcbiAgICByZXR1cm4gL15cXHMqZGF0YTooW2Etel0rXFwvW2EtejAtOS0rLl0rKDtbYS16LV0rPVthLXowLTktXSspPyk/KDtiYXNlNjQpPywoW2EtejAtOSEkJicsKCkqKzs9XFwtLl9+OkBcXC8/JVxcc10qKVxccyokL2kudGVzdChcbiAgICAgIHN0clxuICAgICk7XG4gIH07XG5cbiAgdmFyIGdldEZpbGVuYW1lRnJvbVVSTCA9IGZ1bmN0aW9uIGdldEZpbGVuYW1lRnJvbVVSTCh1cmwpIHtcbiAgICByZXR1cm4gdXJsXG4gICAgICAuc3BsaXQoJy8nKVxuICAgICAgLnBvcCgpXG4gICAgICAuc3BsaXQoJz8nKVxuICAgICAgLnNoaWZ0KCk7XG4gIH07XG5cbiAgdmFyIGdldEV4dGVuc2lvbkZyb21GaWxlbmFtZSA9IGZ1bmN0aW9uIGdldEV4dGVuc2lvbkZyb21GaWxlbmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuc3BsaXQoJy4nKS5wb3AoKTtcbiAgfTtcblxuICB2YXIgZ3Vlc3N0aW1hdGVFeHRlbnNpb24gPSBmdW5jdGlvbiBndWVzc3RpbWF0ZUV4dGVuc2lvbih0eXBlKSB7XG4gICAgLy8gaWYgbm8gZXh0ZW5zaW9uIHN1cHBsaWVkLCBleGl0IGhlcmVcbiAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLy8gZ2V0IHN1YnR5cGVcbiAgICB2YXIgc3VidHlwZSA9IHR5cGUuc3BsaXQoJy8nKS5wb3AoKTtcblxuICAgIC8vIGlzIHN2ZyBzdWJ0eXBlXG4gICAgaWYgKC9zdmcvLnRlc3Qoc3VidHlwZSkpIHtcbiAgICAgIHJldHVybiAnc3ZnJztcbiAgICB9XG5cbiAgICBpZiAoL3ppcHxjb21wcmVzc2VkLy50ZXN0KHN1YnR5cGUpKSB7XG4gICAgICByZXR1cm4gJ3ppcCc7XG4gICAgfVxuXG4gICAgaWYgKC9wbGFpbi8udGVzdChzdWJ0eXBlKSkge1xuICAgICAgcmV0dXJuICd0eHQnO1xuICAgIH1cblxuICAgIGlmICgvbXN3b3JkLy50ZXN0KHN1YnR5cGUpKSB7XG4gICAgICByZXR1cm4gJ2RvYyc7XG4gICAgfVxuXG4gICAgLy8gaWYgaXMgdmFsaWQgc3VidHlwZVxuICAgIGlmICgvW2Etel0rLy50ZXN0KHN1YnR5cGUpKSB7XG4gICAgICAvLyBhbHdheXMgdXNlIGpwZyBleHRlbnNpb25cbiAgICAgIGlmIChzdWJ0eXBlID09PSAnanBlZycpIHtcbiAgICAgICAgcmV0dXJuICdqcGcnO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gc3VidHlwZVxuICAgICAgcmV0dXJuIHN1YnR5cGU7XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIHZhciBsZWZ0UGFkID0gZnVuY3Rpb24gbGVmdFBhZCh2YWx1ZSkge1xuICAgIHZhciBwYWRkaW5nID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgcmV0dXJuIChwYWRkaW5nICsgdmFsdWUpLnNsaWNlKC1wYWRkaW5nLmxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGdldERhdGVTdHJpbmcgPSBmdW5jdGlvbiBnZXREYXRlU3RyaW5nKCkge1xuICAgIHZhciBkYXRlID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gYXJndW1lbnRzWzBdXG4gICAgICAgIDogbmV3IERhdGUoKTtcbiAgICByZXR1cm4gKFxuICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpICtcbiAgICAgICctJyArXG4gICAgICBsZWZ0UGFkKGRhdGUuZ2V0TW9udGgoKSArIDEsICcwMCcpICtcbiAgICAgICctJyArXG4gICAgICBsZWZ0UGFkKGRhdGUuZ2V0RGF0ZSgpLCAnMDAnKSArXG4gICAgICAnXycgK1xuICAgICAgbGVmdFBhZChkYXRlLmdldEhvdXJzKCksICcwMCcpICtcbiAgICAgICctJyArXG4gICAgICBsZWZ0UGFkKGRhdGUuZ2V0TWludXRlcygpLCAnMDAnKSArXG4gICAgICAnLScgK1xuICAgICAgbGVmdFBhZChkYXRlLmdldFNlY29uZHMoKSwgJzAwJylcbiAgICApO1xuICB9O1xuXG4gIHZhciBnZXRGaWxlRnJvbUJsb2IgPSBmdW5jdGlvbiBnZXRGaWxlRnJvbUJsb2IoYmxvYiwgZmlsZW5hbWUpIHtcbiAgICB2YXIgdHlwZSA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gICAgdmFyIGV4dGVuc2lvbiA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gICAgdmFyIGZpbGUgPVxuICAgICAgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnXG4gICAgICAgID8gYmxvYi5zbGljZSgwLCBibG9iLnNpemUsIHR5cGUpXG4gICAgICAgIDogYmxvYi5zbGljZSgwLCBibG9iLnNpemUsIGJsb2IudHlwZSk7XG4gICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID0gbmV3IERhdGUoKTtcblxuICAgIC8vIGNvcHkgcmVsYXRpdmUgcGF0aFxuICAgIGlmIChibG9iLl9yZWxhdGl2ZVBhdGgpIGZpbGUuX3JlbGF0aXZlUGF0aCA9IGJsb2IuX3JlbGF0aXZlUGF0aDtcblxuICAgIC8vIGlmIGJsb2IgaGFzIG5hbWUgcHJvcGVydHksIHVzZSBhcyBmaWxlbmFtZSBpZiBubyBmaWxlbmFtZSBzdXBwbGllZFxuICAgIGlmICghaXNTdHJpbmcoZmlsZW5hbWUpKSB7XG4gICAgICBmaWxlbmFtZSA9IGdldERhdGVTdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvLyBpZiBmaWxlbmFtZSBzdXBwbGllZCBidXQgbm8gZXh0ZW5zaW9uIGFuZCBmaWxlbmFtZSBoYXMgZXh0ZW5zaW9uXG4gICAgaWYgKGZpbGVuYW1lICYmIGV4dGVuc2lvbiA9PT0gbnVsbCAmJiBnZXRFeHRlbnNpb25Gcm9tRmlsZW5hbWUoZmlsZW5hbWUpKSB7XG4gICAgICBmaWxlLm5hbWUgPSBmaWxlbmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uIHx8IGd1ZXNzdGltYXRlRXh0ZW5zaW9uKGZpbGUudHlwZSk7XG4gICAgICBmaWxlLm5hbWUgPSBmaWxlbmFtZSArIChleHRlbnNpb24gPyAnLicgKyBleHRlbnNpb24gOiAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGU7XG4gIH07XG5cbiAgdmFyIGdldEJsb2JCdWlsZGVyID0gZnVuY3Rpb24gZ2V0QmxvYkJ1aWxkZXIoKSB7XG4gICAgcmV0dXJuICh3aW5kb3cuQmxvYkJ1aWxkZXIgPVxuICAgICAgd2luZG93LkJsb2JCdWlsZGVyIHx8XG4gICAgICB3aW5kb3cuV2ViS2l0QmxvYkJ1aWxkZXIgfHxcbiAgICAgIHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fFxuICAgICAgd2luZG93Lk1TQmxvYkJ1aWxkZXIpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVCbG9iID0gZnVuY3Rpb24gY3JlYXRlQmxvYihhcnJheUJ1ZmZlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgQkIgPSBnZXRCbG9iQnVpbGRlcigpO1xuXG4gICAgaWYgKEJCKSB7XG4gICAgICB2YXIgYmIgPSBuZXcgQkIoKTtcbiAgICAgIGJiLmFwcGVuZChhcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gYmIuZ2V0QmxvYihtaW1lVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBCbG9iKFthcnJheUJ1ZmZlcl0sIHtcbiAgICAgIHR5cGU6IG1pbWVUeXBlXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdldEJsb2JGcm9tQnl0ZVN0cmluZ1dpdGhNaW1lVHlwZSA9IGZ1bmN0aW9uIGdldEJsb2JGcm9tQnl0ZVN0cmluZ1dpdGhNaW1lVHlwZShcbiAgICBieXRlU3RyaW5nLFxuICAgIG1pbWVUeXBlXG4gICkge1xuICAgIHZhciBhYiA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgdmFyIGlhID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlU3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpYVtpXSA9IGJ5dGVTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQmxvYihhYiwgbWltZVR5cGUpO1xuICB9O1xuXG4gIHZhciBnZXRNaW1lVHlwZUZyb21CYXNlNjREYXRhVVJJID0gZnVuY3Rpb24gZ2V0TWltZVR5cGVGcm9tQmFzZTY0RGF0YVVSSShcbiAgICBkYXRhVVJJXG4gICkge1xuICAgIHJldHVybiAoL15kYXRhOiguKyk7Ly5leGVjKGRhdGFVUkkpIHx8IFtdKVsxXSB8fCBudWxsO1xuICB9O1xuXG4gIHZhciBnZXRCYXNlNjREYXRhRnJvbUJhc2U2NERhdGFVUkkgPSBmdW5jdGlvbiBnZXRCYXNlNjREYXRhRnJvbUJhc2U2NERhdGFVUkkoXG4gICAgZGF0YVVSSVxuICApIHtcbiAgICAvLyBnZXQgZGF0YSBwYXJ0IG9mIHN0cmluZyAocmVtb3ZlIGRhdGE6aW1hZ2UvanBlZy4uLiwpXG4gICAgdmFyIGRhdGEgPSBkYXRhVVJJLnNwbGl0KCcsJylbMV07XG5cbiAgICAvLyByZW1vdmUgYW55IHdoaXRlc3BhY2UgYXMgdGhhdCBjYXVzZXMgSW52YWxpZENoYXJhY3RlckVycm9yIGluIElFXG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgfTtcblxuICB2YXIgZ2V0Qnl0ZVN0cmluZ0Zyb21CYXNlNjREYXRhVVJJID0gZnVuY3Rpb24gZ2V0Qnl0ZVN0cmluZ0Zyb21CYXNlNjREYXRhVVJJKFxuICAgIGRhdGFVUklcbiAgKSB7XG4gICAgcmV0dXJuIGF0b2IoZ2V0QmFzZTY0RGF0YUZyb21CYXNlNjREYXRhVVJJKGRhdGFVUkkpKTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvYkZyb21CYXNlNjREYXRhVVJJID0gZnVuY3Rpb24gZ2V0QmxvYkZyb21CYXNlNjREYXRhVVJJKGRhdGFVUkkpIHtcbiAgICB2YXIgbWltZVR5cGUgPSBnZXRNaW1lVHlwZUZyb21CYXNlNjREYXRhVVJJKGRhdGFVUkkpO1xuICAgIHZhciBieXRlU3RyaW5nID0gZ2V0Qnl0ZVN0cmluZ0Zyb21CYXNlNjREYXRhVVJJKGRhdGFVUkkpO1xuXG4gICAgcmV0dXJuIGdldEJsb2JGcm9tQnl0ZVN0cmluZ1dpdGhNaW1lVHlwZShieXRlU3RyaW5nLCBtaW1lVHlwZSk7XG4gIH07XG5cbiAgdmFyIGdldEZpbGVGcm9tQmFzZTY0RGF0YVVSSSA9IGZ1bmN0aW9uIGdldEZpbGVGcm9tQmFzZTY0RGF0YVVSSShcbiAgICBkYXRhVVJJLFxuICAgIGZpbGVuYW1lLFxuICAgIGV4dGVuc2lvblxuICApIHtcbiAgICByZXR1cm4gZ2V0RmlsZUZyb21CbG9iKFxuICAgICAgZ2V0QmxvYkZyb21CYXNlNjREYXRhVVJJKGRhdGFVUkkpLFxuICAgICAgZmlsZW5hbWUsXG4gICAgICBudWxsLFxuICAgICAgZXh0ZW5zaW9uXG4gICAgKTtcbiAgfTtcblxuICB2YXIgZ2V0RmlsZU5hbWVGcm9tSGVhZGVyID0gZnVuY3Rpb24gZ2V0RmlsZU5hbWVGcm9tSGVhZGVyKGhlYWRlcikge1xuICAgIC8vIHRlc3QgaWYgaXMgY29udGVudCBkaXNwb3NpdGlvbiBoZWFkZXIsIGlmIG5vdCBleGl0XG4gICAgaWYgKCEvXmNvbnRlbnQtZGlzcG9zaXRpb246L2kudGVzdChoZWFkZXIpKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIGdldCBmaWxlbmFtZSBwYXJ0c1xuICAgIHZhciBtYXRjaGVzID0gaGVhZGVyXG4gICAgICAuc3BsaXQoL2ZpbGVuYW1lPXxmaWxlbmFtZVxcKj0uKycnLylcbiAgICAgIC5zcGxpY2UoMSlcbiAgICAgIC5tYXAoZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZS50cmltKCkucmVwbGFjZSgvXltcIiddfFs7XCInXXswLDJ9JC9nLCAnJyk7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lLmxlbmd0aDtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoZXMubGVuZ3RoID8gZGVjb2RlVVJJKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSkgOiBudWxsO1xuICB9O1xuXG4gIHZhciBnZXRGaWxlU2l6ZUZyb21IZWFkZXIgPSBmdW5jdGlvbiBnZXRGaWxlU2l6ZUZyb21IZWFkZXIoaGVhZGVyKSB7XG4gICAgaWYgKC9jb250ZW50LWxlbmd0aDovaS50ZXN0KGhlYWRlcikpIHtcbiAgICAgIHZhciBzaXplID0gaGVhZGVyLm1hdGNoKC9bMC05XSsvKVswXTtcbiAgICAgIHJldHVybiBzaXplID8gcGFyc2VJbnQoc2l6ZSwgMTApIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIGdldFRyYW5mc2VySWRGcm9tSGVhZGVyID0gZnVuY3Rpb24gZ2V0VHJhbmZzZXJJZEZyb21IZWFkZXIoaGVhZGVyKSB7XG4gICAgaWYgKC94LWNvbnRlbnQtdHJhbnNmZXItaWQ6L2kudGVzdChoZWFkZXIpKSB7XG4gICAgICB2YXIgaWQgPSAoaGVhZGVyLnNwbGl0KCc6JylbMV0gfHwgJycpLnRyaW0oKTtcbiAgICAgIHJldHVybiBpZCB8fCBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgZ2V0RmlsZUluZm9Gcm9tSGVhZGVycyA9IGZ1bmN0aW9uIGdldEZpbGVJbmZvRnJvbUhlYWRlcnMoaGVhZGVycykge1xuICAgIHZhciBpbmZvID0ge1xuICAgICAgc291cmNlOiBudWxsLFxuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIHNpemU6IG51bGxcbiAgICB9O1xuXG4gICAgdmFyIHJvd3MgPSBoZWFkZXJzLnNwbGl0KCdcXG4nKTtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgX2l0ZXJhdG9yID0gcm93c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwO1xuICAgICAgICAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTtcbiAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWVcbiAgICAgICkge1xuICAgICAgICB2YXIgaGVhZGVyID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBnZXRGaWxlTmFtZUZyb21IZWFkZXIoaGVhZGVyKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBpbmZvLm5hbWUgPSBuYW1lO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpemUgPSBnZXRGaWxlU2l6ZUZyb21IZWFkZXIoaGVhZGVyKTtcbiAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICBpbmZvLnNpemUgPSBzaXplO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IGdldFRyYW5mc2VySWRGcm9tSGVhZGVyKGhlYWRlcik7XG4gICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICBpbmZvLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUZpbGVMb2FkZXIgPSBmdW5jdGlvbiBjcmVhdGVGaWxlTG9hZGVyKGZldGNoRm4pIHtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBzb3VyY2U6IG51bGwsXG4gICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHNpemU6IG51bGwsXG4gICAgICB0aW1lc3RhbXA6IG51bGwsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIHJlcXVlc3Q6IG51bGxcbiAgICB9O1xuXG4gICAgdmFyIGdldFByb2dyZXNzID0gZnVuY3Rpb24gZ2V0UHJvZ3Jlc3MoKSB7XG4gICAgICByZXR1cm4gc3RhdGUucHJvZ3Jlc3M7XG4gICAgfTtcbiAgICB2YXIgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIGlmIChzdGF0ZS5yZXF1ZXN0ICYmIHN0YXRlLnJlcXVlc3QuYWJvcnQpIHtcbiAgICAgICAgc3RhdGUucmVxdWVzdC5hYm9ydCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBsb2FkIHNvdXJjZVxuICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIC8vIGdldCBxdWljayByZWZlcmVuY2VcbiAgICAgIHZhciBzb3VyY2UgPSBzdGF0ZS5zb3VyY2U7XG5cbiAgICAgIGFwaS5maXJlKCdpbml0Jywgc291cmNlKTtcblxuICAgICAgLy8gTG9hZCBGaWxlc1xuICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgYXBpLmZpcmUoJ2xvYWQnLCBzb3VyY2UpO1xuICAgICAgfSBlbHNlIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgIC8vIExvYWQgYmxvYnMsIHNldCBkZWZhdWx0IG5hbWUgdG8gY3VycmVudCBkYXRlXG4gICAgICAgIGFwaS5maXJlKCdsb2FkJywgZ2V0RmlsZUZyb21CbG9iKHNvdXJjZSwgc291cmNlLm5hbWUpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNCYXNlNjREYXRhVVJJKHNvdXJjZSkpIHtcbiAgICAgICAgLy8gTG9hZCBiYXNlIDY0LCBzZXQgZGVmYXVsdCBuYW1lIHRvIGN1cnJlbnQgZGF0ZVxuICAgICAgICBhcGkuZmlyZSgnbG9hZCcsIGdldEZpbGVGcm9tQmFzZTY0RGF0YVVSSShzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERlYWwgYXMgaWYgaXMgZXh0ZXJuYWwgVVJMLCBsZXQncyBsb2FkIGl0IVxuICAgICAgICBsb2FkVVJMKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGxvYWRzIGEgdXJsXG4gICAgdmFyIGxvYWRVUkwgPSBmdW5jdGlvbiBsb2FkVVJMKHVybCkge1xuICAgICAgLy8gaXMgcmVtb3RlIHVybCBhbmQgbm8gZmV0Y2ggbWV0aG9kIHN1cHBsaWVkXG4gICAgICBpZiAoIWZldGNoRm4pIHtcbiAgICAgICAgYXBpLmZpcmUoJ2Vycm9yJywge1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgYm9keTogXCJDYW4ndCBsb2FkIFVSTFwiLFxuICAgICAgICAgIGNvZGU6IDQwMFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCByZXF1ZXN0IHN0YXJ0XG4gICAgICBzdGF0ZS50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAvLyBsb2FkIGZpbGVcbiAgICAgIHN0YXRlLnJlcXVlc3QgPSBmZXRjaEZuKFxuICAgICAgICB1cmwsXG4gICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgLy8gdXBkYXRlIGR1cmF0aW9uXG4gICAgICAgICAgc3RhdGUuZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhdGUudGltZXN0YW1wO1xuXG4gICAgICAgICAgLy8gZG9uZSFcbiAgICAgICAgICBzdGF0ZS5jb21wbGV0ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyB0dXJuIGJsb2IgcmVzcG9uc2UgaW50byBhIGZpbGVcbiAgICAgICAgICBpZiAocmVzcG9uc2UgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGdldEZpbGVGcm9tQmxvYihcbiAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgIHJlc3BvbnNlLm5hbWUgfHwgZ2V0RmlsZW5hbWVGcm9tVVJMKHVybClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXBpLmZpcmUoXG4gICAgICAgICAgICAnbG9hZCcsXG4gICAgICAgICAgICAvLyBpZiBoYXMgcmVjZWl2ZWQgYmxvYiwgd2UgZ28gd2l0aCBibG9iLCBpZiBubyByZXNwb25zZSwgd2UgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIHJlc3BvbnNlIGluc3RhbmNlb2YgQmxvYlxuICAgICAgICAgICAgICA/IHJlc3BvbnNlXG4gICAgICAgICAgICAgIDogcmVzcG9uc2VcbiAgICAgICAgICAgICAgPyByZXNwb25zZS5ib2R5XG4gICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgYXBpLmZpcmUoXG4gICAgICAgICAgICAnZXJyb3InLFxuICAgICAgICAgICAgdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICBjb2RlOiAwLFxuICAgICAgICAgICAgICAgICAgYm9keTogZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogZXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihjb21wdXRhYmxlLCBjdXJyZW50LCB0b3RhbCkge1xuICAgICAgICAgIC8vIGNvbGxlY3RlZCBzb21lIG1ldGEgZGF0YSBhbHJlYWR5XG4gICAgICAgICAgaWYgKHRvdGFsKSB7XG4gICAgICAgICAgICBzdGF0ZS5zaXplID0gdG90YWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXBkYXRlIGR1cmF0aW9uXG4gICAgICAgICAgc3RhdGUuZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhdGUudGltZXN0YW1wO1xuXG4gICAgICAgICAgLy8gaWYgd2UgY2FuJ3QgY29tcHV0ZSBwcm9ncmVzcywgd2UncmUgbm90IGdvaW5nIHRvIGZpcmUgcHJvZ3Jlc3MgZXZlbnRzXG4gICAgICAgICAgaWYgKCFjb21wdXRhYmxlKSB7XG4gICAgICAgICAgICBzdGF0ZS5wcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXBkYXRlIHByb2dyZXNzIHBlcmNlbnRhZ2VcbiAgICAgICAgICBzdGF0ZS5wcm9ncmVzcyA9IGN1cnJlbnQgLyB0b3RhbDtcblxuICAgICAgICAgIC8vIGV4cG9zZVxuICAgICAgICAgIGFwaS5maXJlKCdwcm9ncmVzcycsIHN0YXRlLnByb2dyZXNzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXBpLmZpcmUoJ2Fib3J0Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIGZpbGVpbmZvID0gZ2V0RmlsZUluZm9Gcm9tSGVhZGVycyhcbiAgICAgICAgICAgIHR5cGVvZiByZXNwb25zZSA9PT0gJ3N0cmluZycgPyByZXNwb25zZSA6IHJlc3BvbnNlLmhlYWRlcnNcbiAgICAgICAgICApO1xuICAgICAgICAgIGFwaS5maXJlKCdtZXRhJywge1xuICAgICAgICAgICAgc2l6ZTogc3RhdGUuc2l6ZSB8fCBmaWxlaW5mby5zaXplLFxuICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVpbmZvLm5hbWUsXG4gICAgICAgICAgICBzb3VyY2U6IGZpbGVpbmZvLnNvdXJjZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgYXBpID0gT2JqZWN0LmFzc2lnbih7fSwgb24oKSwge1xuICAgICAgc2V0U291cmNlOiBmdW5jdGlvbiBzZXRTb3VyY2Uoc291cmNlKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUuc291cmNlID0gc291cmNlKTtcbiAgICAgIH0sXG4gICAgICBnZXRQcm9ncmVzczogZ2V0UHJvZ3Jlc3MsIC8vIGZpbGUgbG9hZCBwcm9ncmVzc1xuICAgICAgYWJvcnQ6IGFib3J0LCAvLyBhYm9ydCBmaWxlIGxvYWRcbiAgICAgIGxvYWQ6IGxvYWQgLy8gc3RhcnQgbG9hZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFwaTtcbiAgfTtcblxuICB2YXIgaXNHZXQgPSBmdW5jdGlvbiBpc0dldChtZXRob2QpIHtcbiAgICByZXR1cm4gL0dFVHxIRUFELy50ZXN0KG1ldGhvZCk7XG4gIH07XG5cbiAgdmFyIHNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gc2VuZFJlcXVlc3QoZGF0YSwgdXJsLCBvcHRpb25zKSB7XG4gICAgdmFyIGFwaSA9IHtcbiAgICAgIG9uaGVhZGVyczogZnVuY3Rpb24gb25oZWFkZXJzKCkge30sXG4gICAgICBvbnByb2dyZXNzOiBmdW5jdGlvbiBvbnByb2dyZXNzKCkge30sXG4gICAgICBvbmxvYWQ6IGZ1bmN0aW9uIG9ubG9hZCgpIHt9LFxuICAgICAgb250aW1lb3V0OiBmdW5jdGlvbiBvbnRpbWVvdXQoKSB7fSxcbiAgICAgIG9uZXJyb3I6IGZ1bmN0aW9uIG9uZXJyb3IoKSB7fSxcbiAgICAgIG9uYWJvcnQ6IGZ1bmN0aW9uIG9uYWJvcnQoKSB7fSxcbiAgICAgIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0aW1lb3V0IGlkZW50aWZpZXIsIG9ubHkgdXNlZCB3aGVuIHRpbWVvdXQgaXMgZGVmaW5lZFxuICAgIHZhciBhYm9ydGVkID0gZmFsc2U7XG4gICAgdmFyIGhlYWRlcnNSZWNlaXZlZCA9IGZhbHNlO1xuXG4gICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2VcbiAgICAgIH0sXG4gICAgICBvcHRpb25zXG4gICAgKTtcblxuICAgIC8vIGVuY29kZSB1cmxcbiAgICB1cmwgPSBlbmNvZGVVUkkodXJsKTtcblxuICAgIC8vIGlmIG1ldGhvZCBpcyBHRVQsIGFkZCBhbnkgcmVjZWl2ZWQgZGF0YSB0byB1cmxcblxuICAgIGlmIChpc0dldChvcHRpb25zLm1ldGhvZCkgJiYgZGF0YSkge1xuICAgICAgdXJsID1cbiAgICAgICAgJycgK1xuICAgICAgICB1cmwgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHJlcXVlc3RcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBwcm9ncmVzcyBvZiBsb2FkXG4gICAgdmFyIHByb2Nlc3MgPSBpc0dldChvcHRpb25zLm1ldGhvZCkgPyB4aHIgOiB4aHIudXBsb2FkO1xuICAgIHByb2Nlc3Mub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIG5vIHByb2dyZXNzIGV2ZW50IHdoZW4gYWJvcnRlZCAoIG9ucHJvZ3Jlc3MgaXMgY2FsbGVkIG9uY2UgYWZ0ZXIgYWJvcnQoKSApXG4gICAgICBpZiAoYWJvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS5vbnByb2dyZXNzKGUubGVuZ3RoQ29tcHV0YWJsZSwgZS5sb2FkZWQsIGUudG90YWwpO1xuICAgIH07XG5cbiAgICAvLyB0cmllcyB0byBnZXQgaGVhZGVyIGluZm8gdG8gdGhlIGFwcCBhcyBmYXN0IGFzIHBvc3NpYmxlXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gbm90IGludGVyZXN0aW5nIGluIHRoZXNlIHN0YXRlcyAoJ3Vuc2VudCcgYW5kICdvcGVuZW5kJyBhcyB0aGV5IGRvbid0IGdpdmUgdXMgYW55IGFkZGl0aW9uYWwgaW5mbylcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA8IDIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBzZXJ2ZXIgcmVzcG9uc2VcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGhlYWRlcnNSZWNlaXZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhlYWRlcnNSZWNlaXZlZCA9IHRydWU7XG5cbiAgICAgIC8vIHdlJ3ZlIHByb2JhYmx5IHJlY2VpdmVkIHNvbWUgdXNlZnVsIGRhdGEgaW4gcmVzcG9uc2UgaGVhZGVyc1xuICAgICAgYXBpLm9uaGVhZGVycyh4aHIpO1xuICAgIH07XG5cbiAgICAvLyBsb2FkIHN1Y2Nlc3NmdWxcbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpcyBjbGFzc2lmaWVkIGFzIHZhbGlkIHJlc3BvbnNlXG4gICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICBhcGkub25sb2FkKHhocik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcGkub25lcnJvcih4aHIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlcnJvciBkdXJpbmcgbG9hZFxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXBpLm9uZXJyb3IoeGhyKTtcbiAgICB9O1xuXG4gICAgLy8gcmVxdWVzdCBhYm9ydGVkXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgYXBpLm9uYWJvcnQoKTtcbiAgICB9O1xuXG4gICAgLy8gcmVxdWVzdCB0aW1lb3V0XG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFwaS5vbnRpbWVvdXQoeGhyKTtcbiAgICB9O1xuXG4gICAgLy8gb3BlbiB1cCBvcGVuIHVwIVxuICAgIHhoci5vcGVuKG9wdGlvbnMubWV0aG9kLCB1cmwsIHRydWUpO1xuXG4gICAgLy8gc2V0IHRpbWVvdXQgaWYgZGVmaW5lZCAoZG8gaXQgYWZ0ZXIgb3BlbiBzbyBJRTExIHBsYXlzIGJhbGwpXG4gICAgaWYgKGlzSW50KG9wdGlvbnMudGltZW91dCkpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0O1xuICAgIH1cblxuICAgIC8vIGFkZCBoZWFkZXJzXG4gICAgT2JqZWN0LmtleXMob3B0aW9ucy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuaGVhZGVyc1trZXldKSk7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIHNldCB0eXBlIG9mIHJlc3BvbnNlXG4gICAgaWYgKG9wdGlvbnMucmVzcG9uc2VUeXBlKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gc2V0IGNyZWRlbnRpYWxzXG4gICAgaWYgKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBsZXQncyBzZW5kIG91ciBkYXRhXG4gICAgeGhyLnNlbmQoZGF0YSk7XG5cbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVSZXNwb25zZSA9IGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlKHR5cGUsIGNvZGUsIGJvZHksIGhlYWRlcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGNvZGU6IGNvZGUsXG4gICAgICBib2R5OiBib2R5LFxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVRpbWVvdXRSZXNwb25zZSA9IGZ1bmN0aW9uIGNyZWF0ZVRpbWVvdXRSZXNwb25zZShjYikge1xuICAgIHJldHVybiBmdW5jdGlvbih4aHIpIHtcbiAgICAgIGNiKGNyZWF0ZVJlc3BvbnNlKCdlcnJvcicsIDAsICdUaW1lb3V0JywgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFzUVMgPSBmdW5jdGlvbiBoYXNRUyhzdHIpIHtcbiAgICByZXR1cm4gL1xcPy8udGVzdChzdHIpO1xuICB9O1xuICB2YXIgYnVpbGRVUkwgPSBmdW5jdGlvbiBidWlsZFVSTCgpIHtcbiAgICB2YXIgdXJsID0gJyc7XG4gICAgZm9yIChcbiAgICAgIHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGFydHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwO1xuICAgICAgX2tleSA8IF9sZW47XG4gICAgICBfa2V5KytcbiAgICApIHtcbiAgICAgIHBhcnRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgIHVybCArPSBoYXNRUyh1cmwpICYmIGhhc1FTKHBhcnQpID8gcGFydC5yZXBsYWNlKC9cXD8vLCAnJicpIDogcGFydDtcbiAgICB9KTtcbiAgICByZXR1cm4gdXJsO1xuICB9O1xuXG4gIHZhciBjcmVhdGVGZXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gY3JlYXRlRmV0Y2hGdW5jdGlvbigpIHtcbiAgICB2YXIgYXBpVXJsID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIC8vIGN1c3RvbSBoYW5kbGVyIChzaG91bGQgYWxzbyBoYW5kbGUgZmlsZSwgbG9hZCwgZXJyb3IsIHByb2dyZXNzIGFuZCBhYm9ydClcbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG5cbiAgICAvLyBubyBhY3Rpb24gc3VwcGxpZWRcbiAgICBpZiAoIWFjdGlvbiB8fCAhaXNTdHJpbmcoYWN0aW9uLnVybCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIHNldCBvbmxvYWQgaGFubGRlclxuICAgIHZhciBvbmxvYWQgPVxuICAgICAgYWN0aW9uLm9ubG9hZCB8fFxuICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9O1xuICAgIHZhciBvbmVycm9yID1cbiAgICAgIGFjdGlvbi5vbmVycm9yIHx8XG4gICAgICBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgaGFuZGxlclxuICAgIHJldHVybiBmdW5jdGlvbih1cmwsIGxvYWQsIGVycm9yLCBwcm9ncmVzcywgYWJvcnQsIGhlYWRlcnMpIHtcbiAgICAgIC8vIGRvIGxvY2FsIG9yIHJlbW90ZSByZXF1ZXN0IGJhc2VkIG9uIGlmIHRoZSB1cmwgaXMgZXh0ZXJuYWxcbiAgICAgIHZhciByZXF1ZXN0ID0gc2VuZFJlcXVlc3QoXG4gICAgICAgIHVybCxcbiAgICAgICAgYnVpbGRVUkwoYXBpVXJsLCBhY3Rpb24udXJsKSxcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgYWN0aW9uLCB7XG4gICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYidcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIC8vIGdldCBoZWFkZXJzXG4gICAgICAgIHZhciBoZWFkZXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpO1xuXG4gICAgICAgIC8vIGdldCBmaWxlbmFtZVxuICAgICAgICB2YXIgZmlsZW5hbWUgPVxuICAgICAgICAgIGdldEZpbGVJbmZvRnJvbUhlYWRlcnMoaGVhZGVycykubmFtZSB8fCBnZXRGaWxlbmFtZUZyb21VUkwodXJsKTtcblxuICAgICAgICAvLyBjcmVhdGUgcmVzcG9uc2VcbiAgICAgICAgbG9hZChcbiAgICAgICAgICBjcmVhdGVSZXNwb25zZShcbiAgICAgICAgICAgICdsb2FkJyxcbiAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICBhY3Rpb24ubWV0aG9kID09PSAnSEVBRCdcbiAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgIDogZ2V0RmlsZUZyb21CbG9iKG9ubG9hZCh4aHIucmVzcG9uc2UpLCBmaWxlbmFtZSksXG4gICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIGVycm9yKFxuICAgICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICBvbmVycm9yKHhoci5yZXNwb25zZSkgfHwgeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uaGVhZGVycyA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICBoZWFkZXJzKFxuICAgICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICAgJ2hlYWRlcnMnLFxuICAgICAgICAgICAgeGhyLnN0YXR1cyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGNyZWF0ZVRpbWVvdXRSZXNwb25zZShlcnJvcik7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgIHJlcXVlc3Qub25hYm9ydCA9IGFib3J0O1xuXG4gICAgICAvLyBzaG91bGQgcmV0dXJuIHJlcXVlc3RcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIENodW5rU3RhdHVzID0ge1xuICAgIFFVRVVFRDogMCxcbiAgICBDT01QTEVURTogMSxcbiAgICBQUk9DRVNTSU5HOiAyLFxuICAgIEVSUk9SOiAzLFxuICAgIFdBSVRJTkc6IDRcbiAgfTtcblxuICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNpZ25hdHVyZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaWxlLCBtZXRhZGF0YSwgbG9hZCwgZXJyb3IsIHByb2dyZXNzLCBhYm9ydCwgdHJhbnNmZXIsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQ6KCkgPT4ge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAvLyBhcGlVcmwsIGFjdGlvbiwgbmFtZSwgZmlsZSwgbWV0YWRhdGEsIGxvYWQsIGVycm9yLCBwcm9ncmVzcywgYWJvcnQsIHRyYW5zZmVyLCBvcHRpb25zXG4gIHZhciBwcm9jZXNzRmlsZUNodW5rZWQgPSBmdW5jdGlvbiBwcm9jZXNzRmlsZUNodW5rZWQoXG4gICAgYXBpVXJsLFxuICAgIGFjdGlvbixcbiAgICBuYW1lLFxuICAgIGZpbGUsXG4gICAgbWV0YWRhdGEsXG4gICAgbG9hZCxcbiAgICBlcnJvcixcbiAgICBwcm9ncmVzcyxcbiAgICBhYm9ydCxcbiAgICB0cmFuc2ZlcixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIC8vIGFsbCBjaHVua3NcbiAgICB2YXIgY2h1bmtzID0gW107XG4gICAgdmFyIGNodW5rVHJhbnNmZXJJZCA9IG9wdGlvbnMuY2h1bmtUcmFuc2ZlcklkLFxuICAgICAgY2h1bmtTZXJ2ZXIgPSBvcHRpb25zLmNodW5rU2VydmVyLFxuICAgICAgY2h1bmtTaXplID0gb3B0aW9ucy5jaHVua1NpemUsXG4gICAgICBjaHVua1JldHJ5RGVsYXlzID0gb3B0aW9ucy5jaHVua1JldHJ5RGVsYXlzO1xuXG4gICAgLy8gZGVmYXVsdCBzdGF0ZVxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHNlcnZlcklkOiBjaHVua1RyYW5zZmVySWQsXG4gICAgICBhYm9ydGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICAvLyBzZXQgb25sb2FkIGhhbmRsZXJzXG4gICAgdmFyIG9uZGF0YSA9XG4gICAgICBhY3Rpb24ub25kYXRhIHx8XG4gICAgICBmdW5jdGlvbihmZCkge1xuICAgICAgICByZXR1cm4gZmQ7XG4gICAgICB9O1xuICAgIHZhciBvbmxvYWQgPVxuICAgICAgYWN0aW9uLm9ubG9hZCB8fFxuICAgICAgZnVuY3Rpb24oeGhyLCBtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCA9PT0gJ0hFQUQnXG4gICAgICAgICAgPyB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1VwbG9hZC1PZmZzZXQnKVxuICAgICAgICAgIDogeGhyLnJlc3BvbnNlO1xuICAgICAgfTtcbiAgICB2YXIgb25lcnJvciA9XG4gICAgICBhY3Rpb24ub25lcnJvciB8fFxuICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcblxuICAgIC8vIGNyZWF0ZSBzZXJ2ZXIgaG9va1xuICAgIHZhciByZXF1ZXN0VHJhbnNmZXJJZCA9IGZ1bmN0aW9uIHJlcXVlc3RUcmFuc2ZlcklkKGNiKSB7XG4gICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgLy8gYWRkIG1ldGFkYXRhIHVuZGVyIHNhbWUgbmFtZVxuICAgICAgaWYgKGlzT2JqZWN0KG1ldGFkYXRhKSkgZm9ybURhdGEuYXBwZW5kKG5hbWUsIEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKSk7XG5cbiAgICAgIHZhciBoZWFkZXJzID1cbiAgICAgICAgdHlwZW9mIGFjdGlvbi5oZWFkZXJzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBhY3Rpb24uaGVhZGVycyhmaWxlLCBtZXRhZGF0YSlcbiAgICAgICAgICA6IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbi5oZWFkZXJzLCB7XG4gICAgICAgICAgICAgICdVcGxvYWQtTGVuZ3RoJzogZmlsZS5zaXplXG4gICAgICAgICAgICB9KTtcblxuICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBhY3Rpb24sIHtcbiAgICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHNlbmQgcmVxdWVzdCBvYmplY3RcbiAgICAgIHZhciByZXF1ZXN0ID0gc2VuZFJlcXVlc3QoXG4gICAgICAgIG9uZGF0YShmb3JtRGF0YSksXG4gICAgICAgIGJ1aWxkVVJMKGFwaVVybCwgYWN0aW9uLnVybCksXG4gICAgICAgIHJlcXVlc3RQYXJhbXNcbiAgICAgICk7XG5cbiAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIHJldHVybiBjYihvbmxvYWQoeGhyLCByZXF1ZXN0UGFyYW1zLm1ldGhvZCkpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIHJldHVybiBlcnJvcihcbiAgICAgICAgICBjcmVhdGVSZXNwb25zZShcbiAgICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgICB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgb25lcnJvcih4aHIucmVzcG9uc2UpIHx8IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBjcmVhdGVUaW1lb3V0UmVzcG9uc2UoZXJyb3IpO1xuICAgIH07XG5cbiAgICB2YXIgcmVxdWVzdFRyYW5zZmVyT2Zmc2V0ID0gZnVuY3Rpb24gcmVxdWVzdFRyYW5zZmVyT2Zmc2V0KGNiKSB7XG4gICAgICB2YXIgcmVxdWVzdFVybCA9IGJ1aWxkVVJMKGFwaVVybCwgY2h1bmtTZXJ2ZXIudXJsLCBzdGF0ZS5zZXJ2ZXJJZCk7XG5cbiAgICAgIHZhciBoZWFkZXJzID1cbiAgICAgICAgdHlwZW9mIGFjdGlvbi5oZWFkZXJzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBhY3Rpb24uaGVhZGVycyhzdGF0ZS5zZXJ2ZXJJZClcbiAgICAgICAgICA6IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbi5oZWFkZXJzKTtcblxuICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSB7XG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIG1ldGhvZDogJ0hFQUQnXG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdCA9IHNlbmRSZXF1ZXN0KG51bGwsIHJlcXVlc3RVcmwsIHJlcXVlc3RQYXJhbXMpO1xuXG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICByZXR1cm4gY2Iob25sb2FkKHhociwgcmVxdWVzdFBhcmFtcy5tZXRob2QpKTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICByZXR1cm4gZXJyb3IoXG4gICAgICAgICAgY3JlYXRlUmVzcG9uc2UoXG4gICAgICAgICAgICAnZXJyb3InLFxuICAgICAgICAgICAgeGhyLnN0YXR1cyxcbiAgICAgICAgICAgIG9uZXJyb3IoeGhyLnJlc3BvbnNlKSB8fCB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gY3JlYXRlVGltZW91dFJlc3BvbnNlKGVycm9yKTtcbiAgICB9O1xuXG4gICAgLy8gY3JlYXRlIGNodW5rc1xuICAgIHZhciBsYXN0Q2h1bmtJbmRleCA9IE1hdGguZmxvb3IoZmlsZS5zaXplIC8gY2h1bmtTaXplKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXN0Q2h1bmtJbmRleDsgaSsrKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gaSAqIGNodW5rU2l6ZTtcbiAgICAgIHZhciBkYXRhID0gZmlsZS5zbGljZShcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBvZmZzZXQgKyBjaHVua1NpemUsXG4gICAgICAgICdhcHBsaWNhdGlvbi9vZmZzZXQrb2N0ZXQtc3RyZWFtJ1xuICAgICAgKTtcbiAgICAgIGNodW5rc1tpXSA9IHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHNpemU6IGRhdGEuc2l6ZSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICByZXRyaWVzOiBfdG9Db25zdW1hYmxlQXJyYXkoY2h1bmtSZXRyeURlbGF5cyksXG4gICAgICAgIHN0YXR1czogQ2h1bmtTdGF0dXMuUVVFVUVELFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgcmVxdWVzdDogbnVsbCxcbiAgICAgICAgdGltZW91dDogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgY29tcGxldGVQcm9jZXNzaW5nQ2h1bmtzID0gZnVuY3Rpb24gY29tcGxldGVQcm9jZXNzaW5nQ2h1bmtzKCkge1xuICAgICAgcmV0dXJuIGxvYWQoc3RhdGUuc2VydmVySWQpO1xuICAgIH07XG5cbiAgICB2YXIgY2FuUHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gY2FuUHJvY2Vzc0NodW5rKGNodW5rKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjaHVuay5zdGF0dXMgPT09IENodW5rU3RhdHVzLlFVRVVFRCB8fFxuICAgICAgICBjaHVuay5zdGF0dXMgPT09IENodW5rU3RhdHVzLkVSUk9SXG4gICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgcHJvY2Vzc0NodW5rID0gZnVuY3Rpb24gcHJvY2Vzc0NodW5rKGNodW5rKSB7XG4gICAgICAvLyBwcm9jZXNzaW5nIGlzIHBhdXNlZCwgd2FpdCBoZXJlXG4gICAgICBpZiAoc3RhdGUuYWJvcnRlZCkgcmV0dXJuO1xuXG4gICAgICAvLyBnZXQgbmV4dCBjaHVuayB0byBwcm9jZXNzXG4gICAgICBjaHVuayA9IGNodW5rIHx8IGNodW5rcy5maW5kKGNhblByb2Nlc3NDaHVuayk7XG5cbiAgICAgIC8vIG5vIG1vcmUgY2h1bmtzIHRvIHByb2Nlc3NcbiAgICAgIGlmICghY2h1bmspIHtcbiAgICAgICAgLy8gYWxsIGRvbmU/XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaHVua3MuZXZlcnkoZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgICAgIHJldHVybiBjaHVuay5zdGF0dXMgPT09IENodW5rU3RhdHVzLkNPTVBMRVRFO1xuICAgICAgICAgIH0pXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbXBsZXRlUHJvY2Vzc2luZ0NodW5rcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gY2h1bmsgdG8gaGFuZGxlXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gbm93IHByb2Nlc3NpbmcgdGhpcyBjaHVua1xuICAgICAgY2h1bmsuc3RhdHVzID0gQ2h1bmtTdGF0dXMuUFJPQ0VTU0lORztcbiAgICAgIGNodW5rLnByb2dyZXNzID0gbnVsbDtcblxuICAgICAgLy8gYWxsb3cgcGFyc2luZyBvZiBmb3JtZGF0YVxuICAgICAgdmFyIG9uZGF0YSA9XG4gICAgICAgIGNodW5rU2VydmVyLm9uZGF0YSB8fFxuICAgICAgICBmdW5jdGlvbihmZCkge1xuICAgICAgICAgIHJldHVybiBmZDtcbiAgICAgICAgfTtcbiAgICAgIHZhciBvbmVycm9yID1cbiAgICAgICAgY2h1bmtTZXJ2ZXIub25lcnJvciB8fFxuICAgICAgICBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgLy8gc2VuZCByZXF1ZXN0IG9iamVjdFxuICAgICAgdmFyIHJlcXVlc3RVcmwgPSBidWlsZFVSTChhcGlVcmwsIGNodW5rU2VydmVyLnVybCwgc3RhdGUuc2VydmVySWQpO1xuXG4gICAgICB2YXIgaGVhZGVycyA9XG4gICAgICAgIHR5cGVvZiBjaHVua1NlcnZlci5oZWFkZXJzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBjaHVua1NlcnZlci5oZWFkZXJzKGNodW5rKVxuICAgICAgICAgIDogT2JqZWN0LmFzc2lnbih7fSwgY2h1bmtTZXJ2ZXIuaGVhZGVycywge1xuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL29mZnNldCtvY3RldC1zdHJlYW0nLFxuICAgICAgICAgICAgICAnVXBsb2FkLU9mZnNldCc6IGNodW5rLm9mZnNldCxcbiAgICAgICAgICAgICAgJ1VwbG9hZC1MZW5ndGgnOiBmaWxlLnNpemUsXG4gICAgICAgICAgICAgICdVcGxvYWQtTmFtZSc6IGZpbGUubmFtZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgIHZhciByZXF1ZXN0ID0gKGNodW5rLnJlcXVlc3QgPSBzZW5kUmVxdWVzdChcbiAgICAgICAgb25kYXRhKGNodW5rLmRhdGEpLFxuICAgICAgICByZXF1ZXN0VXJsLFxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBjaHVua1NlcnZlciwge1xuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICAgICAgfSlcbiAgICAgICkpO1xuXG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkb25lIVxuICAgICAgICBjaHVuay5zdGF0dXMgPSBDaHVua1N0YXR1cy5DT01QTEVURTtcblxuICAgICAgICAvLyByZW1vdmUgcmVxdWVzdCByZWZlcmVuY2VcbiAgICAgICAgY2h1bmsucmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgLy8gc3RhcnQgcHJvY2Vzc2luZyBtb3JlIGNodW5rc1xuICAgICAgICBwcm9jZXNzQ2h1bmtzKCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihsZW5ndGhDb21wdXRhYmxlLCBsb2FkZWQsIHRvdGFsKSB7XG4gICAgICAgIGNodW5rLnByb2dyZXNzID0gbGVuZ3RoQ29tcHV0YWJsZSA/IGxvYWRlZCA6IG51bGw7XG4gICAgICAgIHVwZGF0ZVRvdGFsUHJvZ3Jlc3MoKTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICBjaHVuay5zdGF0dXMgPSBDaHVua1N0YXR1cy5FUlJPUjtcbiAgICAgICAgY2h1bmsucmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGNodW5rLmVycm9yID0gb25lcnJvcih4aHIucmVzcG9uc2UpIHx8IHhoci5zdGF0dXNUZXh0O1xuICAgICAgICBpZiAoIXJldHJ5UHJvY2Vzc0NodW5rKGNodW5rKSkge1xuICAgICAgICAgIGVycm9yKFxuICAgICAgICAgICAgY3JlYXRlUmVzcG9uc2UoXG4gICAgICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICAgIG9uZXJyb3IoeGhyLnJlc3BvbnNlKSB8fCB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgY2h1bmsuc3RhdHVzID0gQ2h1bmtTdGF0dXMuRVJST1I7XG4gICAgICAgIGNodW5rLnJlcXVlc3QgPSBudWxsO1xuICAgICAgICBpZiAoIXJldHJ5UHJvY2Vzc0NodW5rKGNodW5rKSkge1xuICAgICAgICAgIGNyZWF0ZVRpbWVvdXRSZXNwb25zZShlcnJvcikoeGhyKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNodW5rLnN0YXR1cyA9IENodW5rU3RhdHVzLlFVRVVFRDtcbiAgICAgICAgY2h1bmsucmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGFib3J0KCk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgcmV0cnlQcm9jZXNzQ2h1bmsgPSBmdW5jdGlvbiByZXRyeVByb2Nlc3NDaHVuayhjaHVuaykge1xuICAgICAgLy8gbm8gbW9yZSByZXRyaWVzIGxlZnRcbiAgICAgIGlmIChjaHVuay5yZXRyaWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBuZXcgcmV0cnlcbiAgICAgIGNodW5rLnN0YXR1cyA9IENodW5rU3RhdHVzLldBSVRJTkc7XG4gICAgICBjbGVhclRpbWVvdXQoY2h1bmsudGltZW91dCk7XG4gICAgICBjaHVuay50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcHJvY2Vzc0NodW5rKGNodW5rKTtcbiAgICAgIH0sIGNodW5rLnJldHJpZXMuc2hpZnQoKSk7XG5cbiAgICAgIC8vIHdlJ3JlIGdvaW5nIHRvIHJldHJ5XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIHVwZGF0ZVRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbiB1cGRhdGVUb3RhbFByb2dyZXNzKCkge1xuICAgICAgLy8gY2FsY3VsYXRlIHRvdGFsIHByb2dyZXNzIGZyYWN0aW9uXG4gICAgICB2YXIgdG90YWxCeXRlc1RyYW5zZmVyZWQgPSBjaHVua3MucmVkdWNlKGZ1bmN0aW9uKHAsIGNodW5rKSB7XG4gICAgICAgIGlmIChwID09PSBudWxsIHx8IGNodW5rLnByb2dyZXNzID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHAgKyBjaHVuay5wcm9ncmVzcztcbiAgICAgIH0sIDApO1xuXG4gICAgICAvLyBjYW4ndCBjb21wdXRlIHByb2dyZXNzXG4gICAgICBpZiAodG90YWxCeXRlc1RyYW5zZmVyZWQgPT09IG51bGwpIHJldHVybiBwcm9ncmVzcyhmYWxzZSwgMCwgMCk7XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBwcm9ncmVzcyB2YWx1ZXNcbiAgICAgIHZhciB0b3RhbFNpemUgPSBjaHVua3MucmVkdWNlKGZ1bmN0aW9uKHRvdGFsLCBjaHVuaykge1xuICAgICAgICByZXR1cm4gdG90YWwgKyBjaHVuay5zaXplO1xuICAgICAgfSwgMCk7XG5cbiAgICAgIC8vIGNhbiB1cGRhdGUgcHJvZ3Jlc3MgaW5kaWNhdG9yXG4gICAgICBwcm9ncmVzcyh0cnVlLCB0b3RhbEJ5dGVzVHJhbnNmZXJlZCwgdG90YWxTaXplKTtcbiAgICB9O1xuXG4gICAgLy8gcHJvY2VzcyBuZXcgY2h1bmtzXG4gICAgdmFyIHByb2Nlc3NDaHVua3MgPSBmdW5jdGlvbiBwcm9jZXNzQ2h1bmtzKCkge1xuICAgICAgdmFyIHRvdGFsUHJvY2Vzc2luZyA9IGNodW5rcy5maWx0ZXIoZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIGNodW5rLnN0YXR1cyA9PT0gQ2h1bmtTdGF0dXMuUFJPQ0VTU0lORztcbiAgICAgIH0pLmxlbmd0aDtcbiAgICAgIGlmICh0b3RhbFByb2Nlc3NpbmcgPj0gMSkgcmV0dXJuO1xuICAgICAgcHJvY2Vzc0NodW5rKCk7XG4gICAgfTtcblxuICAgIHZhciBhYm9ydENodW5rcyA9IGZ1bmN0aW9uIGFib3J0Q2h1bmtzKCkge1xuICAgICAgY2h1bmtzLmZvckVhY2goZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGNodW5rLnRpbWVvdXQpO1xuICAgICAgICBpZiAoY2h1bmsucmVxdWVzdCkge1xuICAgICAgICAgIGNodW5rLnJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGxldCdzIGdvIVxuICAgIGlmICghc3RhdGUuc2VydmVySWQpIHtcbiAgICAgIHJlcXVlc3RUcmFuc2ZlcklkKGZ1bmN0aW9uKHNlcnZlcklkKSB7XG4gICAgICAgIC8vIHN0b3AgaGVyZSBpZiBhYm9ydGVkLCBtaWdodCBoYXZlIGhhcHBlbmVkIGluIGJldHdlZW4gcmVxdWVzdCBhbmQgY2FsbGJhY2tcbiAgICAgICAgaWYgKHN0YXRlLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgICAvLyBwYXNzIGJhY2sgdG8gaXRlbSBzbyB3ZSBjYW4gdXNlIGl0IGlmIHNvbWV0aGluZyBnb2VzIHdyb25nXG4gICAgICAgIHRyYW5zZmVyKHNlcnZlcklkKTtcblxuICAgICAgICAvLyBzdG9yZSBpbnRlcm5hbGx5XG4gICAgICAgIHN0YXRlLnNlcnZlcklkID0gc2VydmVySWQ7XG4gICAgICAgIHByb2Nlc3NDaHVua3MoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0VHJhbnNmZXJPZmZzZXQoZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgIC8vIHN0b3AgaGVyZSBpZiBhYm9ydGVkLCBtaWdodCBoYXZlIGhhcHBlbmVkIGluIGJldHdlZW4gcmVxdWVzdCBhbmQgY2FsbGJhY2tcbiAgICAgICAgaWYgKHN0YXRlLmFib3J0ZWQpIHJldHVybjtcblxuICAgICAgICAvLyBtYXJrIGNodW5rcyB3aXRoIGxvd2VyIG9mZnNldCBhcyBjb21wbGV0ZVxuICAgICAgICBjaHVua3NcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgICAgICByZXR1cm4gY2h1bmsub2Zmc2V0IDwgb2Zmc2V0O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgICAgIGNodW5rLnN0YXR1cyA9IENodW5rU3RhdHVzLkNPTVBMRVRFO1xuICAgICAgICAgICAgY2h1bmsucHJvZ3Jlc3MgPSBjaHVuay5zaXplO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAgICAgICAgcHJvY2Vzc0NodW5rcygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgc3RhdGUuYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIGFib3J0Q2h1bmtzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2lnbmF0dXJlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsZSwgbWV0YWRhdGEsIGxvYWQsIGVycm9yLCBwcm9ncmVzcywgYWJvcnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0OigpID0+IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIHZhciBjcmVhdGVGaWxlUHJvY2Vzc29yRnVuY3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVGaWxlUHJvY2Vzc29yRnVuY3Rpb24oXG4gICAgYXBpVXJsLFxuICAgIGFjdGlvbixcbiAgICBuYW1lLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZpbGUsIG1ldGFkYXRhLCBsb2FkLCBlcnJvciwgcHJvZ3Jlc3MsIGFib3J0LCB0cmFuc2Zlcikge1xuICAgICAgLy8gbm8gZmlsZSByZWNlaXZlZFxuICAgICAgaWYgKCFmaWxlKSByZXR1cm47XG5cbiAgICAgIC8vIGlmIHdhcyBwYXNzZWQgYSBmaWxlLCBhbmQgd2UgY2FuIGNodW5rIGl0LCBleGl0IGhlcmVcbiAgICAgIHZhciBjYW5DaHVua1VwbG9hZCA9IG9wdGlvbnMuY2h1bmtVcGxvYWRzO1xuICAgICAgdmFyIHNob3VsZENodW5rVXBsb2FkID0gY2FuQ2h1bmtVcGxvYWQgJiYgZmlsZS5zaXplID4gb3B0aW9ucy5jaHVua1NpemU7XG4gICAgICB2YXIgd2lsbENodW5rVXBsb2FkID1cbiAgICAgICAgY2FuQ2h1bmtVcGxvYWQgJiYgKHNob3VsZENodW5rVXBsb2FkIHx8IG9wdGlvbnMuY2h1bmtGb3JjZSk7XG4gICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIEJsb2IgJiYgd2lsbENodW5rVXBsb2FkKVxuICAgICAgICByZXR1cm4gcHJvY2Vzc0ZpbGVDaHVua2VkKFxuICAgICAgICAgIGFwaVVybCxcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBmaWxlLFxuICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgIGxvYWQsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgcHJvZ3Jlc3MsXG4gICAgICAgICAgYWJvcnQsXG4gICAgICAgICAgdHJhbnNmZXIsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuXG4gICAgICAvLyBzZXQgaGFuZGxlcnNcbiAgICAgIHZhciBvbmRhdGEgPVxuICAgICAgICBhY3Rpb24ub25kYXRhIHx8XG4gICAgICAgIGZ1bmN0aW9uKGZkKSB7XG4gICAgICAgICAgcmV0dXJuIGZkO1xuICAgICAgICB9O1xuICAgICAgdmFyIG9ubG9hZCA9XG4gICAgICAgIGFjdGlvbi5vbmxvYWQgfHxcbiAgICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICAgIHZhciBvbmVycm9yID1cbiAgICAgICAgYWN0aW9uLm9uZXJyb3IgfHxcbiAgICAgICAgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgIC8vIGNyZWF0ZSBmb3JtZGF0YSBvYmplY3RcbiAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gICAgICAvLyBhZGQgbWV0YWRhdGEgdW5kZXIgc2FtZSBuYW1lXG4gICAgICBpZiAoaXNPYmplY3QobWV0YWRhdGEpKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBUdXJuIGludG8gYW4gYXJyYXkgb2Ygb2JqZWN0cyBzbyBubyBtYXR0ZXIgd2hhdCB0aGUgaW5wdXQsIHdlIGNhbiBoYW5kbGUgaXQgdGhlIHNhbWUgd2F5XG4gICAgICAoZmlsZSBpbnN0YW5jZW9mIEJsb2IgPyBbeyBuYW1lOiBudWxsLCBmaWxlOiBmaWxlIH1dIDogZmlsZSkuZm9yRWFjaChcbiAgICAgICAgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBpdGVtLmZpbGUsXG4gICAgICAgICAgICBpdGVtLm5hbWUgPT09IG51bGxcbiAgICAgICAgICAgICAgPyBpdGVtLmZpbGUubmFtZVxuICAgICAgICAgICAgICA6ICcnICsgaXRlbS5uYW1lICsgaXRlbS5maWxlLm5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAvLyBzZW5kIHJlcXVlc3Qgb2JqZWN0XG4gICAgICB2YXIgcmVxdWVzdCA9IHNlbmRSZXF1ZXN0KFxuICAgICAgICBvbmRhdGEoZm9ybURhdGEpLFxuICAgICAgICBidWlsZFVSTChhcGlVcmwsIGFjdGlvbi51cmwpLFxuICAgICAgICBhY3Rpb25cbiAgICAgICk7XG4gICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICBsb2FkKFxuICAgICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICAgJ2xvYWQnLFxuICAgICAgICAgICAgeGhyLnN0YXR1cyxcbiAgICAgICAgICAgIG9ubG9hZCh4aHIucmVzcG9uc2UpLFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIGVycm9yKFxuICAgICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICAgJ2Vycm9yJyxcbiAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICBvbmVycm9yKHhoci5yZXNwb25zZSkgfHwgeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGNyZWF0ZVRpbWVvdXRSZXNwb25zZShlcnJvcik7XG4gICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgIHJlcXVlc3Qub25hYm9ydCA9IGFib3J0O1xuXG4gICAgICAvLyBzaG91bGQgcmV0dXJuIHJlcXVlc3RcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVByb2Nlc3NvckZ1bmN0aW9uID0gZnVuY3Rpb24gY3JlYXRlUHJvY2Vzc29yRnVuY3Rpb24oKSB7XG4gICAgdmFyIGFwaVVybCA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBjdXN0b20gaGFuZGxlciAoc2hvdWxkIGFsc28gaGFuZGxlIGZpbGUsIGxvYWQsIGVycm9yLCBwcm9ncmVzcyBhbmQgYWJvcnQpXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwO1xuICAgICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICAgIF9rZXkrK1xuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbi5hcHBseSh2b2lkIDAsIFtuYW1lXS5jb25jYXQocGFyYW1zLCBbb3B0aW9uc10pKTtcbiAgICAgIH07XG5cbiAgICAvLyBubyBhY3Rpb24gc3VwcGxpZWRcbiAgICBpZiAoIWFjdGlvbiB8fCAhaXNTdHJpbmcoYWN0aW9uLnVybCkpIHJldHVybiBudWxsO1xuXG4gICAgLy8gaW50ZXJuYWwgaGFuZGxlclxuICAgIHJldHVybiBjcmVhdGVGaWxlUHJvY2Vzc29yRnVuY3Rpb24oYXBpVXJsLCBhY3Rpb24sIG5hbWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaWduYXR1cmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodW5pcXVlRmlsZUlkLCBsb2FkLCBlcnJvcikgPT4geyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICB2YXIgY3JlYXRlUmV2ZXJ0RnVuY3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVSZXZlcnRGdW5jdGlvbigpIHtcbiAgICB2YXIgYXBpVXJsID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIC8vIGlzIGN1c3RvbSBpbXBsZW1lbnRhdGlvblxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cblxuICAgIC8vIG5vIGFjdGlvbiBzdXBwbGllZCwgcmV0dXJuIHN0dWIgZnVuY3Rpb24sIGludGVyZmFjZSB3aWxsIHdvcmssIGJ1dCBmaWxlIHdvbid0IGJlIHJlbW92ZWRcbiAgICBpZiAoIWFjdGlvbiB8fCAhaXNTdHJpbmcoYWN0aW9uLnVybCkpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih1bmlxdWVGaWxlSWQsIGxvYWQpIHtcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gc2V0IG9ubG9hZCBoYW5sZGVyXG4gICAgdmFyIG9ubG9hZCA9XG4gICAgICBhY3Rpb24ub25sb2FkIHx8XG4gICAgICBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH07XG4gICAgdmFyIG9uZXJyb3IgPVxuICAgICAgYWN0aW9uLm9uZXJyb3IgfHxcbiAgICAgIGZ1bmN0aW9uKHJlcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG5cbiAgICAvLyBpbnRlcm5hbCBpbXBsZW1lbnRhdGlvblxuICAgIHJldHVybiBmdW5jdGlvbih1bmlxdWVGaWxlSWQsIGxvYWQsIGVycm9yKSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IHNlbmRSZXF1ZXN0KFxuICAgICAgICB1bmlxdWVGaWxlSWQsXG4gICAgICAgIGFwaVVybCArIGFjdGlvbi51cmwsXG4gICAgICAgIGFjdGlvbiAvLyBjb250YWlucyBtZXRob2QsIGhlYWRlcnMgYW5kIHdpdGhDcmVkZW50aWFscyBwcm9wZXJ0aWVzXG4gICAgICApO1xuICAgICAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbih4aHIpIHtcbiAgICAgICAgbG9hZChcbiAgICAgICAgICBjcmVhdGVSZXNwb25zZShcbiAgICAgICAgICAgICdsb2FkJyxcbiAgICAgICAgICAgIHhoci5zdGF0dXMsXG4gICAgICAgICAgICBvbmxvYWQoeGhyLnJlc3BvbnNlKSxcbiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgICBlcnJvcihcbiAgICAgICAgICBjcmVhdGVSZXNwb25zZShcbiAgICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgICB4aHIuc3RhdHVzLFxuICAgICAgICAgICAgb25lcnJvcih4aHIucmVzcG9uc2UpIHx8IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBjcmVhdGVUaW1lb3V0UmVzcG9uc2UoZXJyb3IpO1xuXG4gICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBnZXRSYW5kb21OdW1iZXIgPSBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoKSB7XG4gICAgdmFyIG1pbiA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG4gICAgdmFyIG1heCA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgcmV0dXJuIG1pbiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlUGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyID0gZnVuY3Rpb24gY3JlYXRlUGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyKFxuICAgIGNiXG4gICkge1xuICAgIHZhciBkdXJhdGlvbiA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEwMDA7XG4gICAgdmFyIG9mZnNldCA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gICAgdmFyIHRpY2tNaW4gPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAyNTtcbiAgICB2YXIgdGlja01heCA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDI1MDtcbiAgICB2YXIgdGltZW91dCA9IG51bGw7XG4gICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcblxuICAgIHZhciB0aWNrID0gZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIHZhciBydW50aW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgdmFyIGRlbGF5ID0gZ2V0UmFuZG9tTnVtYmVyKHRpY2tNaW4sIHRpY2tNYXgpO1xuXG4gICAgICBpZiAocnVudGltZSArIGRlbGF5ID4gZHVyYXRpb24pIHtcbiAgICAgICAgZGVsYXkgPSBydW50aW1lICsgZGVsYXkgLSBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2dyZXNzID0gcnVudGltZSAvIGR1cmF0aW9uO1xuICAgICAgaWYgKHByb2dyZXNzID49IDEgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgIGNiKDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNiKHByb2dyZXNzKTtcblxuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQodGljaywgZGVsYXkpO1xuICAgIH07XG5cbiAgICB0aWNrKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlRmlsZVByb2Nlc3NvciA9IGZ1bmN0aW9uIGNyZWF0ZUZpbGVQcm9jZXNzb3IocHJvY2Vzc0ZuKSB7XG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgY29tcGxldGU6IGZhbHNlLFxuICAgICAgcGVyY2VpdmVkUHJvZ3Jlc3M6IDAsXG4gICAgICBwZXJjZWl2ZWRQZXJmb3JtYW5jZVVwZGF0ZXI6IG51bGwsXG4gICAgICBwcm9ncmVzczogbnVsbCxcbiAgICAgIHRpbWVzdGFtcDogbnVsbCxcbiAgICAgIHBlcmNlaXZlZER1cmF0aW9uOiAwLFxuICAgICAgZHVyYXRpb246IDAsXG4gICAgICByZXF1ZXN0OiBudWxsLFxuICAgICAgcmVzcG9uc2U6IG51bGxcbiAgICB9O1xuXG4gICAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKGZpbGUsIG1ldGFkYXRhKSB7XG4gICAgICB2YXIgcHJvZ3Jlc3NGbiA9IGZ1bmN0aW9uIHByb2dyZXNzRm4oKSB7XG4gICAgICAgIC8vIHdlJ3ZlIG5vdCB5ZXQgc3RhcnRlZCB0aGUgcmVhbCBkb3dubG9hZCwgc3RvcCBoZXJlXG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IG1pZ2h0IG5vdCBnbyB0aHJvdWdoLCBmb3IgaW5zdGFuY2UsIHRoZXJlIG1pZ2h0IGJlIHNvbWUgc2VydmVyIHRyb3VibGVcbiAgICAgICAgLy8gaWYgc3RhdGUucHJvZ3Jlc3MgaXMgbnVsbCwgdGhlIHNlcnZlciBkb2VzIG5vdCBhbGxvdyBjb21wdXRpbmcgcHJvZ3Jlc3MgYW5kIHdlIHNob3cgdGhlIHNwaW5uZXIgaW5zdGVhZFxuICAgICAgICBpZiAoc3RhdGUuZHVyYXRpb24gPT09IDAgfHwgc3RhdGUucHJvZ3Jlc3MgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICAvLyBhcyB3ZSdyZSBub3cgcHJvY2Vzc2luZywgZmlyZSB0aGUgcHJvZ3Jlc3MgZXZlbnRcbiAgICAgICAgYXBpLmZpcmUoJ3Byb2dyZXNzJywgYXBpLmdldFByb2dyZXNzKCkpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiBjb21wbGV0ZUZuKCkge1xuICAgICAgICBzdGF0ZS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGFwaS5maXJlKCdsb2FkLXBlcmNlaXZlZCcsIHN0YXRlLnJlc3BvbnNlLmJvZHkpO1xuICAgICAgfTtcblxuICAgICAgLy8gbGV0J3Mgc3RhcnQgcHJvY2Vzc2luZ1xuICAgICAgYXBpLmZpcmUoJ3N0YXJ0Jyk7XG5cbiAgICAgIC8vIHNldCByZXF1ZXN0IHN0YXJ0XG4gICAgICBzdGF0ZS50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAvLyBjcmVhdGUgcGVyY2VpdmVkIHBlcmZvcm1hbmNlIHByb2dyZXNzIGluZGljYXRvclxuICAgICAgc3RhdGUucGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyID0gY3JlYXRlUGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyKFxuICAgICAgICBmdW5jdGlvbihwcm9ncmVzcykge1xuICAgICAgICAgIHN0YXRlLnBlcmNlaXZlZFByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgc3RhdGUucGVyY2VpdmVkRHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhdGUudGltZXN0YW1wO1xuXG4gICAgICAgICAgcHJvZ3Jlc3NGbigpO1xuXG4gICAgICAgICAgLy8gaWYgZmFrZSBwcm9ncmVzcyBpcyBkb25lLCBhbmQgYSByZXNwb25zZSBoYXMgYmVlbiByZWNlaXZlZCxcbiAgICAgICAgICAvLyBhbmQgd2UndmUgbm90IHlldCBjYWxsZWQgdGhlIGNvbXBsZXRlIG1ldGhvZFxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0YXRlLnJlc3BvbnNlICYmXG4gICAgICAgICAgICBzdGF0ZS5wZXJjZWl2ZWRQcm9ncmVzcyA9PT0gMSAmJlxuICAgICAgICAgICAgIXN0YXRlLmNvbXBsZXRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyB3ZSBkb25lIVxuICAgICAgICAgICAgY29tcGxldGVGbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmFuZG9tIGRlbGF5IGFzIGluIGEgbGlzdCBvZiBmaWxlcyB5b3Ugc3RhcnQgbm90aWNpbmdcbiAgICAgICAgLy8gZmlsZXMgdXBsb2FkaW5nIGF0IHRoZSBleGFjdCBzYW1lIHNwZWVkXG4gICAgICAgIGdldFJhbmRvbU51bWJlcig3NTAsIDE1MDApXG4gICAgICApO1xuXG4gICAgICAvLyByZW1lbWJlciByZXF1ZXN0IHNvIHdlIGNhbiBhYm9ydCBpdCBsYXRlclxuICAgICAgc3RhdGUucmVxdWVzdCA9IHByb2Nlc3NGbihcbiAgICAgICAgLy8gdGhlIGZpbGUgdG8gcHJvY2Vzc1xuICAgICAgICBmaWxlLFxuXG4gICAgICAgIC8vIHRoZSBtZXRhZGF0YSB0byBzZW5kIGFsb25nXG4gICAgICAgIG1ldGFkYXRhLFxuXG4gICAgICAgIC8vIGNhbGxiYWNrcyAobG9hZCwgZXJyb3IsIHByb2dyZXNzLCBhYm9ydCwgdHJhbnNmZXIpXG4gICAgICAgIC8vIGxvYWQgZXhwZWN0cyB0aGUgYm9keSB0byBiZSBhIHNlcnZlciBpZCBpZlxuICAgICAgICAvLyB5b3Ugd2FudCB0byBtYWtlIHVzZSBvZiByZXZlcnRcbiAgICAgICAgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAvLyB3ZSBwdXQgdGhlIHJlc3BvbnNlIGluIHN0YXRlIHNvIHdlIGNhbiBhY2Nlc3NcbiAgICAgICAgICAvLyBpdCBvdXRzaWRlIG9mIHRoaXMgbWV0aG9kXG4gICAgICAgICAgc3RhdGUucmVzcG9uc2UgPSBpc09iamVjdChyZXNwb25zZSlcbiAgICAgICAgICAgID8gcmVzcG9uc2VcbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsb2FkJyxcbiAgICAgICAgICAgICAgICBjb2RlOiAyMDAsXG4gICAgICAgICAgICAgICAgYm9keTogJycgKyByZXNwb25zZSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gdXBkYXRlIGR1cmF0aW9uXG4gICAgICAgICAgc3RhdGUuZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhdGUudGltZXN0YW1wO1xuXG4gICAgICAgICAgLy8gZm9yY2UgcHJvZ3Jlc3MgdG8gMSBhcyB3ZSdyZSBub3cgZG9uZVxuICAgICAgICAgIHN0YXRlLnByb2dyZXNzID0gMTtcblxuICAgICAgICAgIC8vIGFjdHVhbCBsb2FkIGlzIGRvbmUgbGV0J3Mgc2hhcmUgcmVzdWx0c1xuICAgICAgICAgIGFwaS5maXJlKCdsb2FkJywgc3RhdGUucmVzcG9uc2UuYm9keSk7XG5cbiAgICAgICAgICAvLyB3ZSBhcmUgcmVhbGx5IGRvbmVcbiAgICAgICAgICAvLyBpZiBwZXJjZWl2ZWQgcHJvZ3Jlc3MgaXMgMSAoIHdhaXQgZm9yIHBlcmNlaXZlZCBwcm9ncmVzcyB0byBjb21wbGV0ZSApXG4gICAgICAgICAgLy8gb3IgaWYgc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgcHJvZ3Jlc3MgKCBudWxsIClcbiAgICAgICAgICBpZiAoc3RhdGUucGVyY2VpdmVkUHJvZ3Jlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlRm4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gZXJyb3IgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdHlwZSwgY29kZSwgYm9keVxuICAgICAgICBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIGNhbmNlbCB1cGRhdGVyXG4gICAgICAgICAgc3RhdGUucGVyY2VpdmVkUGVyZm9ybWFuY2VVcGRhdGVyLmNsZWFyKCk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgb3RoZXJzIGFib3V0IHRoaXMgZXJyb3JcbiAgICAgICAgICBhcGkuZmlyZShcbiAgICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgICBpc09iamVjdChlcnJvcilcbiAgICAgICAgICAgICAgPyBlcnJvclxuICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICBjb2RlOiAwLFxuICAgICAgICAgICAgICAgICAgYm9keTogJycgKyBlcnJvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGFjdHVhbCBwcm9jZXNzaW5nIHByb2dyZXNzXG4gICAgICAgIGZ1bmN0aW9uKGNvbXB1dGFibGUsIGN1cnJlbnQsIHRvdGFsKSB7XG4gICAgICAgICAgLy8gdXBkYXRlIGFjdHVhbCBkdXJhdGlvblxuICAgICAgICAgIHN0YXRlLmR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXRlLnRpbWVzdGFtcDtcblxuICAgICAgICAgIC8vIHVwZGF0ZSBhY3R1YWwgcHJvZ3Jlc3NcbiAgICAgICAgICBzdGF0ZS5wcm9ncmVzcyA9IGNvbXB1dGFibGUgPyBjdXJyZW50IC8gdG90YWwgOiBudWxsO1xuXG4gICAgICAgICAgcHJvZ3Jlc3NGbigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGFib3J0IGRvZXMgbm90IGV4cGVjdCBhIHZhbHVlXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHN0b3AgdXBkYXRlclxuICAgICAgICAgIHN0YXRlLnBlcmNlaXZlZFBlcmZvcm1hbmNlVXBkYXRlci5jbGVhcigpO1xuXG4gICAgICAgICAgLy8gZmlyZSB0aGUgYWJvcnQgZXZlbnQgc28gd2UgY2FuIHN3aXRjaCB2aXN1YWxzXG4gICAgICAgICAgYXBpLmZpcmUoJ2Fib3J0Jywgc3RhdGUucmVzcG9uc2UgPyBzdGF0ZS5yZXNwb25zZS5ib2R5IDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcmVnaXN0ZXIgdGhlIGlkIGZvciB0aGlzIHRyYW5zZmVyXG4gICAgICAgIGZ1bmN0aW9uKHRyYW5zZmVySWQpIHtcbiAgICAgICAgICBhcGkuZmlyZSgndHJhbnNmZXInLCB0cmFuc2ZlcklkKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgdmFyIGFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAvLyBubyByZXF1ZXN0IHJ1bm5pbmcsIGNhbid0IGFib3J0XG4gICAgICBpZiAoIXN0YXRlLnJlcXVlc3QpIHJldHVybjtcblxuICAgICAgLy8gc3RvcCB1cGRhdGVyXG4gICAgICBzdGF0ZS5wZXJjZWl2ZWRQZXJmb3JtYW5jZVVwZGF0ZXIuY2xlYXIoKTtcblxuICAgICAgLy8gYWJvcnQgYWN0dWFsIHJlcXVlc3RcbiAgICAgIGlmIChzdGF0ZS5yZXF1ZXN0LmFib3J0KSBzdGF0ZS5yZXF1ZXN0LmFib3J0KCk7XG5cbiAgICAgIC8vIGlmIGhhcyByZXNwb25zZSBvYmplY3QsIHdlJ3ZlIGNvbXBsZXRlZCB0aGUgcmVxdWVzdFxuICAgICAgc3RhdGUuY29tcGxldGUgPSB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGFib3J0KCk7XG4gICAgICBzdGF0ZS5jb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgc3RhdGUucGVyY2VpdmVkUHJvZ3Jlc3MgPSAwO1xuICAgICAgc3RhdGUucHJvZ3Jlc3MgPSAwO1xuICAgICAgc3RhdGUudGltZXN0YW1wID0gbnVsbDtcbiAgICAgIHN0YXRlLnBlcmNlaXZlZER1cmF0aW9uID0gMDtcbiAgICAgIHN0YXRlLmR1cmF0aW9uID0gMDtcbiAgICAgIHN0YXRlLnJlcXVlc3QgPSBudWxsO1xuICAgICAgc3RhdGUucmVzcG9uc2UgPSBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbiBnZXRQcm9ncmVzcygpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5wcm9ncmVzc1xuICAgICAgICA/IE1hdGgubWluKHN0YXRlLnByb2dyZXNzLCBzdGF0ZS5wZXJjZWl2ZWRQcm9ncmVzcylcbiAgICAgICAgOiBudWxsO1xuICAgIH07XG4gICAgdmFyIGdldER1cmF0aW9uID0gZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5taW4oc3RhdGUuZHVyYXRpb24sIHN0YXRlLnBlcmNlaXZlZER1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgdmFyIGFwaSA9IE9iamVjdC5hc3NpZ24oe30sIG9uKCksIHtcbiAgICAgIHByb2Nlc3M6IHByb2Nlc3MsIC8vIHN0YXJ0IHByb2Nlc3NpbmcgZmlsZVxuICAgICAgYWJvcnQ6IGFib3J0LCAvLyBhYm9ydCBhY3RpdmUgcHJvY2VzcyByZXF1ZXN0XG4gICAgICBnZXRQcm9ncmVzczogZ2V0UHJvZ3Jlc3MsXG4gICAgICBnZXREdXJhdGlvbjogZ2V0RHVyYXRpb24sXG4gICAgICByZXNldDogcmVzZXRcbiAgICB9KTtcblxuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgdmFyIGdldEZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbiA9IGZ1bmN0aW9uIGdldEZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbihuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuc3Vic3RyKDAsIG5hbWUubGFzdEluZGV4T2YoJy4nKSkgfHwgbmFtZTtcbiAgfTtcblxuICB2YXIgY3JlYXRlRmlsZVN0dWIgPSBmdW5jdGlvbiBjcmVhdGVGaWxlU3R1Yihzb3VyY2UpIHtcbiAgICB2YXIgZGF0YSA9IFtzb3VyY2UubmFtZSwgc291cmNlLnNpemUsIHNvdXJjZS50eXBlXTtcblxuICAgIC8vIGlzIGJsb2Igb3IgYmFzZTY0LCB0aGVuIHdlIG5lZWQgdG8gc2V0IHRoZSBuYW1lXG4gICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEJsb2IgfHwgaXNCYXNlNjREYXRhVVJJKHNvdXJjZSkpIHtcbiAgICAgIGRhdGFbMF0gPSBzb3VyY2UubmFtZSB8fCBnZXREYXRlU3RyaW5nKCk7XG4gICAgfSBlbHNlIGlmIChpc0Jhc2U2NERhdGFVUkkoc291cmNlKSkge1xuICAgICAgLy8gaWYgaXMgYmFzZTY0IGRhdGEgdXJpIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIHRoZSBhdmVyYWdlIHNpemUgYW5kIHR5cGVcbiAgICAgIGRhdGFbMV0gPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgZGF0YVsyXSA9IGdldE1pbWVUeXBlRnJvbUJhc2U2NERhdGFVUkkoc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHNvdXJjZSkpIHtcbiAgICAgIC8vIHVybFxuICAgICAgZGF0YVswXSA9IGdldEZpbGVuYW1lRnJvbVVSTChzb3VyY2UpO1xuICAgICAgZGF0YVsxXSA9IDA7XG4gICAgICBkYXRhWzJdID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGRhdGFbMF0sXG4gICAgICBzaXplOiBkYXRhWzFdLFxuICAgICAgdHlwZTogZGF0YVsyXVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGlzRmlsZSA9IGZ1bmN0aW9uIGlzRmlsZSh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSBpbnN0YW5jZW9mIEZpbGUgfHwgKHZhbHVlIGluc3RhbmNlb2YgQmxvYiAmJiB2YWx1ZS5uYW1lKSk7XG4gIH07XG5cbiAgdmFyIGRlZXBDbG9uZU9iamVjdCA9IGZ1bmN0aW9uIGRlZXBDbG9uZU9iamVjdChzcmMpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHNyYykpIHJldHVybiBzcmM7XG4gICAgdmFyIHRhcmdldCA9IGlzQXJyYXkoc3JjKSA/IFtdIDoge307XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKCFzcmMuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7XG4gICAgICB2YXIgdiA9IHNyY1trZXldO1xuICAgICAgdGFyZ2V0W2tleV0gPSB2ICYmIGlzT2JqZWN0KHYpID8gZGVlcENsb25lT2JqZWN0KHYpIDogdjtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICB2YXIgY3JlYXRlSXRlbSA9IGZ1bmN0aW9uIGNyZWF0ZUl0ZW0oKSB7XG4gICAgdmFyIG9yaWdpbiA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gICAgdmFyIHNlcnZlckZpbGVSZWZlcmVuY2UgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgIHZhciBmaWxlID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICAvLyB1bmlxdWUgaWQgZm9yIHRoaXMgaXRlbSwgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgaXRlbSBhY3Jvc3Mgdmlld3NcbiAgICB2YXIgaWQgPSBnZXRVbmlxdWVJZCgpO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgaXRlbSBzdGF0ZVxuICAgICAqL1xuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIC8vIGlzIGFyY2hpdmVkXG4gICAgICBhcmNoaXZlZDogZmFsc2UsXG5cbiAgICAgIC8vIGlmIGlzIGZyb3plbiwgbm8gbG9uZ2VyIGZpcmVzIGV2ZW50c1xuICAgICAgZnJvemVuOiBmYWxzZSxcblxuICAgICAgLy8gcmVtb3ZlZCBmcm9tIHZpZXdcbiAgICAgIHJlbGVhc2VkOiBmYWxzZSxcblxuICAgICAgLy8gb3JpZ2luYWwgc291cmNlXG4gICAgICBzb3VyY2U6IG51bGwsXG5cbiAgICAgIC8vIGZpbGUgbW9kZWwgcmVmZXJlbmNlXG4gICAgICBmaWxlOiBmaWxlLFxuXG4gICAgICAvLyBpZCBvZiBmaWxlIG9uIHNlcnZlclxuICAgICAgc2VydmVyRmlsZVJlZmVyZW5jZTogc2VydmVyRmlsZVJlZmVyZW5jZSxcblxuICAgICAgLy8gaWQgb2YgZmlsZSB0cmFuc2ZlciBvbiBzZXJ2ZXJcbiAgICAgIHRyYW5zZmVySWQ6IG51bGwsXG5cbiAgICAgIC8vIGlzIGFib3J0ZWRcbiAgICAgIHByb2Nlc3NpbmdBYm9ydGVkOiBmYWxzZSxcblxuICAgICAgLy8gY3VycmVudCBpdGVtIHN0YXR1c1xuICAgICAgc3RhdHVzOiBzZXJ2ZXJGaWxlUmVmZXJlbmNlXG4gICAgICAgID8gSXRlbVN0YXR1cy5QUk9DRVNTSU5HX0NPTVBMRVRFXG4gICAgICAgIDogSXRlbVN0YXR1cy5JTklULFxuXG4gICAgICAvLyBhY3RpdmUgcHJvY2Vzc2VzXG4gICAgICBhY3RpdmVMb2FkZXI6IG51bGwsXG4gICAgICBhY3RpdmVQcm9jZXNzb3I6IG51bGxcbiAgICB9O1xuXG4gICAgLy8gY2FsbGJhY2sgdXNlZCB3aGVuIGFib3J0IHByb2Nlc3NpbmcgaXMgY2FsbGVkIHRvIGxpbmsgYmFjayB0byB0aGUgcmVzb2x2ZSBtZXRob2RcbiAgICB2YXIgYWJvcnRQcm9jZXNzaW5nUmVxdWVzdENvbXBsZXRlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEV4dGVybmFsbHkgYWRkZWQgaXRlbSBtZXRhZGF0YVxuICAgICAqL1xuICAgIHZhciBtZXRhZGF0YSA9IHt9O1xuXG4gICAgLy8gaXRlbSBkYXRhXG4gICAgdmFyIHNldFN0YXR1cyA9IGZ1bmN0aW9uIHNldFN0YXR1cyhzdGF0dXMpIHtcbiAgICAgIHJldHVybiAoc3RhdGUuc3RhdHVzID0gc3RhdHVzKTtcbiAgICB9O1xuXG4gICAgLy8gZmlyZSBldmVudCB1bmxlc3MgdGhlIGl0ZW0gaGFzIGJlZW4gYXJjaGl2ZWRcbiAgICB2YXIgZmlyZSA9IGZ1bmN0aW9uIGZpcmUoZXZlbnQpIHtcbiAgICAgIGlmIChzdGF0ZS5yZWxlYXNlZCB8fCBzdGF0ZS5mcm96ZW4pIHJldHVybjtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICAgIF9rZXkgPSAxO1xuICAgICAgICBfa2V5IDwgX2xlbjtcbiAgICAgICAgX2tleSsrXG4gICAgICApIHtcbiAgICAgICAgcGFyYW1zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGFwaS5maXJlLmFwcGx5KGFwaSwgW2V2ZW50XS5jb25jYXQocGFyYW1zKSk7XG4gICAgfTtcblxuICAgIC8vIGZpbGUgZGF0YVxuICAgIHZhciBnZXRGaWxlRXh0ZW5zaW9uID0gZnVuY3Rpb24gZ2V0RmlsZUV4dGVuc2lvbigpIHtcbiAgICAgIHJldHVybiBnZXRFeHRlbnNpb25Gcm9tRmlsZW5hbWUoc3RhdGUuZmlsZS5uYW1lKTtcbiAgICB9O1xuICAgIHZhciBnZXRGaWxlVHlwZSA9IGZ1bmN0aW9uIGdldEZpbGVUeXBlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLmZpbGUudHlwZTtcbiAgICB9O1xuICAgIHZhciBnZXRGaWxlU2l6ZSA9IGZ1bmN0aW9uIGdldEZpbGVTaXplKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLmZpbGUuc2l6ZTtcbiAgICB9O1xuICAgIHZhciBnZXRGaWxlID0gZnVuY3Rpb24gZ2V0RmlsZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5maWxlO1xuICAgIH07XG5cbiAgICAvL1xuICAgIC8vIGxvZ2ljIHRvIGxvYWQgYSBmaWxlXG4gICAgLy9cbiAgICB2YXIgbG9hZCA9IGZ1bmN0aW9uIGxvYWQoc291cmNlLCBsb2FkZXIsIG9ubG9hZCkge1xuICAgICAgLy8gcmVtZW1iZXIgdGhlIG9yaWdpbmFsIGl0ZW0gc291cmNlXG4gICAgICBzdGF0ZS5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICAgIC8vIHNvdXJjZSBpcyBrbm93blxuICAgICAgYXBpLmZpcmVTeW5jKCdpbml0Jyk7XG5cbiAgICAgIC8vIGZpbGUgc3R1YiBpcyBhbHJlYWR5IHRoZXJlXG4gICAgICBpZiAoc3RhdGUuZmlsZSkge1xuICAgICAgICBhcGkuZmlyZVN5bmMoJ2xvYWQtc2tpcCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBhIHN0dWIgZmlsZSBvYmplY3Qgd2hpbGUgbG9hZGluZyB0aGUgYWN0dWFsIGRhdGFcbiAgICAgIHN0YXRlLmZpbGUgPSBjcmVhdGVGaWxlU3R1Yihzb3VyY2UpO1xuXG4gICAgICAvLyBzdGFydHMgbG9hZGluZ1xuICAgICAgbG9hZGVyLm9uKCdpbml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGZpcmUoJ2xvYWQtaW5pdCcpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHdlJ2V2ZSByZWNlaXZlZCBhIHNpemUgaW5kaWNhdGlvbiwgbGV0J3MgdXBkYXRlIHRoZSBzdHViXG4gICAgICBsb2FkZXIub24oJ21ldGEnLCBmdW5jdGlvbihtZXRhKSB7XG4gICAgICAgIC8vIHNldCBzaXplIG9mIGZpbGUgc3R1YlxuICAgICAgICBzdGF0ZS5maWxlLnNpemUgPSBtZXRhLnNpemU7XG5cbiAgICAgICAgLy8gc2V0IG5hbWUgb2YgZmlsZSBzdHViXG4gICAgICAgIHN0YXRlLmZpbGUuZmlsZW5hbWUgPSBtZXRhLmZpbGVuYW1lO1xuXG4gICAgICAgIC8vIGlmIGhhcyByZWNlaXZlZCBzb3VyY2UsIHdlIGRvbmVcbiAgICAgICAgaWYgKG1ldGEuc291cmNlKSB7XG4gICAgICAgICAgb3JpZ2luID0gRmlsZU9yaWdpbi5MSU1CTztcbiAgICAgICAgICBzdGF0ZS5zZXJ2ZXJGaWxlUmVmZXJlbmNlID0gbWV0YS5zb3VyY2U7XG4gICAgICAgICAgc3RhdGUuc3RhdHVzID0gSXRlbVN0YXR1cy5QUk9DRVNTSU5HX0NPTVBMRVRFO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2l6ZSBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICAgIGZpcmUoJ2xvYWQtbWV0YScpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHRoZSBmaWxlIGlzIG5vdyBsb2FkaW5nIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3JzXG4gICAgICBsb2FkZXIub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcbiAgICAgICAgc2V0U3RhdHVzKEl0ZW1TdGF0dXMuTE9BRElORyk7XG5cbiAgICAgICAgZmlyZSgnbG9hZC1wcm9ncmVzcycsIHByb2dyZXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBhbiBlcnJvciB3YXMgdGhyb3duIHdoaWxlIGxvYWRpbmcgdGhlIGZpbGUsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIGVycm9yIHN0YXRlXG4gICAgICBsb2FkZXIub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgc2V0U3RhdHVzKEl0ZW1TdGF0dXMuTE9BRF9FUlJPUik7XG5cbiAgICAgICAgZmlyZSgnbG9hZC1yZXF1ZXN0LWVycm9yJywgZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHVzZXIgb3IgYW5vdGhlciBwcm9jZXNzIGFib3J0ZWQgdGhlIGZpbGUgbG9hZCAoY2Fubm90IHJldHJ5KVxuICAgICAgbG9hZGVyLm9uKCdhYm9ydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRTdGF0dXMoSXRlbVN0YXR1cy5JTklUKTtcbiAgICAgICAgZmlyZSgnbG9hZC1hYm9ydCcpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGRvbmUgbG9hZGluZ1xuICAgICAgbG9hZGVyLm9uKCdsb2FkJywgZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAvLyBhcyB3ZSd2ZSBub3cgbG9hZGVkIHRoZSBmaWxlIHRoZSBsb2FkZXIgaXMgbm8gbG9uZ2VyIHJlcXVpcmVkXG4gICAgICAgIHN0YXRlLmFjdGl2ZUxvYWRlciA9IG51bGw7XG5cbiAgICAgICAgLy8gY2FsbGVkIHdoZW4gZmlsZSBoYXMgbG9hZGVkIHN1Y2Nlc2Z1bGx5XG4gICAgICAgIHZhciBzdWNjZXNzID0gZnVuY3Rpb24gc3VjY2VzcyhyZXN1bHQpIHtcbiAgICAgICAgICAvLyBzZXQgKHBvc3NpYmx5KSB0cmFuc2Zvcm1lZCBmaWxlXG4gICAgICAgICAgc3RhdGUuZmlsZSA9IGlzRmlsZShyZXN1bHQpID8gcmVzdWx0IDogc3RhdGUuZmlsZTtcblxuICAgICAgICAgIC8vIGZpbGUgcmVjZWl2ZWRcbiAgICAgICAgICBpZiAob3JpZ2luID09PSBGaWxlT3JpZ2luLkxJTUJPICYmIHN0YXRlLnNlcnZlckZpbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHNldFN0YXR1cyhJdGVtU3RhdHVzLlBST0NFU1NJTkdfQ09NUExFVEUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRTdGF0dXMoSXRlbVN0YXR1cy5JRExFKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaXJlKCdsb2FkJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IocmVzdWx0KSB7XG4gICAgICAgICAgLy8gc2V0IG9yaWdpbmFsIGZpbGVcbiAgICAgICAgICBzdGF0ZS5maWxlID0gZmlsZTtcbiAgICAgICAgICBmaXJlKCdsb2FkLW1ldGEnKTtcblxuICAgICAgICAgIHNldFN0YXR1cyhJdGVtU3RhdHVzLkxPQURfRVJST1IpO1xuICAgICAgICAgIGZpcmUoJ2xvYWQtZmlsZS1lcnJvcicsIHJlc3VsdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgc2VydmVyIGZpbGUgcmVmZXJlbmNlLCB3ZSBkb24ndCBuZWVkIHRvIGNhbGwgdGhlIG9ubG9hZCBtZXRob2RcbiAgICAgICAgaWYgKHN0YXRlLnNlcnZlckZpbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgICBzdWNjZXNzKGZpbGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIHNlcnZlciBpZCwgbGV0J3MgZ2l2ZSB0aGlzIGZpbGUgdGhlIGZ1bGwgdHJlYXRtZW50XG4gICAgICAgIG9ubG9hZChmaWxlLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgICB9KTtcblxuICAgICAgLy8gc2V0IGxvYWRlciBzb3VyY2UgZGF0YVxuICAgICAgbG9hZGVyLnNldFNvdXJjZShzb3VyY2UpO1xuXG4gICAgICAvLyBzZXQgYXMgYWN0aXZlIGxvYWRlclxuICAgICAgc3RhdGUuYWN0aXZlTG9hZGVyID0gbG9hZGVyO1xuXG4gICAgICAvLyBsb2FkIHRoZSBzb3VyY2UgZGF0YVxuICAgICAgbG9hZGVyLmxvYWQoKTtcbiAgICB9O1xuXG4gICAgdmFyIHJldHJ5TG9hZCA9IGZ1bmN0aW9uIHJldHJ5TG9hZCgpIHtcbiAgICAgIGlmICghc3RhdGUuYWN0aXZlTG9hZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmFjdGl2ZUxvYWRlci5sb2FkKCk7XG4gICAgfTtcblxuICAgIHZhciBhYm9ydExvYWQgPSBmdW5jdGlvbiBhYm9ydExvYWQoKSB7XG4gICAgICBpZiAoc3RhdGUuYWN0aXZlTG9hZGVyKSB7XG4gICAgICAgIHN0YXRlLmFjdGl2ZUxvYWRlci5hYm9ydCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRTdGF0dXMoSXRlbVN0YXR1cy5JTklUKTtcbiAgICAgIGZpcmUoJ2xvYWQtYWJvcnQnKTtcbiAgICB9O1xuXG4gICAgLy9cbiAgICAvLyBsb2dpYyB0byBwcm9jZXNzIGEgZmlsZVxuICAgIC8vXG4gICAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbiBwcm9jZXNzKHByb2Nlc3Nvciwgb25wcm9jZXNzKSB7XG4gICAgICAvLyBwcm9jZXNzaW5nIHdhcyBhYm9ydGVkXG4gICAgICBpZiAoc3RhdGUucHJvY2Vzc2luZ0Fib3J0ZWQpIHtcbiAgICAgICAgc3RhdGUucHJvY2Vzc2luZ0Fib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBub3cgcHJvY2Vzc2luZ1xuICAgICAgc2V0U3RhdHVzKEl0ZW1TdGF0dXMuUFJPQ0VTU0lORyk7XG5cbiAgICAgIC8vIHJlc2V0IGFib3J0IGNhbGxiYWNrXG4gICAgICBhYm9ydFByb2Nlc3NpbmdSZXF1ZXN0Q29tcGxldGUgPSBudWxsO1xuXG4gICAgICAvLyBpZiBubyBmaWxlIGxvYWRlZCB3ZSdsbCB3YWl0IGZvciB0aGUgbG9hZCBldmVudFxuICAgICAgaWYgKCEoc3RhdGUuZmlsZSBpbnN0YW5jZW9mIEJsb2IpKSB7XG4gICAgICAgIGFwaS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHByb2Nlc3MocHJvY2Vzc29yLCBvbnByb2Nlc3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXR1cCBwcm9jZXNzb3JcbiAgICAgIHByb2Nlc3Nvci5vbignbG9hZCcsIGZ1bmN0aW9uKHNlcnZlckZpbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgLy8gbmVlZCB0aGlzIGlkIHRvIGJlIGFibGUgdG8gcmV2ZXJ0IHRoZSB1cGxvYWRcbiAgICAgICAgc3RhdGUudHJhbnNmZXJJZCA9IG51bGw7XG4gICAgICAgIHN0YXRlLnNlcnZlckZpbGVSZWZlcmVuY2UgPSBzZXJ2ZXJGaWxlUmVmZXJlbmNlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHJlZ2lzdGVyIHRyYW5zZmVyIGlkXG4gICAgICBwcm9jZXNzb3Iub24oJ3RyYW5zZmVyJywgZnVuY3Rpb24odHJhbnNmZXJJZCkge1xuICAgICAgICAvLyBuZWVkIHRoaXMgaWQgdG8gYmUgYWJsZSB0byByZXZlcnQgdGhlIHVwbG9hZFxuICAgICAgICBzdGF0ZS50cmFuc2ZlcklkID0gdHJhbnNmZXJJZDtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9jZXNzb3Iub24oJ2xvYWQtcGVyY2VpdmVkJywgZnVuY3Rpb24oc2VydmVyRmlsZVJlZmVyZW5jZSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcmVxdWlyZWRcbiAgICAgICAgc3RhdGUuYWN0aXZlUHJvY2Vzc29yID0gbnVsbDtcblxuICAgICAgICAvLyBuZWVkIHRoaXMgaWQgdG8gYmUgYWJsZSB0byByZXZlciB0aGUgdXBsb2FkXG4gICAgICAgIHN0YXRlLnRyYW5zZmVySWQgPSBudWxsO1xuICAgICAgICBzdGF0ZS5zZXJ2ZXJGaWxlUmVmZXJlbmNlID0gc2VydmVyRmlsZVJlZmVyZW5jZTtcblxuICAgICAgICBzZXRTdGF0dXMoSXRlbVN0YXR1cy5QUk9DRVNTSU5HX0NPTVBMRVRFKTtcbiAgICAgICAgZmlyZSgncHJvY2Vzcy1jb21wbGV0ZScsIHNlcnZlckZpbGVSZWZlcmVuY2UpO1xuICAgICAgfSk7XG5cbiAgICAgIHByb2Nlc3Nvci5vbignc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZmlyZSgncHJvY2Vzcy1zdGFydCcpO1xuICAgICAgfSk7XG5cbiAgICAgIHByb2Nlc3Nvci5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBzdGF0ZS5hY3RpdmVQcm9jZXNzb3IgPSBudWxsO1xuICAgICAgICBzZXRTdGF0dXMoSXRlbVN0YXR1cy5QUk9DRVNTSU5HX0VSUk9SKTtcbiAgICAgICAgZmlyZSgncHJvY2Vzcy1lcnJvcicsIGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9jZXNzb3Iub24oJ2Fib3J0JywgZnVuY3Rpb24oc2VydmVyRmlsZVJlZmVyZW5jZSkge1xuICAgICAgICBzdGF0ZS5hY3RpdmVQcm9jZXNzb3IgPSBudWxsO1xuXG4gICAgICAgIC8vIGlmIGZpbGUgd2FzIHVwbG9hZGVkIGJ1dCBwcm9jZXNzaW5nIHdhcyBjYW5jZWxsZWQgZHVyaW5nIHBlcmNlaXZlZCBwcm9jZXNzb3IgdGltZSBzdG9yZSBmaWxlIHJlZmVyZW5jZVxuICAgICAgICBzdGF0ZS50cmFuc2ZlcklkID0gbnVsbDtcbiAgICAgICAgc3RhdGUuc2VydmVyRmlsZVJlZmVyZW5jZSA9IHNlcnZlckZpbGVSZWZlcmVuY2U7XG5cbiAgICAgICAgc2V0U3RhdHVzKEl0ZW1TdGF0dXMuSURMRSk7XG4gICAgICAgIGZpcmUoJ3Byb2Nlc3MtYWJvcnQnKTtcblxuICAgICAgICAvLyBoYXMgdGltZW91dCBzbyBkb2Vzbid0IGludGVyZmVyZSB3aXRoIHJlbW92ZSBhY3Rpb25cbiAgICAgICAgaWYgKGFib3J0UHJvY2Vzc2luZ1JlcXVlc3RDb21wbGV0ZSkge1xuICAgICAgICAgIGFib3J0UHJvY2Vzc2luZ1JlcXVlc3RDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcHJvY2Vzc29yLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgIGZpcmUoJ3Byb2Nlc3MtcHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gd2hlbiBzdWNjZXNzZnVsbHkgdHJhbnNmb3JtZWRcbiAgICAgIHZhciBzdWNjZXNzID0gZnVuY3Rpb24gc3VjY2VzcyhmaWxlKSB7XG4gICAgICAgIC8vIGlmIHdhcyBhcmNoaXZlZCBpbiB0aGUgbWVhbiB0aW1lLCBkb24ndCBwcm9jZXNzXG4gICAgICAgIGlmIChzdGF0ZS5hcmNoaXZlZCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIHByb2Nlc3MgZmlsZSFcbiAgICAgICAgcHJvY2Vzc29yLnByb2Nlc3MoZmlsZSwgT2JqZWN0LmFzc2lnbih7fSwgbWV0YWRhdGEpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyB0cmFuc2Zvcm0gcGhhc2VcbiAgICAgIHZhciBlcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5cbiAgICAgIC8vIHN0YXJ0IHByb2Nlc3NpbmcgdGhlIGZpbGVcbiAgICAgIG9ucHJvY2VzcyhzdGF0ZS5maWxlLCBzdWNjZXNzLCBlcnJvcik7XG5cbiAgICAgIC8vIHNldCBhcyBhY3RpdmUgcHJvY2Vzc29yXG4gICAgICBzdGF0ZS5hY3RpdmVQcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgfTtcblxuICAgIHZhciByZXF1ZXN0UHJvY2Vzc2luZyA9IGZ1bmN0aW9uIHJlcXVlc3RQcm9jZXNzaW5nKCkge1xuICAgICAgc3RhdGUucHJvY2Vzc2luZ0Fib3J0ZWQgPSBmYWxzZTtcbiAgICAgIHNldFN0YXR1cyhJdGVtU3RhdHVzLlBST0NFU1NJTkdfUVVFVUVEKTtcbiAgICB9O1xuXG4gICAgdmFyIGFib3J0UHJvY2Vzc2luZyA9IGZ1bmN0aW9uIGFib3J0UHJvY2Vzc2luZygpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgIGlmICghc3RhdGUuYWN0aXZlUHJvY2Vzc29yKSB7XG4gICAgICAgICAgc3RhdGUucHJvY2Vzc2luZ0Fib3J0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgc2V0U3RhdHVzKEl0ZW1TdGF0dXMuSURMRSk7XG4gICAgICAgICAgZmlyZSgncHJvY2Vzcy1hYm9ydCcpO1xuXG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFib3J0UHJvY2Vzc2luZ1JlcXVlc3RDb21wbGV0ZSA9IGZ1bmN0aW9uIGFib3J0UHJvY2Vzc2luZ1JlcXVlc3RDb21wbGV0ZSgpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGUuYWN0aXZlUHJvY2Vzc29yLmFib3J0KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy9cbiAgICAvLyBsb2dpYyB0byByZXZlcnQgYSBwcm9jZXNzZWQgZmlsZVxuICAgIC8vXG4gICAgdmFyIHJldmVydCA9IGZ1bmN0aW9uIHJldmVydChyZXZlcnRGaWxlVXBsb2FkLCBmb3JjZVJldmVydCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBjYW5ub3QgcmV2ZXJ0IHdpdGhvdXQgYSBzZXJ2ZXIgaWQgZm9yIHRoaXMgcHJvY2Vzc1xuICAgICAgICBpZiAoc3RhdGUuc2VydmVyRmlsZVJlZmVyZW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXZlcnQgdGhlIHVwbG9hZCAoZmlyZSBhbmQgZm9yZ2V0KVxuICAgICAgICByZXZlcnRGaWxlVXBsb2FkKFxuICAgICAgICAgIHN0YXRlLnNlcnZlckZpbGVSZWZlcmVuY2UsXG4gICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZXNldCBmaWxlIHNlcnZlciBpZCBhcyBub3cgaXQncyBubyBhdmFpbGFibGUgb24gdGhlIHNlcnZlclxuICAgICAgICAgICAgc3RhdGUuc2VydmVyRmlsZVJlZmVyZW5jZSA9IG51bGw7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgLy8gZG9uJ3Qgc2V0IGVycm9yIHN0YXRlIHdoZW4gcmV2ZXJ0aW5nIGlzIG9wdGlvbmFsLCBpdCB3aWxsIGFsd2F5cyByZXNvbHZlXG4gICAgICAgICAgICBpZiAoIWZvcmNlUmV2ZXJ0KSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvaCBubyBlcnJvcnNcbiAgICAgICAgICAgIHNldFN0YXR1cyhJdGVtU3RhdHVzLlBST0NFU1NJTkdfUkVWRVJUX0VSUk9SKTtcbiAgICAgICAgICAgIGZpcmUoJ3Byb2Nlc3MtcmV2ZXJ0LWVycm9yJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBmaXJlIGV2ZW50XG4gICAgICAgIHNldFN0YXR1cyhJdGVtU3RhdHVzLklETEUpO1xuICAgICAgICBmaXJlKCdwcm9jZXNzLXJldmVydCcpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIGV4cG9zZWQgbWV0aG9kc1xuICAgIHZhciBfc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiBzZXRNZXRhZGF0YShrZXksIHZhbHVlLCBzaWxlbnQpIHtcbiAgICAgIHZhciBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgICB2YXIgcm9vdCA9IGtleXNbMF07XG4gICAgICB2YXIgbGFzdCA9IGtleXMucG9wKCk7XG4gICAgICB2YXIgZGF0YSA9IG1ldGFkYXRhO1xuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gKGRhdGEgPSBkYXRhW2tleV0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGNvbXBhcmUgb2xkIHZhbHVlIGFnYWluc3QgbmV3IHZhbHVlLCBpZiB0aGV5J3JlIHRoZSBzYW1lLCB3ZSdyZSBub3QgdXBkYXRpbmdcbiAgICAgIGlmIChKU09OLnN0cmluZ2lmeShkYXRhW2xhc3RdKSA9PT0gSlNPTi5zdHJpbmdpZnkodmFsdWUpKSByZXR1cm47XG5cbiAgICAgIC8vIHVwZGF0ZSB2YWx1ZVxuICAgICAgZGF0YVtsYXN0XSA9IHZhbHVlO1xuXG4gICAgICAvLyBkb24ndCBmaXJlIHVwZGF0ZVxuICAgICAgaWYgKHNpbGVudCkgcmV0dXJuO1xuXG4gICAgICAvLyBmaXJlIHVwZGF0ZVxuICAgICAgZmlyZSgnbWV0YWRhdGEtdXBkYXRlJywge1xuICAgICAgICBrZXk6IHJvb3QsXG4gICAgICAgIHZhbHVlOiBtZXRhZGF0YVtyb290XVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBnZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIGdldE1ldGFkYXRhKGtleSkge1xuICAgICAgcmV0dXJuIGRlZXBDbG9uZU9iamVjdChrZXkgPyBtZXRhZGF0YVtrZXldIDogbWV0YWRhdGEpO1xuICAgIH07XG5cbiAgICB2YXIgYXBpID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9yaWdpbjoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlcklkOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc2VydmVyRmlsZVJlZmVyZW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZmVySWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS50cmFuc2ZlcklkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuc3RhdHVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZmlsZW5hbWU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5maWxlLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb246IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRGaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24oc3RhdGUuZmlsZS5uYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGVFeHRlbnNpb246IHsgZ2V0OiBnZXRGaWxlRXh0ZW5zaW9uIH0sXG4gICAgICAgIGZpbGVUeXBlOiB7IGdldDogZ2V0RmlsZVR5cGUgfSxcbiAgICAgICAgZmlsZVNpemU6IHsgZ2V0OiBnZXRGaWxlU2l6ZSB9LFxuICAgICAgICBmaWxlOiB7IGdldDogZ2V0RmlsZSB9LFxuICAgICAgICByZWxhdGl2ZVBhdGg6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5maWxlLl9yZWxhdGl2ZVBhdGg7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnNvdXJjZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TWV0YWRhdGE6IGdldE1ldGFkYXRhLFxuICAgICAgICBzZXRNZXRhZGF0YTogZnVuY3Rpb24gc2V0TWV0YWRhdGEoa2V5LCB2YWx1ZSwgc2lsZW50KSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0ga2V5O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgX3NldE1ldGFkYXRhKGtleSwgZGF0YVtrZXldLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9zZXRNZXRhZGF0YShrZXksIHZhbHVlLCBzaWxlbnQpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIChpdGVtQVBJW25hbWVdID0gaGFuZGxlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWJvcnRMb2FkOiBhYm9ydExvYWQsXG4gICAgICAgIHJldHJ5TG9hZDogcmV0cnlMb2FkLFxuICAgICAgICByZXF1ZXN0UHJvY2Vzc2luZzogcmVxdWVzdFByb2Nlc3NpbmcsXG4gICAgICAgIGFib3J0UHJvY2Vzc2luZzogYWJvcnRQcm9jZXNzaW5nLFxuXG4gICAgICAgIGxvYWQ6IGxvYWQsXG4gICAgICAgIHByb2Nlc3M6IHByb2Nlc3MsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0XG4gICAgICB9LFxuXG4gICAgICBvbigpLFxuICAgICAge1xuICAgICAgICBmcmVlemU6IGZ1bmN0aW9uIGZyZWV6ZSgpIHtcbiAgICAgICAgICByZXR1cm4gKHN0YXRlLmZyb3plbiA9IHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbGVhc2U6IGZ1bmN0aW9uIHJlbGVhc2UoKSB7XG4gICAgICAgICAgcmV0dXJuIChzdGF0ZS5yZWxlYXNlZCA9IHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICByZWxlYXNlZDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnJlbGVhc2VkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhcmNoaXZlOiBmdW5jdGlvbiBhcmNoaXZlKCkge1xuICAgICAgICAgIHJldHVybiAoc3RhdGUuYXJjaGl2ZWQgPSB0cnVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXJjaGl2ZWQ6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5hcmNoaXZlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gY3JlYXRlIGl0IGhlcmUgaW5zdGVhZCBvZiByZXR1cm5pbmcgaXQgaW5zdGFudGx5IHNvIHdlIGNhbiBleHRlbmQgaXQgbGF0ZXJcbiAgICB2YXIgaXRlbUFQSSA9IGNyZWF0ZU9iamVjdChhcGkpO1xuXG4gICAgcmV0dXJuIGl0ZW1BUEk7XG4gIH07XG5cbiAgdmFyIGdldEl0ZW1JbmRleEJ5UXVlcnkgPSBmdW5jdGlvbiBnZXRJdGVtSW5kZXhCeVF1ZXJ5KGl0ZW1zLCBxdWVyeSkge1xuICAgIC8vIGp1c3QgcmV0dXJuIGZpcnN0IGluZGV4XG4gICAgaWYgKGlzRW1wdHkocXVlcnkpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBpbnZhbGlkIHF1ZXJpZXNcbiAgICBpZiAoIWlzU3RyaW5nKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBpdGVtIGJ5IGlkIChvciAtMSBpZiBub3QgZm91bmQpXG4gICAgcmV0dXJuIGl0ZW1zLmZpbmRJbmRleChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5pZCA9PT0gcXVlcnk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdldEl0ZW1CeUlkID0gZnVuY3Rpb24gZ2V0SXRlbUJ5SWQoaXRlbXMsIGl0ZW1JZCkge1xuICAgIHZhciBpbmRleCA9IGdldEl0ZW1JbmRleEJ5UXVlcnkoaXRlbXMsIGl0ZW1JZCk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXNbaW5kZXhdIHx8IG51bGw7XG4gIH07XG5cbiAgdmFyIGZldGNoQmxvYiA9IGZ1bmN0aW9uIGZldGNoQmxvYihcbiAgICB1cmwsXG4gICAgbG9hZCxcbiAgICBlcnJvcixcbiAgICBwcm9ncmVzcyxcbiAgICBhYm9ydCxcbiAgICBoZWFkZXJzXG4gICkge1xuICAgIHZhciByZXF1ZXN0ID0gc2VuZFJlcXVlc3QobnVsbCwgdXJsLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYidcbiAgICB9KTtcblxuICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAvLyBnZXQgaGVhZGVyc1xuICAgICAgdmFyIGhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7XG5cbiAgICAgIC8vIGdldCBmaWxlbmFtZVxuICAgICAgdmFyIGZpbGVuYW1lID1cbiAgICAgICAgZ2V0RmlsZUluZm9Gcm9tSGVhZGVycyhoZWFkZXJzKS5uYW1lIHx8IGdldEZpbGVuYW1lRnJvbVVSTCh1cmwpO1xuXG4gICAgICAvLyBjcmVhdGUgcmVzcG9uc2VcbiAgICAgIGxvYWQoXG4gICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICdsb2FkJyxcbiAgICAgICAgICB4aHIuc3RhdHVzLFxuICAgICAgICAgIGdldEZpbGVGcm9tQmxvYih4aHIucmVzcG9uc2UsIGZpbGVuYW1lKSxcbiAgICAgICAgICBoZWFkZXJzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKHhocikge1xuICAgICAgZXJyb3IoXG4gICAgICAgIGNyZWF0ZVJlc3BvbnNlKFxuICAgICAgICAgICdlcnJvcicsXG4gICAgICAgICAgeGhyLnN0YXR1cyxcbiAgICAgICAgICB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdC5vbmhlYWRlcnMgPSBmdW5jdGlvbih4aHIpIHtcbiAgICAgIGhlYWRlcnMoXG4gICAgICAgIGNyZWF0ZVJlc3BvbnNlKCdoZWFkZXJzJywgeGhyLnN0YXR1cywgbnVsbCwgeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBjcmVhdGVUaW1lb3V0UmVzcG9uc2UoZXJyb3IpO1xuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgIHJlcXVlc3Qub25hYm9ydCA9IGFib3J0O1xuXG4gICAgLy8gc2hvdWxkIHJldHVybiByZXF1ZXN0XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH07XG5cbiAgdmFyIGdldERvbWFpbkZyb21VUkwgPSBmdW5jdGlvbiBnZXREb21haW5Gcm9tVVJMKHVybCkge1xuICAgIGlmICh1cmwuaW5kZXhPZignLy8nKSA9PT0gMCkge1xuICAgICAgdXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyB1cmw7XG4gICAgfVxuICAgIHJldHVybiB1cmxcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAucmVwbGFjZSgnYmxvYjonLCAnJylcbiAgICAgIC5yZXBsYWNlKC8oW2Etel0pPzpcXC9cXC8vLCAnJDEnKVxuICAgICAgLnNwbGl0KCcvJylbMF07XG4gIH07XG5cbiAgdmFyIGlzRXh0ZXJuYWxVUkwgPSBmdW5jdGlvbiBpc0V4dGVybmFsVVJMKHVybCkge1xuICAgIHJldHVybiAoXG4gICAgICAodXJsLmluZGV4T2YoJzonKSA+IC0xIHx8IHVybC5pbmRleE9mKCcvLycpID4gLTEpICYmXG4gICAgICBnZXREb21haW5Gcm9tVVJMKGxvY2F0aW9uLmhyZWYpICE9PSBnZXREb21haW5Gcm9tVVJMKHVybClcbiAgICApO1xuICB9O1xuXG4gIHZhciBkeW5hbWljTGFiZWwgPSBmdW5jdGlvbiBkeW5hbWljTGFiZWwobGFiZWwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXNGdW5jdGlvbihsYWJlbCkgPyBsYWJlbC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgOiBsYWJlbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBpc01vY2tJdGVtID0gZnVuY3Rpb24gaXNNb2NrSXRlbShpdGVtKSB7XG4gICAgcmV0dXJuICFpc0ZpbGUoaXRlbS5maWxlKTtcbiAgfTtcblxuICB2YXIgbGlzdFVwZGF0ZWQgPSBmdW5jdGlvbiBsaXN0VXBkYXRlZChkaXNwYXRjaCwgc3RhdGUpIHtcbiAgICBjbGVhclRpbWVvdXQoc3RhdGUubGlzdFVwZGF0ZVRpbWVvdXQpO1xuICAgIHN0YXRlLmxpc3RVcGRhdGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRpc3BhdGNoKCdESURfVVBEQVRFX0lURU1TJywgeyBpdGVtczogZ2V0QWN0aXZlSXRlbXMoc3RhdGUuaXRlbXMpIH0pO1xuICAgIH0sIDApO1xuICB9O1xuXG4gIHZhciBvcHRpb25hbFByb21pc2UgPSBmdW5jdGlvbiBvcHRpb25hbFByb21pc2UoZm4pIHtcbiAgICBmb3IgKFxuICAgICAgdmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBwYXJhbXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICBfa2V5ID0gMTtcbiAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgX2tleSsrXG4gICAgKSB7XG4gICAgICBwYXJhbXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgaWYgKCFmbikge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KHZvaWQgMCwgcGFyYW1zKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4ocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHNvcnRJdGVtcyA9IGZ1bmN0aW9uIHNvcnRJdGVtcyhzdGF0ZSwgY29tcGFyZSkge1xuICAgIHN0YXRlLml0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmUoY3JlYXRlSXRlbUFQSShhKSwgY3JlYXRlSXRlbUFQSShiKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gcmV0dXJucyBpdGVtIGJhc2VkIG9uIHN0YXRlXG4gIHZhciBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZSA9IGZ1bmN0aW9uIGdldEl0ZW1CeVF1ZXJ5RnJvbVN0YXRlKFxuICAgIHN0YXRlLFxuICAgIGl0ZW1IYW5kbGVyXG4gICkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfcmVmID1cbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBxdWVyeSA9IF9yZWYucXVlcnksXG4gICAgICAgIF9yZWYkc3VjY2VzcyA9IF9yZWYuc3VjY2VzcyxcbiAgICAgICAgc3VjY2VzcyA9IF9yZWYkc3VjY2VzcyA9PT0gdm9pZCAwID8gZnVuY3Rpb24oKSB7fSA6IF9yZWYkc3VjY2VzcyxcbiAgICAgICAgX3JlZiRmYWlsdXJlID0gX3JlZi5mYWlsdXJlLFxuICAgICAgICBmYWlsdXJlID0gX3JlZiRmYWlsdXJlID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZiRmYWlsdXJlLFxuICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcbiAgICAgICAgICAncXVlcnknLFxuICAgICAgICAgICdzdWNjZXNzJyxcbiAgICAgICAgICAnZmFpbHVyZSdcbiAgICAgICAgXSk7XG4gICAgICB2YXIgaXRlbSA9IGdldEl0ZW1CeVF1ZXJ5KHN0YXRlLml0ZW1zLCBxdWVyeSk7XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgZmFpbHVyZSh7XG4gICAgICAgICAgZXJyb3I6IGNyZWF0ZVJlc3BvbnNlKCdlcnJvcicsIDAsICdJdGVtIG5vdCBmb3VuZCcpLFxuXG4gICAgICAgICAgZmlsZTogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpdGVtSGFuZGxlcihpdGVtLCBzdWNjZXNzLCBmYWlsdXJlLCBvcHRpb25zIHx8IHt9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb25zID0gZnVuY3Rpb24gYWN0aW9ucyhkaXNwYXRjaCwgcXVlcnksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQWJvcnRzIGFsbCBvbmdvaW5nIHByb2Nlc3Nlc1xuICAgICAgICovXG4gICAgICBBQk9SVF9BTEw6IGZ1bmN0aW9uIEFCT1JUX0FMTCgpIHtcbiAgICAgICAgZ2V0QWN0aXZlSXRlbXMoc3RhdGUuaXRlbXMpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIGl0ZW0uZnJlZXplKCk7XG4gICAgICAgICAgaXRlbS5hYm9ydExvYWQoKTtcbiAgICAgICAgICBpdGVtLmFib3J0UHJvY2Vzc2luZygpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0cyBpbml0aWFsIGZpbGVzXG4gICAgICAgKi9cbiAgICAgIERJRF9TRVRfRklMRVM6IGZ1bmN0aW9uIERJRF9TRVRfRklMRVMoX3JlZjIpIHtcbiAgICAgICAgdmFyIF9yZWYyJHZhbHVlID0gX3JlZjIudmFsdWUsXG4gICAgICAgICAgdmFsdWUgPSBfcmVmMiR2YWx1ZSA9PT0gdm9pZCAwID8gW10gOiBfcmVmMiR2YWx1ZTtcblxuICAgICAgICAvLyBtYXAgdmFsdWVzIHRvIGZpbGUgb2JqZWN0c1xuICAgICAgICB2YXIgZmlsZXMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2U6IGZpbGUuc291cmNlID8gZmlsZS5zb3VyY2UgOiBmaWxlLFxuICAgICAgICAgICAgb3B0aW9uczogZmlsZS5vcHRpb25zXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbG9vcCBvdmVyIGZpbGVzLCBpZiBmaWxlIGlzIGluIGxpc3QsIGxlYXZlIGl0IGJlLCBpZiBub3QsIHJlbW92ZVxuICAgICAgICAvLyB0ZXN0IGlmIGl0ZW1zIHNob3VsZCBiZSBtb3ZlZFxuICAgICAgICB2YXIgYWN0aXZlSXRlbXMgPSBnZXRBY3RpdmVJdGVtcyhzdGF0ZS5pdGVtcyk7XG5cbiAgICAgICAgYWN0aXZlSXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgLy8gaWYgaXRlbSBub3QgaXMgaW4gbmV3IHZhbHVlLCByZW1vdmVcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhZmlsZXMuZmluZChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWxlLnNvdXJjZSA9PT0gaXRlbS5zb3VyY2UgfHwgZmlsZS5zb3VyY2UgPT09IGl0ZW0uZmlsZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCgnUkVNT1ZFX0lURU0nLCB7IHF1ZXJ5OiBpdGVtLCByZW1vdmU6IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYWRkIG5ldyBmaWxlc1xuICAgICAgICBhY3RpdmVJdGVtcyA9IGdldEFjdGl2ZUl0ZW1zKHN0YXRlLml0ZW1zKTtcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlLCBpbmRleCkge1xuICAgICAgICAgIC8vIGlmIGZpbGUgaXMgYWxyZWFkeSBpbiBsaXN0XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYWN0aXZlSXRlbXMuZmluZChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVtLnNvdXJjZSA9PT0gZmlsZS5zb3VyY2UgfHwgaXRlbS5maWxlID09PSBmaWxlLnNvdXJjZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gbm90IGluIGxpc3QsIGFkZFxuICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgJ0FERF9JVEVNJyxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGZpbGUsIHtcbiAgICAgICAgICAgICAgaW50ZXJhY3Rpb25NZXRob2Q6IEludGVyYWN0aW9uTWV0aG9kLk5PTkUsXG4gICAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIERJRF9VUERBVEVfSVRFTV9NRVRBREFUQTogZnVuY3Rpb24gRElEX1VQREFURV9JVEVNX01FVEFEQVRBKF9yZWYzKSB7XG4gICAgICAgIHZhciBpZCA9IF9yZWYzLmlkO1xuXG4gICAgICAgIC8vIGlmIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBpbiBjbG9zZSBzdWNjZXNzaW9uIHdlIGNvbWJpbmVkIGFsbCBjYWxscyB0b2dldGhlciB0byBzYXZlIHJlc291cmNlc1xuICAgICAgICBjbGVhclRpbWVvdXQoc3RhdGUuaXRlbVVwZGF0ZVRpbWVvdXQpO1xuICAgICAgICBzdGF0ZS5pdGVtVXBkYXRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBnZXRJdGVtQnlJZChzdGF0ZS5pdGVtcywgaWQpO1xuXG4gICAgICAgICAgLy8gb25seSByZXZlcnQgYW5kIGF0dGVtcHQgdG8gdXBsb2FkIHdoZW4gd2UncmUgdXBsb2FkaW5nIHRvIGEgc2VydmVyXG4gICAgICAgICAgaWYgKCFxdWVyeSgnSVNfQVNZTkMnKSkge1xuICAgICAgICAgICAgLy8gc2hvdWxkIHdlIHVwZGF0ZSB0aGUgb3V0cHV0IGRhdGFcbiAgICAgICAgICAgIGFwcGx5RmlsdGVyQ2hhaW4oJ1NIT1VMRF9QUkVQQVJFX09VVFBVVCcsIGZhbHNlLCB7XG4gICAgICAgICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihzaG91bGRQcmVwYXJlT3V0cHV0KSB7XG4gICAgICAgICAgICAgIGlmICghc2hvdWxkUHJlcGFyZU91dHB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAnUkVRVUVTVF9QUkVQQVJFX09VVFBVVCcsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcXVlcnk6IGlkLFxuICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgnRElEX1BSRVBBUkVfT1VUUFVUJywgeyBpZDogaWQsIGZpbGU6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGZvciBhc3luYyBzY2VuYXJpb3NcbiAgICAgICAgICB2YXIgdXBsb2FkID0gZnVuY3Rpb24gdXBsb2FkKCkge1xuICAgICAgICAgICAgLy8gd2UgcHVzaCB0aGlzIGZvcndhcmQgYSBiaXQgc28gdGhlIGludGVyZmFjZSBpcyB1cGRhdGVkIGNvcnJlY3RseVxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goJ1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HJywgeyBxdWVyeTogaWQgfSk7XG4gICAgICAgICAgICB9LCAzMik7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciByZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoZG9VcGxvYWQpIHtcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgLnJldmVydChcbiAgICAgICAgICAgICAgICBjcmVhdGVSZXZlcnRGdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc2VydmVyLnVybCxcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc2VydmVyLnJldmVydFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcXVlcnkoJ0dFVF9GT1JDRV9SRVZFUlQnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC50aGVuKGRvVXBsb2FkID8gdXBsb2FkIDogZnVuY3Rpb24oKSB7fSlcbiAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKCkge30pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydChkb1VwbG9hZCkge1xuICAgICAgICAgICAgaXRlbS5hYm9ydFByb2Nlc3NpbmcoKS50aGVuKGRvVXBsb2FkID8gdXBsb2FkIDogZnVuY3Rpb24oKSB7fSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIGlmIHdlIHNob3VsZCByZS11cGxvYWQgdGhlIGZpbGUgaW1taWRpYXRlbHlcbiAgICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19DT01QTEVURSkge1xuICAgICAgICAgICAgcmV0dXJuIHJldmVydChzdGF0ZS5vcHRpb25zLmluc3RhbnRVcGxvYWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIGN1cnJlbnRseSB1cGxvYWRpbmcsIGNhbmNlbCB1cGxvYWRcbiAgICAgICAgICBpZiAoaXRlbS5zdGF0dXMgPT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lORykge1xuICAgICAgICAgICAgcmV0dXJuIGFib3J0KHN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZCkge1xuICAgICAgICAgICAgdXBsb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH0sXG5cbiAgICAgIE1PVkVfSVRFTTogZnVuY3Rpb24gTU9WRV9JVEVNKF9yZWY0KSB7XG4gICAgICAgIHZhciBxdWVyeSA9IF9yZWY0LnF1ZXJ5LFxuICAgICAgICAgIGluZGV4ID0gX3JlZjQuaW5kZXg7XG4gICAgICAgIHZhciBpdGVtID0gZ2V0SXRlbUJ5UXVlcnkoc3RhdGUuaXRlbXMsIHF1ZXJ5KTtcbiAgICAgICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzdGF0ZS5pdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgICAgICBpbmRleCA9IGxpbWl0KGluZGV4LCAwLCBzdGF0ZS5pdGVtcy5sZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gaW5kZXgpIHJldHVybjtcbiAgICAgICAgc3RhdGUuaXRlbXMuc3BsaWNlKGluZGV4LCAwLCBzdGF0ZS5pdGVtcy5zcGxpY2UoY3VycmVudEluZGV4LCAxKVswXSk7XG4gICAgICB9LFxuXG4gICAgICBTT1JUOiBmdW5jdGlvbiBTT1JUKF9yZWY1KSB7XG4gICAgICAgIHZhciBjb21wYXJlID0gX3JlZjUuY29tcGFyZTtcbiAgICAgICAgc29ydEl0ZW1zKHN0YXRlLCBjb21wYXJlKTtcbiAgICAgICAgZGlzcGF0Y2goJ0RJRF9TT1JUX0lURU1TJywge1xuICAgICAgICAgIGl0ZW1zOiBxdWVyeSgnR0VUX0FDVElWRV9JVEVNUycpXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgQUREX0lURU1TOiBmdW5jdGlvbiBBRERfSVRFTVMoX3JlZjYpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gX3JlZjYuaXRlbXMsXG4gICAgICAgICAgaW5kZXggPSBfcmVmNi5pbmRleCxcbiAgICAgICAgICBpbnRlcmFjdGlvbk1ldGhvZCA9IF9yZWY2LmludGVyYWN0aW9uTWV0aG9kLFxuICAgICAgICAgIF9yZWY2JHN1Y2Nlc3MgPSBfcmVmNi5zdWNjZXNzLFxuICAgICAgICAgIHN1Y2Nlc3MgPSBfcmVmNiRzdWNjZXNzID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZjYkc3VjY2VzcyxcbiAgICAgICAgICBfcmVmNiRmYWlsdXJlID0gX3JlZjYuZmFpbHVyZSxcbiAgICAgICAgICBmYWlsdXJlID0gX3JlZjYkZmFpbHVyZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24oKSB7fSA6IF9yZWY2JGZhaWx1cmU7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IGluZGV4O1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgdHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBpbnNlcnRMb2NhdGlvbiA9IHF1ZXJ5KCdHRVRfSVRFTV9JTlNFUlRfTE9DQVRJT04nKTtcbiAgICAgICAgICB2YXIgdG90YWxJdGVtcyA9IHF1ZXJ5KCdHRVRfVE9UQUxfSVRFTVMnKTtcbiAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbnNlcnRMb2NhdGlvbiA9PT0gJ2JlZm9yZScgPyAwIDogdG90YWxJdGVtcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZ25vcmVkRmlsZXMgPSBxdWVyeSgnR0VUX0lHTk9SRURfRklMRVMnKTtcbiAgICAgICAgdmFyIGlzVmFsaWRGaWxlID0gZnVuY3Rpb24gaXNWYWxpZEZpbGUoc291cmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzRmlsZShzb3VyY2UpXG4gICAgICAgICAgICA/ICFpZ25vcmVkRmlsZXMuaW5jbHVkZXMoc291cmNlLm5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIDogIWlzRW1wdHkoc291cmNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHZhbGlkSXRlbXMgPSBpdGVtcy5maWx0ZXIoaXNWYWxpZEZpbGUpO1xuXG4gICAgICAgIHZhciBwcm9taXNlcyA9IHZhbGlkSXRlbXMubWFwKGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCdBRERfSVRFTScsIHtcbiAgICAgICAgICAgICAgaW50ZXJhY3Rpb25NZXRob2Q6IGludGVyYWN0aW9uTWV0aG9kLFxuICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZS5zb3VyY2UgfHwgc291cmNlLFxuICAgICAgICAgICAgICBzdWNjZXNzOiByZXNvbHZlLFxuICAgICAgICAgICAgICBmYWlsdXJlOiByZWplY3QsXG4gICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50SW5kZXgrKyxcbiAgICAgICAgICAgICAgb3B0aW9uczogc291cmNlLm9wdGlvbnMgfHwge31cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAudGhlbihzdWNjZXNzKVxuICAgICAgICAgIC5jYXRjaChmYWlsdXJlKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHNvdXJjZVxuICAgICAgICogQHBhcmFtIGluZGV4XG4gICAgICAgKiBAcGFyYW0gaW50ZXJhY3Rpb25NZXRob2RcbiAgICAgICAqL1xuICAgICAgQUREX0lURU06IGZ1bmN0aW9uIEFERF9JVEVNKF9yZWY3KSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBfcmVmNy5zb3VyY2UsXG4gICAgICAgICAgX3JlZjckaW5kZXggPSBfcmVmNy5pbmRleCxcbiAgICAgICAgICBpbmRleCA9IF9yZWY3JGluZGV4ID09PSB2b2lkIDAgPyAtMSA6IF9yZWY3JGluZGV4LFxuICAgICAgICAgIGludGVyYWN0aW9uTWV0aG9kID0gX3JlZjcuaW50ZXJhY3Rpb25NZXRob2QsXG4gICAgICAgICAgX3JlZjckc3VjY2VzcyA9IF9yZWY3LnN1Y2Nlc3MsXG4gICAgICAgICAgc3VjY2VzcyA9IF9yZWY3JHN1Y2Nlc3MgPT09IHZvaWQgMCA/IGZ1bmN0aW9uKCkge30gOiBfcmVmNyRzdWNjZXNzLFxuICAgICAgICAgIF9yZWY3JGZhaWx1cmUgPSBfcmVmNy5mYWlsdXJlLFxuICAgICAgICAgIGZhaWx1cmUgPSBfcmVmNyRmYWlsdXJlID09PSB2b2lkIDAgPyBmdW5jdGlvbigpIHt9IDogX3JlZjckZmFpbHVyZSxcbiAgICAgICAgICBfcmVmNyRvcHRpb25zID0gX3JlZjcub3B0aW9ucyxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjckb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmNyRvcHRpb25zO1xuXG4gICAgICAgIC8vIGlmIG5vIHNvdXJjZSBzdXBwbGllZFxuICAgICAgICBpZiAoaXNFbXB0eShzb3VyY2UpKSB7XG4gICAgICAgICAgZmFpbHVyZSh7XG4gICAgICAgICAgICBlcnJvcjogY3JlYXRlUmVzcG9uc2UoJ2Vycm9yJywgMCwgJ05vIHNvdXJjZScpLFxuXG4gICAgICAgICAgICBmaWxlOiBudWxsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaWx0ZXIgb3V0IGludmFsaWQgZmlsZSBpdGVtcywgdXNlZCB0byBmaWx0ZXIgZHJvcHBlZCBkaXJlY3RvcnkgY29udGVudHNcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzRmlsZShzb3VyY2UpICYmXG4gICAgICAgICAgc3RhdGUub3B0aW9ucy5pZ25vcmVkRmlsZXMuaW5jbHVkZXMoc291cmNlLm5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gZmFpbCBzaWxlbnRseVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRlc3QgaWYgdGhlcmUncyBzdGlsbCByb29tIGluIHRoZSBsaXN0IG9mIGZpbGVzXG4gICAgICAgIGlmICghaGFzUm9vbUZvckl0ZW0oc3RhdGUpKSB7XG4gICAgICAgICAgLy8gaWYgbXVsdGlwbGUgYWxsb3dlZCwgd2UgY2FuJ3QgcmVwbGFjZVxuICAgICAgICAgIC8vIG9yIGlmIG9ubHkgYSBzaW5nbGUgaXRlbSBpcyBhbGxvd2VkIGJ1dCB3ZSdyZSBub3QgYWxsb3dlZCB0byByZXBsYWNlIGl0IHdlIGV4aXRcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzdGF0ZS5vcHRpb25zLmFsbG93TXVsdGlwbGUgfHxcbiAgICAgICAgICAgICghc3RhdGUub3B0aW9ucy5hbGxvd011bHRpcGxlICYmICFzdGF0ZS5vcHRpb25zLmFsbG93UmVwbGFjZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNyZWF0ZVJlc3BvbnNlKCd3YXJuaW5nJywgMCwgJ01heCBmaWxlcycpO1xuXG4gICAgICAgICAgICBkaXNwYXRjaCgnRElEX1RIUk9XX01BWF9GSUxFUycsIHtcbiAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZhaWx1cmUoeyBlcnJvcjogZXJyb3IsIGZpbGU6IG51bGwgfSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBsZXQncyByZXBsYWNlIHRoZSBpdGVtXG4gICAgICAgICAgLy8gaWQgb2YgZmlyc3QgaXRlbSB3ZSdyZSBhYm91dCB0byByZW1vdmVcbiAgICAgICAgICB2YXIgX2l0ZW0gPSBnZXRBY3RpdmVJdGVtcyhzdGF0ZS5pdGVtcylbMF07XG5cbiAgICAgICAgICAvLyBpZiBoYXMgYmVlbiBwcm9jZXNzZWQgcmVtb3ZlIGl0IGZyb20gdGhlIHNlcnZlciBhcyB3ZWxsXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgX2l0ZW0uc3RhdHVzID09PSBJdGVtU3RhdHVzLlBST0NFU1NJTkdfQ09NUExFVEUgfHxcbiAgICAgICAgICAgIF9pdGVtLnN0YXR1cyA9PT0gSXRlbVN0YXR1cy5QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUlxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIGZvcmNlUmV2ZXJ0ID0gcXVlcnkoJ0dFVF9GT1JDRV9SRVZFUlQnKTtcbiAgICAgICAgICAgIF9pdGVtXG4gICAgICAgICAgICAgIC5yZXZlcnQoXG4gICAgICAgICAgICAgICAgY3JlYXRlUmV2ZXJ0RnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICBzdGF0ZS5vcHRpb25zLnNlcnZlci51cmwsXG4gICAgICAgICAgICAgICAgICBzdGF0ZS5vcHRpb25zLnNlcnZlci5yZXZlcnRcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGZvcmNlUmV2ZXJ0XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JjZVJldmVydCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGFkZCBub3dcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCgnQUREX0lURU0nLCB7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uTWV0aG9kOiBpbnRlcmFjdGlvbk1ldGhvZCxcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICAgICAgICAgICAgICBmYWlsdXJlOiBmYWlsdXJlLFxuICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oKSB7fSk7IC8vIG5vIG5lZWQgdG8gaGFuZGxlIHRoaXMgY2F0Y2ggc3RhdGUgZm9yIG5vd1xuXG4gICAgICAgICAgICBpZiAoZm9yY2VSZXZlcnQpIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZW1vdmUgZmlyc3QgaXRlbSBhcyBpdCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoaXMgaXRlbVxuICAgICAgICAgIGRpc3BhdGNoKCdSRU1PVkVfSVRFTScsIHsgcXVlcnk6IF9pdGVtLmlkIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hlcmUgZGlkIHRoZSBmaWxlIG9yaWdpbmF0ZVxuICAgICAgICB2YXIgb3JpZ2luID1cbiAgICAgICAgICBvcHRpb25zLnR5cGUgPT09ICdsb2NhbCdcbiAgICAgICAgICAgID8gRmlsZU9yaWdpbi5MT0NBTFxuICAgICAgICAgICAgOiBvcHRpb25zLnR5cGUgPT09ICdsaW1ibydcbiAgICAgICAgICAgID8gRmlsZU9yaWdpbi5MSU1CT1xuICAgICAgICAgICAgOiBGaWxlT3JpZ2luLklOUFVUO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBibGFuayBpdGVtXG4gICAgICAgIHZhciBpdGVtID0gY3JlYXRlSXRlbShcbiAgICAgICAgICAvLyB3aGVyZSBkaWQgdGhpcyBmaWxlIGNvbWUgZnJvbVxuICAgICAgICAgIG9yaWdpbixcblxuICAgICAgICAgIC8vIGFuIGlucHV0IGZpbGUgbmV2ZXIgaGFzIGEgc2VydmVyIGZpbGUgcmVmZXJlbmNlXG4gICAgICAgICAgb3JpZ2luID09PSBGaWxlT3JpZ2luLklOUFVUID8gbnVsbCA6IHNvdXJjZSxcblxuICAgICAgICAgIC8vIGZpbGUgbW9jayBkYXRhLCBpZiBkZWZpbmVkXG4gICAgICAgICAgb3B0aW9ucy5maWxlXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gc2V0IGluaXRpYWwgbWV0YSBkYXRhXG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMubWV0YWRhdGEgfHwge30pLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaXRlbS5zZXRNZXRhZGF0YShrZXksIG9wdGlvbnMubWV0YWRhdGFba2V5XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZWQgdGhlIGl0ZW0sIGxldCBwbHVnaW5zIGFkZCBtZXRob2RzXG4gICAgICAgIGFwcGx5RmlsdGVycygnRElEX0NSRUFURV9JVEVNJywgaXRlbSwge1xuICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2hlcmUgdG8gaW5zZXJ0IG5ldyBpdGVtc1xuICAgICAgICB2YXIgaXRlbUluc2VydExvY2F0aW9uID0gcXVlcnkoJ0dFVF9JVEVNX0lOU0VSVF9MT0NBVElPTicpO1xuXG4gICAgICAgIC8vIGFkanVzdCBpbmRleCBpZiBpcyBub3QgYWxsb3dlZCB0byBwaWNrIGxvY2F0aW9uXG4gICAgICAgIGlmICghc3RhdGUub3B0aW9ucy5pdGVtSW5zZXJ0TG9jYXRpb25GcmVlZG9tKSB7XG4gICAgICAgICAgaW5kZXggPSBpdGVtSW5zZXJ0TG9jYXRpb24gPT09ICdiZWZvcmUnID8gLTEgOiBzdGF0ZS5pdGVtcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgaXRlbSB0byBsaXN0XG4gICAgICAgIGluc2VydEl0ZW0oc3RhdGUuaXRlbXMsIGl0ZW0sIGluZGV4KTtcblxuICAgICAgICAvLyBzb3J0IGl0ZW1zIGluIGxpc3RcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaXRlbUluc2VydExvY2F0aW9uKSAmJiBzb3VyY2UpIHtcbiAgICAgICAgICBzb3J0SXRlbXMoc3RhdGUsIGl0ZW1JbnNlcnRMb2NhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXQgYSBxdWljayByZWZlcmVuY2UgdG8gdGhlIGl0ZW0gaWRcbiAgICAgICAgdmFyIGlkID0gaXRlbS5pZDtcblxuICAgICAgICAvLyBvYnNlcnZlIGl0ZW0gZXZlbnRzXG4gICAgICAgIGl0ZW0ub24oJ2luaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX0lOSVRfSVRFTScsIHsgaWQ6IGlkIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdsb2FkLWluaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1NUQVJUX0lURU1fTE9BRCcsIHsgaWQ6IGlkIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdsb2FkLW1ldGEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1VQREFURV9JVEVNX01FVEEnLCB7IGlkOiBpZCB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5vbignbG9hZC1wcm9ncmVzcycsIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTJywge1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0ub24oJ2xvYWQtcmVxdWVzdC1lcnJvcicsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgdmFyIG1haW5TdGF0dXMgPSBkeW5hbWljTGFiZWwoc3RhdGUub3B0aW9ucy5sYWJlbEZpbGVMb2FkRXJyb3IpKFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gaXMgY2xpZW50IGVycm9yLCBubyB3YXkgdG8gcmVjb3ZlclxuICAgICAgICAgIGlmIChlcnJvci5jb2RlID49IDQwMCAmJiBlcnJvci5jb2RlIDwgNTAwKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCgnRElEX1RIUk9XX0lURU1fSU5WQUxJRCcsIHtcbiAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgICAgIG1haW46IG1haW5TdGF0dXMsXG4gICAgICAgICAgICAgICAgc3ViOiBlcnJvci5jb2RlICsgJyAoJyArIGVycm9yLmJvZHkgKyAnKSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHJlamVjdCB0aGUgZmlsZSBzbyBjYW4gYmUgZGVhbHQgd2l0aCB0aHJvdWdoIEFQSVxuICAgICAgICAgICAgZmFpbHVyZSh7IGVycm9yOiBlcnJvciwgZmlsZTogY3JlYXRlSXRlbUFQSShpdGVtKSB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpcyBwb3NzaWJsZSBzZXJ2ZXIgZXJyb3IsIHNvIG1pZ2h0IGJlIHBvc3NpYmxlIHRvIHJldHJ5XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9USFJPV19JVEVNX0xPQURfRVJST1InLCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgICAgbWFpbjogbWFpblN0YXR1cyxcbiAgICAgICAgICAgICAgc3ViOiBzdGF0ZS5vcHRpb25zLmxhYmVsVGFwVG9SZXRyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdsb2FkLWZpbGUtZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGRpc3BhdGNoKCdESURfVEhST1dfSVRFTV9JTlZBTElEJywge1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1czogZXJyb3Iuc3RhdHVzXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmYWlsdXJlKHsgZXJyb3I6IGVycm9yLnN0YXR1cywgZmlsZTogY3JlYXRlSXRlbUFQSShpdGVtKSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5vbignbG9hZC1hYm9ydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRpc3BhdGNoKCdSRU1PVkVfSVRFTScsIHsgcXVlcnk6IGlkIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdsb2FkLXNraXAnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnQ09NUExFVEVfTE9BRF9JVEVNJywge1xuICAgICAgICAgICAgcXVlcnk6IGlkLFxuICAgICAgICAgICAgaXRlbTogaXRlbSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBoYW5kbGVBZGQgPSBmdW5jdGlvbiBoYW5kbGVBZGQoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgICAvLyBubyBzaG91bGQgbm90IGFkZCB0aGlzIGZpbGVcbiAgICAgICAgICAgIGlmICghc2hvdWxkQWRkKSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKCdSRU1PVkVfSVRFTScsIHtcbiAgICAgICAgICAgICAgICBxdWVyeTogaWRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBub3cgaW50ZXJlc3RlZCBpbiBtZXRhZGF0YSB1cGRhdGVzXG4gICAgICAgICAgICBpdGVtLm9uKCdtZXRhZGF0YS11cGRhdGUnLCBmdW5jdGlvbihjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goJ0RJRF9VUERBVEVfSVRFTV9NRVRBREFUQScsIHsgaWQ6IGlkLCBjaGFuZ2U6IGNoYW5nZSB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBsZXQgcGx1Z2lucyBkZWNpZGUgaWYgdGhlIG91dHB1dCBkYXRhIHNob3VsZCBiZSBwcmVwYXJlZCBhdCB0aGlzIHBvaW50XG4gICAgICAgICAgICAvLyBtZWFucyB3ZSdsbCBkbyB0aGlzIGFuZCB3YWl0IGZvciBpZGxlIHN0YXRlXG4gICAgICAgICAgICBhcHBseUZpbHRlckNoYWluKCdTSE9VTERfUFJFUEFSRV9PVVRQVVQnLCBmYWxzZSwge1xuICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oc2hvdWxkUHJlcGFyZU91dHB1dCkge1xuICAgICAgICAgICAgICB2YXIgbG9hZENvbXBsZXRlID0gZnVuY3Rpb24gbG9hZENvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdDT01QTEVURV9MT0FEX0lURU0nLCB7XG4gICAgICAgICAgICAgICAgICBxdWVyeTogaWQsXG4gICAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzczogc3VjY2Vzc1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbGlzdFVwZGF0ZWQoZGlzcGF0Y2gsIHN0YXRlKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvLyBleGl0XG4gICAgICAgICAgICAgIGlmIChzaG91bGRQcmVwYXJlT3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgaWRsZSBzdGF0ZSBhbmQgdGhlbiBydW4gUFJFUEFSRV9PVVRQVVRcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICdSRVFVRVNUX1BSRVBBUkVfT1VUUFVUJyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGlkLFxuICAgICAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgnRElEX1BSRVBBUkVfT1VUUFVUJywgeyBpZDogaWQsIGZpbGU6IGZpbGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgbG9hZENvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxvYWRDb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIGl0ZW0gbG9hZGVkLCBhbGxvdyBwbHVnaW5zIHRvXG4gICAgICAgICAgLy8gLSByZWFkIGRhdGEgKHF1aWNrbHkpXG4gICAgICAgICAgLy8gLSBhZGQgbWV0YWRhdGFcbiAgICAgICAgICBhcHBseUZpbHRlckNoYWluKCdESURfTE9BRF9JVEVNJywgaXRlbSwge1xuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBvcHRpb25hbFByb21pc2UoXG4gICAgICAgICAgICAgICAgcXVlcnkoJ0dFVF9CRUZPUkVfQUREX0ZJTEUnKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVJdGVtQVBJKGl0ZW0pXG4gICAgICAgICAgICAgICkudGhlbihoYW5kbGVBZGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaGFuZGxlQWRkKGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdwcm9jZXNzLXN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkcnLCB7IGlkOiBpZCB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5vbigncHJvY2Vzcy1wcm9ncmVzcycsIGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTJywge1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0ub24oJ3Byb2Nlc3MtZXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGRpc3BhdGNoKCdESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SJywge1xuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICAgIG1haW46IGR5bmFtaWNMYWJlbChzdGF0ZS5vcHRpb25zLmxhYmVsRmlsZVByb2Nlc3NpbmdFcnJvcikoZXJyb3IpLFxuICAgICAgICAgICAgICBzdWI6IHN0YXRlLm9wdGlvbnMubGFiZWxUYXBUb1JldHJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0ub24oJ3Byb2Nlc3MtcmV2ZXJ0LWVycm9yJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19SRVZFUlRfRVJST1InLCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgICAgbWFpbjogZHluYW1pY0xhYmVsKHN0YXRlLm9wdGlvbnMubGFiZWxGaWxlUHJvY2Vzc2luZ1JldmVydEVycm9yKShcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzdWI6IHN0YXRlLm9wdGlvbnMubGFiZWxUYXBUb1JldHJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW0ub24oJ3Byb2Nlc3MtY29tcGxldGUnLCBmdW5jdGlvbihzZXJ2ZXJGaWxlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkcnLCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHNlcnZlckZpbGVSZWZlcmVuY2U6IHNlcnZlckZpbGVSZWZlcmVuY2VcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGRpc3BhdGNoKCdESURfREVGSU5FX1ZBTFVFJywgeyBpZDogaWQsIHZhbHVlOiBzZXJ2ZXJGaWxlUmVmZXJlbmNlIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdGVtLm9uKCdwcm9jZXNzLWFib3J0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkcnLCB7IGlkOiBpZCB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXRlbS5vbigncHJvY2Vzcy1yZXZlcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1JFVkVSVF9JVEVNX1BST0NFU1NJTkcnLCB7IGlkOiBpZCB9KTtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX0RFRklORV9WQUxVRScsIHsgaWQ6IGlkLCB2YWx1ZTogbnVsbCB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gbGV0IHZpZXcga25vdyB0aGUgaXRlbSBoYXMgYmVlbiBpbnNlcnRlZFxuICAgICAgICBkaXNwYXRjaCgnRElEX0FERF9JVEVNJywge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgaW50ZXJhY3Rpb25NZXRob2Q6IGludGVyYWN0aW9uTWV0aG9kXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxpc3RVcGRhdGVkKGRpc3BhdGNoLCBzdGF0ZSk7XG5cbiAgICAgICAgLy8gc3RhcnQgbG9hZGluZyB0aGUgc291cmNlXG4gICAgICAgIHZhciBfcmVmOCA9IHN0YXRlLm9wdGlvbnMuc2VydmVyIHx8IHt9LFxuICAgICAgICAgIHVybCA9IF9yZWY4LnVybCxcbiAgICAgICAgICBsb2FkID0gX3JlZjgubG9hZCxcbiAgICAgICAgICByZXN0b3JlID0gX3JlZjgucmVzdG9yZSxcbiAgICAgICAgICBmZXRjaCA9IF9yZWY4LmZldGNoO1xuXG4gICAgICAgIGl0ZW0ubG9hZChcbiAgICAgICAgICBzb3VyY2UsXG5cbiAgICAgICAgICAvLyB0aGlzIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGxvYWRzIHRoZSBmaWxlIGJhc2VkIG9uIHRoZSB0eXBlIG9mIGZpbGUgKHN0cmluZywgYmFzZTY0LCBibG9iLCBmaWxlKSBhbmQgbG9jYXRpb24gb2YgZmlsZSAobG9jYWwsIHJlbW90ZSwgbGltYm8pXG4gICAgICAgICAgY3JlYXRlRmlsZUxvYWRlcihcbiAgICAgICAgICAgIG9yaWdpbiA9PT0gRmlsZU9yaWdpbi5JTlBVVFxuICAgICAgICAgICAgICA/IC8vIGlucHV0LCBpZiBpcyByZW1vdGUsIHNlZSBpZiBzaG91bGQgdXNlIGN1c3RvbSBmZXRjaCwgZWxzZSB1c2UgZGVmYXVsdCBmZXRjaEJsb2JcbiAgICAgICAgICAgICAgICBpc1N0cmluZyhzb3VyY2UpICYmIGlzRXh0ZXJuYWxVUkwoc291cmNlKVxuICAgICAgICAgICAgICAgID8gZmV0Y2hcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRmV0Y2hGdW5jdGlvbih1cmwsIGZldGNoKVxuICAgICAgICAgICAgICAgICAgOiBmZXRjaEJsb2IgLy8gcmVtb3RlIHVybFxuICAgICAgICAgICAgICAgIDogZmV0Y2hCbG9iIC8vIHRyeSB0byBmZXRjaCB1cmxcbiAgICAgICAgICAgICAgOiAvLyBsaW1ibyBvciBsb2NhbFxuICAgICAgICAgICAgICBvcmlnaW4gPT09IEZpbGVPcmlnaW4uTElNQk9cbiAgICAgICAgICAgICAgPyBjcmVhdGVGZXRjaEZ1bmN0aW9uKHVybCwgcmVzdG9yZSkgLy8gbGltYm9cbiAgICAgICAgICAgICAgOiBjcmVhdGVGZXRjaEZ1bmN0aW9uKHVybCwgbG9hZCkgLy8gbG9jYWxcbiAgICAgICAgICApLFxuXG4gICAgICAgICAgLy8gY2FsbGVkIHdoZW4gdGhlIGZpbGUgaXMgbG9hZGVkIHNvIGl0IGNhbiBiZSBwaXBlZCB0aHJvdWdoIHRoZSBmaWx0ZXJzXG4gICAgICAgICAgZnVuY3Rpb24oZmlsZSwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIGxldCdzIHByb2Nlc3MgdGhlIGZpbGVcbiAgICAgICAgICAgIGFwcGx5RmlsdGVyQ2hhaW4oJ0xPQURfRklMRScsIGZpbGUsIHsgcXVlcnk6IHF1ZXJ5IH0pXG4gICAgICAgICAgICAgIC50aGVuKHN1Y2Nlc3MpXG4gICAgICAgICAgICAgIC5jYXRjaChlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSxcblxuICAgICAgUkVRVUVTVF9QUkVQQVJFX09VVFBVVDogZnVuY3Rpb24gUkVRVUVTVF9QUkVQQVJFX09VVFBVVChfcmVmOSkge1xuICAgICAgICB2YXIgaXRlbSA9IF9yZWY5Lml0ZW0sXG4gICAgICAgICAgc3VjY2VzcyA9IF9yZWY5LnN1Y2Nlc3MsXG4gICAgICAgICAgX3JlZjkkZmFpbHVyZSA9IF9yZWY5LmZhaWx1cmUsXG4gICAgICAgICAgZmFpbHVyZSA9IF9yZWY5JGZhaWx1cmUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uKCkge30gOiBfcmVmOSRmYWlsdXJlO1xuXG4gICAgICAgIC8vIGVycm9yIHJlc3BvbnNlIGlmIGl0ZW0gYXJjaGl2ZWRcbiAgICAgICAgdmFyIGVyciA9IHtcbiAgICAgICAgICBlcnJvcjogY3JlYXRlUmVzcG9uc2UoJ2Vycm9yJywgMCwgJ0l0ZW0gbm90IGZvdW5kJyksXG5cbiAgICAgICAgICBmaWxlOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZG9uJ3QgaGFuZGxlIGFyY2hpdmVkIGl0ZW1zLCBhbiBpdGVtIGNvdWxkIGhhdmUgYmVlbiBhcmNoaXZlZCAobG9hZCBhYm9ydGVkKSB3aGlsZSB3YWl0aW5nIHRvIGJlIHByZXBhcmVkXG4gICAgICAgIGlmIChpdGVtLmFyY2hpdmVkKSByZXR1cm4gZmFpbHVyZShlcnIpO1xuXG4gICAgICAgIC8vIGFsbG93IHBsdWdpbnMgdG8gYWx0ZXIgdGhlIGZpbGUgZGF0YVxuICAgICAgICBhcHBseUZpbHRlckNoYWluKCdQUkVQQVJFX09VVFBVVCcsIGl0ZW0uZmlsZSwge1xuICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICBpdGVtOiBpdGVtXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgYXBwbHlGaWx0ZXJDaGFpbignQ09NUExFVEVfUFJFUEFSRV9PVVRQVVQnLCByZXN1bHQsIHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgLy8gZG9uJ3QgaGFuZGxlIGFyY2hpdmVkIGl0ZW1zLCBhbiBpdGVtIGNvdWxkIGhhdmUgYmVlbiBhcmNoaXZlZCAobG9hZCBhYm9ydGVkKSB3aGlsZSBiZWluZyBwcmVwYXJlZFxuICAgICAgICAgICAgaWYgKGl0ZW0uYXJjaGl2ZWQpIHJldHVybiBmYWlsdXJlKGVycik7XG5cbiAgICAgICAgICAgIC8vIHdlIGRvbmUhXG4gICAgICAgICAgICBzdWNjZXNzKHJlc3VsdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgQ09NUExFVEVfTE9BRF9JVEVNOiBmdW5jdGlvbiBDT01QTEVURV9MT0FEX0lURU0oX3JlZjEwKSB7XG4gICAgICAgIHZhciBpdGVtID0gX3JlZjEwLml0ZW0sXG4gICAgICAgICAgZGF0YSA9IF9yZWYxMC5kYXRhO1xuICAgICAgICB2YXIgc3VjY2VzcyA9IGRhdGEuc3VjY2VzcyxcbiAgICAgICAgICBzb3VyY2UgPSBkYXRhLnNvdXJjZTtcblxuICAgICAgICAvLyBzb3J0IGl0ZW1zIGluIGxpc3RcbiAgICAgICAgdmFyIGl0ZW1JbnNlcnRMb2NhdGlvbiA9IHF1ZXJ5KCdHRVRfSVRFTV9JTlNFUlRfTE9DQVRJT04nKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaXRlbUluc2VydExvY2F0aW9uKSAmJiBzb3VyY2UpIHtcbiAgICAgICAgICBzb3J0SXRlbXMoc3RhdGUsIGl0ZW1JbnNlcnRMb2NhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZXQgaW50ZXJmYWNlIGtub3cgdGhlIGl0ZW0gaGFzIGxvYWRlZFxuICAgICAgICBkaXNwYXRjaCgnRElEX0xPQURfSVRFTScsIHtcbiAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICBzZXJ2ZXJGaWxlUmVmZXJlbmNlOiBpdGVtLm9yaWdpbiA9PT0gRmlsZU9yaWdpbi5JTlBVVCA/IG51bGwgOiBzb3VyY2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaXRlbSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgbG9hZGVkIGFuZCBhZGRlZCB0byB0aGVcbiAgICAgICAgLy8gbGlzdCBvZiBpdGVtcyBzbyBjYW4gbm93IGJlIHNhZmVseSByZXR1cm5lZCBmb3IgdXNlXG4gICAgICAgIHN1Y2Nlc3MoY3JlYXRlSXRlbUFQSShpdGVtKSk7XG5cbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGxvY2FsIHNlcnZlciBmaWxlIHdlIG5lZWQgdG8gc2hvdyBhIGRpZmZlcmVudCBzdGF0ZVxuICAgICAgICBpZiAoaXRlbS5vcmlnaW4gPT09IEZpbGVPcmlnaW4uTE9DQUwpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX0xPQURfTE9DQUxfSVRFTScsIHsgaWQ6IGl0ZW0uaWQgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgaXMgYSB0ZW1wIHNlcnZlciBmaWxlIHdlIHByZXZlbnQgYXN5bmMgdXBsb2FkIGNhbGwgaGVyZSAoYXMgdGhlIGZpbGUgaXMgYWxyZWFkeSBvbiB0aGUgc2VydmVyKVxuICAgICAgICBpZiAoaXRlbS5vcmlnaW4gPT09IEZpbGVPcmlnaW4uTElNQk8pIHtcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORycsIHtcbiAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICBzZXJ2ZXJGaWxlUmVmZXJlbmNlOiBzb3VyY2VcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGRpc3BhdGNoKCdESURfREVGSU5FX1ZBTFVFJywge1xuICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICB2YWx1ZTogc291cmNlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZCB3ZSBhcmUgYWxsb3dlZCB0byB1cGxvYWQgdGhlIGZpbGUgaW1taWRpYXRlbHksIGxldHMgZG8gaXRcbiAgICAgICAgaWYgKHF1ZXJ5KCdJU19BU1lOQycpICYmIHN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZCkge1xuICAgICAgICAgIGRpc3BhdGNoKCdSRVFVRVNUX0lURU1fUFJPQ0VTU0lORycsIHsgcXVlcnk6IGl0ZW0uaWQgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIFJFVFJZX0lURU1fTE9BRDogZ2V0SXRlbUJ5UXVlcnlGcm9tU3RhdGUoc3RhdGUsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgLy8gdHJ5IGxvYWRpbmcgdGhlIHNvdXJjZSBvbmUgbW9yZSB0aW1lXG4gICAgICAgIGl0ZW0ucmV0cnlMb2FkKCk7XG4gICAgICB9KSxcblxuICAgICAgUkVRVUVTVF9JVEVNX1BSRVBBUkU6IGdldEl0ZW1CeVF1ZXJ5RnJvbVN0YXRlKHN0YXRlLCBmdW5jdGlvbihcbiAgICAgICAgaXRlbSxcbiAgICAgICAgX3N1Y2Nlc3MsXG4gICAgICAgIGZhaWx1cmVcbiAgICAgICkge1xuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAnUkVRVUVTVF9QUkVQQVJFX09VVFBVVCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcXVlcnk6IGl0ZW0uaWQsXG4gICAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhmaWxlKSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKCdESURfUFJFUEFSRV9PVVRQVVQnLCB7IGlkOiBpdGVtLmlkLCBmaWxlOiBmaWxlIH0pO1xuICAgICAgICAgICAgICBfc3VjY2Vzcyh7XG4gICAgICAgICAgICAgICAgZmlsZTogaXRlbSxcbiAgICAgICAgICAgICAgICBvdXRwdXQ6IGZpbGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFpbHVyZTogZmFpbHVyZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSksXG5cbiAgICAgIFJFUVVFU1RfSVRFTV9QUk9DRVNTSU5HOiBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZShzdGF0ZSwgZnVuY3Rpb24oXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHN1Y2Nlc3MsXG4gICAgICAgIGZhaWx1cmVcbiAgICAgICkge1xuICAgICAgICAvLyBjYW5ub3QgYmUgcXVldWVkIChvciBpcyBhbHJlYWR5IHF1ZXVlZClcbiAgICAgICAgdmFyIGl0ZW1DYW5CZVF1ZXVlZEZvclByb2Nlc3NpbmcgPVxuICAgICAgICAgIC8vIHdhaXRpbmcgZm9yIHNvbWV0aGluZ1xuICAgICAgICAgIGl0ZW0uc3RhdHVzID09PSBJdGVtU3RhdHVzLklETEUgfHxcbiAgICAgICAgICAvLyBwcm9jZXNzaW5nIHdlbnQgd3JvbmcgZWFybGllclxuICAgICAgICAgIGl0ZW0uc3RhdHVzID09PSBJdGVtU3RhdHVzLlBST0NFU1NJTkdfRVJST1I7XG5cbiAgICAgICAgLy8gbm90IHJlYWR5IHRvIGJlIHByb2Nlc3NlZFxuICAgICAgICBpZiAoIWl0ZW1DYW5CZVF1ZXVlZEZvclByb2Nlc3NpbmcpIHtcbiAgICAgICAgICB2YXIgcHJvY2Vzc05vdyA9IGZ1bmN0aW9uIHByb2Nlc3NOb3coKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goJ1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HJywge1xuICAgICAgICAgICAgICBxdWVyeTogaXRlbSxcbiAgICAgICAgICAgICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICAgICAgICAgICAgZmFpbHVyZTogZmFpbHVyZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBwcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5oaWRkZW4gPyBwcm9jZXNzTm93KCkgOiBzZXRUaW1lb3V0KHByb2Nlc3NOb3csIDMyKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gaWYgYWxyZWFkeSBkb25lIHByb2Nlc3Npbmcgb3IgdHJpZWQgdG8gcmV2ZXJ0IGJ1dCBkaWRuJ3Qgd29yaywgdHJ5IGFnYWluXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgPT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19DT01QTEVURSB8fFxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgPT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19SRVZFUlRfRVJST1JcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgLnJldmVydChcbiAgICAgICAgICAgICAgICBjcmVhdGVSZXZlcnRGdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc2VydmVyLnVybCxcbiAgICAgICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc2VydmVyLnJldmVydFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcXVlcnkoJ0dFVF9GT1JDRV9SRVZFUlQnKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC50aGVuKHByb2Nlc3MpXG4gICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbigpIHt9KTsgLy8gZG9uJ3QgY29udGludWUgd2l0aCBwcm9jZXNzaW5nIGlmIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnN0YXR1cyA9PT0gSXRlbVN0YXR1cy5QUk9DRVNTSU5HKSB7XG4gICAgICAgICAgICBpdGVtLmFib3J0UHJvY2Vzc2luZygpLnRoZW4ocHJvY2Vzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWxyZWFkeSBxdWV1ZWQgZm9yIHByb2Nlc3NpbmdcbiAgICAgICAgaWYgKGl0ZW0uc3RhdHVzID09PSBJdGVtU3RhdHVzLlBST0NFU1NJTkdfUVVFVUVEKSByZXR1cm47XG5cbiAgICAgICAgaXRlbS5yZXF1ZXN0UHJvY2Vzc2luZygpO1xuXG4gICAgICAgIGRpc3BhdGNoKCdESURfUkVRVUVTVF9JVEVNX1BST0NFU1NJTkcnLCB7IGlkOiBpdGVtLmlkIH0pO1xuXG4gICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICdQUk9DRVNTX0lURU0nLFxuICAgICAgICAgIHsgcXVlcnk6IGl0ZW0sIHN1Y2Nlc3M6IHN1Y2Nlc3MsIGZhaWx1cmU6IGZhaWx1cmUgfSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9KSxcblxuICAgICAgUFJPQ0VTU19JVEVNOiBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZShzdGF0ZSwgZnVuY3Rpb24oXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIHN1Y2Nlc3MsXG4gICAgICAgIGZhaWx1cmVcbiAgICAgICkge1xuICAgICAgICB2YXIgbWF4UGFyYWxsZWxVcGxvYWRzID0gcXVlcnkoJ0dFVF9NQVhfUEFSQUxMRUxfVVBMT0FEUycpO1xuICAgICAgICB2YXIgdG90YWxDdXJyZW50VXBsb2FkcyA9IHF1ZXJ5KFxuICAgICAgICAgICdHRVRfSVRFTVNfQllfU1RBVFVTJyxcbiAgICAgICAgICBJdGVtU3RhdHVzLlBST0NFU1NJTkdcbiAgICAgICAgKS5sZW5ndGg7XG5cbiAgICAgICAgLy8gcXVldWUgYW5kIHdhaXQgdGlsbCBxdWV1ZSBpcyBmcmVlZCB1cFxuICAgICAgICBpZiAodG90YWxDdXJyZW50VXBsb2FkcyA9PT0gbWF4UGFyYWxsZWxVcGxvYWRzKSB7XG4gICAgICAgICAgLy8gcXVldWUgZm9yIGxhdGVyIHByb2Nlc3NpbmdcbiAgICAgICAgICBzdGF0ZS5wcm9jZXNzaW5nUXVldWUucHVzaCh7XG4gICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICAgICAgICBmYWlsdXJlOiBmYWlsdXJlXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBzdG9wIGl0IVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdhcyBub3QgcXVldWVkIG9yIGlzIGFscmVhZHkgcHJvY2Vzc2luZyBleGl0IGhlcmVcbiAgICAgICAgaWYgKGl0ZW0uc3RhdHVzID09PSBJdGVtU3RhdHVzLlBST0NFU1NJTkcpIHJldHVybjtcblxuICAgICAgICB2YXIgcHJvY2Vzc05leHQgPSBmdW5jdGlvbiBwcm9jZXNzTmV4dCgpIHtcbiAgICAgICAgICAvLyBwcm9jZXNzIHF1ZXVldWQgaXRlbXNcbiAgICAgICAgICB2YXIgcXVldWVFbnRyeSA9IHN0YXRlLnByb2Nlc3NpbmdRdWV1ZS5zaGlmdCgpO1xuXG4gICAgICAgICAgLy8gbm8gaXRlbXMgbGVmdFxuICAgICAgICAgIGlmICghcXVldWVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gZ2V0IGl0ZW0gcmVmZXJlbmNlXG4gICAgICAgICAgdmFyIGlkID0gcXVldWVFbnRyeS5pZCxcbiAgICAgICAgICAgIHN1Y2Nlc3MgPSBxdWV1ZUVudHJ5LnN1Y2Nlc3MsXG4gICAgICAgICAgICBmYWlsdXJlID0gcXVldWVFbnRyeS5mYWlsdXJlO1xuICAgICAgICAgIHZhciBpdGVtUmVmZXJlbmNlID0gZ2V0SXRlbUJ5UXVlcnkoc3RhdGUuaXRlbXMsIGlkKTtcblxuICAgICAgICAgIC8vIGlmIGl0ZW0gd2FzIGFyY2hpdmVkIHdoaWxlIGluIHF1ZXVlLCBqdW1wIHRvIG5leHRcbiAgICAgICAgICBpZiAoIWl0ZW1SZWZlcmVuY2UgfHwgaXRlbVJlZmVyZW5jZS5hcmNoaXZlZCkge1xuICAgICAgICAgICAgcHJvY2Vzc05leHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBwcm9jZXNzIHF1ZXVlZCBpdGVtXG4gICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAnUFJPQ0VTU19JVEVNJyxcbiAgICAgICAgICAgIHsgcXVlcnk6IGlkLCBzdWNjZXNzOiBzdWNjZXNzLCBmYWlsdXJlOiBmYWlsdXJlIH0sXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB3ZSBkb25lIGZ1bmN0aW9uXG4gICAgICAgIGl0ZW0ub25PbmNlKCdwcm9jZXNzLWNvbXBsZXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3VjY2VzcyhjcmVhdGVJdGVtQVBJKGl0ZW0pKTtcbiAgICAgICAgICBwcm9jZXNzTmV4dCgpO1xuXG4gICAgICAgICAgLy8gQWxsIGl0ZW1zIHByb2Nlc3NlZD8gTm8gZXJyb3JzP1xuICAgICAgICAgIHZhciBhbGxJdGVtc1Byb2Nlc3NlZCA9XG4gICAgICAgICAgICBxdWVyeSgnR0VUX0lURU1TX0JZX1NUQVRVUycsIEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19DT01QTEVURSlcbiAgICAgICAgICAgICAgLmxlbmd0aCA9PT0gc3RhdGUuaXRlbXMubGVuZ3RoO1xuICAgICAgICAgIGlmIChhbGxJdGVtc1Byb2Nlc3NlZCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goJ0RJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkdfQUxMJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB3ZSBlcnJvciBmdW5jdGlvblxuICAgICAgICBpdGVtLm9uT25jZSgncHJvY2Vzcy1lcnJvcicsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZSh7IGVycm9yOiBlcnJvciwgZmlsZTogY3JlYXRlSXRlbUFQSShpdGVtKSB9KTtcbiAgICAgICAgICBwcm9jZXNzTmV4dCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBzdGFydCBmaWxlIHByb2Nlc3NpbmdcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBzdGF0ZS5vcHRpb25zO1xuICAgICAgICBpdGVtLnByb2Nlc3MoXG4gICAgICAgICAgY3JlYXRlRmlsZVByb2Nlc3NvcihcbiAgICAgICAgICAgIGNyZWF0ZVByb2Nlc3NvckZ1bmN0aW9uKFxuICAgICAgICAgICAgICBvcHRpb25zLnNlcnZlci51cmwsXG4gICAgICAgICAgICAgIG9wdGlvbnMuc2VydmVyLnByb2Nlc3MsXG4gICAgICAgICAgICAgIG9wdGlvbnMubmFtZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNodW5rVHJhbnNmZXJJZDogaXRlbS50cmFuc2ZlcklkLFxuICAgICAgICAgICAgICAgIGNodW5rU2VydmVyOiBvcHRpb25zLnNlcnZlci5wYXRjaCxcbiAgICAgICAgICAgICAgICBjaHVua1VwbG9hZHM6IG9wdGlvbnMuY2h1bmtVcGxvYWRzLFxuICAgICAgICAgICAgICAgIGNodW5rRm9yY2U6IG9wdGlvbnMuY2h1bmtGb3JjZSxcbiAgICAgICAgICAgICAgICBjaHVua1NpemU6IG9wdGlvbnMuY2h1bmtTaXplLFxuICAgICAgICAgICAgICAgIGNodW5rUmV0cnlEZWxheXM6IG9wdGlvbnMuY2h1bmtSZXRyeURlbGF5c1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcblxuICAgICAgICAgIC8vIGNhbGxlZCB3aGVuIHRoZSBmaWxlIGlzIGFib3V0IHRvIGJlIHByb2Nlc3NlZCBzbyBpdCBjYW4gYmUgcGlwZWQgdGhyb3VnaCB0aGUgdHJhbnNmb3JtIGZpbHRlcnNcbiAgICAgICAgICBmdW5jdGlvbihmaWxlLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgLy8gYWxsb3cgcGx1Z2lucyB0byBhbHRlciB0aGUgZmlsZSBkYXRhXG4gICAgICAgICAgICBhcHBseUZpbHRlckNoYWluKCdQUkVQQVJFX09VVFBVVCcsIGZpbGUsIHtcbiAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICAgICAgICBpdGVtOiBpdGVtXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goJ0RJRF9QUkVQQVJFX09VVFBVVCcsIHsgaWQ6IGl0ZW0uaWQsIGZpbGU6IGZpbGUgfSk7XG5cbiAgICAgICAgICAgICAgICBzdWNjZXNzKGZpbGUpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0pLFxuXG4gICAgICBSRVRSWV9JVEVNX1BST0NFU1NJTkc6IGdldEl0ZW1CeVF1ZXJ5RnJvbVN0YXRlKHN0YXRlLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGRpc3BhdGNoKCdSRVFVRVNUX0lURU1fUFJPQ0VTU0lORycsIHsgcXVlcnk6IGl0ZW0gfSk7XG4gICAgICB9KSxcblxuICAgICAgUkVRVUVTVF9SRU1PVkVfSVRFTTogZ2V0SXRlbUJ5UXVlcnlGcm9tU3RhdGUoc3RhdGUsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgb3B0aW9uYWxQcm9taXNlKFxuICAgICAgICAgIHF1ZXJ5KCdHRVRfQkVGT1JFX1JFTU9WRV9GSUxFJyksXG4gICAgICAgICAgY3JlYXRlSXRlbUFQSShpdGVtKVxuICAgICAgICApLnRoZW4oZnVuY3Rpb24oc2hvdWxkUmVtb3ZlKSB7XG4gICAgICAgICAgaWYgKCFzaG91bGRSZW1vdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGlzcGF0Y2goJ1JFTU9WRV9JVEVNJywgeyBxdWVyeTogaXRlbSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcblxuICAgICAgUkVMRUFTRV9JVEVNOiBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZShzdGF0ZSwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpdGVtLnJlbGVhc2UoKTtcbiAgICAgIH0pLFxuXG4gICAgICBSRU1PVkVfSVRFTTogZ2V0SXRlbUJ5UXVlcnlGcm9tU3RhdGUoc3RhdGUsIGZ1bmN0aW9uKFxuICAgICAgICBpdGVtLFxuICAgICAgICBzdWNjZXNzLFxuICAgICAgICBmYWlsdXJlLFxuICAgICAgICBvcHRpb25zXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlbW92ZUZyb21WaWV3ID0gZnVuY3Rpb24gcmVtb3ZlRnJvbVZpZXcoKSB7XG4gICAgICAgICAgLy8gZ2V0IGlkIHJlZmVyZW5jZVxuICAgICAgICAgIHZhciBpZCA9IGl0ZW0uaWQ7XG5cbiAgICAgICAgICAvLyBhcmNoaXZlIHRoZSBpdGVtLCB0aGlzIGRvZXMgbm90IHJlbW92ZSBpdCBmcm9tIHRoZSBsaXN0XG4gICAgICAgICAgZ2V0SXRlbUJ5SWQoc3RhdGUuaXRlbXMsIGlkKS5hcmNoaXZlKCk7XG5cbiAgICAgICAgICAvLyB0ZWxsIHRoZSB2aWV3IHRoZSBpdGVtIGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICBkaXNwYXRjaCgnRElEX1JFTU9WRV9JVEVNJywgeyBlcnJvcjogbnVsbCwgaWQ6IGlkLCBpdGVtOiBpdGVtIH0pO1xuXG4gICAgICAgICAgLy8gbm93IHRoZSBsaXN0IGhhcyBiZWVuIG1vZGlmaWVkXG4gICAgICAgICAgbGlzdFVwZGF0ZWQoZGlzcGF0Y2gsIHN0YXRlKTtcblxuICAgICAgICAgIC8vIGNvcnJlY3RseSByZW1vdmVkXG4gICAgICAgICAgc3VjY2VzcyhjcmVhdGVJdGVtQVBJKGl0ZW0pKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbG9jYWwgZmlsZSBhbmQgdGhlIHNlcnZlci5yZW1vdmUgZnVuY3Rpb24gaGFzIGJlZW4gY29uZmlndXJlZCwgc2VuZCBzb3VyY2UgdGhlcmUgc28gZGV2IGNhbiByZW1vdmUgZmlsZSBmcm9tIHNlcnZlclxuICAgICAgICB2YXIgc2VydmVyID0gc3RhdGUub3B0aW9ucy5zZXJ2ZXI7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpdGVtLm9yaWdpbiA9PT0gRmlsZU9yaWdpbi5MT0NBTCAmJlxuICAgICAgICAgIHNlcnZlciAmJlxuICAgICAgICAgIGlzRnVuY3Rpb24oc2VydmVyLnJlbW92ZSkgJiZcbiAgICAgICAgICBvcHRpb25zLnJlbW92ZSAhPT0gZmFsc2VcbiAgICAgICAgKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ0RJRF9TVEFSVF9JVEVNX1JFTU9WRScsIHsgaWQ6IGl0ZW0uaWQgfSk7XG5cbiAgICAgICAgICBzZXJ2ZXIucmVtb3ZlKFxuICAgICAgICAgICAgaXRlbS5zb3VyY2UsXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUZyb21WaWV3KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKCdESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1InLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGNyZWF0ZVJlc3BvbnNlKCdlcnJvcicsIDAsIHN0YXR1cywgbnVsbCksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgICBtYWluOiBkeW5hbWljTGFiZWwoc3RhdGUub3B0aW9ucy5sYWJlbEZpbGVSZW1vdmVFcnJvcikoXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIHN1Yjogc3RhdGUub3B0aW9ucy5sYWJlbFRhcFRvUmV0cnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgaXMgcmVxdWVzdGluZyByZXZlcnQgYW5kIGNhbiByZXZlcnQgbmVlZCB0byBjYWxsIHJldmVydCBoYW5kbGVyIChub3QgY2FsbGluZyByZXF1ZXN0XyBiZWNhdXNlIHRoYXQgd291bGQgYWxzbyB0cmlnZ2VyIGJlZm9yZVJlbW92ZUhvb2spXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgb3B0aW9ucy5yZXZlcnQgJiZcbiAgICAgICAgICAgIGl0ZW0ub3JpZ2luICE9PSBGaWxlT3JpZ2luLkxPQ0FMICYmXG4gICAgICAgICAgICBpdGVtLnNlcnZlcklkICE9PSBudWxsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpdGVtLnJldmVydChcbiAgICAgICAgICAgICAgY3JlYXRlUmV2ZXJ0RnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgc3RhdGUub3B0aW9ucy5zZXJ2ZXIudXJsLFxuICAgICAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMuc2VydmVyLnJldmVydFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBxdWVyeSgnR0VUX0ZPUkNFX1JFVkVSVCcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGNhbiBub3cgc2FmZWx5IHJlbW92ZSBmcm9tIHZpZXdcbiAgICAgICAgICByZW1vdmVGcm9tVmlldygpO1xuICAgICAgICB9XG4gICAgICB9KSxcblxuICAgICAgQUJPUlRfSVRFTV9MT0FEOiBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZShzdGF0ZSwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpdGVtLmFib3J0TG9hZCgpO1xuICAgICAgfSksXG5cbiAgICAgIEFCT1JUX0lURU1fUFJPQ0VTU0lORzogZ2V0SXRlbUJ5UXVlcnlGcm9tU3RhdGUoc3RhdGUsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgLy8gdGVzdCBpZiBpcyBhbHJlYWR5IHByb2Nlc3NlZFxuICAgICAgICBpZiAoaXRlbS5zZXJ2ZXJJZCkge1xuICAgICAgICAgIGRpc3BhdGNoKCdSRVZFUlRfSVRFTV9QUk9DRVNTSU5HJywgeyBpZDogaXRlbS5pZCB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhYm9ydFxuICAgICAgICBpdGVtLmFib3J0UHJvY2Vzc2luZygpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHNob3VsZFJlbW92ZSA9IHN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZDtcbiAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCgnUkVNT1ZFX0lURU0nLCB7IHF1ZXJ5OiBpdGVtLmlkIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KSxcblxuICAgICAgUkVRVUVTVF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOiBnZXRJdGVtQnlRdWVyeUZyb21TdGF0ZShzdGF0ZSwgZnVuY3Rpb24oXG4gICAgICAgIGl0ZW1cbiAgICAgICkge1xuICAgICAgICAvLyBub3QgaW5zdGFudCB1cGxvYWRpbmcsIHJldmVydCBpbW1pZGlhdGVseVxuICAgICAgICBpZiAoIXN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZCkge1xuICAgICAgICAgIGRpc3BhdGNoKCdSRVZFUlRfSVRFTV9QUk9DRVNTSU5HJywgeyBxdWVyeTogaXRlbSB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSdyZSBpbnN0YW50IHVwbG9hZGluZyB0aGUgZmlsZSB3aWxsIGFsc28gYmUgcmVtb3ZlZCBpZiB3ZSByZXZlcnQsXG4gICAgICAgIC8vIHNvIGlmIGEgYmVmb3JlIHJlbW92ZSBmaWxlIGhvb2sgaXMgZGVmaW5lZCB3ZSBuZWVkIHRvIHJ1biBpdCBub3dcbiAgICAgICAgdmFyIGhhbmRsZVJldmVydCA9IGZ1bmN0aW9uIGhhbmRsZVJldmVydChzaG91bGRSZXZlcnQpIHtcbiAgICAgICAgICBpZiAoIXNob3VsZFJldmVydCkgcmV0dXJuO1xuICAgICAgICAgIGRpc3BhdGNoKCdSRVZFUlRfSVRFTV9QUk9DRVNTSU5HJywgeyBxdWVyeTogaXRlbSB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZm4gPSBxdWVyeSgnR0VUX0JFRk9SRV9SRU1PVkVfRklMRScpO1xuICAgICAgICBpZiAoIWZuKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZVJldmVydCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXF1ZXN0UmVtb3ZlUmVzdWx0ID0gZm4oY3JlYXRlSXRlbUFQSShpdGVtKSk7XG4gICAgICAgIGlmIChyZXF1ZXN0UmVtb3ZlUmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAvLyB1bmRlZmluZWQgb3IgbnVsbFxuICAgICAgICAgIHJldHVybiBoYW5kbGVSZXZlcnQodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3RSZW1vdmVSZXN1bHQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVSZXZlcnQocmVxdWVzdFJlbW92ZVJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3RSZW1vdmVSZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJlcXVlc3RSZW1vdmVSZXN1bHQudGhlbihoYW5kbGVSZXZlcnQpO1xuICAgICAgICB9XG4gICAgICB9KSxcblxuICAgICAgUkVWRVJUX0lURU1fUFJPQ0VTU0lORzogZ2V0SXRlbUJ5UXVlcnlGcm9tU3RhdGUoc3RhdGUsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaXRlbVxuICAgICAgICAgIC5yZXZlcnQoXG4gICAgICAgICAgICBjcmVhdGVSZXZlcnRGdW5jdGlvbihcbiAgICAgICAgICAgICAgc3RhdGUub3B0aW9ucy5zZXJ2ZXIudXJsLFxuICAgICAgICAgICAgICBzdGF0ZS5vcHRpb25zLnNlcnZlci5yZXZlcnRcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBxdWVyeSgnR0VUX0ZPUkNFX1JFVkVSVCcpXG4gICAgICAgICAgKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNob3VsZFJlbW92ZSA9IHN0YXRlLm9wdGlvbnMuaW5zdGFudFVwbG9hZCB8fCBpc01vY2tJdGVtKGl0ZW0pO1xuICAgICAgICAgICAgaWYgKHNob3VsZFJlbW92ZSkge1xuICAgICAgICAgICAgICBkaXNwYXRjaCgnUkVNT1ZFX0lURU0nLCB7IHF1ZXJ5OiBpdGVtLmlkIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKCkge30pO1xuICAgICAgfSksXG5cbiAgICAgIFNFVF9PUFRJT05TOiBmdW5jdGlvbiBTRVRfT1BUSU9OUyhfcmVmMTEpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBfcmVmMTEub3B0aW9ucztcbiAgICAgICAgZm9yaW4ob3B0aW9ucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGRpc3BhdGNoKCdTRVRfJyArIGZyb21DYW1lbHMoa2V5LCAnXycpLnRvVXBwZXJDYXNlKCksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBmb3JtYXRGaWxlbmFtZSA9IGZ1bmN0aW9uIGZvcm1hdEZpbGVuYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICB2YXIgY3JlYXRlRWxlbWVudCQxID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIH07XG5cbiAgdmFyIHRleHQgPSBmdW5jdGlvbiB0ZXh0KG5vZGUsIHZhbHVlKSB7XG4gICAgdmFyIHRleHROb2RlID0gbm9kZS5jaGlsZE5vZGVzWzBdO1xuICAgIGlmICghdGV4dE5vZGUpIHtcbiAgICAgIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpO1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gdGV4dE5vZGUubm9kZVZhbHVlKSB7XG4gICAgICB0ZXh0Tm9kZS5ub2RlVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHBvbGFyVG9DYXJ0ZXNpYW4gPSBmdW5jdGlvbiBwb2xhclRvQ2FydGVzaWFuKFxuICAgIGNlbnRlclgsXG4gICAgY2VudGVyWSxcbiAgICByYWRpdXMsXG4gICAgYW5nbGVJbkRlZ3JlZXNcbiAgKSB7XG4gICAgdmFyIGFuZ2xlSW5SYWRpYW5zID0gKCgoYW5nbGVJbkRlZ3JlZXMgJSAzNjApIC0gOTApICogTWF0aC5QSSkgLyAxODAuMDtcbiAgICByZXR1cm4ge1xuICAgICAgeDogY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlSW5SYWRpYW5zKSxcbiAgICAgIHk6IGNlbnRlclkgKyByYWRpdXMgKiBNYXRoLnNpbihhbmdsZUluUmFkaWFucylcbiAgICB9O1xuICB9O1xuXG4gIHZhciBkZXNjcmliZUFyYyA9IGZ1bmN0aW9uIGRlc2NyaWJlQXJjKFxuICAgIHgsXG4gICAgeSxcbiAgICByYWRpdXMsXG4gICAgc3RhcnRBbmdsZSxcbiAgICBlbmRBbmdsZSxcbiAgICBhcmNTd2VlcFxuICApIHtcbiAgICB2YXIgc3RhcnQgPSBwb2xhclRvQ2FydGVzaWFuKHgsIHksIHJhZGl1cywgZW5kQW5nbGUpO1xuICAgIHZhciBlbmQgPSBwb2xhclRvQ2FydGVzaWFuKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSk7XG4gICAgcmV0dXJuIFtcbiAgICAgICdNJyxcbiAgICAgIHN0YXJ0LngsXG4gICAgICBzdGFydC55LFxuICAgICAgJ0EnLFxuICAgICAgcmFkaXVzLFxuICAgICAgcmFkaXVzLFxuICAgICAgMCxcbiAgICAgIGFyY1N3ZWVwLFxuICAgICAgMCxcbiAgICAgIGVuZC54LFxuICAgICAgZW5kLnlcbiAgICBdLmpvaW4oJyAnKTtcbiAgfTtcblxuICB2YXIgcGVyY2VudGFnZUFyYyA9IGZ1bmN0aW9uIHBlcmNlbnRhZ2VBcmMoeCwgeSwgcmFkaXVzLCBmcm9tLCB0bykge1xuICAgIHZhciBhcmNTd2VlcCA9IDE7XG4gICAgaWYgKHRvID4gZnJvbSAmJiB0byAtIGZyb20gPD0gMC41KSB7XG4gICAgICBhcmNTd2VlcCA9IDA7XG4gICAgfVxuICAgIGlmIChmcm9tID4gdG8gJiYgZnJvbSAtIHRvID49IDAuNSkge1xuICAgICAgYXJjU3dlZXAgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpYmVBcmMoXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIE1hdGgubWluKDAuOTk5OSwgZnJvbSkgKiAzNjAsXG4gICAgICBNYXRoLm1pbigwLjk5OTksIHRvKSAqIDM2MCxcbiAgICAgIGFyY1N3ZWVwXG4gICAgKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICAvLyBzdGFydCBhdCAwXG4gICAgcHJvcHMuc3BpbiA9IGZhbHNlO1xuICAgIHByb3BzLnByb2dyZXNzID0gMDtcbiAgICBwcm9wcy5vcGFjaXR5ID0gMDtcblxuICAgIC8vIHN2Z1xuICAgIHZhciBzdmcgPSBjcmVhdGVFbGVtZW50KCdzdmcnKTtcbiAgICByb290LnJlZi5wYXRoID0gY3JlYXRlRWxlbWVudCgncGF0aCcsIHtcbiAgICAgICdzdHJva2Utd2lkdGgnOiAyLFxuICAgICAgJ3N0cm9rZS1saW5lY2FwJzogJ3JvdW5kJ1xuICAgIH0pO1xuXG4gICAgc3ZnLmFwcGVuZENoaWxkKHJvb3QucmVmLnBhdGgpO1xuXG4gICAgcm9vdC5yZWYuc3ZnID0gc3ZnO1xuXG4gICAgcm9vdC5hcHBlbmRDaGlsZChzdmcpO1xuICB9O1xuXG4gIHZhciB3cml0ZSA9IGZ1bmN0aW9uIHdyaXRlKF9yZWYyKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmMi5wcm9wcztcblxuICAgIGlmIChwcm9wcy5vcGFjaXR5ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmFsaWduKSB7XG4gICAgICByb290LmVsZW1lbnQuZGF0YXNldC5hbGlnbiA9IHByb3BzLmFsaWduO1xuICAgIH1cblxuICAgIC8vIGdldCB3aWR0aCBvZiBzdHJva2VcbiAgICB2YXIgcmluZ1N0cm9rZVdpZHRoID0gcGFyc2VJbnQoYXR0cihyb290LnJlZi5wYXRoLCAnc3Ryb2tlLXdpZHRoJyksIDEwKTtcblxuICAgIC8vIGNhbGN1bGF0ZSBzaXplIG9mIHJpbmdcbiAgICB2YXIgc2l6ZSA9IHJvb3QucmVjdC5lbGVtZW50LndpZHRoICogMC41O1xuXG4gICAgLy8gcmluZyBzdGF0ZVxuICAgIHZhciByaW5nRnJvbSA9IDA7XG4gICAgdmFyIHJpbmdUbyA9IDA7XG5cbiAgICAvLyBub3cgaW4gYnVzeSBtb2RlXG4gICAgaWYgKHByb3BzLnNwaW4pIHtcbiAgICAgIHJpbmdGcm9tID0gMDtcbiAgICAgIHJpbmdUbyA9IDAuNTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmluZ0Zyb20gPSAwO1xuICAgICAgcmluZ1RvID0gcHJvcHMucHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGFyYyBwYXRoXG4gICAgdmFyIGNvb3JkaW5hdGVzID0gcGVyY2VudGFnZUFyYyhcbiAgICAgIHNpemUsXG4gICAgICBzaXplLFxuICAgICAgc2l6ZSAtIHJpbmdTdHJva2VXaWR0aCxcbiAgICAgIHJpbmdGcm9tLFxuICAgICAgcmluZ1RvXG4gICAgKTtcblxuICAgIC8vIHVwZGF0ZSBwcm9ncmVzcyBiYXJcbiAgICBhdHRyKHJvb3QucmVmLnBhdGgsICdkJywgY29vcmRpbmF0ZXMpO1xuXG4gICAgLy8gaGlkZSB3aGlsZSBjb250YWlucyAwIHZhbHVlXG4gICAgYXR0cihcbiAgICAgIHJvb3QucmVmLnBhdGgsXG4gICAgICAnc3Ryb2tlLW9wYWNpdHknLFxuICAgICAgcHJvcHMuc3BpbiB8fCBwcm9wcy5wcm9ncmVzcyA+IDAgPyAxIDogMFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHByb2dyZXNzSW5kaWNhdG9yID0gY3JlYXRlVmlldyh7XG4gICAgdGFnOiAnZGl2JyxcbiAgICBuYW1lOiAncHJvZ3Jlc3MtaW5kaWNhdG9yJyxcbiAgICBpZ25vcmVSZWN0VXBkYXRlOiB0cnVlLFxuICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgd3JpdGU6IHdyaXRlLFxuICAgIG1peGluczoge1xuICAgICAgYXBpczogWydwcm9ncmVzcycsICdzcGluJywgJ2FsaWduJ10sXG4gICAgICBzdHlsZXM6IFsnb3BhY2l0eSddLFxuICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICBvcGFjaXR5OiB7IHR5cGU6ICd0d2VlbicsIGR1cmF0aW9uOiA1MDAgfSxcbiAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgICAgICAgICBzdGlmZm5lc3M6IDAuOTUsXG4gICAgICAgICAgZGFtcGluZzogMC42NSxcbiAgICAgICAgICBtYXNzOiAxMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgY3JlYXRlJDEgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuICAgIHJvb3QuZWxlbWVudC5pbm5lckhUTUwgPVxuICAgICAgKHByb3BzLmljb24gfHwgJycpICsgKCc8c3Bhbj4nICsgcHJvcHMubGFiZWwgKyAnPC9zcGFuPicpO1xuXG4gICAgcHJvcHMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciB3cml0ZSQxID0gZnVuY3Rpb24gd3JpdGUoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWYyLnByb3BzO1xuICAgIHZhciBpc0Rpc2FibGVkID0gcHJvcHMuaXNEaXNhYmxlZDtcbiAgICB2YXIgc2hvdWxkRGlzYWJsZSA9IHJvb3QucXVlcnkoJ0dFVF9ESVNBQkxFRCcpIHx8IHByb3BzLm9wYWNpdHkgPT09IDA7XG5cbiAgICBpZiAoc2hvdWxkRGlzYWJsZSAmJiAhaXNEaXNhYmxlZCkge1xuICAgICAgcHJvcHMuaXNEaXNhYmxlZCA9IHRydWU7XG4gICAgICBhdHRyKHJvb3QuZWxlbWVudCwgJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgfSBlbHNlIGlmICghc2hvdWxkRGlzYWJsZSAmJiBpc0Rpc2FibGVkKSB7XG4gICAgICBwcm9wcy5pc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgICByb290LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZmlsZUFjdGlvbkJ1dHRvbiA9IGNyZWF0ZVZpZXcoe1xuICAgIHRhZzogJ2J1dHRvbicsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgdHlwZTogJ2J1dHRvbidcbiAgICB9LFxuXG4gICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICBpZ25vcmVSZWN0VXBkYXRlOiB0cnVlLFxuICAgIG5hbWU6ICdmaWxlLWFjdGlvbi1idXR0b24nLFxuICAgIG1peGluczoge1xuICAgICAgYXBpczogWydsYWJlbCddLFxuICAgICAgc3R5bGVzOiBbJ3RyYW5zbGF0ZVgnLCAndHJhbnNsYXRlWScsICdzY2FsZVgnLCAnc2NhbGVZJywgJ29wYWNpdHknXSxcbiAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgc2NhbGVYOiAnc3ByaW5nJyxcbiAgICAgICAgc2NhbGVZOiAnc3ByaW5nJyxcbiAgICAgICAgdHJhbnNsYXRlWDogJ3NwcmluZycsXG4gICAgICAgIHRyYW5zbGF0ZVk6ICdzcHJpbmcnLFxuICAgICAgICBvcGFjaXR5OiB7IHR5cGU6ICd0d2VlbicsIGR1cmF0aW9uOiAyNTAgfVxuICAgICAgfSxcblxuICAgICAgbGlzdGVuZXJzOiB0cnVlXG4gICAgfSxcblxuICAgIGNyZWF0ZTogY3JlYXRlJDEsXG4gICAgd3JpdGU6IHdyaXRlJDFcbiAgfSk7XG5cbiAgdmFyIHRvTmF0dXJhbEZpbGVTaXplID0gZnVuY3Rpb24gdG9OYXR1cmFsRmlsZVNpemUoYnl0ZXMpIHtcbiAgICB2YXIgZGVjaW1hbFNlcGFyYXRvciA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcuJztcbiAgICAvLyBub3BlLCBubyBuZWdhdGl2ZSBieXRlIHNpemVzXG4gICAgYnl0ZXMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKGJ5dGVzKSk7XG5cbiAgICAvLyBqdXN0IGJ5dGVzXG4gICAgaWYgKGJ5dGVzIDwgMTAwMCkge1xuICAgICAgcmV0dXJuIGJ5dGVzICsgJyBieXRlcyc7XG4gICAgfVxuXG4gICAgLy8ga2lsb2J5dGVzXG4gICAgaWYgKGJ5dGVzIDwgTUIpIHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGJ5dGVzIC8gS0IpICsgJyBLQic7XG4gICAgfVxuXG4gICAgLy8gbWVnYWJ5dGVzXG4gICAgaWYgKGJ5dGVzIDwgR0IpIHtcbiAgICAgIHJldHVybiByZW1vdmVEZWNpbWFsc1doZW5aZXJvKGJ5dGVzIC8gTUIsIDEsIGRlY2ltYWxTZXBhcmF0b3IpICsgJyBNQic7XG4gICAgfVxuXG4gICAgLy8gZ2lnYWJ5dGVzXG4gICAgcmV0dXJuIHJlbW92ZURlY2ltYWxzV2hlblplcm8oYnl0ZXMgLyBHQiwgMiwgZGVjaW1hbFNlcGFyYXRvcikgKyAnIEdCJztcbiAgfTtcblxuICB2YXIgS0IgPSAxMDAwO1xuICB2YXIgTUIgPSAxMDAwMDAwO1xuICB2YXIgR0IgPSAxMDAwMDAwMDAwO1xuXG4gIHZhciByZW1vdmVEZWNpbWFsc1doZW5aZXJvID0gZnVuY3Rpb24gcmVtb3ZlRGVjaW1hbHNXaGVuWmVybyhcbiAgICB2YWx1ZSxcbiAgICBkZWNpbWFsQ291bnQsXG4gICAgc2VwYXJhdG9yXG4gICkge1xuICAgIHJldHVybiB2YWx1ZVxuICAgICAgLnRvRml4ZWQoZGVjaW1hbENvdW50KVxuICAgICAgLnNwbGl0KCcuJylcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocGFydCkge1xuICAgICAgICByZXR1cm4gcGFydCAhPT0gJzAnO1xuICAgICAgfSlcbiAgICAgIC5qb2luKHNlcGFyYXRvcik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZSQyID0gZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICAvLyBmaWxlbmFtZVxuICAgIHZhciBmaWxlTmFtZSA9IGNyZWF0ZUVsZW1lbnQkMSgnc3BhbicpO1xuICAgIGZpbGVOYW1lLmNsYXNzTmFtZSA9ICdmaWxlcG9uZC0tZmlsZS1pbmZvLW1haW4nO1xuICAgIC8vIGhpZGUgZm9yIHNjcmVlbnJlYWRlcnNcbiAgICAvLyB0aGUgZmlsZSBpcyBjb250YWluZWQgaW4gYSBmaWVsZHNldCB3aXRoIGxlZ2VuZCB0aGF0IGNvbnRhaW5zIHRoZSBmaWxlbmFtZVxuICAgIC8vIG5vIG5lZWQgdG8gcmVhZCBpdCB0d2ljZVxuICAgIGF0dHIoZmlsZU5hbWUsICdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChmaWxlTmFtZSk7XG4gICAgcm9vdC5yZWYuZmlsZU5hbWUgPSBmaWxlTmFtZTtcblxuICAgIC8vIGZpbGVzaXplXG4gICAgdmFyIGZpbGVTaXplID0gY3JlYXRlRWxlbWVudCQxKCdzcGFuJyk7XG4gICAgZmlsZVNpemUuY2xhc3NOYW1lID0gJ2ZpbGVwb25kLS1maWxlLWluZm8tc3ViJztcbiAgICByb290LmFwcGVuZENoaWxkKGZpbGVTaXplKTtcbiAgICByb290LnJlZi5maWxlU2l6ZSA9IGZpbGVTaXplO1xuXG4gICAgLy8gc2V0IGluaXRpYWwgdmFsdWVzXG4gICAgdGV4dChmaWxlU2l6ZSwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfV0FJVElOR19GT1JfU0laRScpKTtcbiAgICB0ZXh0KGZpbGVOYW1lLCBmb3JtYXRGaWxlbmFtZShyb290LnF1ZXJ5KCdHRVRfSVRFTV9OQU1FJywgcHJvcHMuaWQpKSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZUZpbGUgPSBmdW5jdGlvbiB1cGRhdGVGaWxlKF9yZWYyKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmMi5wcm9wcztcbiAgICB0ZXh0KFxuICAgICAgcm9vdC5yZWYuZmlsZVNpemUsXG4gICAgICB0b05hdHVyYWxGaWxlU2l6ZShyb290LnF1ZXJ5KCdHRVRfSVRFTV9TSVpFJywgcHJvcHMuaWQpKVxuICAgICk7XG5cbiAgICB0ZXh0KFxuICAgICAgcm9vdC5yZWYuZmlsZU5hbWUsXG4gICAgICBmb3JtYXRGaWxlbmFtZShyb290LnF1ZXJ5KCdHRVRfSVRFTV9OQU1FJywgcHJvcHMuaWQpKVxuICAgICk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZUZpbGVTaXplT25FcnJvciA9IGZ1bmN0aW9uIHVwZGF0ZUZpbGVTaXplT25FcnJvcihfcmVmMykge1xuICAgIHZhciByb290ID0gX3JlZjMucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZjMucHJvcHM7XG4gICAgLy8gaWYgc2l6ZSBpcyBhdmFpbGFibGUgZG9uJ3QgZmFsbGJhY2sgdG8gdW5rbm93biBzaXplIG1lc3NhZ2VcbiAgICBpZiAoaXNJbnQocm9vdC5xdWVyeSgnR0VUX0lURU1fU0laRScsIHByb3BzLmlkKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0ZXh0KHJvb3QucmVmLmZpbGVTaXplLCByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9TSVpFX05PVF9BVkFJTEFCTEUnKSk7XG4gIH07XG5cbiAgdmFyIGZpbGVJbmZvID0gY3JlYXRlVmlldyh7XG4gICAgbmFtZTogJ2ZpbGUtaW5mbycsXG4gICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICBpZ25vcmVSZWN0VXBkYXRlOiB0cnVlLFxuICAgIHdyaXRlOiBjcmVhdGVSb3V0ZSh7XG4gICAgICBESURfTE9BRF9JVEVNOiB1cGRhdGVGaWxlLFxuICAgICAgRElEX1VQREFURV9JVEVNX01FVEE6IHVwZGF0ZUZpbGUsXG4gICAgICBESURfVEhST1dfSVRFTV9MT0FEX0VSUk9SOiB1cGRhdGVGaWxlU2l6ZU9uRXJyb3IsXG4gICAgICBESURfVEhST1dfSVRFTV9JTlZBTElEOiB1cGRhdGVGaWxlU2l6ZU9uRXJyb3JcbiAgICB9KSxcblxuICAgIGRpZENyZWF0ZVZpZXc6IGZ1bmN0aW9uIGRpZENyZWF0ZVZpZXcocm9vdCkge1xuICAgICAgYXBwbHlGaWx0ZXJzKCdDUkVBVEVfVklFVycsIE9iamVjdC5hc3NpZ24oe30sIHJvb3QsIHsgdmlldzogcm9vdCB9KSk7XG4gICAgfSxcbiAgICBjcmVhdGU6IGNyZWF0ZSQyLFxuICAgIG1peGluczoge1xuICAgICAgc3R5bGVzOiBbJ3RyYW5zbGF0ZVgnLCAndHJhbnNsYXRlWSddLFxuICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICB0cmFuc2xhdGVYOiAnc3ByaW5nJyxcbiAgICAgICAgdHJhbnNsYXRlWTogJ3NwcmluZydcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciB0b1BlcmNlbnRhZ2UgPSBmdW5jdGlvbiB0b1BlcmNlbnRhZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMCk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZSQzID0gZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYucm9vdDtcblxuICAgIC8vIG1haW4gc3RhdHVzXG4gICAgdmFyIG1haW4gPSBjcmVhdGVFbGVtZW50JDEoJ3NwYW4nKTtcbiAgICBtYWluLmNsYXNzTmFtZSA9ICdmaWxlcG9uZC0tZmlsZS1zdGF0dXMtbWFpbic7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChtYWluKTtcbiAgICByb290LnJlZi5tYWluID0gbWFpbjtcblxuICAgIC8vIHN1YiBzdGF0dXNcbiAgICB2YXIgc3ViID0gY3JlYXRlRWxlbWVudCQxKCdzcGFuJyk7XG4gICAgc3ViLmNsYXNzTmFtZSA9ICdmaWxlcG9uZC0tZmlsZS1zdGF0dXMtc3ViJztcbiAgICByb290LmFwcGVuZENoaWxkKHN1Yik7XG4gICAgcm9vdC5yZWYuc3ViID0gc3ViO1xuXG4gICAgZGlkU2V0SXRlbUxvYWRQcm9ncmVzcyh7IHJvb3Q6IHJvb3QsIGFjdGlvbjogeyBwcm9ncmVzczogbnVsbCB9IH0pO1xuICB9O1xuXG4gIHZhciBkaWRTZXRJdGVtTG9hZFByb2dyZXNzID0gZnVuY3Rpb24gZGlkU2V0SXRlbUxvYWRQcm9ncmVzcyhfcmVmMikge1xuICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbjtcbiAgICB2YXIgdGl0bGUgPVxuICAgICAgYWN0aW9uLnByb2dyZXNzID09PSBudWxsXG4gICAgICAgID8gcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfTE9BRElORycpXG4gICAgICAgIDogcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfTE9BRElORycpICtcbiAgICAgICAgICAnICcgK1xuICAgICAgICAgIHRvUGVyY2VudGFnZShhY3Rpb24ucHJvZ3Jlc3MpICtcbiAgICAgICAgICAnJSc7XG5cbiAgICB0ZXh0KHJvb3QucmVmLm1haW4sIHRpdGxlKTtcbiAgICB0ZXh0KHJvb3QucmVmLnN1Yiwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX1RBUF9UT19DQU5DRUwnKSk7XG4gIH07XG5cbiAgdmFyIGRpZFNldEl0ZW1Qcm9jZXNzUHJvZ3Jlc3MgPSBmdW5jdGlvbiBkaWRTZXRJdGVtUHJvY2Vzc1Byb2dyZXNzKF9yZWYzKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uO1xuICAgIHZhciB0aXRsZSA9XG4gICAgICBhY3Rpb24ucHJvZ3Jlc3MgPT09IG51bGxcbiAgICAgICAgPyByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HJylcbiAgICAgICAgOiByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgdG9QZXJjZW50YWdlKGFjdGlvbi5wcm9ncmVzcykgK1xuICAgICAgICAgICclJztcblxuICAgIHRleHQocm9vdC5yZWYubWFpbiwgdGl0bGUpO1xuICAgIHRleHQocm9vdC5yZWYuc3ViLCByb290LnF1ZXJ5KCdHRVRfTEFCRUxfVEFQX1RPX0NBTkNFTCcpKTtcbiAgfTtcblxuICB2YXIgZGlkUmVxdWVzdEl0ZW1Qcm9jZXNzaW5nID0gZnVuY3Rpb24gZGlkUmVxdWVzdEl0ZW1Qcm9jZXNzaW5nKF9yZWY0KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNC5yb290O1xuICAgIHRleHQocm9vdC5yZWYubWFpbiwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfUFJPQ0VTU0lORycpKTtcbiAgICB0ZXh0KHJvb3QucmVmLnN1Yiwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX1RBUF9UT19DQU5DRUwnKSk7XG4gIH07XG5cbiAgdmFyIGRpZEFib3J0SXRlbVByb2Nlc3NpbmcgPSBmdW5jdGlvbiBkaWRBYm9ydEl0ZW1Qcm9jZXNzaW5nKF9yZWY1KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNS5yb290O1xuICAgIHRleHQocm9vdC5yZWYubWFpbiwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfUFJPQ0VTU0lOR19BQk9SVEVEJykpO1xuICAgIHRleHQocm9vdC5yZWYuc3ViLCByb290LnF1ZXJ5KCdHRVRfTEFCRUxfVEFQX1RPX1JFVFJZJykpO1xuICB9O1xuXG4gIHZhciBkaWRDb21wbGV0ZUl0ZW1Qcm9jZXNzaW5nID0gZnVuY3Rpb24gZGlkQ29tcGxldGVJdGVtUHJvY2Vzc2luZyhfcmVmNikge1xuICAgIHZhciByb290ID0gX3JlZjYucm9vdDtcbiAgICB0ZXh0KHJvb3QucmVmLm1haW4sIHJvb3QucXVlcnkoJ0dFVF9MQUJFTF9GSUxFX1BST0NFU1NJTkdfQ09NUExFVEUnKSk7XG4gICAgdGV4dChyb290LnJlZi5zdWIsIHJvb3QucXVlcnkoJ0dFVF9MQUJFTF9UQVBfVE9fVU5ETycpKTtcbiAgfTtcblxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihfcmVmNykge1xuICAgIHZhciByb290ID0gX3JlZjcucm9vdDtcbiAgICB0ZXh0KHJvb3QucmVmLm1haW4sICcnKTtcbiAgICB0ZXh0KHJvb3QucmVmLnN1YiwgJycpO1xuICB9O1xuXG4gIHZhciBlcnJvciA9IGZ1bmN0aW9uIGVycm9yKF9yZWY4KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmOC5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjguYWN0aW9uO1xuICAgIHRleHQocm9vdC5yZWYubWFpbiwgYWN0aW9uLnN0YXR1cy5tYWluKTtcbiAgICB0ZXh0KHJvb3QucmVmLnN1YiwgYWN0aW9uLnN0YXR1cy5zdWIpO1xuICB9O1xuXG4gIHZhciBmaWxlU3RhdHVzID0gY3JlYXRlVmlldyh7XG4gICAgbmFtZTogJ2ZpbGUtc3RhdHVzJyxcbiAgICBpZ25vcmVSZWN0OiB0cnVlLFxuICAgIGlnbm9yZVJlY3RVcGRhdGU6IHRydWUsXG4gICAgd3JpdGU6IGNyZWF0ZVJvdXRlKHtcbiAgICAgIERJRF9MT0FEX0lURU06IGNsZWFyLFxuICAgICAgRElEX1JFVkVSVF9JVEVNX1BST0NFU1NJTkc6IGNsZWFyLFxuICAgICAgRElEX1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HOiBkaWRSZXF1ZXN0SXRlbVByb2Nlc3NpbmcsXG4gICAgICBESURfQUJPUlRfSVRFTV9QUk9DRVNTSU5HOiBkaWRBYm9ydEl0ZW1Qcm9jZXNzaW5nLFxuICAgICAgRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzogZGlkQ29tcGxldGVJdGVtUHJvY2Vzc2luZyxcbiAgICAgIERJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTOiBkaWRTZXRJdGVtUHJvY2Vzc1Byb2dyZXNzLFxuICAgICAgRElEX1VQREFURV9JVEVNX0xPQURfUFJPR1JFU1M6IGRpZFNldEl0ZW1Mb2FkUHJvZ3Jlc3MsXG4gICAgICBESURfVEhST1dfSVRFTV9MT0FEX0VSUk9SOiBlcnJvcixcbiAgICAgIERJRF9USFJPV19JVEVNX0lOVkFMSUQ6IGVycm9yLFxuICAgICAgRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjogZXJyb3IsXG4gICAgICBESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUjogZXJyb3IsXG4gICAgICBESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1I6IGVycm9yXG4gICAgfSksXG5cbiAgICBkaWRDcmVhdGVWaWV3OiBmdW5jdGlvbiBkaWRDcmVhdGVWaWV3KHJvb3QpIHtcbiAgICAgIGFwcGx5RmlsdGVycygnQ1JFQVRFX1ZJRVcnLCBPYmplY3QuYXNzaWduKHt9LCByb290LCB7IHZpZXc6IHJvb3QgfSkpO1xuICAgIH0sXG4gICAgY3JlYXRlOiBjcmVhdGUkMyxcbiAgICBtaXhpbnM6IHtcbiAgICAgIHN0eWxlczogWyd0cmFuc2xhdGVYJywgJ3RyYW5zbGF0ZVknLCAnb3BhY2l0eSddLFxuICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICBvcGFjaXR5OiB7IHR5cGU6ICd0d2VlbicsIGR1cmF0aW9uOiAyNTAgfSxcbiAgICAgICAgdHJhbnNsYXRlWDogJ3NwcmluZycsXG4gICAgICAgIHRyYW5zbGF0ZVk6ICdzcHJpbmcnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQnV0dG9uIGRlZmluaXRpb25zIGZvciB0aGUgZmlsZSB2aWV3XG4gICAqL1xuXG4gIHZhciBCdXR0b25zID0ge1xuICAgIEFib3J0SXRlbUxvYWQ6IHtcbiAgICAgIGxhYmVsOiAnR0VUX0xBQkVMX0JVVFRPTl9BQk9SVF9JVEVNX0xPQUQnLFxuICAgICAgYWN0aW9uOiAnQUJPUlRfSVRFTV9MT0FEJyxcbiAgICAgIGNsYXNzTmFtZTogJ2ZpbGVwb25kLS1hY3Rpb24tYWJvcnQtaXRlbS1sb2FkJyxcbiAgICAgIGFsaWduOiAnTE9BRF9JTkRJQ0FUT1JfUE9TSVRJT04nIC8vIHJpZ2h0XG4gICAgfSxcbiAgICBSZXRyeUl0ZW1Mb2FkOiB7XG4gICAgICBsYWJlbDogJ0dFVF9MQUJFTF9CVVRUT05fUkVUUllfSVRFTV9MT0FEJyxcbiAgICAgIGFjdGlvbjogJ1JFVFJZX0lURU1fTE9BRCcsXG4gICAgICBpY29uOiAnR0VUX0lDT05fUkVUUlknLFxuICAgICAgY2xhc3NOYW1lOiAnZmlsZXBvbmQtLWFjdGlvbi1yZXRyeS1pdGVtLWxvYWQnLFxuICAgICAgYWxpZ246ICdCVVRUT05fUFJPQ0VTU19JVEVNX1BPU0lUSU9OJyAvLyByaWdodFxuICAgIH0sXG4gICAgUmVtb3ZlSXRlbToge1xuICAgICAgbGFiZWw6ICdHRVRfTEFCRUxfQlVUVE9OX1JFTU9WRV9JVEVNJyxcbiAgICAgIGFjdGlvbjogJ1JFUVVFU1RfUkVNT1ZFX0lURU0nLFxuICAgICAgaWNvbjogJ0dFVF9JQ09OX1JFTU9WRScsXG4gICAgICBjbGFzc05hbWU6ICdmaWxlcG9uZC0tYWN0aW9uLXJlbW92ZS1pdGVtJyxcbiAgICAgIGFsaWduOiAnQlVUVE9OX1JFTU9WRV9JVEVNX1BPU0lUSU9OJyAvLyBsZWZ0XG4gICAgfSxcbiAgICBQcm9jZXNzSXRlbToge1xuICAgICAgbGFiZWw6ICdHRVRfTEFCRUxfQlVUVE9OX1BST0NFU1NfSVRFTScsXG4gICAgICBhY3Rpb246ICdSRVFVRVNUX0lURU1fUFJPQ0VTU0lORycsXG4gICAgICBpY29uOiAnR0VUX0lDT05fUFJPQ0VTUycsXG4gICAgICBjbGFzc05hbWU6ICdmaWxlcG9uZC0tYWN0aW9uLXByb2Nlc3MtaXRlbScsXG4gICAgICBhbGlnbjogJ0JVVFRPTl9QUk9DRVNTX0lURU1fUE9TSVRJT04nIC8vIHJpZ2h0XG4gICAgfSxcbiAgICBBYm9ydEl0ZW1Qcm9jZXNzaW5nOiB7XG4gICAgICBsYWJlbDogJ0dFVF9MQUJFTF9CVVRUT05fQUJPUlRfSVRFTV9QUk9DRVNTSU5HJyxcbiAgICAgIGFjdGlvbjogJ0FCT1JUX0lURU1fUFJPQ0VTU0lORycsXG4gICAgICBjbGFzc05hbWU6ICdmaWxlcG9uZC0tYWN0aW9uLWFib3J0LWl0ZW0tcHJvY2Vzc2luZycsXG4gICAgICBhbGlnbjogJ0JVVFRPTl9QUk9DRVNTX0lURU1fUE9TSVRJT04nIC8vIHJpZ2h0XG4gICAgfSxcbiAgICBSZXRyeUl0ZW1Qcm9jZXNzaW5nOiB7XG4gICAgICBsYWJlbDogJ0dFVF9MQUJFTF9CVVRUT05fUkVUUllfSVRFTV9QUk9DRVNTSU5HJyxcbiAgICAgIGFjdGlvbjogJ1JFVFJZX0lURU1fUFJPQ0VTU0lORycsXG4gICAgICBpY29uOiAnR0VUX0lDT05fUkVUUlknLFxuICAgICAgY2xhc3NOYW1lOiAnZmlsZXBvbmQtLWFjdGlvbi1yZXRyeS1pdGVtLXByb2Nlc3NpbmcnLFxuICAgICAgYWxpZ246ICdCVVRUT05fUFJPQ0VTU19JVEVNX1BPU0lUSU9OJyAvLyByaWdodFxuICAgIH0sXG4gICAgUmV2ZXJ0SXRlbVByb2Nlc3Npbmc6IHtcbiAgICAgIGxhYmVsOiAnR0VUX0xBQkVMX0JVVFRPTl9VTkRPX0lURU1fUFJPQ0VTU0lORycsXG4gICAgICBhY3Rpb246ICdSRVFVRVNUX1JFVkVSVF9JVEVNX1BST0NFU1NJTkcnLFxuICAgICAgaWNvbjogJ0dFVF9JQ09OX1VORE8nLFxuICAgICAgY2xhc3NOYW1lOiAnZmlsZXBvbmQtLWFjdGlvbi1yZXZlcnQtaXRlbS1wcm9jZXNzaW5nJyxcbiAgICAgIGFsaWduOiAnQlVUVE9OX1BST0NFU1NfSVRFTV9QT1NJVElPTicgLy8gcmlnaHRcbiAgICB9XG4gIH07XG5cbiAgLy8gbWFrZSBhIGxpc3Qgb2YgYnV0dG9ucywgd2UgY2FuIHRoZW4gcmVtb3ZlIGJ1dHRvbnMgZnJvbSB0aGlzIGxpc3QgaWYgdGhleSdyZSBkaXNhYmxlZFxuICB2YXIgQnV0dG9uS2V5cyA9IFtdO1xuICBmb3JpbihCdXR0b25zLCBmdW5jdGlvbihrZXkpIHtcbiAgICBCdXR0b25LZXlzLnB1c2goa2V5KTtcbiAgfSk7XG5cbiAgdmFyIGNhbGN1bGF0ZUZpbGVJbmZvT2Zmc2V0ID0gZnVuY3Rpb24gY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQocm9vdCkge1xuICAgIHZhciBidXR0b25SZWN0ID0gcm9vdC5yZWYuYnV0dG9uUmVtb3ZlSXRlbS5yZWN0LmVsZW1lbnQ7XG4gICAgcmV0dXJuIGJ1dHRvblJlY3QuaGlkZGVuID8gbnVsbCA6IGJ1dHRvblJlY3Qud2lkdGggKyBidXR0b25SZWN0LmxlZnQ7XG4gIH07XG5cbiAgdmFyIGNhbGN1bGF0ZUJ1dHRvbldpZHRoID0gZnVuY3Rpb24gY2FsY3VsYXRlQnV0dG9uV2lkdGgocm9vdCkge1xuICAgIHZhciBidXR0b25SZWN0ID0gcm9vdC5yZWYuYnV0dG9uQWJvcnRJdGVtTG9hZC5yZWN0LmVsZW1lbnQ7XG4gICAgcmV0dXJuIGJ1dHRvblJlY3Qud2lkdGg7XG4gIH07XG5cbiAgLy8gRm9yY2Ugb24gZnVsbCBwaXhlbHMgc28gdGV4dCBzdGF5cyBjcmlwc1xuICB2YXIgY2FsY3VsYXRlRmlsZVZlcnRpY2FsQ2VudGVyT2Zmc2V0ID0gZnVuY3Rpb24gY2FsY3VsYXRlRmlsZVZlcnRpY2FsQ2VudGVyT2Zmc2V0KFxuICAgIHJvb3RcbiAgKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3Iocm9vdC5yZWYuYnV0dG9uUmVtb3ZlSXRlbS5yZWN0LmVsZW1lbnQuaGVpZ2h0IC8gNCk7XG4gIH07XG4gIHZhciBjYWxjdWxhdGVGaWxlSG9yaXpvbnRhbENlbnRlck9mZnNldCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUZpbGVIb3Jpem9udGFsQ2VudGVyT2Zmc2V0KFxuICAgIHJvb3RcbiAgKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3Iocm9vdC5yZWYuYnV0dG9uUmVtb3ZlSXRlbS5yZWN0LmVsZW1lbnQubGVmdCAvIDIpO1xuICB9O1xuXG4gIHZhciBnZXRMb2FkSW5kaWNhdG9yQWxpZ25tZW50ID0gZnVuY3Rpb24gZ2V0TG9hZEluZGljYXRvckFsaWdubWVudChyb290KSB7XG4gICAgcmV0dXJuIHJvb3QucXVlcnkoJ0dFVF9TVFlMRV9MT0FEX0lORElDQVRPUl9QT1NJVElPTicpO1xuICB9O1xuICB2YXIgZ2V0UHJvY2Vzc0luZGljYXRvckFsaWdubWVudCA9IGZ1bmN0aW9uIGdldFByb2Nlc3NJbmRpY2F0b3JBbGlnbm1lbnQoXG4gICAgcm9vdFxuICApIHtcbiAgICByZXR1cm4gcm9vdC5xdWVyeSgnR0VUX1NUWUxFX1BST0dSRVNTX0lORElDQVRPUl9QT1NJVElPTicpO1xuICB9O1xuICB2YXIgZ2V0UmVtb3ZlSW5kaWNhdG9yQWxpZ21lbnQgPSBmdW5jdGlvbiBnZXRSZW1vdmVJbmRpY2F0b3JBbGlnbWVudChyb290KSB7XG4gICAgcmV0dXJuIHJvb3QucXVlcnkoJ0dFVF9TVFlMRV9CVVRUT05fUkVNT1ZFX0lURU1fUE9TSVRJT04nKTtcbiAgfTtcblxuICB2YXIgRGVmYXVsdFN0eWxlID0ge1xuICAgIGJ1dHRvbkFib3J0SXRlbUxvYWQ6IHsgb3BhY2l0eTogMCB9LFxuICAgIGJ1dHRvblJldHJ5SXRlbUxvYWQ6IHsgb3BhY2l0eTogMCB9LFxuICAgIGJ1dHRvblJlbW92ZUl0ZW06IHsgb3BhY2l0eTogMCB9LFxuICAgIGJ1dHRvblByb2Nlc3NJdGVtOiB7IG9wYWNpdHk6IDAgfSxcbiAgICBidXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAgICBidXR0b25SZXRyeUl0ZW1Qcm9jZXNzaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAgICBidXR0b25SZXZlcnRJdGVtUHJvY2Vzc2luZzogeyBvcGFjaXR5OiAwIH0sXG4gICAgbG9hZFByb2dyZXNzSW5kaWNhdG9yOiB7IG9wYWNpdHk6IDAsIGFsaWduOiBnZXRMb2FkSW5kaWNhdG9yQWxpZ25tZW50IH0sXG4gICAgcHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYWxpZ246IGdldFByb2Nlc3NJbmRpY2F0b3JBbGlnbm1lbnRcbiAgICB9LFxuICAgIHByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvcjogeyBvcGFjaXR5OiAwLCBzY2FsZVg6IDAuNzUsIHNjYWxlWTogMC43NSB9LFxuICAgIGluZm86IHsgdHJhbnNsYXRlWDogMCwgdHJhbnNsYXRlWTogMCwgb3BhY2l0eTogMCB9LFxuICAgIHN0YXR1czogeyB0cmFuc2xhdGVYOiAwLCB0cmFuc2xhdGVZOiAwLCBvcGFjaXR5OiAwIH1cbiAgfTtcblxuICB2YXIgSWRsZVN0eWxlID0ge1xuICAgIGJ1dHRvblJlbW92ZUl0ZW06IHsgb3BhY2l0eTogMSB9LFxuICAgIGJ1dHRvblByb2Nlc3NJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICBpbmZvOiB7IHRyYW5zbGF0ZVg6IGNhbGN1bGF0ZUZpbGVJbmZvT2Zmc2V0IH0sXG4gICAgc3RhdHVzOiB7IHRyYW5zbGF0ZVg6IGNhbGN1bGF0ZUZpbGVJbmZvT2Zmc2V0IH1cbiAgfTtcblxuICB2YXIgUHJvY2Vzc2luZ1N0eWxlID0ge1xuICAgIGJ1dHRvbkFib3J0SXRlbVByb2Nlc3Npbmc6IHsgb3BhY2l0eTogMSB9LFxuICAgIHByb2Nlc3NQcm9ncmVzc0luZGljYXRvcjogeyBvcGFjaXR5OiAxIH0sXG4gICAgc3RhdHVzOiB7IG9wYWNpdHk6IDEgfVxuICB9O1xuXG4gIHZhciBTdHlsZU1hcCA9IHtcbiAgICBESURfVEhST1dfSVRFTV9JTlZBTElEOiB7XG4gICAgICBidXR0b25SZW1vdmVJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgdHJhbnNsYXRlWDogY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQgfSxcbiAgICAgIHN0YXR1czogeyB0cmFuc2xhdGVYOiBjYWxjdWxhdGVGaWxlSW5mb09mZnNldCwgb3BhY2l0eTogMSB9XG4gICAgfSxcblxuICAgIERJRF9TVEFSVF9JVEVNX0xPQUQ6IHtcbiAgICAgIGJ1dHRvbkFib3J0SXRlbUxvYWQ6IHsgb3BhY2l0eTogMSB9LFxuICAgICAgbG9hZFByb2dyZXNzSW5kaWNhdG9yOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIHN0YXR1czogeyBvcGFjaXR5OiAxIH1cbiAgICB9LFxuXG4gICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjoge1xuICAgICAgYnV0dG9uUmV0cnlJdGVtTG9hZDogeyBvcGFjaXR5OiAxIH0sXG4gICAgICBidXR0b25SZW1vdmVJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgdHJhbnNsYXRlWDogY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQgfSxcbiAgICAgIHN0YXR1czogeyBvcGFjaXR5OiAxIH1cbiAgICB9LFxuXG4gICAgRElEX1NUQVJUX0lURU1fUkVNT1ZFOiB7XG4gICAgICBwcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3I6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYWxpZ246IGdldFJlbW92ZUluZGljYXRvckFsaWdtZW50XG4gICAgICB9LFxuICAgICAgaW5mbzogeyB0cmFuc2xhdGVYOiBjYWxjdWxhdGVGaWxlSW5mb09mZnNldCB9LFxuICAgICAgc3RhdHVzOiB7IG9wYWNpdHk6IDAgfVxuICAgIH0sXG5cbiAgICBESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1I6IHtcbiAgICAgIHByb2Nlc3NQcm9ncmVzc0luZGljYXRvcjoge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBhbGlnbjogZ2V0UmVtb3ZlSW5kaWNhdG9yQWxpZ21lbnRcbiAgICAgIH0sXG4gICAgICBidXR0b25SZW1vdmVJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgdHJhbnNsYXRlWDogY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQgfSxcbiAgICAgIHN0YXR1czogeyBvcGFjaXR5OiAxLCB0cmFuc2xhdGVYOiBjYWxjdWxhdGVGaWxlSW5mb09mZnNldCB9XG4gICAgfSxcblxuICAgIERJRF9MT0FEX0lURU06IElkbGVTdHlsZSxcbiAgICBESURfTE9BRF9MT0NBTF9JVEVNOiB7XG4gICAgICBidXR0b25SZW1vdmVJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgdHJhbnNsYXRlWDogY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQgfSxcbiAgICAgIHN0YXR1czogeyB0cmFuc2xhdGVYOiBjYWxjdWxhdGVGaWxlSW5mb09mZnNldCB9XG4gICAgfSxcblxuICAgIERJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkc6IFByb2Nlc3NpbmdTdHlsZSxcbiAgICBESURfUkVRVUVTVF9JVEVNX1BST0NFU1NJTkc6IFByb2Nlc3NpbmdTdHlsZSxcbiAgICBESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTUzogUHJvY2Vzc2luZ1N0eWxlLFxuICAgIERJRF9DT01QTEVURV9JVEVNX1BST0NFU1NJTkc6IHtcbiAgICAgIGJ1dHRvblJldmVydEl0ZW1Qcm9jZXNzaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgb3BhY2l0eTogMSB9LFxuICAgICAgc3RhdHVzOiB7IG9wYWNpdHk6IDEgfVxuICAgIH0sXG5cbiAgICBESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOiB7XG4gICAgICBidXR0b25SZW1vdmVJdGVtOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGJ1dHRvblJldHJ5SXRlbVByb2Nlc3Npbmc6IHsgb3BhY2l0eTogMSB9LFxuICAgICAgc3RhdHVzOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgdHJhbnNsYXRlWDogY2FsY3VsYXRlRmlsZUluZm9PZmZzZXQgfVxuICAgIH0sXG5cbiAgICBESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX1JFVkVSVF9FUlJPUjoge1xuICAgICAgYnV0dG9uUmV2ZXJ0SXRlbVByb2Nlc3Npbmc6IHsgb3BhY2l0eTogMSB9LFxuICAgICAgc3RhdHVzOiB7IG9wYWNpdHk6IDEgfSxcbiAgICAgIGluZm86IHsgb3BhY2l0eTogMSB9XG4gICAgfSxcblxuICAgIERJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkc6IHtcbiAgICAgIGJ1dHRvblJlbW92ZUl0ZW06IHsgb3BhY2l0eTogMSB9LFxuICAgICAgYnV0dG9uUHJvY2Vzc0l0ZW06IHsgb3BhY2l0eTogMSB9LFxuICAgICAgaW5mbzogeyB0cmFuc2xhdGVYOiBjYWxjdWxhdGVGaWxlSW5mb09mZnNldCB9LFxuICAgICAgc3RhdHVzOiB7IG9wYWNpdHk6IDEgfVxuICAgIH0sXG5cbiAgICBESURfUkVWRVJUX0lURU1fUFJPQ0VTU0lORzogSWRsZVN0eWxlXG4gIH07XG5cbiAgLy8gY29tcGxldGUgaW5kaWNhdG9yIHZpZXdcbiAgdmFyIHByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvclZpZXcgPSBjcmVhdGVWaWV3KHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYucm9vdDtcbiAgICAgIHJvb3QuZWxlbWVudC5pbm5lckhUTUwgPSByb290LnF1ZXJ5KCdHRVRfSUNPTl9ET05FJyk7XG4gICAgfSxcbiAgICBuYW1lOiAncHJvY2Vzc2luZy1jb21wbGV0ZS1pbmRpY2F0b3InLFxuICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgbWl4aW5zOiB7XG4gICAgICBzdHlsZXM6IFsnc2NhbGVYJywgJ3NjYWxlWScsICdvcGFjaXR5J10sXG4gICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIHNjYWxlWDogJ3NwcmluZycsXG4gICAgICAgIHNjYWxlWTogJ3NwcmluZycsXG4gICAgICAgIG9wYWNpdHk6IHsgdHlwZTogJ3R3ZWVuJywgZHVyYXRpb246IDI1MCB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZmlsZSB2aWV3XG4gICAqL1xuICB2YXIgY3JlYXRlJDQgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWYyLnByb3BzO1xuICAgIHZhciBpZCA9IHByb3BzLmlkO1xuXG4gICAgLy8gYWxsb3cgcmV2ZXJ0aW5nIHVwbG9hZFxuICAgIHZhciBhbGxvd1JldmVydCA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19SRVZFUlQnKTtcblxuICAgIC8vIGFsbG93IHJlbW92ZSBmaWxlXG4gICAgdmFyIGFsbG93UmVtb3ZlID0gcm9vdC5xdWVyeSgnR0VUX0FMTE9XX1JFTU9WRScpO1xuXG4gICAgLy8gYWxsb3cgcHJvY2Vzc2luZyB1cGxvYWRcbiAgICB2YXIgYWxsb3dQcm9jZXNzID0gcm9vdC5xdWVyeSgnR0VUX0FMTE9XX1BST0NFU1MnKTtcblxuICAgIC8vIGlzIGluc3RhbnQgdXBsb2FkaW5nLCBuZWVkIHRoaXMgdG8gZGV0ZXJtaW5lIHRoZSBpY29uIG9mIHRoZSB1bmRvIGJ1dHRvblxuICAgIHZhciBpbnN0YW50VXBsb2FkID0gcm9vdC5xdWVyeSgnR0VUX0lOU1RBTlRfVVBMT0FEJyk7XG5cbiAgICAvLyBpcyBhc3luYyBzZXQgdXBcbiAgICB2YXIgaXNBc3luYyA9IHJvb3QucXVlcnkoJ0lTX0FTWU5DJyk7XG5cbiAgICAvLyBzaG91bGQgYWxpZ24gcmVtb3ZlIGl0ZW0gYnV0dG9uc1xuICAgIHZhciBhbGlnblJlbW92ZUl0ZW1CdXR0b24gPSByb290LnF1ZXJ5KFxuICAgICAgJ0dFVF9TVFlMRV9CVVRUT05fUkVNT1ZFX0lURU1fQUxJR04nXG4gICAgKTtcblxuICAgIC8vIGVuYWJsZWQgYnV0dG9ucyBhcnJheVxuICAgIHZhciBidXR0b25GaWx0ZXI7XG4gICAgaWYgKGlzQXN5bmMpIHtcbiAgICAgIGlmIChhbGxvd1Byb2Nlc3MgJiYgIWFsbG93UmV2ZXJ0KSB7XG4gICAgICAgIC8vIG9ubHkgcmVtb3ZlIHJldmVydCBidXR0b25cbiAgICAgICAgYnV0dG9uRmlsdGVyID0gZnVuY3Rpb24gYnV0dG9uRmlsdGVyKGtleSkge1xuICAgICAgICAgIHJldHVybiAhL1JldmVydEl0ZW1Qcm9jZXNzaW5nLy50ZXN0KGtleSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFhbGxvd1Byb2Nlc3MgJiYgYWxsb3dSZXZlcnQpIHtcbiAgICAgICAgLy8gb25seSByZW1vdmUgcHJvY2VzcyBidXR0b25cbiAgICAgICAgYnV0dG9uRmlsdGVyID0gZnVuY3Rpb24gYnV0dG9uRmlsdGVyKGtleSkge1xuICAgICAgICAgIHJldHVybiAhL1Byb2Nlc3NJdGVtfFJldHJ5SXRlbVByb2Nlc3Npbmd8QWJvcnRJdGVtUHJvY2Vzc2luZy8udGVzdChcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKCFhbGxvd1Byb2Nlc3MgJiYgIWFsbG93UmV2ZXJ0KSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbGwgcHJvY2VzcyBidXR0b25zXG4gICAgICAgIGJ1dHRvbkZpbHRlciA9IGZ1bmN0aW9uIGJ1dHRvbkZpbHRlcihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gIS9Qcm9jZXNzLy50ZXN0KGtleSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vIHByb2Nlc3MgY29udHJvbHMgYXZhaWxhYmxlXG4gICAgICBidXR0b25GaWx0ZXIgPSBmdW5jdGlvbiBidXR0b25GaWx0ZXIoa2V5KSB7XG4gICAgICAgIHJldHVybiAhL1Byb2Nlc3MvLnRlc3Qoa2V5KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGVuYWJsZWRCdXR0b25zID0gYnV0dG9uRmlsdGVyXG4gICAgICA/IEJ1dHRvbktleXMuZmlsdGVyKGJ1dHRvbkZpbHRlcilcbiAgICAgIDogQnV0dG9uS2V5cy5jb25jYXQoKTtcblxuICAgIC8vIHVwZGF0ZSBpY29uIGFuZCBsYWJlbCBmb3IgcmV2ZXJ0IGJ1dHRvbiB3aGVuIGluc3RhbnQgdXBsb2FkaW5nXG4gICAgaWYgKGluc3RhbnRVcGxvYWQgJiYgYWxsb3dSZXZlcnQpIHtcbiAgICAgIEJ1dHRvbnNbJ1JldmVydEl0ZW1Qcm9jZXNzaW5nJ10ubGFiZWwgPSAnR0VUX0xBQkVMX0JVVFRPTl9SRU1PVkVfSVRFTSc7XG4gICAgICBCdXR0b25zWydSZXZlcnRJdGVtUHJvY2Vzc2luZyddLmljb24gPSAnR0VUX0lDT05fUkVNT1ZFJztcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgbGFzdCBidXR0b24gKHJldmVydCkgaWYgbm90IGFsbG93ZWRcbiAgICBpZiAoaXNBc3luYyAmJiAhYWxsb3dSZXZlcnQpIHtcbiAgICAgIHZhciBtYXAgPSBTdHlsZU1hcFsnRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORyddO1xuICAgICAgbWFwLmluZm8udHJhbnNsYXRlWCA9IGNhbGN1bGF0ZUZpbGVIb3Jpem9udGFsQ2VudGVyT2Zmc2V0O1xuICAgICAgbWFwLmluZm8udHJhbnNsYXRlWSA9IGNhbGN1bGF0ZUZpbGVWZXJ0aWNhbENlbnRlck9mZnNldDtcbiAgICAgIG1hcC5zdGF0dXMudHJhbnNsYXRlWSA9IGNhbGN1bGF0ZUZpbGVWZXJ0aWNhbENlbnRlck9mZnNldDtcbiAgICAgIG1hcC5wcm9jZXNzaW5nQ29tcGxldGVJbmRpY2F0b3IgPSB7IG9wYWNpdHk6IDEsIHNjYWxlWDogMSwgc2NhbGVZOiAxIH07XG4gICAgfVxuXG4gICAgLy8gc2hvdWxkIGFsaWduIGNlbnRlclxuICAgIGlmIChpc0FzeW5jICYmICFhbGxvd1Byb2Nlc3MpIHtcbiAgICAgIFtcbiAgICAgICAgJ0RJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkcnLFxuICAgICAgICAnRElEX1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HJyxcbiAgICAgICAgJ0RJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTJyxcbiAgICAgICAgJ0RJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfRVJST1InXG4gICAgICBdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIFN0eWxlTWFwW2tleV0uc3RhdHVzLnRyYW5zbGF0ZVkgPSBjYWxjdWxhdGVGaWxlVmVydGljYWxDZW50ZXJPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIFN0eWxlTWFwW1xuICAgICAgICAnRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUidcbiAgICAgIF0uc3RhdHVzLnRyYW5zbGF0ZVggPSBjYWxjdWxhdGVCdXR0b25XaWR0aDtcbiAgICB9XG5cbiAgICAvLyBtb3ZlIHJlbW92ZSBidXR0b24gdG8gcmlnaHRcbiAgICBpZiAoYWxpZ25SZW1vdmVJdGVtQnV0dG9uICYmIGFsbG93UmV2ZXJ0KSB7XG4gICAgICBCdXR0b25zWydSZXZlcnRJdGVtUHJvY2Vzc2luZyddLmFsaWduID0gJ0JVVFRPTl9SRU1PVkVfSVRFTV9QT1NJVElPTic7XG4gICAgICB2YXIgX21hcCA9IFN0eWxlTWFwWydESURfQ09NUExFVEVfSVRFTV9QUk9DRVNTSU5HJ107XG4gICAgICBfbWFwLmluZm8udHJhbnNsYXRlWCA9IGNhbGN1bGF0ZUZpbGVJbmZvT2Zmc2V0O1xuICAgICAgX21hcC5zdGF0dXMudHJhbnNsYXRlWSA9IGNhbGN1bGF0ZUZpbGVWZXJ0aWNhbENlbnRlck9mZnNldDtcbiAgICAgIF9tYXAucHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yID0geyBvcGFjaXR5OiAxLCBzY2FsZVg6IDEsIHNjYWxlWTogMSB9O1xuICAgIH1cblxuICAgIGlmICghYWxsb3dSZW1vdmUpIHtcbiAgICAgIEJ1dHRvbnNbJ1JlbW92ZUl0ZW0nXS5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHRoZSBidXR0b24gdmlld3NcbiAgICBmb3JpbihCdXR0b25zLCBmdW5jdGlvbihrZXksIGRlZmluaXRpb24pIHtcbiAgICAgIC8vIGNyZWF0ZSBidXR0b25cbiAgICAgIHZhciBidXR0b25WaWV3ID0gcm9vdC5jcmVhdGVDaGlsZFZpZXcoZmlsZUFjdGlvbkJ1dHRvbiwge1xuICAgICAgICBsYWJlbDogcm9vdC5xdWVyeShkZWZpbml0aW9uLmxhYmVsKSxcbiAgICAgICAgaWNvbjogcm9vdC5xdWVyeShkZWZpbml0aW9uLmljb24pLFxuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9KTtcblxuICAgICAgLy8gc2hvdWxkIGJlIGFwcGVuZGVkP1xuICAgICAgaWYgKGVuYWJsZWRCdXR0b25zLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZFZpZXcoYnV0dG9uVmlldyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHRvZ2dsZVxuICAgICAgaWYgKGRlZmluaXRpb24uZGlzYWJsZWQpIHtcbiAgICAgICAgYnV0dG9uVmlldy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgYnV0dG9uVmlldy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJ2hpZGRlbicpO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgcG9zaXRpb24gYXR0cmlidXRlXG4gICAgICBidXR0b25WaWV3LmVsZW1lbnQuZGF0YXNldC5hbGlnbiA9IHJvb3QucXVlcnkoXG4gICAgICAgICdHRVRfU1RZTEVfJyArIGRlZmluaXRpb24uYWxpZ25cbiAgICAgICk7XG5cbiAgICAgIC8vIGFkZCBjbGFzc1xuICAgICAgYnV0dG9uVmlldy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoZGVmaW5pdGlvbi5jbGFzc05hbWUpO1xuXG4gICAgICAvLyBoYW5kbGUgaW50ZXJhY3Rpb25zXG4gICAgICBidXR0b25WaWV3Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKGRlZmluaXRpb24uZGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgcm9vdC5kaXNwYXRjaChkZWZpbml0aW9uLmFjdGlvbiwgeyBxdWVyeTogaWQgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gc2V0IHJlZmVyZW5jZVxuICAgICAgcm9vdC5yZWZbJ2J1dHRvbicgKyBrZXldID0gYnV0dG9uVmlldztcbiAgICB9KTtcblxuICAgIC8vIGNoZWNrbWFya1xuICAgIHJvb3QucmVmLnByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvciA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcocHJvY2Vzc2luZ0NvbXBsZXRlSW5kaWNhdG9yVmlldylcbiAgICApO1xuICAgIHJvb3QucmVmLnByb2Nlc3NpbmdDb21wbGV0ZUluZGljYXRvci5lbGVtZW50LmRhdGFzZXQuYWxpZ24gPSByb290LnF1ZXJ5KFxuICAgICAgJ0dFVF9TVFlMRV9CVVRUT05fUFJPQ0VTU19JVEVNX1BPU0lUSU9OJ1xuICAgICk7XG5cbiAgICAvLyBjcmVhdGUgZmlsZSBpbmZvIHZpZXdcbiAgICByb290LnJlZi5pbmZvID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhmaWxlSW5mbywgeyBpZDogaWQgfSlcbiAgICApO1xuXG4gICAgLy8gY3JlYXRlIGZpbGUgc3RhdHVzIHZpZXdcbiAgICByb290LnJlZi5zdGF0dXMgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KGZpbGVTdGF0dXMsIHsgaWQ6IGlkIH0pXG4gICAgKTtcblxuICAgIC8vIGFkZCBwcm9ncmVzcyBpbmRpY2F0b3JzXG4gICAgdmFyIGxvYWRJbmRpY2F0b3JWaWV3ID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhwcm9ncmVzc0luZGljYXRvciwge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBhbGlnbjogcm9vdC5xdWVyeSgnR0VUX1NUWUxFX0xPQURfSU5ESUNBVE9SX1BPU0lUSU9OJylcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGxvYWRJbmRpY2F0b3JWaWV3LmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmlsZXBvbmQtLWxvYWQtaW5kaWNhdG9yJyk7XG4gICAgcm9vdC5yZWYubG9hZFByb2dyZXNzSW5kaWNhdG9yID0gbG9hZEluZGljYXRvclZpZXc7XG5cbiAgICB2YXIgcHJvZ3Jlc3NJbmRpY2F0b3JWaWV3ID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhwcm9ncmVzc0luZGljYXRvciwge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBhbGlnbjogcm9vdC5xdWVyeSgnR0VUX1NUWUxFX1BST0dSRVNTX0lORElDQVRPUl9QT1NJVElPTicpXG4gICAgICB9KVxuICAgICk7XG5cbiAgICBwcm9ncmVzc0luZGljYXRvclZpZXcuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmaWxlcG9uZC0tcHJvY2Vzcy1pbmRpY2F0b3InKTtcbiAgICByb290LnJlZi5wcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3IgPSBwcm9ncmVzc0luZGljYXRvclZpZXc7XG5cbiAgICAvLyBjdXJyZW50IGFjdGl2ZSBzdHlsZXNcbiAgICByb290LnJlZi5hY3RpdmVTdHlsZXMgPSBbXTtcbiAgfTtcblxuICB2YXIgd3JpdGUkMiA9IGZ1bmN0aW9uIHdyaXRlKF9yZWYzKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgYWN0aW9ucyA9IF9yZWYzLmFjdGlvbnMsXG4gICAgICBwcm9wcyA9IF9yZWYzLnByb3BzO1xuXG4gICAgLy8gcm91dGUgYWN0aW9uc1xuICAgIHJvdXRlKHsgcm9vdDogcm9vdCwgYWN0aW9uczogYWN0aW9ucywgcHJvcHM6IHByb3BzIH0pO1xuXG4gICAgLy8gc2VsZWN0IGxhc3Qgc3RhdGUgY2hhbmdlIGFjdGlvblxuICAgIHZhciBhY3Rpb24gPSBhY3Rpb25zXG4gICAgICAuY29uY2F0KClcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiAvXkRJRF8vLnRlc3QoYWN0aW9uLnR5cGUpO1xuICAgICAgfSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5maW5kKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gU3R5bGVNYXBbYWN0aW9uLnR5cGVdO1xuICAgICAgfSk7XG5cbiAgICAvLyBhIG5ldyBhY3Rpb24gaGFwcGVuZWQsIGxldCdzIGdldCB0aGUgbWF0Y2hpbmcgc3R5bGVzXG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgLy8gZGVmaW5lIG5ldyBhY3RpdmUgc3R5bGVzXG4gICAgICByb290LnJlZi5hY3RpdmVTdHlsZXMgPSBbXTtcblxuICAgICAgdmFyIHN0eWxlc1RvQXBwbHkgPSBTdHlsZU1hcFthY3Rpb24udHlwZV07XG4gICAgICBmb3JpbihEZWZhdWx0U3R5bGUsIGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRTdHlsZXMpIHtcbiAgICAgICAgLy8gZ2V0IHJlZmVyZW5jZSB0byBjb250cm9sXG4gICAgICAgIHZhciBjb250cm9sID0gcm9vdC5yZWZbbmFtZV07XG5cbiAgICAgICAgLy8gbG9vcCBvdmVyIGFsbCBzdHlsZXMgZm9yIHRoaXMgY29udHJvbFxuICAgICAgICBmb3JpbihkZWZhdWx0U3R5bGVzLCBmdW5jdGlvbihrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9XG4gICAgICAgICAgICBzdHlsZXNUb0FwcGx5W25hbWVdICYmXG4gICAgICAgICAgICB0eXBlb2Ygc3R5bGVzVG9BcHBseVtuYW1lXVtrZXldICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICA/IHN0eWxlc1RvQXBwbHlbbmFtZV1ba2V5XVxuICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICByb290LnJlZi5hY3RpdmVTdHlsZXMucHVzaCh7XG4gICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhY3RpdmUgc3R5bGVzIHRvIGVsZW1lbnRcbiAgICByb290LnJlZi5hY3RpdmVTdHlsZXMuZm9yRWFjaChmdW5jdGlvbihfcmVmNCkge1xuICAgICAgdmFyIGNvbnRyb2wgPSBfcmVmNC5jb250cm9sLFxuICAgICAgICBrZXkgPSBfcmVmNC5rZXksXG4gICAgICAgIHZhbHVlID0gX3JlZjQudmFsdWU7XG4gICAgICBjb250cm9sW2tleV0gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZShyb290KSA6IHZhbHVlO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByb3V0ZSA9IGNyZWF0ZVJvdXRlKHtcbiAgICBESURfU0VUX0xBQkVMX0JVVFRPTl9BQk9SVF9JVEVNX1BST0NFU1NJTkc6IGZ1bmN0aW9uIERJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fUFJPQ0VTU0lORyhcbiAgICAgIF9yZWY1XG4gICAgKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3QsXG4gICAgICAgIGFjdGlvbiA9IF9yZWY1LmFjdGlvbjtcbiAgICAgIHJvb3QucmVmLmJ1dHRvbkFib3J0SXRlbVByb2Nlc3NpbmcubGFiZWwgPSBhY3Rpb24udmFsdWU7XG4gICAgfSxcbiAgICBESURfU0VUX0xBQkVMX0JVVFRPTl9BQk9SVF9JVEVNX0xPQUQ6IGZ1bmN0aW9uIERJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fTE9BRChcbiAgICAgIF9yZWY2XG4gICAgKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3QsXG4gICAgICAgIGFjdGlvbiA9IF9yZWY2LmFjdGlvbjtcbiAgICAgIHJvb3QucmVmLmJ1dHRvbkFib3J0SXRlbUxvYWQubGFiZWwgPSBhY3Rpb24udmFsdWU7XG4gICAgfSxcbiAgICBESURfU0VUX0xBQkVMX0JVVFRPTl9BQk9SVF9JVEVNX1JFTU9WQUw6IGZ1bmN0aW9uIERJRF9TRVRfTEFCRUxfQlVUVE9OX0FCT1JUX0lURU1fUkVNT1ZBTChcbiAgICAgIF9yZWY3XG4gICAgKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY3LnJvb3QsXG4gICAgICAgIGFjdGlvbiA9IF9yZWY3LmFjdGlvbjtcbiAgICAgIHJvb3QucmVmLmJ1dHRvbkFib3J0SXRlbVJlbW92YWwubGFiZWwgPSBhY3Rpb24udmFsdWU7XG4gICAgfSxcbiAgICBESURfUkVRVUVTVF9JVEVNX1BST0NFU1NJTkc6IGZ1bmN0aW9uIERJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORyhfcmVmOCkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmOC5yb290O1xuICAgICAgcm9vdC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnNwaW4gPSB0cnVlO1xuICAgICAgcm9vdC5yZWYucHJvY2Vzc1Byb2dyZXNzSW5kaWNhdG9yLnByb2dyZXNzID0gMDtcbiAgICB9LFxuICAgIERJRF9TVEFSVF9JVEVNX0xPQUQ6IGZ1bmN0aW9uIERJRF9TVEFSVF9JVEVNX0xPQUQoX3JlZjkpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjkucm9vdDtcbiAgICAgIHJvb3QucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvci5zcGluID0gdHJ1ZTtcbiAgICAgIHJvb3QucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvci5wcm9ncmVzcyA9IDA7XG4gICAgfSxcbiAgICBESURfU1RBUlRfSVRFTV9SRU1PVkU6IGZ1bmN0aW9uIERJRF9TVEFSVF9JVEVNX1JFTU9WRShfcmVmMTApIHtcbiAgICAgIHZhciByb290ID0gX3JlZjEwLnJvb3Q7XG4gICAgICByb290LnJlZi5wcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3Iuc3BpbiA9IHRydWU7XG4gICAgICByb290LnJlZi5wcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3IucHJvZ3Jlc3MgPSAwO1xuICAgIH0sXG4gICAgRElEX1VQREFURV9JVEVNX0xPQURfUFJPR1JFU1M6IGZ1bmN0aW9uIERJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTKFxuICAgICAgX3JlZjExXG4gICAgKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYxMS5yb290LFxuICAgICAgICBhY3Rpb24gPSBfcmVmMTEuYWN0aW9uO1xuICAgICAgcm9vdC5yZWYubG9hZFByb2dyZXNzSW5kaWNhdG9yLnNwaW4gPSBmYWxzZTtcbiAgICAgIHJvb3QucmVmLmxvYWRQcm9ncmVzc0luZGljYXRvci5wcm9ncmVzcyA9IGFjdGlvbi5wcm9ncmVzcztcbiAgICB9LFxuICAgIERJRF9VUERBVEVfSVRFTV9QUk9DRVNTX1BST0dSRVNTOiBmdW5jdGlvbiBESURfVVBEQVRFX0lURU1fUFJPQ0VTU19QUk9HUkVTUyhcbiAgICAgIF9yZWYxMlxuICAgICkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmMTIucm9vdCxcbiAgICAgICAgYWN0aW9uID0gX3JlZjEyLmFjdGlvbjtcbiAgICAgIHJvb3QucmVmLnByb2Nlc3NQcm9ncmVzc0luZGljYXRvci5zcGluID0gZmFsc2U7XG4gICAgICByb290LnJlZi5wcm9jZXNzUHJvZ3Jlc3NJbmRpY2F0b3IucHJvZ3Jlc3MgPSBhY3Rpb24ucHJvZ3Jlc3M7XG4gICAgfVxuICB9KTtcblxuICB2YXIgZmlsZSA9IGNyZWF0ZVZpZXcoe1xuICAgIGNyZWF0ZTogY3JlYXRlJDQsXG4gICAgd3JpdGU6IHdyaXRlJDIsXG4gICAgZGlkQ3JlYXRlVmlldzogZnVuY3Rpb24gZGlkQ3JlYXRlVmlldyhyb290KSB7XG4gICAgICBhcHBseUZpbHRlcnMoJ0NSRUFURV9WSUVXJywgT2JqZWN0LmFzc2lnbih7fSwgcm9vdCwgeyB2aWV3OiByb290IH0pKTtcbiAgICB9LFxuICAgIG5hbWU6ICdmaWxlJ1xuICB9KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZmlsZSB2aWV3XG4gICAqL1xuICB2YXIgY3JlYXRlJDUgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuXG4gICAgLy8gZmlsZW5hbWVcbiAgICByb290LnJlZi5maWxlTmFtZSA9IGNyZWF0ZUVsZW1lbnQkMSgnbGVnZW5kJyk7XG4gICAgcm9vdC5hcHBlbmRDaGlsZChyb290LnJlZi5maWxlTmFtZSk7XG5cbiAgICAvLyBmaWxlIGFwcGVuZGVkXG4gICAgcm9vdC5yZWYuZmlsZSA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcoZmlsZSwgeyBpZDogcHJvcHMuaWQgfSlcbiAgICApO1xuXG4gICAgLy8gZGF0YSBoYXMgbW92ZWQgdG8gZGF0YS5qc1xuICAgIHJvb3QucmVmLmRhdGEgPSBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogRGF0YSBzdG9yYWdlXG4gICAqL1xuICB2YXIgZGlkTG9hZEl0ZW0gPSBmdW5jdGlvbiBkaWRMb2FkSXRlbShfcmVmMikge1xuICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZjIucHJvcHM7XG4gICAgLy8gdXBkYXRlcyB0aGUgbGVnZW5kIG9mIHRoZSBmaWVsZHNldCBzbyBzY3JlZW5yZWFkZXJzIGNhbiBiZXR0ZXIgZ3JvdXAgYnV0dG9uc1xuICAgIHRleHQoXG4gICAgICByb290LnJlZi5maWxlTmFtZSxcbiAgICAgIGZvcm1hdEZpbGVuYW1lKHJvb3QucXVlcnkoJ0dFVF9JVEVNX05BTUUnLCBwcm9wcy5pZCkpXG4gICAgKTtcbiAgfTtcblxuICB2YXIgZmlsZVdyYXBwZXIgPSBjcmVhdGVWaWV3KHtcbiAgICBjcmVhdGU6IGNyZWF0ZSQ1LFxuICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgd3JpdGU6IGNyZWF0ZVJvdXRlKHtcbiAgICAgIERJRF9MT0FEX0lURU06IGRpZExvYWRJdGVtXG4gICAgfSksXG5cbiAgICBkaWRDcmVhdGVWaWV3OiBmdW5jdGlvbiBkaWRDcmVhdGVWaWV3KHJvb3QpIHtcbiAgICAgIGFwcGx5RmlsdGVycygnQ1JFQVRFX1ZJRVcnLCBPYmplY3QuYXNzaWduKHt9LCByb290LCB7IHZpZXc6IHJvb3QgfSkpO1xuICAgIH0sXG4gICAgdGFnOiAnZmllbGRzZXQnLFxuICAgIG5hbWU6ICdmaWxlLXdyYXBwZXInXG4gIH0pO1xuXG4gIHZhciBQQU5FTF9TUFJJTkdfUFJPUFMgPSB7IHR5cGU6ICdzcHJpbmcnLCBkYW1waW5nOiAwLjYsIG1hc3M6IDcgfTtcblxuICB2YXIgY3JlYXRlJDYgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuICAgIFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3RvcCdcbiAgICAgIH0sXG5cbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2NlbnRlcicsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgdHJhbnNsYXRlWTogbnVsbCxcbiAgICAgICAgICBzY2FsZVk6IG51bGxcbiAgICAgICAgfSxcblxuICAgICAgICBtaXhpbnM6IHtcbiAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBzY2FsZVk6IFBBTkVMX1NQUklOR19QUk9QU1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBzdHlsZXM6IFsndHJhbnNsYXRlWScsICdzY2FsZVknXVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdib3R0b20nLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRyYW5zbGF0ZVk6IG51bGxcbiAgICAgICAgfSxcblxuICAgICAgICBtaXhpbnM6IHtcbiAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICB0cmFuc2xhdGVZOiBQQU5FTF9TUFJJTkdfUFJPUFNcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc3R5bGVzOiBbJ3RyYW5zbGF0ZVknXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgIGNyZWF0ZVNlY3Rpb24ocm9vdCwgc2VjdGlvbiwgcHJvcHMubmFtZSk7XG4gICAgfSk7XG5cbiAgICByb290LmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmlsZXBvbmQtLScgKyBwcm9wcy5uYW1lKTtcblxuICAgIHJvb3QucmVmLnNjYWxhYmxlID0gbnVsbDtcbiAgfTtcblxuICB2YXIgY3JlYXRlU2VjdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZVNlY3Rpb24ocm9vdCwgc2VjdGlvbiwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIHZpZXdDb25zdHJ1Y3RvciA9IGNyZWF0ZVZpZXcoe1xuICAgICAgbmFtZTogJ3BhbmVsLScgKyBzZWN0aW9uLm5hbWUgKyAnIGZpbGVwb25kLS0nICsgY2xhc3NOYW1lLFxuICAgICAgbWl4aW5zOiBzZWN0aW9uLm1peGlucyxcbiAgICAgIGlnbm9yZVJlY3RVcGRhdGU6IHRydWVcbiAgICB9KTtcblxuICAgIHZhciB2aWV3ID0gcm9vdC5jcmVhdGVDaGlsZFZpZXcodmlld0NvbnN0cnVjdG9yLCBzZWN0aW9uLnByb3BzKTtcblxuICAgIHJvb3QucmVmW3NlY3Rpb24ubmFtZV0gPSByb290LmFwcGVuZENoaWxkVmlldyh2aWV3KTtcbiAgfTtcblxuICB2YXIgd3JpdGUkMyA9IGZ1bmN0aW9uIHdyaXRlKF9yZWYyKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmMi5wcm9wcztcblxuICAgIC8vIHVwZGF0ZSBzY2FsYWJsZSBzdGF0ZVxuICAgIGlmIChyb290LnJlZi5zY2FsYWJsZSA9PT0gbnVsbCB8fCBwcm9wcy5zY2FsYWJsZSAhPT0gcm9vdC5yZWYuc2NhbGFibGUpIHtcbiAgICAgIHJvb3QucmVmLnNjYWxhYmxlID0gaXNCb29sZWFuKHByb3BzLnNjYWxhYmxlKSA/IHByb3BzLnNjYWxhYmxlIDogdHJ1ZTtcbiAgICAgIHJvb3QuZWxlbWVudC5kYXRhc2V0LnNjYWxhYmxlID0gcm9vdC5yZWYuc2NhbGFibGU7XG4gICAgfVxuXG4gICAgLy8gbm8gaGVpZ2h0LCBjYW4ndCBzZXRcbiAgICBpZiAoIXByb3BzLmhlaWdodCkgcmV0dXJuO1xuXG4gICAgLy8gZ2V0IGNoaWxkIHJlY3RzXG4gICAgdmFyIHRvcFJlY3QgPSByb290LnJlZi50b3AucmVjdC5lbGVtZW50O1xuICAgIHZhciBib3R0b21SZWN0ID0gcm9vdC5yZWYuYm90dG9tLnJlY3QuZWxlbWVudDtcblxuICAgIC8vIG1ha2Ugc3VyZSBoZWlnaHQgbmV2ZXIgaXMgc21hbGxlciB0aGFuIGJvdHRvbSBhbmQgdG9wIHNlY2l0b24gaGVpZ2h0cyBjb21iaW5lZCAod2lsbCBwcm9iYWJseSBuZXZlciBoYXBwZW4sIGJ1dCB3aG8ga25vd3MpXG4gICAgdmFyIGhlaWdodCA9IE1hdGgubWF4KHRvcFJlY3QuaGVpZ2h0ICsgYm90dG9tUmVjdC5oZWlnaHQsIHByb3BzLmhlaWdodCk7XG5cbiAgICAvLyBvZmZzZXQgY2VudGVyIHBhcnRcbiAgICByb290LnJlZi5jZW50ZXIudHJhbnNsYXRlWSA9IHRvcFJlY3QuaGVpZ2h0O1xuXG4gICAgLy8gc2NhbGUgY2VudGVyIHBhcnRcbiAgICAvLyB1c2UgbWF0aCBjZWlsIHRvIHByZXZlbnQgdHJhbnNwYXJlbnQgbGluZXMgYmVjYXVzZSBvZiByb3VuZGluZyBlcnJvcnNcbiAgICByb290LnJlZi5jZW50ZXIuc2NhbGVZID1cbiAgICAgIChoZWlnaHQgLSB0b3BSZWN0LmhlaWdodCAtIGJvdHRvbVJlY3QuaGVpZ2h0KSAvIDEwMDtcblxuICAgIC8vIG9mZnNldCBib3R0b20gcGFydFxuICAgIHJvb3QucmVmLmJvdHRvbS50cmFuc2xhdGVZID0gaGVpZ2h0IC0gYm90dG9tUmVjdC5oZWlnaHQ7XG4gIH07XG5cbiAgdmFyIHBhbmVsID0gY3JlYXRlVmlldyh7XG4gICAgbmFtZTogJ3BhbmVsJyxcbiAgICB3cml0ZTogd3JpdGUkMyxcbiAgICBjcmVhdGU6IGNyZWF0ZSQ2LFxuICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgbWl4aW5zOiB7XG4gICAgICBhcGlzOiBbJ2hlaWdodCcsICdzY2FsYWJsZSddXG4gICAgfVxuICB9KTtcblxuICB2YXIgY3JlYXRlRHJhZ0hlbHBlciA9IGZ1bmN0aW9uIGNyZWF0ZURyYWdIZWxwZXIoaXRlbXMpIHtcbiAgICB2YXIgaXRlbUlkcyA9IGl0ZW1zLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5pZDtcbiAgICB9KTtcbiAgICB2YXIgcHJldkluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7XG4gICAgICBzZXRJbmRleDogZnVuY3Rpb24gc2V0SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgcHJldkluZGV4ID0gaW5kZXg7XG4gICAgICB9LFxuICAgICAgZ2V0SW5kZXg6IGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgICAgICByZXR1cm4gcHJldkluZGV4O1xuICAgICAgfSxcbiAgICAgIGdldEl0ZW1JbmRleDogZnVuY3Rpb24gZ2V0SXRlbUluZGV4KGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1JZHMuaW5kZXhPZihpdGVtLmlkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBJVEVNX1RSQU5TTEFURV9TUFJJTkcgPSB7XG4gICAgdHlwZTogJ3NwcmluZycsXG4gICAgc3RpZmZuZXNzOiAwLjc1LFxuICAgIGRhbXBpbmc6IDAuNDUsXG4gICAgbWFzczogMTBcbiAgfTtcblxuICB2YXIgSVRFTV9TQ0FMRV9TUFJJTkcgPSAnc3ByaW5nJztcblxuICB2YXIgU3RhdGVNYXAgPSB7XG4gICAgRElEX1NUQVJUX0lURU1fTE9BRDogJ2J1c3knLFxuICAgIERJRF9VUERBVEVfSVRFTV9MT0FEX1BST0dSRVNTOiAnbG9hZGluZycsXG4gICAgRElEX1RIUk9XX0lURU1fSU5WQUxJRDogJ2xvYWQtaW52YWxpZCcsXG4gICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjogJ2xvYWQtZXJyb3InLFxuICAgIERJRF9MT0FEX0lURU06ICdpZGxlJyxcbiAgICBESURfVEhST1dfSVRFTV9SRU1PVkVfRVJST1I6ICdyZW1vdmUtZXJyb3InLFxuICAgIERJRF9TVEFSVF9JVEVNX1JFTU9WRTogJ2J1c3knLFxuICAgIERJRF9TVEFSVF9JVEVNX1BST0NFU1NJTkc6ICdidXN5IHByb2Nlc3NpbmcnLFxuICAgIERJRF9SRVFVRVNUX0lURU1fUFJPQ0VTU0lORzogJ2J1c3kgcHJvY2Vzc2luZycsXG4gICAgRElEX1VQREFURV9JVEVNX1BST0NFU1NfUFJPR1JFU1M6ICdwcm9jZXNzaW5nJyxcbiAgICBESURfQ09NUExFVEVfSVRFTV9QUk9DRVNTSU5HOiAncHJvY2Vzc2luZy1jb21wbGV0ZScsXG4gICAgRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjogJ3Byb2Nlc3NpbmctZXJyb3InLFxuICAgIERJRF9USFJPV19JVEVNX1BST0NFU1NJTkdfUkVWRVJUX0VSUk9SOiAncHJvY2Vzc2luZy1yZXZlcnQtZXJyb3InLFxuICAgIERJRF9BQk9SVF9JVEVNX1BST0NFU1NJTkc6ICdjYW5jZWxsZWQnLFxuICAgIERJRF9SRVZFUlRfSVRFTV9QUk9DRVNTSU5HOiAnaWRsZSdcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZmlsZSB2aWV3XG4gICAqL1xuICB2YXIgY3JlYXRlJDcgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuXG4gICAgLy8gc2VsZWN0XG4gICAgcm9vdC5yZWYuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gcm9vdC5kaXNwYXRjaCgnRElEX0FDVElWQVRFX0lURU0nLCB7IGlkOiBwcm9wcy5pZCB9KTtcbiAgICB9O1xuXG4gICAgLy8gc2V0IGlkXG4gICAgcm9vdC5lbGVtZW50LmlkID0gJ2ZpbGVwb25kLS1pdGVtLScgKyBwcm9wcy5pZDtcbiAgICByb290LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByb290LnJlZi5oYW5kbGVDbGljayk7XG5cbiAgICAvLyBmaWxlIHZpZXdcbiAgICByb290LnJlZi5jb250YWluZXIgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KGZpbGVXcmFwcGVyLCB7IGlkOiBwcm9wcy5pZCB9KVxuICAgICk7XG5cbiAgICAvLyBmaWxlIHBhbmVsXG4gICAgcm9vdC5yZWYucGFuZWwgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KHBhbmVsLCB7IG5hbWU6ICdpdGVtLXBhbmVsJyB9KVxuICAgICk7XG5cbiAgICAvLyBkZWZhdWx0IHN0YXJ0IGhlaWdodFxuICAgIHJvb3QucmVmLnBhbmVsLmhlaWdodCA9IG51bGw7XG5cbiAgICAvLyBieSBkZWZhdWx0IG5vdCBtYXJrZWQgZm9yIHJlbW92YWxcbiAgICBwcm9wcy5tYXJrZWRGb3JSZW1vdmFsID0gZmFsc2U7XG5cbiAgICAvLyBpZiBub3QgYWxsb3dlZCB0byByZW9yZGVyIGZpbGUgaXRlbXMsIGV4aXQgaGVyZVxuICAgIGlmICghcm9vdC5xdWVyeSgnR0VUX0FMTE9XX1JFT1JERVInKSkgcmV0dXJuO1xuXG4gICAgLy8gc2V0IHRvIGlkbGUgc28gc2hvd3MgZ3JhYiBjdXJzb3JcbiAgICByb290LmVsZW1lbnQuZGF0YXNldC5kcmFnU3RhdGUgPSAnaWRsZSc7XG5cbiAgICB2YXIgZ3JhYiA9IGZ1bmN0aW9uIGdyYWIoZSkge1xuICAgICAgaWYgKCFlLmlzUHJpbWFyeSkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVtb3ZlZEFjdGl2YXRlTGlzdGVuZXIgPSBmYWxzZTtcblxuICAgICAgdmFyIG9yaWdpbiA9IHtcbiAgICAgICAgeDogZS5wYWdlWCxcbiAgICAgICAgeTogZS5wYWdlWVxuICAgICAgfTtcblxuICAgICAgcHJvcHMuZHJhZ09yaWdpbiA9IHtcbiAgICAgICAgeDogcm9vdC50cmFuc2xhdGVYLFxuICAgICAgICB5OiByb290LnRyYW5zbGF0ZVlcbiAgICAgIH07XG5cbiAgICAgIHByb3BzLmRyYWdDZW50ZXIgPSB7XG4gICAgICAgIHg6IGUub2Zmc2V0WCxcbiAgICAgICAgeTogZS5vZmZzZXRZXG4gICAgICB9O1xuXG4gICAgICB2YXIgZHJhZ1N0YXRlID0gY3JlYXRlRHJhZ0hlbHBlcihyb290LnF1ZXJ5KCdHRVRfQUNUSVZFX0lURU1TJykpO1xuXG4gICAgICByb290LmRpc3BhdGNoKCdESURfR1JBQl9JVEVNJywgeyBpZDogcHJvcHMuaWQsIGRyYWdTdGF0ZTogZHJhZ1N0YXRlIH0pO1xuXG4gICAgICB2YXIgZHJhZyA9IGZ1bmN0aW9uIGRyYWcoZSkge1xuICAgICAgICBpZiAoIWUuaXNQcmltYXJ5KSByZXR1cm47XG5cbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHByb3BzLmRyYWdPZmZzZXQgPSB7XG4gICAgICAgICAgeDogZS5wYWdlWCAtIG9yaWdpbi54LFxuICAgICAgICAgIHk6IGUucGFnZVkgLSBvcmlnaW4ueVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGlmIGRyYWdnZWQgc3RvcCBsaXN0ZW5pbmcgdG8gY2xpY2tzLCB3aWxsIHJlLWFkZCB3aGVuIGRvbmUgZHJhZ2dpbmdcbiAgICAgICAgdmFyIGRpc3QgPVxuICAgICAgICAgIHByb3BzLmRyYWdPZmZzZXQueCAqIHByb3BzLmRyYWdPZmZzZXQueCArXG4gICAgICAgICAgcHJvcHMuZHJhZ09mZnNldC55ICogcHJvcHMuZHJhZ09mZnNldC55O1xuICAgICAgICBpZiAoZGlzdCA+IDE2ICYmICFyZW1vdmVkQWN0aXZhdGVMaXN0ZW5lcikge1xuICAgICAgICAgIHJlbW92ZWRBY3RpdmF0ZUxpc3RlbmVyID0gdHJ1ZTtcbiAgICAgICAgICByb290LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByb290LnJlZi5oYW5kbGVDbGljayk7XG4gICAgICAgIH1cblxuICAgICAgICByb290LmRpc3BhdGNoKCdESURfRFJBR19JVEVNJywgeyBpZDogcHJvcHMuaWQsIGRyYWdTdGF0ZTogZHJhZ1N0YXRlIH0pO1xuICAgICAgfTtcblxuICAgICAgdmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKGUpIHtcbiAgICAgICAgaWYgKCFlLmlzUHJpbWFyeSkgcmV0dXJuO1xuXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZHJhZyk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGRyb3ApO1xuXG4gICAgICAgIHByb3BzLmRyYWdPZmZzZXQgPSB7XG4gICAgICAgICAgeDogZS5wYWdlWCAtIG9yaWdpbi54LFxuICAgICAgICAgIHk6IGUucGFnZVkgLSBvcmlnaW4ueVxuICAgICAgICB9O1xuXG4gICAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9EUk9QX0lURU0nLCB7IGlkOiBwcm9wcy5pZCwgZHJhZ1N0YXRlOiBkcmFnU3RhdGUgfSk7XG5cbiAgICAgICAgLy8gc3RhcnQgbGlzdGVuaW5nIHRvIGNsaWNrcyBhZ2FpblxuICAgICAgICBpZiAocmVtb3ZlZEFjdGl2YXRlTGlzdGVuZXIpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvb3QuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJvb3QucmVmLmhhbmRsZUNsaWNrKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBkcmFnKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGRyb3ApO1xuICAgIH07XG5cbiAgICByb290LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBncmFiKTtcbiAgfTtcblxuICB2YXIgcm91dGUkMSA9IGNyZWF0ZVJvdXRlKHtcbiAgICBESURfVVBEQVRFX1BBTkVMX0hFSUdIVDogZnVuY3Rpb24gRElEX1VQREFURV9QQU5FTF9IRUlHSFQoX3JlZjIpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgICAgYWN0aW9uID0gX3JlZjIuYWN0aW9uO1xuICAgICAgcm9vdC5oZWlnaHQgPSBhY3Rpb24uaGVpZ2h0O1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHdyaXRlJDQgPSBjcmVhdGVSb3V0ZShcbiAgICB7XG4gICAgICBESURfR1JBQl9JVEVNOiBmdW5jdGlvbiBESURfR1JBQl9JVEVNKF9yZWYzKSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjMucm9vdCxcbiAgICAgICAgICBwcm9wcyA9IF9yZWYzLnByb3BzO1xuICAgICAgICBwcm9wcy5kcmFnT3JpZ2luID0ge1xuICAgICAgICAgIHg6IHJvb3QudHJhbnNsYXRlWCxcbiAgICAgICAgICB5OiByb290LnRyYW5zbGF0ZVlcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBESURfRFJBR19JVEVNOiBmdW5jdGlvbiBESURfRFJBR19JVEVNKF9yZWY0KSB7XG4gICAgICAgIHZhciByb290ID0gX3JlZjQucm9vdDtcbiAgICAgICAgcm9vdC5lbGVtZW50LmRhdGFzZXQuZHJhZ1N0YXRlID0gJ2RyYWcnO1xuICAgICAgfSxcbiAgICAgIERJRF9EUk9QX0lURU06IGZ1bmN0aW9uIERJRF9EUk9QX0lURU0oX3JlZjUpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmNS5yb290LFxuICAgICAgICAgIHByb3BzID0gX3JlZjUucHJvcHM7XG4gICAgICAgIHByb3BzLmRyYWdPZmZzZXQgPSBudWxsO1xuICAgICAgICBwcm9wcy5kcmFnT3JpZ2luID0gbnVsbDtcbiAgICAgICAgcm9vdC5lbGVtZW50LmRhdGFzZXQuZHJhZ1N0YXRlID0gJ2Ryb3AnO1xuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24oX3JlZjYpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjYucm9vdCxcbiAgICAgICAgYWN0aW9ucyA9IF9yZWY2LmFjdGlvbnMsXG4gICAgICAgIHByb3BzID0gX3JlZjYucHJvcHMsXG4gICAgICAgIHNob3VsZE9wdGltaXplID0gX3JlZjYuc2hvdWxkT3B0aW1pemU7XG5cbiAgICAgIGlmIChyb290LmVsZW1lbnQuZGF0YXNldC5kcmFnU3RhdGUgPT09ICdkcm9wJykge1xuICAgICAgICBpZiAocm9vdC5zY2FsZVggPD0gMSkge1xuICAgICAgICAgIHJvb3QuZWxlbWVudC5kYXRhc2V0LmRyYWdTdGF0ZSA9ICdpZGxlJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZWxlY3QgbGFzdCBzdGF0ZSBjaGFuZ2UgYWN0aW9uXG4gICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc1xuICAgICAgICAuY29uY2F0KClcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gL15ESURfLy50ZXN0KGFjdGlvbi50eXBlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuZmluZChmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gU3RhdGVNYXBbYWN0aW9uLnR5cGVdO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gbm8gbmVlZCB0byBzZXQgc2FtZSBzdGF0ZSB0d2ljZVxuICAgICAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSAhPT0gcHJvcHMuY3VycmVudFN0YXRlKSB7XG4gICAgICAgIC8vIHNldCBjdXJyZW50IHN0YXRlXG4gICAgICAgIHByb3BzLmN1cnJlbnRTdGF0ZSA9IGFjdGlvbi50eXBlO1xuXG4gICAgICAgIC8vIHNldCBzdGF0ZVxuICAgICAgICByb290LmVsZW1lbnQuZGF0YXNldC5maWxlcG9uZEl0ZW1TdGF0ZSA9XG4gICAgICAgICAgU3RhdGVNYXBbcHJvcHMuY3VycmVudFN0YXRlXSB8fCAnJztcbiAgICAgIH1cblxuICAgICAgLy8gcm91dGUgYWN0aW9uc1xuICAgICAgdmFyIGFzcGVjdFJhdGlvID1cbiAgICAgICAgcm9vdC5xdWVyeSgnR0VUX0lURU1fUEFORUxfQVNQRUNUX1JBVElPJykgfHxcbiAgICAgICAgcm9vdC5xdWVyeSgnR0VUX1BBTkVMX0FTUEVDVF9SQVRJTycpO1xuICAgICAgaWYgKCFhc3BlY3RSYXRpbykge1xuICAgICAgICByb3V0ZSQxKHsgcm9vdDogcm9vdCwgYWN0aW9uczogYWN0aW9ucywgcHJvcHM6IHByb3BzIH0pO1xuICAgICAgICBpZiAoIXJvb3QuaGVpZ2h0ICYmIHJvb3QucmVmLmNvbnRhaW5lci5yZWN0LmVsZW1lbnQuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgIHJvb3QuaGVpZ2h0ID0gcm9vdC5yZWYuY29udGFpbmVyLnJlY3QuZWxlbWVudC5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXNob3VsZE9wdGltaXplKSB7XG4gICAgICAgIHJvb3QuaGVpZ2h0ID0gcm9vdC5yZWN0LmVsZW1lbnQud2lkdGggKiBhc3BlY3RSYXRpbztcbiAgICAgIH1cblxuICAgICAgLy8gc3luYyBwYW5lbCBoZWlnaHQgd2l0aCBpdGVtIGhlaWdodFxuICAgICAgaWYgKHNob3VsZE9wdGltaXplKSB7XG4gICAgICAgIHJvb3QucmVmLnBhbmVsLmhlaWdodCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJvb3QucmVmLnBhbmVsLmhlaWdodCA9IHJvb3QuaGVpZ2h0O1xuICAgIH1cbiAgKTtcblxuICB2YXIgaXRlbSA9IGNyZWF0ZVZpZXcoe1xuICAgIGNyZWF0ZTogY3JlYXRlJDcsXG4gICAgd3JpdGU6IHdyaXRlJDQsXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShfcmVmNykge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmNy5yb290LFxuICAgICAgICBwcm9wcyA9IF9yZWY3LnByb3BzO1xuICAgICAgcm9vdC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm9vdC5yZWYuaGFuZGxlQ2xpY2spO1xuICAgICAgcm9vdC5kaXNwYXRjaCgnUkVMRUFTRV9JVEVNJywgeyBxdWVyeTogcHJvcHMuaWQgfSk7XG4gICAgfSxcbiAgICB0YWc6ICdsaScsXG4gICAgbmFtZTogJ2l0ZW0nLFxuICAgIG1peGluczoge1xuICAgICAgYXBpczogW1xuICAgICAgICAnaWQnLFxuICAgICAgICAnaW50ZXJhY3Rpb25NZXRob2QnLFxuICAgICAgICAnbWFya2VkRm9yUmVtb3ZhbCcsXG4gICAgICAgICdzcGF3bkRhdGUnLFxuICAgICAgICAnZHJhZ0NlbnRlcicsXG4gICAgICAgICdkcmFnT3JpZ2luJyxcbiAgICAgICAgJ2RyYWdPZmZzZXQnXG4gICAgICBdLFxuICAgICAgc3R5bGVzOiBbXG4gICAgICAgICd0cmFuc2xhdGVYJyxcbiAgICAgICAgJ3RyYW5zbGF0ZVknLFxuICAgICAgICAnc2NhbGVYJyxcbiAgICAgICAgJ3NjYWxlWScsXG4gICAgICAgICdvcGFjaXR5JyxcbiAgICAgICAgJ2hlaWdodCdcbiAgICAgIF0sXG5cbiAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgc2NhbGVYOiBJVEVNX1NDQUxFX1NQUklORyxcbiAgICAgICAgc2NhbGVZOiBJVEVNX1NDQUxFX1NQUklORyxcbiAgICAgICAgdHJhbnNsYXRlWDogSVRFTV9UUkFOU0xBVEVfU1BSSU5HLFxuICAgICAgICB0cmFuc2xhdGVZOiBJVEVNX1RSQU5TTEFURV9TUFJJTkcsXG4gICAgICAgIG9wYWNpdHk6IHsgdHlwZTogJ3R3ZWVuJywgZHVyYXRpb246IDE1MCB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgZ2V0SXRlbUluZGV4QnlQb3NpdGlvbiA9IGZ1bmN0aW9uIGdldEl0ZW1JbmRleEJ5UG9zaXRpb24oXG4gICAgdmlldyxcbiAgICBjaGlsZHJlbixcbiAgICBwb3NpdGlvbkluVmlld1xuICApIHtcbiAgICBpZiAoIXBvc2l0aW9uSW5WaWV3KSByZXR1cm47XG5cbiAgICB2YXIgaG9yaXpvbnRhbFNwYWNlID0gdmlldy5yZWN0LmVsZW1lbnQud2lkdGg7XG4gICAgLy8gY29uc3QgY2hpbGRyZW4gPSB2aWV3LmNoaWxkVmlld3M7XG4gICAgdmFyIGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgdmFyIGxhc3QgPSBudWxsO1xuXG4gICAgLy8gLTEsIGRvbid0IG1vdmUgaXRlbXMgdG8gYWNjb21vZGF0ZSAoZWl0aGVyIGFkZCB0byB0b3Agb3IgYm90dG9tKVxuICAgIGlmIChsID09PSAwIHx8IHBvc2l0aW9uSW5WaWV3LnRvcCA8IGNoaWxkcmVuWzBdLnJlY3QuZWxlbWVudC50b3ApIHJldHVybiAtMTtcblxuICAgIC8vIGxldCdzIGdldCB0aGUgaXRlbSB3aWR0aFxuICAgIHZhciBpdGVtID0gY2hpbGRyZW5bMF07XG4gICAgdmFyIGl0ZW1SZWN0ID0gaXRlbS5yZWN0LmVsZW1lbnQ7XG4gICAgdmFyIGl0ZW1Ib3Jpem9udGFsTWFyZ2luID0gaXRlbVJlY3QubWFyZ2luTGVmdCArIGl0ZW1SZWN0Lm1hcmdpblJpZ2h0O1xuICAgIHZhciBpdGVtV2lkdGggPSBpdGVtUmVjdC53aWR0aCArIGl0ZW1Ib3Jpem9udGFsTWFyZ2luO1xuICAgIHZhciBpdGVtc1BlclJvdyA9IE1hdGgucm91bmQoaG9yaXpvbnRhbFNwYWNlIC8gaXRlbVdpZHRoKTtcblxuICAgIC8vIHN0YWNrXG4gICAgaWYgKGl0ZW1zUGVyUm93ID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpbmRleF07XG4gICAgICAgIHZhciBjaGlsZE1pZCA9IGNoaWxkLnJlY3Qub3V0ZXIudG9wICsgY2hpbGQucmVjdC5lbGVtZW50LmhlaWdodCAqIDAuNTtcbiAgICAgICAgaWYgKHBvc2l0aW9uSW5WaWV3LnRvcCA8IGNoaWxkTWlkKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG5cbiAgICAvLyBncmlkXG4gICAgdmFyIGl0ZW1WZXJ0aWNhbE1hcmdpbiA9IGl0ZW1SZWN0Lm1hcmdpblRvcCArIGl0ZW1SZWN0Lm1hcmdpbkJvdHRvbTtcbiAgICB2YXIgaXRlbUhlaWdodCA9IGl0ZW1SZWN0LmhlaWdodCArIGl0ZW1WZXJ0aWNhbE1hcmdpbjtcbiAgICBmb3IgKHZhciBfaW5kZXggPSAwOyBfaW5kZXggPCBsOyBfaW5kZXgrKykge1xuICAgICAgdmFyIGluZGV4WCA9IF9pbmRleCAlIGl0ZW1zUGVyUm93O1xuICAgICAgdmFyIGluZGV4WSA9IE1hdGguZmxvb3IoX2luZGV4IC8gaXRlbXNQZXJSb3cpO1xuXG4gICAgICB2YXIgb2Zmc2V0WCA9IGluZGV4WCAqIGl0ZW1XaWR0aDtcbiAgICAgIHZhciBvZmZzZXRZID0gaW5kZXhZICogaXRlbUhlaWdodDtcblxuICAgICAgdmFyIGl0ZW1Ub3AgPSBvZmZzZXRZIC0gaXRlbVJlY3QubWFyZ2luVG9wO1xuICAgICAgdmFyIGl0ZW1SaWdodCA9IG9mZnNldFggKyBpdGVtV2lkdGg7XG4gICAgICB2YXIgaXRlbUJvdHRvbSA9IG9mZnNldFkgKyBpdGVtSGVpZ2h0ICsgaXRlbVJlY3QubWFyZ2luQm90dG9tO1xuXG4gICAgICBpZiAocG9zaXRpb25JblZpZXcudG9wIDwgaXRlbUJvdHRvbSAmJiBwb3NpdGlvbkluVmlldy50b3AgPiBpdGVtVG9wKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbkluVmlldy5sZWZ0IDwgaXRlbVJpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIF9pbmRleDtcbiAgICAgICAgfSBlbHNlIGlmIChfaW5kZXggIT09IGwgLSAxKSB7XG4gICAgICAgICAgbGFzdCA9IF9pbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbGFzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gbDtcbiAgfTtcblxuICB2YXIgZHJvcEFyZWFEaW1lbnNpb25zID0ge1xuICAgIGhlaWdodDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBnZXQgZ2V0SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0O1xuICAgIH0sXG4gICAgc2V0IHNldEhlaWdodCh2YWwpIHtcbiAgICAgIGlmICh0aGlzLmhlaWdodCA9PT0gMCB8fCB2YWwgPT09IDApIHRoaXMuaGVpZ2h0ID0gdmFsO1xuICAgIH0sXG4gICAgZ2V0IGdldFdpZHRoKCkge1xuICAgICAgcmV0dXJuIHRoaXMud2lkdGg7XG4gICAgfSxcbiAgICBzZXQgc2V0V2lkdGgodmFsKSB7XG4gICAgICBpZiAodGhpcy53aWR0aCA9PT0gMCB8fCB2YWwgPT09IDApIHRoaXMud2lkdGggPSB2YWw7XG4gICAgfSxcbiAgICBzZXREaW1lbnNpb25zOiBmdW5jdGlvbiBzZXREaW1lbnNpb25zKGhlaWdodCwgd2lkdGgpIHtcbiAgICAgIGlmICh0aGlzLmhlaWdodCA9PT0gMCB8fCBoZWlnaHQgPT09IDApIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgaWYgKHRoaXMud2lkdGggPT09IDAgfHwgd2lkdGggPT09IDApIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNyZWF0ZSQ4ID0gZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYucm9vdDtcbiAgICAvLyBuZWVkIHRvIHNldCByb2xlIHRvIGxpc3QgYXMgb3RoZXJ3aXNlIGl0IHdvbid0IGJlIHJlYWQgYXMgYSBsaXN0IGJ5IFZvaWNlT3ZlclxuICAgIGF0dHIocm9vdC5lbGVtZW50LCAncm9sZScsICdsaXN0Jyk7XG5cbiAgICByb290LnJlZi5sYXN0SXRlbVNwYW53RGF0ZSA9IERhdGUubm93KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYSBuZXcgaXRlbVxuICAgKiBAcGFyYW0gcm9vdFxuICAgKiBAcGFyYW0gYWN0aW9uXG4gICAqL1xuICB2YXIgYWRkSXRlbVZpZXcgPSBmdW5jdGlvbiBhZGRJdGVtVmlldyhfcmVmMikge1xuICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbjtcbiAgICB2YXIgaWQgPSBhY3Rpb24uaWQsXG4gICAgICBpbmRleCA9IGFjdGlvbi5pbmRleCxcbiAgICAgIGludGVyYWN0aW9uTWV0aG9kID0gYWN0aW9uLmludGVyYWN0aW9uTWV0aG9kO1xuXG4gICAgcm9vdC5yZWYuYWRkSW5kZXggPSBpbmRleDtcblxuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIHZhciBzcGF3bkRhdGUgPSBub3c7XG4gICAgdmFyIG9wYWNpdHkgPSAxO1xuXG4gICAgaWYgKGludGVyYWN0aW9uTWV0aG9kICE9PSBJbnRlcmFjdGlvbk1ldGhvZC5OT05FKSB7XG4gICAgICBvcGFjaXR5ID0gMDtcbiAgICAgIHZhciBjb29sZG93biA9IHJvb3QucXVlcnkoJ0dFVF9JVEVNX0lOU0VSVF9JTlRFUlZBTCcpO1xuICAgICAgdmFyIGRpc3QgPSBub3cgLSByb290LnJlZi5sYXN0SXRlbVNwYW53RGF0ZTtcbiAgICAgIHNwYXduRGF0ZSA9IGRpc3QgPCBjb29sZG93biA/IG5vdyArIChjb29sZG93biAtIGRpc3QpIDogbm93O1xuICAgIH1cblxuICAgIHJvb3QucmVmLmxhc3RJdGVtU3BhbndEYXRlID0gc3Bhd25EYXRlO1xuXG4gICAgcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhcbiAgICAgICAgLy8gdmlldyB0eXBlXG4gICAgICAgIGl0ZW0sXG5cbiAgICAgICAgLy8gcHJvcHNcbiAgICAgICAge1xuICAgICAgICAgIHNwYXduRGF0ZTogc3Bhd25EYXRlLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5LFxuICAgICAgICAgIGludGVyYWN0aW9uTWV0aG9kOiBpbnRlcmFjdGlvbk1ldGhvZFxuICAgICAgICB9XG4gICAgICApLFxuXG4gICAgICBpbmRleFxuICAgICk7XG4gIH07XG5cbiAgdmFyIG1vdmVJdGVtID0gZnVuY3Rpb24gbW92ZUl0ZW0oaXRlbSwgeCwgeSkge1xuICAgIHZhciB2eCA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgdmFyIHZ5ID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcblxuICAgIC8vIHNldCB0byBudWxsIHRvIHJlbW92ZSBhbmltYXRpb24gd2hpbGUgZHJhZ2dpbmdcbiAgICBpZiAoaXRlbS5kcmFnT2Zmc2V0KSB7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVggPSBudWxsO1xuICAgICAgaXRlbS50cmFuc2xhdGVZID0gbnVsbDtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWCA9IGl0ZW0uZHJhZ09yaWdpbi54ICsgaXRlbS5kcmFnT2Zmc2V0Lng7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSBpdGVtLmRyYWdPcmlnaW4ueSArIGl0ZW0uZHJhZ09mZnNldC55O1xuICAgICAgaXRlbS5zY2FsZVggPSAxLjAyNTtcbiAgICAgIGl0ZW0uc2NhbGVZID0gMS4wMjU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWCA9IHg7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSB5O1xuXG4gICAgICBpZiAoRGF0ZS5ub3coKSA+IGl0ZW0uc3Bhd25EYXRlKSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50XG4gICAgICAgIGlmIChpdGVtLm9wYWNpdHkgPT09IDApIHtcbiAgICAgICAgICBpbnRyb0l0ZW1WaWV3KGl0ZW0sIHgsIHksIHZ4LCB2eSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIHN1cmUgaXMgZGVmYXVsdCBzY2FsZSBldmVyeSBmcmFtZVxuICAgICAgICBpdGVtLnNjYWxlWCA9IDE7XG4gICAgICAgIGl0ZW0uc2NhbGVZID0gMTtcbiAgICAgICAgaXRlbS5vcGFjaXR5ID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGludHJvSXRlbVZpZXcgPSBmdW5jdGlvbiBpbnRyb0l0ZW1WaWV3KGl0ZW0sIHgsIHksIHZ4LCB2eSkge1xuICAgIGlmIChpdGVtLmludGVyYWN0aW9uTWV0aG9kID09PSBJbnRlcmFjdGlvbk1ldGhvZC5OT05FKSB7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVggPSBudWxsO1xuICAgICAgaXRlbS50cmFuc2xhdGVYID0geDtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWSA9IG51bGw7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSB5O1xuICAgIH0gZWxzZSBpZiAoaXRlbS5pbnRlcmFjdGlvbk1ldGhvZCA9PT0gSW50ZXJhY3Rpb25NZXRob2QuRFJPUCkge1xuICAgICAgaXRlbS50cmFuc2xhdGVYID0gbnVsbDtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWCA9IHggLSB2eCAqIDIwO1xuXG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSBudWxsO1xuICAgICAgaXRlbS50cmFuc2xhdGVZID0geSAtIHZ5ICogMTA7XG5cbiAgICAgIGl0ZW0uc2NhbGVYID0gMC44O1xuICAgICAgaXRlbS5zY2FsZVkgPSAwLjg7XG4gICAgfSBlbHNlIGlmIChpdGVtLmludGVyYWN0aW9uTWV0aG9kID09PSBJbnRlcmFjdGlvbk1ldGhvZC5CUk9XU0UpIHtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWSA9IG51bGw7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSB5IC0gMzA7XG4gICAgfSBlbHNlIGlmIChpdGVtLmludGVyYWN0aW9uTWV0aG9kID09PSBJbnRlcmFjdGlvbk1ldGhvZC5BUEkpIHtcbiAgICAgIGl0ZW0udHJhbnNsYXRlWCA9IG51bGw7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVggPSB4IC0gMzA7XG4gICAgICBpdGVtLnRyYW5zbGF0ZVkgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBleGlzdGluZyBpdGVtXG4gICAqIEBwYXJhbSByb290XG4gICAqIEBwYXJhbSBhY3Rpb25cbiAgICovXG4gIHZhciByZW1vdmVJdGVtVmlldyA9IGZ1bmN0aW9uIHJlbW92ZUl0ZW1WaWV3KF9yZWYzKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uO1xuICAgIHZhciBpZCA9IGFjdGlvbi5pZDtcblxuICAgIC8vIGdldCB0aGUgdmlldyBtYXRjaGluZyB0aGUgZ2l2ZW4gaWRcbiAgICB2YXIgdmlldyA9IHJvb3QuY2hpbGRWaWV3cy5maW5kKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuaWQgPT09IGlkO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgbm8gdmlldyBmb3VuZCwgZXhpdFxuICAgIGlmICghdmlldykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFuaW1hdGUgdmlldyBvdXQgb2Ygdmlld1xuICAgIHZpZXcuc2NhbGVYID0gMC45O1xuICAgIHZpZXcuc2NhbGVZID0gMC45O1xuICAgIHZpZXcub3BhY2l0eSA9IDA7XG5cbiAgICAvLyBtYXJrIGZvciByZW1vdmFsXG4gICAgdmlldy5tYXJrZWRGb3JSZW1vdmFsID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgZ2V0SXRlbUhlaWdodCA9IGZ1bmN0aW9uIGdldEl0ZW1IZWlnaHQoY2hpbGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgY2hpbGQucmVjdC5lbGVtZW50LmhlaWdodCArXG4gICAgICBjaGlsZC5yZWN0LmVsZW1lbnQubWFyZ2luQm90dG9tICogMC41ICtcbiAgICAgIGNoaWxkLnJlY3QuZWxlbWVudC5tYXJnaW5Ub3AgKiAwLjVcbiAgICApO1xuICB9O1xuICB2YXIgZ2V0SXRlbVdpZHRoID0gZnVuY3Rpb24gZ2V0SXRlbVdpZHRoKGNoaWxkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGNoaWxkLnJlY3QuZWxlbWVudC53aWR0aCArXG4gICAgICBjaGlsZC5yZWN0LmVsZW1lbnQubWFyZ2luTGVmdCAqIDAuNSArXG4gICAgICBjaGlsZC5yZWN0LmVsZW1lbnQubWFyZ2luUmlnaHQgKiAwLjVcbiAgICApO1xuICB9O1xuXG4gIHZhciBkcmFnSXRlbSA9IGZ1bmN0aW9uIGRyYWdJdGVtKF9yZWY0KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNC5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uO1xuICAgIHZhciBpZCA9IGFjdGlvbi5pZCxcbiAgICAgIGRyYWdTdGF0ZSA9IGFjdGlvbi5kcmFnU3RhdGU7XG5cbiAgICAvLyByZWZlcmVuY2UgdG8gaXRlbVxuICAgIHZhciBpdGVtID0gcm9vdC5xdWVyeSgnR0VUX0lURU0nLCB7IGlkOiBpZCB9KTtcblxuICAgIC8vIGdldCB0aGUgdmlldyBtYXRjaGluZyB0aGUgZ2l2ZW4gaWRcbiAgICB2YXIgdmlldyA9IHJvb3QuY2hpbGRWaWV3cy5maW5kKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQuaWQgPT09IGlkO1xuICAgIH0pO1xuXG4gICAgdmFyIG51bUl0ZW1zID0gcm9vdC5jaGlsZFZpZXdzLmxlbmd0aDtcbiAgICB2YXIgb2xkSW5kZXggPSBkcmFnU3RhdGUuZ2V0SXRlbUluZGV4KGl0ZW0pO1xuXG4gICAgLy8gaWYgbm8gdmlldyBmb3VuZCwgZXhpdFxuICAgIGlmICghdmlldykgcmV0dXJuO1xuXG4gICAgdmFyIGRyYWdQb3NpdGlvbiA9IHtcbiAgICAgIHg6IHZpZXcuZHJhZ09yaWdpbi54ICsgdmlldy5kcmFnT2Zmc2V0LnggKyB2aWV3LmRyYWdDZW50ZXIueCxcbiAgICAgIHk6IHZpZXcuZHJhZ09yaWdpbi55ICsgdmlldy5kcmFnT2Zmc2V0LnkgKyB2aWV3LmRyYWdDZW50ZXIueVxuXG4gICAgICAvLyBnZXQgZHJhZyBhcmVhIGRpbWVuc2lvbnNcbiAgICB9O1xuICAgIHZhciBkcmFnSGVpZ2h0ID0gZ2V0SXRlbUhlaWdodCh2aWV3KTtcbiAgICB2YXIgZHJhZ1dpZHRoID0gZ2V0SXRlbVdpZHRoKHZpZXcpO1xuXG4gICAgLy8gZ2V0IHJvd3MgYW5kIGNvbHVtbnMgKFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSByb3cgYW5kIG9uZSBjb2x1bW4gaWYgYSBmaWxlIGlzIHByZXNlbnQpXG4gICAgdmFyIGNvbHMgPSBNYXRoLmZsb29yKHJvb3QucmVjdC5vdXRlci53aWR0aCAvIGRyYWdXaWR0aCk7XG4gICAgaWYgKGNvbHMgPiBudW1JdGVtcykgY29scyA9IG51bUl0ZW1zO1xuXG4gICAgLy8gcm93cyBhcmUgdXNlZCB0byBmaW5kIHdoZW4gd2UgaGF2ZSBsZWZ0IHRoZSBwcmV2aWV3IGFyZWEgYm91bmRpbmcgYm94XG4gICAgdmFyIHJvd3MgPSBNYXRoLmZsb29yKG51bUl0ZW1zIC8gY29scyArIDEpO1xuXG4gICAgZHJvcEFyZWFEaW1lbnNpb25zLnNldEhlaWdodCA9IGRyYWdIZWlnaHQgKiByb3dzO1xuICAgIGRyb3BBcmVhRGltZW5zaW9ucy5zZXRXaWR0aCA9IGRyYWdXaWR0aCAqIGNvbHM7XG5cbiAgICAvLyBnZXQgbmV3IGluZGV4IG9mIGRyYWdnZWQgaXRlbVxuICAgIHZhciBsb2NhdGlvbiA9IHtcbiAgICAgIHk6IE1hdGguZmxvb3IoZHJhZ1Bvc2l0aW9uLnkgLyBkcmFnSGVpZ2h0KSxcbiAgICAgIHg6IE1hdGguZmxvb3IoZHJhZ1Bvc2l0aW9uLnggLyBkcmFnV2lkdGgpLFxuICAgICAgZ2V0R3JpZEluZGV4OiBmdW5jdGlvbiBnZXRHcmlkSW5kZXgoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkcmFnUG9zaXRpb24ueSA+IGRyb3BBcmVhRGltZW5zaW9ucy5nZXRIZWlnaHQgfHxcbiAgICAgICAgICBkcmFnUG9zaXRpb24ueSA8IDAgfHxcbiAgICAgICAgICBkcmFnUG9zaXRpb24ueCA+IGRyb3BBcmVhRGltZW5zaW9ucy5nZXRXaWR0aCB8fFxuICAgICAgICAgIGRyYWdQb3NpdGlvbi54IDwgMFxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIG9sZEluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcy55ICogY29scyArIHRoaXMueDtcbiAgICAgIH0sXG4gICAgICBnZXRDb2xJbmRleDogZnVuY3Rpb24gZ2V0Q29sSW5kZXgoKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHJvb3QucXVlcnkoJ0dFVF9BQ1RJVkVfSVRFTVMnKTtcbiAgICAgICAgdmFyIHZpc2libGVDaGlsZHJlbiA9IHJvb3QuY2hpbGRWaWV3cy5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQucmVjdC5lbGVtZW50LmhlaWdodDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGl0ZW1zLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHZpc2libGVDaGlsZHJlbi5maW5kKGZ1bmN0aW9uKGNoaWxkVmlldykge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkVmlldy5pZCA9PT0gaXRlbS5pZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBjaGlsZHJlbi5maW5kSW5kZXgoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQgPT09IHZpZXc7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZHJhZ0hlaWdodCA9IGdldEl0ZW1IZWlnaHQodmlldyk7XG4gICAgICAgIHZhciBsID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICB2YXIgaWR4ID0gbDtcbiAgICAgICAgdmFyIGNoaWxkSGVpZ2h0ID0gMDtcbiAgICAgICAgdmFyIGNoaWxkQm90dG9tID0gMDtcbiAgICAgICAgdmFyIGNoaWxkVG9wID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjaGlsZEhlaWdodCA9IGdldEl0ZW1IZWlnaHQoY2hpbGRyZW5baV0pO1xuICAgICAgICAgIGNoaWxkVG9wID0gY2hpbGRCb3R0b207XG4gICAgICAgICAgY2hpbGRCb3R0b20gPSBjaGlsZFRvcCArIGNoaWxkSGVpZ2h0O1xuICAgICAgICAgIGlmIChkcmFnUG9zaXRpb24ueSA8IGNoaWxkQm90dG9tKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gaSkge1xuICAgICAgICAgICAgICBpZiAoZHJhZ1Bvc2l0aW9uLnkgPCBjaGlsZFRvcCArIGRyYWdIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBpZHggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWR4ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgbmV3IGluZGV4XG4gICAgfTtcbiAgICB2YXIgaW5kZXggPSBjb2xzID4gMSA/IGxvY2F0aW9uLmdldEdyaWRJbmRleCgpIDogbG9jYXRpb24uZ2V0Q29sSW5kZXgoKTtcbiAgICByb290LmRpc3BhdGNoKCdNT1ZFX0lURU0nLCB7IHF1ZXJ5OiB2aWV3LCBpbmRleDogaW5kZXggfSk7XG5cbiAgICAvLyBpZiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gY2hhbmdlZCwgZGlzcGF0Y2ggcmVvcmRlciBhY3Rpb25cbiAgICB2YXIgY3VycmVudEluZGV4ID0gZHJhZ1N0YXRlLmdldEluZGV4KCk7XG5cbiAgICBpZiAoY3VycmVudEluZGV4ID09PSB1bmRlZmluZWQgfHwgY3VycmVudEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgZHJhZ1N0YXRlLnNldEluZGV4KGluZGV4KTtcblxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9SRU9SREVSX0lURU1TJywge1xuICAgICAgICBpdGVtczogcm9vdC5xdWVyeSgnR0VUX0FDVElWRV9JVEVNUycpLFxuICAgICAgICBvcmlnaW46IG9sZEluZGV4LFxuICAgICAgICB0YXJnZXQ6IGluZGV4XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHVwIGFjdGlvbiByb3V0ZXNcbiAgICovXG4gIHZhciByb3V0ZSQyID0gY3JlYXRlUm91dGUoe1xuICAgIERJRF9BRERfSVRFTTogYWRkSXRlbVZpZXcsXG4gICAgRElEX1JFTU9WRV9JVEVNOiByZW1vdmVJdGVtVmlldyxcbiAgICBESURfRFJBR19JVEVNOiBkcmFnSXRlbVxuICB9KTtcblxuICAvKipcbiAgICogV3JpdGUgdG8gdmlld1xuICAgKiBAcGFyYW0gcm9vdFxuICAgKiBAcGFyYW0gYWN0aW9uc1xuICAgKiBAcGFyYW0gcHJvcHNcbiAgICovXG4gIHZhciB3cml0ZSQ1ID0gZnVuY3Rpb24gd3JpdGUoX3JlZjUpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWY1LnByb3BzLFxuICAgICAgYWN0aW9ucyA9IF9yZWY1LmFjdGlvbnMsXG4gICAgICBzaG91bGRPcHRpbWl6ZSA9IF9yZWY1LnNob3VsZE9wdGltaXplO1xuXG4gICAgLy8gcm91dGUgYWN0aW9uc1xuICAgIHJvdXRlJDIoeyByb290OiByb290LCBwcm9wczogcHJvcHMsIGFjdGlvbnM6IGFjdGlvbnMgfSk7XG4gICAgdmFyIGRyYWdDb29yZGluYXRlcyA9IHByb3BzLmRyYWdDb29yZGluYXRlcztcblxuICAgIC8vIGF2YWlsYWJsZSBzcGFjZSBvbiBob3Jpem9udGFsIGF4aXNcbiAgICB2YXIgaG9yaXpvbnRhbFNwYWNlID0gcm9vdC5yZWN0LmVsZW1lbnQud2lkdGg7XG5cbiAgICAvLyBvbmx5IGRyYXcgY2hpbGRyZW4gdGhhdCBoYXZlIGRpbWVuc2lvbnNcbiAgICB2YXIgdmlzaWJsZUNoaWxkcmVuID0gcm9vdC5jaGlsZFZpZXdzLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnJlY3QuZWxlbWVudC5oZWlnaHQ7XG4gICAgfSk7XG5cbiAgICAvLyBzb3J0IGJhc2VkIG9uIGN1cnJlbnQgYWN0aXZlIGl0ZW1zXG4gICAgdmFyIGNoaWxkcmVuID0gcm9vdFxuICAgICAgLnF1ZXJ5KCdHRVRfQUNUSVZFX0lURU1TJylcbiAgICAgIC5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gdmlzaWJsZUNoaWxkcmVuLmZpbmQoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQuaWQgPT09IGl0ZW0uaWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuXG4gICAgLy8gZ2V0IGluZGV4XG4gICAgdmFyIGRyYWdJbmRleCA9IGRyYWdDb29yZGluYXRlc1xuICAgICAgPyBnZXRJdGVtSW5kZXhCeVBvc2l0aW9uKHJvb3QsIGNoaWxkcmVuLCBkcmFnQ29vcmRpbmF0ZXMpXG4gICAgICA6IG51bGw7XG5cbiAgICAvLyBhZGQgaW5kZXggaXMgdXNlZCB0byByZXNlcnZlIHRoZSBkcm9wcGVkL2FkZGVkIGl0ZW0gaW5kZXggdGlsbCB0aGUgYWN0dWFsIGl0ZW0gaXMgcmVuZGVyZWRcbiAgICB2YXIgYWRkSW5kZXggPSByb290LnJlZi5hZGRJbmRleCB8fCBudWxsO1xuXG4gICAgLy8gYWRkIGluZGV4IG5vIGxvbmdlciBuZWVkZWQgdGlsbCBwb3NzaWJseSBuZXh0IGRyYXdcbiAgICByb290LnJlZi5hZGRJbmRleCA9IG51bGw7XG5cbiAgICB2YXIgZHJhZ0luZGV4T2Zmc2V0ID0gMDtcbiAgICB2YXIgcmVtb3ZlSW5kZXhPZmZzZXQgPSAwO1xuICAgIHZhciBhZGRJbmRleE9mZnNldCA9IDA7XG5cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICB2YXIgY2hpbGRSZWN0ID0gY2hpbGRyZW5bMF0ucmVjdC5lbGVtZW50O1xuICAgIHZhciBpdGVtVmVydGljYWxNYXJnaW4gPSBjaGlsZFJlY3QubWFyZ2luVG9wICsgY2hpbGRSZWN0Lm1hcmdpbkJvdHRvbTtcbiAgICB2YXIgaXRlbUhvcml6b250YWxNYXJnaW4gPSBjaGlsZFJlY3QubWFyZ2luTGVmdCArIGNoaWxkUmVjdC5tYXJnaW5SaWdodDtcbiAgICB2YXIgaXRlbVdpZHRoID0gY2hpbGRSZWN0LndpZHRoICsgaXRlbUhvcml6b250YWxNYXJnaW47XG4gICAgdmFyIGl0ZW1IZWlnaHQgPSBjaGlsZFJlY3QuaGVpZ2h0ICsgaXRlbVZlcnRpY2FsTWFyZ2luO1xuICAgIHZhciBpdGVtc1BlclJvdyA9IE1hdGgucm91bmQoaG9yaXpvbnRhbFNwYWNlIC8gaXRlbVdpZHRoKTtcblxuICAgIC8vIHN0YWNrXG4gICAgaWYgKGl0ZW1zUGVyUm93ID09PSAxKSB7XG4gICAgICB2YXIgb2Zmc2V0WSA9IDA7XG4gICAgICB2YXIgZHJhZ09mZnNldCA9IDA7XG5cbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmIChkcmFnSW5kZXgpIHtcbiAgICAgICAgICB2YXIgZGlzdCA9IGluZGV4IC0gZHJhZ0luZGV4O1xuICAgICAgICAgIGlmIChkaXN0ID09PSAtMikge1xuICAgICAgICAgICAgZHJhZ09mZnNldCA9IC1pdGVtVmVydGljYWxNYXJnaW4gKiAwLjI1O1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGlzdCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRyYWdPZmZzZXQgPSAtaXRlbVZlcnRpY2FsTWFyZ2luICogMC43NTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpc3QgPT09IDApIHtcbiAgICAgICAgICAgIGRyYWdPZmZzZXQgPSBpdGVtVmVydGljYWxNYXJnaW4gKiAwLjc1O1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGlzdCA9PT0gMSkge1xuICAgICAgICAgICAgZHJhZ09mZnNldCA9IGl0ZW1WZXJ0aWNhbE1hcmdpbiAqIDAuMjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRyYWdPZmZzZXQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRPcHRpbWl6ZSkge1xuICAgICAgICAgIGNoaWxkLnRyYW5zbGF0ZVggPSBudWxsO1xuICAgICAgICAgIGNoaWxkLnRyYW5zbGF0ZVkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGlsZC5tYXJrZWRGb3JSZW1vdmFsKSB7XG4gICAgICAgICAgbW92ZUl0ZW0oY2hpbGQsIDAsIG9mZnNldFkgKyBkcmFnT2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVtSGVpZ2h0ID0gY2hpbGQucmVjdC5lbGVtZW50LmhlaWdodCArIGl0ZW1WZXJ0aWNhbE1hcmdpbjtcblxuICAgICAgICB2YXIgdmlzdWFsSGVpZ2h0ID1cbiAgICAgICAgICBpdGVtSGVpZ2h0ICogKGNoaWxkLm1hcmtlZEZvclJlbW92YWwgPyBjaGlsZC5vcGFjaXR5IDogMSk7XG5cbiAgICAgICAgb2Zmc2V0WSArPSB2aXN1YWxIZWlnaHQ7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gZ3JpZFxuICAgIGVsc2Uge1xuICAgICAgdmFyIHByZXZYID0gMDtcbiAgICAgIHZhciBwcmV2WSA9IDA7XG5cbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gZHJhZ0luZGV4KSB7XG4gICAgICAgICAgZHJhZ0luZGV4T2Zmc2V0ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gYWRkSW5kZXgpIHtcbiAgICAgICAgICBhZGRJbmRleE9mZnNldCArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkLm1hcmtlZEZvclJlbW92YWwgJiYgY2hpbGQub3BhY2l0eSA8IDAuNSkge1xuICAgICAgICAgIHJlbW92ZUluZGV4T2Zmc2V0IC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmlzdWFsSW5kZXggPVxuICAgICAgICAgIGluZGV4ICsgYWRkSW5kZXhPZmZzZXQgKyBkcmFnSW5kZXhPZmZzZXQgKyByZW1vdmVJbmRleE9mZnNldDtcblxuICAgICAgICB2YXIgaW5kZXhYID0gdmlzdWFsSW5kZXggJSBpdGVtc1BlclJvdztcbiAgICAgICAgdmFyIGluZGV4WSA9IE1hdGguZmxvb3IodmlzdWFsSW5kZXggLyBpdGVtc1BlclJvdyk7XG5cbiAgICAgICAgdmFyIG9mZnNldFggPSBpbmRleFggKiBpdGVtV2lkdGg7XG4gICAgICAgIHZhciBvZmZzZXRZID0gaW5kZXhZICogaXRlbUhlaWdodDtcblxuICAgICAgICB2YXIgdmVjdG9yWCA9IE1hdGguc2lnbihvZmZzZXRYIC0gcHJldlgpO1xuICAgICAgICB2YXIgdmVjdG9yWSA9IE1hdGguc2lnbihvZmZzZXRZIC0gcHJldlkpO1xuXG4gICAgICAgIHByZXZYID0gb2Zmc2V0WDtcbiAgICAgICAgcHJldlkgPSBvZmZzZXRZO1xuXG4gICAgICAgIGlmIChjaGlsZC5tYXJrZWRGb3JSZW1vdmFsKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHNob3VsZE9wdGltaXplKSB7XG4gICAgICAgICAgY2hpbGQudHJhbnNsYXRlWCA9IG51bGw7XG4gICAgICAgICAgY2hpbGQudHJhbnNsYXRlWSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBtb3ZlSXRlbShjaGlsZCwgb2Zmc2V0WCwgb2Zmc2V0WSwgdmVjdG9yWCwgdmVjdG9yWSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgYWN0aW9ucyB0aGF0IGFyZSBtZWFudCBzcGVjaWZpY2FsbHkgZm9yIGEgY2VydGFpbiBjaGlsZCBvZiB0aGUgbGlzdFxuICAgKiBAcGFyYW0gY2hpbGRcbiAgICogQHBhcmFtIGFjdGlvbnNcbiAgICovXG4gIHZhciBmaWx0ZXJTZXRJdGVtQWN0aW9ucyA9IGZ1bmN0aW9uIGZpbHRlclNldEl0ZW1BY3Rpb25zKGNoaWxkLCBhY3Rpb25zKSB7XG4gICAgcmV0dXJuIGFjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgLy8gaWYgYWN0aW9uIGhhcyBhbiBpZCwgZmlsdGVyIG91dCBhY3Rpb25zIHRoYXQgZG9uJ3QgaGF2ZSB0aGlzIGNoaWxkIGlkXG4gICAgICBpZiAoYWN0aW9uLmRhdGEgJiYgYWN0aW9uLmRhdGEuaWQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLmlkID09PSBhY3Rpb24uZGF0YS5pZDtcbiAgICAgIH1cblxuICAgICAgLy8gYWxsb3cgYWxsIG90aGVyIGFjdGlvbnNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBsaXN0ID0gY3JlYXRlVmlldyh7XG4gICAgY3JlYXRlOiBjcmVhdGUkOCxcbiAgICB3cml0ZTogd3JpdGUkNSxcbiAgICB0YWc6ICd1bCcsXG4gICAgbmFtZTogJ2xpc3QnLFxuICAgIGRpZFdyaXRlVmlldzogZnVuY3Rpb24gZGlkV3JpdGVWaWV3KF9yZWY2KSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3Q7XG4gICAgICByb290LmNoaWxkVmlld3NcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgcmV0dXJuIHZpZXcubWFya2VkRm9yUmVtb3ZhbCAmJiB2aWV3Lm9wYWNpdHkgPT09IDAgJiYgdmlldy5yZXN0aW5nO1xuICAgICAgICB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgdmlldy5fZGVzdHJveSgpO1xuICAgICAgICAgIHJvb3QucmVtb3ZlQ2hpbGRWaWV3KHZpZXcpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGZpbHRlckZyYW1lQWN0aW9uc0ZvckNoaWxkOiBmaWx0ZXJTZXRJdGVtQWN0aW9ucyxcbiAgICBtaXhpbnM6IHtcbiAgICAgIGFwaXM6IFsnZHJhZ0Nvb3JkaW5hdGVzJ11cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBjcmVhdGUkOSA9IGZ1bmN0aW9uIGNyZWF0ZShfcmVmKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmLnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWYucHJvcHM7XG4gICAgcm9vdC5yZWYubGlzdCA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KHJvb3QuY3JlYXRlQ2hpbGRWaWV3KGxpc3QpKTtcbiAgICBwcm9wcy5kcmFnQ29vcmRpbmF0ZXMgPSBudWxsO1xuICAgIHByb3BzLm92ZXJmbG93aW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIHN0b3JlRHJhZ0Nvb3JkaW5hdGVzID0gZnVuY3Rpb24gc3RvcmVEcmFnQ29vcmRpbmF0ZXMoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWYyLnByb3BzLFxuICAgICAgYWN0aW9uID0gX3JlZjIuYWN0aW9uO1xuICAgIGlmICghcm9vdC5xdWVyeSgnR0VUX0lURU1fSU5TRVJUX0xPQ0FUSU9OX0ZSRUVET00nKSkgcmV0dXJuO1xuICAgIHByb3BzLmRyYWdDb29yZGluYXRlcyA9IHtcbiAgICAgIGxlZnQ6IGFjdGlvbi5wb3NpdGlvbi5zY29wZUxlZnQgLSByb290LnJlZi5saXN0LnJlY3QuZWxlbWVudC5sZWZ0LFxuICAgICAgdG9wOlxuICAgICAgICBhY3Rpb24ucG9zaXRpb24uc2NvcGVUb3AgLVxuICAgICAgICAocm9vdC5yZWN0Lm91dGVyLnRvcCArXG4gICAgICAgICAgcm9vdC5yZWN0LmVsZW1lbnQubWFyZ2luVG9wICtcbiAgICAgICAgICByb290LnJlY3QuZWxlbWVudC5zY3JvbGxUb3ApXG4gICAgfTtcbiAgfTtcblxuICB2YXIgY2xlYXJEcmFnQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiBjbGVhckRyYWdDb29yZGluYXRlcyhfcmVmMykge1xuICAgIHZhciBwcm9wcyA9IF9yZWYzLnByb3BzO1xuICAgIHByb3BzLmRyYWdDb29yZGluYXRlcyA9IG51bGw7XG4gIH07XG5cbiAgdmFyIHJvdXRlJDMgPSBjcmVhdGVSb3V0ZSh7XG4gICAgRElEX0RSQUc6IHN0b3JlRHJhZ0Nvb3JkaW5hdGVzLFxuICAgIERJRF9FTkRfRFJBRzogY2xlYXJEcmFnQ29vcmRpbmF0ZXNcbiAgfSk7XG5cbiAgdmFyIHdyaXRlJDYgPSBmdW5jdGlvbiB3cml0ZShfcmVmNCkge1xuICAgIHZhciByb290ID0gX3JlZjQucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZjQucHJvcHMsXG4gICAgICBhY3Rpb25zID0gX3JlZjQuYWN0aW9ucztcblxuICAgIC8vIHJvdXRlIGFjdGlvbnNcbiAgICByb3V0ZSQzKHsgcm9vdDogcm9vdCwgcHJvcHM6IHByb3BzLCBhY3Rpb25zOiBhY3Rpb25zIH0pO1xuXG4gICAgLy8gY3VycmVudCBkcmFnIHBvc2l0aW9uXG4gICAgcm9vdC5yZWYubGlzdC5kcmFnQ29vcmRpbmF0ZXMgPSBwcm9wcy5kcmFnQ29vcmRpbmF0ZXM7XG5cbiAgICAvLyBpZiBjdXJyZW50bHkgb3ZlcmZsb3dpbmcgYnV0IG5vIGxvbmdlciByZWNlaXZlZCBvdmVyZmxvd1xuICAgIGlmIChwcm9wcy5vdmVyZmxvd2luZyAmJiAhcHJvcHMub3ZlcmZsb3cpIHtcbiAgICAgIHByb3BzLm92ZXJmbG93aW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIHJlc2V0IG92ZXJmbG93IHN0YXRlXG4gICAgICByb290LmVsZW1lbnQuZGF0YXNldC5zdGF0ZSA9ICcnO1xuICAgICAgcm9vdC5oZWlnaHQgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIGlmIGlzIG5vdCBvdmVyZmxvd2luZyBjdXJyZW50bHkgYnV0IGRvZXMgcmVjZWl2ZSBvdmVyZmxvdyB2YWx1ZVxuICAgIGlmIChwcm9wcy5vdmVyZmxvdykge1xuICAgICAgdmFyIG5ld0hlaWdodCA9IE1hdGgucm91bmQocHJvcHMub3ZlcmZsb3cpO1xuICAgICAgaWYgKG5ld0hlaWdodCAhPT0gcm9vdC5oZWlnaHQpIHtcbiAgICAgICAgcHJvcHMub3ZlcmZsb3dpbmcgPSB0cnVlO1xuICAgICAgICByb290LmVsZW1lbnQuZGF0YXNldC5zdGF0ZSA9ICdvdmVyZmxvdyc7XG4gICAgICAgIHJvb3QuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdFNjcm9sbGVyID0gY3JlYXRlVmlldyh7XG4gICAgY3JlYXRlOiBjcmVhdGUkOSxcbiAgICB3cml0ZTogd3JpdGUkNixcbiAgICBuYW1lOiAnbGlzdC1zY3JvbGxlcicsXG4gICAgbWl4aW5zOiB7XG4gICAgICBhcGlzOiBbJ292ZXJmbG93JywgJ2RyYWdDb29yZGluYXRlcyddLFxuICAgICAgc3R5bGVzOiBbJ2hlaWdodCcsICd0cmFuc2xhdGVZJ10sXG4gICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIHRyYW5zbGF0ZVk6ICdzcHJpbmcnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXR0clRvZ2dsZSA9IGZ1bmN0aW9uIGF0dHJUb2dnbGUoZWxlbWVudCwgbmFtZSwgc3RhdGUpIHtcbiAgICB2YXIgZW5hYmxlZFZhbHVlID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJyc7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICBhdHRyKGVsZW1lbnQsIG5hbWUsIGVuYWJsZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVzZXRGaWxlSW5wdXQgPSBmdW5jdGlvbiByZXNldEZpbGVJbnB1dChpbnB1dCkge1xuICAgIC8vIG5vIHZhbHVlLCBubyBuZWVkIHRvIHJlc2V0XG4gICAgaWYgKCFpbnB1dCB8fCBpbnB1dC52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gZm9yIG1vZGVybiBicm93c2Vyc1xuICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgICAvLyBmb3IgSUUxMFxuICAgIGlmIChpbnB1dC52YWx1ZSkge1xuICAgICAgLy8gcXVpY2tseSBhcHBlbmQgaW5wdXQgdG8gdGVtcCBmb3JtIGFuZCByZXNldCBmb3JtXG4gICAgICB2YXIgZm9ybSA9IGNyZWF0ZUVsZW1lbnQkMSgnZm9ybScpO1xuICAgICAgdmFyIHBhcmVudE5vZGUgPSBpbnB1dC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHJlZiA9IGlucHV0Lm5leHRTaWJsaW5nO1xuICAgICAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICBmb3JtLnJlc2V0KCk7XG5cbiAgICAgIC8vIHJlLWluamVjdCBpbnB1dCB3aGVyZSBpdCBvcmlnaW5hbGx5IHdhc1xuICAgICAgaWYgKHJlZikge1xuICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnB1dCwgcmVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgY3JlYXRlJGEgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuXG4gICAgLy8gc2V0IGlkIHNvIGNhbiBiZSByZWZlcmVuY2VkIGZyb20gb3V0c2lkZSBsYWJlbHNcbiAgICByb290LmVsZW1lbnQuaWQgPSAnZmlsZXBvbmQtLWJyb3dzZXItJyArIHByb3BzLmlkO1xuXG4gICAgLy8gc2V0IG5hbWUgb2YgZWxlbWVudCAoaXMgcmVtb3ZlZCB3aGVuIGEgdmFsdWUgaXMgc2V0KVxuICAgIGF0dHIocm9vdC5lbGVtZW50LCAnbmFtZScsIHJvb3QucXVlcnkoJ0dFVF9OQU1FJykpO1xuXG4gICAgLy8gd2UgaGF2ZSB0byBsaW5rIHRoaXMgZWxlbWVudCB0byB0aGUgc3RhdHVzIGVsZW1lbnRcbiAgICBhdHRyKHJvb3QuZWxlbWVudCwgJ2FyaWEtY29udHJvbHMnLCAnZmlsZXBvbmQtLWFzc2lzdGFudC0nICsgcHJvcHMuaWQpO1xuXG4gICAgLy8gc2V0IGxhYmVsLCB3ZSB1c2UgbGFiZWxsZWQgYnkgYXMgb3RoZXJ3aXNlIHRoZSBzY3JlZW5yZWFkZXIgZG9lcyBub3QgcmVhZCB0aGUgXCJicm93c2VcIiB0ZXh0IGluIHRoZSBsYWJlbCAoYXMgaXQgaGFzIHRhYmluZGV4OiAwKVxuICAgIGF0dHIocm9vdC5lbGVtZW50LCAnYXJpYS1sYWJlbGxlZGJ5JywgJ2ZpbGVwb25kLS1kcm9wLWxhYmVsLScgKyBwcm9wcy5pZCk7XG5cbiAgICAvLyBzZXQgY29uZmlndXJhYmxlIHByb3BzXG4gICAgc2V0QWNjZXB0ZWRGaWxlVHlwZXMoe1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIGFjdGlvbjogeyB2YWx1ZTogcm9vdC5xdWVyeSgnR0VUX0FDQ0VQVEVEX0ZJTEVfVFlQRVMnKSB9XG4gICAgfSk7XG4gICAgdG9nZ2xlQWxsb3dNdWx0aXBsZSh7XG4gICAgICByb290OiByb290LFxuICAgICAgYWN0aW9uOiB7IHZhbHVlOiByb290LnF1ZXJ5KCdHRVRfQUxMT1dfTVVMVElQTEUnKSB9XG4gICAgfSk7XG4gICAgdG9nZ2xlRGlyZWN0b3J5RmlsdGVyKHtcbiAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICBhY3Rpb246IHsgdmFsdWU6IHJvb3QucXVlcnkoJ0dFVF9BTExPV19ESVJFQ1RPUklFU19PTkxZJykgfVxuICAgIH0pO1xuICAgIHRvZ2dsZURpc2FibGVkKHsgcm9vdDogcm9vdCB9KTtcbiAgICB0b2dnbGVSZXF1aXJlZCh7XG4gICAgICByb290OiByb290LFxuICAgICAgYWN0aW9uOiB7IHZhbHVlOiByb290LnF1ZXJ5KCdHRVRfUkVRVUlSRUQnKSB9XG4gICAgfSk7XG4gICAgc2V0Q2FwdHVyZU1ldGhvZCh7XG4gICAgICByb290OiByb290LFxuICAgICAgYWN0aW9uOiB7IHZhbHVlOiByb290LnF1ZXJ5KCdHRVRfQ0FQVFVSRV9NRVRIT0QnKSB9XG4gICAgfSk7XG5cbiAgICAvLyBoYW5kbGUgY2hhbmdlcyB0byB0aGUgaW5wdXQgZmllbGRcbiAgICByb290LnJlZi5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIXJvb3QuZWxlbWVudC52YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGV4dHJhY3QgZmlsZXMgYW5kIG1vdmUgdmFsdWUgb2Ygd2Via2l0UmVsYXRpdmVQYXRoIHBhdGggdG8gX3JlbGF0aXZlUGF0aFxuICAgICAgdmFyIGZpbGVzID0gQXJyYXkuZnJvbShyb290LmVsZW1lbnQuZmlsZXMpLm1hcChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIGZpbGUuX3JlbGF0aXZlUGF0aCA9IGZpbGUud2Via2l0UmVsYXRpdmVQYXRoO1xuICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyB3ZSBhZGQgYSBsaXR0bGUgZGVsYXkgc28gdGhlIE9TIGZpbGUgc2VsZWN0IHdpbmRvdyBjYW4gbW92ZSBvdXQgb2YgdGhlIHdheSBiZWZvcmUgd2UgYWRkIG91ciBmaWxlXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBsb2FkIGZpbGVzXG4gICAgICAgIHByb3BzLm9ubG9hZChmaWxlcyk7XG5cbiAgICAgICAgLy8gcmVzZXQgaW5wdXQsIGl0J3MganVzdCBmb3IgZXhwb3NpbmcgYSBtZXRob2QgdG8gZHJvcCBmaWxlcywgc2hvdWxkIG5vdCByZXRhaW4gYW55IHN0YXRlXG4gICAgICAgIHJlc2V0RmlsZUlucHV0KHJvb3QuZWxlbWVudCk7XG4gICAgICB9LCAyNTApO1xuICAgIH07XG5cbiAgICByb290LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcm9vdC5yZWYuaGFuZGxlQ2hhbmdlKTtcbiAgfTtcblxuICB2YXIgc2V0QWNjZXB0ZWRGaWxlVHlwZXMgPSBmdW5jdGlvbiBzZXRBY2NlcHRlZEZpbGVUeXBlcyhfcmVmMikge1xuICAgIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgIGFjdGlvbiA9IF9yZWYyLmFjdGlvbjtcbiAgICBpZiAoIXJvb3QucXVlcnkoJ0dFVF9BTExPV19TWU5DX0FDQ0VQVF9BVFRSSUJVVEUnKSkgcmV0dXJuO1xuICAgIGF0dHJUb2dnbGUoXG4gICAgICByb290LmVsZW1lbnQsXG4gICAgICAnYWNjZXB0JyxcbiAgICAgICEhYWN0aW9uLnZhbHVlLFxuICAgICAgYWN0aW9uLnZhbHVlID8gYWN0aW9uLnZhbHVlLmpvaW4oJywnKSA6ICcnXG4gICAgKTtcbiAgfTtcblxuICB2YXIgdG9nZ2xlQWxsb3dNdWx0aXBsZSA9IGZ1bmN0aW9uIHRvZ2dsZUFsbG93TXVsdGlwbGUoX3JlZjMpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYzLnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmMy5hY3Rpb247XG4gICAgYXR0clRvZ2dsZShyb290LmVsZW1lbnQsICdtdWx0aXBsZScsIGFjdGlvbi52YWx1ZSk7XG4gIH07XG5cbiAgdmFyIHRvZ2dsZURpcmVjdG9yeUZpbHRlciA9IGZ1bmN0aW9uIHRvZ2dsZURpcmVjdG9yeUZpbHRlcihfcmVmNCkge1xuICAgIHZhciByb290ID0gX3JlZjQucm9vdCxcbiAgICAgIGFjdGlvbiA9IF9yZWY0LmFjdGlvbjtcbiAgICBhdHRyVG9nZ2xlKHJvb3QuZWxlbWVudCwgJ3dlYmtpdGRpcmVjdG9yeScsIGFjdGlvbi52YWx1ZSk7XG4gIH07XG5cbiAgdmFyIHRvZ2dsZURpc2FibGVkID0gZnVuY3Rpb24gdG9nZ2xlRGlzYWJsZWQoX3JlZjUpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3Q7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSByb290LnF1ZXJ5KCdHRVRfRElTQUJMRUQnKTtcbiAgICB2YXIgZG9lc0FsbG93QnJvd3NlID0gcm9vdC5xdWVyeSgnR0VUX0FMTE9XX0JST1dTRScpO1xuICAgIHZhciBkaXNhYmxlRmllbGQgPSBpc0Rpc2FibGVkIHx8ICFkb2VzQWxsb3dCcm93c2U7XG4gICAgYXR0clRvZ2dsZShyb290LmVsZW1lbnQsICdkaXNhYmxlZCcsIGRpc2FibGVGaWVsZCk7XG4gIH07XG5cbiAgdmFyIHRvZ2dsZVJlcXVpcmVkID0gZnVuY3Rpb24gdG9nZ2xlUmVxdWlyZWQoX3JlZjYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY2LnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmNi5hY3Rpb247XG4gICAgLy8gd2FudCB0byByZW1vdmUgcmVxdWlyZWQsIGFsd2F5cyBwb3NzaWJsZVxuICAgIGlmICghYWN0aW9uLnZhbHVlKSB7XG4gICAgICBhdHRyVG9nZ2xlKHJvb3QuZWxlbWVudCwgJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgIH1cbiAgICAvLyBpZiB3YW50IHRvIG1ha2UgcmVxdWlyZWQsIG9ubHkgcG9zc2libGUgd2hlbiB6ZXJvIGl0ZW1zXG4gICAgZWxzZSBpZiAocm9vdC5xdWVyeSgnR0VUX1RPVEFMX0lURU1TJykgPT09IDApIHtcbiAgICAgIGF0dHJUb2dnbGUocm9vdC5lbGVtZW50LCAncmVxdWlyZWQnLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNldENhcHR1cmVNZXRob2QgPSBmdW5jdGlvbiBzZXRDYXB0dXJlTWV0aG9kKF9yZWY3KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNy5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjcuYWN0aW9uO1xuICAgIGF0dHJUb2dnbGUoXG4gICAgICByb290LmVsZW1lbnQsXG4gICAgICAnY2FwdHVyZScsXG4gICAgICAhIWFjdGlvbi52YWx1ZSxcbiAgICAgIGFjdGlvbi52YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYWN0aW9uLnZhbHVlXG4gICAgKTtcbiAgfTtcblxuICB2YXIgdXBkYXRlUmVxdWlyZWRTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVSZXF1aXJlZFN0YXR1cyhfcmVmOCkge1xuICAgIHZhciByb290ID0gX3JlZjgucm9vdDtcbiAgICB2YXIgZWxlbWVudCA9IHJvb3QuZWxlbWVudDtcbiAgICAvLyBhbHdheXMgcmVtb3ZlIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgd2hlbiBtb3JlIHRoYW4gemVybyBpdGVtc1xuICAgIGlmIChyb290LnF1ZXJ5KCdHRVRfVE9UQUxfSVRFTVMnKSA+IDApIHtcbiAgICAgIGF0dHJUb2dnbGUoZWxlbWVudCwgJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgICAgYXR0clRvZ2dsZShlbGVtZW50LCAnbmFtZScsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYWRkIG5hbWUgYXR0cmlidXRlXG4gICAgICBhdHRyVG9nZ2xlKGVsZW1lbnQsICduYW1lJywgdHJ1ZSwgcm9vdC5xdWVyeSgnR0VUX05BTUUnKSk7XG5cbiAgICAgIC8vIHJlbW92ZSBhbnkgdmFsaWRhdGlvbiBtZXNzYWdlc1xuICAgICAgdmFyIHNob3VsZENoZWNrVmFsaWRpdHkgPSByb290LnF1ZXJ5KCdHRVRfQ0hFQ0tfVkFMSURJVFknKTtcbiAgICAgIGlmIChzaG91bGRDaGVja1ZhbGlkaXR5KSB7XG4gICAgICAgIGVsZW1lbnQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpO1xuICAgICAgfVxuXG4gICAgICAvLyB3ZSBvbmx5IGFkZCByZXF1aXJlZCBpZiB0aGUgZmllbGQgaGFzIGJlZW4gZGVlbWVkIHJlcXVpcmVkXG4gICAgICBpZiAocm9vdC5xdWVyeSgnR0VUX1JFUVVJUkVEJykpIHtcbiAgICAgICAgYXR0clRvZ2dsZShlbGVtZW50LCAncmVxdWlyZWQnLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHVwZGF0ZUZpZWxkVmFsaWRpdHlTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVGaWVsZFZhbGlkaXR5U3RhdHVzKF9yZWY5KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmOS5yb290O1xuICAgIHZhciBzaG91bGRDaGVja1ZhbGlkaXR5ID0gcm9vdC5xdWVyeSgnR0VUX0NIRUNLX1ZBTElESVRZJyk7XG4gICAgaWYgKCFzaG91bGRDaGVja1ZhbGlkaXR5KSByZXR1cm47XG4gICAgcm9vdC5lbGVtZW50LnNldEN1c3RvbVZhbGlkaXR5KHJvb3QucXVlcnkoJ0dFVF9MQUJFTF9JTlZBTElEX0ZJRUxEJykpO1xuICB9O1xuXG4gIHZhciBicm93c2VyID0gY3JlYXRlVmlldyh7XG4gICAgdGFnOiAnaW5wdXQnLFxuICAgIG5hbWU6ICdicm93c2VyJyxcbiAgICBpZ25vcmVSZWN0OiB0cnVlLFxuICAgIGlnbm9yZVJlY3RVcGRhdGU6IHRydWUsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgdHlwZTogJ2ZpbGUnXG4gICAgfSxcblxuICAgIGNyZWF0ZTogY3JlYXRlJGEsXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShfcmVmMTApIHtcbiAgICAgIHZhciByb290ID0gX3JlZjEwLnJvb3Q7XG4gICAgICByb290LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcm9vdC5yZWYuaGFuZGxlQ2hhbmdlKTtcbiAgICB9LFxuICAgIHdyaXRlOiBjcmVhdGVSb3V0ZSh7XG4gICAgICBESURfTE9BRF9JVEVNOiB1cGRhdGVSZXF1aXJlZFN0YXR1cyxcbiAgICAgIERJRF9SRU1PVkVfSVRFTTogdXBkYXRlUmVxdWlyZWRTdGF0dXMsXG4gICAgICBESURfVEhST1dfSVRFTV9JTlZBTElEOiB1cGRhdGVGaWVsZFZhbGlkaXR5U3RhdHVzLFxuXG4gICAgICBESURfU0VUX0RJU0FCTEVEOiB0b2dnbGVEaXNhYmxlZCxcbiAgICAgIERJRF9TRVRfQUxMT1dfQlJPV1NFOiB0b2dnbGVEaXNhYmxlZCxcbiAgICAgIERJRF9TRVRfQUxMT1dfRElSRUNUT1JJRVNfT05MWTogdG9nZ2xlRGlyZWN0b3J5RmlsdGVyLFxuICAgICAgRElEX1NFVF9BTExPV19NVUxUSVBMRTogdG9nZ2xlQWxsb3dNdWx0aXBsZSxcbiAgICAgIERJRF9TRVRfQUNDRVBURURfRklMRV9UWVBFUzogc2V0QWNjZXB0ZWRGaWxlVHlwZXMsXG4gICAgICBESURfU0VUX0NBUFRVUkVfTUVUSE9EOiBzZXRDYXB0dXJlTWV0aG9kLFxuICAgICAgRElEX1NFVF9SRVFVSVJFRDogdG9nZ2xlUmVxdWlyZWRcbiAgICB9KVxuICB9KTtcblxuICB2YXIgS2V5ID0ge1xuICAgIEVOVEVSOiAxMyxcbiAgICBTUEFDRTogMzJcbiAgfTtcblxuICB2YXIgY3JlYXRlJGIgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuXG4gICAgLy8gY3JlYXRlIHRoZSBsYWJlbCBhbmQgbGluayBpdCB0byB0aGUgZmlsZSBicm93c2VyXG4gICAgdmFyIGxhYmVsID0gY3JlYXRlRWxlbWVudCQxKCdsYWJlbCcpO1xuICAgIGF0dHIobGFiZWwsICdmb3InLCAnZmlsZXBvbmQtLWJyb3dzZXItJyArIHByb3BzLmlkKTtcblxuICAgIC8vIHVzZSBmb3IgbGFiZWxpbmcgZmlsZSBpbnB1dCAoYXJpYS1sYWJlbGxlZGJ5IG9uIGZpbGUgaW5wdXQpXG4gICAgYXR0cihsYWJlbCwgJ2lkJywgJ2ZpbGVwb25kLS1kcm9wLWxhYmVsLScgKyBwcm9wcy5pZCk7XG5cbiAgICAvLyBoaWRlIHRoZSBsYWJlbCBmb3Igc2NyZWVucmVhZGVycywgdGhlIGlucHV0IGVsZW1lbnQgd2lsbCByZWFkIHRoZSBjb250ZW50cyBvZiB0aGUgbGFiZWwgd2hlbiBpdCdzIGZvY3Vzc2VkLiBJZiB3ZSBkb24ndCBzZXQgYXJpYS1oaWRkZW4gdGhlIHNjcmVlbnJlYWRlciB3aWxsIGFsc28gbmF2aWdhdGUgdGhlIGNvbnRlbnRzIG9mIHRoZSBsYWJlbCBzZXBhcmF0ZWx5IGZyb20gdGhlIGlucHV0LlxuICAgIGF0dHIobGFiZWwsICdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAvLyBoYW5kbGUga2V5c1xuICAgIHJvb3QucmVmLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgaXNBY3RpdmF0aW9uS2V5ID0gZS5rZXlDb2RlID09PSBLZXkuRU5URVIgfHwgZS5rZXlDb2RlID09PSBLZXkuU1BBQ0U7XG4gICAgICBpZiAoIWlzQWN0aXZhdGlvbktleSkgcmV0dXJuO1xuICAgICAgLy8gc3RvcHMgZnJvbSB0cmlnZ2VyaW5nIHRoZSBlbGVtZW50IGEgc2Vjb25kIHRpbWVcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgLy8gY2xpY2sgbGluayAod2lsbCB0aGVuIGluIHR1cm4gYWN0aXZhdGUgZmlsZSBpbnB1dClcbiAgICAgIHJvb3QucmVmLmxhYmVsLmNsaWNrKCk7XG4gICAgfTtcblxuICAgIHJvb3QucmVmLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGlzTGFiZWxDbGljayA9IGUudGFyZ2V0ID09PSBsYWJlbCB8fCBsYWJlbC5jb250YWlucyhlLnRhcmdldCk7XG5cbiAgICAgIC8vIGRvbid0IHdhbnQgdG8gY2xpY2sgdHdpY2VcbiAgICAgIGlmIChpc0xhYmVsQ2xpY2spIHJldHVybjtcblxuICAgICAgLy8gY2xpY2sgbGluayAod2lsbCB0aGVuIGluIHR1cm4gYWN0aXZhdGUgZmlsZSBpbnB1dClcbiAgICAgIHJvb3QucmVmLmxhYmVsLmNsaWNrKCk7XG4gICAgfTtcblxuICAgIC8vIGF0dGFjaCBldmVudHNcbiAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgcm9vdC5yZWYuaGFuZGxlS2V5RG93bik7XG4gICAgcm9vdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcm9vdC5yZWYuaGFuZGxlQ2xpY2spO1xuXG4gICAgLy8gdXBkYXRlXG4gICAgdXBkYXRlTGFiZWxWYWx1ZShsYWJlbCwgcHJvcHMuY2FwdGlvbik7XG5cbiAgICAvLyBhZGQhXG4gICAgcm9vdC5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgcm9vdC5yZWYubGFiZWwgPSBsYWJlbDtcbiAgfTtcblxuICB2YXIgdXBkYXRlTGFiZWxWYWx1ZSA9IGZ1bmN0aW9uIHVwZGF0ZUxhYmVsVmFsdWUobGFiZWwsIHZhbHVlKSB7XG4gICAgbGFiZWwuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgdmFyIGNsaWNrYWJsZSA9IGxhYmVsLnF1ZXJ5U2VsZWN0b3IoJy5maWxlcG9uZC0tbGFiZWwtYWN0aW9uJyk7XG4gICAgaWYgKGNsaWNrYWJsZSkge1xuICAgICAgYXR0cihjbGlja2FibGUsICd0YWJpbmRleCcsICcwJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZHJvcExhYmVsID0gY3JlYXRlVmlldyh7XG4gICAgbmFtZTogJ2Ryb3AtbGFiZWwnLFxuICAgIGlnbm9yZVJlY3Q6IHRydWUsXG4gICAgY3JlYXRlOiBjcmVhdGUkYixcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KF9yZWYyKSB7XG4gICAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3Q7XG4gICAgICByb290LnJlZi5sYWJlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgcm9vdC5yZWYuaGFuZGxlS2V5RG93bik7XG4gICAgICByb290LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByb290LnJlZi5oYW5kbGVDbGljayk7XG4gICAgfSxcbiAgICB3cml0ZTogY3JlYXRlUm91dGUoe1xuICAgICAgRElEX1NFVF9MQUJFTF9JRExFOiBmdW5jdGlvbiBESURfU0VUX0xBQkVMX0lETEUoX3JlZjMpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgICAgIGFjdGlvbiA9IF9yZWYzLmFjdGlvbjtcbiAgICAgICAgdXBkYXRlTGFiZWxWYWx1ZShyb290LnJlZi5sYWJlbCwgYWN0aW9uLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIG1peGluczoge1xuICAgICAgc3R5bGVzOiBbJ29wYWNpdHknLCAndHJhbnNsYXRlWCcsICd0cmFuc2xhdGVZJ10sXG4gICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIG9wYWNpdHk6IHsgdHlwZTogJ3R3ZWVuJywgZHVyYXRpb246IDE1MCB9LFxuICAgICAgICB0cmFuc2xhdGVYOiAnc3ByaW5nJyxcbiAgICAgICAgdHJhbnNsYXRlWTogJ3NwcmluZydcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBibG9iID0gY3JlYXRlVmlldyh7XG4gICAgbmFtZTogJ2RyaXAtYmxvYicsXG4gICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICBtaXhpbnM6IHtcbiAgICAgIHN0eWxlczogWyd0cmFuc2xhdGVYJywgJ3RyYW5zbGF0ZVknLCAnc2NhbGVYJywgJ3NjYWxlWScsICdvcGFjaXR5J10sXG4gICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgIHNjYWxlWDogJ3NwcmluZycsXG4gICAgICAgIHNjYWxlWTogJ3NwcmluZycsXG4gICAgICAgIHRyYW5zbGF0ZVg6ICdzcHJpbmcnLFxuICAgICAgICB0cmFuc2xhdGVZOiAnc3ByaW5nJyxcbiAgICAgICAgb3BhY2l0eTogeyB0eXBlOiAndHdlZW4nLCBkdXJhdGlvbjogMjUwIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBhZGRCbG9iID0gZnVuY3Rpb24gYWRkQmxvYihfcmVmKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmLnJvb3Q7XG4gICAgdmFyIGNlbnRlclggPSByb290LnJlY3QuZWxlbWVudC53aWR0aCAqIDAuNTtcbiAgICB2YXIgY2VudGVyWSA9IHJvb3QucmVjdC5lbGVtZW50LmhlaWdodCAqIDAuNTtcblxuICAgIHJvb3QucmVmLmJsb2IgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KGJsb2IsIHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgc2NhbGVYOiAyLjUsXG4gICAgICAgIHNjYWxlWTogMi41LFxuICAgICAgICB0cmFuc2xhdGVYOiBjZW50ZXJYLFxuICAgICAgICB0cmFuc2xhdGVZOiBjZW50ZXJZXG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgdmFyIG1vdmVCbG9iID0gZnVuY3Rpb24gbW92ZUJsb2IoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmMi5hY3Rpb247XG4gICAgaWYgKCFyb290LnJlZi5ibG9iKSB7XG4gICAgICBhZGRCbG9iKHsgcm9vdDogcm9vdCB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByb290LnJlZi5ibG9iLnRyYW5zbGF0ZVggPSBhY3Rpb24ucG9zaXRpb24uc2NvcGVMZWZ0O1xuICAgIHJvb3QucmVmLmJsb2IudHJhbnNsYXRlWSA9IGFjdGlvbi5wb3NpdGlvbi5zY29wZVRvcDtcbiAgICByb290LnJlZi5ibG9iLnNjYWxlWCA9IDE7XG4gICAgcm9vdC5yZWYuYmxvYi5zY2FsZVkgPSAxO1xuICAgIHJvb3QucmVmLmJsb2Iub3BhY2l0eSA9IDE7XG4gIH07XG5cbiAgdmFyIGhpZGVCbG9iID0gZnVuY3Rpb24gaGlkZUJsb2IoX3JlZjMpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYzLnJvb3Q7XG4gICAgaWYgKCFyb290LnJlZi5ibG9iKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJvb3QucmVmLmJsb2Iub3BhY2l0eSA9IDA7XG4gIH07XG5cbiAgdmFyIGV4cGxvZGVCbG9iID0gZnVuY3Rpb24gZXhwbG9kZUJsb2IoX3JlZjQpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY0LnJvb3Q7XG4gICAgaWYgKCFyb290LnJlZi5ibG9iKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJvb3QucmVmLmJsb2Iuc2NhbGVYID0gMi41O1xuICAgIHJvb3QucmVmLmJsb2Iuc2NhbGVZID0gMi41O1xuICAgIHJvb3QucmVmLmJsb2Iub3BhY2l0eSA9IDA7XG4gIH07XG5cbiAgdmFyIHdyaXRlJDcgPSBmdW5jdGlvbiB3cml0ZShfcmVmNSkge1xuICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZjUucHJvcHMsXG4gICAgICBhY3Rpb25zID0gX3JlZjUuYWN0aW9ucztcbiAgICByb3V0ZSQ0KHsgcm9vdDogcm9vdCwgcHJvcHM6IHByb3BzLCBhY3Rpb25zOiBhY3Rpb25zIH0pO1xuICAgIHZhciBibG9iID0gcm9vdC5yZWYuYmxvYjtcblxuICAgIGlmIChhY3Rpb25zLmxlbmd0aCA9PT0gMCAmJiBibG9iICYmIGJsb2Iub3BhY2l0eSA9PT0gMCkge1xuICAgICAgcm9vdC5yZW1vdmVDaGlsZFZpZXcoYmxvYik7XG4gICAgICByb290LnJlZi5ibG9iID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJvdXRlJDQgPSBjcmVhdGVSb3V0ZSh7XG4gICAgRElEX0RSQUc6IG1vdmVCbG9iLFxuICAgIERJRF9EUk9QOiBleHBsb2RlQmxvYixcbiAgICBESURfRU5EX0RSQUc6IGhpZGVCbG9iXG4gIH0pO1xuXG4gIHZhciBkcmlwID0gY3JlYXRlVmlldyh7XG4gICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICBpZ25vcmVSZWN0VXBkYXRlOiB0cnVlLFxuICAgIG5hbWU6ICdkcmlwJyxcbiAgICB3cml0ZTogd3JpdGUkN1xuICB9KTtcblxuICB2YXIgY3JlYXRlJGMgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290O1xuICAgIHJldHVybiAocm9vdC5yZWYuZmllbGRzID0ge30pO1xuICB9O1xuXG4gIHZhciBnZXRGaWVsZCA9IGZ1bmN0aW9uIGdldEZpZWxkKHJvb3QsIGlkKSB7XG4gICAgcmV0dXJuIHJvb3QucmVmLmZpZWxkc1tpZF07XG4gIH07XG5cbiAgdmFyIHN5bmNGaWVsZFBvc2l0aW9uc1dpdGhJdGVtcyA9IGZ1bmN0aW9uIHN5bmNGaWVsZFBvc2l0aW9uc1dpdGhJdGVtcyhyb290KSB7XG4gICAgcm9vdC5xdWVyeSgnR0VUX0FDVElWRV9JVEVNUycpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCFyb290LnJlZi5maWVsZHNbaXRlbS5pZF0pIHJldHVybjtcbiAgICAgIHJvb3QuZWxlbWVudC5hcHBlbmRDaGlsZChyb290LnJlZi5maWVsZHNbaXRlbS5pZF0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBkaWRSZW9yZGVySXRlbXMgPSBmdW5jdGlvbiBkaWRSZW9yZGVySXRlbXMoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3Q7XG4gICAgcmV0dXJuIHN5bmNGaWVsZFBvc2l0aW9uc1dpdGhJdGVtcyhyb290KTtcbiAgfTtcblxuICB2YXIgZGlkQWRkSXRlbSA9IGZ1bmN0aW9uIGRpZEFkZEl0ZW0oX3JlZjMpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYzLnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmMy5hY3Rpb247XG4gICAgdmFyIGRhdGFDb250YWluZXIgPSBjcmVhdGVFbGVtZW50JDEoJ2lucHV0Jyk7XG4gICAgZGF0YUNvbnRhaW5lci50eXBlID0gJ2hpZGRlbic7XG4gICAgZGF0YUNvbnRhaW5lci5uYW1lID0gcm9vdC5xdWVyeSgnR0VUX05BTUUnKTtcbiAgICBkYXRhQ29udGFpbmVyLmRpc2FibGVkID0gcm9vdC5xdWVyeSgnR0VUX0RJU0FCTEVEJyk7XG4gICAgcm9vdC5yZWYuZmllbGRzW2FjdGlvbi5pZF0gPSBkYXRhQ29udGFpbmVyO1xuICAgIHN5bmNGaWVsZFBvc2l0aW9uc1dpdGhJdGVtcyhyb290KTtcbiAgfTtcblxuICB2YXIgZGlkTG9hZEl0ZW0kMSA9IGZ1bmN0aW9uIGRpZExvYWRJdGVtKF9yZWY0KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNC5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjQuYWN0aW9uO1xuICAgIHZhciBmaWVsZCA9IGdldEZpZWxkKHJvb3QsIGFjdGlvbi5pZCk7XG4gICAgaWYgKCFmaWVsZCB8fCBhY3Rpb24uc2VydmVyRmlsZVJlZmVyZW5jZSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGZpZWxkLnZhbHVlID0gYWN0aW9uLnNlcnZlckZpbGVSZWZlcmVuY2U7XG4gIH07XG5cbiAgdmFyIGRpZFNldERpc2FibGVkID0gZnVuY3Rpb24gZGlkU2V0RGlzYWJsZWQoX3JlZjUpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3Q7XG4gICAgcm9vdC5lbGVtZW50LmRpc2FibGVkID0gcm9vdC5xdWVyeSgnR0VUX0RJU0FCTEVEJyk7XG4gIH07XG5cbiAgdmFyIGRpZFJlbW92ZUl0ZW0gPSBmdW5jdGlvbiBkaWRSZW1vdmVJdGVtKF9yZWY2KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNi5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjYuYWN0aW9uO1xuICAgIHZhciBmaWVsZCA9IGdldEZpZWxkKHJvb3QsIGFjdGlvbi5pZCk7XG4gICAgaWYgKCFmaWVsZCkgcmV0dXJuO1xuICAgIGZpZWxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmllbGQpO1xuICAgIGRlbGV0ZSByb290LnJlZi5maWVsZHNbYWN0aW9uLmlkXTtcbiAgfTtcblxuICB2YXIgZGlkRGVmaW5lVmFsdWUgPSBmdW5jdGlvbiBkaWREZWZpbmVWYWx1ZShfcmVmNykge1xuICAgIHZhciByb290ID0gX3JlZjcucm9vdCxcbiAgICAgIGFjdGlvbiA9IF9yZWY3LmFjdGlvbjtcbiAgICB2YXIgZmllbGQgPSBnZXRGaWVsZChyb290LCBhY3Rpb24uaWQpO1xuICAgIGlmICghZmllbGQpIHJldHVybjtcbiAgICBpZiAoYWN0aW9uLnZhbHVlID09PSBudWxsKSB7XG4gICAgICBmaWVsZC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpZWxkLnZhbHVlID0gYWN0aW9uLnZhbHVlO1xuICAgIH1cbiAgICBzeW5jRmllbGRQb3NpdGlvbnNXaXRoSXRlbXMocm9vdCk7XG4gIH07XG5cbiAgdmFyIHdyaXRlJDggPSBjcmVhdGVSb3V0ZSh7XG4gICAgRElEX1NFVF9ESVNBQkxFRDogZGlkU2V0RGlzYWJsZWQsXG4gICAgRElEX0FERF9JVEVNOiBkaWRBZGRJdGVtLFxuICAgIERJRF9MT0FEX0lURU06IGRpZExvYWRJdGVtJDEsXG4gICAgRElEX1JFTU9WRV9JVEVNOiBkaWRSZW1vdmVJdGVtLFxuICAgIERJRF9ERUZJTkVfVkFMVUU6IGRpZERlZmluZVZhbHVlLFxuICAgIERJRF9SRU9SREVSX0lURU1TOiBkaWRSZW9yZGVySXRlbXMsXG4gICAgRElEX1NPUlRfSVRFTVM6IGRpZFJlb3JkZXJJdGVtc1xuICB9KTtcblxuICB2YXIgZGF0YSA9IGNyZWF0ZVZpZXcoe1xuICAgIHRhZzogJ2ZpZWxkc2V0JyxcbiAgICBuYW1lOiAnZGF0YScsXG4gICAgY3JlYXRlOiBjcmVhdGUkYyxcbiAgICB3cml0ZTogd3JpdGUkOCxcbiAgICBpZ25vcmVSZWN0OiB0cnVlXG4gIH0pO1xuXG4gIHZhciBnZXRSb290Tm9kZSA9IGZ1bmN0aW9uIGdldFJvb3ROb2RlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gJ2dldFJvb3ROb2RlJyBpbiBlbGVtZW50ID8gZWxlbWVudC5nZXRSb290Tm9kZSgpIDogZG9jdW1lbnQ7XG4gIH07XG5cbiAgdmFyIGltYWdlcyA9IFsnanBnJywgJ2pwZWcnLCAncG5nJywgJ2dpZicsICdibXAnLCAnd2VicCcsICdzdmcnLCAndGlmZiddO1xuICB2YXIgdGV4dCQxID0gWydjc3MnLCAnY3N2JywgJ2h0bWwnLCAndHh0J107XG4gIHZhciBtYXAgPSB7XG4gICAgemlwOiAnemlwfGNvbXByZXNzZWQnLFxuICAgIGVwdWI6ICdhcHBsaWNhdGlvbi9lcHViK3ppcCdcbiAgfTtcblxuICB2YXIgZ3Vlc3N0aW1hdGVNaW1lVHlwZSA9IGZ1bmN0aW9uIGd1ZXNzdGltYXRlTWltZVR5cGUoKSB7XG4gICAgdmFyIGV4dGVuc2lvbiA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICAgIGV4dGVuc2lvbiA9IGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChpbWFnZXMuaW5jbHVkZXMoZXh0ZW5zaW9uKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgJ2ltYWdlLycgK1xuICAgICAgICAoZXh0ZW5zaW9uID09PSAnanBnJ1xuICAgICAgICAgID8gJ2pwZWcnXG4gICAgICAgICAgOiBleHRlbnNpb24gPT09ICdzdmcnXG4gICAgICAgICAgPyAnc3ZnK3htbCdcbiAgICAgICAgICA6IGV4dGVuc2lvbilcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0ZXh0JDEuaW5jbHVkZXMoZXh0ZW5zaW9uKSkge1xuICAgICAgcmV0dXJuICd0ZXh0LycgKyBleHRlbnNpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcFtleHRlbnNpb25dIHx8ICcnO1xuICB9O1xuXG4gIHZhciByZXF1ZXN0RGF0YVRyYW5zZmVySXRlbXMgPSBmdW5jdGlvbiByZXF1ZXN0RGF0YVRyYW5zZmVySXRlbXMoXG4gICAgZGF0YVRyYW5zZmVyXG4gICkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vIHRyeSB0byBnZXQgbGlua3MgZnJvbSB0cmFuc2ZlciwgaWYgZm91bmQgd2UnbGwgZXhpdCBpbW1pZGlhdGVseSAodW5sZXNzIGEgZmlsZSBpcyBpbiB0aGUgZGF0YVRyYW5zZmVyIGFzIHdlbGwsIHRoaXMgaXMgYmVjYXVzZSBGaXJlZm94IGNvdWxkIHJlcHJlc2VudCB0aGUgZmlsZSBhcyBhIFVSTCBhbmQgYSBmaWxlIG9iamVjdCBhdCB0aGUgc2FtZSB0aW1lKVxuICAgICAgdmFyIGxpbmtzID0gZ2V0TGlua3MoZGF0YVRyYW5zZmVyKTtcbiAgICAgIGlmIChsaW5rcy5sZW5ndGggJiYgIWhhc0ZpbGVzKGRhdGFUcmFuc2ZlcikpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobGlua3MpO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIGdldCBmaWxlcyBmcm9tIHRoZSB0cmFuc2ZlclxuICAgICAgZ2V0RmlsZXMoZGF0YVRyYW5zZmVyKS50aGVuKHJlc29sdmUpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUZXN0IGlmIGRhdGF0cmFuc2ZlciBoYXMgZmlsZXNcbiAgICovXG4gIHZhciBoYXNGaWxlcyA9IGZ1bmN0aW9uIGhhc0ZpbGVzKGRhdGFUcmFuc2Zlcikge1xuICAgIGlmIChkYXRhVHJhbnNmZXIuZmlsZXMpIHJldHVybiBkYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGZpbGVzIGZyb20gYSBEYXRhVHJhbnNmZXIgb2JqZWN0XG4gICAqL1xuICB2YXIgZ2V0RmlsZXMgPSBmdW5jdGlvbiBnZXRGaWxlcyhkYXRhVHJhbnNmZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyBnZXQgdGhlIHRyYW5zZmVyIGl0ZW1zIGFzIHByb21pc2VzXG4gICAgICB2YXIgcHJvbWlzZWRGaWxlcyA9IChkYXRhVHJhbnNmZXIuaXRlbXNcbiAgICAgICAgPyBBcnJheS5mcm9tKGRhdGFUcmFuc2Zlci5pdGVtcylcbiAgICAgICAgOiBbXVxuICAgICAgKVxuICAgICAgICAvLyBvbmx5IGtlZXAgZmlsZSBzeXN0ZW0gaXRlbXMgKGZpbGVzIGFuZCBkaXJlY3RvcmllcylcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGlzRmlsZVN5c3RlbUl0ZW0oaXRlbSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gbWFwIGVhY2ggaXRlbSB0byBwcm9taXNlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBnZXRGaWxlc0Zyb21JdGVtKGl0ZW0pO1xuICAgICAgICB9KTtcblxuICAgICAgLy8gaWYgaXMgZW1wdHksIHNlZSBpZiB3ZSBjYW4gZXh0cmFjdCBzb21lIGluZm8gZnJvbSB0aGUgZmlsZXMgcHJvcGVydHkgYXMgYSBmYWxsYmFja1xuICAgICAgaWYgKCFwcm9taXNlZEZpbGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBUT0RPOiB0ZXN0IGZvciBkaXJlY3RvcmllcyAoc2hvdWxkIG5vdCBiZSBhbGxvd2VkKVxuICAgICAgICAvLyBVc2UgRmlsZVJlYWRlciwgcHJvYmxlbSBpcyB0aGF0IHRoZSBmaWxlcyBwcm9wZXJ0eSBnZXRzIGxvc3QgaW4gdGhlIHByb2Nlc3NcbiAgICAgICAgcmVzb2x2ZShkYXRhVHJhbnNmZXIuZmlsZXMgPyBBcnJheS5mcm9tKGRhdGFUcmFuc2Zlci5maWxlcykgOiBbXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gZG9uZSFcbiAgICAgIFByb21pc2UuYWxsKHByb21pc2VkRmlsZXMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJldHVybmVkRmlsZUdyb3Vwcykge1xuICAgICAgICAgIC8vIGZsYXR0ZW4gZ3JvdXBzXG4gICAgICAgICAgdmFyIGZpbGVzID0gW107XG4gICAgICAgICAgcmV0dXJuZWRGaWxlR3JvdXBzLmZvckVhY2goZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgICAgIGZpbGVzLnB1c2guYXBwbHkoZmlsZXMsIGdyb3VwKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIGRvbmUgKGZpbHRlciBvdXQgZW1wdHkgZmlsZXMpIVxuICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICBmaWxlc1xuICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlLl9yZWxhdGl2ZVBhdGgpXG4gICAgICAgICAgICAgICAgICBmaWxlLl9yZWxhdGl2ZVBhdGggPSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGlzRmlsZVN5c3RlbUl0ZW0gPSBmdW5jdGlvbiBpc0ZpbGVTeXN0ZW1JdGVtKGl0ZW0pIHtcbiAgICBpZiAoaXNFbnRyeShpdGVtKSkge1xuICAgICAgdmFyIGVudHJ5ID0gZ2V0QXNFbnRyeShpdGVtKTtcbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuaXNGaWxlIHx8IGVudHJ5LmlzRGlyZWN0b3J5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbS5raW5kID09PSAnZmlsZSc7XG4gIH07XG5cbiAgdmFyIGdldEZpbGVzRnJvbUl0ZW0gPSBmdW5jdGlvbiBnZXRGaWxlc0Zyb21JdGVtKGl0ZW0pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoaXNEaXJlY3RvcnlFbnRyeShpdGVtKSkge1xuICAgICAgICBnZXRGaWxlc0luRGlyZWN0b3J5KGdldEFzRW50cnkoaXRlbSkpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlKFtpdGVtLmdldEFzRmlsZSgpXSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdldEZpbGVzSW5EaXJlY3RvcnkgPSBmdW5jdGlvbiBnZXRGaWxlc0luRGlyZWN0b3J5KGVudHJ5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGZpbGVzID0gW107XG5cbiAgICAgIC8vIHRoZSB0b3RhbCBlbnRyaWVzIHRvIHJlYWRcbiAgICAgIHZhciBkaXJDb3VudGVyID0gMDtcbiAgICAgIHZhciBmaWxlQ291bnRlciA9IDA7XG5cbiAgICAgIHZhciByZXNvbHZlSWZEb25lID0gZnVuY3Rpb24gcmVzb2x2ZUlmRG9uZSgpIHtcbiAgICAgICAgaWYgKGZpbGVDb3VudGVyID09PSAwICYmIGRpckNvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKGZpbGVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gdGhlIHJlY3Vyc2l2ZSBmdW5jdGlvblxuICAgICAgdmFyIHJlYWRFbnRyaWVzID0gZnVuY3Rpb24gcmVhZEVudHJpZXMoZGlyRW50cnkpIHtcbiAgICAgICAgZGlyQ291bnRlcisrO1xuXG4gICAgICAgIHZhciBkaXJlY3RvcnlSZWFkZXIgPSBkaXJFbnRyeS5jcmVhdGVSZWFkZXIoKTtcblxuICAgICAgICAvLyBkaXJlY3RvcmllcyBhcmUgcmV0dXJuZWQgaW4gYmF0Y2hlcywgd2UgbmVlZCB0byBwcm9jZXNzIGFsbCBiYXRjaGVzIGJlZm9yZSB3ZSdyZSBkb25lXG4gICAgICAgIHZhciByZWFkQmF0Y2ggPSBmdW5jdGlvbiByZWFkQmF0Y2goKSB7XG4gICAgICAgICAgZGlyZWN0b3J5UmVhZGVyLnJlYWRFbnRyaWVzKGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBkaXJDb3VudGVyLS07XG4gICAgICAgICAgICAgIHJlc29sdmVJZkRvbmUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlbHkgcmVhZCBtb3JlIGRpcmVjdG9yaWVzXG4gICAgICAgICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgICAgICAgICAgIHJlYWRFbnRyaWVzKGVudHJ5KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyByZWFkIGFzIGZpbGVcbiAgICAgICAgICAgICAgICBmaWxlQ291bnRlcisrO1xuXG4gICAgICAgICAgICAgICAgZW50cnkuZmlsZShmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY29ycmVjdGVkRmlsZSA9IGNvcnJlY3RNaXNzaW5nRmlsZVR5cGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICBpZiAoZW50cnkuZnVsbFBhdGgpXG4gICAgICAgICAgICAgICAgICAgIGNvcnJlY3RlZEZpbGUuX3JlbGF0aXZlUGF0aCA9IGVudHJ5LmZ1bGxQYXRoO1xuICAgICAgICAgICAgICAgICAgZmlsZXMucHVzaChjb3JyZWN0ZWRGaWxlKTtcbiAgICAgICAgICAgICAgICAgIGZpbGVDb3VudGVyLS07XG4gICAgICAgICAgICAgICAgICByZXNvbHZlSWZEb25lKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyB0cnkgdG8gZ2V0IG5leHQgYmF0Y2ggb2YgZmlsZXNcbiAgICAgICAgICAgIHJlYWRCYXRjaCgpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcmVhZCBmaXJzdCBiYXRjaCBvZiBmaWxlc1xuICAgICAgICByZWFkQmF0Y2goKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIGdvIVxuICAgICAgcmVhZEVudHJpZXMoZW50cnkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjb3JyZWN0TWlzc2luZ0ZpbGVUeXBlID0gZnVuY3Rpb24gY29ycmVjdE1pc3NpbmdGaWxlVHlwZShmaWxlKSB7XG4gICAgaWYgKGZpbGUudHlwZS5sZW5ndGgpIHJldHVybiBmaWxlO1xuICAgIHZhciBkYXRlID0gZmlsZS5sYXN0TW9kaWZpZWREYXRlO1xuICAgIHZhciBuYW1lID0gZmlsZS5uYW1lO1xuICAgIGZpbGUgPSBmaWxlLnNsaWNlKFxuICAgICAgMCxcbiAgICAgIGZpbGUuc2l6ZSxcbiAgICAgIGd1ZXNzdGltYXRlTWltZVR5cGUoZ2V0RXh0ZW5zaW9uRnJvbUZpbGVuYW1lKGZpbGUubmFtZSkpXG4gICAgKTtcbiAgICBmaWxlLm5hbWUgPSBuYW1lO1xuICAgIGZpbGUubGFzdE1vZGlmaWVkRGF0ZSA9IGRhdGU7XG4gICAgcmV0dXJuIGZpbGU7XG4gIH07XG5cbiAgdmFyIGlzRGlyZWN0b3J5RW50cnkgPSBmdW5jdGlvbiBpc0RpcmVjdG9yeUVudHJ5KGl0ZW0pIHtcbiAgICByZXR1cm4gaXNFbnRyeShpdGVtKSAmJiAoZ2V0QXNFbnRyeShpdGVtKSB8fCB7fSkuaXNEaXJlY3Rvcnk7XG4gIH07XG5cbiAgdmFyIGlzRW50cnkgPSBmdW5jdGlvbiBpc0VudHJ5KGl0ZW0pIHtcbiAgICByZXR1cm4gJ3dlYmtpdEdldEFzRW50cnknIGluIGl0ZW07XG4gIH07XG5cbiAgdmFyIGdldEFzRW50cnkgPSBmdW5jdGlvbiBnZXRBc0VudHJ5KGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS53ZWJraXRHZXRBc0VudHJ5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGxpbmtzIGZyb20gYSBEYXRhVHJhbnNmZXIgb2JqZWN0XG4gICAqL1xuICB2YXIgZ2V0TGlua3MgPSBmdW5jdGlvbiBnZXRMaW5rcyhkYXRhVHJhbnNmZXIpIHtcbiAgICB2YXIgbGlua3MgPSBbXTtcbiAgICB0cnkge1xuICAgICAgLy8gbG9vayBpbiBtZXRhIGRhdGEgcHJvcGVydHlcbiAgICAgIGxpbmtzID0gZ2V0TGlua3NGcm9tVHJhbnNmZXJNZXRhRGF0YShkYXRhVHJhbnNmZXIpO1xuICAgICAgaWYgKGxpbmtzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbGlua3M7XG4gICAgICB9XG4gICAgICBsaW5rcyA9IGdldExpbmtzRnJvbVRyYW5zZmVyVVJMRGF0YShkYXRhVHJhbnNmZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vcGUgbm9wZSBub3BlIChwcm9iYWJseSBJRSB0cm91YmxlKVxuICAgIH1cbiAgICByZXR1cm4gbGlua3M7XG4gIH07XG5cbiAgdmFyIGdldExpbmtzRnJvbVRyYW5zZmVyVVJMRGF0YSA9IGZ1bmN0aW9uIGdldExpbmtzRnJvbVRyYW5zZmVyVVJMRGF0YShcbiAgICBkYXRhVHJhbnNmZXJcbiAgKSB7XG4gICAgdmFyIGRhdGEgPSBkYXRhVHJhbnNmZXIuZ2V0RGF0YSgndXJsJyk7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtkYXRhXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuXG4gIHZhciBnZXRMaW5rc0Zyb21UcmFuc2Zlck1ldGFEYXRhID0gZnVuY3Rpb24gZ2V0TGlua3NGcm9tVHJhbnNmZXJNZXRhRGF0YShcbiAgICBkYXRhVHJhbnNmZXJcbiAgKSB7XG4gICAgdmFyIGRhdGEgPSBkYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9odG1sJyk7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJiBkYXRhLmxlbmd0aCkge1xuICAgICAgdmFyIG1hdGNoZXMgPSBkYXRhLm1hdGNoKC9zcmNcXHMqPVxccypcIiguKz8pXCIvKTtcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBbbWF0Y2hlc1sxXV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfTtcblxuICB2YXIgZHJhZ05Ecm9wT2JzZXJ2ZXJzID0gW107XG5cbiAgdmFyIGV2ZW50UG9zaXRpb24gPSBmdW5jdGlvbiBldmVudFBvc2l0aW9uKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZUxlZnQ6IGUucGFnZVgsXG4gICAgICBwYWdlVG9wOiBlLnBhZ2VZLFxuICAgICAgc2NvcGVMZWZ0OiBlLm9mZnNldFggfHwgZS5sYXllclgsXG4gICAgICBzY29wZVRvcDogZS5vZmZzZXRZIHx8IGUubGF5ZXJZXG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3JlYXRlRHJhZ05Ecm9wQ2xpZW50ID0gZnVuY3Rpb24gY3JlYXRlRHJhZ05Ecm9wQ2xpZW50KFxuICAgIGVsZW1lbnQsXG4gICAgc2NvcGVUb09ic2VydmUsXG4gICAgZmlsdGVyRWxlbWVudFxuICApIHtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBnZXREcmFnTkRyb3BPYnNlcnZlcihzY29wZVRvT2JzZXJ2ZSk7XG5cbiAgICB2YXIgY2xpZW50ID0ge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIGZpbHRlckVsZW1lbnQ6IGZpbHRlckVsZW1lbnQsXG4gICAgICBzdGF0ZTogbnVsbCxcbiAgICAgIG9uZHJvcDogZnVuY3Rpb24gb25kcm9wKCkge30sXG4gICAgICBvbmVudGVyOiBmdW5jdGlvbiBvbmVudGVyKCkge30sXG4gICAgICBvbmRyYWc6IGZ1bmN0aW9uIG9uZHJhZygpIHt9LFxuICAgICAgb25leGl0OiBmdW5jdGlvbiBvbmV4aXQoKSB7fSxcbiAgICAgIG9ubG9hZDogZnVuY3Rpb24gb25sb2FkKCkge30sXG4gICAgICBhbGxvd2Ryb3A6IGZ1bmN0aW9uIGFsbG93ZHJvcCgpIHt9XG4gICAgfTtcblxuICAgIGNsaWVudC5kZXN0cm95ID0gb2JzZXJ2ZXIuYWRkTGlzdGVuZXIoY2xpZW50KTtcblxuICAgIHJldHVybiBjbGllbnQ7XG4gIH07XG5cbiAgdmFyIGdldERyYWdORHJvcE9ic2VydmVyID0gZnVuY3Rpb24gZ2V0RHJhZ05Ecm9wT2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgIC8vIHNlZSBpZiBhbHJlYWR5IGV4aXN0cywgaWYgc28sIHJldHVyblxuICAgIHZhciBvYnNlcnZlciA9IGRyYWdORHJvcE9ic2VydmVycy5maW5kKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgfSk7XG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIG5ldyBvYnNlcnZlciwgZG9lcyBub3QgeWV0IGV4aXN0IGZvciB0aGlzIGVsZW1lbnRcbiAgICB2YXIgbmV3T2JzZXJ2ZXIgPSBjcmVhdGVEcmFnTkRyb3BPYnNlcnZlcihlbGVtZW50KTtcbiAgICBkcmFnTkRyb3BPYnNlcnZlcnMucHVzaChuZXdPYnNlcnZlcik7XG4gICAgcmV0dXJuIG5ld09ic2VydmVyO1xuICB9O1xuXG4gIHZhciBjcmVhdGVEcmFnTkRyb3BPYnNlcnZlciA9IGZ1bmN0aW9uIGNyZWF0ZURyYWdORHJvcE9ic2VydmVyKGVsZW1lbnQpIHtcbiAgICB2YXIgY2xpZW50cyA9IFtdO1xuXG4gICAgdmFyIHJvdXRlcyA9IHtcbiAgICAgIGRyYWdlbnRlcjogZHJhZ2VudGVyLFxuICAgICAgZHJhZ292ZXI6IGRyYWdvdmVyLFxuICAgICAgZHJhZ2xlYXZlOiBkcmFnbGVhdmUsXG4gICAgICBkcm9wOiBkcm9wXG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVycyA9IHt9O1xuXG4gICAgZm9yaW4ocm91dGVzLCBmdW5jdGlvbihldmVudCwgY3JlYXRlSGFuZGxlcikge1xuICAgICAgaGFuZGxlcnNbZXZlbnRdID0gY3JlYXRlSGFuZGxlcihlbGVtZW50LCBjbGllbnRzKTtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcnNbZXZlbnRdLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKGNsaWVudCkge1xuICAgICAgICAvLyBhZGQgYXMgY2xpZW50XG4gICAgICAgIGNsaWVudHMucHVzaChjbGllbnQpO1xuXG4gICAgICAgIC8vIHJldHVybiByZW1vdmVMaXN0ZW5lciBmdW5jdGlvblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIGNsaWVudFxuICAgICAgICAgIGNsaWVudHMuc3BsaWNlKGNsaWVudHMuaW5kZXhPZihjbGllbnQpLCAxKTtcblxuICAgICAgICAgIC8vIGlmIG5vIG1vcmUgY2xpZW50cywgY2xlYW4gdXAgb2JzZXJ2ZXJcbiAgICAgICAgICBpZiAoY2xpZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRyYWdORHJvcE9ic2VydmVycy5zcGxpY2UoZHJhZ05Ecm9wT2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpLCAxKTtcblxuICAgICAgICAgICAgZm9yaW4ocm91dGVzLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXJzW2V2ZW50XSwgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG4gIH07XG5cbiAgdmFyIGVsZW1lbnRGcm9tUG9pbnQgPSBmdW5jdGlvbiBlbGVtZW50RnJvbVBvaW50KHJvb3QsIHBvaW50KSB7XG4gICAgaWYgKCEoJ2VsZW1lbnRGcm9tUG9pbnQnIGluIHJvb3QpKSB7XG4gICAgICByb290ID0gZG9jdW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiByb290LmVsZW1lbnRGcm9tUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XG4gIH07XG5cbiAgdmFyIGlzRXZlbnRUYXJnZXQgPSBmdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KGUsIHRhcmdldCkge1xuICAgIC8vIGdldCByb290XG4gICAgdmFyIHJvb3QgPSBnZXRSb290Tm9kZSh0YXJnZXQpO1xuXG4gICAgLy8gZ2V0IGVsZW1lbnQgYXQgcG9zaXRpb25cbiAgICAvLyBpZiByb290IGlzIG5vdCBhY3R1YWwgc2hhZG93IERPTSBhbmQgZG9lcyBub3QgaGF2ZSBlbGVtZW50RnJvbVBvaW50IG1ldGhvZCwgdXNlIHRoZSBvbmUgb24gZG9jdW1lbnRcbiAgICB2YXIgZWxlbWVudEF0UG9zaXRpb24gPSBlbGVtZW50RnJvbVBvaW50KHJvb3QsIHtcbiAgICAgIHg6IGUucGFnZVggLSB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICB5OiBlLnBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgfSk7XG5cbiAgICAvLyB0ZXN0IGlmIHRhcmdldCBpcyB0aGUgZWxlbWVudCBvciBpZiBvbmUgb2YgaXRzIGNoaWxkcmVuIGlzXG4gICAgcmV0dXJuIGVsZW1lbnRBdFBvc2l0aW9uID09PSB0YXJnZXQgfHwgdGFyZ2V0LmNvbnRhaW5zKGVsZW1lbnRBdFBvc2l0aW9uKTtcbiAgfTtcblxuICB2YXIgaW5pdGlhbFRhcmdldCA9IG51bGw7XG5cbiAgdmFyIHNldERyb3BFZmZlY3QgPSBmdW5jdGlvbiBzZXREcm9wRWZmZWN0KGRhdGFUcmFuc2ZlciwgZWZmZWN0KSB7XG4gICAgLy8gaXMgaW4gdHJ5IGNhdGNoIGFzIElFMTEgd2lsbCB0aHJvdyBlcnJvciBpZiBub3RcbiAgICB0cnkge1xuICAgICAgZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSBlZmZlY3Q7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfTtcblxuICB2YXIgZHJhZ2VudGVyID0gZnVuY3Rpb24gZHJhZ2VudGVyKHJvb3QsIGNsaWVudHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpbml0aWFsVGFyZ2V0ID0gZS50YXJnZXQ7XG5cbiAgICAgIGNsaWVudHMuZm9yRWFjaChmdW5jdGlvbihjbGllbnQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBjbGllbnQuZWxlbWVudCxcbiAgICAgICAgICBvbmVudGVyID0gY2xpZW50Lm9uZW50ZXI7XG5cbiAgICAgICAgaWYgKGlzRXZlbnRUYXJnZXQoZSwgZWxlbWVudCkpIHtcbiAgICAgICAgICBjbGllbnQuc3RhdGUgPSAnZW50ZXInO1xuXG4gICAgICAgICAgLy8gZmlyZSBlbnRlciBldmVudFxuICAgICAgICAgIG9uZW50ZXIoZXZlbnRQb3NpdGlvbihlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGRyYWdvdmVyID0gZnVuY3Rpb24gZHJhZ292ZXIocm9vdCwgY2xpZW50cykge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHZhciBkYXRhVHJhbnNmZXIgPSBlLmRhdGFUcmFuc2ZlcjtcblxuICAgICAgcmVxdWVzdERhdGFUcmFuc2Zlckl0ZW1zKGRhdGFUcmFuc2ZlcikudGhlbihmdW5jdGlvbihpdGVtcykge1xuICAgICAgICB2YXIgb3ZlckRyb3BUYXJnZXQgPSBmYWxzZTtcblxuICAgICAgICBjbGllbnRzLnNvbWUoZnVuY3Rpb24oY2xpZW50KSB7XG4gICAgICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSBjbGllbnQuZmlsdGVyRWxlbWVudCxcbiAgICAgICAgICAgIGVsZW1lbnQgPSBjbGllbnQuZWxlbWVudCxcbiAgICAgICAgICAgIG9uZW50ZXIgPSBjbGllbnQub25lbnRlcixcbiAgICAgICAgICAgIG9uZXhpdCA9IGNsaWVudC5vbmV4aXQsXG4gICAgICAgICAgICBvbmRyYWcgPSBjbGllbnQub25kcmFnLFxuICAgICAgICAgICAgYWxsb3dkcm9wID0gY2xpZW50LmFsbG93ZHJvcDtcblxuICAgICAgICAgIC8vIGJ5IGRlZmF1bHQgd2UgY2FuIGRyb3BcbiAgICAgICAgICBzZXREcm9wRWZmZWN0KGRhdGFUcmFuc2ZlciwgJ2NvcHknKTtcblxuICAgICAgICAgIC8vIGFsbG93IHRyYW5zZmVyIG9mIHRoZXNlIGl0ZW1zXG4gICAgICAgICAgdmFyIGFsbG93c1RyYW5zZmVyID0gYWxsb3dkcm9wKGl0ZW1zKTtcblxuICAgICAgICAgIC8vIG9ubHkgdXNlZCB3aGVuIGNhbiBiZSBkcm9wcGVkIG9uIHBhZ2VcbiAgICAgICAgICBpZiAoIWFsbG93c1RyYW5zZmVyKSB7XG4gICAgICAgICAgICBzZXREcm9wRWZmZWN0KGRhdGFUcmFuc2ZlciwgJ25vbmUnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0YXJnZXR0aW5nIHRoaXMgY2xpZW50XG4gICAgICAgICAgaWYgKGlzRXZlbnRUYXJnZXQoZSwgZWxlbWVudCkpIHtcbiAgICAgICAgICAgIG92ZXJEcm9wVGFyZ2V0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gaGFkIG5vIHByZXZpb3VzIHN0YXRlLCBtZWFucyB3ZSBhcmUgZW50ZXJpbmcgdGhpcyBjbGllbnRcbiAgICAgICAgICAgIGlmIChjbGllbnQuc3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgY2xpZW50LnN0YXRlID0gJ2VudGVyJztcbiAgICAgICAgICAgICAgb25lbnRlcihldmVudFBvc2l0aW9uKGUpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBub3cgb3ZlciBlbGVtZW50IChubyBtYXR0ZXIgaWYgaXQgYWxsb3dzIHRoZSBkcm9wIG9yIG5vdClcbiAgICAgICAgICAgIGNsaWVudC5zdGF0ZSA9ICdvdmVyJztcblxuICAgICAgICAgICAgLy8gbmVlZHMgdG8gYWxsb3cgdHJhbnNmZXJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJFbGVtZW50ICYmICFhbGxvd3NUcmFuc2Zlcikge1xuICAgICAgICAgICAgICBzZXREcm9wRWZmZWN0KGRhdGFUcmFuc2ZlciwgJ25vbmUnKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkcmFnZ2luZ1xuICAgICAgICAgICAgb25kcmFnKGV2ZW50UG9zaXRpb24oZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgb3ZlciBhbiBlbGVtZW50IHRvIGRyb3BcbiAgICAgICAgICAgIGlmIChmaWx0ZXJFbGVtZW50ICYmICFvdmVyRHJvcFRhcmdldCkge1xuICAgICAgICAgICAgICBzZXREcm9wRWZmZWN0KGRhdGFUcmFuc2ZlciwgJ25vbmUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWlnaHQgaGF2ZSBqdXN0IGxlZnQgdGhpcyBjbGllbnQ/XG4gICAgICAgICAgICBpZiAoY2xpZW50LnN0YXRlKSB7XG4gICAgICAgICAgICAgIGNsaWVudC5zdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgIG9uZXhpdChldmVudFBvc2l0aW9uKGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3Aocm9vdCwgY2xpZW50cykge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHZhciBkYXRhVHJhbnNmZXIgPSBlLmRhdGFUcmFuc2ZlcjtcblxuICAgICAgcmVxdWVzdERhdGFUcmFuc2Zlckl0ZW1zKGRhdGFUcmFuc2ZlcikudGhlbihmdW5jdGlvbihpdGVtcykge1xuICAgICAgICBjbGllbnRzLmZvckVhY2goZnVuY3Rpb24oY2xpZW50KSB7XG4gICAgICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSBjbGllbnQuZmlsdGVyRWxlbWVudCxcbiAgICAgICAgICAgIGVsZW1lbnQgPSBjbGllbnQuZWxlbWVudCxcbiAgICAgICAgICAgIG9uZHJvcCA9IGNsaWVudC5vbmRyb3AsXG4gICAgICAgICAgICBvbmV4aXQgPSBjbGllbnQub25leGl0LFxuICAgICAgICAgICAgYWxsb3dkcm9wID0gY2xpZW50LmFsbG93ZHJvcDtcblxuICAgICAgICAgIGNsaWVudC5zdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAvLyBpZiB3ZSdyZSBmaWx0ZXJpbmcgb24gZWxlbWVudCB3ZSBuZWVkIHRvIGJlIG92ZXIgdGhlIGVsZW1lbnQgdG8gZHJvcFxuICAgICAgICAgIGlmIChmaWx0ZXJFbGVtZW50ICYmICFpc0V2ZW50VGFyZ2V0KGUsIGVsZW1lbnQpKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBubyB0cmFuc2ZlciBmb3IgdGhpcyBjbGllbnRcbiAgICAgICAgICBpZiAoIWFsbG93ZHJvcChpdGVtcykpIHJldHVybiBvbmV4aXQoZXZlbnRQb3NpdGlvbihlKSk7XG5cbiAgICAgICAgICAvLyB3ZSBjYW4gZHJvcCB0aGVzZSBpdGVtcyBvbiB0aGlzIGNsaWVudFxuICAgICAgICAgIG9uZHJvcChldmVudFBvc2l0aW9uKGUpLCBpdGVtcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZHJhZ2xlYXZlID0gZnVuY3Rpb24gZHJhZ2xlYXZlKHJvb3QsIGNsaWVudHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGluaXRpYWxUYXJnZXQgIT09IGUudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xpZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNsaWVudCkge1xuICAgICAgICB2YXIgb25leGl0ID0gY2xpZW50Lm9uZXhpdDtcblxuICAgICAgICBjbGllbnQuc3RhdGUgPSBudWxsO1xuXG4gICAgICAgIG9uZXhpdChldmVudFBvc2l0aW9uKGUpKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUhvcHBlciA9IGZ1bmN0aW9uIGNyZWF0ZUhvcHBlcihzY29wZSwgdmFsaWRhdGVJdGVtcywgb3B0aW9ucykge1xuICAgIC8vIGlzIG5vdyBob3BwZXIgc2NvcGVcbiAgICBzY29wZS5jbGFzc0xpc3QuYWRkKCdmaWxlcG9uZC0taG9wcGVyJyk7XG5cbiAgICAvLyBzaG9ydGN1dHNcbiAgICB2YXIgY2F0Y2hlc0Ryb3BzT25QYWdlID0gb3B0aW9ucy5jYXRjaGVzRHJvcHNPblBhZ2UsXG4gICAgICByZXF1aXJlc0Ryb3BPbkVsZW1lbnQgPSBvcHRpb25zLnJlcXVpcmVzRHJvcE9uRWxlbWVudCxcbiAgICAgIF9vcHRpb25zJGZpbHRlckl0ZW1zID0gb3B0aW9ucy5maWx0ZXJJdGVtcyxcbiAgICAgIGZpbHRlckl0ZW1zID1cbiAgICAgICAgX29wdGlvbnMkZmlsdGVySXRlbXMgPT09IHZvaWQgMFxuICAgICAgICAgID8gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDogX29wdGlvbnMkZmlsdGVySXRlbXM7XG5cbiAgICAvLyBjcmVhdGUgYSBkbmQgY2xpZW50XG4gICAgdmFyIGNsaWVudCA9IGNyZWF0ZURyYWdORHJvcENsaWVudChcbiAgICAgIHNjb3BlLFxuICAgICAgY2F0Y2hlc0Ryb3BzT25QYWdlID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogc2NvcGUsXG4gICAgICByZXF1aXJlc0Ryb3BPbkVsZW1lbnRcbiAgICApO1xuXG4gICAgLy8gY3VycmVudCBjbGllbnQgc3RhdGVcbiAgICB2YXIgbGFzdFN0YXRlID0gJyc7XG4gICAgdmFyIGN1cnJlbnRTdGF0ZSA9ICcnO1xuXG4gICAgLy8gZGV0ZXJtaW5lcyBpZiBhIGZpbGUgbWF5IGJlIGRyb3BwZWRcbiAgICBjbGllbnQuYWxsb3dkcm9wID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgIC8vIFRPRE86IGlmIHdlIGNhbiwgdGhyb3cgZXJyb3IgdG8gaW5kaWNhdGUgdGhlIGl0ZW1zIGNhbm5vdCBieSBkcm9wcGVkXG5cbiAgICAgIHJldHVybiB2YWxpZGF0ZUl0ZW1zKGZpbHRlckl0ZW1zKGl0ZW1zKSk7XG4gICAgfTtcblxuICAgIGNsaWVudC5vbmRyb3AgPSBmdW5jdGlvbihwb3NpdGlvbiwgaXRlbXMpIHtcbiAgICAgIHZhciBmaWx0ZXJlZEl0ZW1zID0gZmlsdGVySXRlbXMoaXRlbXMpO1xuXG4gICAgICBpZiAoIXZhbGlkYXRlSXRlbXMoZmlsdGVyZWRJdGVtcykpIHtcbiAgICAgICAgYXBpLm9uZHJhZ2VuZChwb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFN0YXRlID0gJ2RyYWctZHJvcCc7XG5cbiAgICAgIGFwaS5vbmxvYWQoZmlsdGVyZWRJdGVtcywgcG9zaXRpb24pO1xuICAgIH07XG5cbiAgICBjbGllbnQub25kcmFnID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgIGFwaS5vbmRyYWcocG9zaXRpb24pO1xuICAgIH07XG5cbiAgICBjbGllbnQub25lbnRlciA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICBjdXJyZW50U3RhdGUgPSAnZHJhZy1vdmVyJztcblxuICAgICAgYXBpLm9uZHJhZ3N0YXJ0KHBvc2l0aW9uKTtcbiAgICB9O1xuXG4gICAgY2xpZW50Lm9uZXhpdCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICBjdXJyZW50U3RhdGUgPSAnZHJhZy1leGl0JztcblxuICAgICAgYXBpLm9uZHJhZ2VuZChwb3NpdGlvbik7XG4gICAgfTtcblxuICAgIHZhciBhcGkgPSB7XG4gICAgICB1cGRhdGVIb3BwZXJTdGF0ZTogZnVuY3Rpb24gdXBkYXRlSG9wcGVyU3RhdGUoKSB7XG4gICAgICAgIGlmIChsYXN0U3RhdGUgIT09IGN1cnJlbnRTdGF0ZSkge1xuICAgICAgICAgIHNjb3BlLmRhdGFzZXQuaG9wcGVyU3RhdGUgPSBjdXJyZW50U3RhdGU7XG4gICAgICAgICAgbGFzdFN0YXRlID0gY3VycmVudFN0YXRlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25sb2FkOiBmdW5jdGlvbiBvbmxvYWQoKSB7fSxcbiAgICAgIG9uZHJhZ3N0YXJ0OiBmdW5jdGlvbiBvbmRyYWdzdGFydCgpIHt9LFxuICAgICAgb25kcmFnOiBmdW5jdGlvbiBvbmRyYWcoKSB7fSxcbiAgICAgIG9uZHJhZ2VuZDogZnVuY3Rpb24gb25kcmFnZW5kKCkge30sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAvLyBkZXN0cm95IGNsaWVudFxuICAgICAgICBjbGllbnQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gYXBpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdmFyIGxpc3RlbmVycyQxID0gW107XG5cbiAgdmFyIGhhbmRsZVBhc3RlID0gZnVuY3Rpb24gaGFuZGxlUGFzdGUoZSkge1xuICAgIC8vIGlmIGlzIHBhc3RpbmcgaW4gaW5wdXQgb3IgdGV4dGFyZWEgYW5kIHRoZSB0YXJnZXQgaXMgb3V0c2lkZSBvZiBhIGZpbGVwb25kIHNjb3BlLCBpZ25vcmVcbiAgICB2YXIgYWN0aXZlRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChhY3RpdmVFbCAmJiAvdGV4dGFyZWF8aW5wdXQvaS50ZXN0KGFjdGl2ZUVsLm5vZGVOYW1lKSkge1xuICAgICAgLy8gdGVzdCB0ZXh0YXJlYSBvciBpbnB1dCBpcyBjb250YWluZWQgaW4gZmlsZXBvbmQgcm9vdFxuICAgICAgdmFyIGluU2NvcGUgPSBmYWxzZTtcbiAgICAgIHZhciBlbGVtZW50ID0gYWN0aXZlRWw7XG4gICAgICB3aGlsZSAoZWxlbWVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZpbGVwb25kLS1yb290JykpIHtcbiAgICAgICAgICBpblNjb3BlID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluU2NvcGUpIHJldHVybjtcbiAgICB9XG5cbiAgICByZXF1ZXN0RGF0YVRyYW5zZmVySXRlbXMoZS5jbGlwYm9hcmREYXRhKS50aGVuKGZ1bmN0aW9uKGZpbGVzKSB7XG4gICAgICAvLyBubyBmaWxlcyByZWNlaXZlZFxuICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBub3RpZnkgbGlzdGVuZXJzIG9mIHJlY2VpdmVkIGZpbGVzXG4gICAgICBsaXN0ZW5lcnMkMS5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcihmaWxlcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGNiKSB7XG4gICAgLy8gY2FuJ3QgYWRkIHR3aWNlXG4gICAgaWYgKGxpc3RlbmVycyQxLmluY2x1ZGVzKGNiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkZCBpbml0aWFsIGxpc3RlbmVyXG4gICAgbGlzdGVuZXJzJDEucHVzaChjYik7XG5cbiAgICAvLyBzZXR1cCBwYXN0ZSBsaXN0ZW5lciBmb3IgZW50aXJlIHBhZ2VcbiAgICBpZiAobGlzdGVuaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGlzdGVuaW5nID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIGhhbmRsZVBhc3RlKTtcbiAgfTtcblxuICB2YXIgdW5saXN0ZW4gPSBmdW5jdGlvbiB1bmxpc3RlbihsaXN0ZW5lcikge1xuICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVycyQxLCBsaXN0ZW5lcnMkMS5pbmRleE9mKGxpc3RlbmVyKSk7XG5cbiAgICAvLyBjbGVhbiB1cFxuICAgIGlmIChsaXN0ZW5lcnMkMS5sZW5ndGggPT09IDApIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgaGFuZGxlUGFzdGUpO1xuICAgICAgbGlzdGVuaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVQYXN0ZXIgPSBmdW5jdGlvbiBjcmVhdGVQYXN0ZXIoKSB7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24gY2IoZmlsZXMpIHtcbiAgICAgIGFwaS5vbmxvYWQoZmlsZXMpO1xuICAgIH07XG5cbiAgICB2YXIgYXBpID0ge1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdW5saXN0ZW4oY2IpO1xuICAgICAgfSxcbiAgICAgIG9ubG9hZDogZnVuY3Rpb24gb25sb2FkKCkge31cbiAgICB9O1xuXG4gICAgbGlzdGVuKGNiKTtcblxuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIGZpbGUgdmlld1xuICAgKi9cbiAgdmFyIGNyZWF0ZSRkID0gZnVuY3Rpb24gY3JlYXRlKF9yZWYpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYucm9vdCxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgICByb290LmVsZW1lbnQuaWQgPSAnZmlsZXBvbmQtLWFzc2lzdGFudC0nICsgcHJvcHMuaWQ7XG4gICAgYXR0cihyb290LmVsZW1lbnQsICdyb2xlJywgJ3N0YXR1cycpO1xuICAgIGF0dHIocm9vdC5lbGVtZW50LCAnYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgIGF0dHIocm9vdC5lbGVtZW50LCAnYXJpYS1yZWxldmFudCcsICdhZGRpdGlvbnMnKTtcbiAgfTtcblxuICB2YXIgYWRkRmlsZXNOb3RpZmljYXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgdmFyIG5vdGlmaWNhdGlvbkNsZWFyVGltZW91dCA9IG51bGw7XG5cbiAgdmFyIGZpbGVuYW1lcyA9IFtdO1xuXG4gIHZhciBhc3Npc3QgPSBmdW5jdGlvbiBhc3Npc3Qocm9vdCwgbWVzc2FnZSkge1xuICAgIHJvb3QuZWxlbWVudC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIH07XG5cbiAgdmFyIGNsZWFyJDEgPSBmdW5jdGlvbiBjbGVhcihyb290KSB7XG4gICAgcm9vdC5lbGVtZW50LnRleHRDb250ZW50ID0gJyc7XG4gIH07XG5cbiAgdmFyIGxpc3RNb2RpZmllZCA9IGZ1bmN0aW9uIGxpc3RNb2RpZmllZChyb290LCBmaWxlbmFtZSwgbGFiZWwpIHtcbiAgICB2YXIgdG90YWwgPSByb290LnF1ZXJ5KCdHRVRfVE9UQUxfSVRFTVMnKTtcbiAgICBhc3Npc3QoXG4gICAgICByb290LFxuICAgICAgbGFiZWwgK1xuICAgICAgICAnICcgK1xuICAgICAgICBmaWxlbmFtZSArXG4gICAgICAgICcsICcgK1xuICAgICAgICB0b3RhbCArXG4gICAgICAgICcgJyArXG4gICAgICAgICh0b3RhbCA9PT0gMVxuICAgICAgICAgID8gcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfQ09VTlRfU0lOR1VMQVInKVxuICAgICAgICAgIDogcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfQ09VTlRfUExVUkFMJykpXG4gICAgKTtcblxuICAgIC8vIGNsZWFyIGdyb3VwIGFmdGVyIHNldCBhbW91bnQgb2YgdGltZSBzbyB0aGUgc3RhdHVzIGlzIG5vdCByZWFkIHR3aWNlXG4gICAgY2xlYXJUaW1lb3V0KG5vdGlmaWNhdGlvbkNsZWFyVGltZW91dCk7XG4gICAgbm90aWZpY2F0aW9uQ2xlYXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyJDEocm9vdCk7XG4gICAgfSwgMTUwMCk7XG4gIH07XG5cbiAgdmFyIGlzVXNpbmdGaWxlUG9uZCA9IGZ1bmN0aW9uIGlzVXNpbmdGaWxlUG9uZChyb290KSB7XG4gICAgcmV0dXJuIHJvb3QuZWxlbWVudC5wYXJlbnROb2RlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICB9O1xuXG4gIHZhciBpdGVtQWRkZWQgPSBmdW5jdGlvbiBpdGVtQWRkZWQoX3JlZjIpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYyLnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmMi5hY3Rpb247XG4gICAgaWYgKCFpc1VzaW5nRmlsZVBvbmQocm9vdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByb290LmVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgICB2YXIgaXRlbSA9IHJvb3QucXVlcnkoJ0dFVF9JVEVNJywgYWN0aW9uLmlkKTtcbiAgICBmaWxlbmFtZXMucHVzaChpdGVtLmZpbGVuYW1lKTtcblxuICAgIGNsZWFyVGltZW91dChhZGRGaWxlc05vdGlmaWNhdGlvblRpbWVvdXQpO1xuICAgIGFkZEZpbGVzTm90aWZpY2F0aW9uVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBsaXN0TW9kaWZpZWQoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGZpbGVuYW1lcy5qb2luKCcsICcpLFxuICAgICAgICByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9BRERFRCcpXG4gICAgICApO1xuXG4gICAgICBmaWxlbmFtZXMubGVuZ3RoID0gMDtcbiAgICB9LCA3NTApO1xuICB9O1xuXG4gIHZhciBpdGVtUmVtb3ZlZCA9IGZ1bmN0aW9uIGl0ZW1SZW1vdmVkKF9yZWYzKSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmMy5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjMuYWN0aW9uO1xuICAgIGlmICghaXNVc2luZ0ZpbGVQb25kKHJvb3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGl0ZW0gPSBhY3Rpb24uaXRlbTtcbiAgICBsaXN0TW9kaWZpZWQocm9vdCwgaXRlbS5maWxlbmFtZSwgcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0ZJTEVfUkVNT1ZFRCcpKTtcbiAgfTtcblxuICB2YXIgaXRlbVByb2Nlc3NlZCA9IGZ1bmN0aW9uIGl0ZW1Qcm9jZXNzZWQoX3JlZjQpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY0LnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmNC5hY3Rpb247XG4gICAgLy8gd2lsbCBhbHNvIG5vdGlmeSB0aGUgdXNlciB3aGVuIEZpbGVQb25kIGlzIG5vdCBiZWluZyB1c2VkLCBhcyB0aGUgdXNlciBtaWdodCBiZSBvY2N1cGllZCB3aXRoIG90aGVyIGFjdGl2aXRpZXMgd2hpbGUgdXBsb2FkaW5nIGEgZmlsZVxuXG4gICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIGFjdGlvbi5pZCk7XG4gICAgdmFyIGZpbGVuYW1lID0gaXRlbS5maWxlbmFtZTtcbiAgICB2YXIgbGFiZWwgPSByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HX0NPTVBMRVRFJyk7XG5cbiAgICBhc3Npc3Qocm9vdCwgZmlsZW5hbWUgKyAnICcgKyBsYWJlbCk7XG4gIH07XG5cbiAgdmFyIGl0ZW1Qcm9jZXNzZWRVbmRvID0gZnVuY3Rpb24gaXRlbVByb2Nlc3NlZFVuZG8oX3JlZjUpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWY1LnJvb3QsXG4gICAgICBhY3Rpb24gPSBfcmVmNS5hY3Rpb247XG4gICAgdmFyIGl0ZW0gPSByb290LnF1ZXJ5KCdHRVRfSVRFTScsIGFjdGlvbi5pZCk7XG4gICAgdmFyIGZpbGVuYW1lID0gaXRlbS5maWxlbmFtZTtcbiAgICB2YXIgbGFiZWwgPSByb290LnF1ZXJ5KCdHRVRfTEFCRUxfRklMRV9QUk9DRVNTSU5HX0FCT1JURUQnKTtcblxuICAgIGFzc2lzdChyb290LCBmaWxlbmFtZSArICcgJyArIGxhYmVsKTtcbiAgfTtcblxuICB2YXIgaXRlbUVycm9yID0gZnVuY3Rpb24gaXRlbUVycm9yKF9yZWY2KSB7XG4gICAgdmFyIHJvb3QgPSBfcmVmNi5yb290LFxuICAgICAgYWN0aW9uID0gX3JlZjYuYWN0aW9uO1xuICAgIHZhciBpdGVtID0gcm9vdC5xdWVyeSgnR0VUX0lURU0nLCBhY3Rpb24uaWQpO1xuICAgIHZhciBmaWxlbmFtZSA9IGl0ZW0uZmlsZW5hbWU7XG5cbiAgICAvLyB3aWxsIGFsc28gbm90aWZ5IHRoZSB1c2VyIHdoZW4gRmlsZVBvbmQgaXMgbm90IGJlaW5nIHVzZWQsIGFzIHRoZSB1c2VyIG1pZ2h0IGJlIG9jY3VwaWVkIHdpdGggb3RoZXIgYWN0aXZpdGllcyB3aGlsZSB1cGxvYWRpbmcgYSBmaWxlXG5cbiAgICBhc3Npc3Qocm9vdCwgYWN0aW9uLnN0YXR1cy5tYWluICsgJyAnICsgZmlsZW5hbWUgKyAnICcgKyBhY3Rpb24uc3RhdHVzLnN1Yik7XG4gIH07XG5cbiAgdmFyIGFzc2lzdGFudCA9IGNyZWF0ZVZpZXcoe1xuICAgIGNyZWF0ZTogY3JlYXRlJGQsXG4gICAgaWdub3JlUmVjdDogdHJ1ZSxcbiAgICBpZ25vcmVSZWN0VXBkYXRlOiB0cnVlLFxuICAgIHdyaXRlOiBjcmVhdGVSb3V0ZSh7XG4gICAgICBESURfTE9BRF9JVEVNOiBpdGVtQWRkZWQsXG4gICAgICBESURfUkVNT1ZFX0lURU06IGl0ZW1SZW1vdmVkLFxuICAgICAgRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzogaXRlbVByb2Nlc3NlZCxcblxuICAgICAgRElEX0FCT1JUX0lURU1fUFJPQ0VTU0lORzogaXRlbVByb2Nlc3NlZFVuZG8sXG4gICAgICBESURfUkVWRVJUX0lURU1fUFJPQ0VTU0lORzogaXRlbVByb2Nlc3NlZFVuZG8sXG5cbiAgICAgIERJRF9USFJPV19JVEVNX1JFTU9WRV9FUlJPUjogaXRlbUVycm9yLFxuICAgICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjogaXRlbUVycm9yLFxuICAgICAgRElEX1RIUk9XX0lURU1fSU5WQUxJRDogaXRlbUVycm9yLFxuICAgICAgRElEX1RIUk9XX0lURU1fUFJPQ0VTU0lOR19FUlJPUjogaXRlbUVycm9yXG4gICAgfSksXG5cbiAgICB0YWc6ICdzcGFuJyxcbiAgICBuYW1lOiAnYXNzaXN0YW50J1xuICB9KTtcblxuICB2YXIgdG9DYW1lbHMgPSBmdW5jdGlvbiB0b0NhbWVscyhzdHJpbmcpIHtcbiAgICB2YXIgc2VwYXJhdG9yID1cbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJy0nO1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHNlcGFyYXRvciArICcuJywgJ2cnKSwgZnVuY3Rpb24oc3ViKSB7XG4gICAgICByZXR1cm4gc3ViLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMpIHtcbiAgICB2YXIgaW50ZXJ2YWwgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxNjtcbiAgICB2YXIgaW1taWRpYXRlT25seSA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgdmFyIGxhc3QgPSBEYXRlLm5vdygpO1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7XG4gICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICBfa2V5KytcbiAgICAgICkge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXG4gICAgICB2YXIgZGlzdCA9IERhdGUubm93KCkgLSBsYXN0O1xuXG4gICAgICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHtcbiAgICAgICAgbGFzdCA9IERhdGUubm93KCk7XG4gICAgICAgIGZ1bmMuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChkaXN0IDwgaW50ZXJ2YWwpIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBkZWxheSBieSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGludGVydmFsIGFuZCBkaXN0XG4gICAgICAgIC8vIGZvciBleGFtcGxlOiBpZiBkaXN0YW5jZSBpcyAxMCBtcyBhbmQgaW50ZXJ2YWwgaXMgMTYgbXMsXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd2FpdCBhbiBhZGRpdGlvbmFsIDZtcyBiZWZvcmUgY2FsbGluZyB0aGUgZnVuY3Rpb24pXG4gICAgICAgIGlmICghaW1taWRpYXRlT25seSkge1xuICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBpbnRlcnZhbCAtIGRpc3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnbyFcbiAgICAgICAgZm4oKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBNQVhfRklMRVNfTElNSVQgPSAxMDAwMDAwO1xuXG4gIHZhciBwcmV2ZW50ID0gZnVuY3Rpb24gcHJldmVudChlKSB7XG4gICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlJGUgPSBmdW5jdGlvbiBjcmVhdGUoX3JlZikge1xuICAgIHZhciByb290ID0gX3JlZi5yb290LFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzO1xuXG4gICAgLy8gQWRkIGlkXG4gICAgdmFyIGlkID0gcm9vdC5xdWVyeSgnR0VUX0lEJyk7XG4gICAgaWYgKGlkKSB7XG4gICAgICByb290LmVsZW1lbnQuaWQgPSBpZDtcbiAgICB9XG5cbiAgICAvLyBBZGQgY2xhc3NOYW1lXG4gICAgdmFyIGNsYXNzTmFtZSA9IHJvb3QucXVlcnkoJ0dFVF9DTEFTU19OQU1FJyk7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lXG4gICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgIHJldHVybiBuYW1lLmxlbmd0aDtcbiAgICAgICAgfSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgIHJvb3QuZWxlbWVudC5jbGFzc0xpc3QuYWRkKG5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBGaWVsZCBsYWJlbFxuICAgIHJvb3QucmVmLmxhYmVsID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhcbiAgICAgICAgZHJvcExhYmVsLFxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHRyYW5zbGF0ZVk6IG51bGwsXG4gICAgICAgICAgY2FwdGlvbjogcm9vdC5xdWVyeSgnR0VUX0xBQkVMX0lETEUnKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG5cbiAgICAvLyBMaXN0IG9mIGl0ZW1zXG4gICAgcm9vdC5yZWYubGlzdCA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgcm9vdC5jcmVhdGVDaGlsZFZpZXcobGlzdFNjcm9sbGVyLCB7IHRyYW5zbGF0ZVk6IG51bGwgfSlcbiAgICApO1xuXG4gICAgLy8gQmFja2dyb3VuZCBwYW5lbFxuICAgIHJvb3QucmVmLnBhbmVsID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhwYW5lbCwgeyBuYW1lOiAncGFuZWwtcm9vdCcgfSlcbiAgICApO1xuXG4gICAgLy8gQXNzaXN0YW50IG5vdGlmaWVzIGFzc2lzdGl2ZSB0ZWNoIHdoZW4gY29udGVudCBjaGFuZ2VzXG4gICAgcm9vdC5yZWYuYXNzaXN0YW50ID0gcm9vdC5hcHBlbmRDaGlsZFZpZXcoXG4gICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhhc3Npc3RhbnQsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSlcbiAgICApO1xuXG4gICAgLy8gRGF0YVxuICAgIHJvb3QucmVmLmRhdGEgPSByb290LmFwcGVuZENoaWxkVmlldyhcbiAgICAgIHJvb3QuY3JlYXRlQ2hpbGRWaWV3KGRhdGEsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSlcbiAgICApO1xuXG4gICAgLy8gTWVhc3VyZSAodGVzdHMgaWYgZml4ZWQgaGVpZ2h0IHdhcyBzZXQpXG4gICAgLy8gRE9DVFlQRSBuZWVkcyB0byBiZSBzZXQgZm9yIHRoaXMgdG8gd29ya1xuICAgIHJvb3QucmVmLm1lYXN1cmUgPSBjcmVhdGVFbGVtZW50JDEoJ2RpdicpO1xuICAgIHJvb3QucmVmLm1lYXN1cmUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgIHJvb3QuZWxlbWVudC5hcHBlbmRDaGlsZChyb290LnJlZi5tZWFzdXJlKTtcblxuICAgIC8vIGluZm9ybWF0aW9uIG9uIHRoZSByb290IGhlaWdodCBvciBmaXhlZCBoZWlnaHQgc3RhdHVzXG4gICAgcm9vdC5yZWYuYm91bmRzID0gbnVsbDtcblxuICAgIC8vIGFwcGx5IGluaXRpYWwgc3R5bGUgcHJvcGVydGllc1xuICAgIHJvb3RcbiAgICAgIC5xdWVyeSgnR0VUX1NUWUxFUycpXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKHN0eWxlKSB7XG4gICAgICAgIHJldHVybiAhaXNFbXB0eShzdHlsZS52YWx1ZSk7XG4gICAgICB9KVxuICAgICAgLm1hcChmdW5jdGlvbihfcmVmMikge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWUsXG4gICAgICAgICAgdmFsdWUgPSBfcmVmMi52YWx1ZTtcbiAgICAgICAgcm9vdC5lbGVtZW50LmRhdGFzZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHdpZHRoIGNoYW5nZWRcbiAgICByb290LnJlZi53aWR0aFByZXZpb3VzID0gbnVsbDtcbiAgICByb290LnJlZi53aWR0aFVwZGF0ZWQgPSBkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgIHJvb3QucmVmLnVwZGF0ZUhpc3RvcnkgPSBbXTtcbiAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9SRVNJWkVfUk9PVCcpO1xuICAgIH0sIDI1MCk7XG5cbiAgICAvLyBoaXN0b3J5IG9mIHVwZGF0ZXNcbiAgICByb290LnJlZi5wcmV2aW91c0FzcGVjdFJhdGlvID0gbnVsbDtcbiAgICByb290LnJlZi51cGRhdGVIaXN0b3J5ID0gW107XG5cbiAgICAvLyBwcmV2ZW50IHNjcm9sbGluZyBhbmQgem9vbWluZyBvbiBpT1MgKG9ubHkgaWYgc3VwcG9ydHMgcG9pbnRlciBldmVudHMsIGZvciB0aGVuIHdlIGNhbiBlbmFibGUgcmVvcmRlcilcbiAgICB2YXIgY2FuSG92ZXIgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHBvaW50ZXI6IGZpbmUpIGFuZCAoaG92ZXI6IGhvdmVyKScpXG4gICAgICAubWF0Y2hlcztcbiAgICB2YXIgaGFzUG9pbnRlckV2ZW50cyA9ICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdztcbiAgICBpZiAocm9vdC5xdWVyeSgnR0VUX0FMTE9XX1JFT1JERVInKSAmJiBoYXNQb2ludGVyRXZlbnRzICYmICFjYW5Ib3Zlcikge1xuICAgICAgcm9vdC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICByb290LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZ2VzdHVyZXN0YXJ0JywgcHJldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB3cml0ZSQ5ID0gZnVuY3Rpb24gd3JpdGUoX3JlZjMpIHtcbiAgICB2YXIgcm9vdCA9IF9yZWYzLnJvb3QsXG4gICAgICBwcm9wcyA9IF9yZWYzLnByb3BzLFxuICAgICAgYWN0aW9ucyA9IF9yZWYzLmFjdGlvbnM7XG5cbiAgICAvLyByb3V0ZSBhY3Rpb25zXG4gICAgcm91dGUkNSh7IHJvb3Q6IHJvb3QsIHByb3BzOiBwcm9wcywgYWN0aW9uczogYWN0aW9ucyB9KTtcblxuICAgIC8vIGFwcGx5IHN0eWxlIHByb3BlcnRpZXNcbiAgICBhY3Rpb25zXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gL15ESURfU0VUX1NUWUxFXy8udGVzdChhY3Rpb24udHlwZSk7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICFpc0VtcHR5KGFjdGlvbi5kYXRhLnZhbHVlKTtcbiAgICAgIH0pXG4gICAgICAubWFwKGZ1bmN0aW9uKF9yZWY0KSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjQudHlwZSxcbiAgICAgICAgICBkYXRhID0gX3JlZjQuZGF0YTtcbiAgICAgICAgdmFyIG5hbWUgPSB0b0NhbWVscyh0eXBlLnN1YnN0cig4KS50b0xvd2VyQ2FzZSgpLCAnXycpO1xuICAgICAgICByb290LmVsZW1lbnQuZGF0YXNldFtuYW1lXSA9IGRhdGEudmFsdWU7XG4gICAgICAgIHJvb3QuaW52YWxpZGF0ZUxheW91dCgpO1xuICAgICAgfSk7XG5cbiAgICBpZiAocm9vdC5yZWN0LmVsZW1lbnQuaGlkZGVuKSByZXR1cm47XG5cbiAgICBpZiAocm9vdC5yZWN0LmVsZW1lbnQud2lkdGggIT09IHJvb3QucmVmLndpZHRoUHJldmlvdXMpIHtcbiAgICAgIHJvb3QucmVmLndpZHRoUHJldmlvdXMgPSByb290LnJlY3QuZWxlbWVudC53aWR0aDtcbiAgICAgIHJvb3QucmVmLndpZHRoVXBkYXRlZCgpO1xuICAgIH1cblxuICAgIC8vIGdldCBib3ggYm91bmRzLCB3ZSBkbyB0aGlzIG9ubHkgb25jZVxuICAgIHZhciBib3VuZHMgPSByb290LnJlZi5ib3VuZHM7XG4gICAgaWYgKCFib3VuZHMpIHtcbiAgICAgIGJvdW5kcyA9IHJvb3QucmVmLmJvdW5kcyA9IGNhbGN1bGF0ZVJvb3RCb3VuZGluZ0JveEhlaWdodChyb290KTtcblxuICAgICAgLy8gZGVzdHJveSBtZWFzdXJlIGVsZW1lbnRcbiAgICAgIHJvb3QuZWxlbWVudC5yZW1vdmVDaGlsZChyb290LnJlZi5tZWFzdXJlKTtcbiAgICAgIHJvb3QucmVmLm1lYXN1cmUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIGdldCBxdWljayByZWZlcmVuY2VzIHRvIHZhcmlvdXMgaGlnaCBsZXZlbCBwYXJ0cyBvZiB0aGUgdXBsb2FkIHRvb2xcbiAgICB2YXIgX3Jvb3QkcmVmID0gcm9vdC5yZWYsXG4gICAgICBob3BwZXIgPSBfcm9vdCRyZWYuaG9wcGVyLFxuICAgICAgbGFiZWwgPSBfcm9vdCRyZWYubGFiZWwsXG4gICAgICBsaXN0ID0gX3Jvb3QkcmVmLmxpc3QsXG4gICAgICBwYW5lbCA9IF9yb290JHJlZi5wYW5lbDtcblxuICAgIC8vIHNldHMgY29ycmVjdCBzdGF0ZSB0byBob3BwZXIgc2NvcGVcbiAgICBpZiAoaG9wcGVyKSB7XG4gICAgICBob3BwZXIudXBkYXRlSG9wcGVyU3RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBib29sIHRvIGluZGljYXRlIGlmIHdlJ3JlIGZ1bGwgb3Igbm90XG4gICAgdmFyIGFzcGVjdFJhdGlvID0gcm9vdC5xdWVyeSgnR0VUX1BBTkVMX0FTUEVDVF9SQVRJTycpO1xuICAgIHZhciBpc011bHRpSXRlbSA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19NVUxUSVBMRScpO1xuICAgIHZhciB0b3RhbEl0ZW1zID0gcm9vdC5xdWVyeSgnR0VUX1RPVEFMX0lURU1TJyk7XG4gICAgdmFyIG1heEl0ZW1zID0gaXNNdWx0aUl0ZW1cbiAgICAgID8gcm9vdC5xdWVyeSgnR0VUX01BWF9GSUxFUycpIHx8IE1BWF9GSUxFU19MSU1JVFxuICAgICAgOiAxO1xuICAgIHZhciBhdE1heENhcGFjaXR5ID0gdG90YWxJdGVtcyA9PT0gbWF4SXRlbXM7XG5cbiAgICAvLyBhY3Rpb24gdXNlZCB0byBhZGQgaXRlbVxuICAgIHZhciBhZGRBY3Rpb24gPSBhY3Rpb25zLmZpbmQoZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdESURfQUREX0lURU0nO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgcmVhY2hlZCBtYXggY2FwYWNpdHkgYW5kIHdlJ3ZlIGp1c3QgcmVhY2hlZCBpdFxuICAgIGlmIChhdE1heENhcGFjaXR5ICYmIGFkZEFjdGlvbikge1xuICAgICAgLy8gZ2V0IGludGVyYWN0aW9uIHR5cGVcbiAgICAgIHZhciBpbnRlcmFjdGlvbk1ldGhvZCA9IGFkZEFjdGlvbi5kYXRhLmludGVyYWN0aW9uTWV0aG9kO1xuXG4gICAgICAvLyBoaWRlIGxhYmVsXG4gICAgICBsYWJlbC5vcGFjaXR5ID0gMDtcblxuICAgICAgaWYgKGlzTXVsdGlJdGVtKSB7XG4gICAgICAgIGxhYmVsLnRyYW5zbGF0ZVkgPSAtNDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW50ZXJhY3Rpb25NZXRob2QgPT09IEludGVyYWN0aW9uTWV0aG9kLkFQSSkge1xuICAgICAgICAgIGxhYmVsLnRyYW5zbGF0ZVggPSA0MDtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcmFjdGlvbk1ldGhvZCA9PT0gSW50ZXJhY3Rpb25NZXRob2QuQlJPV1NFKSB7XG4gICAgICAgICAgbGFiZWwudHJhbnNsYXRlWSA9IDQwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhYmVsLnRyYW5zbGF0ZVkgPSAzMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWF0TWF4Q2FwYWNpdHkpIHtcbiAgICAgIGxhYmVsLm9wYWNpdHkgPSAxO1xuICAgICAgbGFiZWwudHJhbnNsYXRlWCA9IDA7XG4gICAgICBsYWJlbC50cmFuc2xhdGVZID0gMDtcbiAgICB9XG5cbiAgICB2YXIgbGlzdEl0ZW1NYXJnaW4gPSBjYWxjdWxhdGVMaXN0SXRlbU1hcmdpbihyb290KTtcblxuICAgIHZhciBsaXN0SGVpZ2h0ID0gY2FsY3VsYXRlTGlzdEhlaWdodChyb290KTtcblxuICAgIHZhciBsYWJlbEhlaWdodCA9IGxhYmVsLnJlY3QuZWxlbWVudC5oZWlnaHQ7XG4gICAgdmFyIGN1cnJlbnRMYWJlbEhlaWdodCA9ICFpc011bHRpSXRlbSB8fCBhdE1heENhcGFjaXR5ID8gMCA6IGxhYmVsSGVpZ2h0O1xuXG4gICAgdmFyIGxpc3RNYXJnaW5Ub3AgPSBhdE1heENhcGFjaXR5ID8gbGlzdC5yZWN0LmVsZW1lbnQubWFyZ2luVG9wIDogMDtcbiAgICB2YXIgbGlzdE1hcmdpbkJvdHRvbSA9XG4gICAgICB0b3RhbEl0ZW1zID09PSAwID8gMCA6IGxpc3QucmVjdC5lbGVtZW50Lm1hcmdpbkJvdHRvbTtcblxuICAgIHZhciB2aXN1YWxIZWlnaHQgPVxuICAgICAgY3VycmVudExhYmVsSGVpZ2h0ICsgbGlzdE1hcmdpblRvcCArIGxpc3RIZWlnaHQudmlzdWFsICsgbGlzdE1hcmdpbkJvdHRvbTtcbiAgICB2YXIgYm91bmRzSGVpZ2h0ID1cbiAgICAgIGN1cnJlbnRMYWJlbEhlaWdodCArIGxpc3RNYXJnaW5Ub3AgKyBsaXN0SGVpZ2h0LmJvdW5kcyArIGxpc3RNYXJnaW5Cb3R0b207XG5cbiAgICAvLyBsaW5rIGxpc3QgdG8gbGFiZWwgYm90dG9tIHBvc2l0aW9uXG4gICAgbGlzdC50cmFuc2xhdGVZID1cbiAgICAgIE1hdGgubWF4KDAsIGN1cnJlbnRMYWJlbEhlaWdodCAtIGxpc3QucmVjdC5lbGVtZW50Lm1hcmdpblRvcCkgLVxuICAgICAgbGlzdEl0ZW1NYXJnaW4udG9wO1xuXG4gICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAvLyBmaXhlZCBhc3BlY3QgcmF0aW9cblxuICAgICAgLy8gY2FsY3VsYXRlIGhlaWdodCBiYXNlZCBvbiB3aWR0aFxuICAgICAgdmFyIHdpZHRoID0gcm9vdC5yZWN0LmVsZW1lbnQud2lkdGg7XG4gICAgICB2YXIgaGVpZ2h0ID0gd2lkdGggKiBhc3BlY3RSYXRpbztcblxuICAgICAgLy8gY2xlYXIgaGlzdG9yeSBpZiBhc3BlY3QgcmF0aW8gaGFzIGNoYW5nZWRcbiAgICAgIGlmIChhc3BlY3RSYXRpbyAhPT0gcm9vdC5yZWYucHJldmlvdXNBc3BlY3RSYXRpbykge1xuICAgICAgICByb290LnJlZi5wcmV2aW91c0FzcGVjdFJhdGlvID0gYXNwZWN0UmF0aW87XG4gICAgICAgIHJvb3QucmVmLnVwZGF0ZUhpc3RvcnkgPSBbXTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtZW1iZXIgdGhpcyB3aWR0aFxuICAgICAgdmFyIGhpc3RvcnkgPSByb290LnJlZi51cGRhdGVIaXN0b3J5O1xuICAgICAgaGlzdG9yeS5wdXNoKHdpZHRoKTtcblxuICAgICAgdmFyIE1BWF9CT1VOQ0VTID0gMjtcbiAgICAgIGlmIChoaXN0b3J5Lmxlbmd0aCA+IE1BWF9CT1VOQ0VTICogMikge1xuICAgICAgICB2YXIgbCA9IGhpc3RvcnkubGVuZ3RoO1xuICAgICAgICB2YXIgYm90dG9tID0gbCAtIDEwO1xuICAgICAgICB2YXIgYm91bmNlcyA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSBsOyBpID49IGJvdHRvbTsgaS0tKSB7XG4gICAgICAgICAgaWYgKGhpc3RvcnlbaV0gPT09IGhpc3RvcnlbaSAtIDJdKSB7XG4gICAgICAgICAgICBib3VuY2VzKys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJvdW5jZXMgPj0gTUFYX0JPVU5DRVMpIHtcbiAgICAgICAgICAgIC8vIGRvbnQgYWRqdXN0IGhlaWdodFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmaXggaGVpZ2h0IG9mIHBhbmVsIHNvIGl0IGFkaGVyZXMgdG8gYXNwZWN0IHJhdGlvXG4gICAgICBwYW5lbC5zY2FsYWJsZSA9IGZhbHNlO1xuICAgICAgcGFuZWwuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAvLyBhdmFpbGFibGUgaGVpZ2h0IGZvciBsaXN0XG4gICAgICB2YXIgbGlzdEF2YWlsYWJsZUhlaWdodCA9XG4gICAgICAgIC8vIHRoZSBoZWlnaHQgb2YgdGhlIHBhbmVsIG1pbnVzIHRoZSBsYWJlbCBoZWlnaHRcbiAgICAgICAgaGVpZ2h0IC1cbiAgICAgICAgY3VycmVudExhYmVsSGVpZ2h0IC1cbiAgICAgICAgLy8gdGhlIHJvb20gd2UgbGVhdmUgb3BlbiBiZXR3ZWVuIHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHRoZSBwYW5lbCBib3R0b21cbiAgICAgICAgKGxpc3RNYXJnaW5Cb3R0b20gLSBsaXN0SXRlbU1hcmdpbi5ib3R0b20pIC1cbiAgICAgICAgLy8gaWYgd2UncmUgZnVsbCB3ZSBuZWVkIHRvIGxlYXZlIHNvbWUgcm9vbSBiZXR3ZWVuIHRoZSB0b3Agb2YgdGhlIHBhbmVsIGFuZCB0aGUgbGlzdFxuICAgICAgICAoYXRNYXhDYXBhY2l0eSA/IGxpc3RNYXJnaW5Ub3AgOiAwKTtcblxuICAgICAgaWYgKGxpc3RIZWlnaHQudmlzdWFsID4gbGlzdEF2YWlsYWJsZUhlaWdodCkge1xuICAgICAgICBsaXN0Lm92ZXJmbG93ID0gbGlzdEF2YWlsYWJsZUhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3Qub3ZlcmZsb3cgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgY29udGFpbmVyIGJvdW5kcyAoc28gcHVzaGVzIHNpYmxpbmdzIGRvd253YXJkcylcbiAgICAgIHJvb3QuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAoYm91bmRzLmZpeGVkSGVpZ2h0KSB7XG4gICAgICAvLyBmaXhlZCBoZWlnaHRcblxuICAgICAgLy8gZml4IGhlaWdodCBvZiBwYW5lbFxuICAgICAgcGFuZWwuc2NhbGFibGUgPSBmYWxzZTtcblxuICAgICAgLy8gYXZhaWxhYmxlIGhlaWdodCBmb3IgbGlzdFxuICAgICAgdmFyIF9saXN0QXZhaWxhYmxlSGVpZ2h0ID1cbiAgICAgICAgLy8gdGhlIGhlaWdodCBvZiB0aGUgcGFuZWwgbWludXMgdGhlIGxhYmVsIGhlaWdodFxuICAgICAgICBib3VuZHMuZml4ZWRIZWlnaHQgLVxuICAgICAgICBjdXJyZW50TGFiZWxIZWlnaHQgLVxuICAgICAgICAvLyB0aGUgcm9vbSB3ZSBsZWF2ZSBvcGVuIGJldHdlZW4gdGhlIGVuZCBvZiB0aGUgbGlzdCBhbmQgdGhlIHBhbmVsIGJvdHRvbVxuICAgICAgICAobGlzdE1hcmdpbkJvdHRvbSAtIGxpc3RJdGVtTWFyZ2luLmJvdHRvbSkgLVxuICAgICAgICAvLyBpZiB3ZSdyZSBmdWxsIHdlIG5lZWQgdG8gbGVhdmUgc29tZSByb29tIGJldHdlZW4gdGhlIHRvcCBvZiB0aGUgcGFuZWwgYW5kIHRoZSBsaXN0XG4gICAgICAgIChhdE1heENhcGFjaXR5ID8gbGlzdE1hcmdpblRvcCA6IDApO1xuXG4gICAgICAvLyBzZXQgbGlzdCBoZWlnaHRcbiAgICAgIGlmIChsaXN0SGVpZ2h0LnZpc3VhbCA+IF9saXN0QXZhaWxhYmxlSGVpZ2h0KSB7XG4gICAgICAgIGxpc3Qub3ZlcmZsb3cgPSBfbGlzdEF2YWlsYWJsZUhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3Qub3ZlcmZsb3cgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBubyBuZWVkIHRvIHNldCBjb250YWluZXIgYm91bmRzIGFzIHRoZXNlIGFyZSBoYW5kbGVzIGJ5IENTUyBmaXhlZCBoZWlnaHRcbiAgICB9IGVsc2UgaWYgKGJvdW5kcy5jYXBwZWRIZWlnaHQpIHtcbiAgICAgIC8vIG1heC1oZWlnaHRcblxuICAgICAgLy8gbm90IGEgZml4ZWQgaGVpZ2h0IHBhbmVsXG4gICAgICB2YXIgaXNDYXBwZWRIZWlnaHQgPSB2aXN1YWxIZWlnaHQgPj0gYm91bmRzLmNhcHBlZEhlaWdodDtcbiAgICAgIHZhciBwYW5lbEhlaWdodCA9IE1hdGgubWluKGJvdW5kcy5jYXBwZWRIZWlnaHQsIHZpc3VhbEhlaWdodCk7XG4gICAgICBwYW5lbC5zY2FsYWJsZSA9IHRydWU7XG4gICAgICBwYW5lbC5oZWlnaHQgPSBpc0NhcHBlZEhlaWdodFxuICAgICAgICA/IHBhbmVsSGVpZ2h0XG4gICAgICAgIDogcGFuZWxIZWlnaHQgLSBsaXN0SXRlbU1hcmdpbi50b3AgLSBsaXN0SXRlbU1hcmdpbi5ib3R0b207XG5cbiAgICAgIC8vIGF2YWlsYWJsZSBoZWlnaHQgZm9yIGxpc3RcbiAgICAgIHZhciBfbGlzdEF2YWlsYWJsZUhlaWdodDIgPVxuICAgICAgICAvLyB0aGUgaGVpZ2h0IG9mIHRoZSBwYW5lbCBtaW51cyB0aGUgbGFiZWwgaGVpZ2h0XG4gICAgICAgIHBhbmVsSGVpZ2h0IC1cbiAgICAgICAgY3VycmVudExhYmVsSGVpZ2h0IC1cbiAgICAgICAgLy8gdGhlIHJvb20gd2UgbGVhdmUgb3BlbiBiZXR3ZWVuIHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIHRoZSBwYW5lbCBib3R0b21cbiAgICAgICAgKGxpc3RNYXJnaW5Cb3R0b20gLSBsaXN0SXRlbU1hcmdpbi5ib3R0b20pIC1cbiAgICAgICAgLy8gaWYgd2UncmUgZnVsbCB3ZSBuZWVkIHRvIGxlYXZlIHNvbWUgcm9vbSBiZXR3ZWVuIHRoZSB0b3Agb2YgdGhlIHBhbmVsIGFuZCB0aGUgbGlzdFxuICAgICAgICAoYXRNYXhDYXBhY2l0eSA/IGxpc3RNYXJnaW5Ub3AgOiAwKTtcblxuICAgICAgLy8gc2V0IGxpc3QgaGVpZ2h0IChpZiBpcyBvdmVyZmxvd2luZylcbiAgICAgIGlmIChcbiAgICAgICAgdmlzdWFsSGVpZ2h0ID4gYm91bmRzLmNhcHBlZEhlaWdodCAmJlxuICAgICAgICBsaXN0SGVpZ2h0LnZpc3VhbCA+IF9saXN0QXZhaWxhYmxlSGVpZ2h0MlxuICAgICAgKSB7XG4gICAgICAgIGxpc3Qub3ZlcmZsb3cgPSBfbGlzdEF2YWlsYWJsZUhlaWdodDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0Lm92ZXJmbG93ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IGNvbnRhaW5lciBib3VuZHMgKHNvIHB1c2hlcyBzaWJsaW5ncyBkb3dud2FyZHMpXG4gICAgICByb290LmhlaWdodCA9IE1hdGgubWluKFxuICAgICAgICBib3VuZHMuY2FwcGVkSGVpZ2h0LFxuICAgICAgICBib3VuZHNIZWlnaHQgLSBsaXN0SXRlbU1hcmdpbi50b3AgLSBsaXN0SXRlbU1hcmdpbi5ib3R0b21cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZsZXhpYmxlIGhlaWdodFxuXG4gICAgICAvLyBub3QgYSBmaXhlZCBoZWlnaHQgcGFuZWxcbiAgICAgIHZhciBpdGVtTWFyZ2luID1cbiAgICAgICAgdG90YWxJdGVtcyA+IDAgPyBsaXN0SXRlbU1hcmdpbi50b3AgKyBsaXN0SXRlbU1hcmdpbi5ib3R0b20gOiAwO1xuICAgICAgcGFuZWwuc2NhbGFibGUgPSB0cnVlO1xuICAgICAgcGFuZWwuaGVpZ2h0ID0gTWF0aC5tYXgobGFiZWxIZWlnaHQsIHZpc3VhbEhlaWdodCAtIGl0ZW1NYXJnaW4pO1xuXG4gICAgICAvLyBzZXQgY29udGFpbmVyIGJvdW5kcyAoc28gcHVzaGVzIHNpYmxpbmdzIGRvd253YXJkcylcbiAgICAgIHJvb3QuaGVpZ2h0ID0gTWF0aC5tYXgobGFiZWxIZWlnaHQsIGJvdW5kc0hlaWdodCAtIGl0ZW1NYXJnaW4pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FsY3VsYXRlTGlzdEl0ZW1NYXJnaW4gPSBmdW5jdGlvbiBjYWxjdWxhdGVMaXN0SXRlbU1hcmdpbihyb290KSB7XG4gICAgdmFyIGl0ZW0gPSByb290LnJlZi5saXN0LmNoaWxkVmlld3NbMF0uY2hpbGRWaWV3c1swXTtcbiAgICByZXR1cm4gaXRlbVxuICAgICAgPyB7XG4gICAgICAgICAgdG9wOiBpdGVtLnJlY3QuZWxlbWVudC5tYXJnaW5Ub3AsXG4gICAgICAgICAgYm90dG9tOiBpdGVtLnJlY3QuZWxlbWVudC5tYXJnaW5Cb3R0b21cbiAgICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICB9O1xuXG4gIHZhciBjYWxjdWxhdGVMaXN0SGVpZ2h0ID0gZnVuY3Rpb24gY2FsY3VsYXRlTGlzdEhlaWdodChyb290KSB7XG4gICAgdmFyIHZpc3VhbCA9IDA7XG4gICAgdmFyIGJvdW5kcyA9IDA7XG5cbiAgICAvLyBnZXQgZmlsZSBsaXN0IHJlZmVyZW5jZVxuICAgIHZhciBzY3JvbGxMaXN0ID0gcm9vdC5yZWYubGlzdDtcbiAgICB2YXIgaXRlbUxpc3QgPSBzY3JvbGxMaXN0LmNoaWxkVmlld3NbMF07XG4gICAgdmFyIHZpc2libGVDaGlsZHJlbiA9IGl0ZW1MaXN0LmNoaWxkVmlld3MuZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQucmVjdC5lbGVtZW50LmhlaWdodDtcbiAgICB9KTtcbiAgICB2YXIgY2hpbGRyZW4gPSByb290XG4gICAgICAucXVlcnkoJ0dFVF9BQ1RJVkVfSVRFTVMnKVxuICAgICAgLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiB2aXNpYmxlQ2hpbGRyZW4uZmluZChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZC5pZCA9PT0gaXRlbS5pZDtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG5cbiAgICAvLyBubyBjaGlsZHJlbiwgZG9uZSFcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSByZXR1cm4geyB2aXN1YWw6IHZpc3VhbCwgYm91bmRzOiBib3VuZHMgfTtcblxuICAgIHZhciBob3Jpem9udGFsU3BhY2UgPSBpdGVtTGlzdC5yZWN0LmVsZW1lbnQud2lkdGg7XG4gICAgdmFyIGRyYWdJbmRleCA9IGdldEl0ZW1JbmRleEJ5UG9zaXRpb24oXG4gICAgICBpdGVtTGlzdCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgc2Nyb2xsTGlzdC5kcmFnQ29vcmRpbmF0ZXNcbiAgICApO1xuXG4gICAgdmFyIGNoaWxkUmVjdCA9IGNoaWxkcmVuWzBdLnJlY3QuZWxlbWVudDtcblxuICAgIHZhciBpdGVtVmVydGljYWxNYXJnaW4gPSBjaGlsZFJlY3QubWFyZ2luVG9wICsgY2hpbGRSZWN0Lm1hcmdpbkJvdHRvbTtcbiAgICB2YXIgaXRlbUhvcml6b250YWxNYXJnaW4gPSBjaGlsZFJlY3QubWFyZ2luTGVmdCArIGNoaWxkUmVjdC5tYXJnaW5SaWdodDtcblxuICAgIHZhciBpdGVtV2lkdGggPSBjaGlsZFJlY3Qud2lkdGggKyBpdGVtSG9yaXpvbnRhbE1hcmdpbjtcbiAgICB2YXIgaXRlbUhlaWdodCA9IGNoaWxkUmVjdC5oZWlnaHQgKyBpdGVtVmVydGljYWxNYXJnaW47XG5cbiAgICB2YXIgbmV3SXRlbSA9IHR5cGVvZiBkcmFnSW5kZXggIT09ICd1bmRlZmluZWQnICYmIGRyYWdJbmRleCA+PSAwID8gMSA6IDA7XG4gICAgdmFyIHJlbW92ZWRJdGVtID0gY2hpbGRyZW4uZmluZChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLm1hcmtlZEZvclJlbW92YWwgJiYgY2hpbGQub3BhY2l0eSA8IDAuNDU7XG4gICAgfSlcbiAgICAgID8gLTFcbiAgICAgIDogMDtcbiAgICB2YXIgdmVydGljYWxJdGVtQ291bnQgPSBjaGlsZHJlbi5sZW5ndGggKyBuZXdJdGVtICsgcmVtb3ZlZEl0ZW07XG4gICAgdmFyIGl0ZW1zUGVyUm93ID0gTWF0aC5yb3VuZChob3Jpem9udGFsU3BhY2UgLyBpdGVtV2lkdGgpO1xuXG4gICAgLy8gc3RhY2tcbiAgICBpZiAoaXRlbXNQZXJSb3cgPT09IDEpIHtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgaGVpZ2h0ID0gaXRlbS5yZWN0LmVsZW1lbnQuaGVpZ2h0ICsgaXRlbVZlcnRpY2FsTWFyZ2luO1xuICAgICAgICBib3VuZHMgKz0gaGVpZ2h0O1xuICAgICAgICB2aXN1YWwgKz0gaGVpZ2h0ICogaXRlbS5vcGFjaXR5O1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGdyaWRcbiAgICBlbHNlIHtcbiAgICAgIGJvdW5kcyA9IE1hdGguY2VpbCh2ZXJ0aWNhbEl0ZW1Db3VudCAvIGl0ZW1zUGVyUm93KSAqIGl0ZW1IZWlnaHQ7XG4gICAgICB2aXN1YWwgPSBib3VuZHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdmlzdWFsOiB2aXN1YWwsIGJvdW5kczogYm91bmRzIH07XG4gIH07XG5cbiAgdmFyIGNhbGN1bGF0ZVJvb3RCb3VuZGluZ0JveEhlaWdodCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVJvb3RCb3VuZGluZ0JveEhlaWdodChcbiAgICByb290XG4gICkge1xuICAgIHZhciBoZWlnaHQgPSByb290LnJlZi5tZWFzdXJlSGVpZ2h0IHx8IG51bGw7XG4gICAgdmFyIGNhcHBlZEhlaWdodCA9IHBhcnNlSW50KHJvb3Quc3R5bGUubWF4SGVpZ2h0LCAxMCkgfHwgbnVsbDtcbiAgICB2YXIgZml4ZWRIZWlnaHQgPSBoZWlnaHQgPT09IDAgPyBudWxsIDogaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNhcHBlZEhlaWdodDogY2FwcGVkSGVpZ2h0LFxuICAgICAgZml4ZWRIZWlnaHQ6IGZpeGVkSGVpZ2h0XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZXhjZWVkc01heEZpbGVzID0gZnVuY3Rpb24gZXhjZWVkc01heEZpbGVzKHJvb3QsIGl0ZW1zKSB7XG4gICAgdmFyIGFsbG93UmVwbGFjZSA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19SRVBMQUNFJyk7XG4gICAgdmFyIGFsbG93TXVsdGlwbGUgPSByb290LnF1ZXJ5KCdHRVRfQUxMT1dfTVVMVElQTEUnKTtcbiAgICB2YXIgdG90YWxJdGVtcyA9IHJvb3QucXVlcnkoJ0dFVF9UT1RBTF9JVEVNUycpO1xuICAgIHZhciBtYXhJdGVtcyA9IHJvb3QucXVlcnkoJ0dFVF9NQVhfRklMRVMnKTtcblxuICAgIC8vIHRvdGFsIGFtb3VudCBvZiBpdGVtcyBiZWluZyBkcmFnZ2VkXG4gICAgdmFyIHRvdGFsQnJvd3NlSXRlbXMgPSBpdGVtcy5sZW5ndGg7XG5cbiAgICAvLyBpZiBkb2VzIG5vdCBhbGxvdyBtdWx0aXBsZSBpdGVtcyBhbmQgZHJhZ2dpbmcgbW9yZSB0aGFuIG9uZSBpdGVtXG4gICAgaWYgKCFhbGxvd011bHRpcGxlICYmIHRvdGFsQnJvd3NlSXRlbXMgPiAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBsaW1pdCBtYXggaXRlbXMgdG8gb25lIGlmIG5vdCBhbGxvd2VkIHRvIGRyb3AgbXVsdGlwbGUgaXRlbXNcbiAgICBtYXhJdGVtcyA9IGFsbG93TXVsdGlwbGUgPyBtYXhJdGVtcyA6IGFsbG93UmVwbGFjZSA/IG1heEl0ZW1zIDogMTtcblxuICAgIC8vIG5vIG1vcmUgcm9vbT9cbiAgICB2YXIgaGFzTWF4SXRlbXMgPSBpc0ludChtYXhJdGVtcyk7XG4gICAgaWYgKGhhc01heEl0ZW1zICYmIHRvdGFsSXRlbXMgKyB0b3RhbEJyb3dzZUl0ZW1zID4gbWF4SXRlbXMpIHtcbiAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9USFJPV19NQVhfRklMRVMnLCB7XG4gICAgICAgIHNvdXJjZTogaXRlbXMsXG4gICAgICAgIGVycm9yOiBjcmVhdGVSZXNwb25zZSgnd2FybmluZycsIDAsICdNYXggZmlsZXMnKVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB2YXIgZ2V0RHJhZ0luZGV4ID0gZnVuY3Rpb24gZ2V0RHJhZ0luZGV4KGxpc3QsIGNoaWxkcmVuLCBwb3NpdGlvbikge1xuICAgIHZhciBpdGVtTGlzdCA9IGxpc3QuY2hpbGRWaWV3c1swXTtcbiAgICByZXR1cm4gZ2V0SXRlbUluZGV4QnlQb3NpdGlvbihpdGVtTGlzdCwgY2hpbGRyZW4sIHtcbiAgICAgIGxlZnQ6IHBvc2l0aW9uLnNjb3BlTGVmdCAtIGl0ZW1MaXN0LnJlY3QuZWxlbWVudC5sZWZ0LFxuICAgICAgdG9wOlxuICAgICAgICBwb3NpdGlvbi5zY29wZVRvcCAtXG4gICAgICAgIChsaXN0LnJlY3Qub3V0ZXIudG9wICtcbiAgICAgICAgICBsaXN0LnJlY3QuZWxlbWVudC5tYXJnaW5Ub3AgK1xuICAgICAgICAgIGxpc3QucmVjdC5lbGVtZW50LnNjcm9sbFRvcClcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZmlsZSBkcm9wIGZ1bmN0aW9uYWxpdHlcbiAgICovXG4gIHZhciB0b2dnbGVEcm9wID0gZnVuY3Rpb24gdG9nZ2xlRHJvcChyb290KSB7XG4gICAgdmFyIGlzQWxsb3dlZCA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19EUk9QJyk7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSByb290LnF1ZXJ5KCdHRVRfRElTQUJMRUQnKTtcbiAgICB2YXIgZW5hYmxlZCA9IGlzQWxsb3dlZCAmJiAhaXNEaXNhYmxlZDtcbiAgICBpZiAoZW5hYmxlZCAmJiAhcm9vdC5yZWYuaG9wcGVyKSB7XG4gICAgICB2YXIgaG9wcGVyID0gY3JlYXRlSG9wcGVyKFxuICAgICAgICByb290LmVsZW1lbnQsXG4gICAgICAgIGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgICAgICAgLy8gdGhlc2UgZmlsZXMgZG9uJ3QgZml0IHNvIHN0b3AgaGVyZVxuICAgICAgICAgIGlmIChleGNlZWRzTWF4RmlsZXMocm9vdCwgaXRlbXMpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBhbGxvdyBxdWljayB2YWxpZGF0aW9uIG9mIGRyb3BwZWQgaXRlbXNcbiAgICAgICAgICB2YXIgYmVmb3JlRHJvcEZpbGUgPVxuICAgICAgICAgICAgcm9vdC5xdWVyeSgnR0VUX0JFRk9SRV9EUk9QX0ZJTEUnKSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIGFsbCBpdGVtcyBzaG91bGQgYmUgdmFsaWRhdGVkIGJ5IGFsbCBmaWx0ZXJzIGFzIHZhbGlkXG4gICAgICAgICAgdmFyIGRyb3BWYWxpZGF0aW9uID0gcm9vdC5xdWVyeSgnR0VUX0RST1BfVkFMSURBVElPTicpO1xuICAgICAgICAgIHJldHVybiBkcm9wVmFsaWRhdGlvblxuICAgICAgICAgICAgPyBpdGVtcy5ldmVyeShmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIGFwcGx5RmlsdGVycygnQUxMT1dfSE9QUEVSX0lURU0nLCBpdGVtLCB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiByb290LnF1ZXJ5XG4gICAgICAgICAgICAgICAgICB9KS5ldmVyeShmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0pICYmIGJlZm9yZURyb3BGaWxlKGl0ZW0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbHRlckl0ZW1zOiBmdW5jdGlvbiBmaWx0ZXJJdGVtcyhpdGVtcykge1xuICAgICAgICAgICAgdmFyIGlnbm9yZWRGaWxlcyA9IHJvb3QucXVlcnkoJ0dFVF9JR05PUkVEX0ZJTEVTJyk7XG4gICAgICAgICAgICByZXR1cm4gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgaWYgKGlzRmlsZShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhaWdub3JlZEZpbGVzLmluY2x1ZGVzKGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2F0Y2hlc0Ryb3BzT25QYWdlOiByb290LnF1ZXJ5KCdHRVRfRFJPUF9PTl9QQUdFJyksXG4gICAgICAgICAgcmVxdWlyZXNEcm9wT25FbGVtZW50OiByb290LnF1ZXJ5KCdHRVRfRFJPUF9PTl9FTEVNRU5UJylcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaG9wcGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGl0ZW1zLCBwb3NpdGlvbikge1xuICAgICAgICAvLyBnZXQgaXRlbSBjaGlsZHJlbiBlbGVtZW50cyBhbmQgc29ydCBiYXNlZCBvbiBsaXN0IHNvcnRcbiAgICAgICAgdmFyIGxpc3QgPSByb290LnJlZi5saXN0LmNoaWxkVmlld3NbMF07XG4gICAgICAgIHZhciB2aXNpYmxlQ2hpbGRyZW4gPSBsaXN0LmNoaWxkVmlld3MuZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkLnJlY3QuZWxlbWVudC5oZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByb290XG4gICAgICAgICAgLnF1ZXJ5KCdHRVRfQUNUSVZFX0lURU1TJylcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB2aXNpYmxlQ2hpbGRyZW4uZmluZChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2hpbGQuaWQgPT09IGl0ZW0uaWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ29cbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnQUREX0lURU1TJywge1xuICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICBpbmRleDogZ2V0RHJhZ0luZGV4KHJvb3QucmVmLmxpc3QsIGNoaWxkcmVuLCBwb3NpdGlvbiksXG4gICAgICAgICAgaW50ZXJhY3Rpb25NZXRob2Q6IEludGVyYWN0aW9uTWV0aG9kLkRST1BcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0RST1AnLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcblxuICAgICAgICByb290LmRpc3BhdGNoKCdESURfRU5EX0RSQUcnLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcbiAgICAgIH07XG5cbiAgICAgIGhvcHBlci5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHJvb3QuZGlzcGF0Y2goJ0RJRF9TVEFSVF9EUkFHJywgeyBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG4gICAgICB9O1xuXG4gICAgICBob3BwZXIub25kcmFnID0gZGVib3VuY2UoZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0RSQUcnLCB7IHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBob3BwZXIub25kcmFnZW5kID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnRElEX0VORF9EUkFHJywgeyBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG4gICAgICB9O1xuXG4gICAgICByb290LnJlZi5ob3BwZXIgPSBob3BwZXI7XG5cbiAgICAgIHJvb3QucmVmLmRyaXAgPSByb290LmFwcGVuZENoaWxkVmlldyhyb290LmNyZWF0ZUNoaWxkVmlldyhkcmlwKSk7XG4gICAgfSBlbHNlIGlmICghZW5hYmxlZCAmJiByb290LnJlZi5ob3BwZXIpIHtcbiAgICAgIHJvb3QucmVmLmhvcHBlci5kZXN0cm95KCk7XG4gICAgICByb290LnJlZi5ob3BwZXIgPSBudWxsO1xuICAgICAgcm9vdC5yZW1vdmVDaGlsZFZpZXcocm9vdC5yZWYuZHJpcCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBicm93c2UgZnVuY3Rpb25hbGl0eVxuICAgKi9cbiAgdmFyIHRvZ2dsZUJyb3dzZSA9IGZ1bmN0aW9uIHRvZ2dsZUJyb3dzZShyb290LCBwcm9wcykge1xuICAgIHZhciBpc0FsbG93ZWQgPSByb290LnF1ZXJ5KCdHRVRfQUxMT1dfQlJPV1NFJyk7XG4gICAgdmFyIGlzRGlzYWJsZWQgPSByb290LnF1ZXJ5KCdHRVRfRElTQUJMRUQnKTtcbiAgICB2YXIgZW5hYmxlZCA9IGlzQWxsb3dlZCAmJiAhaXNEaXNhYmxlZDtcbiAgICBpZiAoZW5hYmxlZCAmJiAhcm9vdC5yZWYuYnJvd3Nlcikge1xuICAgICAgcm9vdC5yZWYuYnJvd3NlciA9IHJvb3QuYXBwZW5kQ2hpbGRWaWV3KFxuICAgICAgICByb290LmNyZWF0ZUNoaWxkVmlldyhcbiAgICAgICAgICBicm93c2VyLFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIG9ubG9hZChpdGVtcykge1xuICAgICAgICAgICAgICAvLyB0aGVzZSBmaWxlcyBkb24ndCBmaXQgc28gc3RvcCBoZXJlXG4gICAgICAgICAgICAgIGlmIChleGNlZWRzTWF4RmlsZXMocm9vdCwgaXRlbXMpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgLy8gYWRkIGl0ZW1zIVxuICAgICAgICAgICAgICByb290LmRpc3BhdGNoKCdBRERfSVRFTVMnLCB7XG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgICAgICAgICAgIGluZGV4OiAtMSxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbk1ldGhvZDogSW50ZXJhY3Rpb25NZXRob2QuQlJPV1NFXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG5cbiAgICAgICAgMFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFlbmFibGVkICYmIHJvb3QucmVmLmJyb3dzZXIpIHtcbiAgICAgIHJvb3QucmVtb3ZlQ2hpbGRWaWV3KHJvb3QucmVmLmJyb3dzZXIpO1xuICAgICAgcm9vdC5yZWYuYnJvd3NlciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBwYXN0ZSBmdW5jdGlvbmFsaXR5XG4gICAqL1xuICB2YXIgdG9nZ2xlUGFzdGUgPSBmdW5jdGlvbiB0b2dnbGVQYXN0ZShyb290KSB7XG4gICAgdmFyIGlzQWxsb3dlZCA9IHJvb3QucXVlcnkoJ0dFVF9BTExPV19QQVNURScpO1xuICAgIHZhciBpc0Rpc2FibGVkID0gcm9vdC5xdWVyeSgnR0VUX0RJU0FCTEVEJyk7XG4gICAgdmFyIGVuYWJsZWQgPSBpc0FsbG93ZWQgJiYgIWlzRGlzYWJsZWQ7XG4gICAgaWYgKGVuYWJsZWQgJiYgIXJvb3QucmVmLnBhc3Rlcikge1xuICAgICAgcm9vdC5yZWYucGFzdGVyID0gY3JlYXRlUGFzdGVyKCk7XG4gICAgICByb290LnJlZi5wYXN0ZXIub25sb2FkID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICAgICAgcm9vdC5kaXNwYXRjaCgnQUREX0lURU1TJywge1xuICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICBpbmRleDogLTEsXG4gICAgICAgICAgaW50ZXJhY3Rpb25NZXRob2Q6IEludGVyYWN0aW9uTWV0aG9kLlBBU1RFXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFlbmFibGVkICYmIHJvb3QucmVmLnBhc3Rlcikge1xuICAgICAgcm9vdC5yZWYucGFzdGVyLmRlc3Ryb3koKTtcbiAgICAgIHJvb3QucmVmLnBhc3RlciA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSb3V0ZSBhY3Rpb25zXG4gICAqL1xuICB2YXIgcm91dGUkNSA9IGNyZWF0ZVJvdXRlKHtcbiAgICBESURfU0VUX0FMTE9XX0JST1dTRTogZnVuY3Rpb24gRElEX1NFVF9BTExPV19CUk9XU0UoX3JlZjUpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjUucm9vdCxcbiAgICAgICAgcHJvcHMgPSBfcmVmNS5wcm9wcztcbiAgICAgIHRvZ2dsZUJyb3dzZShyb290LCBwcm9wcyk7XG4gICAgfSxcbiAgICBESURfU0VUX0FMTE9XX0RST1A6IGZ1bmN0aW9uIERJRF9TRVRfQUxMT1dfRFJPUChfcmVmNikge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmNi5yb290O1xuICAgICAgdG9nZ2xlRHJvcChyb290KTtcbiAgICB9LFxuICAgIERJRF9TRVRfQUxMT1dfUEFTVEU6IGZ1bmN0aW9uIERJRF9TRVRfQUxMT1dfUEFTVEUoX3JlZjcpIHtcbiAgICAgIHZhciByb290ID0gX3JlZjcucm9vdDtcbiAgICAgIHRvZ2dsZVBhc3RlKHJvb3QpO1xuICAgIH0sXG4gICAgRElEX1NFVF9ESVNBQkxFRDogZnVuY3Rpb24gRElEX1NFVF9ESVNBQkxFRChfcmVmOCkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmOC5yb290LFxuICAgICAgICBwcm9wcyA9IF9yZWY4LnByb3BzO1xuICAgICAgdG9nZ2xlRHJvcChyb290KTtcbiAgICAgIHRvZ2dsZVBhc3RlKHJvb3QpO1xuICAgICAgdG9nZ2xlQnJvd3NlKHJvb3QsIHByb3BzKTtcbiAgICAgIHZhciBpc0Rpc2FibGVkID0gcm9vdC5xdWVyeSgnR0VUX0RJU0FCTEVEJyk7XG4gICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICByb290LmVsZW1lbnQuZGF0YXNldC5kaXNhYmxlZCA9ICdkaXNhYmxlZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWxldGUgcm9vdC5lbGVtZW50LmRhdGFzZXQuZGlzYWJsZWQ7IDw9IHRoaXMgZG9lcyBub3Qgd29yayBvbiBpT1MgMTBcbiAgICAgICAgcm9vdC5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1kaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHJvb3QgPSBjcmVhdGVWaWV3KHtcbiAgICBuYW1lOiAncm9vdCcsXG4gICAgcmVhZDogZnVuY3Rpb24gcmVhZChfcmVmOSkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmOS5yb290O1xuICAgICAgaWYgKHJvb3QucmVmLm1lYXN1cmUpIHtcbiAgICAgICAgcm9vdC5yZWYubWVhc3VyZUhlaWdodCA9IHJvb3QucmVmLm1lYXN1cmUub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlOiBjcmVhdGUkZSxcbiAgICB3cml0ZTogd3JpdGUkOSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KF9yZWYxMCkge1xuICAgICAgdmFyIHJvb3QgPSBfcmVmMTAucm9vdDtcbiAgICAgIGlmIChyb290LnJlZi5wYXN0ZXIpIHtcbiAgICAgICAgcm9vdC5yZWYucGFzdGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGlmIChyb290LnJlZi5ob3BwZXIpIHtcbiAgICAgICAgcm9vdC5yZWYuaG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIHJvb3QuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50KTtcbiAgICAgIHJvb3QuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdnZXN0dXJlc3RhcnQnLCBwcmV2ZW50KTtcbiAgICB9LFxuICAgIG1peGluczoge1xuICAgICAgc3R5bGVzOiBbJ2hlaWdodCddXG4gICAgfVxuICB9KTtcblxuICAvLyBjcmVhdGVzIHRoZSBhcHBcbiAgdmFyIGNyZWF0ZUFwcCA9IGZ1bmN0aW9uIGNyZWF0ZUFwcCgpIHtcbiAgICB2YXIgaW5pdGlhbE9wdGlvbnMgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBsZXQgZWxlbWVudFxuICAgIHZhciBvcmlnaW5hbEVsZW1lbnQgPSBudWxsO1xuXG4gICAgLy8gZ2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldE9wdGlvbnMoKTtcblxuICAgIC8vIGNyZWF0ZSB0aGUgZGF0YSBzdG9yZSwgdGhpcyB3aWxsIGNvbnRhaW4gYWxsIG91ciBhcHAgaW5mb1xuICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuICAgICAgLy8gaW5pdGlhbCBzdGF0ZSAoc2hvdWxkIGJlIHNlcmlhbGl6YWJsZSlcbiAgICAgIGNyZWF0ZUluaXRpYWxTdGF0ZShkZWZhdWx0T3B0aW9ucyksXG5cbiAgICAgIC8vIHF1ZXJpZXNcbiAgICAgIFtxdWVyaWVzLCBjcmVhdGVPcHRpb25RdWVyaWVzKGRlZmF1bHRPcHRpb25zKV0sXG5cbiAgICAgIC8vIGFjdGlvbiBoYW5kbGVyc1xuICAgICAgW2FjdGlvbnMsIGNyZWF0ZU9wdGlvbkFjdGlvbnMoZGVmYXVsdE9wdGlvbnMpXVxuICAgICk7XG5cbiAgICAvLyBzZXQgaW5pdGlhbCBvcHRpb25zXG4gICAgc3RvcmUuZGlzcGF0Y2goJ1NFVF9PUFRJT05TJywgeyBvcHRpb25zOiBpbml0aWFsT3B0aW9ucyB9KTtcblxuICAgIC8vIGtpY2sgdGhyZWFkIGlmIHZpc2liaWxpdHkgY2hhbmdlc1xuICAgIHZhciB2aXNpYmlsaXR5SGFuZGxlciA9IGZ1bmN0aW9uIHZpc2liaWxpdHlIYW5kbGVyKCkge1xuICAgICAgaWYgKGRvY3VtZW50LmhpZGRlbikgcmV0dXJuO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goJ0tJQ0snKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB2aXNpYmlsaXR5SGFuZGxlcik7XG5cbiAgICAvLyByZS1yZW5kZXIgb24gd2luZG93IHJlc2l6ZSBzdGFydCBhbmQgZmluaXNoXG4gICAgdmFyIHJlc2l6ZURvbmVUaW1lciA9IG51bGw7XG4gICAgdmFyIGlzUmVzaXppbmcgPSBmYWxzZTtcbiAgICB2YXIgaXNSZXNpemluZ0hvcml6b250YWxseSA9IGZhbHNlO1xuICAgIHZhciBpbml0aWFsV2luZG93V2lkdGggPSBudWxsO1xuICAgIHZhciBjdXJyZW50V2luZG93V2lkdGggPSBudWxsO1xuICAgIHZhciByZXNpemVIYW5kbGVyID0gZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgIGlmICghaXNSZXNpemluZykge1xuICAgICAgICBpc1Jlc2l6aW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChyZXNpemVEb25lVGltZXIpO1xuICAgICAgcmVzaXplRG9uZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgaXNSZXNpemluZyA9IGZhbHNlO1xuICAgICAgICBpbml0aWFsV2luZG93V2lkdGggPSBudWxsO1xuICAgICAgICBjdXJyZW50V2luZG93V2lkdGggPSBudWxsO1xuICAgICAgICBpZiAoaXNSZXNpemluZ0hvcml6b250YWxseSkge1xuICAgICAgICAgIGlzUmVzaXppbmdIb3Jpem9udGFsbHkgPSBmYWxzZTtcbiAgICAgICAgICBzdG9yZS5kaXNwYXRjaCgnRElEX1NUT1BfUkVTSVpFJyk7XG4gICAgICAgIH1cbiAgICAgIH0sIDUwMCk7XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG5cbiAgICAvLyByZW5kZXIgaW5pdGlhbCB2aWV3XG4gICAgdmFyIHZpZXcgPSByb290KHN0b3JlLCB7IGlkOiBnZXRVbmlxdWVJZCgpIH0pO1xuXG4gICAgLy9cbiAgICAvLyBQUklWQVRFIEFQSSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICB2YXIgaXNSZXN0aW5nID0gZmFsc2U7XG4gICAgdmFyIGlzSGlkZGVuID0gZmFsc2U7XG5cbiAgICB2YXIgcmVhZFdyaXRlQXBpID0ge1xuICAgICAgLy8gbmVjZXNzYXJ5IGZvciB1cGRhdGUgbG9vcFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlYWRzIGZyb20gZG9tIChuZXZlciBjYWxsIG1hbnVhbGx5KVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgX3JlYWQ6IGZ1bmN0aW9uIF9yZWFkKCkge1xuICAgICAgICAvLyB0ZXN0IGlmIHdlJ3JlIHJlc2l6aW5nIGhvcml6b250YWxseVxuICAgICAgICAvLyBUT0RPOiBzZWUgaWYgd2UgY2FuIG9wdGltaXplIHRoaXMgYnkgbWVhc3VyaW5nIHJvb3QgcmVjdFxuICAgICAgICBpZiAoaXNSZXNpemluZykge1xuICAgICAgICAgIGN1cnJlbnRXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgIGlmICghaW5pdGlhbFdpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBpbml0aWFsV2luZG93V2lkdGggPSBjdXJyZW50V2luZG93V2lkdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzUmVzaXppbmdIb3Jpem9udGFsbHkgJiZcbiAgICAgICAgICAgIGN1cnJlbnRXaW5kb3dXaWR0aCAhPT0gaW5pdGlhbFdpbmRvd1dpZHRoXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCgnRElEX1NUQVJUX1JFU0laRScpO1xuICAgICAgICAgICAgaXNSZXNpemluZ0hvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuICYmIGlzUmVzdGluZykge1xuICAgICAgICAgIC8vIHRlc3QgaWYgaXMgbm8gbG9uZ2VyIGhpZGRlblxuICAgICAgICAgIGlzUmVzdGluZyA9IHZpZXcuZWxlbWVudC5vZmZzZXRQYXJlbnQgPT09IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiByZXN0aW5nLCBubyBuZWVkIHRvIHJlYWQgYXMgbnVtYmVycyB3aWxsIHN0aWxsIGFsbCBiZSBjb3JyZWN0XG4gICAgICAgIGlmIChpc1Jlc3RpbmcpIHJldHVybjtcblxuICAgICAgICAvLyByZWFkIHZpZXcgZGF0YVxuICAgICAgICB2aWV3Ll9yZWFkKCk7XG5cbiAgICAgICAgLy8gaWYgaXMgaGlkZGVuIHdlIG5lZWQgdG8ga25vdyBzbyB3ZSBleGl0IHJlc3QgbW9kZSB3aGVuIHJldmVhbGVkXG4gICAgICAgIGlzSGlkZGVuID0gdmlldy5yZWN0LmVsZW1lbnQuaGlkZGVuO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXcml0ZXMgdG8gZG9tIChuZXZlciBjYWxsIG1hbnVhbGx5KVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqL1xuICAgICAgX3dyaXRlOiBmdW5jdGlvbiBfd3JpdGUodHMpIHtcbiAgICAgICAgLy8gZ2V0IGFsbCBhY3Rpb25zIGZyb20gc3RvcmVcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBzdG9yZVxuICAgICAgICAgIC5wcm9jZXNzQWN0aW9uUXVldWUoKVxuXG4gICAgICAgICAgLy8gZmlsdGVyIG91dCBzZXQgYWN0aW9ucyAodGhlc2Ugd2lsbCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgRElEX1NFVClcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICEvXlNFVF8vLnRlc3QoYWN0aW9uLnR5cGUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGlmIHdhcyBpZGxpbmcgYW5kIG5vIGFjdGlvbnMgc3RvcCBoZXJlXG4gICAgICAgIGlmIChpc1Jlc3RpbmcgJiYgIWFjdGlvbnMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgLy8gc29tZSBhY3Rpb25zIG1pZ2h0IHRyaWdnZXIgZXZlbnRzXG4gICAgICAgIHJvdXRlQWN0aW9uc1RvRXZlbnRzKGFjdGlvbnMpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdmlld1xuICAgICAgICBpc1Jlc3RpbmcgPSB2aWV3Ll93cml0ZSh0cywgYWN0aW9ucywgaXNSZXNpemluZ0hvcml6b250YWxseSk7XG5cbiAgICAgICAgLy8gd2lsbCBjbGVhbiB1cCBhbGwgYXJjaGl2ZWQgaXRlbXNcbiAgICAgICAgcmVtb3ZlUmVsZWFzZWRJdGVtcyhzdG9yZS5xdWVyeSgnR0VUX0lURU1TJykpO1xuXG4gICAgICAgIC8vIG5vdyBpZGxpbmdcbiAgICAgICAgaWYgKGlzUmVzdGluZykge1xuICAgICAgICAgIHN0b3JlLnByb2Nlc3NEaXNwYXRjaFF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9cbiAgICAvLyBFWFBPU0UgRVZFTlRTIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIHZhciBjcmVhdGVFdmVudCA9IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KG5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBkZWZhdWx0IGV2ZW50XG4gICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICB0eXBlOiBuYW1lXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gbm8gZGF0YSB0byBhZGRcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29weSByZWxldmFudCBwcm9wc1xuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZXJyb3InKSkge1xuICAgICAgICAgIGV2ZW50LmVycm9yID0gZGF0YS5lcnJvciA/IE9iamVjdC5hc3NpZ24oe30sIGRhdGEuZXJyb3IpIDogbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLnN0YXR1cykge1xuICAgICAgICAgIGV2ZW50LnN0YXR1cyA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEuc3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLmZpbGUpIHtcbiAgICAgICAgICBldmVudC5vdXRwdXQgPSBkYXRhLmZpbGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IHNvdXJjZSBpcyBhdmFpbGFibGUsIGVsc2UgYWRkIGl0ZW0gaWYgcG9zc2libGVcbiAgICAgICAgaWYgKGRhdGEuc291cmNlKSB7XG4gICAgICAgICAgZXZlbnQuZmlsZSA9IGRhdGEuc291cmNlO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuaXRlbSB8fCBkYXRhLmlkKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBkYXRhLml0ZW0gPyBkYXRhLml0ZW0gOiBzdG9yZS5xdWVyeSgnR0VUX0lURU0nLCBkYXRhLmlkKTtcbiAgICAgICAgICBldmVudC5maWxlID0gaXRlbSA/IGNyZWF0ZUl0ZW1BUEkoaXRlbSkgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWFwIGFsbCBpdGVtcyBpbiBhIHBvc3NpYmxlIGl0ZW1zIGFycmF5XG4gICAgICAgIGlmIChkYXRhLml0ZW1zKSB7XG4gICAgICAgICAgZXZlbnQuaXRlbXMgPSBkYXRhLml0ZW1zLm1hcChjcmVhdGVJdGVtQVBJKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYSBwcm9ncmVzcyBldmVudCBhZGQgdGhlIHByb2dyZXNzIGFtb3VudFxuICAgICAgICBpZiAoL3Byb2dyZXNzLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgZXZlbnQucHJvZ3Jlc3MgPSBkYXRhLnByb2dyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29weSByZWxldmFudCBwcm9wc1xuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnb3JpZ2luJykgJiYgZGF0YS5oYXNPd25Qcm9wZXJ0eSgndGFyZ2V0JykpIHtcbiAgICAgICAgICBldmVudC5vcmlnaW4gPSBkYXRhLm9yaWdpbjtcbiAgICAgICAgICBldmVudC50YXJnZXQgPSBkYXRhLnRhcmdldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBldmVudFJvdXRlcyA9IHtcbiAgICAgIERJRF9ERVNUUk9ZOiBjcmVhdGVFdmVudCgnZGVzdHJveScpLFxuXG4gICAgICBESURfSU5JVDogY3JlYXRlRXZlbnQoJ2luaXQnKSxcblxuICAgICAgRElEX1RIUk9XX01BWF9GSUxFUzogY3JlYXRlRXZlbnQoJ3dhcm5pbmcnKSxcblxuICAgICAgRElEX0lOSVRfSVRFTTogY3JlYXRlRXZlbnQoJ2luaXRmaWxlJyksXG4gICAgICBESURfU1RBUlRfSVRFTV9MT0FEOiBjcmVhdGVFdmVudCgnYWRkZmlsZXN0YXJ0JyksXG4gICAgICBESURfVVBEQVRFX0lURU1fTE9BRF9QUk9HUkVTUzogY3JlYXRlRXZlbnQoJ2FkZGZpbGVwcm9ncmVzcycpLFxuICAgICAgRElEX0xPQURfSVRFTTogY3JlYXRlRXZlbnQoJ2FkZGZpbGUnKSxcblxuICAgICAgRElEX1RIUk9XX0lURU1fSU5WQUxJRDogW2NyZWF0ZUV2ZW50KCdlcnJvcicpLCBjcmVhdGVFdmVudCgnYWRkZmlsZScpXSxcblxuICAgICAgRElEX1RIUk9XX0lURU1fTE9BRF9FUlJPUjogW2NyZWF0ZUV2ZW50KCdlcnJvcicpLCBjcmVhdGVFdmVudCgnYWRkZmlsZScpXSxcblxuICAgICAgRElEX1RIUk9XX0lURU1fUkVNT1ZFX0VSUk9SOiBbXG4gICAgICAgIGNyZWF0ZUV2ZW50KCdlcnJvcicpLFxuICAgICAgICBjcmVhdGVFdmVudCgncmVtb3ZlZmlsZScpXG4gICAgICBdLFxuXG4gICAgICBESURfUFJFUEFSRV9PVVRQVVQ6IGNyZWF0ZUV2ZW50KCdwcmVwYXJlZmlsZScpLFxuXG4gICAgICBESURfU1RBUlRfSVRFTV9QUk9DRVNTSU5HOiBjcmVhdGVFdmVudCgncHJvY2Vzc2ZpbGVzdGFydCcpLFxuICAgICAgRElEX1VQREFURV9JVEVNX1BST0NFU1NfUFJPR1JFU1M6IGNyZWF0ZUV2ZW50KCdwcm9jZXNzZmlsZXByb2dyZXNzJyksXG4gICAgICBESURfQUJPUlRfSVRFTV9QUk9DRVNTSU5HOiBjcmVhdGVFdmVudCgncHJvY2Vzc2ZpbGVhYm9ydCcpLFxuICAgICAgRElEX0NPTVBMRVRFX0lURU1fUFJPQ0VTU0lORzogY3JlYXRlRXZlbnQoJ3Byb2Nlc3NmaWxlJyksXG4gICAgICBESURfQ09NUExFVEVfSVRFTV9QUk9DRVNTSU5HX0FMTDogY3JlYXRlRXZlbnQoJ3Byb2Nlc3NmaWxlcycpLFxuICAgICAgRElEX1JFVkVSVF9JVEVNX1BST0NFU1NJTkc6IGNyZWF0ZUV2ZW50KCdwcm9jZXNzZmlsZXJldmVydCcpLFxuXG4gICAgICBESURfVEhST1dfSVRFTV9QUk9DRVNTSU5HX0VSUk9SOiBbXG4gICAgICAgIGNyZWF0ZUV2ZW50KCdlcnJvcicpLFxuICAgICAgICBjcmVhdGVFdmVudCgncHJvY2Vzc2ZpbGUnKVxuICAgICAgXSxcblxuICAgICAgRElEX1JFTU9WRV9JVEVNOiBjcmVhdGVFdmVudCgncmVtb3ZlZmlsZScpLFxuXG4gICAgICBESURfVVBEQVRFX0lURU1TOiBjcmVhdGVFdmVudCgndXBkYXRlZmlsZXMnKSxcblxuICAgICAgRElEX0FDVElWQVRFX0lURU06IGNyZWF0ZUV2ZW50KCdhY3RpdmF0ZWZpbGUnKSxcblxuICAgICAgRElEX1JFT1JERVJfSVRFTVM6IGNyZWF0ZUV2ZW50KCdyZW9yZGVyZmlsZXMnKVxuICAgIH07XG5cbiAgICB2YXIgZXhwb3NlRXZlbnQgPSBmdW5jdGlvbiBleHBvc2VFdmVudChldmVudCkge1xuICAgICAgLy8gY3JlYXRlIGV2ZW50IG9iamVjdCB0byBiZSBkaXNwYXRjaGVkXG4gICAgICB2YXIgZGV0YWlsID0gT2JqZWN0LmFzc2lnbih7IHBvbmQ6IGV4cG9ydHMgfSwgZXZlbnQpO1xuICAgICAgZGVsZXRlIGRldGFpbC50eXBlO1xuICAgICAgdmlldy5lbGVtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnRmlsZVBvbmQ6JyArIGV2ZW50LnR5cGUsIHtcbiAgICAgICAgICAvLyBldmVudCBpbmZvXG4gICAgICAgICAgZGV0YWlsOiBkZXRhaWwsXG5cbiAgICAgICAgICAvLyBldmVudCBiZWhhdmlvdXJcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgY29tcG9zZWQ6IHRydWUgLy8gdHJpZ2dlcnMgbGlzdGVuZXJzIG91dHNpZGUgb2Ygc2hhZG93IHJvb3RcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIC8vIGV2ZW50IG9iamVjdCB0byBwYXJhbXMgdXNlZCBmb3IgYG9uKClgIGV2ZW50IGhhbmRsZXJzIGFuZCBjYWxsYmFja3MgYG9uaW5pdCgpYFxuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuXG4gICAgICAvLyBpZiBpcyBwb3NzaWJsZSBlcnJvciBldmVudCwgbWFrZSBpdCB0aGUgZmlyc3QgcGFyYW1cbiAgICAgIGlmIChldmVudC5oYXNPd25Qcm9wZXJ0eSgnZXJyb3InKSkge1xuICAgICAgICBwYXJhbXMucHVzaChldmVudC5lcnJvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbGUgaXMgYWx3YXlzIHNlY3Rpb25cbiAgICAgIGlmIChldmVudC5oYXNPd25Qcm9wZXJ0eSgnZmlsZScpKSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKGV2ZW50LmZpbGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBlbmQgb3RoZXIgcHJvcHNcbiAgICAgIHZhciBmaWx0ZXJlZCA9IFsndHlwZScsICdlcnJvcicsICdmaWxlJ107XG4gICAgICBPYmplY3Qua2V5cyhldmVudClcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gIWZpbHRlcmVkLmluY2x1ZGVzKGtleSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBwYXJhbXMucHVzaChldmVudFtrZXldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIG9uKHR5cGUsICgpID0+IHsgfSlcbiAgICAgIGV4cG9ydHMuZmlyZS5hcHBseShleHBvcnRzLCBbZXZlbnQudHlwZV0uY29uY2F0KHBhcmFtcykpO1xuXG4gICAgICAvLyBvbmluaXQgPSAoKSA9PiB7fVxuICAgICAgdmFyIGhhbmRsZXIgPSBzdG9yZS5xdWVyeSgnR0VUX09OJyArIGV2ZW50LnR5cGUudG9VcHBlckNhc2UoKSk7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHZvaWQgMCwgcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJvdXRlQWN0aW9uc1RvRXZlbnRzID0gZnVuY3Rpb24gcm91dGVBY3Rpb25zVG9FdmVudHMoYWN0aW9ucykge1xuICAgICAgaWYgKCFhY3Rpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgYWN0aW9uc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiBldmVudFJvdXRlc1thY3Rpb24udHlwZV07XG4gICAgICAgIH0pXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICAgIHZhciByb3V0ZXMgPSBldmVudFJvdXRlc1thY3Rpb24udHlwZV07XG4gICAgICAgICAgKEFycmF5LmlzQXJyYXkocm91dGVzKSA/IHJvdXRlcyA6IFtyb3V0ZXNdKS5mb3JFYWNoKGZ1bmN0aW9uKHJvdXRlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzbid0IGZhbnRhc3RpYywgYnV0IGJlY2F1c2Ugb2YgdGhlIHN0YWNraW5nIG9mIHNldHRpbWVvdXRzIHBsdWdpbnMgY2FuIGhhbmRsZSB0aGUgZGlkX2xvYWQgYmVmb3JlIHRoZSBkaWRfaW5pdFxuICAgICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRElEX0lOSVRfSVRFTScpIHtcbiAgICAgICAgICAgICAgZXhwb3NlRXZlbnQocm91dGUoYWN0aW9uLmRhdGEpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXhwb3NlRXZlbnQocm91dGUoYWN0aW9uLmRhdGEpKTtcbiAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvL1xuICAgIC8vIFBVQkxJQyBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgdmFyIHNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCgnU0VUX09QVElPTlMnLCB7IG9wdGlvbnM6IG9wdGlvbnMgfSk7XG4gICAgfTtcblxuICAgIHZhciBnZXRGaWxlID0gZnVuY3Rpb24gZ2V0RmlsZShxdWVyeSkge1xuICAgICAgcmV0dXJuIHN0b3JlLnF1ZXJ5KCdHRVRfQUNUSVZFX0lURU0nLCBxdWVyeSk7XG4gICAgfTtcblxuICAgIHZhciBwcmVwYXJlRmlsZSA9IGZ1bmN0aW9uIHByZXBhcmVGaWxlKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKCdSRVFVRVNUX0lURU1fUFJFUEFSRScsIHtcbiAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhpdGVtKSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gZmFpbHVyZShlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRGaWxlID0gZnVuY3Rpb24gYWRkRmlsZShzb3VyY2UpIHtcbiAgICAgIHZhciBvcHRpb25zID1cbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgYWRkRmlsZXMoW3sgc291cmNlOiBzb3VyY2UsIG9wdGlvbnM6IG9wdGlvbnMgfV0sIHtcbiAgICAgICAgICBpbmRleDogb3B0aW9ucy5pbmRleFxuICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpdGVtcyAmJiBpdGVtc1swXSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgaXNGaWxlUG9uZEZpbGUgPSBmdW5jdGlvbiBpc0ZpbGVQb25kRmlsZShvYmopIHtcbiAgICAgIHJldHVybiBvYmouZmlsZSAmJiBvYmouaWQ7XG4gICAgfTtcblxuICAgIHZhciByZW1vdmVGaWxlID0gZnVuY3Rpb24gcmVtb3ZlRmlsZShxdWVyeSwgb3B0aW9ucykge1xuICAgICAgLy8gaWYgb25seSBwYXNzZWQgb3B0aW9uc1xuICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ29iamVjdCcgJiYgIWlzRmlsZVBvbmRGaWxlKHF1ZXJ5KSAmJiAhb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcXVlcnk7XG4gICAgICAgIHF1ZXJ5ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyByZXF1ZXN0IGl0ZW0gcmVtb3ZhbFxuICAgICAgc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICdSRU1PVkVfSVRFTScsXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgcXVlcnk6IHF1ZXJ5IH0pXG4gICAgICApO1xuXG4gICAgICAvLyBzZWUgaWYgaXRlbSBoYXMgYmVlbiByZW1vdmVkXG4gICAgICByZXR1cm4gc3RvcmUucXVlcnkoJ0dFVF9BQ1RJVkVfSVRFTScsIHF1ZXJ5KSA9PT0gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIGFkZEZpbGVzID0gZnVuY3Rpb24gYWRkRmlsZXMoKSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwO1xuICAgICAgICBfa2V5IDwgX2xlbjtcbiAgICAgICAgX2tleSsrXG4gICAgICApIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICAvLyB1c2VyIHBhc3NlZCBhIHNvdXJjZXMgYXJyYXlcbiAgICAgICAgaWYgKGlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgICAgICBzb3VyY2VzLnB1c2guYXBwbHkoc291cmNlcywgYXJnc1swXSk7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCBhcmdzWzFdIHx8IHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1c2VyIHBhc3NlZCBzb3VyY2VzIGFzIGFyZ3VtZW50cywgbGFzdCBvbmUgbWlnaHQgYmUgb3B0aW9ucyBvYmplY3RcbiAgICAgICAgICB2YXIgbGFzdEFyZ3VtZW50ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBsYXN0QXJndW1lbnQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAhKGxhc3RBcmd1bWVudCBpbnN0YW5jZW9mIEJsb2IpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGFyZ3MucG9wKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFkZCByZXN0IHRvIHNvdXJjZXNcbiAgICAgICAgICBzb3VyY2VzLnB1c2guYXBwbHkoc291cmNlcywgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdG9yZS5kaXNwYXRjaCgnQUREX0lURU1TJywge1xuICAgICAgICAgIGl0ZW1zOiBzb3VyY2VzLFxuICAgICAgICAgIGluZGV4OiBvcHRpb25zLmluZGV4LFxuICAgICAgICAgIGludGVyYWN0aW9uTWV0aG9kOiBJbnRlcmFjdGlvbk1ldGhvZC5BUEksXG4gICAgICAgICAgc3VjY2VzczogcmVzb2x2ZSxcbiAgICAgICAgICBmYWlsdXJlOiByZWplY3RcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGdldEZpbGVzID0gZnVuY3Rpb24gZ2V0RmlsZXMoKSB7XG4gICAgICByZXR1cm4gc3RvcmUucXVlcnkoJ0dFVF9BQ1RJVkVfSVRFTVMnKTtcbiAgICB9O1xuXG4gICAgdmFyIHByb2Nlc3NGaWxlID0gZnVuY3Rpb24gcHJvY2Vzc0ZpbGUocXVlcnkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goJ1JFUVVFU1RfSVRFTV9QUk9DRVNTSU5HJywge1xuICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGl0ZW0pIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiBmYWlsdXJlKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHByZXBhcmVGaWxlcyA9IGZ1bmN0aW9uIHByZXBhcmVGaWxlcygpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7XG4gICAgICAgIF9rZXkyIDwgX2xlbjI7XG4gICAgICAgIF9rZXkyKytcbiAgICAgICkge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG4gICAgICB2YXIgcXVlcmllcyA9IEFycmF5LmlzQXJyYXkoYXJnc1swXSkgPyBhcmdzWzBdIDogYXJncztcbiAgICAgIHZhciBpdGVtcyA9IHF1ZXJpZXMubGVuZ3RoID8gcXVlcmllcyA6IGdldEZpbGVzKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMubWFwKHByZXBhcmVGaWxlKSk7XG4gICAgfTtcblxuICAgIHZhciBwcm9jZXNzRmlsZXMgPSBmdW5jdGlvbiBwcm9jZXNzRmlsZXMoKSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwO1xuICAgICAgICBfa2V5MyA8IF9sZW4zO1xuICAgICAgICBfa2V5MysrXG4gICAgICApIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuICAgICAgdmFyIHF1ZXJpZXMgPSBBcnJheS5pc0FycmF5KGFyZ3NbMF0pID8gYXJnc1swXSA6IGFyZ3M7XG4gICAgICBpZiAoIXF1ZXJpZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBmaWxlcyA9IGdldEZpbGVzKCkuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgaXRlbS5zdGF0dXMgPT09IEl0ZW1TdGF0dXMuSURMRSAmJlxuICAgICAgICAgICAgICBpdGVtLm9yaWdpbiA9PT0gRmlsZU9yaWdpbi5MT0NBTFxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgIT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lORyAmJlxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgIT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19DT01QTEVURSAmJlxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgIT09IEl0ZW1TdGF0dXMuUFJPQ0VTU0lOR19SRVZFUlRfRVJST1JcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZmlsZXMubWFwKHByb2Nlc3NGaWxlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocXVlcmllcy5tYXAocHJvY2Vzc0ZpbGUpKTtcbiAgICB9O1xuXG4gICAgdmFyIHJlbW92ZUZpbGVzID0gZnVuY3Rpb24gcmVtb3ZlRmlsZXMoKSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwO1xuICAgICAgICBfa2V5NCA8IF9sZW40O1xuICAgICAgICBfa2V5NCsrXG4gICAgICApIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICB2YXIgcXVlcmllcyA9IEFycmF5LmlzQXJyYXkoYXJnc1swXSkgPyBhcmdzWzBdIDogYXJncztcblxuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICBpZiAodHlwZW9mIHF1ZXJpZXNbcXVlcmllcy5sZW5ndGggLSAxXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHF1ZXJpZXMucG9wKCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3NbMV07XG4gICAgICB9XG5cbiAgICAgIHZhciBmaWxlcyA9IGdldEZpbGVzKCk7XG5cbiAgICAgIGlmICghcXVlcmllcy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgICAgICBmaWxlcy5tYXAoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUZpbGUoZmlsZSwgb3B0aW9ucyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgLy8gd2hlbiByZW1vdmluZyBieSBpbmRleCB0aGUgaW5kZXhlcyBzaGlmdCBhZnRlciBlYWNoIGZpbGUgcmVtb3ZhbCBzbyB3ZSBuZWVkIHRvIGNvbnZlcnQgaW5kZXhlcyB0byBpZHNcbiAgICAgIHZhciBtYXBwZWRRdWVyaWVzID0gcXVlcmllc1xuICAgICAgICAubWFwKGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGlzTnVtYmVyKHF1ZXJ5KVxuICAgICAgICAgICAgPyBmaWxlc1txdWVyeV1cbiAgICAgICAgICAgICAgPyBmaWxlc1txdWVyeV0uaWRcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHF1ZXJ5O1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIG1hcHBlZFF1ZXJpZXMubWFwKGZ1bmN0aW9uKHEpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZUZpbGUocSwgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGV4cG9ydHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG5cbiAgICAgIG9uKCksXG4gICAgICB7fSxcblxuICAgICAgcmVhZFdyaXRlQXBpLFxuICAgICAge30sXG5cbiAgICAgIGNyZWF0ZU9wdGlvbkFQSShzdG9yZSwgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAge1xuICAgICAgICAvKipcbiAgICAgICAgICogT3ZlcnJpZGUgb3B0aW9ucyBkZWZpbmVkIGluIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICAgICAqL1xuICAgICAgICBzZXRPcHRpb25zOiBzZXRPcHRpb25zLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkIHRoZSBnaXZlbiBmaWxlXG4gICAgICAgICAqIEBwYXJhbSBzb3VyY2UgLSB0aGUgc291cmNlIG9mIHRoZSBmaWxlIChlaXRoZXIgYSBGaWxlLCBiYXNlNjQgZGF0YSB1cmkgb3IgdXJsKVxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIG9iamVjdCwgeyBpbmRleDogMCB9XG4gICAgICAgICAqL1xuICAgICAgICBhZGRGaWxlOiBhZGRGaWxlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkIHRoZSBnaXZlbiBmaWxlc1xuICAgICAgICAgKiBAcGFyYW0gc291cmNlcyAtIHRoZSBzb3VyY2VzIG9mIHRoZSBmaWxlcyB0byBsb2FkXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIC0gb2JqZWN0LCB7IGluZGV4OiAwIH1cbiAgICAgICAgICovXG4gICAgICAgIGFkZEZpbGVzOiBhZGRGaWxlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZmlsZSBvYmplY3RzIG1hdGNoaW5nIHRoZSBnaXZlbiBxdWVyeVxuICAgICAgICAgKiBAcGFyYW0gcXVlcnkgeyBzdHJpbmcsIG51bWJlciwgbnVsbCB9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRGaWxlOiBnZXRGaWxlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGxvYWQgZmlsZSB3aXRoIGdpdmVuIG5hbWVcbiAgICAgICAgICogQHBhcmFtIHF1ZXJ5IHsgc3RyaW5nLCBudW1iZXIsIG51bGwgIH1cbiAgICAgICAgICovXG4gICAgICAgIHByb2Nlc3NGaWxlOiBwcm9jZXNzRmlsZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxdWVzdCBwcmVwYXJlIG91dHB1dCBmb3IgZmlsZSB3aXRoIGdpdmVuIG5hbWVcbiAgICAgICAgICogQHBhcmFtIHF1ZXJ5IHsgc3RyaW5nLCBudW1iZXIsIG51bGwgIH1cbiAgICAgICAgICovXG4gICAgICAgIHByZXBhcmVGaWxlOiBwcmVwYXJlRmlsZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyBhIGZpbGUgYnkgaXRzIG5hbWVcbiAgICAgICAgICogQHBhcmFtIHF1ZXJ5IHsgc3RyaW5nLCBudW1iZXIsIG51bGwgIH1cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUZpbGU6IHJlbW92ZUZpbGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdmVzIGEgZmlsZSB0byBhIG5ldyBsb2NhdGlvbiBpbiB0aGUgZmlsZXMgbGlzdFxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZUZpbGU6IGZ1bmN0aW9uIG1vdmVGaWxlKHF1ZXJ5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCgnTU9WRV9JVEVNJywgeyBxdWVyeTogcXVlcnksIGluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhbGwgZmlsZXMgKHdyYXBwZWQgaW4gcHVibGljIGFwaSlcbiAgICAgICAgICovXG4gICAgICAgIGdldEZpbGVzOiBnZXRGaWxlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHVwbG9hZGluZyBhbGwgZmlsZXNcbiAgICAgICAgICovXG4gICAgICAgIHByb2Nlc3NGaWxlczogcHJvY2Vzc0ZpbGVzLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhcnMgYWxsIGZpbGVzIGZyb20gdGhlIGZpbGVzIGxpc3RcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUZpbGVzOiByZW1vdmVGaWxlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnRzIHByZXBhcmluZyBvdXRwdXQgb2YgYWxsIGZpbGVzXG4gICAgICAgICAqL1xuICAgICAgICBwcmVwYXJlRmlsZXM6IHByZXBhcmVGaWxlcyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU29ydCBsaXN0IG9mIGZpbGVzXG4gICAgICAgICAqL1xuICAgICAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goJ1NPUlQnLCB7IGNvbXBhcmU6IGNvbXBhcmUgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJyb3dzZSB0aGUgZmlsZSBzeXN0ZW0gZm9yIGEgZmlsZVxuICAgICAgICAgKi9cbiAgICAgICAgYnJvd3NlOiBmdW5jdGlvbiBicm93c2UoKSB7XG4gICAgICAgICAgLy8gbmVlZHMgdG8gYmUgdHJpZ2dlciBkaXJlY3RseSBhcyB1c2VyIGFjdGlvbiBuZWVkcyB0byBiZSB0cmFjZWFibGUgKGlzIG5vdCB0cmFjZWFibGUgaW4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgICAgIHZhciBpbnB1dCA9IHZpZXcuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPWZpbGVdJyk7XG4gICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICBpbnB1dC5jbGljaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdHJveXMgdGhlIGFwcFxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAvLyByZXF1ZXN0IGRlc3RydWN0aW9uXG4gICAgICAgICAgZXhwb3J0cy5maXJlKCdkZXN0cm95Jywgdmlldy5lbGVtZW50KTtcblxuICAgICAgICAgIC8vIHN0b3AgYWN0aXZlIHByb2Nlc3NlcyAoZmlsZSB1cGxvYWRzLCBmZXRjaGVzLCBzdHVmZiBsaWtlIHRoYXQpXG4gICAgICAgICAgLy8gbG9vcCBvdmVyIGl0ZW1zIGFuZCBkZXBlbmRpbmcgb24gc3RhdGVzIGNhbGwgYWJvcnQgZm9yIG9uZ29pbmcgcHJvY2Vzc2VzXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goJ0FCT1JUX0FMTCcpO1xuXG4gICAgICAgICAgLy8gZGVzdHJveSB2aWV3XG4gICAgICAgICAgdmlldy5fZGVzdHJveSgpO1xuXG4gICAgICAgICAgLy8gc3RvcCBsaXN0ZW5pbmcgdG8gcmVzaXplXG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuXG4gICAgICAgICAgLy8gc3RvcCBsaXN0ZW5pbmcgdG8gdGhlIHZpc2libGl0eWNoYW5nZSBldmVudFxuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB2aXNpYmlsaXR5SGFuZGxlcik7XG5cbiAgICAgICAgICAvLyBkaXNwYXRjaCBkZXN0cm95XG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goJ0RJRF9ERVNUUk9ZJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydHMgdGhlIHBsdWdpbiBiZWZvcmUgdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZSQxKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gaW5zZXJ0QmVmb3JlKHZpZXcuZWxlbWVudCwgZWxlbWVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydHMgdGhlIHBsdWdpbiBhZnRlciB0aGUgdGFyZ2V0IGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGluc2VydEFmdGVyOiBmdW5jdGlvbiBpbnNlcnRBZnRlciQxKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gaW5zZXJ0QWZ0ZXIodmlldy5lbGVtZW50LCBlbGVtZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXBwZW5kcyB0aGUgcGx1Z2luIHRvIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgYXBwZW5kVG86IGZ1bmN0aW9uIGFwcGVuZFRvKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5hcHBlbmRDaGlsZCh2aWV3LmVsZW1lbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBsYWNlcyBhbiBlbGVtZW50IHdpdGggdGhlIGFwcFxuICAgICAgICAgKi9cbiAgICAgICAgcmVwbGFjZUVsZW1lbnQ6IGZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgdGhlIGFwcCBiZWZvcmUgdGhlIGVsZW1lbnRcbiAgICAgICAgICBpbnNlcnRCZWZvcmUodmlldy5lbGVtZW50LCBlbGVtZW50KTtcblxuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb3JpZ2luYWwgZWxlbWVudFxuICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblxuICAgICAgICAgIC8vIHJlbWVtYmVyIG9yaWdpbmFsIGVsZW1lbnRcbiAgICAgICAgICBvcmlnaW5hbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXN0b3JlcyB0aGUgb3JpZ2luYWwgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgcmVzdG9yZUVsZW1lbnQ6IGZ1bmN0aW9uIHJlc3RvcmVFbGVtZW50KCkge1xuICAgICAgICAgIGlmICghb3JpZ2luYWxFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIG5vIGVsZW1lbnQgdG8gcmVzdG9yZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlc3RvcmUgb3JpZ2luYWwgZWxlbWVudFxuICAgICAgICAgIGluc2VydEFmdGVyKG9yaWdpbmFsRWxlbWVudCwgdmlldy5lbGVtZW50KTtcblxuICAgICAgICAgIC8vIHJlbW92ZSBvdXIgZWxlbWVudFxuICAgICAgICAgIHZpZXcuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHZpZXcuZWxlbWVudCk7XG5cbiAgICAgICAgICAvLyByZW1vdmUgcmVmZXJlbmNlXG4gICAgICAgICAgb3JpZ2luYWxFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBhcHAgcm9vdCBpcyBhdHRhY2hlZCB0byBnaXZlbiBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSBlbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBpc0F0dGFjaGVkVG86IGZ1bmN0aW9uIGlzQXR0YWNoZWRUbyhlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHZpZXcuZWxlbWVudCA9PT0gZWxlbWVudCB8fCBvcmlnaW5hbEVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHJvb3QgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXcuZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgcG9uZCBzdGF0dXNcbiAgICAgICAgICovXG4gICAgICAgIHN0YXR1czoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0b3JlLnF1ZXJ5KCdHRVRfU1RBVFVTJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcblxuICAgIC8vIERvbmUhXG4gICAgc3RvcmUuZGlzcGF0Y2goJ0RJRF9JTklUJyk7XG5cbiAgICAvLyBjcmVhdGUgYWN0dWFsIGFwaSBvYmplY3RcbiAgICByZXR1cm4gY3JlYXRlT2JqZWN0KGV4cG9ydHMpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVBcHBPYmplY3QgPSBmdW5jdGlvbiBjcmVhdGVBcHBPYmplY3QoKSB7XG4gICAgdmFyIGN1c3RvbU9wdGlvbnMgPVxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbiAgICBmb3JpbihnZXRPcHRpb25zKCksIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGRlZmF1bHRPcHRpb25zW2tleV0gPSB2YWx1ZVswXTtcbiAgICB9KTtcblxuICAgIC8vIHNldCBhcHAgb3B0aW9uc1xuICAgIHZhciBhcHAgPSBjcmVhdGVBcHAoXG4gICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICB7fSxcblxuICAgICAgICBkZWZhdWx0T3B0aW9ucyxcbiAgICAgICAge30sXG5cbiAgICAgICAgY3VzdG9tT3B0aW9uc1xuICAgICAgKVxuICAgICk7XG5cbiAgICAvLyByZXR1cm4gdGhlIHBsdWdpbiBpbnN0YW5jZVxuICAgIHJldHVybiBhcHA7XG4gIH07XG5cbiAgdmFyIGxvd2VyQ2FzZUZpcnN0TGV0dGVyID0gZnVuY3Rpb24gbG93ZXJDYXNlRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbiAgfTtcblxuICB2YXIgYXR0cmlidXRlTmFtZVRvUHJvcGVydHlOYW1lID0gZnVuY3Rpb24gYXR0cmlidXRlTmFtZVRvUHJvcGVydHlOYW1lKFxuICAgIGF0dHJpYnV0ZU5hbWVcbiAgKSB7XG4gICAgcmV0dXJuIHRvQ2FtZWxzKGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgvXmRhdGEtLywgJycpKTtcbiAgfTtcblxuICB2YXIgbWFwT2JqZWN0ID0gZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgcHJvcGVydHlNYXApIHtcbiAgICAvLyByZW1vdmUgdW53YW50ZWRcbiAgICBmb3Jpbihwcm9wZXJ0eU1hcCwgZnVuY3Rpb24oc2VsZWN0b3IsIG1hcHBpbmcpIHtcbiAgICAgIGZvcmluKG9iamVjdCwgZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIC8vIGNyZWF0ZSByZWdleHAgc2hvcnRjdXRcbiAgICAgICAgdmFyIHNlbGVjdG9yUmVnRXhwID0gbmV3IFJlZ0V4cChzZWxlY3Rvcik7XG5cbiAgICAgICAgLy8gdGVzdHMgaWZcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBzZWxlY3RvclJlZ0V4cC50ZXN0KHByb3BlcnR5KTtcblxuICAgICAgICAvLyBubyBtYXRjaCwgc2tpcFxuICAgICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSdzIGEgbWFwcGluZywgdGhlIG9yaWdpbmFsIHByb3BlcnR5IGlzIGFsd2F5cyByZW1vdmVkXG4gICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuXG4gICAgICAgIC8vIHNob3VsZCBvbmx5IHJlbW92ZSwgd2UgZG9uZSFcbiAgICAgICAgaWYgKG1hcHBpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW92ZSB2YWx1ZSB0byBuZXcgcHJvcGVydHlcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1hcHBpbmcpKSB7XG4gICAgICAgICAgb2JqZWN0W21hcHBpbmddID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW92ZSB0byBncm91cFxuICAgICAgICB2YXIgZ3JvdXAgPSBtYXBwaW5nLmdyb3VwO1xuICAgICAgICBpZiAoaXNPYmplY3QobWFwcGluZykgJiYgIW9iamVjdFtncm91cF0pIHtcbiAgICAgICAgICBvYmplY3RbZ3JvdXBdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBvYmplY3RbZ3JvdXBdW1xuICAgICAgICAgIGxvd2VyQ2FzZUZpcnN0TGV0dGVyKHByb3BlcnR5LnJlcGxhY2Uoc2VsZWN0b3JSZWdFeHAsICcnKSlcbiAgICAgICAgXSA9IHZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGRvIHN1Ym1hcHBpbmdcbiAgICAgIGlmIChtYXBwaW5nLm1hcHBpbmcpIHtcbiAgICAgICAgbWFwT2JqZWN0KG9iamVjdFttYXBwaW5nLmdyb3VwXSwgbWFwcGluZy5tYXBwaW5nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ2V0QXR0cmlidXRlc0FzT2JqZWN0ID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlc0FzT2JqZWN0KG5vZGUpIHtcbiAgICB2YXIgYXR0cmlidXRlTWFwcGluZyA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIC8vIHR1cm4gYXR0cmlidXRlcyBpbnRvIG9iamVjdFxuICAgIHZhciBhdHRyaWJ1dGVzID0gW107XG4gICAgZm9yaW4obm9kZS5hdHRyaWJ1dGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgYXR0cmlidXRlcy5wdXNoKG5vZGUuYXR0cmlidXRlc1tpbmRleF0pO1xuICAgIH0pO1xuXG4gICAgdmFyIG91dHB1dCA9IGF0dHJpYnV0ZXNcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24oYXR0cmlidXRlKSB7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGUubmFtZTtcbiAgICAgIH0pXG4gICAgICAucmVkdWNlKGZ1bmN0aW9uKG9iaiwgYXR0cmlidXRlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGF0dHIobm9kZSwgYXR0cmlidXRlLm5hbWUpO1xuXG4gICAgICAgIG9ialthdHRyaWJ1dGVOYW1lVG9Qcm9wZXJ0eU5hbWUoYXR0cmlidXRlLm5hbWUpXSA9XG4gICAgICAgICAgdmFsdWUgPT09IGF0dHJpYnV0ZS5uYW1lID8gdHJ1ZSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSwge30pO1xuXG4gICAgLy8gZG8gbWFwcGluZyBvZiBvYmplY3QgcHJvcGVydGllc1xuICAgIG1hcE9iamVjdChvdXRwdXQsIGF0dHJpYnV0ZU1hcHBpbmcpO1xuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICB2YXIgY3JlYXRlQXBwQXRFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlQXBwQXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB2YXIgb3B0aW9ucyA9XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgLy8gaG93IGF0dHJpYnV0ZXMgb2YgdGhlIGlucHV0IGVsZW1lbnQgYXJlIG1hcHBlZCB0byB0aGUgb3B0aW9ucyBmb3IgdGhlIHBsdWdpblxuICAgIHZhciBhdHRyaWJ1dGVNYXBwaW5nID0ge1xuICAgICAgLy8gdHJhbnNsYXRlIHRvIG90aGVyIG5hbWVcbiAgICAgICdeY2xhc3MkJzogJ2NsYXNzTmFtZScsXG4gICAgICAnXm11bHRpcGxlJCc6ICdhbGxvd011bHRpcGxlJyxcbiAgICAgICdeY2FwdHVyZSQnOiAnY2FwdHVyZU1ldGhvZCcsXG4gICAgICAnXndlYmtpdGRpcmVjdG9yeSQnOiAnYWxsb3dEaXJlY3Rvcmllc09ubHknLFxuXG4gICAgICAvLyBncm91cCB1bmRlciBzaW5nbGUgcHJvcGVydHlcbiAgICAgICdec2VydmVyJzoge1xuICAgICAgICBncm91cDogJ3NlcnZlcicsXG4gICAgICAgIG1hcHBpbmc6IHtcbiAgICAgICAgICAnXnByb2Nlc3MnOiB7XG4gICAgICAgICAgICBncm91cDogJ3Byb2Nlc3MnXG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdecmV2ZXJ0Jzoge1xuICAgICAgICAgICAgZ3JvdXA6ICdyZXZlcnQnXG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdeZmV0Y2gnOiB7XG4gICAgICAgICAgICBncm91cDogJ2ZldGNoJ1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAnXnJlc3RvcmUnOiB7XG4gICAgICAgICAgICBncm91cDogJ3Jlc3RvcmUnXG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdebG9hZCc6IHtcbiAgICAgICAgICAgIGdyb3VwOiAnbG9hZCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8vIGRvbid0IGluY2x1ZGUgaW4gb2JqZWN0XG4gICAgICAnXnR5cGUkJzogZmFsc2UsXG4gICAgICAnXmZpbGVzJCc6IGZhbHNlXG4gICAgfTtcblxuICAgIC8vIGFkZCBhZGRpdGlvbmFsIG9wdGlvbiB0cmFuc2xhdG9yc1xuICAgIGFwcGx5RmlsdGVycygnU0VUX0FUVFJJQlVURV9UT19PUFRJT05fTUFQJywgYXR0cmlidXRlTWFwcGluZyk7XG5cbiAgICAvLyBjcmVhdGUgZmluYWwgb3B0aW9ucyBvYmplY3QgYnkgc2V0dGluZyBvcHRpb25zIG9iamVjdCBhbmQgdGhlbiBvdmVycmlkaW5nIG9wdGlvbnMgc3VwcGxpZWQgb24gZWxlbWVudFxuICAgIHZhciBtZXJnZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgYXR0cmlidXRlT3B0aW9ucyA9IGdldEF0dHJpYnV0ZXNBc09iamVjdChcbiAgICAgIGVsZW1lbnQubm9kZU5hbWUgPT09ICdGSUVMRFNFVCdcbiAgICAgICAgPyBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9ZmlsZV0nKVxuICAgICAgICA6IGVsZW1lbnQsXG4gICAgICBhdHRyaWJ1dGVNYXBwaW5nXG4gICAgKTtcblxuICAgIC8vIG1lcmdlIHdpdGggb3B0aW9ucyBvYmplY3RcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGF0dHJpYnV0ZU9wdGlvbnNba2V5XSkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChtZXJnZWRPcHRpb25zW2tleV0pKSB7XG4gICAgICAgICAgbWVyZ2VkT3B0aW9uc1trZXldID0ge307XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmFzc2lnbihtZXJnZWRPcHRpb25zW2tleV0sIGF0dHJpYnV0ZU9wdGlvbnNba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXJnZWRPcHRpb25zW2tleV0gPSBhdHRyaWJ1dGVPcHRpb25zW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBpZiBwYXJlbnQgaXMgYSBmaWVsZHNldCwgZ2V0IGZpbGVzIGZyb20gcGFyZW50IGJ5IHNlbGVjdGluZyBhbGwgaW5wdXQgZmllbGRzIHRoYXQgYXJlIG5vdCBmaWxlIHVwbG9hZCBmaWVsZHNcbiAgICAvLyB0aGVzZSB3aWxsIHRoZW4gYmUgYXV0b21hdGljYWxseSBzZXQgdG8gdGhlIGluaXRpYWwgZmlsZXNcbiAgICBtZXJnZWRPcHRpb25zLmZpbGVzID0gKG9wdGlvbnMuZmlsZXMgfHwgW10pLmNvbmNhdChcbiAgICAgIEFycmF5LmZyb20oZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dDpub3QoW3R5cGU9ZmlsZV0pJykpLm1hcChcbiAgICAgICAgZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBpbnB1dC52YWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgdHlwZTogaW5wdXQuZGF0YXNldC50eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgICAvLyBidWlsZCBwbHVnaW5cbiAgICB2YXIgYXBwID0gY3JlYXRlQXBwT2JqZWN0KG1lcmdlZE9wdGlvbnMpO1xuXG4gICAgLy8gYWRkIGFscmVhZHkgc2VsZWN0ZWQgZmlsZXNcbiAgICBpZiAoZWxlbWVudC5maWxlcykge1xuICAgICAgQXJyYXkuZnJvbShlbGVtZW50LmZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgYXBwLmFkZEZpbGUoZmlsZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyByZXBsYWNlIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgIGFwcC5yZXBsYWNlRWxlbWVudChlbGVtZW50KTtcblxuICAgIC8vIGV4cG9zZVxuICAgIHJldHVybiBhcHA7XG4gIH07XG5cbiAgLy8gaWYgYW4gZWxlbWVudCBpcyBwYXNzZWQsIHdlIGNyZWF0ZSB0aGUgaW5zdGFuY2UgYXQgdGhhdCBlbGVtZW50LCBpZiBub3QsIHdlIGp1c3QgY3JlYXRlIGFuIHVwIG9iamVjdFxuICB2YXIgY3JlYXRlQXBwJDEgPSBmdW5jdGlvbiBjcmVhdGVBcHAoKSB7XG4gICAgcmV0dXJuIGlzTm9kZShhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pXG4gICAgICA/IGNyZWF0ZUFwcEF0RWxlbWVudC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cylcbiAgICAgIDogY3JlYXRlQXBwT2JqZWN0LmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgUFJJVkFURV9NRVRIT0RTID0gWydmaXJlJywgJ19yZWFkJywgJ193cml0ZSddO1xuXG4gIHZhciBjcmVhdGVBcHBBUEkgPSBmdW5jdGlvbiBjcmVhdGVBcHBBUEkoYXBwKSB7XG4gICAgdmFyIGFwaSA9IHt9O1xuXG4gICAgY29weU9iamVjdFByb3BlcnRpZXNUb09iamVjdChhcHAsIGFwaSwgUFJJVkFURV9NRVRIT0RTKTtcblxuICAgIHJldHVybiBhcGk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHBsYWNlaG9sZGVycyBpbiBnaXZlbiBzdHJpbmcgd2l0aCByZXBsYWNlbWVudHNcbiAgICogQHBhcmFtIHN0cmluZyAtIFwiRm9vIHtiYXJ9XCJcIlxuICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIC0geyBcImJhclwiOiAxMCB9XG4gICAqL1xuICB2YXIgcmVwbGFjZUluU3RyaW5nID0gZnVuY3Rpb24gcmVwbGFjZUluU3RyaW5nKHN0cmluZywgcmVwbGFjZW1lbnRzKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oPzp7KFthLXpBLVpdKyl9KS9nLCBmdW5jdGlvbihtYXRjaCwgZ3JvdXApIHtcbiAgICAgIHJldHVybiByZXBsYWNlbWVudHNbZ3JvdXBdO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVXb3JrZXIgPSBmdW5jdGlvbiBjcmVhdGVXb3JrZXIoZm4pIHtcbiAgICB2YXIgd29ya2VyQmxvYiA9IG5ldyBCbG9iKFsnKCcsIGZuLnRvU3RyaW5nKCksICcpKCknXSwge1xuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXG4gICAgfSk7XG5cbiAgICB2YXIgd29ya2VyVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh3b3JrZXJCbG9iKTtcbiAgICB2YXIgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVUkwpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zZmVyOiBmdW5jdGlvbiB0cmFuc2ZlcihtZXNzYWdlLCBjYikge30sXG4gICAgICBwb3N0OiBmdW5jdGlvbiBwb3N0KG1lc3NhZ2UsIGNiLCB0cmFuc2Zlckxpc3QpIHtcbiAgICAgICAgdmFyIGlkID0gZ2V0VW5pcXVlSWQoKTtcblxuICAgICAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChlLmRhdGEuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICBjYihlLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHRyYW5zZmVyTGlzdFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIHRlcm1pbmF0ZTogZnVuY3Rpb24gdGVybWluYXRlKCkge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwod29ya2VyVVJMKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBsb2FkSW1hZ2UgPSBmdW5jdGlvbiBsb2FkSW1hZ2UodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICB9O1xuICAgICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH07XG4gICAgICBpbWcuc3JjID0gdXJsO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZW5hbWVGaWxlID0gZnVuY3Rpb24gcmVuYW1lRmlsZShmaWxlLCBuYW1lKSB7XG4gICAgdmFyIHJlbmFtZWRGaWxlID0gZmlsZS5zbGljZSgwLCBmaWxlLnNpemUsIGZpbGUudHlwZSk7XG4gICAgcmVuYW1lZEZpbGUubGFzdE1vZGlmaWVkRGF0ZSA9IGZpbGUubGFzdE1vZGlmaWVkRGF0ZTtcbiAgICByZW5hbWVkRmlsZS5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gcmVuYW1lZEZpbGU7XG4gIH07XG5cbiAgdmFyIGNvcHlGaWxlID0gZnVuY3Rpb24gY29weUZpbGUoZmlsZSkge1xuICAgIHJldHVybiByZW5hbWVGaWxlKGZpbGUsIGZpbGUubmFtZSk7XG4gIH07XG5cbiAgLy8gYWxyZWFkeSByZWdpc3RlcmVkIHBsdWdpbnMgKGNhbid0IHJlZ2lzdGVyIHR3aWNlKVxuICB2YXIgcmVnaXN0ZXJlZFBsdWdpbnMgPSBbXTtcblxuICAvLyBwYXNzIHV0aWxzIHRvIHBsdWdpblxuICB2YXIgY3JlYXRlQXBwUGx1Z2luID0gZnVuY3Rpb24gY3JlYXRlQXBwUGx1Z2luKHBsdWdpbikge1xuICAgIC8vIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgIGlmIChyZWdpc3RlcmVkUGx1Z2lucy5pbmNsdWRlcyhwbHVnaW4pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcmVtZW1iZXIgdGhpcyBwbHVnaW5cbiAgICByZWdpc3RlcmVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG5cbiAgICAvLyBzZXR1cCFcbiAgICB2YXIgcGx1Z2luT3V0bGluZSA9IHBsdWdpbih7XG4gICAgICBhZGRGaWx0ZXI6IGFkZEZpbHRlcixcbiAgICAgIHV0aWxzOiB7XG4gICAgICAgIFR5cGU6IFR5cGUsXG4gICAgICAgIGZvcmluOiBmb3JpbixcbiAgICAgICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICAgICAgICBpc0ZpbGU6IGlzRmlsZSxcbiAgICAgICAgdG9OYXR1cmFsRmlsZVNpemU6IHRvTmF0dXJhbEZpbGVTaXplLFxuICAgICAgICByZXBsYWNlSW5TdHJpbmc6IHJlcGxhY2VJblN0cmluZyxcbiAgICAgICAgZ2V0RXh0ZW5zaW9uRnJvbUZpbGVuYW1lOiBnZXRFeHRlbnNpb25Gcm9tRmlsZW5hbWUsXG4gICAgICAgIGdldEZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbjogZ2V0RmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uLFxuICAgICAgICBndWVzc3RpbWF0ZU1pbWVUeXBlOiBndWVzc3RpbWF0ZU1pbWVUeXBlLFxuICAgICAgICBnZXRGaWxlRnJvbUJsb2I6IGdldEZpbGVGcm9tQmxvYixcbiAgICAgICAgZ2V0RmlsZW5hbWVGcm9tVVJMOiBnZXRGaWxlbmFtZUZyb21VUkwsXG4gICAgICAgIGNyZWF0ZVJvdXRlOiBjcmVhdGVSb3V0ZSxcbiAgICAgICAgY3JlYXRlV29ya2VyOiBjcmVhdGVXb3JrZXIsXG4gICAgICAgIGNyZWF0ZVZpZXc6IGNyZWF0ZVZpZXcsXG4gICAgICAgIGNyZWF0ZUl0ZW1BUEk6IGNyZWF0ZUl0ZW1BUEksXG4gICAgICAgIGxvYWRJbWFnZTogbG9hZEltYWdlLFxuICAgICAgICBjb3B5RmlsZTogY29weUZpbGUsXG4gICAgICAgIHJlbmFtZUZpbGU6IHJlbmFtZUZpbGUsXG4gICAgICAgIGNyZWF0ZUJsb2I6IGNyZWF0ZUJsb2IsXG4gICAgICAgIGFwcGx5RmlsdGVyQ2hhaW46IGFwcGx5RmlsdGVyQ2hhaW4sXG4gICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgIGdldE51bWVyaWNBc3BlY3RSYXRpb0Zyb21TdHJpbmc6IGdldE51bWVyaWNBc3BlY3RSYXRpb0Zyb21TdHJpbmdcbiAgICAgIH0sXG5cbiAgICAgIHZpZXdzOiB7XG4gICAgICAgIGZpbGVBY3Rpb25CdXR0b246IGZpbGVBY3Rpb25CdXR0b25cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGFkZCBwbHVnaW4gb3B0aW9ucyB0byBkZWZhdWx0IG9wdGlvbnNcbiAgICBleHRlbmREZWZhdWx0T3B0aW9ucyhwbHVnaW5PdXRsaW5lLm9wdGlvbnMpO1xuICB9O1xuXG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIHVzZWQgYnkgc3VwcG9ydGVkKCkgbWV0aG9kXG4gIHZhciBpc09wZXJhTWluaSA9IGZ1bmN0aW9uIGlzT3BlcmFNaW5pKCkge1xuICAgIHJldHVybiAoXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwod2luZG93Lm9wZXJhbWluaSkgPT09ICdbb2JqZWN0IE9wZXJhTWluaV0nXG4gICAgKTtcbiAgfTtcbiAgdmFyIGhhc1Byb21pc2VzID0gZnVuY3Rpb24gaGFzUHJvbWlzZXMoKSB7XG4gICAgcmV0dXJuICdQcm9taXNlJyBpbiB3aW5kb3c7XG4gIH07XG4gIHZhciBoYXNCbG9iU2xpY2UgPSBmdW5jdGlvbiBoYXNCbG9iU2xpY2UoKSB7XG4gICAgcmV0dXJuICdzbGljZScgaW4gQmxvYi5wcm90b3R5cGU7XG4gIH07XG4gIHZhciBoYXNDcmVhdGVPYmplY3RVUkwgPSBmdW5jdGlvbiBoYXNDcmVhdGVPYmplY3RVUkwoKSB7XG4gICAgcmV0dXJuICdVUkwnIGluIHdpbmRvdyAmJiAnY3JlYXRlT2JqZWN0VVJMJyBpbiB3aW5kb3cuVVJMO1xuICB9O1xuICB2YXIgaGFzVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIGhhc1Zpc2liaWxpdHkoKSB7XG4gICAgcmV0dXJuICd2aXNpYmlsaXR5U3RhdGUnIGluIGRvY3VtZW50O1xuICB9O1xuICB2YXIgaGFzVGltaW5nID0gZnVuY3Rpb24gaGFzVGltaW5nKCkge1xuICAgIHJldHVybiAncGVyZm9ybWFuY2UnIGluIHdpbmRvdztcbiAgfTsgLy8gaU9TIDgueFxuICB2YXIgaGFzQ1NTU3VwcG9ydHMgPSBmdW5jdGlvbiBoYXNDU1NTdXBwb3J0cygpIHtcbiAgICByZXR1cm4gJ3N1cHBvcnRzJyBpbiAod2luZG93LkNTUyB8fCB7fSk7XG4gIH07IC8vIHVzZSB0byBkZXRlY3QgU2FmYXJpIDkrXG4gIHZhciBpc0lFMTEgPSBmdW5jdGlvbiBpc0lFMTEoKSB7XG4gICAgcmV0dXJuIC9NU0lFfFRyaWRlbnQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9O1xuXG4gIHZhciBzdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XG4gICAgLy8gUnVucyBpbW1pZGlhdGVseSBhbmQgdGhlbiByZW1lbWJlcnMgcmVzdWx0IGZvciBzdWJzZXF1ZW50IGNhbGxzXG4gICAgdmFyIGlzU3VwcG9ydGVkID1cbiAgICAgIC8vIEhhcyB0byBiZSBhIGJyb3dzZXJcbiAgICAgIGlzQnJvd3NlcigpICYmXG4gICAgICAvLyBDYW4ndCBydW4gb24gT3BlcmEgTWluaSBkdWUgdG8gbGFjayBvZiBldmVyeXRoaW5nXG4gICAgICAhaXNPcGVyYU1pbmkoKSAmJlxuICAgICAgLy8gUmVxdWlyZSB0aGVzZSBBUElzIHRvIGZlYXR1cmUgZGV0ZWN0IGEgbW9kZXJuIGJyb3dzZXJcbiAgICAgIGhhc1Zpc2liaWxpdHkoKSAmJlxuICAgICAgaGFzUHJvbWlzZXMoKSAmJlxuICAgICAgaGFzQmxvYlNsaWNlKCkgJiZcbiAgICAgIGhhc0NyZWF0ZU9iamVjdFVSTCgpICYmXG4gICAgICBoYXNUaW1pbmcoKSAmJlxuICAgICAgLy8gZG9lc24ndCBuZWVkIENTU1N1cHBvcnRzIGJ1dCBpcyBhIGdvb2Qgd2F5IHRvIGRldGVjdCBTYWZhcmkgOSsgKHdlIGRvIHdhbnQgdG8gc3VwcG9ydCBJRTExIHRob3VnaClcbiAgICAgIChoYXNDU1NTdXBwb3J0cygpIHx8IGlzSUUxMSgpKTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgICB9O1xuICB9KSgpO1xuXG4gIC8qKlxuICAgKiBQbHVnaW4gaW50ZXJuYWwgc3RhdGUgKG92ZXIgYWxsIGluc3RhbmNlcylcbiAgICovXG4gIHZhciBzdGF0ZSA9IHtcbiAgICAvLyBhY3RpdmUgYXBwIGluc3RhbmNlcywgdXNlZCB0byByZWRyYXcgdGhlIGFwcHMgYW5kIHRvIGZpbmQgdGhlIGxhdGVyXG4gICAgYXBwczogW11cbiAgfTtcblxuICAvLyBwbHVnaW4gbmFtZVxuICB2YXIgbmFtZSA9ICdmaWxlcG9uZCc7XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBQbHVnaW4gbWV0aG9kc1xuICAgKi9cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4oKSB7fTtcbiAgZXhwb3J0cy5TdGF0dXMgPSB7fTtcbiAgZXhwb3J0cy5GaWxlU3RhdHVzID0ge307XG4gIGV4cG9ydHMuRmlsZU9yaWdpbiA9IHt9O1xuICBleHBvcnRzLk9wdGlvblR5cGVzID0ge307XG4gIGV4cG9ydHMuY3JlYXRlID0gZm47XG4gIGV4cG9ydHMuZGVzdHJveSA9IGZuO1xuICBleHBvcnRzLnBhcnNlID0gZm47XG4gIGV4cG9ydHMuZmluZCA9IGZuO1xuICBleHBvcnRzLnJlZ2lzdGVyUGx1Z2luID0gZm47XG4gIGV4cG9ydHMuZ2V0T3B0aW9ucyA9IGZuO1xuICBleHBvcnRzLnNldE9wdGlvbnMgPSBmbjtcblxuICAvLyBpZiBub3Qgc3VwcG9ydGVkLCBubyBBUElcbiAgaWYgKHN1cHBvcnRlZCgpKSB7XG4gICAgLy8gc3RhcnQgcGFpbnRlciBhbmQgZmlyZSBsb2FkIGV2ZW50XG4gICAgY3JlYXRlUGFpbnRlcihcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICBzdGF0ZS5hcHBzLmZvckVhY2goZnVuY3Rpb24oYXBwKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcC5fcmVhZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbih0cykge1xuICAgICAgICBzdGF0ZS5hcHBzLmZvckVhY2goZnVuY3Rpb24oYXBwKSB7XG4gICAgICAgICAgcmV0dXJuIGFwcC5fd3JpdGUodHMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gZmlyZSBsb2FkZWQgZXZlbnQgc28gd2Uga25vdyB3aGVuIEZpbGVQb25kIGlzIGF2YWlsYWJsZVxuICAgIHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgLy8gbGV0IG90aGVycyBrbm93IHdlIGhhdmUgYXJlYSByZWFkeVxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCdGaWxlUG9uZDpsb2FkZWQnLCB7XG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBzdXBwb3J0ZWQ6IHN1cHBvcnRlZCxcbiAgICAgICAgICAgIGNyZWF0ZTogZXhwb3J0cy5jcmVhdGUsXG4gICAgICAgICAgICBkZXN0cm95OiBleHBvcnRzLmRlc3Ryb3ksXG4gICAgICAgICAgICBwYXJzZTogZXhwb3J0cy5wYXJzZSxcbiAgICAgICAgICAgIGZpbmQ6IGV4cG9ydHMuZmluZCxcbiAgICAgICAgICAgIHJlZ2lzdGVyUGx1Z2luOiBleHBvcnRzLnJlZ2lzdGVyUGx1Z2luLFxuICAgICAgICAgICAgc2V0T3B0aW9uczogZXhwb3J0cy5zZXRPcHRpb25zXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgLy8gY2xlYW4gdXAgZXZlbnRcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkaXNwYXRjaCk7XG4gICAgfTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIC8vIG1vdmUgdG8gYmFjayBvZiBleGVjdXRpb24gcXVldWUsIEZpbGVQb25kIHNob3VsZCBoYXZlIGJlZW4gZXhwb3J0ZWQgYnkgdGhlblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKCk7XG4gICAgICB9LCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGRpc3BhdGNoKTtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGVzIHRoZSBPcHRpb25UeXBlcyBvYmplY3QgYmFzZWQgb24gdGhlIGN1cnJlbnQgb3B0aW9uc1xuICAgIHZhciB1cGRhdGVPcHRpb25UeXBlcyA9IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvblR5cGVzKCkge1xuICAgICAgcmV0dXJuIGZvcmluKGdldE9wdGlvbnMoKSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICBleHBvcnRzLk9wdGlvblR5cGVzW2tleV0gPSB2YWx1ZVsxXTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBleHBvcnRzLlN0YXR1cyA9IE9iamVjdC5hc3NpZ24oe30sIFN0YXR1cyk7XG4gICAgZXhwb3J0cy5GaWxlT3JpZ2luID0gT2JqZWN0LmFzc2lnbih7fSwgRmlsZU9yaWdpbik7XG4gICAgZXhwb3J0cy5GaWxlU3RhdHVzID0gT2JqZWN0LmFzc2lnbih7fSwgSXRlbVN0YXR1cyk7XG5cbiAgICBleHBvcnRzLk9wdGlvblR5cGVzID0ge307XG4gICAgdXBkYXRlT3B0aW9uVHlwZXMoKTtcblxuICAgIC8vIGNyZWF0ZSBtZXRob2QsIGNyZWF0ZXMgYXBwcyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBhcHAgYXJyYXlcbiAgICBleHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBhcHAgPSBjcmVhdGVBcHAkMS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICBhcHAub24oJ2Rlc3Ryb3knLCBleHBvcnRzLmRlc3Ryb3kpO1xuICAgICAgc3RhdGUuYXBwcy5wdXNoKGFwcCk7XG4gICAgICByZXR1cm4gY3JlYXRlQXBwQVBJKGFwcCk7XG4gICAgfTtcblxuICAgIC8vIGRlc3Ryb3lzIGFwcHMgYW5kIHJlbW92ZXMgdGhlbSBmcm9tIHRoZSBhcHAgYXJyYXlcbiAgICBleHBvcnRzLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGhvb2spIHtcbiAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgYXBwIHdhcyBkZXN0cm95ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICB2YXIgaW5kZXhUb1JlbW92ZSA9IHN0YXRlLmFwcHMuZmluZEluZGV4KGZ1bmN0aW9uKGFwcCkge1xuICAgICAgICByZXR1cm4gYXBwLmlzQXR0YWNoZWRUbyhob29rKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPj0gMCkge1xuICAgICAgICAvLyByZW1vdmUgZnJvbSBhcHBzXG4gICAgICAgIHZhciBhcHAgPSBzdGF0ZS5hcHBzLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKVswXTtcblxuICAgICAgICAvLyByZXN0b3JlIG9yaWdpbmFsIGRvbSBlbGVtZW50XG4gICAgICAgIGFwcC5yZXN0b3JlRWxlbWVudCgpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8vIHBhcnNlcyB0aGUgZ2l2ZW4gY29udGV4dCBmb3IgcGx1Z2lucyAoZG9lcyBub3QgaW5jbHVkZSB0aGUgY29udGV4dCBlbGVtZW50IGl0c2VsZilcbiAgICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoY29udGV4dCkge1xuICAgICAgLy8gZ2V0IGFsbCBwb3NzaWJsZSBob29rc1xuICAgICAgdmFyIG1hdGNoZWRIb29rcyA9IEFycmF5LmZyb20oY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIG5hbWUpKTtcblxuICAgICAgLy8gZmlsdGVyIG91dCBhbHJlYWR5IGFjdGl2ZSBob29rc1xuICAgICAgdmFyIG5ld0hvb2tzID0gbWF0Y2hlZEhvb2tzLmZpbHRlcihmdW5jdGlvbihuZXdIb29rKSB7XG4gICAgICAgIHJldHVybiAhc3RhdGUuYXBwcy5maW5kKGZ1bmN0aW9uKGFwcCkge1xuICAgICAgICAgIHJldHVybiBhcHAuaXNBdHRhY2hlZFRvKG5ld0hvb2spO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBjcmVhdGUgbmV3IGluc3RhbmNlIGZvciBlYWNoIGhvb2tcbiAgICAgIHJldHVybiBuZXdIb29rcy5tYXAoZnVuY3Rpb24oaG9vaykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5jcmVhdGUoaG9vayk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gcmV0dXJucyBhbiBhcHAgYmFzZWQgb24gdGhlIGdpdmVuIGVsZW1lbnQgaG9va1xuICAgIGV4cG9ydHMuZmluZCA9IGZ1bmN0aW9uIGZpbmQoaG9vaykge1xuICAgICAgdmFyIGFwcCA9IHN0YXRlLmFwcHMuZmluZChmdW5jdGlvbihhcHApIHtcbiAgICAgICAgcmV0dXJuIGFwcC5pc0F0dGFjaGVkVG8oaG9vayk7XG4gICAgICB9KTtcbiAgICAgIGlmICghYXBwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZUFwcEFQSShhcHApO1xuICAgIH07XG5cbiAgICAvLyBhZGRzIGEgcGx1Z2luIGV4dGVuc2lvblxuICAgIGV4cG9ydHMucmVnaXN0ZXJQbHVnaW4gPSBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7XG4gICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICBfa2V5KytcbiAgICAgICkge1xuICAgICAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAvLyByZWdpc3RlciBwbHVnaW5zXG4gICAgICBwbHVnaW5zLmZvckVhY2goY3JlYXRlQXBwUGx1Z2luKTtcblxuICAgICAgLy8gdXBkYXRlIE9wdGlvblR5cGVzLCBlYWNoIHBsdWdpbiBtaWdodCBoYXZlIGV4dGVuZGVkIHRoZSBkZWZhdWx0IG9wdGlvbnNcbiAgICAgIHVwZGF0ZU9wdGlvblR5cGVzKCk7XG4gICAgfTtcblxuICAgIGV4cG9ydHMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMkMSgpIHtcbiAgICAgIHZhciBvcHRzID0ge307XG4gICAgICBmb3JpbihnZXRPcHRpb25zKCksIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgb3B0c1trZXldID0gdmFsdWVbMF07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvcHRzO1xuICAgIH07XG5cbiAgICBleHBvcnRzLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zJDEob3B0cykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdHMpKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBleGlzdGluZyBwbHVnaW5zXG4gICAgICAgIHN0YXRlLmFwcHMuZm9yRWFjaChmdW5jdGlvbihhcHApIHtcbiAgICAgICAgICBhcHAuc2V0T3B0aW9ucyhvcHRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gb3ZlcnJpZGUgZGVmYXVsdHNcbiAgICAgICAgc2V0T3B0aW9ucyhvcHRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIG5ldyBvcHRpb25zXG4gICAgICByZXR1cm4gZXhwb3J0cy5nZXRPcHRpb25zKCk7XG4gICAgfTtcbiAgfVxuXG4gIGV4cG9ydHMuc3VwcG9ydGVkID0gc3VwcG9ydGVkO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59KTtcbiIsIi8vIHBvbHlmaWxsc1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuaW1wb3J0ICdjb3JlLWpzL2VzL2FycmF5L2ZpbmQtaW5kZXgnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRMaWdodGJveCBmcm9tICcuL2NvbXBvbmVudC9saWdodGJveC5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50TGlnaHRib3gucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50TGlnaHRib3ggYXR0cmlidXRlcz17YXR0cmlidXRlc30gY29uZmlnPXtjb25maWd9Lz4sIGVsZW0pXG59XG5cbmV4cG9ydCB7XG4gIE9wZW5TdGFkQ29tcG9uZW50TGlnaHRib3ggYXMgZGVmYXVsdCxcbiAgT3BlblN0YWRDb21wb25lbnRMaWdodGJveCBhcyBMaWdodGJveCxcbn07XG5cbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsIi8vIFBvbHlmaWxsIGZvciBjcmVhdGluZyBDdXN0b21FdmVudHMgb24gSUU5LzEwLzExXG5cbi8vIGNvZGUgcHVsbGVkIGZyb206XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZDR0b2NjaGluaS9jdXN0b21ldmVudC1wb2x5ZmlsbFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50I1BvbHlmaWxsXG5cbihmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB2YXIgY2UgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0ZXN0JywgeyBjYW5jZWxhYmxlOiB0cnVlIH0pO1xuICAgIGNlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKGNlLmRlZmF1bHRQcmV2ZW50ZWQgIT09IHRydWUpIHtcbiAgICAgIC8vIElFIGhhcyBwcm9ibGVtcyB3aXRoIC5wcmV2ZW50RGVmYXVsdCgpIG9uIGN1c3RvbSBldmVudHNcbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjMzNDkxOTFcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHByZXZlbnQgZGVmYXVsdCcpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciBDdXN0b21FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgIHZhciBldnQsIG9yaWdQcmV2ZW50O1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgICAgcGFyYW1zLmJ1YmJsZXMgPSAhIXBhcmFtcy5idWJibGVzO1xuICAgICAgcGFyYW1zLmNhbmNlbGFibGUgPSAhIXBhcmFtcy5jYW5jZWxhYmxlO1xuXG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoXG4gICAgICAgIGV2ZW50LFxuICAgICAgICBwYXJhbXMuYnViYmxlcyxcbiAgICAgICAgcGFyYW1zLmNhbmNlbGFibGUsXG4gICAgICAgIHBhcmFtcy5kZXRhaWxcbiAgICAgICk7XG4gICAgICBvcmlnUHJldmVudCA9IGV2dC5wcmV2ZW50RGVmYXVsdDtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvcmlnUHJldmVudC5jYWxsKHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdFByZXZlbnRlZCcsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBldnQ7XG4gICAgfTtcblxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7IC8vIGV4cG9zZSBkZWZpbml0aW9uIHRvIHdpbmRvd1xuICB9XG59KSgpO1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjbGFzc29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgnKTtcbnZhciBlbnRyeVVuYmluZCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9lbnRyeS11bmJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVVuYmluZCgnQXJyYXknLCAnZmluZEluZGV4Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgRklORF9JTkRFWCA9ICdmaW5kSW5kZXgnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoRklORF9JTkRFWCk7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EX0lOREVYKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IHsgSW1hZ2UgYXMgT3BlblN0YWRDb21wb25lbnRJbWFnZSB9IGZyb20gJy4uLy4uL2ltYWdlL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtcyBmcm9tICcuLi8uLi9mb3Jtcy9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFF1ZXN0aW9uIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAvLyBkZWZhdWx0c1xuICAgIHRoaXMuY29uZmlnLmFzcGVjdFJhdGlvID0gdGhpcy5jb25maWcuYXNwZWN0UmF0aW8gfHwgJzE2eDknO1xuXG4gICAgdGhpcy5xdWVzdGlvbklkID0gcHJvcHMuZGF0YS5pZDtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogNTAsXG4gICAgICBpc0Fuc3dlcmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgdGhpcy5vbkNoYW5nZUhhbmRsZXIgPSB0aGlzLm9uQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd0xpZ2h0Ym94ID0gdGhpcy5zaG93TGlnaHRib3guYmluZCh0aGlzKTtcblxuXG4gIH1cblxuICBvbkNoYW5nZUhhbmRsZXIodmFsdWUpIHtcbiAgICBsZXQgc3RhdGUgPSB7IHZhbHVlOiB2YWx1ZSwgaXNBbnN3ZXJlZDogdHJ1ZSB9O1xuICAgIHN0YXRlLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsICgpID0+IHtcbiAgICAgIHRoaXMubGl2ZVVwZGF0ZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzVmFsaWQoKSB7XG5cbiAgICBsZXQgZGF0YSA9IHRoaXMucHJvcHMuZGF0YSB8fCB7fTtcbiAgICBsZXQgd2FzQWxyZWFkeUFuc3dlcmVkID0gdHlwZW9mIGRhdGEudmFsdWUgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgICBpZiAod2FzQWxyZWFkeUFuc3dlcmVkIHx8IHRoaXMuc3RhdGUuaXNBbnN3ZXJlZCkgcmV0dXJuIHRydWU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtlcnJvcjogJ0plIGhlYnQgbm9nIGdlZW4ga2V1emUgZ2VtYWFrdCd9KTtcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgfVxuXG4gIGdldEFuc3dlcigpIHtcblxuICAgIGlmICghdGhpcy5zdGF0ZS5pc0Fuc3dlcmVkKSByZXR1cm47IC8vIG51bGxcblxuICAgIGxldCBkYXRhID0gdGhpcy5wcm9wcy5kYXRhIHx8IHt9O1xuICAgIGxldCB2YWx1ZXMgPSBkYXRhLnZhbHVlcyB8fCB7fTtcblxuICAgIGxldCBkaW1lbnNpb25zID0gZGF0YS5kaW1lbnNpb25zO1xuICAgIHRyeSB7XG4gICAgICBkaW1lbnNpb25zID0gSlNPTi5wYXJzZShkaW1lbnNpb25zKVxuICAgIH0gY2F0Y2ggKGVycikge31cbiAgICBkaW1lbnNpb25zID0gZGltZW5zaW9ucyB8fCBbJ3gnXTtcblxuICAgIC8vIGdldCBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEwMFxuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN0YXRlLnZhbHVlID09ICdudW1iZXInIHx8IHR5cGVvZiB0aGlzLnN0YXRlLnZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHQgPSB7fTtcbiAgICAgIGlmICggZGltZW5zaW9ucy5pbmNsdWRlcygneCcpICkgcmVzdWx0LnggPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgaWYgKCBkaW1lbnNpb25zLmluY2x1ZGVzKCd5JykgKSByZXN1bHQueSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgICBpZiAoIGRpbWVuc2lvbnMuaW5jbHVkZXMoJ3onKSApIHJlc3VsdC56ID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0ge307XG4gICAgICBpZiAoIGRpbWVuc2lvbnMuaW5jbHVkZXMoJ3gnKSApIHJlc3VsdC54ID0gdGhpcy5zdGF0ZS52YWx1ZS54O1xuICAgICAgaWYgKCBkaW1lbnNpb25zLmluY2x1ZGVzKCd5JykgKSByZXN1bHQueSA9IHRoaXMuc3RhdGUudmFsdWUueTtcbiAgICAgIGlmICggZGltZW5zaW9ucy5pbmNsdWRlcygneicpICkgcmVzdWx0LnogPSB0aGlzLnN0YXRlLnZhbHVlLno7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coJ2Fuc3dlcicsIGRhdGEudGl0bGUsIHJlc3VsdCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIH1cblxuICBsaXZlVXBkYXRlcygpIHtcblx0XHR2YXIgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdvc2MtY2hvaWNlcy1ndWlkZS1saXZlLXVwZGF0ZXMnKTtcblx0XHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIHNob3dMaWdodGJveChzdGFydFdpdGgpIHtcblxuICAgIGxldCBkYXRhID0gdGhpcy5wcm9wcy5kYXRhIHx8IHt9O1xuXG4gICAgbGV0IHF1ZXN0aW9uSW1hZ2VBID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQSAmJiBkYXRhLnZhbHVlcy5BLnF1ZXN0aW9uSW1hZ2U7XG4gICAgaWYgKHF1ZXN0aW9uSW1hZ2VBICYmIHF1ZXN0aW9uSW1hZ2VBLmxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXN0aW9uSW1hZ2VBKSkgcXVlc3Rpb25JbWFnZUEgPSBbcXVlc3Rpb25JbWFnZUFdO1xuICAgICAgcXVlc3Rpb25JbWFnZUEgPSBxdWVzdGlvbkltYWdlQVswXTtcbiAgICB9XG4gICAgbGV0IHF1ZXN0aW9uSW1hZ2VCID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQiAmJiBkYXRhLnZhbHVlcy5CLnF1ZXN0aW9uSW1hZ2U7XG4gICAgaWYgKHF1ZXN0aW9uSW1hZ2VCICYmIHF1ZXN0aW9uSW1hZ2VCLmxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXN0aW9uSW1hZ2VCKSkgcXVlc3Rpb25JbWFnZUIgPSBbcXVlc3Rpb25JbWFnZUJdO1xuICAgICAgcXVlc3Rpb25JbWFnZUIgPSBxdWVzdGlvbkltYWdlQlswXTtcbiAgICB9XG4gICAgbGV0IGltYWdlcyA9IFtxdWVzdGlvbkltYWdlQSwgcXVlc3Rpb25JbWFnZUJdXG5cbiAgICBsZXQgc3RhcnRJbmRleCA9IGltYWdlcy5maW5kSW5kZXgoIGltZyA9PiBpbWcgPT0gc3RhcnRXaXRoICk7XG5cblx0XHQvLyBkaXNwYXRjaCBhbiBldmVudFxuXHRcdHZhciBldmVudCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ29zYy1zaG93LWxpZ2h0LWJveCcsIHsgZGV0YWlsOiB7IGltYWdlcywgc3RhcnRJbmRleCwgYXNwZWN0UmF0aW86IHRoaXMuY29uZmlnLmFzcGVjdFJhdGlvIH0gfSk7XG5cdFx0ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgXG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRhdGEgPSBzZWxmLnByb3BzLmRhdGEgfHwge307XG5cbiAgICBsZXQgaXNFcnJvciA9IGZhbHNlO1xuICAgIGlmIChzZWxmLnN0YXRlLmVycm9yKSBpc0Vycm9yID0gdHJ1ZTtcblxuICAgIGxldCBpc0Fuc3dlcmVkID0gc2VsZi5zdGF0ZS5pc0Fuc3dlcmVkO1xuICAgIGxldCB2YWx1ZSA9IHR5cGVvZiBkYXRhLnZhbHVlID09ICdvYmplY3QnID8gZGF0YS52YWx1ZS54IDogKCB0eXBlb2YgZGF0YS52YWx1ZSAhPSAndW5kZWZpbmVkJyA/IGRhdGEudmFsdWUgOiAnbm90IGRlZmluZWQnICk7XG4gICAgaWYgKHZhbHVlID09PSAnbm90IGRlZmluZWQnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzQW5zd2VyZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGxldCBpbWFnZUhUTUwgPSBudWxsO1xuICAgIGxldCBpbWFnZXMgPSBkYXRhLmltYWdlcyB8fCBbXTtcbiAgICBpZiAoaW1hZ2VzICYmIGltYWdlcy5sZW5ndGgpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbWFnZXMpKSBpbWFnZXMgPSBbaW1hZ2VzXTtcbiAgICAgIGxldCBpbWFnZSA9IGltYWdlc1swXTtcbiAgICAgIGltYWdlSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bvc2MtcXVlc3Rpb24taW1hZ2UtY29udGFpbmVyYH0+XG4gICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50SW1hZ2UgY29uZmlnPXt7IGFzcGVjdFJhdGlvOiBzZWxmLmNvbmZpZy5hc3BlY3RSYXRpbyB9fSBpbWFnZT17aW1hZ2V9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBtb3JlSW5mb0hUTUwgPSBudWxsO1xuICAgIGlmIChkYXRhLm1vcmVJbmZvICYmICggZGF0YS5tb3JlSW5mby50aXRsZSB8fCBkYXRhLm1vcmVJbmZvLnRleHQgKSkge1xuICAgICAgbGV0IHRpdGxlID0gZGF0YS5tb3JlSW5mby50aXRsZSB8fCAnR2VlbiB0aXRlbCc7XG4gICAgICBsZXQgdGV4dCA9IGRhdGEubW9yZUluZm8udGV4dCB8fCAnR2VlbiB0ZWtzdCc7XG4gICAgICBtb3JlSW5mb0hUTUwgPSAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWFjY29yZGVvblwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWFjY29yZGVvbi1pdGVtIG9zYy1jbG9zZWRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXRpdGxlIG9zYy1pbmZvXCI+XG4gICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAge3RleHR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBsZXQgbGFiZWxBID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQSAmJiBkYXRhLnZhbHVlcy5BLmxhYmVsIHx8ICdBJztcbiAgICBsZXQgbGFiZWxCID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQiAmJiBkYXRhLnZhbHVlcy5CLmxhYmVsIHx8ICdCJztcbiAgICBsZXQgcXVlc3Rpb25IVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLWRlc2NyaXB0aW9uXCI+PGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24tdGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogZGF0YS5kZXNjcmlwdGlvbiB9fT48L2Rpdj57bW9yZUluZm9IVE1MfTwvZGl2Pik7XG5cbiAgICBsZXQgc2VsZWN0b3JIVE1MID0gbnVsbDtcbiAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuXG4gICAgICBjYXNlICdjb250aW51b3VzJzpcbiAgICAgICAgc2VsZWN0b3JIVE1MID1cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1zZWxlY3RvclwiPlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuU2xpZGVyIG1pbj0nMCcgbWF4PScxMDAnIHN0ZXA9JzEnIHZhbHVlPXt2YWx1ZX0gY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLXNlbGVjdG9yLXNsaWRlclwiIGNvbmZpZz17e319IHRvdWNoZWQ9e2lzQW5zd2VyZWR9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLm9uQ2hhbmdlSGFuZGxlcihkYXRhKSB9IHJlZj17ZWwgPT4gc2VsZi5zZWxlY3RvciA9IGVsfS8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1zZWxlY3Rvci1taW5sYWJlbFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbGFiZWxBIH19PjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tc2VsZWN0b3ItbWF4bGFiZWxcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGxhYmVsQiB9fT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYS10by1iJzpcbiAgICAgICAgbGV0IGxhYmVsQmVsb3dBID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQSAmJiBkYXRhLnZhbHVlcy5BLmxhYmVsQmVsb3cgfHwgJyc7XG4gICAgICAgIGxldCBsYWJlbEJlbG93QiA9IGRhdGEudmFsdWVzICYmIGRhdGEudmFsdWVzLkIgJiYgZGF0YS52YWx1ZXMuQi5sYWJlbEJlbG93IHx8ICcnO1xuICAgICAgICBsZXQgcXVlc3Rpb25UZXh0QSA9IGRhdGEudmFsdWVzICYmIGRhdGEudmFsdWVzLkEgJiYgZGF0YS52YWx1ZXMuQS5xdWVzdGlvblRleHQ7XG4gICAgICAgIGxldCBxdWVzdGlvblRleHRCID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQiAmJiBkYXRhLnZhbHVlcy5CLnF1ZXN0aW9uVGV4dDtcbiAgICAgICAgbGV0IHF1ZXN0aW9uQUhUTUwgPSBudWxsLCBxdWVzdGlvbkJIVE1MID0gbnVsbDtcbiAgICAgICAgaWYgKHF1ZXN0aW9uVGV4dEEgJiYgcXVlc3Rpb25UZXh0Qikge1xuICAgICAgICAgIHF1ZXN0aW9uQUhUTUwgPSAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLWRlc2NyaXB0aW9uLXRleHRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1sYWJlbFwiPntsYWJlbEF9PC9kaXY+PGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24tbGFiZWxlZC10ZXh0XCI+e3F1ZXN0aW9uVGV4dEF9PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgICAgcXVlc3Rpb25CSFRNTCA9IChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24tdGV4dFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLWRlc2NyaXB0aW9uLWxhYmVsXCI+e2xhYmVsQn08L2Rpdj48ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1sYWJlbGVkLXRleHRcIj57cXVlc3Rpb25UZXh0Qn08L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKTtcbiAgICAgICAgICBxdWVzdGlvbkhUTUwgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi10ZXh0XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBkYXRhLmRlc2NyaXB0aW9uIH19PjwvZGl2PlxuICAgICAgICAgICAgICB7cXVlc3Rpb25BSFRNTH1cbiAgICAgICAgICAgICAge3F1ZXN0aW9uQkhUTUx9XG4gICAgICAgICAgICAgIHttb3JlSW5mb0hUTUx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHF1ZXN0aW9uSW1hZ2VBID0gZGF0YS52YWx1ZXMgJiYgZGF0YS52YWx1ZXMuQSAmJiBkYXRhLnZhbHVlcy5BLnF1ZXN0aW9uSW1hZ2U7XG4gICAgICAgIGlmIChxdWVzdGlvbkltYWdlQSAmJiBxdWVzdGlvbkltYWdlQS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocXVlc3Rpb25JbWFnZUEpKSBxdWVzdGlvbkltYWdlQSA9IFtxdWVzdGlvbkltYWdlQV07XG4gICAgICAgICAgcXVlc3Rpb25JbWFnZUEgPSBxdWVzdGlvbkltYWdlQVswXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcXVlc3Rpb25JbWFnZUIgPSBkYXRhLnZhbHVlcyAmJiBkYXRhLnZhbHVlcy5CICYmIGRhdGEudmFsdWVzLkIucXVlc3Rpb25JbWFnZTtcbiAgICAgICAgaWYgKHF1ZXN0aW9uSW1hZ2VCICYmIHF1ZXN0aW9uSW1hZ2VCLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShxdWVzdGlvbkltYWdlQikpIHF1ZXN0aW9uSW1hZ2VCID0gW3F1ZXN0aW9uSW1hZ2VCXTtcbiAgICAgICAgICBxdWVzdGlvbkltYWdlQiA9IHF1ZXN0aW9uSW1hZ2VCWzBdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBxdWVzdGlvbkltYWdlQUhUTUwgPSBudWxsO1xuICAgICAgICBsZXQgcXVlc3Rpb25JbWFnZUJIVE1MID0gbnVsbDtcbiAgICAgICAgaWYgKHF1ZXN0aW9uSW1hZ2VBICYmIHF1ZXN0aW9uSW1hZ2VCKSB7XG4gICAgICAgICAgcXVlc3Rpb25JbWFnZUFIVE1MID0gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24taW1hZ2UtY29udGFpbmVyIG9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1pbWFnZS1jb250YWluZXItYVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1sYWJlbCBvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24tbGFiZWwtYVwiPntsYWJlbEF9PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLXF1ZXN0aW9uLWltYWdlLWNvbnRhaW5lciBvc2MtcXVlc3Rpb24taW1hZ2UtYXNwZWN0LSR7c2VsZi5jb25maWcuYXNwZWN0UmF0aW99YH0+XG4gICAgICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50SW1hZ2UgY29uZmlnPXt7IGFzcGVjdFJhdGlvOiBzZWxmLmNvbmZpZy5hc3BlY3RSYXRpbyB9fSBpbWFnZT17cXVlc3Rpb25JbWFnZUF9IG9uQ2xpY2s9eyAoKSA9PiBzZWxmLnNob3dMaWdodGJveChxdWVzdGlvbkltYWdlQSkgfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICBxdWVzdGlvbkltYWdlQkhUTUwgPSAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1pbWFnZS1jb250YWluZXIgb3NjLXF1ZXN0aW9uLWRlc2NyaXB0aW9uLWltYWdlLWNvbnRhaW5lci1iXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLWRlc2NyaXB0aW9uLWxhYmVsIG9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvbi1sYWJlbC1iXCI+e2xhYmVsQn08L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bvc2MtcXVlc3Rpb24taW1hZ2UtY29udGFpbmVyIG9zYy1xdWVzdGlvbi1pbWFnZS1hc3BlY3QtJHtzZWxmLmNvbmZpZy5hc3BlY3RSYXRpb31gfT5cbiAgICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRJbWFnZSBjb25maWc9e3sgYXNwZWN0UmF0aW86IHNlbGYuY29uZmlnLmFzcGVjdFJhdGlvIH19IGltYWdlPXtxdWVzdGlvbkltYWdlQn0gb25DbGljaz17ICgpID0+IHNlbGYuc2hvd0xpZ2h0Ym94KHF1ZXN0aW9uSW1hZ2VCKSB9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXN0aW9uSFRNTCA9IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZGVzY3JpcHRpb24tdGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogZGF0YS5kZXNjcmlwdGlvbiB9fT48L2Rpdj5cbiAgICAgICAgICAgIHttb3JlSW5mb0hUTUx9XG4gICAgICAgICAgICB7cXVlc3Rpb25JbWFnZUFIVE1MfVxuICAgICAgICAgICAge3F1ZXN0aW9uSW1hZ2VCSFRNTH1cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgY2xlYXI6ICdib3RoJywgaGVpZ2h0OiAxNSB9fT48L2Rpdj57LyogdG9kbyBkdXMgKi99XG4gICAgICAgICAgICB7cXVlc3Rpb25BSFRNTH1cbiAgICAgICAgICAgIHtxdWVzdGlvbkJIVE1MfVxuICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgIHNlbGVjdG9ySFRNTCA9IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1zZWxlY3RvclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tc2VsZWN0b3ItbGFiZWwtYVwiPntsYWJlbEF9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1zZWxlY3Rvci1sYWJlbC1iXCI+e2xhYmVsQn08L2Rpdj5cbiAgICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlNsaWRlciAgbWluPScwJyBtYXg9JzEwMCcgc3RlcD0nMScgdmFsdWU9e3ZhbHVlfSBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tc2VsZWN0b3Itc2xpZGVyXCIgY29uZmlnPXt7fX0gdG91Y2hlZD17aXNBbnN3ZXJlZH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYub25DaGFuZ2VIYW5kbGVyKGRhdGEpIH0gcmVmPXtlbCA9PiBzZWxmLnNlbGVjdG9yID0gZWx9Lz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLXNlbGVjdG9yLW1pbmxhYmVsXCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBsYWJlbEJlbG93QSB8fCAnJyB9fT48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLXNlbGVjdG9yLW1heGxhYmVsXCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBsYWJlbEJlbG93QiB8fCAnJyB9fT48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZW51bS1yYWRpbyc6XG4gICAgICAgIHNlbGVjdG9ySFRNTCA9IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1zZWxlY3RvclwiPlxuICAgICAgICAgICAgeyBkYXRhLnZhbHVlcyAmJiBkYXRhLnZhbHVlcy5tYXAoKGVudHJ5LCBpKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBrZXkgPSBwYXJzZUludCgxMDAwMDAwICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgICAgICAgIGxldCBjaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS52YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEudmFsdWUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudmFsdWVba2V5XSAhPT0gZW50cnkudmFsdWVba2V5XSkgY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnZhbHVlID09PSBlbnRyeS52YWx1ZSkgY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZGF0YS52YWx1ZSAhPSAndW5kZWZpbmVkJyA/IGRhdGEudmFsdWUgOiB0aGlzLnN0YXRlLnZhbHVlO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtgZGl2LXZhbHVlLSR7a2V5fWB9IGNsYXNzTmFtZT1cIm9zYy1yYWRpby1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLXJhZGlvLWlucHV0JHtjaGVja2VkID8gJyBvc2MtcmFkaW8taW5wdXQtY2hlY2tlZCcgOiAnJyB9YH0+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPXtgZW51bS1yYWRpby0ke2RhdGEuaWR9YH0gdHlwZT1cInJhZGlvXCIgb25DaGFuZ2U9eygpID0+IHNlbGYub25DaGFuZ2VIYW5kbGVyKGVudHJ5LnZhbHVlKX0ga2V5PXtgYnV0dG9uLXZhbHVlLSR7a2V5fWB9Lz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcmFkaW8tdGV4dFwiPntlbnRyeS50ZXh0fTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlbnVtLWJ1dHRvbnMnOlxuICAgICAgICBzZWxlY3RvckhUTUwgPVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLXNlbGVjdG9yXCI+XG4gICAgICAgICAgICB7IGRhdGEudmFsdWVzICYmIGRhdGEudmFsdWVzLm1hcCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxidXR0b24gb25DbGljaz17KCkgPT4gc2VsZi5vbkNoYW5nZUhhbmRsZXIoZW50cnkudmFsdWUpfSBrZXk9e2BidXR0b24tdmFsdWUtJHtpfWB9PntlbnRyeS50ZXh0fTwvYnV0dG9uPjtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNlbGVjdG9ySFRNTCA9ICg8ZGl2PlR5cGUge2RhdGEudHlwZX0gaXMgKG5vZykgbmlldCBnZWltcGxlbWVudGVlcmQuPC9kaXY+KTtcblxuICAgIH1cblxuICAgIGxldCBlcnJvckhUTUwgPSBudWxsO1xuICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICBlcnJvckhUTUwgPSA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1lcnJvci10ZXh0XCI+e3NlbGYuc3RhdGUuZXJyb3J9PC9kaXY+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPXtzZWxmLnByb3BzLmNvbmZpZy5kaXZJZH0gY2xhc3NOYW1lPXtgb3NjLXF1ZXN0aW9uIG9zYy1xdWVzdGlvbi0ke2RhdGEudHlwZX0ke2lzRXJyb3IgPyAnIG9zYy1lcnJvcicgOiAnJ31gfT5cbiAgICAgICAge2ltYWdlSFRNTH1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tY29udGVudFwiIGlkPXtzZWxmLnByb3BzLmNvbmZpZy5kaXZJZCArICctY29udGVudCd9PlxuICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tdGl0bGVcIj4ge2RhdGEudGl0bGV9PC9oMz5cbiAgICAgICAgICB7cXVlc3Rpb25IVE1MfVxuICAgICAgICAgIHtzZWxlY3RvckhUTUx9XG4gICAgICAgICAge2Vycm9ySFRNTH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UXVlc3Rpb24gZnJvbSAnLi9xdWVzdGlvbi5qc3gnO1xuXG4vLyBUUE9ETzogcmVtb3ZlIGFuc3dlckRpbWVuc2lvbnMgZm9ybSB0aGUgQVBJIGFuZCBEQlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFF1ZXN0aW9uR3JvdXAgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMubm9PZlF1ZXN0aW9uc1RvU2hvdyA9IHRoaXMuY29uZmlnLm5vT2ZRdWVzdGlvbnNUb1Nob3cgfHwgMTtcbiAgICB0aGlzLnF1ZXN0aW9uRWxlbWVudHMgPSBbXTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50UXVlc3Rpb246IDAsXG4gICAgICB2YWx1ZXM6IHt9LFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gIH1cblxuICBpc1ZhbGlkKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGxldCBzaG93blF1ZXN0aW9ucyA9IHNlbGYucHJvcHMuZGF0YS5xdWVzdGlvbnMuc2xpY2UoIHNlbGYuc3RhdGUuY3VycmVudFF1ZXN0aW9uLCBzZWxmLnN0YXRlLmN1cnJlbnRRdWVzdGlvbiArIHNlbGYubm9PZlF1ZXN0aW9uc1RvU2hvdyApO1xuICAgIGxldCBzY3JvbGxEb25lID0gZmFsc2U7XG4gICAgc2hvd25RdWVzdGlvbnMuZm9yRWFjaCggKCBxdWVzdGlvbiwgaSApID0+IHtcbiAgICAgIGlmICggIXNlbGYucXVlc3Rpb25FbGVtZW50c1tpXS5pc1ZhbGlkKCkgKSB7XG4gICAgICAgIGlmICghc2Nyb2xsRG9uZSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3NlbGYucXVlc3Rpb25FbGVtZW50c1tpXS5jb25maWcuZGl2SWR9LWNvbnRlbnRgKS5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnfSlcbiAgICAgICAgICB9LCAyNTAgKTtcbiAgICAgICAgfVxuICAgICAgICBzY3JvbGxEb25lID0gdHJ1ZTtcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpc1ZhbGlkO1xuXG4gIH1cblxuICBnZXRBbnN3ZXJzKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgdmFsdWVzID0gbWVyZ2Uoe30sIHRoaXMucHJvcHMuZGF0YSAmJiB0aGlzLnByb3BzLmRhdGEudmFsdWVzLCBzZWxmLnN0YXRlLnZhbHVlcyk7XG4gICAgc2VsZi5wcm9wcy5kYXRhICYmIHNlbGYucHJvcHMuZGF0YS5xdWVzdGlvbnMuZm9yRWFjaCggKCBxdWVzdGlvbiwgaSApID0+IHtcbiAgICAgIGxldCBlbGVtZW50ID0gc2VsZi5xdWVzdGlvbkVsZW1lbnRzLmZpbmQoIGVsZW0gPT4gZWxlbSAmJiBlbGVtLnF1ZXN0aW9uSWQgPT0gcXVlc3Rpb24uaWQgKTtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGlmICggdHlwZW9mIGVsZW1lbnQuZ2V0QW5zd2VyKCkgIT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgdmFsdWVzW3F1ZXN0aW9uLmlkXSA9IGVsZW1lbnQuZ2V0QW5zd2VyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxmLnNldFN0YXRlKHsgdmFsdWVzIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBnb3RvTmV4dFF1ZXN0aW9uKCkge1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkgcmV0dXJuO1xuXG4gICAgbGV0IHN0YXRlID0ge307XG4gICAgbGV0IGN1cnJlbnRRdWVzdGlvbiA9IHRoaXMuc3RhdGUuY3VycmVudFF1ZXN0aW9uICsgdGhpcy5ub09mUXVlc3Rpb25zVG9TaG93O1xuXG4gICAgaWYgKGN1cnJlbnRRdWVzdGlvbiA+PSB0aGlzLnByb3BzLmRhdGEucXVlc3Rpb25zLmxlbmd0aCkge1xuICAgICAgY3VycmVudFF1ZXN0aW9uID0gMDtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50UXVlc3Rpb24gfSk7XG4gICAgICByZXR1cm4geyBpc1JlYWR5OiB0cnVlLCBjdXJyZW50UXVlc3Rpb24gfTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudFF1ZXN0aW9uIH0pO1xuICAgIHJldHVybiB7IGlzUmVhZHk6IGZhbHNlLCBjdXJyZW50UXVlc3Rpb24gfTtcblxuICB9XG5cbiAgZ290b1ByZXZpb3VzUXVlc3Rpb24oKSB7XG4gICAgbGV0IGN1cnJlbnRRdWVzdGlvbiA9IHRoaXMuc3RhdGUuY3VycmVudFF1ZXN0aW9uIC0gdGhpcy5ub09mUXVlc3Rpb25zVG9TaG93O1xuICAgIGlmIChjdXJyZW50UXVlc3Rpb24gPCAwKSB7XG4gICAgICBjdXJyZW50UXVlc3Rpb24gPSAwO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRRdWVzdGlvbiB9KTtcbiAgICAgIHJldHVybiB7IGlzQmVnaW5uaW5nOiB0cnVlLCBjdXJyZW50UXVlc3Rpb24gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRRdWVzdGlvbiB9KTtcbiAgICAgIHJldHVybiB7IGlzQmVnaW5uaW5nOiBmYWxzZSwgY3VycmVudFF1ZXN0aW9uIH07XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHF1ZXN0aW9uc0hUTUwgPSBudWxsO1xuXG4gICAgbGV0IGRhdGEgPSBzZWxmLnByb3BzLmRhdGEgfHwgeyBxdWVzdGlvbnM6IFtdIH07XG5cbiAgICBsZXQgc2hvd25RdWVzdGlvbnMgPSBkYXRhLnF1ZXN0aW9ucy5zbGljZSggc2VsZi5zdGF0ZS5jdXJyZW50UXVlc3Rpb24sIHNlbGYuc3RhdGUuY3VycmVudFF1ZXN0aW9uICsgc2VsZi5ub09mUXVlc3Rpb25zVG9TaG93ICk7XG5cbiAgICBsZXQgdmFsdWVzID0gbWVyZ2Uoe30sIHRoaXMucHJvcHMuZGF0YSAmJiB0aGlzLnByb3BzLmRhdGEudmFsdWVzLCBzZWxmLnN0YXRlLnZhbHVlcyk7XG5cbiAgICBxdWVzdGlvbnNIVE1MID1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uc1wiPlxuICAgICAgICB7IHNob3duUXVlc3Rpb25zLm1hcCgocXVlc3Rpb24sIGkpID0+IHtcbiAgICAgICAgICByZXR1cm4gPE9wZW5TdGFkQ29tcG9uZW50UXVlc3Rpb24gY29uZmlnPXsgeyAuLi5zZWxmLmNvbmZpZywgZGl2SWQ6IGBvc2MtcXVlc3Rpb24tJHtxdWVzdGlvbi5pZH1gIH0gfSBkYXRhPXt7IC4uLnF1ZXN0aW9uLCB2YWx1ZTogdmFsdWVzW3F1ZXN0aW9uLmlkXSB9fSBrZXk9e2BxdWVzdGlvbi0ke3F1ZXN0aW9uLmlkfWB9IHJlZj17ZnVuY3Rpb24oZWwpIHsgc2VsZi5xdWVzdGlvbkVsZW1lbnRzW2ldID0gZWw7IH19Lz47XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9e3RoaXMuaWR9IGNsYXNzTmFtZT1cIm9zYy1xdWVzdGlvbi1ncm91cFwiPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwib3NjLXF1ZXN0aW9uLWdyb3VwLXRpdGxlXCI+e2RhdGEudGl0bGV9PC9oMz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcXVlc3Rpb24tZ3JvdXAtZGVzY3JpcHRpb25cIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGRhdGEuZGVzY3JpcHRpb24gfX0+PC9kaXY+XG4gICAgICAgIHtxdWVzdGlvbnNIVE1MfVxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudENob2ljZSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIHR5cGU6ICdkZWZhdWx0JyxcbiAgICAgIHdpdGhQZXJjZW50YWdlOiBmYWxzZSxcbiAgICAgIG1pbkxhYmVsOiBudWxsLFxuICAgICAgbWF4TGFiZWw6IG51bGwsXG4gICAgICBiYXJDb2xvcjoge1xuICAgICAgICBkZWZhdWx0OiAnI2JlZDIwMCcsXG4gICAgICAgIG1pbjogJyNmZjkxMDAnLFxuICAgICAgICBtYXg6ICcjYmVkMjAwJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmJhckNvbG9yLm1pbiA9PSBudWxsKSB0aGlzLmNvbmZpZy5iYXJDb2xvci5taW4gPSAnI2ZmOTEwMCc7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJhckNvbG9yLm1heCA9PSBudWxsKSB0aGlzLmNvbmZpZy5iYXJDb2xvci5tYXggPSAnI2JlZDIwMCc7XG5cbiAgICB0aGlzLmFuc3dlcnMgPSBwcm9wcy5kYXRhICYmIHByb3BzLmRhdGEuYW5zd2VycyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmFuc3dlcnMpLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICBpZiAodGhpcy5hbnN3ZXJzW2lkXSA9PSBwYXJzZUludCh0aGlzLmFuc3dlcnNbaWRdKSkge1xuICAgICAgICB0aGlzLmFuc3dlcnNbaWRdID0geyB4OiBwYXJzZUludCh0aGlzLmFuc3dlcnNbaWRdKSB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2NvcmU6IHRoaXMucHJvcHMuc2NvcmUgfHwgMCxcbiAgICB9O1xuXG4gIH1cblxuICBnZXRUaXRsZShzY29yZSwgbmFtZU9ubHkpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kYXRhICYmIHRoaXMucHJvcHMuZGF0YS50aXRsZTtcbiAgfVxuICBcbiAgY2FsY3VsYXRlU2NvcmUoYW5zd2Vycykge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGNob2ljZUFuc3dlcnMgPSBzZWxmLmFuc3dlcnM7XG4gICAgbGV0IHVzZXJBbnN3ZXJzID0gYW5zd2VycyB8fCB7fTtcblxuICAgIGxldCBub09mQW5zd2VycyA9IE9iamVjdC5rZXlzKGNob2ljZUFuc3dlcnMpLmxlbmd0aDtcbiAgICBsZXQgcmVzdWx0cyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoY2hvaWNlQW5zd2VycykuZm9yRWFjaCgoaWQpID0+IHtcblxuICAgICAgbGV0IGNob2ljZUFuc3dlciA9IGNob2ljZUFuc3dlcnNbaWRdIHx8IHt9O1xuICAgICAgbGV0IHVzZXJBbnN3ZXIgPSB1c2VyQW5zd2Vyc1tpZF0gfHwgKCB0aGlzLmNvbmZpZy5zdGFydFdpdGhBbGxRdWVzdGlvbnNBbnN3ZXJlZCA/IHsgeDogNTAsIHk6IDUwLCB6OiA1MCB9IDoge30gKTtcblxuICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaWRdID0ge307XG5cbiAgICAgIFsneCcsJ3knLCd6J10uZm9yRWFjaCgoZGltZW5zaW9uKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgY2hvaWNlQW5zd2VyW2RpbWVuc2lvbl0gPT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiB1c2VyQW5zd2VyW2RpbWVuc2lvbl0gPT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFtkaW1lbnNpb25dID0gMTAwIC0gTWF0aC5hYnMoY2hvaWNlQW5zd2VyW2RpbWVuc2lvbl0gLSB1c2VyQW5zd2VyW2RpbWVuc2lvbl0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIGxldCBzY29yZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhjaG9pY2VBbnN3ZXJzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgWyd4JywneScsJ3onXS5mb3JFYWNoKChkaW1lbnNpb24pID0+IHtcbiAgICAgICAgc2NvcmVzW2RpbWVuc2lvbl0gPSBzY29yZXNbZGltZW5zaW9uXSB8fCB7c2NvcmU6IFtdLCBub09mQW5zd2VyczogMH07XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0c1tpZF1bZGltZW5zaW9uXSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNjb3Jlc1tkaW1lbnNpb25dLnNjb3JlLnB1c2gocmVzdWx0c1tpZF1bZGltZW5zaW9uXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNob2ljZUFuc3dlcnNbaWRdICYmIHR5cGVvZiBjaG9pY2VBbnN3ZXJzW2lkXVtkaW1lbnNpb25dICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2NvcmVzW2RpbWVuc2lvbl0ubm9PZkFuc3dlcnMrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoc2NvcmVzKS5mb3JFYWNoKChkaW1lbnNpb24pID0+IHtcbiAgICAgIHNjb3Jlc1tkaW1lbnNpb25dID0gc2NvcmVzW2RpbWVuc2lvbl0uc2NvcmUubGVuZ3RoID8gc2NvcmVzW2RpbWVuc2lvbl0uc2NvcmUucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlKXtyZXR1cm4gYWNjdW11bGF0b3IgKyBjdXJyZW50VmFsdWU7fSkgLyBzY29yZXNbZGltZW5zaW9uXS5ub09mQW5zd2VycyA6IHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIC8vIGNvbnNvbGUubG9nKCdzY29yZXMnLCBzY29yZXMpO1xuXG4gICAgc2VsZi5zZXRTdGF0ZSh7c2NvcmU6IHNjb3Jlc30pO1xuICAgIHJldHVybiBzY29yZXM7XG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBzY29yZSA9IHNlbGYuc3RhdGUuc2NvcmU7XG5cbiAgICBsZXQgc2NvcmVIVE1MID0gbnVsbDtcbiAgICBzd2l0Y2ggKHRoaXMuY29uZmlnLnR5cGUpIHtcblxuICAgICAgY2FzZSAncGxhbmUnOlxuXG4gICAgICAgIGxldCBpbWFnZUhUTUwgPSBudWxsO1xuICAgICAgICBsZXQgaW1hZ2VzID0gdGhpcy5wcm9wcy5kYXRhICYmIHRoaXMucHJvcHMuZGF0YS5pbWFnZXMgfHwgW107XG4gICAgICAgIGlmIChpbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbWFnZXMpKSBpbWFnZXMgPSBbaW1hZ2VzXTtcbiAgICAgICAgICBsZXQgaW1hZ2UgPSBpbWFnZXNbMF07XG4gICAgICAgICAgbGV0IGltYWdlU3JjID0gaW1hZ2U7XG4gICAgICAgICAgaWYgKCB0eXBlb2YgaW1hZ2UgPT0gJ29iamVjdCcgKSBpbWFnZVNyYyA9IGltYWdlLnNyYztcbiAgICAgICAgICBpbWFnZUhUTUwgPSAoXG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cIm9zYy1jaG9pY2UtcGxhbmUtYmFja2dyb3VuZC1pbWFnZVwiIHNyYz17aW1hZ2VTcmN9IHN0eWxlPXt7IHdpZHRoOiB0aGlzLnByb3BzLmJhc2VTaXplIC8gMiwgaGVpZ2h0OiB0aGlzLnByb3BzLmJhc2VTaXplIC8gMiB9fS8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlLXBsYW5lXCIgc3R5bGU9e3sgd2lkdGg6IHRoaXMucHJvcHMuYmFzZVNpemUgLyAyLCBoZWlnaHQ6IHRoaXMucHJvcHMuYmFzZVNpemUgLyAyIH19PntpbWFnZUhUTUx9PC9kaXY+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtaW51cy10by1wbHVzLTEwMCc6XG4gICAgICAgIGxldCB2YWx1ZUhUTUwgPSBudWxsO1xuICAgICAgICBsZXQgcGVyY2VudGFnZSA9IHBhcnNlSW50KDIgKiAoIHNjb3JlLnggLSA1MCApKTtcbiAgICAgICAgaWYgKHNlbGYuY29uZmlnLndpdGhQZXJjZW50YWdlKSB7XG4gICAgICAgICAgdmFsdWVIVE1MID0gPGRpdiBjbGFzc05hbWU9XCJvc2MtcGVyY2VudGFnZVwiPntwZXJjZW50YWdlfSU8L2Rpdj5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYXhDb2xvck1hdGNoID0gc2VsZi5jb25maWcuYmFyQ29sb3IubWF4Lm1hdGNoKC8jKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pL2kpOyAvLyB0b2RvOiByZ2IoYSkgY29sb3JzXG4gICAgICAgIGxldCBtaW5Db2xvck1hdGNoID0gc2VsZi5jb25maWcuYmFyQ29sb3IubWluLm1hdGNoKC8jKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pL2kpOyAvLyB0b2RvOiByZ2IoYSkgY29sb3JzXG4gICAgICAgIGxldCByID0gcGFyc2VJbnQoIG1pbkNvbG9yTWF0Y2hbMV0sIDE2ICkgKyAoIHBhcnNlSW50KCBtYXhDb2xvck1hdGNoWzFdLCAxNiApIC0gcGFyc2VJbnQoIG1pbkNvbG9yTWF0Y2hbMV0sIDE2ICkgKSAqICggc2NvcmUueCAvIDEwMCApO1xuICAgICAgICBsZXQgZyA9IHBhcnNlSW50KCBtaW5Db2xvck1hdGNoWzJdLCAxNiApICsgKCBwYXJzZUludCggbWF4Q29sb3JNYXRjaFsyXSwgMTYgKSAtIHBhcnNlSW50KCBtaW5Db2xvck1hdGNoWzJdLCAxNiApICkgKiAoIHNjb3JlLnggLyAxMDAgKTtcbiAgICAgICAgbGV0IGIgPSBwYXJzZUludCggbWluQ29sb3JNYXRjaFszXSwgMTYgKSArICggcGFyc2VJbnQoIG1heENvbG9yTWF0Y2hbM10sIDE2ICkgLSBwYXJzZUludCggbWluQ29sb3JNYXRjaFszXSwgMTYgKSApICogKCBzY29yZS54IC8gMTAwICk7XG4gICAgICAgIGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBgcmdiKCR7cn0sJHtnfSwke2J9KWA7XG5cbiAgICAgICAgbGV0IHN0eWxlID0ge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPj0gMCkge1xuICAgICAgICAgIHN0eWxlLndpZHRoID0gKCBwZXJjZW50YWdlIC8gMiApICsgJyUnO1xuICAgICAgICAgIHN0eWxlLmxlZnQgPSAnNTAlJztcbiAgICAgICAgICBzdHlsZS5yaWdodCA9ICdhdXRvJztcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPCAwKSB7XG4gICAgICAgICAgc3R5bGUud2lkdGggPSAoIC1wZXJjZW50YWdlIC8gMiApICsgJyUnO1xuICAgICAgICAgIHN0eWxlLmxlZnQgPSAnYXV0byc7XG4gICAgICAgICAgc3R5bGUucmlnaHQgPSAnNTAlJztcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHNjb3JlSFRNTCA9IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jaG9pY2UtZGVmYXVsdFwiPlxuICAgICAgICAgICAgPGg0PntzZWxmLnByb3BzLmRhdGEudGl0bGV9PC9oND5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLWNob2ljZS1iYXIgb3NjLWZyb20tY2VudGVyJHtzZWxmLmNvbmZpZy53aXRoUGVyY2VudGFnZSA/ICcgb3NjLXdpdGgtcGVyY2VudGFnZScgOiAnJ31gfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlLWJhci1wcm9ncmVzc1wiIHN0eWxlPXtzdHlsZX0+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsgdmFsdWVIVE1MIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3plcm8tdG8tMTAwJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCBwZXJjZW50YWdlSFRNTCA9IG51bGw7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy53aXRoUGVyY2VudGFnZSkge1xuICAgICAgICAgIGxldCBwZXJjZW50YWdlID0gcGFyc2VJbnQoc2NvcmUueCk7XG4gICAgICAgICAgcGVyY2VudGFnZUhUTUwgPSA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1wZXJjZW50YWdlXCI+e3BlcmNlbnRhZ2V9JTwvZGl2PlxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUgPSB7XG4gICAgICAgICAgd2lkdGg6ICggc2NvcmUueCB8fCAwICkgKyAnJScsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZWxmLmNvbmZpZy5iYXJDb2xvci5kZWZhdWx0XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcmVIVE1MID0gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWNob2ljZS1kZWZhdWx0XCI+XG4gICAgICAgICAgICA8aDQ+e3NlbGYucHJvcHMuZGF0YS50aXRsZX08L2g0PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bvc2MtY2hvaWNlLWJhciR7c2VsZi5jb25maWcud2l0aFBlcmNlbnRhZ2UgPyAnIG9zYy13aXRoLXBlcmNlbnRhZ2UnIDogJyd9YH0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWNob2ljZS1iYXItbWFza1wiPjwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jaG9pY2UtYmFyLXByb2dyZXNzXCIgc3R5bGU9e3N0eWxlfT48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgeyBwZXJjZW50YWdlSFRNTCB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBsZXQgbWlubWF4TGFiZWxzSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLm1pbkxhYmVsIHx8IHNlbGYuY29uZmlnLm1heExhYmVsKSB7XG4gICAgICBtaW5tYXhMYWJlbHNIVE1MID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1taW5tYXgtbGFiZWxzXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbWluLWxhYmVsXCI+XG4gICAgICAgICAgICB7c2VsZi5jb25maWcubWluTGFiZWx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbWF4LWxhYmVsXCI+XG4gICAgICAgICAgICB7c2VsZi5jb25maWcubWF4TGFiZWx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2Pik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8bGkgY2xhc3NOYW1lPVwib3NjLWNob2ljZVwiPlxuICAgICAgICB7c2NvcmVIVE1MfVxuICAgICAgICB7bWlubWF4TGFiZWxzSFRNTH1cbiAgICAgIDwvbGk+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRDaG9pY2UgZnJvbSAnLi9jaG9pY2UuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRDaG9pY2VzIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgdHlwZTogJ2RlZmF1bHQnLFxuICAgICAgd2l0aFBlcmNlbnRhZ2U6IGZhbHNlLFxuICAgICAgbWluTGFiZWw6IG51bGwsXG4gICAgICBtYXhMYWJlbDogbnVsbCxcbiAgICB9KTtcblxuICAgIHRoaXMuY2hvaWNlRWxlbWVudHMgPSBbXTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0aXRsZTogJ0plIGhlYnQgbm9nIGdlZW4ga2V1emUgZ2VtYWFrdCcsXG4gICAgICBzY29yZXM6IHByb3BzLnNjb3JlcyxcbiAgICAgIHBsYW5lUG9zOiB7IHg6IDUwLCB5OiA1MCB9LFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLmNob2ljZXNDbGlja0xpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNlbGYuc2V0U3RhdGUoeyByYW5kb206IE1hdGgucmFuZG9tKCkgfSk7IC8vIGZvcmNlIHJlZHJhd1xuICAgIH1cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtY2hvaWNlcy1jbGljaycsIHNlbGYuY2hvaWNlc0NsaWNrTGlzdGVuZXIpO1xuXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdvc2MtY2hvaWNlcy1jbGljaycsIHNlbGYuY2hvaWNlc0NsaWNrTGlzdGVuZXIpO1xuICB9XG5cbiAgY2FsY3VsYXRlU2NvcmVzKGFuc3dlcnMpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBzY29yZXMgPSB7fTtcbiAgICBzZWxmLmNob2ljZUVsZW1lbnRzLmZvckVhY2goKGNob2ljZUVsZW1lbnQpID0+IHtcbiAgICAgIHNjb3Jlc1tjaG9pY2VFbGVtZW50LmNvbmZpZy5kaXZJZF0gPSBjaG9pY2VFbGVtZW50LmNhbGN1bGF0ZVNjb3JlKGFuc3dlcnMpO1xuICAgIH0pO1xuXG4gICAgLy8gZm9yIHBsYW5lOiBjYWxjdWxhdGUgcG9zaXRpb25cbiAgICBsZXQgcGxhbmVQb3MgPSB7IHg6IDUwLCB5OiA1MCB9O1xuICAgIGlmIChzZWxmLmNvbmZpZy50eXBlKSB7XG5cbiAgICAgIC8vIHRoZSBwb3NpdGlvbiBvZiB0aGUgZG90IGlzIHRoZSBhdmVyYWdlIG9mIHRoZSBnaXZlbiBhbnN3ZXJzXG4gICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGFuc3dlcnMpO1xuICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHBsYW5lUG9zID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGxldCBsZW5ndGhzID0geyB4OiAwLCB5OiAwLCB6OiAwIH07XG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgbGV0IGVudHJ5ID0gYW5zd2Vyc1trZXldO1xuICAgICAgICAgIFsneCcsJ3knLCd6J10uZm9yRWFjaCgoZGltZW5zaW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBlbnRyeVtkaW1lbnNpb25dICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgICBwbGFuZVBvc1tkaW1lbnNpb25dICs9IHBhcnNlSW50KGVudHJ5W2RpbWVuc2lvbl0pIHx8IDA7XG4gICAgICAgICAgICAgIGxlbmd0aHNbZGltZW5zaW9uXSsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7ICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYW5lUG9zLnggPSBsZW5ndGhzLnggPyBwYXJzZUludChwbGFuZVBvcy54IC8gbGVuZ3Rocy54KSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcGxhbmVQb3MueSA9IGxlbmd0aHMueSA/IHBhcnNlSW50KHBsYW5lUG9zLnkgLyBsZW5ndGhzLnkpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfVxuICAgIFxuICAgIHNlbGYuc2V0U3RhdGUoe2Fuc3dlcnMsIHNjb3JlcywgcGxhbmVQb3N9KTtcbiAgICByZXR1cm4ge2Fuc3dlcnMsIHNjb3JlcywgcGxhbmVQb3N9O1xuXG4gIH1cblxuICBnZXRQcmVmZXJlZENob2ljZSh7IHNjb3JlcywgcGxhbmVQb3MgfSkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHNjb3JlcyA9IHNjb3JlcyB8fCBzZWxmLnN0YXRlLnNjb3JlcztcbiAgICBzd2l0Y2ggKHNlbGYuY29uZmlnLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3BsYW5lJzpcbiAgICAgICAgcGxhbmVQb3MgPSBwbGFuZVBvcyB8fCBzZWxmLnN0YXRlLnBsYW5lUG9zO1xuICAgICAgICAvLyBoYXJkY29kZWQgdm9vciBudSwgbWFhciBrYW4gZGl0IG5pZXQgZ2VuZXJpZWsgb3ZlciBhbGxlIHR5cGVuP1xuICAgICAgICBpZiAoIHBsYW5lUG9zLnggPCA1MCAmJiBwbGFuZVBvcy55IDwgNTAgKSByZXR1cm4gc2VsZi5jaG9pY2VFbGVtZW50c1swXTtcbiAgICAgICAgaWYgKCBwbGFuZVBvcy54ID4gNTAgJiYgcGxhbmVQb3MueSA8IDUwICkgcmV0dXJuIHNlbGYuY2hvaWNlRWxlbWVudHNbMV07XG4gICAgICAgIGlmICggcGxhbmVQb3MueCA8IDUwICYmIHBsYW5lUG9zLnkgPiA1MCApIHJldHVybiBzZWxmLmNob2ljZUVsZW1lbnRzWzJdO1xuICAgICAgICBpZiAoIHBsYW5lUG9zLnggPiA1MCAmJiBwbGFuZVBvcy55ID4gNTAgKSByZXR1cm4gc2VsZi5jaG9pY2VFbGVtZW50c1szXTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgc29ydGVkID0gT2JqZWN0LmtleXMoc2NvcmVzKS5zb3J0KCAoYSxiKSA9PiBzY29yZXNbYl0ueCAtIHNjb3Jlc1thXS54ICk7XG4gICAgICAgIGxldCBmaXJzdCA9IHNvcnRlZFswXTtcbiAgICAgICAgcmV0dXJuIHNlbGYuY2hvaWNlRWxlbWVudHMuZmluZCggZWxlbSA9PiBlbGVtICYmIGVsZW0uY29uZmlnLmRpdklkID09IGZpcnN0ICk7XG4gICAgfVxuXG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIHN3aXRjaCAodGhpcy5jb25maWcudHlwZSkge1xuXG4gICAgICBjYXNlICdwbGFuZSc6XG5cbiAgICAgICAgbGV0IGJhc2VTaXplID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5kaXZJZH1gKSAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLmRpdklkfWApLm9mZnNldFdpZHRoIC0gMSB8fCAxODA7XG4gICAgICAgIGxldCB0b3AgPSAoIHR5cGVvZiBzZWxmLnN0YXRlLnBsYW5lUG9zLnkgPT0gJ3VuZGVmaW5lZCcgPyA1MCA6IHNlbGYuc3RhdGUucGxhbmVQb3MueSApICogKCBiYXNlU2l6ZSAvIDEwMCApO1xuICAgICAgICBsZXQgbGVmdCA9ICggdHlwZW9mIHNlbGYuc3RhdGUucGxhbmVQb3MueCA9PSAndW5kZWZpbmVkJyA/IDUwIDogc2VsZi5zdGF0ZS5wbGFuZVBvcy54ICkgKiAoIGJhc2VTaXplIC8gMTAwICk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGlkPXt0aGlzLmRpdklkfSBjbGFzc05hbWU9XCJvc2MtY2hvaWNlcyBvc2MtY2hvaWNlLXBsYW5lLXBsYW5lXCIgcmVmPXtmdW5jdGlvbihlbCkgeyBzZWxmLnBsYW5lUGxhbmVFbGVtZW50ID0gZWw7fX0+XG5cbiAgICAgICAgICAgIHsgT2JqZWN0LmtleXMoc2VsZi5wcm9wcy5jaG9pY2VzKS5tYXAoKGtleSwgaSkgPT4ge1xuICAgICAgICAgICAgICBsZXQgY2hvaWNlID0gc2VsZi5wcm9wcy5jaG9pY2VzW2tleV07XG4gICAgICAgICAgICAgIHJldHVybiAoPE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlIGNvbmZpZz17eyBkaXZJZDpgY2hvaWNlLSR7Y2hvaWNlLmlkfWAsICAuLi5zZWxmLmNvbmZpZyB9fSBkYXRhPXtjaG9pY2V9IHNjb3JlPXsgc2VsZi5wcm9wcy5zY29yZXMgJiYgc2VsZi5wcm9wcy5zY29yZXNbYGNob2ljZS0ke2Nob2ljZS5pZH1gXSB9IGtleT17YGNob2ljZS0ke2Nob2ljZS5pZH1gfSBiYXNlU2l6ZT17YmFzZVNpemV9IHJlZj17ZnVuY3Rpb24oZWwpIHsgc2VsZi5jaG9pY2VFbGVtZW50c1tpXSA9IGVsO319Lz4pO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXBvaW50XCIgc3R5bGU9e3sgdG9wLCBsZWZ0IH19PjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBjbGVhcjogJ2JvdGgnIH19PjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd6ZXJvLXRvLTEwMCc6XG4gICAgICBjYXNlICdtaW51cy10by1wbHVzLTEwMCc6XG4gICAgICBkZWZhdWx0OlxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm9zYy1jaG9pY2VzXCI+XG4gICAgICAgICAgICB7IE9iamVjdC5rZXlzKHNlbGYucHJvcHMuY2hvaWNlcykubWFwKChrZXksIGkpID0+IHtcbiAgICAgICAgICAgICAgbGV0IGNob2ljZSA9IHNlbGYucHJvcHMuY2hvaWNlc1trZXldO1xuICAgICAgICAgICAgICByZXR1cm4gKDxPcGVuU3RhZENvbXBvbmVudENob2ljZSBjb25maWc9e3sgZGl2SWQ6YGNob2ljZS0ke2Nob2ljZS5pZH1gLCAgLi4uc2VsZi5jb25maWcgfX0gZGF0YT17Y2hvaWNlfSBzY29yZT17IHNlbGYucHJvcHMuc2NvcmVzICYmIHNlbGYucHJvcHMuc2NvcmVzW2BjaG9pY2UtJHtjaG9pY2UuaWR9YF0gfSBrZXk9e2BjaG9pY2UtJHtjaG9pY2UuaWR9YH0gcmVmPXtmdW5jdGlvbihlbCkgeyBzZWxmLmNob2ljZUVsZW1lbnRzW2ldID0gZWw7fX0vPik7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICApO1xuICAgIFxuICAgIH1cbiAgICBcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlJztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMgZnJvbSAnLi4vLi4vLi4vZm9ybXMvaW5kZXguanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hvaWNlRm9ybSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBxdWVzdGlvbkVkaXRNb2RlSW5kZXg6IG51bGwgfTtcbiAgfVxuICBcblxuICBoYW5kbGVGaWVsZENoYW5nZShkYXRhKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBwYXJzZWREYXRhO1xuICAgIGlmIChkYXRhLnF1ZXN0aW9uSWQpIHtcbiAgICAgIHBhcnNlZERhdGEgPSBtZXJnZS5yZWN1cnNpdmUodHJ1ZSwge30sIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5hbnN3ZXJzKTtcbiAgICAgIHBhcnNlZERhdGFbZGF0YS5xdWVzdGlvbklkXSA9IHBhcnNlZERhdGFbZGF0YS5xdWVzdGlvbklkXSB8fCB7fTtcbiAgICAgIHBhcnNlZERhdGFbZGF0YS5xdWVzdGlvbklkXVtkYXRhLmRpbWVuc2lvbl0gPSBkYXRhLnZhbHVlO1xuICAgIH1cbiAgICBwYXJzZWREYXRhID0gcGFyc2VkRGF0YSB8fCBkYXRhO1xuICAgIGNvbnNvbGUubG9nKCc9JywgSlNPTi5zdHJpbmdpZnkocGFyc2VkRGF0YSxudWxsLDIpKTtcbiAgICBzZWxmLnByb3BzLm9uQ2hhbmdlKHsgYW5zd2VyczogcGFyc2VkRGF0YSB9KSAgICBcbiAgfSBcblxuICB0b2dnbGVFZGl0TW9kZShpbmRleCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBxdWVzdGlvbkVkaXRNb2RlSW5kZXg6IHRoaXMuc3RhdGUucXVlc3Rpb25FZGl0TW9kZUluZGV4ICE9IGluZGV4ID8gaW5kZXggOiBudWxsIH0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGFuc3dlcnMgPSBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQuYW5zd2VycztcbiAgICBsZXQgYW5zd2Vyc0hUTUwgPSAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlld1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctcXVlc3Rpb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnRcIj48c3Ryb25nPlZyYWFnPC9zdHJvbmc+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1jb250ZW50IG9zYy1vdmVydmlldy1saW5lLWZpZWxkXCI+PHN0cm9uZz5YPC9zdHJvbmc+PC9kaXY+XG4gICAgICAgICAgeyAoIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwLmFuc3dlckRpbWVuc2lvbnMgPiAxICkgJiYgKDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudCBvc2Mtb3ZlcnZpZXctbGluZS1maWVsZFwiPjxzdHJvbmc+WTwvc3Ryb25nPjwvZGl2Pil9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1idXR0b25zXCI+PGRpdiBzdHlsZT17eyB3aWR0aDogJzMwcHgnIH19PjwvZGl2PjwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7IE9iamVjdC5rZXlzKHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwLnF1ZXN0aW9ucykubWFwKChrZXksIGkpID0+IHtcblxuICAgICAgICAgIGxldCBxdWVzdGlvbiA9IHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwLnF1ZXN0aW9uc1trZXldO1xuXG4gICAgICAgICAgbGV0IGRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgICBsZXQgcXVlc3Rpb25EaW1lbnNpb25zID0gcXVlc3Rpb24uZGltZW5zaW9ucyB8fCBbJ3gnXTtcbiAgICAgICAgICBpZiAocXVlc3Rpb25EaW1lbnNpb25zLmluZGV4T2YoJ3gnKSAhPSAtMSB8fCAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAuYW5zd2VyRGltZW5zaW9ucyA9PSAxKSkgZGltZW5zaW9ucy5wdXNoKCd4Jyk7XG4gICAgICAgICAgaWYgKHF1ZXN0aW9uRGltZW5zaW9ucy5pbmRleE9mKCd5JykgIT0gLTEgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAuYW5zd2VyRGltZW5zaW9ucyA9PSAyKSBkaW1lbnNpb25zLnB1c2goJ3knKTtcbiAgICAgICAgICBpZiAocXVlc3Rpb25EaW1lbnNpb25zLmluZGV4T2YoJ3onKSAhPSAtMSAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQucXVlc3Rpb25Hcm91cCAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQucXVlc3Rpb25Hcm91cC5hbnN3ZXJEaW1lbnNpb25zID09IDMpIGRpbWVuc2lvbnMucHVzaCgneicpO1xuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIiBrZXk9e2BxdWVzdGlvbi0ke3F1ZXN0aW9uLmlkfWB9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICB7cXVlc3Rpb24udGl0bGV9ICh7cXVlc3Rpb24uaWR9KVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgey8qIFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICB7cXVlc3Rpb24uZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAqL31cbiAgICAgICAgICAgICAgeyBkaW1lbnNpb25zLm1hcCgoZGltZW5zaW9uLCBqKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGFuc3dlclZhbHVlID0gc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmFuc3dlcnMgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmFuc3dlcnNbcXVlc3Rpb24uaWRdICYmICggdHlwZW9mIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5hbnN3ZXJzW3F1ZXN0aW9uLmlkXSA9PSAnb2JqZWN0JyA/IHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5hbnN3ZXJzW3F1ZXN0aW9uLmlkXVtkaW1lbnNpb25dIDogc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmFuc3dlcnNbcXVlc3Rpb24uaWRdIClcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zdGF0ZS5xdWVzdGlvbkVkaXRNb2RlSW5kZXggPT0gaSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1jb250ZW50IG9zYy1vdmVydmlldy1saW5lLWZpZWxkXCIga2V5PXtgZmllbGQtJHtqfWB9PlxuICAgICAgICAgICAgICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlRleHQgY29uZmlnPXt7fX0gdmFsdWU9e2Fuc3dlclZhbHVlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHF1ZXN0aW9uSWQ6IHF1ZXN0aW9uLmlkLCBkaW1lbnNpb24sIHZhbHVlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnF1ZXN0aW9uSW1hZ2VCRmllbGQgPSBlbH0vPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnQgb3NjLW92ZXJ2aWV3LWxpbmUtZmllbGRcIiBrZXk9e2BmaWVsZC0ke2p9YH0+XG4gICAgICAgICAgICAgICAgICAgICAge2Fuc3dlclZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSl9XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwib3NjLWVkaXQtYnV0dG9uXCIgb25DbGljaz17ZXZlbnQgPT4gc2VsZi50b2dnbGVFZGl0TW9kZShpKX0+PC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2Pik7XG5cbiAgICBsZXQgaW1hZ2VIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXAuYW5zd2VyRGltZW5zaW9ucyA+IDEpIHtcbiAgICAgIGltYWdlSFRNTCA9IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDM+QWZiZWVsZGluZzwvaDM+XG4gICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW1hZ2VVcGxvYWQga2V5PVwiaTFcIiBjb25maWc9e3sgYXM6ICdqc29uJywgaW1hZ2VzZXJ2ZXI6IHNlbGYuY29uZmlnLmltYWdlc2VydmVyIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQuaW1hZ2VzfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IGltYWdlczogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5pbWFnZXNGaWVsZCA9IGVsfS8+XG4gICAgICAgIDwvZGl2Pik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5zdGFkLWZvcm1cIj5cblxuICAgICAgICA8aDM+VGl0ZWw8L2gzPlxuICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICdpbnB1dCcsIG1pbkxlbmd0aDogMSwgbWF4TGVuZ3RoOiAxMDAwIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudGl0bGV9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLnByb3BzLm9uQ2hhbmdlKHsgdGl0bGU6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYudGl0bGVGaWVsZCA9IGVsfS8+XG5cbiAgICAgICAgPGgzPkJlc2NocmlqdmluZzwvaDM+XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHRhcmVhJywgbWluTGVuZ3RoOiAxLCBtYXhMZW5ndGg6IDEwMDAgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC5kZXNjcmlwdGlvbn0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYucHJvcHMub25DaGFuZ2UoeyBkZXNjcmlwdGlvbjogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5kZXNjcmlwdGlvbkZpZWxkID0gZWx9Lz5cblxuICAgICAgICB7aW1hZ2VIVE1MfVxuXG4gICAgICAgIDxoMz5BbnR3b29yZGVuPC9oMz5cbiAgICAgICAge2Fuc3dlcnNIVE1MfVxuXG4gICAgICAgIDxoMz5Wb2xnb3JkZSBudW1tZXI8L2gzPlxuICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5UZXh0IGNvbmZpZz17e319IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQuc2VxbnJ9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLnByb3BzLm9uQ2hhbmdlKHsgc2VxbnI6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYuc2VxbnJGaWVsZCA9IGVsfS8+XG5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgICA7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEZvcm1zIGZyb20gJy4uLy4uLy4uL2Zvcm1zL2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENob2ljZXNHdWlkZUZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBoYW5kbGVGaWVsZENoYW5nZShkYXRhKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBwYXJzZWREYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YS5pc0FjdGl2ZSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2VkRGF0YSA9IHsgY2hvaWNlc0d1aWRlQ29uZmlnOiBtZXJnZS5yZWN1cnNpdmUoe30sIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5jaG9pY2VzR3VpZGVDb25maWcpIH07XG4gICAgICBwYXJzZWREYXRhLmNob2ljZXNHdWlkZUNvbmZpZy5pc0FjdGl2ZSA9IGRhdGEuaXNBY3RpdmVcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLnN1Ym1pc3Npb25UeXBlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyBjaG9pY2VzR3VpZGVDb25maWc6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmNob2ljZXNHdWlkZUNvbmZpZykgfTtcbiAgICAgIHBhcnNlZERhdGEuY2hvaWNlc0d1aWRlQ29uZmlnLnN1Ym1pc3Npb25UeXBlID0gZGF0YS5zdWJtaXNzaW9uVHlwZVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEud2l0aEV4aXN0aW5nICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyBjaG9pY2VzR3VpZGVDb25maWc6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmNob2ljZXNHdWlkZUNvbmZpZykgfTtcbiAgICAgIHBhcnNlZERhdGEuY2hvaWNlc0d1aWRlQ29uZmlnLndpdGhFeGlzdGluZyA9IGRhdGEud2l0aEV4aXN0aW5nXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5yZXF1aXJlZFVzZXJSb2xlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyBjaG9pY2VzR3VpZGVDb25maWc6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmNob2ljZXNHdWlkZUNvbmZpZykgfTtcbiAgICAgIHBhcnNlZERhdGEuY2hvaWNlc0d1aWRlQ29uZmlnLnJlcXVpcmVkVXNlclJvbGUgPSBkYXRhLnJlcXVpcmVkVXNlclJvbGUgfHwgbnVsbDtcbiAgICB9XG4gICAgcGFyc2VkRGF0YSA9IHBhcnNlZERhdGEgfHwgZGF0YTtcbiAgICBzZWxmLnByb3BzLm9uQ2hhbmdlKHBhcnNlZERhdGEpICAgIFxuICB9XG5cbiAgXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgY29uZmlnID0gc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmNob2ljZXNHdWlkZUNvbmZpZyB8fCB7fTtcblxuICAgIGxldCBtb3JlQ29uZmlnSFRNTCA9IG51bGw7XG5cbiAgICBpZiAoY29uZmlnLmlzQWN0aXZlID09IFwidHJ1ZVwiKSB7XG5cbiAgICAgIGxldCByZXF1aXJlZFVzZXJSb2xlQ29uZmlnSFRNTCA9IG51bGw7ICBcbiAgICAgIGlmIChjb25maWcuc3VibWlzc2lvblR5cGUgPT0gXCJmb3JtXCIpIHtcbiAgICAgICAgbGV0IHdpdGhFeGlzdGluZ0NvbmZpZ0hUTUwgPSBudWxsOyAgXG4gICAgICAgIGlmIChjb25maWcucmVxdWlyZWRVc2VyUm9sZSA9PSBcIm1lbWJlclwiKSB7XG4gICAgICAgICAgd2l0aEV4aXN0aW5nQ29uZmlnSFRNTCA9IChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoND5BbHMgZXIgYWwgZWVuIGluemVuZGluZyBpcyB2b29yIGRlemUgZ2VicnVpa2VyPC9oND5cbiAgICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuU2VsZWN0IGNvbmZpZz17eyBjaG9pY2VzOiBbeyB2YWx1ZTogXCJyZXBsYWNlXCIsIGRlc2NyaXB0aW9uOiBcIk92ZXJzY2hyaWpmIGhldCBiZXN0YWFuZGUgcmVzdWx0YWF0XCIgfSwgeyB2YWx1ZTogXCJlcnJvclwiLCBkZXNjcmlwdGlvbjogXCJHZWVmIGVlbiBmb3V0bWVsZGluZ1wiIH1dIH19IHZhbHVlPXsgY29uZmlnLndpdGhFeGlzdGluZyB9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlKHsgd2l0aEV4aXN0aW5nOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLndpdGhFeGlzdGluZ0ZpZWxkID0gZWx9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWlyZWRVc2VyUm9sZUNvbmZpZ0hUTUwgPSAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoND5PbSB0ZSBrdW5ubmVuIGluc3R1cmVuIG1vZXQgZWVuIGdlYnJ1aWtlciBpbmdlbG9nZCB6aWpuPC9oND5cbiAgICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlNlbGVjdCBjb25maWc9e3sgY2hvaWNlczogW3sgdmFsdWU6IG51bGwsIGRlc2NyaXB0aW9uOiBcIk5lZVwifSwgeyB2YWx1ZTogJ21lbWJlcicsIGRlc2NyaXB0aW9uOiBcIkphXCJ9XSB9fSB2YWx1ZT17IGNvbmZpZy5yZXF1aXJlZFVzZXJSb2xlIH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyByZXF1aXJlZFVzZXJSb2xlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnJlcXVpcmVkVXNlclJvbGVGaWVsZCA9IGVsfS8+XG4gICAgICAgICAgICB7d2l0aEV4aXN0aW5nQ29uZmlnSFRNTH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG1vcmVDb25maWdIVE1MID0gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoND5PcHNsYWFuIHZhbiBkZSByZXN1bHRhdGVuPC9oND5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5TZWxlY3QgY29uZmlnPXt7IGNob2ljZXM6IFsgeyB2YWx1ZTogXCJub25lXCIsIGRlc2NyaXB0aW9uOiBcIk5pZXQgb3BzbGFhblwiIH0sIHsgdmFsdWU6IFwiYXV0b1wiLCBkZXNjcmlwdGlvbjogXCJBdXRvbWF0aXNjaCBvcHNsYWFuXCIgfSwgeyB2YWx1ZTogXCJmb3JtXCIsIGRlc2NyaXB0aW9uOiBcIkxhYXQgZWVyc3QgZWVuIGZvcm11bGllciBpbnZ1bGxlblwiIH1dIH19IHZhbHVlPXsgY29uZmlnLnN1Ym1pc3Npb25UeXBlIH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBzdWJtaXNzaW9uVHlwZTogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5zdWJtaXNzaW9uVHlwZUZpZWxkID0gZWx9Lz5cbiAgICAgICAgICB7cmVxdWlyZWRVc2VyUm9sZUNvbmZpZ0hUTUx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcblxuXG4gICAgICBcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuc3RhZC1mb3JtXCI+XG4gICAgICAgIDxoMz5OYWFtPC9oMz5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBrZXk9XCJ4MVwiIGNvbmZpZz17eyBpbnB1dFR5cGU6ICdpbnB1dCcsIG1pbkxlbmd0aDogMSwgbWF4TGVuZ3RoOiAxMDAwIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudGl0bGV9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlKHsgdGl0bGU6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHsgc2VsZi50aXRsZUZpZWxkID0gZWw7IH19Lz5cbiAgICAgICAgPGg0PkRlemUga2V1emV3aWp6ZXIgaXMgYWN0aWVmPC9oND5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuU2VsZWN0IGNvbmZpZz17eyBjaG9pY2VzOiBbeyB2YWx1ZTogXCJ0cnVlXCIsIGRlc2NyaXB0aW9uOiBcIkphXCJ9LCB7IHZhbHVlOiBcImZhbHNlXCIsIGRlc2NyaXB0aW9uOiBcIk5lZVwifV0gfX0gdmFsdWU9eyBjb25maWcuaXNBY3RpdmUgfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IGlzQWN0aXZlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLmlzQWN0aXZlRmllbGQgPSBlbH0vPlxuICAgICAgICB7bW9yZUNvbmZpZ0hUTUx9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gICAgO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtcyBmcm9tICcuLi8uLi8uLi9mb3Jtcy9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVzdGlvbkZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5oYW5kbGVGaWVsZENoYW5nZSA9IHRoaXMuaGFuZGxlRmllbGRDaGFuZ2UuYmluZCh0aGlzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZUVkaXRNb2RlSW5kZXg6IG51bGwsXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRmllbGRDaGFuZ2UoZGF0YSkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgcGFyc2VkRGF0YTtcbiAgICBpZiAodHlwZW9mIGRhdGEudHlwZSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2VkRGF0YSA9IHsgdHlwZTogZGF0YS50eXBlIH07XG4gICAgICBpZiAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2EtdG8tYicgJiYgZGF0YS50eXBlID09ICdlbnVtLXJhZGlvJykgcGFyc2VkRGF0YS52YWx1ZXMgPSBbXTtcbiAgICAgIGlmIChzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudHlwZSA9PSAnZW51bS1yYWRpbycgJiYgZGF0YS50eXBlID09ICdhLXRvLWInKSBwYXJzZWREYXRhLnZhbHVlcyA9IHsgQToge30sIEI6IHt9IH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5tb3JlSW5mb1RpdGxlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyBtb3JlSW5mbzogbWVyZ2UucmVjdXJzaXZlKHt9LCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQubW9yZUluZm8pIH07XG4gICAgICBwYXJzZWREYXRhLm1vcmVJbmZvLnRpdGxlID0gZGF0YS5tb3JlSW5mb1RpdGxlXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5tb3JlSW5mb1RleHQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBhcnNlZERhdGEgPSB7IG1vcmVJbmZvOiBtZXJnZS5yZWN1cnNpdmUoe30sIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5tb3JlSW5mbykgfTtcbiAgICAgIHBhcnNlZERhdGEubW9yZUluZm8udGV4dCA9IGRhdGEubW9yZUluZm9UZXh0XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5xdWVzdGlvblRleHRBICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyB2YWx1ZXM6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcykgfTtcbiAgICAgIHBhcnNlZERhdGEudmFsdWVzLkEucXVlc3Rpb25UZXh0ID0gZGF0YS5xdWVzdGlvblRleHRBXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5xdWVzdGlvbkltYWdlQSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2VkRGF0YSA9IHsgdmFsdWVzOiBtZXJnZS5yZWN1cnNpdmUoe30sIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMpIH07XG4gICAgICBsZXQgaW1nID0gZGF0YS5xdWVzdGlvbkltYWdlQTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGltZyA9IEpTT04ucGFyc2UoaW1nKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgIHBhcnNlZERhdGEudmFsdWVzLkEucXVlc3Rpb25JbWFnZSA9IGltZ1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEucXVlc3Rpb25UZXh0QSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2VkRGF0YSA9IHsgdmFsdWVzOiBtZXJnZS5yZWN1cnNpdmUoe30sIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMpIH07XG4gICAgICBwYXJzZWREYXRhLnZhbHVlcy5BLnF1ZXN0aW9uVGV4dCA9IGRhdGEucXVlc3Rpb25UZXh0QVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEubGFiZWxBICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyB2YWx1ZXM6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcykgfTtcbiAgICAgIHBhcnNlZERhdGEudmFsdWVzLkEubGFiZWwgPSBkYXRhLmxhYmVsQVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEubGFiZWxCICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyB2YWx1ZXM6IG1lcmdlLnJlY3Vyc2l2ZSh7fSwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcykgfTtcbiAgICAgIHBhcnNlZERhdGEudmFsdWVzLkIubGFiZWwgPSBkYXRhLmxhYmVsQlxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEubGFiZWxCZWxvd0EgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBhcnNlZERhdGEgPSB7IHZhbHVlczogbWVyZ2UucmVjdXJzaXZlKHt9LCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzKSB9O1xuICAgICAgcGFyc2VkRGF0YS52YWx1ZXMuQS5sYWJlbEJlbG93ID0gZGF0YS5sYWJlbEJlbG93QVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEubGFiZWxCZWxvd0IgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBhcnNlZERhdGEgPSB7IHZhbHVlczogbWVyZ2UucmVjdXJzaXZlKHt9LCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzKSB9O1xuICAgICAgcGFyc2VkRGF0YS52YWx1ZXMuQi5sYWJlbEJlbG93ID0gZGF0YS5sYWJlbEJlbG93QlxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEucXVlc3Rpb25JbWFnZUIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBhcnNlZERhdGEgPSB7IHZhbHVlczogbWVyZ2UucmVjdXJzaXZlKHt9LCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzKSB9O1xuICAgICAgbGV0IGltZyA9IGRhdGEucXVlc3Rpb25JbWFnZUI7XG4gICAgICB0cnkge1xuICAgICAgICBpbWcgPSBKU09OLnBhcnNlKGltZyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICBwYXJzZWREYXRhLnZhbHVlcy5CLnF1ZXN0aW9uSW1hZ2UgPSBpbWdcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLnF1ZXN0aW9uVGV4dEIgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBhcnNlZERhdGEgPSB7IHZhbHVlczogbWVyZ2UucmVjdXJzaXZlKHt9LCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzKSB9O1xuICAgICAgcGFyc2VkRGF0YS52YWx1ZXMuQi5xdWVzdGlvblRleHQgPSBkYXRhLnF1ZXN0aW9uVGV4dEJcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLm5ld1ZhbHVlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyB2YWx1ZXM6IHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMgfHwgW10gfTtcbiAgICAgIHBhcnNlZERhdGEudmFsdWVzLnB1c2goZGF0YS5uZXdWYWx1ZSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWVFZGl0TW9kZUluZGV4OiBwYXJzZWREYXRhLnZhbHVlcy5sZW5ndGggLSAxIH0pXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5kZWxldGVJbmRleCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgcGFyc2VkRGF0YSA9IHsgdmFsdWVzOiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzIHx8IFtdIH07XG4gICAgICBwYXJzZWREYXRhLnZhbHVlcy5zcGxpY2UoZGF0YS5kZWxldGVJbmRleCwgMSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS52YWx1ZUluZGV4ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICBwYXJzZWREYXRhID0geyB2YWx1ZXM6IHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMgfHwgW10gfTtcbiAgICAgIHBhcnNlZERhdGEudmFsdWVzW2RhdGEudmFsdWVJbmRleF0gPSBwYXJzZWREYXRhLnZhbHVlc1tkYXRhLnZhbHVlSW5kZXhdIHx8IHsgdGV4dDogJycsIHZhbHVlOiB7fSB9O1xuICAgICAgaWYgKGRhdGEudmFsdWVEaW1lbnNpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnZhbHVlVmFsdWUgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAoIHR5cGVvZiBwYXJzZWREYXRhLnZhbHVlc1tkYXRhLnZhbHVlSW5kZXhdLnZhbHVlICE9ICdvYmplY3QnICkgcGFyc2VkRGF0YS52YWx1ZXNbZGF0YS52YWx1ZUluZGV4XS52YWx1ZSA9IHt9O1xuICAgICAgICAgIHBhcnNlZERhdGEudmFsdWVzW2RhdGEudmFsdWVJbmRleF0udmFsdWVbZGF0YS52YWx1ZURpbWVuc2lvbl0gPSBkYXRhLnZhbHVlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZERhdGEudmFsdWVzW2RhdGEudmFsdWVJbmRleF0udGV4dCA9IGRhdGEudmFsdWVUZXh0O1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJzZWREYXRhID0gcGFyc2VkRGF0YSB8fCBkYXRhO1xuICAgIHNlbGYucHJvcHMub25DaGFuZ2UocGFyc2VkRGF0YSkgICAgXG4gIH0gXG5cbiAgdG9nZ2xlRWRpdE1vZGUoaW5kZXgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWVFZGl0TW9kZUluZGV4OiB0aGlzLnN0YXRlLnZhbHVlRWRpdE1vZGVJbmRleCAhPSBpbmRleCA/IGluZGV4IDogbnVsbCB9KVxuICB9XG4gIFxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgbW9yZUluZm9IVE1MID0gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGgzPk1lZXIgaW5mb3JtYXRpZTwvaDM+XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHQnLCBtaW5MZW5ndGg6IDAsIG1heExlbmd0aDogMjAwIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQubW9yZUluZm8gJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0Lm1vcmVJbmZvLnRpdGxlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IG1vcmVJbmZvVGl0bGU6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYubW9yZUluZm9GaWVsZCA9IGVsfS8+XG4gICAgICA8L2Rpdj4pO1xuICAgIGlmIChzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQubW9yZUluZm8gJiYgKHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5tb3JlSW5mby50aXRsZSB8fCBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQubW9yZUluZm8udGV4dCkpIHtcbiAgICAgIG1vcmVJbmZvSFRNTCA9IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDM+TWVlciBpbmZvcm1hdGllIHRpdGVsPC9oMz5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICd0ZXh0JywgbWluTGVuZ3RoOiAwLCBtYXhMZW5ndGg6IDIwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0Lm1vcmVJbmZvICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5tb3JlSW5mby50aXRsZX0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBtb3JlSW5mb1RpdGxlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLm1vcmVJbmZvRmllbGQgPSBlbH0vPlxuICAgICAgICAgIDxoMz5NZWVyIGluZm9ybWF0aWUgdGV4dDwvaDM+XG4gICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAndGV4dGFyZWEnLCBtaW5MZW5ndGg6IDAsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0Lm1vcmVJbmZvICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5tb3JlSW5mby50ZXh0fSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IG1vcmVJbmZvVGV4dDogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5tb3JlSW5mb0ZpZWxkID0gZWx9Lz5cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG5cblxuICAgIGxldCB2YWx1ZXNIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2NvbnRpbnVvdXMnKSB7XG4gICAgICB2YWx1ZXNIVE1MID0gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMz5MYWJlbCBtaW5pbWFsZSB3YWFyZGU8L2gzPlxuICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ2lucHV0JywgbWluTGVuZ3RoOiAwLCBtYXhMZW5ndGg6IDI1MCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0Lm1pbkxhYmVsfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IG1pbkxhYmVsOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLm1pbkxhYmVsRmllbGQgPSBlbH0vPlxuICAgICAgICAgIDxoMz5MYWJlbCBtYXhpbWFsZSB3YWFyZGU8L2gzPlxuICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ2lucHV0JywgbWluTGVuZ3RoOiAwLCBtYXhMZW5ndGg6IDEwMDAgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC5tYXhMYWJlbH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYucHJvcHMub25DaGFuZ2UoeyBtYXhMYWJlbDogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5tYXhMYWJlbEZpZWxkID0gZWx9Lz5cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2EtdG8tYicpIHtcblxuICAgICAgdmFsdWVzSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY29sdW1uLWNvbnRhaW5lclwiPlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY29sdW1uLTUwcCBvc2MtbWFyZ2luLXJpZ2h0LTEwXCI+XG5cbiAgICAgICAgICAgIDxoMz5MYWJlbCB2b29yIEE8L2gzPlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCBtaW5MZW5ndGg6IDAsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcyAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5BLmxhYmVsfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IGxhYmVsQTogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5sYWJlbEZpZWxkID0gZWx9Lz5cbiAgICAgICAgICAgIDxoMz5MYWJlbCBvbmRlciBzbGlkZXIgQTwvaDM+XG4gICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICdpbnB1dCcsIG1pbkxlbmd0aDogMCwgbWF4TGVuZ3RoOiAxMDAwIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMuQSAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEubGFiZWxCZWxvd30gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBsYWJlbEJlbG93QTogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5sYWJlbEJlbG93RmllbGQgPSBlbH0vPlxuICAgICAgICAgICAgPGgzPlVpdGxlZyBiaWogQTwvaDM+XG4gICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICdpbnB1dCcsIG1pbkxlbmd0aDogMCwgbWF4TGVuZ3RoOiAxMDAwIH19IHZhbHVlPXtzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMuQSAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEucXVlc3Rpb25UZXh0fSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHF1ZXN0aW9uVGV4dEE6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYubWluTGFiZWxGaWVsZCA9IGVsfS8+XG4gICAgICAgICAgICA8aDM+QWZiZWVsZGluZyBiaWogQTwvaDM+XG4gICAgICAgICAgICB7LyogPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuVGV4dCBjb25maWc9e3t9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcyAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEgJiYgKCB0eXBlb2Ygc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5BLnF1ZXN0aW9uSW1hZ2UgPT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeShzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEucXVlc3Rpb25JbWFnZSkgOiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEucXVlc3Rpb25JbWFnZSApfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHF1ZXN0aW9uSW1hZ2VBOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnF1ZXN0aW9uSW1hZ2VBRmllbGQgPSBlbH0vPiAqL31cbiAgICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLkltYWdlVXBsb2FkIGtleT1cImkxXCIgY29uZmlnPXt7IGFzOiAnanNvbicsIGltYWdlc2VydmVyOiBzZWxmLmNvbmZpZy5pbWFnZXNlcnZlciB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcyAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkEgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5BLnF1ZXN0aW9uSW1hZ2V9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlKHsgcXVlc3Rpb25JbWFnZUE6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYucXVlc3Rpb25JbWFnZUFGaWVsZCA9IGVsfS8+XG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jb2x1bW4tNTBwIG9zYy1tYXJnaW4tbGVmdC0xMFwiPlxuXG4gICAgICAgICAgICA8aDM+TGFiZWwgdm9vciBCPC9oMz5cbiAgICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ2lucHV0JywgbWluTGVuZ3RoOiAwLCBtYXhMZW5ndGg6IDEwMDAgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMuQi5sYWJlbH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBsYWJlbEI6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYubGFiZWxGaWVsZCA9IGVsfS8+XG4gICAgICAgICAgICA8aDM+TGFiZWwgb25kZXIgc2xpZGVyIEI8L2gzPlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCBtaW5MZW5ndGg6IDAsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcyAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkIgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CLmxhYmVsQmVsb3d9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlKHsgbGFiZWxCZWxvd0I6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYubGFiZWxCZWxvd0ZpZWxkID0gZWx9Lz5cbiAgICAgICAgICAgIDxoMz5VaXRsZWcgYmlqIEI8L2gzPlxuICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCBtaW5MZW5ndGg6IDAsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcyAmJiBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzLkIgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CLnF1ZXN0aW9uVGV4dH0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBxdWVzdGlvblRleHRCOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLm1pbkxhYmVsRmllbGQgPSBlbH0vPlxuICAgICAgICAgICAgPGgzPkFmYmVlbGRpbmcgYmlqIEI8L2gzPlxuICAgICAgICAgICAgey8qIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlRleHQgY29uZmlnPXt7fX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CICYmICggdHlwZW9mIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMuQi5xdWVzdGlvbkltYWdlID09ICdvYmplY3QnID8gSlNPTi5zdHJpbmdpZnkoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CLnF1ZXN0aW9uSW1hZ2UpIDogc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CLnF1ZXN0aW9uSW1hZ2UgKX0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYuaGFuZGxlRmllbGRDaGFuZ2UoeyBxdWVzdGlvbkltYWdlQjogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5xdWVzdGlvbkltYWdlQkZpZWxkID0gZWx9Lz4gKi99XG4gICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbWFnZVVwbG9hZCBrZXk9XCJpMVwiIGNvbmZpZz17eyBhczogJ2pzb24nLCBpbWFnZXNlcnZlcjogc2VsZi5jb25maWcuaW1hZ2VzZXJ2ZXIgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMgJiYgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnZhbHVlcy5CICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMuQi5xdWVzdGlvbkltYWdlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHF1ZXN0aW9uSW1hZ2VCOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnF1ZXN0aW9uSW1hZ2VCRmllbGQgPSBlbH0vPlxuXG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2VudW0tYnV0dG9ucycgfHwgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgPT0gJ2VudW0tcmFkaW8nKSB7XG5cbiAgICAgIGxldCBkaW1lbnNpb25zID0gc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmRpbWVuc2lvbnMgfHwgXCJbJ3gnXVwiO1xuICAgICAgXG4gICAgICB2YWx1ZXNIVE1MID0gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMz5PcHRpZXM8L2gzPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1xdWVzdGlvbi1vcHRpb25zXCI+XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudFwiPjxzdHJvbmc+VGVrc3Q8L3N0cm9uZz48L2Rpdj5cbiAgICAgICAgICAgICAgICB7ICggZGltZW5zaW9ucyA9PSBcIlsneCddXCIgfHwgZGltZW5zaW9ucyA9PSBcIlsneCcsJ3knXVwiICkgJiYgKDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudCBvc2Mtb3ZlcnZpZXctbGluZS1maWVsZFwiPjxzdHJvbmc+WDwvc3Ryb25nPjwvZGl2Pil9XG4gICAgICAgICAgICAgICAgeyAoIGRpbWVuc2lvbnMgPT0gXCJbJ3knXVwiIHx8IGRpbWVuc2lvbnMgPT0gXCJbJ3gnLCd5J11cIiApICYmICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnQgb3NjLW92ZXJ2aWV3LWxpbmUtZmllbGRcIj48c3Ryb25nPlk8L3N0cm9uZz48L2Rpdj4pfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtYnV0dG9uc1wiPjxkaXYgc3R5bGU9e3sgd2lkdGg6ICc2MHB4JyB9fT48L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgeyBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQudmFsdWVzICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMubWFwICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC52YWx1ZXMubWFwKChlbnRyeSwgaSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IHNob3dFbnRyeSA9IGZ1bmN0aW9uKGZpZWxkbmFtZSwgZGltZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBkaW1lbnNpb24gPyBlbnRyeVtmaWVsZG5hbWVdW2RpbWVuc2lvbl0gOiBlbnRyeVtmaWVsZG5hbWVdO1xuICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUudmFsdWVFZGl0TW9kZUluZGV4ID09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlRleHQgY29uZmlnPXt7fX0gdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHZhbHVlSW5kZXg6IGksIHZhbHVlRGltZW5zaW9uOiBkaW1lbnNpb24sIHZhbHVlVGV4dDogZGF0YS52YWx1ZSwgdmFsdWVWYWx1ZTogZGF0YS52YWx1ZSB9KSB9Lz5cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lXCIga2V5PXtgb3B0aW9uLSR7aX1gfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAge3Nob3dFbnRyeSgndGV4dCcpfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgeyAoIGRpbWVuc2lvbnMgPT0gXCJbJ3gnXVwiIHx8IGRpbWVuc2lvbnMgPT0gXCJbJ3gnLCd5J11cIiApICYmIChcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWNvbnRlbnQgb3NjLW92ZXJ2aWV3LWxpbmUtZmllbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzaG93RW50cnkoJ3ZhbHVlJywgJ3gnKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICB7ICggZGltZW5zaW9ucyA9PSBcIlsneSddXCIgfHwgZGltZW5zaW9ucyA9PSBcIlsneCcsJ3knXVwiICkgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudCBvc2Mtb3ZlcnZpZXctbGluZS1maWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3Nob3dFbnRyeSgndmFsdWUnLCAneScpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtZWRpdC1idXR0b25cIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLnRvZ2dsZUVkaXRNb2RlKGkpfT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwib3NjLWRlbGV0ZS1idXR0b25cIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlKHsgZGVsZXRlSW5kZXg6IGkgfSl9PjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj4pXG4gICAgICAgICAgICAgIH0pfVxuXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIj5cbiAgICAgICAgICAgICAgICA8YSBvbkNsaWNrPXsgKCkgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IG5ld1ZhbHVlOiB7IHRleHQ6ICdOaWV1d2Ugb3B0aWUnLCB2YWx1ZToge3g6ICc1MCcsIHk6ICc1MCd9IH19KX0+XG4gICAgICAgICAgICAgICAgICBOaWV1d2Ugb3B0aWUgdG9ldm9lZ2VuXG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2Pik7XG4gICAgfVxuXG4gICAgLy8gZGltZW5zaW9ucyAtIFRPRE86IDNkZVxuICAgIGxldCBkaW1lbnNpb25zSFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwICYmIHNlbGYucHJvcHMuY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwLmFuc3dlckRpbWVuc2lvbnMgPiAxKSB7XG4gICAgICBkaW1lbnNpb25zSFRNTCA9IChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDM+RGV6ZSB2cmFhZyBoZWVmdCBpbnZsb2VkIGluIGRlIHJpY2h0aW5nPC9oMz5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5TZWxlY3QgY29uZmlnPXt7IGNob2ljZXM6IFt7IHZhbHVlOiBcIlsneCddXCIsIGRlc2NyaXB0aW9uOiBcIkFsbGVlbiBYXCJ9LCB7IHZhbHVlOiBcIlsneSddXCIsIGRlc2NyaXB0aW9uOiBcIkFsbGVlbiBZXCJ9LCB7IHZhbHVlOiBcIlsneCcsJ3knXVwiLCBkZXNjcmlwdGlvbjogXCJYIGVuIFlcIn1dIH19IHZhbHVlPXsgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmRpbWVuc2lvbnMgfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IGRpbWVuc2lvbnM6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYuZGltZW5zaW9uc0ZpZWxkID0gZWx9Lz5cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuc3RhZC1mb3JtXCI+XG5cbiAgICAgICAgPGgzPlRpdGVsPC9oMz5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAndGV4dCcsIG1pbkxlbmd0aDogMCwgbWF4TGVuZ3RoOiAyMDAgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC50aXRsZX0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYucHJvcHMub25DaGFuZ2UoeyB0aXRsZTogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi50aXRsZUZpZWxkID0gZWx9Lz5cbiAgICAgICAgPGgzPkJlc2NocmlqdmluZzwvaDM+XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHRhcmVhJywgbWluTGVuZ3RoOiAwLCBtYXhMZW5ndGg6IDEwMDAgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC5kZXNjcmlwdGlvbn0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYucHJvcHMub25DaGFuZ2UoeyBkZXNjcmlwdGlvbjogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5kZXNjcmlwdGlvbkZpZWxkID0gZWx9Lz5cbiAgICAgICAge21vcmVJbmZvSFRNTH1cbiAgICAgICAgPGgzPkFmYmVlbGRpbmcgYm92ZW4gZGUgdnJhYWc8L2gzPlxuICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5JbWFnZVVwbG9hZCBrZXk9XCJpMVwiIGNvbmZpZz17eyBhczogJ2pzb24nLCBpbWFnZXNlcnZlcjogc2VsZi5jb25maWcuaW1hZ2VzZXJ2ZXIgfX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC5pbWFnZXN9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLnByb3BzLm9uQ2hhbmdlKHsgaW1hZ2VzOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLmltYWdlc0ZpZWxkID0gZWx9Lz5cblxuICAgICAgICA8aDM+VHlwZSB2cmFhZzwvaDM+XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlNlbGVjdCBjb25maWc9e3sgY2hvaWNlczogW3sgdmFsdWU6IFwiXCIsIGRlc2NyaXB0aW9uOiBcIk1hYWsgZWVuIGtldXplXCIgfSwvKnsgdmFsdWU6IFwiY29udGludW91c1wiLCBkZXNjcmlwdGlvbjogXCJjb250aW51ZVwiIH0sKi97IHZhbHVlOiBcImEtdG8tYlwiLCBkZXNjcmlwdGlvbjogXCJ2YW4gYSBuYWFyIGIgc2xpZGVyXCIgfSwvKnsgdmFsdWU6IFwiZW51bS1idXR0b25zXCIsIGRlc2NyaXB0aW9uOiBcIm11bHRpcGxlIGNob2ljZSAtIGJ1dHRvbnNcIiB9Ki8seyB2YWx1ZTogXCJlbnVtLXJhZGlvXCIsIGRlc2NyaXB0aW9uOiBcInJhZGlvIGJ1dHRvbnNcIiB9XSwgcmVxdWlyZWQ6IHRydWUgIH19IHZhbHVlPXsgc2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnR5cGUgfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5oYW5kbGVGaWVsZENoYW5nZSh7IHR5cGU6IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IHNlbGYudHlwZUZpZWxkID0gZWx9Lz5cblxuICAgICAgICB7dmFsdWVzSFRNTH1cbiAgICAgICAge2RpbWVuc2lvbnNIVE1MfVxuICAgICAgICBcbiAgICAgICAgPGgzPlZvbGdvcmRlIG51bW1lcjwvaDM+XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLlRleHQgY29uZmlnPXt7fX0gdmFsdWU9e3NlbGYucHJvcHMuY3VycmVudFRhcmdldC5zZXFucn0gb25DaGFuZ2U9eyBkYXRhID0+IHNlbGYucHJvcHMub25DaGFuZ2UoeyBzZXFucjogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5zZXFuckZpZWxkID0gZWx9Lz5cblxuICAgICAgPC9kaXY+KVxuICAgIDtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMgZnJvbSAnLi4vLi4vLi4vZm9ybXMvaW5kZXguanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlc3Rpb25Hcm91cEZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5zdGFkLWZvcm1cIj5cbiAgICAgICAgPGgzPlRpdGVsPC9oMz5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAnaW5wdXQnLCBtaW5MZW5ndGg6IDEsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnRpdGxlfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IHRpdGxlOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnRpdGxlRmllbGQgPSBlbH0vPlxuICAgICAgICA8aDM+QmVzY2hyaWp2aW5nPC9oMz5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuSW5wdXRXaXRoQ291bnRlciBjb25maWc9e3sgaW5wdXRUeXBlOiAndGV4dGFyZWEnLCBtaW5MZW5ndGg6IDEsIG1heExlbmd0aDogMTAwMCB9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LmRlc2NyaXB0aW9ufSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IGRlc2NyaXB0aW9uOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLmRlc2NyaXB0aW9uRmllbGQgPSBlbH0vPlxuICAgICAgICA8aDM+QWFudGFsIGRpbWVuc2llcyB2b29yIGFudHdvb3JkZW48L2gzPlxuICAgICAgICA8T3BlblN0YWRDb21wb25lbnRGb3Jtcy5TZWxlY3QgY29uZmlnPXt7IGNob2ljZXM6IFt7IHZhbHVlOiBcIjFcIiwgZGVzY3JpcHRpb246IFwiMSAtIGxpbmlhaXJcIiB9LCB7IHZhbHVlOiBcIjJcIiwgZGVzY3JpcHRpb246IFwiMiAtIHZsYWtcIiB9XSAgfX0gdmFsdWU9eyBzZWxmLnByb3BzLmN1cnJlbnRUYXJnZXQuYW5zd2VyRGltZW5zaW9ucyB9IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLnByb3BzLm9uQ2hhbmdlKHsgYW5zd2VyRGltZW5zaW9uczogZGF0YS52YWx1ZSB9KSB9IHJlZj17ZWwgPT4gc2VsZi5hbnN3ZXJEaW1lbnNpb25zRmllbGQgPSBlbH0vPlxuICAgICAgICA8aDM+Vm9sZ29yZGUgbnVtbWVyPC9oMz5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuVGV4dCBjb25maWc9e3t9fSB2YWx1ZT17c2VsZi5wcm9wcy5jdXJyZW50VGFyZ2V0LnNlcW5yfSBvbkNoYW5nZT17IGRhdGEgPT4gc2VsZi5wcm9wcy5vbkNoYW5nZSh7IHNlcW5yOiBkYXRhLnZhbHVlIH0pIH0gcmVmPXtlbCA9PiBzZWxmLnNlcW5yRmllbGQgPSBlbH0vPlxuICAgICAgPC9kaXY+XG4pXG4gICAgO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENob2ljZUZvcm0gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBtdXRpcGxlIHF1ZXN0aW9uR3JvdXBzIGlzIG5vdCBxdWl0ZSByZWFkeSBhbmQgaXMgdGhlcmVmb3JlIHR1cm5lZCBvZiBpbiB0aGUgaW50ZXJmYWNlXG4gICAgbGV0IG5ld0dyb3VwQnV0dG9uSFRNTCA9IG51bGw7XG4gICAgaWYgKCAhc2VsZi5wcm9wcy5xdWVzdGlvbkdyb3VwcyB8fCBzZWxmLnByb3BzLnF1ZXN0aW9uR3JvdXBzLmxlbmd0aCA8IDEgKSB7XG4gICAgICBuZXdHcm91cEJ1dHRvbkhUTUwgPSA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYucHJvcHMuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAncXVlc3Rpb24tZ3JvdXAnIH0pfT5OaWV1d2UgdnJhYWdncm9lcDwvYT5cbiAgICB9XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXdcIj5cbiAgICAgICAgICAgIDxoMj5WcmFhZ2dyb2VwZW48L2gyPlxuXG4gICAgICAgICAgICB7IE9iamVjdC5rZXlzKHNlbGYucHJvcHMucXVlc3Rpb25Hcm91cHMpLm1hcCgoa2V5LCBpKSA9PiB7XG5cbiAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uR3JvdXAgPSBzZWxmLnByb3BzLnF1ZXN0aW9uR3JvdXBzW2tleV07XG5cbiAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uc0hUTUwgPSAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctcXVlc3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8aDQ+VnJhZ2VuPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHsgT2JqZWN0LmtleXMocXVlc3Rpb25Hcm91cC5xdWVzdGlvbnMpLm1hcCgoa2V5LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uID0gcXVlc3Rpb25Hcm91cC5xdWVzdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZVwiIGtleT17YHF1ZXN0aW9uLSR7cXVlc3Rpb24uaWR9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtxdWVzdGlvbi5zZXFucn0gLSB7cXVlc3Rpb24udGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7LypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3F1ZXN0aW9uLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm9zYy1lZGl0LWJ1dHRvblwiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYucHJvcHMuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAncXVlc3Rpb24nLCBxdWVzdGlvbkdyb3VwSWQ6IHF1ZXN0aW9uR3JvdXAuaWQsIHF1ZXN0aW9uSWQ6IHF1ZXN0aW9uLmlkIH0pfT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwib3NjLWRlbGV0ZS1idXR0b25cIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLnByb3BzLmRlbGV0ZUVsZW1lbnQoeyB3aGF0OiAncXVlc3Rpb24nLCBxdWVzdGlvbkdyb3VwSWQ6IHF1ZXN0aW9uR3JvdXAuaWQsIHF1ZXN0aW9uSWQ6IHF1ZXN0aW9uLmlkLCB0aXRsZTogcXVlc3Rpb24udGl0bGV9KX0+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgb25DbGljaz17ZXZlbnQgPT4gc2VsZi5wcm9wcy5zZXRDdXJyZW50Rm9ybSh7IHdoYXQ6ICdxdWVzdGlvbicsIHF1ZXN0aW9uR3JvdXBJZDogcXVlc3Rpb25Hcm91cC5pZCB9KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICBOaWV1d2UgdnJhYWdcbiAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgbGV0IGNob2ljZXNIVE1MID1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1jaG9pY2VzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoND5LZXV6ZSBvcHRpZXM8L2g0PlxuICAgICAgICAgICAgICAgICAgICB7IE9iamVjdC5rZXlzKHF1ZXN0aW9uR3JvdXAuY2hvaWNlcykubWFwKChrZXksIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hvaWNlID0gcXVlc3Rpb25Hcm91cC5jaG9pY2VzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIiBrZXk9e2BjaG9pY2UtJHtjaG9pY2UuaWR9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaG9pY2Uuc2VxbnJ9IC0ge2Nob2ljZS50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmUtYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm9zYy1lZGl0LWJ1dHRvblwiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYucHJvcHMuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAnY2hvaWNlJywgcXVlc3Rpb25Hcm91cElkOiBxdWVzdGlvbkdyb3VwLmlkLCBjaG9pY2VJZDogY2hvaWNlLmlkIH0pfT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwib3NjLWRlbGV0ZS1idXR0b25cIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLnByb3BzLmRlbGV0ZUVsZW1lbnQoeyB3aGF0OiAnY2hvaWNlJywgcXVlc3Rpb25Hcm91cElkOiBxdWVzdGlvbkdyb3VwLmlkLCBjaG9pY2VJZDogY2hvaWNlLmlkLCB0aXRsZTogY2hvaWNlLnRpdGxlfSl9PjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lXCIga2V5PXtgY2hvaWNlLW5ld2B9PlxuICAgICAgICAgICAgICAgICAgICAgIDxhIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYucHJvcHMuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAnY2hvaWNlJywgcXVlc3Rpb25Hcm91cElkOiBxdWVzdGlvbkdyb3VwLmlkIH0pfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIE5pZXV3ZSBrZXV6ZSBvcHRpZVxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj47XG5cblxuICAgICAgICAgICAgICBsZXQgZGVsZXRlQnV0dG9uID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLW5vLWJ1dHRvblwiPjwvZGl2Pik7XG4gICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhxdWVzdGlvbkdyb3VwLmNob2ljZXMpLmxlbmd0aCA9PSAwICYmIE9iamVjdC5rZXlzKHF1ZXN0aW9uR3JvdXAucXVlc3Rpb25zKS5sZW5ndGggPT0gMCAmJiBzZWxmLnByb3BzLnF1ZXN0aW9uR3JvdXBzLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlQnV0dG9uID0gKDxhICBjbGFzc05hbWU9XCJvc2MtZGVsZXRlLWJ1dHRvblwiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYucHJvcHMuZGVsZXRlRWxlbWVudCh7IHdoYXQ6ICdxdWVzdGlvbi1ncm91cCcsIHF1ZXN0aW9uR3JvdXBJZDogcXVlc3Rpb25Hcm91cC5pZCwgdGl0bGU6IHF1ZXN0aW9uR3JvdXAudGl0bGV9KX0+PC9hPik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LXF1ZXN0aW9uLWdyb3VwXCIga2V5PXtgcXVlc3Rpb25ncm91cC0ke3F1ZXN0aW9uR3JvdXAuaWR9YH0+XG5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW92ZXJ2aWV3LWxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtb3ZlcnZpZXctbGluZS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGgzPntxdWVzdGlvbkdyb3VwLnRpdGxlfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1vdmVydmlldy1saW5lLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtZWRpdC1idXR0b25cIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLnByb3BzLnNldEN1cnJlbnRGb3JtKHsgd2hhdDogJ3F1ZXN0aW9uLWdyb3VwJywgcXVlc3Rpb25Hcm91cElkOiBxdWVzdGlvbkdyb3VwLmlkIH0pfT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAge2RlbGV0ZUJ1dHRvbn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIHtxdWVzdGlvbnNIVE1MfVxuICAgICAgICAgICAgICAgICAge2Nob2ljZXNIVE1MfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8YnIvPjxici8+XG4gICAgICAgICAgICB7bmV3R3JvdXBCdXR0b25IVE1MfVxuICAgICAgICAgIDwvZGl2PlxuICAgIClcbiAgICA7XG5cbiAgfVxuXG59XG4iLCJpbXBvcnQgT3BlblN0YWRDb21wb25lbnRMaWJzIGZyb20gJy4uLy4uL2xpYnMvaW5kZXguanN4JztcblxuZnVuY3Rpb24gZmV0Y2hDaG9pY2VzR3VpZGUoeyBjb25maWcgfSkge1xuXG4gIGxldCB1cmwgPSBgJHtjb25maWcuYXBpICYmIGNvbmZpZy5hcGkudXJsICAgfS9hcGkvc2l0ZS8keyAgY29uZmlnLnNpdGVJZCAgfS9jaG9pY2VzZ3VpZGUvJHsgIGNvbmZpZy5jaG9pY2VzR3VpZGVJZH0/aW5jbHVkZUNob2ljZXM9MSZpbmNsdWRlUXVlc3Rpb25zPTFgO1xuICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycygpO1xuXG4gIHJldHVybiBmZXRjaCh1cmwsIHsgaGVhZGVycyB9KVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KVxuICAgIC50aGVuKChqc29uKSA9PiB7XG5cbiAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICBjaG9pY2VzR3VpZGVJZDoganNvbi5pZCxcbiAgICAgICAgaW1hZ2VzOiBqc29uLmltYWdlcyxcbiAgICAgICAgY2hvaWNlc0d1aWRlQ29uZmlnOiBqc29uLmNvbmZpZyxcbiAgICAgICAgdGl0bGU6IGpzb24udGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBqc29uLmRlc2NyaXB0aW9uLFxuICAgICAgICBjaG9pY2VzOiBqc29uLmNob2ljZXMgfHwgW10sXG4gICAgICAgIHF1ZXN0aW9uR3JvdXBzOiBqc29uLnF1ZXN0aW9uZ3JvdXBzIHx8IFtdLFxuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgfTtcblxuICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgIGlmIChkYXRhLnF1ZXN0aW9uR3JvdXBzICYmIGRhdGEucXVlc3Rpb25Hcm91cHMubWFwKSB7XG4gICAgICAgIGRhdGEucXVlc3Rpb25Hcm91cHMubWFwKCBxdWVzdGlvbmdyb3VwID0+IHtcbiAgICAgICAgICBpZiAocXVlc3Rpb25ncm91cC5xdWVzdGlvbnMgJiYgcXVlc3Rpb25ncm91cC5xdWVzdGlvbnMubWFwKSB7XG4gICAgICAgICAgICBxdWVzdGlvbmdyb3VwLnF1ZXN0aW9ucy5tYXAocXVlc3Rpb24gPT4ge1xuICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLnR5cGUgPT0gJ2NvbnRpbnVvdXMnKSBxdWVzdGlvbi50eXBlID0gJ2EtdG8tYic7XG4gICAgICAgICAgICBpZiAocXVlc3Rpb24udHlwZSA9PSAnZW51bS1idXR0b25zJykgcXVlc3Rpb24udHlwZSA9ICdlbnVtLXJhZGlvJztcbiAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLnR5cGUgPT0gJ2EtdG8tYicpIHtcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24udmFsdWVzICYmIHF1ZXN0aW9uLnZhbHVlcy5BKSBxdWVzdGlvbi52YWx1ZXMuQS5sYWJlbEJlbG93ID0gcXVlc3Rpb24udmFsdWVzLkEubGFiZWxCZWxvdyB8fCBxdWVzdGlvbi5taW5MYWJlbDtcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24udmFsdWVzICYmIHF1ZXN0aW9uLnZhbHVlcy5CKSBxdWVzdGlvbi52YWx1ZXMuQi5sYWJlbEJlbG93ID0gcXVlc3Rpb24udmFsdWVzLkIubGFiZWxCZWxvdyB8fCBxdWVzdGlvbi5tYXhMYWJlbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gXG4gICAgfSk7XG5cbn1cblxuZXhwb3J0IHtcbiAgZmV0Y2hDaG9pY2VzR3VpZGUgYXMgZGVmYXVsdCxcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi8uLi9saWJzL2luZGV4LmpzeCc7XG5cbmltcG9ydCBDaG9pY2VGb3JtIGZyb20gJy4vY2hvaWNlLWZvcm0uanN4JztcbmltcG9ydCBDaG9pY2VzR3VpZGVGb3JtIGZyb20gJy4vY2hvaWNlcy1ndWlkZS1mb3JtLmpzeCc7XG5pbXBvcnQgUXVlc3Rpb25Gb3JtIGZyb20gJy4vcXVlc3Rpb24tZm9ybS5qc3gnO1xuaW1wb3J0IFF1ZXN0aW9uR3JvdXBGb3JtIGZyb20gJy4vcXVlc3Rpb24tZ3JvdXAtZm9ybS5qc3gnO1xuaW1wb3J0IE92ZXJ2aWV3IGZyb20gJy4vb3ZlcnZpZXcuanN4JztcblxuaW1wb3J0IGZldGNoQ2hvaWNlc0d1aWRlIGZyb20gJy4uLy4uL2xpYi9mZXRjaC5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVGb3JtIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgc2l0ZUlkOiBudWxsLFxuICAgICAgbG9naW5Vcmw6IG51bGwsXG4gICAgICBub09mUXVlc3Rpb25zVG9TaG93OiAxLFxuICAgICAgYXBpOiB7XG4gICAgICAgIHVybDogbnVsbFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRoaXMuaGFuZGxlRmllbGRDaGFuZ2UgPSB0aGlzLmhhbmRsZUZpZWxkQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLnNldEN1cnJlbnRGb3JtID0gdGhpcy5zZXRDdXJyZW50Rm9ybS5iaW5kKHRoaXMpXG4gICAgdGhpcy5kZWxldGVFbGVtZW50ID0gdGhpcy5kZWxldGVFbGVtZW50LmJpbmQodGhpcylcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjaG9pY2VzR3VpZGVJZDogdGhpcy5wcm9wcy5kYXRhLmNob2ljZXNHdWlkZUlkLFxuICAgICAgY3VycmVudFRhcmdldDoge1xuICAgICAgfSxcbiAgICAgIGJ1c3k6IGZhbHNlLFxuICAgIH07XG5cbiAgICB0aGlzLm9uRmluaXNoZWQgPSB0aGlzLnByb3BzLm9uRmluaXNoZWQ7XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIGZldGNoRGF0YSgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgZmV0Y2hDaG9pY2VzR3VpZGUoeyBjb25maWc6IHNlbGYuY29uZmlnIH0pXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgLi4uZGF0YSwgYnVzeTogZmFsc2UgfSwgKCkgPT4ge1xuICAgICAgICAgIHNlbGYuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAnY2hvaWNlcy1ndWlkZScgfSk7XG4gICAgICAgICAgLy8gVE1QXG4gICAgICAgICAgLy9zZWxmLnNldEN1cnJlbnRGb3JtKHsgd2hhdDogJ3F1ZXN0aW9uJywgcXVlc3Rpb25Hcm91cElkOiAxLCBxdWVzdGlvbklkOiA5MSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ05pZXQgZ29lZCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICBoYW5kbGVGaWVsZENoYW5nZShkYXRhKSB7XG4gICAgbGV0IGN1cnJlbnRUYXJnZXQgPSB0aGlzLnN0YXRlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGN1cnJlbnRUYXJnZXRba2V5XSA9IGRhdGFba2V5XTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50VGFyZ2V0IH0pO1xuXG4gIH1cblxuICBzZXRDdXJyZW50Rm9ybShjdXJyZW50VGFyZ2V0KSB7XG4gICAgbGV0IHF1ZXN0aW9uR3JvdXA7XG4gICAgbGV0IGNob2ljZTtcbiAgICBsZXQgcXVlc3Rpb247XG5cbiAgICBzd2l0Y2ggKGN1cnJlbnRUYXJnZXQud2hhdCkge1xuXG4gICAgICBjYXNlICdjaG9pY2VzLWd1aWRlJzpcbiAgICAgICAgY3VycmVudFRhcmdldC50aXRsZSA9IHRoaXMuc3RhdGUudGl0bGU7XG4gICAgICAgIGN1cnJlbnRUYXJnZXQuZGVzY3JpcHRpb24gPSB0aGlzLnN0YXRlLmRlc2NyaXB0aW9uO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LmltYWdlcyA9IHRoaXMuc3RhdGUuaW1hZ2VzID8gdGhpcy5zdGF0ZS5pbWFnZXMgOiAnJztcbiAgICAgICAgY3VycmVudFRhcmdldC5jaG9pY2VzR3VpZGVDb25maWcgPSB0aGlzLnN0YXRlLmNob2ljZXNHdWlkZUNvbmZpZyA/IHRoaXMuc3RhdGUuY2hvaWNlc0d1aWRlQ29uZmlnIDoge307XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdjaG9pY2UnOlxuICAgICAgICBpZiAoY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwSWQpIHtcbiAgICAgICAgICBxdWVzdGlvbkdyb3VwID0gdGhpcy5zdGF0ZS5xdWVzdGlvbkdyb3Vwcy5maW5kKGdyb3VwID0+IGdyb3VwLmlkID09IGN1cnJlbnRUYXJnZXQucXVlc3Rpb25Hcm91cElkKSB8fCB7fTtcbiAgICAgICAgICBjaG9pY2UgPSBxdWVzdGlvbkdyb3VwLmNob2ljZXMgJiYgcXVlc3Rpb25Hcm91cC5jaG9pY2VzLmZpbmQoY2hvaWNlcyA9PiBjaG9pY2VzLmlkID09IGN1cnJlbnRUYXJnZXQuY2hvaWNlSWQpIHx8IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNob2ljZSA9IHRoaXMuc3RhdGUuY2hvaWNlcy5maW5kKGNob2ljZXMgPT4gY2hvaWNlcy5pZCA9PSBjdXJyZW50VGFyZ2V0LmNob2ljZXNJZCkgfHwge307XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwID0gcXVlc3Rpb25Hcm91cDtcbiAgICAgICAgY3VycmVudFRhcmdldC50aXRsZSA9IGNob2ljZS50aXRsZTtcbiAgICAgICAgY3VycmVudFRhcmdldC5kZXNjcmlwdGlvbiA9IGNob2ljZS5kZXNjcmlwdGlvbjtcbiAgICAgICAgY3VycmVudFRhcmdldC5pbWFnZXMgPSBjaG9pY2UuaW1hZ2VzO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LmFuc3dlcnMgPSBjaG9pY2UuYW5zd2VycztcbiAgICAgICAgY3VycmVudFRhcmdldC5zZXFuciA9IHR5cGVvZiBjaG9pY2Uuc2VxbnIgIT0gJ3VuZGVmaW5lZCcgPyBjaG9pY2Uuc2VxbnIgOiAxMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3F1ZXN0aW9uLWdyb3VwJzpcbiAgICAgICAgcXVlc3Rpb25Hcm91cCA9IHRoaXMuc3RhdGUucXVlc3Rpb25Hcm91cHMuZmluZChncm91cCA9PiBncm91cC5pZCA9PSBjdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXBJZCkgfHwge307XG4gICAgICAgIGN1cnJlbnRUYXJnZXQudGl0bGUgPSBxdWVzdGlvbkdyb3VwLnRpdGxlO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LmRlc2NyaXB0aW9uID0gcXVlc3Rpb25Hcm91cC5kZXNjcmlwdGlvbjtcbiAgICAgICAgY3VycmVudFRhcmdldC5hbnN3ZXJEaW1lbnNpb25zID0gcXVlc3Rpb25Hcm91cC5hbnN3ZXJEaW1lbnNpb25zO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LnNlcW5yID0gdHlwZW9mIHF1ZXN0aW9uR3JvdXAuc2VxbnIgIT0gJ3VuZGVmaW5lZCcgPyBxdWVzdGlvbkdyb3VwLnNlcW5yIDogMTA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdxdWVzdGlvbic6XG4gICAgICAgIHF1ZXN0aW9uR3JvdXAgPSB0aGlzLnN0YXRlLnF1ZXN0aW9uR3JvdXBzLmZpbmQoZ3JvdXAgPT4gZ3JvdXAuaWQgPT0gY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwSWQpIHx8IHt9O1xuICAgICAgICBxdWVzdGlvbiA9IHF1ZXN0aW9uR3JvdXAucXVlc3Rpb25zICYmIHF1ZXN0aW9uR3JvdXAucXVlc3Rpb25zLmZpbmQocXVlc3Rpb24gPT4gcXVlc3Rpb24uaWQgPT0gY3VycmVudFRhcmdldC5xdWVzdGlvbklkKSB8fCB7fTtcbiAgICAgICAgY3VycmVudFRhcmdldC5xdWVzdGlvbkdyb3VwID0gcXVlc3Rpb25Hcm91cDtcbiAgICAgICAgY3VycmVudFRhcmdldC50aXRsZSA9IHF1ZXN0aW9uLnRpdGxlO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LmRlc2NyaXB0aW9uID0gcXVlc3Rpb24uZGVzY3JpcHRpb247XG4gICAgICAgIGN1cnJlbnRUYXJnZXQubW9yZUluZm8gPSBxdWVzdGlvbi5tb3JlSW5mbztcbiAgICAgICAgY3VycmVudFRhcmdldC5pbWFnZXMgPSBxdWVzdGlvbi5pbWFnZXM7XG4gICAgICAgIGN1cnJlbnRUYXJnZXQubWluTGFiZWwgPSBxdWVzdGlvbi5taW5MYWJlbDtcbiAgICAgICAgY3VycmVudFRhcmdldC5tYXhMYWJlbCA9IHF1ZXN0aW9uLm1heExhYmVsO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LnR5cGUgPSBxdWVzdGlvbi50eXBlO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LmRpbWVuc2lvbnMgPSBxdWVzdGlvbi5kaW1lbnNpb25zO1xuICAgICAgICBjdXJyZW50VGFyZ2V0LnZhbHVlcyA9IHF1ZXN0aW9uLnZhbHVlcztcbiAgICAgICAgY3VycmVudFRhcmdldC5zZXFuciA9IHR5cGVvZiBxdWVzdGlvbi5zZXFuciAhPSAndW5kZWZpbmVkJyA/IHF1ZXN0aW9uLnNlcW5yIDogMTA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50VGFyZ2V0IH0pO1xuICB9XG5cblx0dmFsaWRhdGUoeyBzaG93RXJyb3JzLCBzY3JvbGxUbyB9KSB7XG4gICAgbGV0IHNlbGY9IHRoaXM7XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICAgIGxldCBmaXJzdEludmFsaWQgPSBudWxsXG5cbiAgICBsZXQgZmllbGRzID0gc2VsZi5mb3JtZmllbGRzO1xuXG4gICAgT2JqZWN0LmtleXMoc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0KS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgaWYgKGZpZWxkc1tmaWVsZCsnRmllbGQnXSAmJiBmaWVsZHNbZmllbGQrJ0ZpZWxkJ10udmFsaWRhdGUgJiYgIWZpZWxkc1tmaWVsZCsnRmllbGQnXS52YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkpIHsgXG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFmaXJzdEludmFsaWQpIGZpcnN0SW52YWxpZCA9IGZpZWxkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHNjcm9sbFRvICYmIGZpcnN0SW52YWxpZCAmJiBmaXJzdEludmFsaWQuaW5zdGFuY2UgJiYgZmlyc3RJbnZhbGlkLmluc3RhbmNlLnNjcm9sbEludG9WaWV3KSBmaXJzdEludmFsaWQuaW5zdGFuY2Uuc2Nyb2xsSW50b1ZpZXcoe2JlaGF2aW9yOiAnc21vb3RoJ30pO1xuICAgIHJldHVybiBpc1ZhbGlkOyAgICBcblxuXHR9XG5cbiAgY2FuU3VibWl0KCkge1xuICAgIGxldCByZXF1aXJlZFVzZXJSb2xlID0gJ21vZGVyYXRvcic7XG4gICAgbGV0IHVzZXIgPSB0aGlzLmNvbmZpZy51c2VyIHx8IHt9O1xuICAgIHJldHVybiBPcGVuU3RhZENvbXBvbmVudExpYnMudXNlci5oYXNSb2xlKHVzZXIsIHJlcXVpcmVkVXNlclJvbGUpXG4gIH1cblxuICBzdWJtaXRGb3JtKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5zZXRTdGF0ZSh7IGJ1c3k6IHRydWUsIHN1Ym1pdEVycm9yOiBudWxsIH0sICgpID0+IHtcblxuICAgICAgbGV0IGlzVmFsaWQgPSBzZWxmLnZhbGlkYXRlKHsgc2hvd0Vycm9yczogdHJ1ZSwgc2Nyb2xsVG86IHRydWUgfSk7XG4gICAgICBpZiAoIWlzVmFsaWQpIHJldHVybiBzZWxmLnNldFN0YXRlKHsgYnVzeTogZmFsc2UgfSk7XG5cbiAgICAgIGlmICghKHNlbGYuY2FuU3VibWl0KCkpKSByZXR1cm4gYWxlcnQoJ0plIG1hZyBkaXQgbmlldCcpO1xuXG4gICAgICBsZXQgdXJsO1xuICAgICAgbGV0IGJvZHk7XG4gICAgICBsZXQgdGFyZ2V0SWQ7XG5cbiAgICAgIHN3aXRjaCAoc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LndoYXQpIHtcblxuICAgICAgICBjYXNlICdjaG9pY2VzLWd1aWRlJzpcbiAgICAgICAgICB0YXJnZXRJZCA9IHNlbGYuc3RhdGUuY2hvaWNlc0d1aWRlSWQ7XG4gICAgICAgICAgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vY2hvaWNlc2d1aWRlYDtcbiAgICAgICAgICBib2R5ID0ge1xuICAgICAgICAgICAgdGl0bGU6IHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpbWFnZXM6IHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC5pbWFnZXMsXG4gICAgICAgICAgICBjb25maWc6IHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC5jaG9pY2VzR3VpZGVDb25maWcsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjaG9pY2UnOlxuICAgICAgICAgIHRhcmdldElkID0gc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LmNob2ljZUlkO1xuICAgICAgICAgIGlmIChzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQucXVlc3Rpb25Hcm91cElkKSB7XG4gICAgICAgICAgICB1cmwgPSBgJHtzZWxmLmNvbmZpZy5hcGkgJiYgc2VsZi5jb25maWcuYXBpLnVybCAgIH0vYXBpL3NpdGUvJHsgIHNlbGYuY29uZmlnLnNpdGVJZCAgfS9jaG9pY2VzZ3VpZGUvJHsgIHNlbGYuc3RhdGUuY2hvaWNlc0d1aWRlSWQgIH0vcXVlc3Rpb25ncm91cC8keyAgc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXBJZCAgfS9jaG9pY2VgO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgPSBgJHtzZWxmLmNvbmZpZy5hcGkgJiYgc2VsZi5jb25maWcuYXBpLnVybCAgIH0vYXBpL3NpdGUvJHsgIHNlbGYuY29uZmlnLnNpdGVJZCAgfS9jaG9pY2VzZ3VpZGUvJHsgIHNlbGYuc3RhdGUuY2hvaWNlc0d1aWRlSWQgIH0vY2hvaWNlYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm9keSA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQudGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgaW1hZ2VzOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuaW1hZ2VzLFxuICAgICAgICAgICAgYW5zd2Vyczogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LmFuc3dlcnMsXG4gICAgICAgICAgICBzZXFucjogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnNlcW5yLFxuICAgICAgICAgIH07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJvZHkuYW5zd2VycyA9IEpTT04ucGFyc2UoYm9keS5hbnN3ZXJzKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdxdWVzdGlvbi1ncm91cCc6XG4gICAgICAgICAgdGFyZ2V0SWQgPSBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQucXVlc3Rpb25Hcm91cElkO1xuICAgICAgICAgIHVybCA9IGAke3NlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsICAgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2Nob2ljZXNndWlkZS8keyAgc2VsZi5zdGF0ZS5jaG9pY2VzR3VpZGVJZCAgfS9xdWVzdGlvbmdyb3VwYDtcbiAgICAgICAgICBib2R5ID0ge1xuICAgICAgICAgICAgdGl0bGU6IHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC50aXRsZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBhbnN3ZXJEaW1lbnNpb25zOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuYW5zd2VyRGltZW5zaW9ucyxcbiAgICAgICAgICAgIHNlcW5yOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuc2VxbnIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdxdWVzdGlvbic6XG4gICAgICAgICAgdGFyZ2V0SWQgPSBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQucXVlc3Rpb25JZDtcbiAgICAgICAgICB1cmwgPSBgJHtzZWxmLmNvbmZpZy5hcGkgJiYgc2VsZi5jb25maWcuYXBpLnVybCAgIH0vYXBpL3NpdGUvJHsgIHNlbGYuY29uZmlnLnNpdGVJZCAgfS9jaG9pY2VzZ3VpZGUvJHsgIHNlbGYuc3RhdGUuY2hvaWNlc0d1aWRlSWQgIH0vcXVlc3Rpb25ncm91cC8keyAgc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uR3JvdXBJZCAgfS9xdWVzdGlvbmA7XG4gICAgICAgICAgYm9keSA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQudGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbW9yZUluZm86IHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC5tb3JlSW5mbyxcbiAgICAgICAgICAgIGltYWdlczogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LmltYWdlcyxcbiAgICAgICAgICAgIG1pbkxhYmVsOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQubWluTGFiZWwsXG4gICAgICAgICAgICBtYXhMYWJlbDogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0Lm1heExhYmVsLFxuICAgICAgICAgICAgdHlwZTogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnR5cGUsXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuZGltZW5zaW9ucyxcbiAgICAgICAgICAgIHZhbHVlczogc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnZhbHVlcyxcbiAgICAgICAgICAgIHNlcW5yOiBzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXQuc2VxbnIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYm9keS52YWx1ZXMgPSBKU09OLnBhcnNlKGJvZHkudmFsdWVzKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgICAgdXJsICs9IHRhcmdldElkID8gYC8keyAgdGFyZ2V0SWR9YCA6ICcnO1xuXG4gICAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG4gICAgICBsZXQgbWV0aG9kID0gdGFyZ2V0SWQgPyAnUFVUJyA6ICdQT1NUJztcblxuICAgICAgZmV0Y2godXJsLCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICAgICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICAgIGlmICggc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LndoYXQgPT0gJ2Nob2ljZXMtZ3VpZGUnICkge1xuICAgICAgICAgICAgc2VsZi5vbkZpbmlzaGVkKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5mZXRjaERhdGEoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VzID0gSlNPTi5wYXJzZShtZXNzYWdlcyk7XG4gICAgICAgICAgICAgIGlmICggdHlwZW9mIG1lc3NhZ2VzID09ICdvYmplY3QnICkgbWVzc2FnZXMgPSBtZXNzYWdlcy5tZXNzYWdlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHN1Ym1pdEVycm9yOiB7IG1lc3NhZ2U6IG1lc3NhZ2VzIH0gfSlcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IGJ1c3k6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlRWxlbWVudCh7d2hhdCwgcXVlc3Rpb25Hcm91cElkLCBjaG9pY2VJZCwgcXVlc3Rpb25JZCwgdGl0bGV9KSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnNldFN0YXRlKHsgc3VibWl0RXJyb3I6IG51bGwgfSlcbiAgICBcbiAgICBpZiAoIWNvbmZpcm0oXCJKZSBnYWF0IFwiICsgd2hhdCArIFwiIFwiICsgdGl0bGUgKyBcIiB2ZXJ3aWpkZXJlbi4gV2VldCBqZSBoZXQgemVrZXI/XCIpKSByZXR1cm47XG5cbiAgICBsZXQgdXJsO1xuICAgIHN3aXRjaCAod2hhdCkge1xuXG4gICAgICBjYXNlICdxdWVzdGlvbi1ncm91cCc6XG4gICAgICAgIHVybCA9IGAke3NlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsICAgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2Nob2ljZXNndWlkZS8keyAgc2VsZi5zdGF0ZS5jaG9pY2VzR3VpZGVJZCAgfS9xdWVzdGlvbmdyb3VwLyR7ICBxdWVzdGlvbkdyb3VwSWQgIH1gO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2hvaWNlJzpcbiAgICAgICAgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vY2hvaWNlc2d1aWRlLyR7ICBzZWxmLnN0YXRlLmNob2ljZXNHdWlkZUlkICB9L3F1ZXN0aW9uZ3JvdXAvJHsgIHF1ZXN0aW9uR3JvdXBJZCAgfS9jaG9pY2UvJHsgY2hvaWNlSWQgfWA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdxdWVzdGlvbic6XG4gICAgICAgIHVybCA9IGAke3NlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsICAgfS9hcGkvc2l0ZS8keyAgc2VsZi5jb25maWcuc2l0ZUlkICB9L2Nob2ljZXNndWlkZS8keyAgc2VsZi5zdGF0ZS5jaG9pY2VzR3VpZGVJZCAgfS9xdWVzdGlvbmdyb3VwLyR7ICBxdWVzdGlvbkdyb3VwSWQgIH0vcXVlc3Rpb24vJHsgcXVlc3Rpb25JZCB9YDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICAgIFxuICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcbiAgICBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzLFxuICAgIH0pXG4gICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICBzZWxmLmZldGNoRGF0YSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBlcnJvci50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzID0gSlNPTi5wYXJzZShtZXNzYWdlcyk7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBtZXNzYWdlcyA9PSAnb2JqZWN0JyApIG1lc3NhZ2VzID0gbWVzc2FnZXMubWVzc2FnZTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHN1Ym1pdEVycm9yOiB7IG1lc3NhZ2U6IG1lc3NhZ2VzIH0gfSlcbiAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IGJ1c3k6IGZhbHNlIH0pO1xuICAgICAgfSk7XG4gICAgXG4gIH1cbiAgXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCB0aXRsZSA9IG51bGw7XG4gICAgbGV0IGZvcm1maWVsZHNIVE1MID0gbnVsbDtcbiAgICBsZXQgb3ZlcnZpZXdIVE1MID0gbnVsbDtcbiAgICBsZXQgYmFja0J1dHRvbkhUTUwgPSA8YnV0dG9uIGNsYXNzTmFtZT1cIm9zYy1idXR0b24td2hpdGVcIiBvbkNsaWNrPXsoKSA9PiB7IHNlbGYuc2V0Q3VycmVudEZvcm0oeyB3aGF0OiAnY2hvaWNlcy1ndWlkZScgfSk7IH19PlRlcnVnPC9idXR0b24+O1xuICAgIGxldCBzdWJtaXRCdXR0b25IVE1MID0gPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLWJsdWVcIiBvbkNsaWNrPXtldmVudCA9PiBzZWxmLnN1Ym1pdEZvcm0oKX0+T3BzbGFhbjwvYnV0dG9uPjtcbiAgICBzd2l0Y2ggKHNlbGYuc3RhdGUuY3VycmVudFRhcmdldC53aGF0KSB7XG5cbiAgICAgIGNhc2UgJ2Nob2ljZXMtZ3VpZGUnOlxuICAgICAgICB0aXRsZSA9ICdCZXdlcmsga2V1emV3aWp6ZXInO1xuICAgICAgICBmb3JtZmllbGRzSFRNTCA9ICg8Q2hvaWNlc0d1aWRlRm9ybSBjb25maWc9e3RoaXMuY29uZmlnfSBjdXJyZW50VGFyZ2V0PXtzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXR9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlfSByZWY9e2VsID0+IHsgc2VsZi5mb3JtZmllbGRzID0gZWw7IH19Lz4pO1xuICAgICAgICBvdmVydmlld0hUTUwgPSAoPE92ZXJ2aWV3IHF1ZXN0aW9uR3JvdXBzPXtzZWxmLnN0YXRlLnF1ZXN0aW9uR3JvdXBzfSBzZXRDdXJyZW50Rm9ybT17c2VsZi5zZXRDdXJyZW50Rm9ybX0gZGVsZXRlRWxlbWVudD17c2VsZi5kZWxldGVFbGVtZW50fSByZWY9e2VsID0+IHsgc2VsZi5mb3JtZmllbGRzID0gZWw7IH19Lz4pO1xuICAgICAgICBiYWNrQnV0dG9uSFRNTCA9XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLXdoaXRlXCIgb25DbGljaz17KCkgPT4geyBpZiAoc2VsZi5vbkZpbmlzaGVkKSBzZWxmLm9uRmluaXNoZWQoKTsgfX0+VGVydWc8L2J1dHRvbj5cbiAgICAgICAgO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2hvaWNlJzpcbiAgICAgICAgdGl0bGUgPSAnQmV3ZXJrIEtldXplJztcbiAgICAgICAgZm9ybWZpZWxkc0hUTUwgPSAoPENob2ljZUZvcm0gY29uZmlnPXt0aGlzLmNvbmZpZ30gY3VycmVudFRhcmdldD17c2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0fSBvbkNoYW5nZT17c2VsZi5oYW5kbGVGaWVsZENoYW5nZX0gcmVmPXtlbCA9PiB7IHNlbGYuZm9ybWZpZWxkcyA9IGVsOyB9fS8+KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3F1ZXN0aW9uLWdyb3VwJzpcbiAgICAgICAgdGl0bGUgPSAnQmV3ZXJrIFZyYWdlbmdyb2VwJztcbiAgICAgICAgZm9ybWZpZWxkc0hUTUwgPSAoPFF1ZXN0aW9uR3JvdXBGb3JtIGNvbmZpZz17dGhpcy5jb25maWd9IGN1cnJlbnRUYXJnZXQ9e3NlbGYuc3RhdGUuY3VycmVudFRhcmdldH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlRmllbGRDaGFuZ2V9IHJlZj17ZWwgPT4geyBzZWxmLmZvcm1maWVsZHMgPSBlbDsgfX0vPik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdxdWVzdGlvbic6XG4gICAgICAgIHRpdGxlID0gYEJld2VyayBWcmFhZyAkeyAgc2VsZi5zdGF0ZS5jdXJyZW50VGFyZ2V0LnF1ZXN0aW9uSWR9YDtcbiAgICAgICAgZm9ybWZpZWxkc0hUTUwgPSAoPFF1ZXN0aW9uRm9ybSBjb25maWc9e3RoaXMuY29uZmlnfSBjdXJyZW50VGFyZ2V0PXtzZWxmLnN0YXRlLmN1cnJlbnRUYXJnZXR9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZUZpZWxkQ2hhbmdlfSByZWY9e2VsID0+IHsgc2VsZi5mb3JtZmllbGRzID0gZWw7IH19Lz4pO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYmFja0J1dHRvbkhUTUwgPVxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwib3NjLWJ1dHRvbi13aGl0ZVwiIG9uQ2xpY2s9eygpID0+IHsgaWYgKHNlbGYub25GaW5pc2hlZCkgc2VsZi5vbkZpbmlzaGVkKCk7IH19PlRlcnVnPC9idXR0b24+XG4gICAgICAgIDtcbiAgICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yTWVzc2FnZUhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLnN0YXRlLnN1Ym1pdEVycm9yKSB7XG4gICAgICBlcnJvck1lc3NhZ2VIVE1MID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1tZXNzYWdlIG9zYy1lcnJvclwiPlxuICAgICAgICAgIHtzZWxmLnN0YXRlLnN1Ym1pdEVycm9yLm1lc3NhZ2V9XG4gICAgICAgIDwvZGl2Pik7XG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9e3RoaXMuZGl2SWR9IGNsYXNzTmFtZT17YG9zYy1mb3JtJHt0aGlzLnN0YXRlLmJ1c3kgPyAnIG9zYy1idXN5JyA6ICcnfWB9PlxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG5cbiAgICAgICAge2Zvcm1maWVsZHNIVE1MfVxuICAgICAgICB7b3ZlcnZpZXdIVE1MfVxuXG4gICAgICAgIHtlcnJvck1lc3NhZ2VIVE1MfVxuXG4gICAgICAgIDxici8+PGJyLz5cblxuICAgICAgICB7YmFja0J1dHRvbkhUTUx9XG4gICAgICAgIHtzdWJtaXRCdXR0b25IVE1MfVxuXG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgbWVyZ2UgZnJvbSAnbWVyZ2UnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRRdWVzdGlvbkdyb3VwIGZyb20gJy4vcXVlc3Rpb24tZ3JvdXAuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudENob2ljZXMgZnJvbSAnLi9jaG9pY2VzLmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVGb3JtIGZyb20gJy4vZWRpdC9mb3JtLmpzeCc7XG5pbXBvcnQgeyBJbWFnZSBhcyBPcGVuU3RhZENvbXBvbmVudEltYWdlIH0gZnJvbSAnLi4vLi4vaW1hZ2UvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudExpZ2h0Ym94IGZyb20gJy4uLy4uL2xpZ2h0Ym94L2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRQcmV2aW91c05leHRCdXR0b25CbG9jayBmcm9tICcuLi8uLi9wcmV2aW91cy1uZXh0LWJ1dHRvbi1ibG9jay9pbmRleC5qc3gnO1xuLy8gaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlUmVzdWx0IGZyb20gJy4vcmVzdWx0LmpzeCc7XG5cbmltcG9ydCBmZXRjaENob2ljZXNHdWlkZSBmcm9tICcuLi9saWIvZmV0Y2guanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgc2l0ZUlkOiBudWxsLFxuICAgICAgbG9naW5Vcmw6IG51bGwsXG4gICAgICBub09mUXVlc3Rpb25zVG9TaG93OiAxLFxuICAgICAgYXBpOiB7XG4gICAgICAgIHVybDogbnVsbFxuICAgICAgfSxcbiAgICAgIGNob2ljZXM6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBub1ByZWZlcmVuY2VZZXQ6ICdKZSBoZWJ0IG5vZyBnZWVuIGtldXplIGdlbWFha3QnLFxuICAgICAgICAgIHByZWZlcmVuY2U6ICc8Yj5Kb3V3IHZvb3JrZXVyOjwvYj57cHJlZmVycmVkQ2hvaWNlfScsXG4gICAgICAgICAgaW5CZXR3ZWVuOiAnSmUgc3RhYXQgcHJlY2llcyB0dXNzZW4gbWVlcmRlcmUgdm9vcmtldXJlbiBpbidcbiAgICAgICAgfSxcbiAgICAgICAgd2l0aFBlcmNlbnRhZ2U6IGZhbHNlLFxuICAgICAgICBtaW5MYWJlbDogbnVsbCxcbiAgICAgICAgbWF4TGFiZWw6IG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gdG1wIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgaWYgKCAhc2VsZi5jb25maWcuYXNwZWN0UmF0aW8gJiYgc2VsZi5jb25maWcuY2hvaWNlcyAmJiBzZWxmLmNvbmZpZy5jaG9pY2VzLnR5cGUgJiYgc2VsZi5jb25maWcuY2hvaWNlcy50eXBlID09ICdwbGFuZScgKSB7XG4gICAgICBzZWxmLmNvbmZpZy5hc3BlY3RSYXRpbyA9ICcxMHg3J1xuICAgIH1cblxuICAgIGxldCBhbGxWYWx1ZXMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLmdldCgnb3NjLWNob2ljZXMtZ3VpZGUudmFsdWVzJykgfHwge307XG4gICAgbGV0IGFsbFNjb3JlcyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtY2hvaWNlcy1ndWlkZS5zY29yZXMnKSB8fCB7fTtcbiAgICBzZWxmLnN0YXRlID0ge1xuICAgICAgdGl0bGU6ICdMb2FkaW5nLi4uLicsXG4gICAgICBxdWVzdGlvbkdyb3VwczogW10sXG4gICAgICBjaG9pY2VzOiBbXSxcbiAgICAgIGN1cnJlbnRRdWVzdGlvbkdyb3VwSW5kZXg6IHVuZGVmaW5lZCxcbiAgICAgIGN1cnJlbnRRdWVzdGlvbjogdW5kZWZpbmVkLFxuICAgICAgc3RhdHVzOiAnaW5pdCcsXG4gICAgICB2YWx1ZXM6IGFsbFZhbHVlc1sgc2VsZi5jb25maWcuY2hvaWNlc0d1aWRlSWQgXSxcbiAgICAgIHNjb3JlczogYWxsU2NvcmVzWyBzZWxmLmNvbmZpZy5jaG9pY2VzR3VpZGVJZCBdLFxuICAgIH07XG5cbiAgICBzZWxmLmxpdmVVcGRhdGVzID0gc2VsZi5saXZlVXBkYXRlcy5iaW5kKHRoaXMpO1xuICAgIHNlbGYuaGlkZUVkaXRGb3JtID0gc2VsZi5oaWRlRWRpdEZvcm0uYmluZCh0aGlzKTtcbiAgICBcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLmxpdmVVcGRhdGVMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLmxpdmVVcGRhdGVzKGV2ZW50LmRldGFpbCk7XG4gICAgfVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1jaG9pY2VzLWd1aWRlLWxpdmUtdXBkYXRlcycsIHNlbGYubGl2ZVVwZGF0ZUxpc3RlbmVyKTtcblxuICAgIHNlbGYuZmV0Y2hEYXRhKCk7XG5cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1jaG9pY2VzLWd1aWRlLWxpdmUtdXBkYXRlcycsIHNlbGYubGl2ZVVwZGF0ZUxpc3RlbmVyKTtcbiAgfVxuXG4gIGZldGNoRGF0YSgpIHtcblxuICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGZldGNoQ2hvaWNlc0d1aWRlKHsgY29uZmlnOiBzZWxmLmNvbmZpZyB9KVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZShkYXRhLCAoKSA9PiB7XG4gICAgICAgICAgc2VsZi5zdGFydEd1aWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdOaWV0IGdvZWQnKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBzdGFydEd1aWRlKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgc3RhdGUgPSB7fTtcbiAgICBcbiAgICBzdGF0ZS5jdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4ID0gMDtcbiAgICBzZWxmLnNldFN0YXRlKHN0YXRlLCAoKSA9PiB7XG4gICAgICBzZWxmLmxpdmVVcGRhdGVzKCk7XG5cdFx0ICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdvc2MtY2hvaWNlcy1ndWlkZS1pcy1yZWFkeScpO1xuXHRcdCAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgICAgIC8vIFRNUFxuICAgICAgLy8gc2VsZi5zaG93RWRpdEZvcm0oKVxuICAgIH0pO1xuXG4gIH1cblxuICBzaG93RWRpdEZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXR1czogJ2VkaXQnIH0pO1xuICB9XG5cbiAgaGlkZUVkaXRGb3JtKCkge1xuICAgIGxldCBhbGxWYWx1ZXMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLmdldCgnb3NjLWNob2ljZXMtZ3VpZGUudmFsdWVzJykgfHwge307XG4gICAgbGV0IGFsbFNjb3JlcyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtY2hvaWNlcy1ndWlkZS5zY29yZXMnKSB8fCB7fTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRpdGxlOiAnTG9hZGluZy4uLi4nLFxuICAgICAgcXVlc3Rpb25Hcm91cHM6IFtdLFxuICAgICAgY2hvaWNlczogW10sXG4gICAgICBjdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4OiB1bmRlZmluZWQsXG4gICAgICBzdGF0dXM6ICdpbml0JyxcbiAgICAgIHZhbHVlczogYWxsVmFsdWVzWyB0aGlzLmNvbmZpZy5jaG9pY2VzR3VpZGVJZCBdLFxuICAgICAgc2NvcmVzOiBhbGxTY29yZXNbIHRoaXMuY29uZmlnLmNob2ljZXNHdWlkZUlkIF0sXG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmZldGNoRGF0YSgpXG4gICAgfSk7XG4gIH1cblxuICBnb3RvTmV4dFF1ZXN0aW9uKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IHN0YXRlID0ge307XG4gICAgc3RhdGUudmFsdWVzID0gbWVyZ2Uoc2VsZi5zdGF0ZS52YWx1ZXMgfHwge30sIHNlbGYucXVlc3Rpb25Hcm91cEVsZW1lbnQuZ2V0QW5zd2VycygpKTtcbiAgICBzZWxmLnNldFN0YXRlKHN0YXRlKTtcblxuICAgIHNlbGYuY2hvaWNlc0VsZW1lbnQuY2FsY3VsYXRlU2NvcmVzKHN0YXRlLnZhbHVlcyk7XG5cbiAgICBzZWxmLnVzZXJQcmVmZXJlbmNlICYmIHNlbGYudXNlclByZWZlcmVuY2UuY2FsY3VsYXRlU2NvcmVzKCk7ICAgIFxuXG4gICAgbGV0IHsgaXNSZWFkeSwgY3VycmVudFF1ZXN0aW9uIH0gPSBzZWxmLnF1ZXN0aW9uR3JvdXBFbGVtZW50LmdvdG9OZXh0UXVlc3Rpb24oKTtcbiAgICBzZWxmLnNldFN0YXRlKHtjdXJyZW50UXVlc3Rpb259LCAoKSA9PiB7XG4gICAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgICBzZWxmLmdvdG9OZXh0R3JvdXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLDApXG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbiAgZ290b1ByZXZpb3VzUXVlc3Rpb24oKSB7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zdGF0dXMgPT0gJ3Jlc3VsdCcpIHJldHVybiB0aGlzLmdvdG9QcmV2aW91c0dyb3VwKCk7XG5cbiAgICBsZXQgc3RhdGUgPSB7fTtcbiAgICBzdGF0ZS52YWx1ZXMgPSBtZXJnZSh0aGlzLnN0YXRlLnZhbHVlcyB8fCB7fSwgdGhpcy5xdWVzdGlvbkdyb3VwRWxlbWVudC5nZXRBbnN3ZXJzKCkpO1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuXG4gICAgdGhpcy5jaG9pY2VzRWxlbWVudC5jYWxjdWxhdGVTY29yZXMoc3RhdGUudmFsdWVzKTtcblxuICAgIHNlbGYudXNlclByZWZlcmVuY2UgJiYgc2VsZi51c2VyUHJlZmVyZW5jZS5jYWxjdWxhdGVTY29yZXMoKTtcbiAgICBcbiAgICBsZXQgeyBpc0JlZ2lubmluZywgY3VycmVudFF1ZXN0aW9uIH0gPSB0aGlzLnF1ZXN0aW9uR3JvdXBFbGVtZW50LmdvdG9QcmV2aW91c1F1ZXN0aW9uKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Y3VycmVudFF1ZXN0aW9ufSwgKCkgPT4ge1xuICAgICAgaWYgKGlzQmVnaW5uaW5nKSB7XG4gICAgICAgIHRoaXMuZ290b1ByZXZpb3VzR3JvdXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLDApXG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbiAgZ290b05leHRHcm91cCgpIHtcblxuICAgIGxldCBzdGF0ZSA9IHsgLi4udGhpcy5zdGF0ZSB9O1xuICAgIGlmIChzdGF0ZS5jdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4IDwgc3RhdGUucXVlc3Rpb25Hcm91cHMubGVuZ3RoIC0gMSkge1xuICAgICAgc3RhdGUudmFsdWVzID0gbWVyZ2Uoc3RhdGUudmFsdWVzIHx8IHt9LCB0aGlzLnF1ZXN0aW9uR3JvdXBFbGVtZW50LmdldEFuc3dlcnMoKSk7XG4gICAgICBzdGF0ZS5jdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4Kys7XG4gICAgICB0aGlzLnNldFN0YXRlKHN0YXRlLCAoKSA9PiB7XG4gICAgICAgIHRoaXMubGl2ZVVwZGF0ZXMoKTtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsMClcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdvdG9SZXN1bHQoKTtcbiAgICB9XG5cbiAgfVxuXG4gIGdvdG9QcmV2aW91c0dyb3VwKCkge1xuXG4gICAgbGV0IHN0YXRlID0ge307XG4gICAgc3RhdGUuY3VycmVudFF1ZXN0aW9uR3JvdXBJbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudFF1ZXN0aW9uR3JvdXBJbmRleCAtIDE7XG4gICAgaWYgKHRoaXMuc3RhdGUuc3RhdHVzID09ICdyZXN1bHQnKSB7XG4gICAgICBzdGF0ZS5jdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4ID0gdGhpcy5zdGF0ZS5xdWVzdGlvbkdyb3Vwcy5sZW5ndGggLSAxO1xuICAgICAgc3RhdGUuc3RhdHVzID0gJ2FjdGl2ZSc7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsICgpID0+IHtcbiAgICAgIHRoaXMubGl2ZVVwZGF0ZXMoKTtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLDApXG4gICAgfSk7XG4gICAgXG4gIH1cblxuICBnb3RvUmVzdWx0KCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gc2VsZi5jb25maWcuYWZ0ZXJVcmw7XG4gIH1cblxuICBsaXZlVXBkYXRlcygpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGFuc3dlcnMgPSBtZXJnZShzZWxmLnN0YXRlLnZhbHVlcyB8fCB7fSwgc2VsZi5xdWVzdGlvbkdyb3VwRWxlbWVudC5nZXRBbnN3ZXJzKCkpO1xuICAgIGxldCBzY29yZXM7XG4gICAgKCB7c2NvcmVzfSA9IHNlbGYuY2hvaWNlc0VsZW1lbnQuY2FsY3VsYXRlU2NvcmVzKGFuc3dlcnMpICk7XG4gICAgc2VsZi51c2VyUHJlZmVyZW5jZSAmJiBzZWxmLnVzZXJQcmVmZXJlbmNlLmNhbGN1bGF0ZVNjb3JlcyhhbnN3ZXJzKTsgLy94eHhcbiAgICBzZWxmLnNldFN0YXRlKHsgc2NvcmVzLCBmaXJzdEFuc3dlckdpdmVuOiBPYmplY3Qua2V5cyhhbnN3ZXJzKS5sZW5ndGggPiAwIH0sICgpID0+IHtcbiAgICAgIGxldCBhbGxWYWx1ZXMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLmdldCgnb3NjLWNob2ljZXMtZ3VpZGUudmFsdWVzJykgfHwge307XG4gICAgICBhbGxWYWx1ZXNbc2VsZi5jb25maWcuY2hvaWNlc0d1aWRlSWRdID0gYW5zd2VycztcbiAgICAgIE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2Uuc2V0KCdvc2MtY2hvaWNlcy1ndWlkZS52YWx1ZXMnLCBhbGxWYWx1ZXMpO1xuICAgICAgbGV0IGFsbFNjb3JlcyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtY2hvaWNlcy1ndWlkZS5zY29yZXMnKSB8fCB7fTtcbiAgICAgIGFsbFNjb3Jlc1tzZWxmLmNvbmZpZy5jaG9pY2VzR3VpZGVJZF0gPSBzY29yZXM7XG4gICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLnNldCgnb3NjLWNob2ljZXMtZ3VpZGUuc2NvcmVzJywgYWxsU2NvcmVzKTtcbiAgICAgIHNlbGYudXBkYXRlQ2hvaWNlc1RpdGxlKClcbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlQ2hvaWNlc1RpdGxlKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBjaG9pY2VzVGl0bGUgPSBzZWxmLmNvbmZpZy5jaG9pY2VzLnRpdGxlLm5vUHJlZmVyZW5jZVlldDtcbiAgICBsZXQgY2hvaWNlRWxlbWVudCA9IHNlbGYuY2hvaWNlc0VsZW1lbnQgJiYgc2VsZi5jaG9pY2VzRWxlbWVudC5nZXRQcmVmZXJlZENob2ljZSh7fSk7XG4gICAgaWYgKCBzZWxmLnN0YXRlLmZpcnN0QW5zd2VyR2l2ZW4gKSB7XG4gICAgICBpZiAoIGNob2ljZUVsZW1lbnQgKSB7XG4gICAgICAgIGNob2ljZXNUaXRsZSA9IHNlbGYuY29uZmlnLmNob2ljZXMudGl0bGUucHJlZmVyZW5jZS5yZXBsYWNlKCdcXHtwcmVmZXJyZWRDaG9pY2VcXH0nLCBjaG9pY2VFbGVtZW50ICYmIGNob2ljZUVsZW1lbnQuZ2V0VGl0bGUoc2VsZi5zdGF0ZS5zY29yZXNbY2hvaWNlRWxlbWVudC5jb25maWcuZGl2SWRdKSB8fCBjaG9pY2VzVGl0bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hvaWNlc1RpdGxlID0gc2VsZi5jb25maWcuY2hvaWNlcy50aXRsZS5pbkJldHdlZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VsZi5zZXRTdGF0ZSh7IGNob2ljZXNUaXRsZSB9KVxuICB9XG5cbiAgb25DaG9pY2VzQ2xpY2soZSkge1xuICAgIGlmKCB0aGlzLmNob2ljZXNBY2NvcmRlb24uY2xhc3NOYW1lLm1hdGNoKCcgb3NjLWNsb3NlZCcpICkge1xuICAgICAgdGhpcy5jaG9pY2VzQWNjb3JkZW9uLmNsYXNzTmFtZSA9IHRoaXMuY2hvaWNlc0FjY29yZGVvbi5jbGFzc05hbWUucmVwbGFjZSgnIG9zYy1jbG9zZWQnLCAnIG9zYy1vcGVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hvaWNlc0FjY29yZGVvbi5jbGFzc05hbWUgPSB0aGlzLmNob2ljZXNBY2NvcmRlb24uY2xhc3NOYW1lLnJlcGxhY2UoJyBvc2Mtb3BlbicsICcgb3NjLWNsb3NlZCcpO1xuICAgIH1cblxuXHRcdHZhciBldmVudCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ29zYy1jaG9pY2VzLWNsaWNrJywgeyBkZXRhaWw6IHt9IH0pO1xuXHRcdGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIFxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGNob2ljZXMgPSBzZWxmLnN0YXRlLmNob2ljZXM7XG4gICAgbGV0IHF1ZXN0aW9uR3JvdXA7XG4gICAgaWYgKHNlbGYuc3RhdGUuY3VycmVudFF1ZXN0aW9uR3JvdXBJbmRleCA+PSAwKSB7XG4gICAgICBxdWVzdGlvbkdyb3VwID0gc2VsZi5zdGF0ZS5xdWVzdGlvbkdyb3Vwc1sgc2VsZi5zdGF0ZS5jdXJyZW50UXVlc3Rpb25Hcm91cEluZGV4IF07XG4gICAgICBpZiAocXVlc3Rpb25Hcm91cCkge1xuICAgICAgICBxdWVzdGlvbkdyb3VwLnZhbHVlcyA9IHNlbGYuc3RhdGUudmFsdWVzIHx8IHt9O1xuICAgICAgICBpZiAocXVlc3Rpb25Hcm91cCAmJiBxdWVzdGlvbkdyb3VwLmNob2ljZXMpIHtcbiAgICAgICAgICBjaG9pY2VzID0gcXVlc3Rpb25Hcm91cC5jaG9pY2VzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGltYWdlSFRNTCA9IG51bGw7XG4gICAgbGV0IGltYWdlcyA9IHNlbGYuc3RhdGUuaW1hZ2VzO1xuICAgIGlmIChpbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGltYWdlcykpIGltYWdlcyA9IFtpbWFnZXNdO1xuICAgICAgaW1hZ2VIVE1MID0gKFxuICAgICAgICA8T3BlblN0YWRDb21wb25lbnRJbWFnZSBjbGFzc05hbWU9XCJvc2MtdG9wLWltYWdlLXNwYWNlclwiIHdpZHRoPVwiMTAwJVwiIGltYWdlPXtpbWFnZXNbMF19Lz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5zdGF0dXMgPT0gJ2VkaXQnKSB7XG4gICAgICBjb250ZW50SFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlcy1ndWlkZS1jb250ZW50XCI+XG4gICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlRm9ybSBjb25maWc9e3NlbGYuY29uZmlnfSBvbkZpbmlzaGVkPXtzZWxmLmhpZGVFZGl0Rm9ybX0gZGF0YT17eyAuLi5zZWxmLnN0YXRlIH19Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgbGV0IGludHJvSFRNTCA9IG51bGw7XG5cbiAgICAgIGlmIChzZWxmLnN0YXRlLnN0YXR1cyA9PSAnaW5pdCcpIHtcbiAgICAgICAgY29udGVudEhUTUwgPSAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlcy1ndWlkZS1jb250ZW50XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbnRyb1wiPkxhZGVuLi4uPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGxldCBjaG9pY2VzSFRNTCA9IChcbiAgICAgICAgICA8ZGl2IGlkPXsnb3NjLWNob2ljZXMtY29udGFpbmVyLScgKyB0aGlzLmRpdklkfSBjbGFzc05hbWU9e2Bvc2MtY2hvaWNlcy1jb250YWluZXIgb3NjLWFjY29yZGVvbiBvc2MtY2xvc2VkICR7J29zYy10eXBlLScgKyBzZWxmLmNvbmZpZy5jaG9pY2VzLnR5cGV9YH0gcmVmPXtlbCA9PiB7IHNlbGYuY2hvaWNlc0FjY29yZGVvbiA9IGVsOyB9fT5cbiAgICAgICAgICAgIDxkaXYgb25DbGljaz17ZSA9PiBzZWxmLm9uQ2hvaWNlc0NsaWNrKGUpfSBjbGFzc05hbWU9XCJvc2MtYWNjb3JkZW9uLWJ1dHRvblwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogc2VsZi5zdGF0ZS5jaG9pY2VzVGl0bGUgfX0+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1hY2NvcmRlb24tY29udGVudFwiPlxuICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRDaG9pY2VzIGNvbmZpZz17eyAuLi5zZWxmLmNvbmZpZy5jaG9pY2VzIH19IGNob2ljZXM9e1suLi5jaG9pY2VzXX0gc2NvcmVzPXt7Li4uc2VsZi5zdGF0ZS5zY29yZXN9fSBmaXJzdEFuc3dlckdpdmVuPXsgc2VsZi5zdGF0ZS5maXJzdEFuc3dlckdpdmVuID8gdHJ1ZSA6IGZhbHNlIH0gcmVmPXtmdW5jdGlvbihlbCkgeyBzZWxmLmNob2ljZXNFbGVtZW50ID0gZWw7IH19IGtleT0nY2hvaWNlcycvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IHF1ZXN0aW9uR3JvdXBIVE1MID0gKFxuICAgICAgICAgIDxPcGVuU3RhZENvbXBvbmVudFF1ZXN0aW9uR3JvdXAgY29uZmlnPXtzZWxmLmNvbmZpZ30gZGF0YT17IHF1ZXN0aW9uR3JvdXAgfSByZWY9e2Z1bmN0aW9uKGVsKSB7IHNlbGYucXVlc3Rpb25Hcm91cEVsZW1lbnQgPSBlbDsgfX0ga2V5PXtgZ3JvdXAke3NlbGYuc3RhdGUuY3VycmVudFF1ZXN0aW9uc0dyb3VwSW5kZXh9YH0vPlxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBlZGl0QnV0dG9uSFRNTCA9IG51bGw7XG4gICAgICAgIGlmIChzZWxmLmNvbmZpZy51c2VyICYmIHNlbGYuY29uZmlnLnVzZXIucm9sZSAmJiBzZWxmLmNvbmZpZy51c2VyLnJvbGUgPT0gJ2FkbWluJykge1xuICAgICAgICAgIGVkaXRCdXR0b25IVE1MID0gPGJ1dHRvbiBjbGFzc05hbWU9XCJvc2MtZWRpdGJ1dHRvbiBvc2MtZWRpdFwiIG9uQ2xpY2s9e2V2ZW50ID0+IHNlbGYuc2hvd0VkaXRGb3JtKCl9PkJld2VyayBrZXV6ZXdpanplcjwvYnV0dG9uPjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwcmV2aW91c1VybCA9IG51bGw7IGxldCBwcmV2aW91c0FjdGlvbiA9IG51bGw7IGxldCBwcmV2aW91c0xhYmVsID0gbnVsbDtcbiAgICAgICAgaWYgKCBzZWxmLnN0YXRlLmN1cnJlbnRRdWVzdGlvbkdyb3VwSW5kZXggPiAwIHx8IHNlbGYuc3RhdGUuY3VycmVudFF1ZXN0aW9uID4gMCApIHtcbiAgICAgICAgICBwcmV2aW91c0FjdGlvbiA9ICgpID0+IHsgc2VsZi5nb3RvUHJldmlvdXNRdWVzdGlvbigpOyB9XG4gICAgICAgICAgcHJldmlvdXNMYWJlbCA9ICdUZXJ1ZydcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmNvbmZpZy5iZWZvcmVVcmwpIHtcbiAgICAgICAgICBwcmV2aW91c1VybCA9IHNlbGYuY29uZmlnLmJlZm9yZVVybDtcbiAgICAgICAgICBwcmV2aW91c0xhYmVsID0gJ0ludHJvZHVjdGllJ1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5leHRVcmwgPSBudWxsOyBsZXQgbmV4dEFjdGlvbiA9IG51bGw7IGxldCBuZXh0TGFiZWwgPSBudWxsO1xuICAgICAgICBpZiAoc2VsZi5zdGF0ZS5zdGF0dXMgPT0gJ2luaXQnKSB7XG4gICAgICAgICAgbmV4dEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgbmV4dExhYmVsID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0QWN0aW9uID0gKCkgPT4geyBzZWxmLmdvdG9OZXh0UXVlc3Rpb24oKTsgfVxuICAgICAgICAgIG5leHRMYWJlbCA9ICdWb2xnZW5kZSdcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHByZXZpb3VzTmV4dEJ1dHRvbnNIVE1MID0gbnVsbDtcbiAgICAgICAgaWYgKCBwcmV2aW91c0xhYmVsIHx8IG5leHRMYWJlbCApIHtcbiAgICAgICAgICBwcmV2aW91c05leHRCdXR0b25zSFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudFByZXZpb3VzTmV4dEJ1dHRvbkJsb2NrIHByZXZpb3VzQWN0aW9uPXtwcmV2aW91c0FjdGlvbn0gcHJldmlvdXNVcmw9e3ByZXZpb3VzVXJsfSBwcmV2aW91c0xhYmVsPXtwcmV2aW91c0xhYmVsfSBuZXh0QWN0aW9uPXtuZXh0QWN0aW9ufSBuZXh0VXJsPXtuZXh0VXJsfSBuZXh0TGFiZWw9e25leHRMYWJlbH0vPlxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb250ZW50SFRNTCA9ICAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtY2hvaWNlcy1ndWlkZS1jb250ZW50XCI+XG4gICAgICAgICAgICB7ZWRpdEJ1dHRvbkhUTUx9XG4gICAgICAgICAgICB7Y2hvaWNlc0hUTUx9XG4gICAgICAgICAgICB7cXVlc3Rpb25Hcm91cEhUTUx9XG4gICAgICAgICAgICB7cHJldmlvdXNOZXh0QnV0dG9uc0hUTUx9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD17dGhpcy5kaXZJZH0gY2xhc3NOYW1lPVwib3NjLWNob2ljZXMtZ3VpZGVcIj5cbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50TGlnaHRib3gvPlxuICAgICAgICB7aW1hZ2VIVE1MfVxuICAgICAgICB7Y29udGVudEhUTUx9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgRmluZ2VycHJpbnRKUyBmcm9tICdAZmluZ2VycHJpbnRqcy9maW5nZXJwcmludGpzJztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudExpYnMgZnJvbSAnLi4vLi4vbGlicy9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlcyBmcm9tICcuL2Nob2ljZXMuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEZvcm1zIGZyb20gJy4uLy4uL2Zvcm1zL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRQcmV2aW91c05leHRCdXR0b25CbG9jayBmcm9tICcuLi8uLi9wcmV2aW91cy1uZXh0LWJ1dHRvbi1ibG9jay9pbmRleC5qc3gnO1xuaW1wb3J0IGZldGNoQ2hvaWNlc0d1aWRlIGZyb20gJy4uL2xpYi9mZXRjaC5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVSZXN1bHQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICB0eXBlOiAnZGVmYXVsdCcsXG4gICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgcmVxdWlyZUxvZ2luU2V0dGluZ3M6IHtcbiAgICAgICAgICB0aXRsZTogXCJTdGVtY29kZVwiLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk9tIHRlIGt1bm5lbiBzdGVtbWVuIHZ1bCBqZSBkZSBzdGVtY29kZSBpbiBkaWUgamUgcGVyIHBvc3QgaGVidCBvbnR2YW5nZW4uIFdpaiBjb250cm9sZXJlbiBqZSBzdGVtY29kZSBvcCBnZWxkaWdoZWlkLiBBbHMgZGF0IGdlbHVrdCBpcyBrdW4gamUgc3RlbW1lbi5cIixcbiAgICAgICAgICBidXR0b25UZXh0TG9naW46IFwiVnVsIGplIHN0ZW1jb2RlIGluXCIsXG4gICAgICAgICAgYnV0dG9uVGV4dExvZ2dlZEluOiBcIkdlbGRpZ2Ugc3RlbWNvZGVcIixcbiAgICAgICAgICBidXR0b25UZXh0QWxyZWFkeVN1Ym1pdHRlZDogXCJPbmdlbGRpZ2Ugc3RlbWNvZGVcIixcbiAgICAgICAgICBjaGFuZ2VMb2dpbkxpbmtUZXh0OiBcIlZ1bCBlZW4gYW5kZXJlIHN0ZW1jb2RlIGluXCIsXG4gICAgICAgICAgbG9nZ2VkSW5NZXNzYWdlOiBcIkhldCBjb250cm9sZXJlbiB2YW4gamUgc3RlbWNvZGUgaXMgZ2VsdWt0ISBLbGlrIG9wIG9uZGVyc3RhYW5kZSBrbm9wIG9tIGplIGtldXplIGluIHRlIHN0dXJlbi5cIixcbiAgICAgICAgICBub3RZZXRMb2dnZWRJbkVycm9yOiBcIktsaWsgaGllcmJvdmVuIG9tIGplIHN0ZW0gdGUgdmFsaWRlcmVuLlwiLFxuICAgICAgICAgIGFscmVhZHlTdWJtaXR0ZWRNZXNzYWdlOiBcIkRlemUgc3RlbWNvZGUgaXMgYWwgZ2VicnVpa3Qgb20gdGUgc3RlbW1lbi4gRWVuIHN0ZW1jb2RlIGthbiBtYWFyIMOpw6luIGtlZXIgZ2VicnVpa3Qgd29yZGVuLlwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNob2ljZXM6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICBub1ByZWZlcmVuY2VZZXQ6ICdKZSBoZWJ0IG5vZyBnZWVuIGtldXplIGdlbWFha3QnLFxuICAgICAgICAgIHByZWZlcmVuY2U6ICdKb3V3IHZvb3JrZXVyIGlzIHtwcmVmZXJyZWRDaG9pY2V9JyxcbiAgICAgICAgICBpbkJldHdlZW46ICdKZSBzdGFhdCBwcmVjaWVzIHR1c3NlbiBtZWVyZGVyZSB2b29ya2V1cmVuIGluJ1xuICAgICAgICB9LFxuICAgICAgICB3aXRoUGVyY2VudGFnZTogdHJ1ZSxcbiAgICAgICAgbWluTGFiZWw6IG51bGwsXG4gICAgICAgIG1heExhYmVsOiBudWxsLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHRoaXMuY29uZmlnLmxvZ2luVXJsID0gdGhpcy5jb25maWcubG9naW5VcmwgfHwgJy9vYXV0aC9sb2dpbj9yZXR1cm5Ubz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpO1xuICAgIHRoaXMuY29uZmlnLmxvZ291dFVybCA9IHRoaXMuY29uZmlnLmxvZ291dFVybCB8fCAnL29hdXRoL2xvZ291dD9yZXR1cm5Ubz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgbGV0IGFsbFZhbHVlcyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtY2hvaWNlcy1ndWlkZS52YWx1ZXMnKSB8fCB7fTtcbiAgICBhbGxWYWx1ZXMgPSBhbGxWYWx1ZXNbIHRoaXMuY29uZmlnLmNob2ljZXNHdWlkZUlkIF0gfHwge307XG4gICAgbGV0IGFsbFNjb3JlcyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UuZ2V0KCdvc2MtY2hvaWNlcy1ndWlkZS5zY29yZXMnKSB8fCB7fTtcbiAgICBhbGxTY29yZXMgPSBhbGxTY29yZXNbIHRoaXMuY29uZmlnLmNob2ljZXNHdWlkZUlkIF0gfHwge307XG4gICAgbGV0IGFsbEZvcm12YWx1ZXMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLmdldCgnb3NjLWNob2ljZXMtZ3VpZGUuZm9ybXZhbHVlcycpIHx8IHt9O1xuICAgIGFsbEZvcm12YWx1ZXMgPSBhbGxGb3JtdmFsdWVzWyB0aGlzLmNvbmZpZy5jaG9pY2VzR3VpZGVJZCBdIHx8IHt9O1xuICAgIGxldCBzY3JvbGxUb0xvZ2luO1xuXG4gICAgLy8gVE9ETzogYm91dyBkaXQgb20gbmFhciBpZXRzIGRhdCBkZSByZXN1bHRhdGVuIGFsIG9wc2xhYXQgaW4gZGUgQVBJIGVuIGRhbiBuYSBsb2dpbiBiZXZlc3RpZ2RcbiAgICBsZXQgbWF0Y2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLm1hdGNoKC8oXFw/fFxcJilyZXN1bHRkYXRhPShbXlxcP1xcJl0rKS8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbGV0IHJlc3VsdGRhdGEgPSB3aW5kb3cuYXRvYihtYXRjaFsyXSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHRkYXRhID0gSlNPTi5wYXJzZShyZXN1bHRkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgIHNjcm9sbFRvTG9naW4gPSByZXN1bHRkYXRhLnJlc3VsdC5zY3JvbGxUb0xvZ2luO1xuICAgICAgYWxsRm9ybXZhbHVlcyA9IHJlc3VsdGRhdGEuZm9ybVZhbHVlcztcbiAgICAgIGFsbFZhbHVlcyA9IHJlc3VsdGRhdGEucmVzdWx0LmFuc3dlcnM7XG4gICAgICBhbGxTY29yZXMgPSByZXN1bHRkYXRhLnJlc3VsdC5zY29yZXM7XG4gICAgfVxuICAgIFxuICAgIGlmICh0aGlzLmNvbmZpZy5zdWJtaXNzaW9uLnR5cGUgPT0gJ2Zvcm0nKSB7XG4gICAgICB0aGlzLm9uRm9ybUNoYW5nZSA9IHRoaXMub25Gb3JtQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICBsZXQgZm9ybXZhbHVlcyA9IGFsbEZvcm12YWx1ZXMgfHwge307XG4gICAgICB0aGlzLmNvbmZpZy5zdWJtaXNzaW9uLmZvcm0uZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICBsZXQgbmFtZSA9IGZpZWxkLm5hbWUgfHwgZmllbGQudGl0bGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhbGxGb3JtdmFsdWVzW25hbWVdICE9ICd1bmRlZmluZWQnKSB7IGZpZWxkLnZhbHVlID0gYWxsRm9ybXZhbHVlc1tuYW1lXTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIGFuc3dlcnM6IGFsbFZhbHVlcyxcbiAgICAgIHNjb3JlczogYWxsU2NvcmVzLFxuICAgICAgc2Nyb2xsVG9Mb2dpbixcbiAgICAgIHF1ZXN0aW9uR3JvdXBJZDogdGhpcy5jb25maWcucXVlc3Rpb25Hcm91cElkLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIGZldGNoRGF0YSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBmZXRjaENob2ljZXNHdWlkZSh7IGNvbmZpZzogc2VsZi5jb25maWcgfSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIC8vIG11dGlwbGUgcXVlc3Rpb25Hcm91cHMgaXMgbm90IHF1aXRlIHJlYWR5IGFuZCBpcyB0aGVyZWZvcmUgdHVybmVkIG9mIGluIHRoZSBpbnRlcmZhY2VcbiAgICAgICAgbGV0IHF1ZXN0aW9uR3JvdXBJZCA9IGRhdGEucXVlc3Rpb25Hcm91cHMgJiYgZGF0YS5xdWVzdGlvbkdyb3Vwc1swXSAmJiBkYXRhLnF1ZXN0aW9uR3JvdXBzWzBdLmlkO1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgLi4uZGF0YSwgcXVlc3Rpb25Hcm91cElkIH0sICgpID0+IHtcbiAgICAgICAgICAvLyBvdmVycmlkZSBjb25maWcgc2V0dGluZ3NcbiAgICAgICAgICBzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnR5cGUgPSBkYXRhLmNob2ljZXNHdWlkZUNvbmZpZy5zdWJtaXNzaW9uVHlwZSB8fCBzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnR5cGU7XG4gICAgICAgICAgc2VsZi5zdGFydEd1aWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdOaWV0IGdvZWQnKTtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBzdGFydEd1aWRlKCkge1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBzY29yZXMsIHBsYW5lUG9zO1xuXG4gICAgKCB7c2NvcmVzLCBwbGFuZVBvc30gPSBzZWxmLmNob2ljZXNFbGVtZW50ICYmIHNlbGYuY2hvaWNlc0VsZW1lbnQuY2FsY3VsYXRlU2NvcmVzKHNlbGYuc3RhdGUuYW5zd2VycykgKTtcblxuICAgIGxldCBjaG9pY2VzVGl0bGUgPSAnJztcbiAgICBsZXQgbmFtZTtcbiAgICBsZXQgcHJlZmVycmVkQ2hvaWNlSWQgPSAtMTtcbiAgICBpZiAoIHNlbGYuY2hvaWNlc0VsZW1lbnQgKSB7XG5cbiAgICAgIGxldCBjaG9pY2VFbGVtZW50ID0gc2VsZi5jaG9pY2VzRWxlbWVudC5nZXRQcmVmZXJlZENob2ljZSh7c2NvcmVzLCBwbGFuZVBvc30pO1xuICAgICAgaWYgKCBjaG9pY2VFbGVtZW50ICkge1xuICAgICAgICBjaG9pY2VzVGl0bGUgPSBzZWxmLmNvbmZpZy5jaG9pY2VzLnRpdGxlLnByZWZlcmVuY2UucmVwbGFjZSgnXFx7cHJlZmVycmVkQ2hvaWNlXFx9JywgY2hvaWNlRWxlbWVudCAmJiBjaG9pY2VFbGVtZW50LmdldFRpdGxlKHNlbGYuc3RhdGUuc2NvcmVzW2Nob2ljZUVsZW1lbnQuY29uZmlnLmRpdklkXSkgfHwgY2hvaWNlc1RpdGxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNob2ljZXNUaXRsZSA9IHNlbGYuY29uZmlnLmNob2ljZXMudGl0bGUuaW5CZXR3ZWVuO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzZWxmLnNldFN0YXRlKHsgdGl0bGU6IGNob2ljZXNUaXRsZSB9KVxuXG5cdFx0ICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCdvc2MtY2hvaWNlcy1ndWlkZS1yZXN1bHQtaXMtcmVhZHknLCB7XG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIHByZWZlcnJlZENob2ljZToge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHRpdGxlOiBjaG9pY2VzVGl0bGUsXG4gICAgICAgICAgICBwcmVmZXJyZWRDaG9pY2VJZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYW5zd2Vyczogc2VsZi5zdGF0ZS5hbnN3ZXJzLFxuICAgICAgICAgIHNjb3Jlczogc2VsZi5zdGF0ZS5zY29yZXMsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXHRcdCAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICBcbiAgICAgIGlmIChzZWxmLnN0YXRlLnNjcm9sbFRvTG9naW4pIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3NjLXJlcXVpcmUtbG9naW4nKTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe2JlaGF2aW9yOiAnc21vb3RoJ30pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5jb25maWcuc3VibWlzc2lvbi50eXBlID09ICdhdXRvJykge1xuICAgICAgICBzZWxmLnN1Ym1pdFJlc3VsdCgpXG4gICAgICB9XG5cbiAgICB9XG4gICAgXG4gIH1cblxuICBzdWJtaXRSZXN1bHQoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZm9ybVZhbHVlcztcblxuICAgIGxldCBlcnJvclN0YXRlMTtcbiAgICBsZXQgcmVxdWlyZUxvZ2luID0gISEoc2VsZi5zdGF0ZS5jaG9pY2VzR3VpZGVDb25maWcgJiYgc2VsZi5zdGF0ZS5jaG9pY2VzR3VpZGVDb25maWcucmVxdWlyZWRVc2VyUm9sZSk7XG4gICAgaWYgKCByZXF1aXJlTG9naW4gJiYgIXNlbGYuaXNVc2VyTG9nZ2VkSW4oKSApIHtcbiAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9zYy1yZXF1aXJlLWxvZ2luJyk7XG4gICAgICBpZiAoZWxlbWVudCkgZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnfSk7XG4gICAgICBlcnJvclN0YXRlMSA9IHtcbiAgICAgICAgc3VibWlzc2lvbkVycm9yOiB7XG4gICAgICAgICAgbWVzc2FnZTogc2VsZi5jb25maWcuc3VibWlzc2lvbi5yZXF1aXJlTG9naW5TZXR0aW5ncy5ub3RZZXRMb2dnZWRJbkVycm9yLFxuICAgICAgICAgIHR5cGU6ICd1bmtub3duJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBlcnJvclN0YXRlMjtcbiAgICBpZiAoc2VsZi5jb25maWcuc3VibWlzc2lvbi50eXBlID09ICdmb3JtJykge1xuICAgICAgZm9ybVZhbHVlcyA9IHNlbGYuZm9ybS5nZXRWYWx1ZXMoKTtcbiAgICAgIGxldCBpc1ZhbGlkID0gc2VsZi5mb3JtLnZhbGlkYXRlKHsgc2hvd0Vycm9yczogdHJ1ZSwgc2Nyb2xsVG86IHRydWUgfSk7XG4gICAgICBpZiAoIWlzVmFsaWQpIGVycm9yU3RhdGUyID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JTdGF0ZTEgfHwgZXJyb3JTdGF0ZTIpIHtcbiAgICAgIHNlbGYuc2V0U3RhdGUoZXJyb3JTdGF0ZTEsICgpID0+IHtcbiAgICAgICAgLy8gVE9ETzogZGUgZXJyb3Igd29yZHQgb3ZlcnNjaHJldmVuOyBkYXQgbW9ldCBub2cgb3BnZWxvc3QuIFRvdCBkYW4gc3RhYXQgZGl0IGhpZXIgZXh0cmFcbiAgICAgICAgc2VsZi5mb3JtLnZhbGlkYXRlKHsgc2hvd0Vycm9yczogdHJ1ZSwgc2Nyb2xsVG86IHRydWUgfSk7XG4gICAgICB9KVxuICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgXG4gICAgRmluZ2VycHJpbnRKUy5sb2FkKCkudGhlbihmcCA9PiB7XG4gICAgICBmcC5nZXQoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnN0IHZpc2l0b3JJZCA9IHJlc3VsdC52aXNpdG9ySWQ7XG5cbiAgICAgICAgbGV0IHVybCA9IGAke3NlbGYuY29uZmlnLmFwaSAmJiBzZWxmLmNvbmZpZy5hcGkudXJsIH0vYXBpL3NpdGUvJHsgIHNlbGYuY29uZmlnLnNpdGVJZCAgfS9jaG9pY2VzZ3VpZGUvJHsgIHNlbGYuY29uZmlnLmNob2ljZXNHdWlkZUlkICB9L3Jlc3VsdGA7XG4gICAgICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcbiAgICAgICAgbGV0IGJvZHkgPSB7XG4gICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICBhbnN3ZXJzOiBzZWxmLnN0YXRlLmFuc3dlcnMsXG4gICAgICAgICAgICBzY29yZXM6IHNlbGYuc3RhdGUuc2NvcmVzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXh0cmFEYXRhOiBmb3JtVmFsdWVzLFxuICAgICAgICAgIHVzZXJGaW5nZXJwcmludDogdmlzaXRvcklkLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZldGNoKHVybCwge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnR5cGUgPT0gJ2Zvcm0nKSB7XG4gICAgICAgICAgICAgIE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2UucmVtb3ZlKCdvc2MtY2hvaWNlcy1ndWlkZS52YWx1ZXMnKTtcbiAgICAgICAgICAgICAgT3BlblN0YWRDb21wb25lbnRMaWJzLmxvY2FsU3RvcmFnZS5yZW1vdmUoJ29zYy1jaG9pY2VzLWd1aWRlLnNjb3JlcycpO1xuICAgICAgICAgICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLnJlbW92ZSgnb3NjLWNob2ljZXMtZ3VpZGUuZm9ybXZhbHVlcycpO1xuICAgICAgICAgICAgICBpZiAocmVxdWlyZUxvZ2luKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYubG9nb3V0KHsgYWZ0ZXJVcmw6IHNlbGYuY29uZmlnLmFmdGVyVXJsIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBzZWxmLmNvbmZpZy5hZnRlclVybFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvci50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMgPSBKU09OLnBhcnNlKG1lc3NhZ2VzKVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gKCBBcnJheS5pc0FycmF5KG1lc3NhZ2VzKSAmJiBtZXNzYWdlc1swXSAmJiBtZXNzYWdlc1swXS5tZXNzYWdlIHx8IG1lc3NhZ2VzWzBdICkgfHwgKCBtZXNzYWdlcy5tZXNzYWdlIHx8IG1lc3NhZ2VzICk7XG4gICAgICAgICAgICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHN1Ym1pc3Npb25FcnJvcjoge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgdHlwZTogbWVzc2FnZSA9PSAnSmUgaGVidCBqZSBtZW5pbmcgYWwgaW5nZXN0dXVyZCcgPyAnYWxyZWFkeVN1Ym1pdHRlZCcgOiAndW5rbm93bidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIGlzVXNlckxvZ2dlZEluKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy51c2VyICYmIHRoaXMuY29uZmlnLnVzZXIucm9sZSAmJiB0aGlzLmNvbmZpZy51c2VyLnJvbGUgIT0gJ2Fub255bW91cyc7XG4gIH1cblxuICBnb3RvTG9naW5VcmwoKSB7XG5cbiAgICBsZXQgdXJsID0gdGhpcy5jb25maWcubG9naW5Vcmw7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICBzY3JvbGxUb0xvZ2luOiB0cnVlLFxuICAgICAgZm9ybVZhbHVlczogdGhpcy5mb3JtLmdldFZhbHVlcygpLFxuICAgICAgcmVzdWx0OiB7XG4gICAgICAgIGFuc3dlcnM6IHRoaXMuc3RhdGUuYW5zd2VycyxcbiAgICAgICAgc2NvcmVzOiB0aGlzLnN0YXRlLnNjb3JlcyxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IG1hdGNoID0gdXJsLm1hdGNoKC9yZXR1cm5Ubz0oW15cXD9cXCZdKykvKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGxldCByZXR1cm5UbyA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSk7XG4gICAgICByZXR1cm5UbyArPSByZXR1cm5Uby5tYXRjaCgvXFw/LykgPyAnJicgOiAnPyc7XG4gICAgICByZXR1cm5UbyArPSAncmVzdWx0ZGF0YT0nICsgd2luZG93LmJ0b2EoIEpTT04uc3RyaW5naWZ5KGRhdGEpLnJlcGxhY2UoLz0rJC8sICcnKSApO1xuICAgICAgcmV0dXJuVG8gPSBlbmNvZGVVUklDb21wb25lbnQocmV0dXJuVG8pO1xuICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL3JldHVyblRvPVteXFw/XFwmXSsvLCAncmV0dXJuVG89JyArIHJldHVyblRvKVxuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgKz0gdXJsLm1hdGNoKC9cXD8vKSA/ICcmJyA6ICc/JztcbiAgICAgIHVybCArPSAncmVzdWx0ZGF0YT0nICsgd2luZG93LmJ0b2EoIEpTT04uc3RyaW5naWZ5KGRhdGEpICkucmVwbGFjZSgvPSskLywgJycpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG5cbiAgfVxuICBcbiAgbG9nb3V0KHsgYWZ0ZXJVcmwgPSBzZWxmLmNvbmZpZy5hZnRlclVybCB9KSB7XG4gICAgbGV0IGxvZ291dFVybCA9IHNlbGYuY29uZmlnLmxvZ291dFVybCB8fCAnL29hdXRoL2xvZ291dCc7XG4gICAgXG4gICAgZmV0Y2gobG9nb3V0VXJsLCB7XG5cdCAgICBoZWFkZXJzOiB7IFwiQ29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG5cdCAgICBtZXRob2Q6ICdHRVQnLFxuICAgIH0pXG5cdCAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBhZnRlclVybDtcblx0ICAgIH0pXG5cdCAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IGFmdGVyVXJsO1xuXHQgICAgfSk7XG4gIH1cbiAgXG4gIG9uRm9ybUNoYW5nZSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBhbGxGb3JtdmFsdWVzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmxvY2FsU3RvcmFnZS5nZXQoJ29zYy1jaG9pY2VzLWd1aWRlLmZvcm12YWx1ZXMnKSB8fCB7fTtcbiAgICBhbGxGb3JtdmFsdWVzW3NlbGYuY29uZmlnLmNob2ljZXNHdWlkZUlkXSA9IHNlbGYuZm9ybS5nZXRWYWx1ZXMoKTtcbiAgICBPcGVuU3RhZENvbXBvbmVudExpYnMubG9jYWxTdG9yYWdlLnNldCgnb3NjLWNob2ljZXMtZ3VpZGUuZm9ybXZhbHVlcycsIGFsbEZvcm12YWx1ZXMpO1xuXG4gICAgc2VsZi5zZXRTdGF0ZSh7IHJhbmRvbTogTWF0aC5yYW5kb20oKSB9KSAvLyBmb3JjZSBzdGF0ZSB1cGRhdGVcblxuICB9XG4gIFxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRhdGEgPSBzZWxmLnByb3BzICYmIHNlbGYucHJvcHMuZGF0YSB8fCB7fTtcblxuICAgIGxldCBjaG9pY2VzID0gc2VsZi5zdGF0ZS5jaG9pY2VzO1xuICAgIGxldCBxdWVzdGlvbkdyb3VwO1xuICAgIGlmIChzZWxmLnN0YXRlLnF1ZXN0aW9uR3JvdXBzKSB7XG4gICAgICBxdWVzdGlvbkdyb3VwID0gc2VsZi5zdGF0ZS5xdWVzdGlvbkdyb3Vwcy5maW5kKCBncm91cCA9PiBncm91cC5pZCA9PSBzZWxmLnN0YXRlLnF1ZXN0aW9uR3JvdXBJZCApO1xuICAgICAgaWYgKHF1ZXN0aW9uR3JvdXApIHtcbiAgICAgICAgcXVlc3Rpb25Hcm91cC52YWx1ZXMgPSBzZWxmLnN0YXRlLnZhbHVlcyB8fCB7fTtcbiAgICAgICAgaWYgKHF1ZXN0aW9uR3JvdXAgJiYgcXVlc3Rpb25Hcm91cC5jaG9pY2VzKSB7XG4gICAgICAgICAgY2hvaWNlcyA9IHF1ZXN0aW9uR3JvdXAuY2hvaWNlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXF1aXJlTG9naW4gPSAhIShzZWxmLnN0YXRlLmNob2ljZXNHdWlkZUNvbmZpZyAmJiBzZWxmLnN0YXRlLmNob2ljZXNHdWlkZUNvbmZpZy5yZXF1aXJlZFVzZXJSb2xlKTtcblxuICAgIGxldCBjaG9pY2VzSFRNTCA9IG51bGw7XG4gICAgaWYgKGNob2ljZXMpIHtcbiAgICAgIGNob2ljZXNIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlcyBjb25maWc9e3sgLi4uc2VsZi5jb25maWcuY2hvaWNlcyB9fSBzY29yZXM9e3suLi5zZWxmLnN0YXRlLnNjb3Jlc319IGNob2ljZXM9e1suLi5jaG9pY2VzXX0gZmlyc3RBbnN3ZXJHaXZlbj17dHJ1ZX0gcmVmPXtmdW5jdGlvbihlbCkgeyBzZWxmLmNob2ljZXNFbGVtZW50ID0gZWw7IH19IGtleT0nY2hvaWNlcycvPjtcbiAgICB9XG5cbiAgICBsZXQgbW9yZUluZm9IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcubW9yZUluZm9VcmwgJiYgc2VsZi5jb25maWcubW9yZUluZm9MYWJlbCkge1xuICAgICAgbW9yZUluZm9IVE1MID1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbW9yZS1pbmZvLWxpbmtcIj5cbiAgICAgICAgICA8YSBocmVmPXtzZWxmLmNvbmZpZy5tb3JlSW5mb1VybH0+e3NlbGYuY29uZmlnLm1vcmVJbmZvTGFiZWx9PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG5cbiAgICBsZXQgZm9ybUhUTUwgPSBudWxsO1xuICAgIGxldCByZXF1aXJlTG9naW5IVE1MID0gbnVsbDtcbiAgICBsZXQgcHJldmlvdXNOZXh0QnV0dG9uc0hUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnR5cGUgPT0gJ2Zvcm0nKSB7XG4gICAgICBmb3JtSFRNTCA9IChcbiAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50Rm9ybXMuRm9ybSBjb25maWc9eyBzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLmZvcm0gfSBvbkNoYW5nZT17c2VsZi5vbkZvcm1DaGFuZ2V9IHJlZj17ZnVuY3Rpb24oZWwpIHsgc2VsZi5mb3JtID0gZWw7IH19Lz5cbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXF1aXJlTG9naW4pIHtcbiAgICAgICAgaWYgKHNlbGYuaXNVc2VyTG9nZ2VkSW4oKSkge1xuICAgICAgICAgIGxldCBjbGFzc05hbWUgPSAnb3NjLXN1Y2Nlc3MnO1xuICAgICAgICAgIGxldCBidXR0b25UZXh0ID0gc2VsZi5jb25maWcuc3VibWlzc2lvbi5yZXF1aXJlTG9naW5TZXR0aW5ncy5idXR0b25UZXh0TG9nZ2VkSW47XG4gICAgICAgICAgbGV0IG1lc3NhZ2UgPSBzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnJlcXVpcmVMb2dpblNldHRpbmdzLmxvZ2dlZEluTWVzc2FnZTtcbiAgICAgICAgICBpZiAoc2VsZi5zdGF0ZS5zdWJtaXNzaW9uRXJyb3IpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdvc2MtZXJyb3InO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuc3VibWlzc2lvbkVycm9yLnR5cGUgPT0gJ2FscmVhZHlTdWJtaXR0ZWQnKSB7XG4gICAgICAgICAgICAgIGJ1dHRvblRleHQgPSBzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnJlcXVpcmVMb2dpblNldHRpbmdzLmJ1dHRvblRleHRBbHJlYWR5U3VibWl0dGVkO1xuICAgICAgICAgICAgICBtZXNzYWdlICA9IHNlbGYuY29uZmlnLnN1Ym1pc3Npb24ucmVxdWlyZUxvZ2luU2V0dGluZ3MuYWxyZWFkeVN1Ym1pdHRlZE1lc3NhZ2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gc2VsZi5zdGF0ZS5zdWJtaXNzaW9uRXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWlyZUxvZ2luSFRNTCA9IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLXJlcXVpcmUtbG9naW4gb3NjLWxvZ2dlZC1pbiBvc2MtbG9nZ2VkLWluICR7Y2xhc3NOYW1lfWB9PlxuICAgICAgICAgICAgICA8aDI+e3NlbGYuY29uZmlnLnN1Ym1pc3Npb24ucmVxdWlyZUxvZ2luU2V0dGluZ3MudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtZ3JheS1ibG9ja1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17ZSA9PiBzZWxmLmdvdG9Mb2dpblVybCgpfSBjbGFzc05hbWU9XCJvc2MtYnV0dG9uIG9zYy1idXR0b24td2hpdGVcIj57YnV0dG9uVGV4dH08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoYW5nZS1sb2dpbi1saW5rLXRleHRcIj5cbiAgICAgICAgICAgICAgICAgIDxhIG9uQ2xpY2s9e2UgPT4gc2VsZi5nb3RvTG9naW5VcmwoKX0+e3NlbGYuY29uZmlnLnN1Ym1pc3Npb24ucmVxdWlyZUxvZ2luU2V0dGluZ3MuY2hhbmdlTG9naW5MaW5rVGV4dH08L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgICAge21lc3NhZ2V9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBjbGFzc05hbWUgPSAnJztcbiAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgIGlmIChzZWxmLnN0YXRlLnN1Ym1pc3Npb25FcnJvcikge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gJ29zYy1lcnJvcic7XG4gICAgICAgICAgICBtZXNzYWdlID0gc2VsZi5zdGF0ZS5zdWJtaXNzaW9uRXJyb3IubWVzc2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWlyZUxvZ2luSFRNTCA9IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLXJlcXVpcmUtbG9naW4gb3NjLW5vdC15ZXQtbG9nZ2VkLWluICR7Y2xhc3NOYW1lfWB9PlxuICAgICAgICAgICAgICA8aDI+e3NlbGYuY29uZmlnLnN1Ym1pc3Npb24ucmVxdWlyZUxvZ2luU2V0dGluZ3MudGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtZ3JheS1ibG9ja1wiPlxuICAgICAgICAgICAgICAgIHtzZWxmLmNvbmZpZy5zdWJtaXNzaW9uLnJlcXVpcmVMb2dpblNldHRpbmdzLmRlc2NyaXB0aW9ufTxici8+PGJyLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2UgPT4gc2VsZi5nb3RvTG9naW5VcmwoKX0gY2xhc3NOYW1lPVwib3NjLWJ1dHRvbiBvc2MtYnV0dG9uLXdoaXRlXCI+e3NlbGYuY29uZmlnLnN1Ym1pc3Npb24ucmVxdWlyZUxvZ2luU2V0dGluZ3MuYnV0dG9uVGV4dExvZ2lufTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLW1lc3NhZ2VcIj5cbiAgICAgICAgICAgICAgICAgIHttZXNzYWdlfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgcHJldmlvdXNVcmwgPSBudWxsOyBsZXQgcHJldmlvdXNBY3Rpb24gPSBudWxsOyBsZXQgcHJldmlvdXNMYWJlbCA9IG51bGw7XG5cbiAgICAgIGlmIChzZWxmLmNvbmZpZy5iZWZvcmVVcmwpIHtcbiAgICAgICAgcHJldmlvdXNVcmwgPSBzZWxmLmNvbmZpZy5iZWZvcmVVcmw7XG4gICAgICAgIHByZXZpb3VzTGFiZWwgPSBzZWxmLmNvbmZpZy5iZWZvcmVMYWJlbCB8fCAnVm9yaWdlJ1xuICAgICAgfVxuXG4gICAgICBsZXQgbmV4dFVybCA9IG51bGw7XG4gICAgICBsZXQgbmV4dEFjdGlvbiA9ICgpID0+IHsgc2VsZi5zdWJtaXRSZXN1bHQoKTsgfVxuICAgICAgbGV0IG5leHRMYWJlbCA9IHNlbGYuY29uZmlnLmFmdGVyTGFiZWwgfHwgJ09wc2xhYW4nXG5cbiAgICAgIGxldCBuZXh0SXNEaXNhYmxlZCA9ICggc2VsZi5jb25maWcuc3VibWlzc2lvbi50eXBlID09ICdmb3JtJyAmJiBzZWxmLmZvcm0gJiYgIXNlbGYuZm9ybS52YWxpZGF0ZSh7fSkgKSB8fCAoIHJlcXVpcmVMb2dpbiAmJiAhc2VsZi5pc1VzZXJMb2dnZWRJbigpICk7XG4gICAgICBcbiAgICAgIGlmICggcHJldmlvdXNMYWJlbCB8fCBuZXh0TGFiZWwgKSB7XG4gICAgICAgIHByZXZpb3VzTmV4dEJ1dHRvbnNIVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50UHJldmlvdXNOZXh0QnV0dG9uQmxvY2sgcHJldmlvdXNBY3Rpb249e3ByZXZpb3VzQWN0aW9ufSBwcmV2aW91c1VybD17cHJldmlvdXNVcmx9IHByZXZpb3VzTGFiZWw9e3ByZXZpb3VzTGFiZWx9IG5leHRBY3Rpb249e25leHRBY3Rpb259IG5leHRVcmw9e25leHRVcmx9IG5leHRMYWJlbD17bmV4dExhYmVsfSBuZXh0SXNEaXNhYmxlZD17bmV4dElzRGlzYWJsZWR9Lz5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIGxldCBlcnJvck1lc3NhZ2VIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5zdWJtaXNzaW9uRXJyb3IgJiYgIXJlcXVpcmVMb2dpbikge1xuICAgICAgZXJyb3JNZXNzYWdlSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtbWVzc2FnZSBvc2MtZXJyb3JcIj5cbiAgICAgICAgICB7c2VsZi5zdGF0ZS5zdWJtaXNzaW9uRXJyb3IubWVzc2FnZX1cbiAgICAgICAgPC9kaXY+KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWNob2ljZXMtZ3VpZGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcmVzdWx0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcmVzdWx0LWNvbnRlbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3NjLWNob2ljZXMtY29udGFpbmVyICR7J29zYy10eXBlLScgKyBzZWxmLmNvbmZpZy5jaG9pY2VzLnR5cGV9YH0+XG4gICAgICAgICAgICAgIDxoMyBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHNlbGYuc3RhdGUudGl0bGUgfX0+PC9oMz5cbiAgICAgICAgICAgICAge2Nob2ljZXNIVE1MfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7bW9yZUluZm9IVE1MfVxuICAgICAgICAgICAge2Zvcm1IVE1MfVxuICAgICAgICAgICAge3JlcXVpcmVMb2dpbkhUTUx9XG4gICAgICAgICAgICB7ZXJyb3JNZXNzYWdlSFRNTH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAge3ByZXZpb3VzTmV4dEJ1dHRvbnNIVE1MfVxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIi8vIHBvbHlmaWxsc1xuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuaW1wb3J0ICdjb3JlLWpzL2VzL2FycmF5L2ZpbmQnO1xuaW1wb3J0ICdjdXN0b20tZXZlbnQtcG9seWZpbGwnO1xuXG4vLyByZWFjdFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG4vLyBpbXBvcnQgY3NzIHRvIG1ha2Ugc3VyZSBpdCBpcyBnZW5lcmF0ZWQgaW4gdGhlIHJlc3VsdFxuaW1wb3J0ICcuL2Nzcy9kZWZhdWx0Lmxlc3MnO1xuXG4vLyB0aGUgbW9kdWxlXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGUgZnJvbSAnLi9jb21wb25lbnQvY2hvaWNlcy1ndWlkZS5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlUmVzdWx0IGZyb20gJy4vY29tcG9uZW50L2Nob2ljZXMtZ3VpZGUtcmVzdWx0LmpzeCc7XG5cbi8vIHJlbmRlciBlbGVtZW50c1xuT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGUucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlIGF0dHJpYnV0ZXM9e2F0dHJpYnV0ZXN9IGNvbmZpZz17Y29uZmlnfS8+LCBlbGVtKVxufVxuT3BlblN0YWRDb21wb25lbnRDaG9pY2VzR3VpZGVSZXN1bHQucmVuZGVyRWxlbWVudCA9IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG5cdFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlUmVzdWx0IGF0dHJpYnV0ZXM9e2F0dHJpYnV0ZXN9IGNvbmZpZz17Y29uZmlnfS8+LCBlbGVtKVxufVxuXG5leHBvcnQge1xuICBPcGVuU3RhZENvbXBvbmVudENob2ljZXNHdWlkZSBhcyBkZWZhdWx0LFxuICBPcGVuU3RhZENvbXBvbmVudENob2ljZXNHdWlkZSBhcyBDaG9pY2VzR3VpZGUsXG4gIE9wZW5TdGFkQ29tcG9uZW50Q2hvaWNlc0d1aWRlUmVzdWx0IGFzIENob2ljZXNHdWlkZVJlc3VsdCxcbn07XG5cbiIsIi8qKlxuICogRmluZ2VycHJpbnRKUyB2My4wLjUgLSBDb3B5cmlnaHQgKGMpIEZpbmdlcnByaW50SlMsIEluYywgMjAyMSAoaHR0cHM6Ly9maW5nZXJwcmludGpzLmNvbSlcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKSBsaWNlbnNlLlxuICpcbiAqIFRoaXMgc29mdHdhcmUgY29udGFpbnMgY29kZSBmcm9tIG9wZW4tc291cmNlIHByb2plY3RzOlxuICogTXVybXVySGFzaDMgYnkgS2FyYW4gTHlvbnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJhbmx5b25zL211cm11ckhhc2gzLmpzKVxuICovXG5cbmltcG9ydCB7IF9fYXNzaWduLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSAndHNsaWInO1xuXG4vKlxuICogVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va2FyYW5seW9ucy9tdXJtdXJIYXNoMy5qcy9ibG9iL2EzM2QwNzIzMTI3ZTJlNTQxNTA1NmM0NTVmOGFlZDI0NTFhY2UyMDgvbXVybXVySGFzaDMuanNcbiAqL1xuLy9cbi8vIEdpdmVuIHR3byA2NGJpdCBpbnRzIChhcyBhbiBhcnJheSBvZiB0d28gMzJiaXQgaW50cykgcmV0dXJucyB0aGUgdHdvXG4vLyBhZGRlZCB0b2dldGhlciBhcyBhIDY0Yml0IGludCAoYXMgYW4gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpLlxuLy9cbmZ1bmN0aW9uIHg2NEFkZChtLCBuKSB7XG4gICAgbSA9IFttWzBdID4+PiAxNiwgbVswXSAmIDB4ZmZmZiwgbVsxXSA+Pj4gMTYsIG1bMV0gJiAweGZmZmZdO1xuICAgIG4gPSBbblswXSA+Pj4gMTYsIG5bMF0gJiAweGZmZmYsIG5bMV0gPj4+IDE2LCBuWzFdICYgMHhmZmZmXTtcbiAgICB2YXIgbyA9IFswLCAwLCAwLCAwXTtcbiAgICBvWzNdICs9IG1bM10gKyBuWzNdO1xuICAgIG9bMl0gKz0gb1szXSA+Pj4gMTY7XG4gICAgb1szXSAmPSAweGZmZmY7XG4gICAgb1syXSArPSBtWzJdICsgblsyXTtcbiAgICBvWzFdICs9IG9bMl0gPj4+IDE2O1xuICAgIG9bMl0gJj0gMHhmZmZmO1xuICAgIG9bMV0gKz0gbVsxXSArIG5bMV07XG4gICAgb1swXSArPSBvWzFdID4+PiAxNjtcbiAgICBvWzFdICY9IDB4ZmZmZjtcbiAgICBvWzBdICs9IG1bMF0gKyBuWzBdO1xuICAgIG9bMF0gJj0gMHhmZmZmO1xuICAgIHJldHVybiBbKG9bMF0gPDwgMTYpIHwgb1sxXSwgKG9bMl0gPDwgMTYpIHwgb1szXV07XG59XG4vL1xuLy8gR2l2ZW4gdHdvIDY0Yml0IGludHMgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSByZXR1cm5zIHRoZSB0d29cbi8vIG11bHRpcGxpZWQgdG9nZXRoZXIgYXMgYSA2NGJpdCBpbnQgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKS5cbi8vXG5mdW5jdGlvbiB4NjRNdWx0aXBseShtLCBuKSB7XG4gICAgbSA9IFttWzBdID4+PiAxNiwgbVswXSAmIDB4ZmZmZiwgbVsxXSA+Pj4gMTYsIG1bMV0gJiAweGZmZmZdO1xuICAgIG4gPSBbblswXSA+Pj4gMTYsIG5bMF0gJiAweGZmZmYsIG5bMV0gPj4+IDE2LCBuWzFdICYgMHhmZmZmXTtcbiAgICB2YXIgbyA9IFswLCAwLCAwLCAwXTtcbiAgICBvWzNdICs9IG1bM10gKiBuWzNdO1xuICAgIG9bMl0gKz0gb1szXSA+Pj4gMTY7XG4gICAgb1szXSAmPSAweGZmZmY7XG4gICAgb1syXSArPSBtWzJdICogblszXTtcbiAgICBvWzFdICs9IG9bMl0gPj4+IDE2O1xuICAgIG9bMl0gJj0gMHhmZmZmO1xuICAgIG9bMl0gKz0gbVszXSAqIG5bMl07XG4gICAgb1sxXSArPSBvWzJdID4+PiAxNjtcbiAgICBvWzJdICY9IDB4ZmZmZjtcbiAgICBvWzFdICs9IG1bMV0gKiBuWzNdO1xuICAgIG9bMF0gKz0gb1sxXSA+Pj4gMTY7XG4gICAgb1sxXSAmPSAweGZmZmY7XG4gICAgb1sxXSArPSBtWzJdICogblsyXTtcbiAgICBvWzBdICs9IG9bMV0gPj4+IDE2O1xuICAgIG9bMV0gJj0gMHhmZmZmO1xuICAgIG9bMV0gKz0gbVszXSAqIG5bMV07XG4gICAgb1swXSArPSBvWzFdID4+PiAxNjtcbiAgICBvWzFdICY9IDB4ZmZmZjtcbiAgICBvWzBdICs9IG1bMF0gKiBuWzNdICsgbVsxXSAqIG5bMl0gKyBtWzJdICogblsxXSArIG1bM10gKiBuWzBdO1xuICAgIG9bMF0gJj0gMHhmZmZmO1xuICAgIHJldHVybiBbKG9bMF0gPDwgMTYpIHwgb1sxXSwgKG9bMl0gPDwgMTYpIHwgb1szXV07XG59XG4vL1xuLy8gR2l2ZW4gYSA2NGJpdCBpbnQgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSBhbmQgYW4gaW50XG4vLyByZXByZXNlbnRpbmcgYSBudW1iZXIgb2YgYml0IHBvc2l0aW9ucywgcmV0dXJucyB0aGUgNjRiaXQgaW50IChhcyBhblxuLy8gYXJyYXkgb2YgdHdvIDMyYml0IGludHMpIHJvdGF0ZWQgbGVmdCBieSB0aGF0IG51bWJlciBvZiBwb3NpdGlvbnMuXG4vL1xuZnVuY3Rpb24geDY0Um90bChtLCBuKSB7XG4gICAgbiAlPSA2NDtcbiAgICBpZiAobiA9PT0gMzIpIHtcbiAgICAgICAgcmV0dXJuIFttWzFdLCBtWzBdXTtcbiAgICB9XG4gICAgZWxzZSBpZiAobiA8IDMyKSB7XG4gICAgICAgIHJldHVybiBbKG1bMF0gPDwgbikgfCAobVsxXSA+Pj4gKDMyIC0gbikpLCAobVsxXSA8PCBuKSB8IChtWzBdID4+PiAoMzIgLSBuKSldO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbiAtPSAzMjtcbiAgICAgICAgcmV0dXJuIFsobVsxXSA8PCBuKSB8IChtWzBdID4+PiAoMzIgLSBuKSksIChtWzBdIDw8IG4pIHwgKG1bMV0gPj4+ICgzMiAtIG4pKV07XG4gICAgfVxufVxuLy9cbi8vIEdpdmVuIGEgNjRiaXQgaW50IChhcyBhbiBhcnJheSBvZiB0d28gMzJiaXQgaW50cykgYW5kIGFuIGludFxuLy8gcmVwcmVzZW50aW5nIGEgbnVtYmVyIG9mIGJpdCBwb3NpdGlvbnMsIHJldHVybnMgdGhlIDY0Yml0IGludCAoYXMgYW5cbi8vIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSBzaGlmdGVkIGxlZnQgYnkgdGhhdCBudW1iZXIgb2YgcG9zaXRpb25zLlxuLy9cbmZ1bmN0aW9uIHg2NExlZnRTaGlmdChtLCBuKSB7XG4gICAgbiAlPSA2NDtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG4gICAgZWxzZSBpZiAobiA8IDMyKSB7XG4gICAgICAgIHJldHVybiBbKG1bMF0gPDwgbikgfCAobVsxXSA+Pj4gKDMyIC0gbikpLCBtWzFdIDw8IG5dO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFttWzFdIDw8IChuIC0gMzIpLCAwXTtcbiAgICB9XG59XG4vL1xuLy8gR2l2ZW4gdHdvIDY0Yml0IGludHMgKGFzIGFuIGFycmF5IG9mIHR3byAzMmJpdCBpbnRzKSByZXR1cm5zIHRoZSB0d29cbi8vIHhvcmVkIHRvZ2V0aGVyIGFzIGEgNjRiaXQgaW50IChhcyBhbiBhcnJheSBvZiB0d28gMzJiaXQgaW50cykuXG4vL1xuZnVuY3Rpb24geDY0WG9yKG0sIG4pIHtcbiAgICByZXR1cm4gW21bMF0gXiBuWzBdLCBtWzFdIF4gblsxXV07XG59XG4vL1xuLy8gR2l2ZW4gYSBibG9jaywgcmV0dXJucyBtdXJtdXJIYXNoMydzIGZpbmFsIHg2NCBtaXggb2YgdGhhdCBibG9jay5cbi8vIChgWzAsIGhbMF0gPj4+IDFdYCBpcyBhIDMzIGJpdCB1bnNpZ25lZCByaWdodCBzaGlmdC4gVGhpcyBpcyB0aGVcbi8vIG9ubHkgcGxhY2Ugd2hlcmUgd2UgbmVlZCB0byByaWdodCBzaGlmdCA2NGJpdCBpbnRzLilcbi8vXG5mdW5jdGlvbiB4NjRGbWl4KGgpIHtcbiAgICBoID0geDY0WG9yKGgsIFswLCBoWzBdID4+PiAxXSk7XG4gICAgaCA9IHg2NE11bHRpcGx5KGgsIFsweGZmNTFhZmQ3LCAweGVkNTU4Y2NkXSk7XG4gICAgaCA9IHg2NFhvcihoLCBbMCwgaFswXSA+Pj4gMV0pO1xuICAgIGggPSB4NjRNdWx0aXBseShoLCBbMHhjNGNlYjlmZSwgMHgxYTg1ZWM1M10pO1xuICAgIGggPSB4NjRYb3IoaCwgWzAsIGhbMF0gPj4+IDFdKTtcbiAgICByZXR1cm4gaDtcbn1cbi8vXG4vLyBHaXZlbiBhIHN0cmluZyBhbmQgYW4gb3B0aW9uYWwgc2VlZCBhcyBhbiBpbnQsIHJldHVybnMgYSAxMjggYml0XG4vLyBoYXNoIHVzaW5nIHRoZSB4NjQgZmxhdm9yIG9mIE11cm11ckhhc2gzLCBhcyBhbiB1bnNpZ25lZCBoZXguXG4vL1xuZnVuY3Rpb24geDY0aGFzaDEyOChrZXksIHNlZWQpIHtcbiAgICBrZXkgPSBrZXkgfHwgJyc7XG4gICAgc2VlZCA9IHNlZWQgfHwgMDtcbiAgICB2YXIgcmVtYWluZGVyID0ga2V5Lmxlbmd0aCAlIDE2O1xuICAgIHZhciBieXRlcyA9IGtleS5sZW5ndGggLSByZW1haW5kZXI7XG4gICAgdmFyIGgxID0gWzAsIHNlZWRdO1xuICAgIHZhciBoMiA9IFswLCBzZWVkXTtcbiAgICB2YXIgazEgPSBbMCwgMF07XG4gICAgdmFyIGsyID0gWzAsIDBdO1xuICAgIHZhciBjMSA9IFsweDg3YzM3YjkxLCAweDExNDI1M2Q1XTtcbiAgICB2YXIgYzIgPSBbMHg0Y2Y1YWQ0MywgMHgyNzQ1OTM3Zl07XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGJ5dGVzOyBpID0gaSArIDE2KSB7XG4gICAgICAgIGsxID0gW1xuICAgICAgICAgICAgKGtleS5jaGFyQ29kZUF0KGkgKyA0KSAmIDB4ZmYpIHxcbiAgICAgICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkgKyA1KSAmIDB4ZmYpIDw8IDgpIHxcbiAgICAgICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkgKyA2KSAmIDB4ZmYpIDw8IDE2KSB8XG4gICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpICsgNykgJiAweGZmKSA8PCAyNCksXG4gICAgICAgICAgICAoa2V5LmNoYXJDb2RlQXQoaSkgJiAweGZmKSB8XG4gICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNikgfFxuICAgICAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoaSArIDMpICYgMHhmZikgPDwgMjQpLFxuICAgICAgICBdO1xuICAgICAgICBrMiA9IFtcbiAgICAgICAgICAgIChrZXkuY2hhckNvZGVBdChpICsgMTIpICYgMHhmZikgfFxuICAgICAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoaSArIDEzKSAmIDB4ZmYpIDw8IDgpIHxcbiAgICAgICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkgKyAxNCkgJiAweGZmKSA8PCAxNikgfFxuICAgICAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoaSArIDE1KSAmIDB4ZmYpIDw8IDI0KSxcbiAgICAgICAgICAgIChrZXkuY2hhckNvZGVBdChpICsgOCkgJiAweGZmKSB8XG4gICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpICsgOSkgJiAweGZmKSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpICsgMTApICYgMHhmZikgPDwgMTYpIHxcbiAgICAgICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkgKyAxMSkgJiAweGZmKSA8PCAyNCksXG4gICAgICAgIF07XG4gICAgICAgIGsxID0geDY0TXVsdGlwbHkoazEsIGMxKTtcbiAgICAgICAgazEgPSB4NjRSb3RsKGsxLCAzMSk7XG4gICAgICAgIGsxID0geDY0TXVsdGlwbHkoazEsIGMyKTtcbiAgICAgICAgaDEgPSB4NjRYb3IoaDEsIGsxKTtcbiAgICAgICAgaDEgPSB4NjRSb3RsKGgxLCAyNyk7XG4gICAgICAgIGgxID0geDY0QWRkKGgxLCBoMik7XG4gICAgICAgIGgxID0geDY0QWRkKHg2NE11bHRpcGx5KGgxLCBbMCwgNV0pLCBbMCwgMHg1MmRjZTcyOV0pO1xuICAgICAgICBrMiA9IHg2NE11bHRpcGx5KGsyLCBjMik7XG4gICAgICAgIGsyID0geDY0Um90bChrMiwgMzMpO1xuICAgICAgICBrMiA9IHg2NE11bHRpcGx5KGsyLCBjMSk7XG4gICAgICAgIGgyID0geDY0WG9yKGgyLCBrMik7XG4gICAgICAgIGgyID0geDY0Um90bChoMiwgMzEpO1xuICAgICAgICBoMiA9IHg2NEFkZChoMiwgaDEpO1xuICAgICAgICBoMiA9IHg2NEFkZCh4NjRNdWx0aXBseShoMiwgWzAsIDVdKSwgWzAsIDB4Mzg0OTVhYjVdKTtcbiAgICB9XG4gICAgazEgPSBbMCwgMF07XG4gICAgazIgPSBbMCwgMF07XG4gICAgc3dpdGNoIChyZW1haW5kZXIpIHtcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIGsyID0geDY0WG9yKGsyLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyAxNCldLCA0OCkpO1xuICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgazIgPSB4NjRYb3IoazIsIHg2NExlZnRTaGlmdChbMCwga2V5LmNoYXJDb2RlQXQoaSArIDEzKV0sIDQwKSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBrMiA9IHg2NFhvcihrMiwgeDY0TGVmdFNoaWZ0KFswLCBrZXkuY2hhckNvZGVBdChpICsgMTIpXSwgMzIpKTtcbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIGsyID0geDY0WG9yKGsyLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyAxMSldLCAyNCkpO1xuICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgazIgPSB4NjRYb3IoazIsIHg2NExlZnRTaGlmdChbMCwga2V5LmNoYXJDb2RlQXQoaSArIDEwKV0sIDE2KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICBrMiA9IHg2NFhvcihrMiwgeDY0TGVmdFNoaWZ0KFswLCBrZXkuY2hhckNvZGVBdChpICsgOSldLCA4KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGsyID0geDY0WG9yKGsyLCBbMCwga2V5LmNoYXJDb2RlQXQoaSArIDgpXSk7XG4gICAgICAgICAgICBrMiA9IHg2NE11bHRpcGx5KGsyLCBjMik7XG4gICAgICAgICAgICBrMiA9IHg2NFJvdGwoazIsIDMzKTtcbiAgICAgICAgICAgIGsyID0geDY0TXVsdGlwbHkoazIsIGMxKTtcbiAgICAgICAgICAgIGgyID0geDY0WG9yKGgyLCBrMik7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyA3KV0sIDU2KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyA2KV0sIDQ4KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyA1KV0sIDQwKSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyA0KV0sIDMyKSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyAzKV0sIDI0KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyAyKV0sIDE2KSk7XG4gICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGsxID0geDY0WG9yKGsxLCB4NjRMZWZ0U2hpZnQoWzAsIGtleS5jaGFyQ29kZUF0KGkgKyAxKV0sIDgpKTtcbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgazEgPSB4NjRYb3IoazEsIFswLCBrZXkuY2hhckNvZGVBdChpKV0pO1xuICAgICAgICAgICAgazEgPSB4NjRNdWx0aXBseShrMSwgYzEpO1xuICAgICAgICAgICAgazEgPSB4NjRSb3RsKGsxLCAzMSk7XG4gICAgICAgICAgICBrMSA9IHg2NE11bHRpcGx5KGsxLCBjMik7XG4gICAgICAgICAgICBoMSA9IHg2NFhvcihoMSwgazEpO1xuICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgIH1cbiAgICBoMSA9IHg2NFhvcihoMSwgWzAsIGtleS5sZW5ndGhdKTtcbiAgICBoMiA9IHg2NFhvcihoMiwgWzAsIGtleS5sZW5ndGhdKTtcbiAgICBoMSA9IHg2NEFkZChoMSwgaDIpO1xuICAgIGgyID0geDY0QWRkKGgyLCBoMSk7XG4gICAgaDEgPSB4NjRGbWl4KGgxKTtcbiAgICBoMiA9IHg2NEZtaXgoaDIpO1xuICAgIGgxID0geDY0QWRkKGgxLCBoMik7XG4gICAgaDIgPSB4NjRBZGQoaDIsIGgxKTtcbiAgICByZXR1cm4gKCgnMDAwMDAwMDAnICsgKGgxWzBdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSArXG4gICAgICAgICgnMDAwMDAwMDAnICsgKGgxWzFdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSArXG4gICAgICAgICgnMDAwMDAwMDAnICsgKGgyWzBdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSArXG4gICAgICAgICgnMDAwMDAwMDAnICsgKGgyWzFdID4+PiAwKS50b1N0cmluZygxNikpLnNsaWNlKC04KSk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIzLjAuNVwiO1xuXG52YXIgdyA9IHdpbmRvdztcbmZ1bmN0aW9uIHJlcXVlc3RJZGxlQ2FsbGJhY2tJZkF2YWlsYWJsZShmYWxsYmFja1RpbWVvdXQsIGRlYWRsaW5lVGltZW91dCkge1xuICAgIGlmIChkZWFkbGluZVRpbWVvdXQgPT09IHZvaWQgMCkgeyBkZWFkbGluZVRpbWVvdXQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBpZiAody5yZXF1ZXN0SWRsZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB3LnJlcXVlc3RJZGxlQ2FsbGJhY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSgpOyB9LCB7IHRpbWVvdXQ6IGRlYWRsaW5lVGltZW91dCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgTWF0aC5taW4oZmFsbGJhY2tUaW1lb3V0LCBkZWFkbGluZVRpbWVvdXQpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIGVycm9yIG9iamVjdCB0byBhIHBsYWluIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYEpTT04uc3RyaW5naWZ5YC5cbiAqIElmIHlvdSBqdXN0IHJ1biBgSlNPTi5zdHJpbmdpZnkoZXJyb3IpYCwgeW91J2xsIGdldCBgJ3t9J2AuXG4gKi9cbmZ1bmN0aW9uIGVycm9yVG9PYmplY3QoZXJyb3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9fYXNzaWduKHsgbmFtZTogZXJyb3IubmFtZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwgc3RhY2s6IChfYSA9IGVycm9yLnN0YWNrKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BsaXQoJ1xcbicpIH0sIGVycm9yKTtcbn1cblxuLypcbiAqIFRoaXMgZmlsZSBjb250YWlucyBmdW5jdGlvbnMgdG8gd29yayB3aXRoIHB1cmUgZGF0YSBvbmx5IChubyBicm93c2VyIGZlYXR1cmVzLCBET00sIHNpZGUgZWZmZWN0cywgZXRjKS5cbiAqL1xuLyoqXG4gKiBEb2VzIHRoZSBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5pbmNsdWRlcyBidXQgaGFzIGJldHRlciB0eXBpbmdcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZXMoaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gaGF5c3RhY2subGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGlmIChoYXlzdGFja1tpXSA9PT0gbmVlZGxlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIExpa2UgYCFpbmNsdWRlcygpYCBidXQgd2l0aCBwcm9wZXIgdHlwaW5nXG4gKi9cbmZ1bmN0aW9uIGV4Y2x1ZGVzKGhheXN0YWNrLCBuZWVkbGUpIHtcbiAgICByZXR1cm4gIWluY2x1ZGVzKGhheXN0YWNrLCBuZWVkbGUpO1xufVxuLyoqXG4gKiBCZSBjYXJlZnVsLCBOYU4gY2FuIHJldHVyblxuICovXG5mdW5jdGlvbiB0b0ludCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSk7XG59XG4vKipcbiAqIEJlIGNhcmVmdWwsIE5hTiBjYW4gcmV0dXJuXG4gKi9cbmZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG59XG5mdW5jdGlvbiByZXBsYWNlTmFOKHZhbHVlLCByZXBsYWNlbWVudCkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbHVlKSA/IHJlcGxhY2VtZW50IDogdmFsdWU7XG59XG5mdW5jdGlvbiBjb3VudFRydXRoeSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCB2YWx1ZSkgeyByZXR1cm4gc3VtICsgKHZhbHVlID8gMSA6IDApOyB9LCAwKTtcbn1cblxuLypcbiAqIEZ1bmN0aW9ucyB0byBoZWxwIHdpdGggZmVhdHVyZXMgdGhhdCB2YXJ5IHRocm91Z2ggYnJvd3NlcnNcbiAqL1xudmFyIHckMSA9IHdpbmRvdztcbnZhciBuID0gbmF2aWdhdG9yO1xudmFyIGQgPSBkb2N1bWVudDtcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgYmFzZWQgb24gVHJpZGVudCAodGhlIEludGVybmV0IEV4cGxvcmVyIGVuZ2luZSkgd2l0aG91dCB1c2luZyB1c2VyLWFnZW50LlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBpc1RyaWRlbnQoKSB7XG4gICAgLy8gVGhlIHByb3BlcnRpZXMgYXJlIGNoZWNrZWQgdG8gYmUgaW4gSUUgMTAsIElFIDExIGFuZCBub3QgdG8gYmUgaW4gb3RoZXIgYnJvd3NlcnMgaW4gT2N0b2JlciAyMDIwXG4gICAgcmV0dXJuIChjb3VudFRydXRoeShbXG4gICAgICAgICdNU0NTU01hdHJpeCcgaW4gdyQxLFxuICAgICAgICAnbXNTZXRJbW1lZGlhdGUnIGluIHckMSxcbiAgICAgICAgJ21zSW5kZXhlZERCJyBpbiB3JDEsXG4gICAgICAgICdtc01heFRvdWNoUG9pbnRzJyBpbiBuLFxuICAgICAgICAnbXNQb2ludGVyRW5hYmxlZCcgaW4gbixcbiAgICBdKSA+PSA0KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgYmFzZWQgb24gRWRnZUhUTUwgKHRoZSBwcmUtQ2hyb21pdW0gRWRnZSBlbmdpbmUpIHdpdGhvdXQgdXNpbmcgdXNlci1hZ2VudC5cbiAqXG4gKiBXYXJuaW5nIGZvciBwYWNrYWdlIHVzZXJzOlxuICogVGhpcyBmdW5jdGlvbiBpcyBvdXQgb2YgU2VtYW50aWMgVmVyc2lvbmluZywgaS5lLiBjYW4gY2hhbmdlIHVuZXhwZWN0ZWRseS4gVXNhZ2UgaXMgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gaXNFZGdlSFRNTCgpIHtcbiAgICAvLyBCYXNlZCBvbiByZXNlYXJjaCBpbiBPY3RvYmVyIDIwMjBcbiAgICByZXR1cm4gKGNvdW50VHJ1dGh5KFsnbXNXcml0ZVByb2ZpbGVyTWFyaycgaW4gdyQxLCAnTVNTdHJlYW0nIGluIHckMSwgJ21zTGF1bmNoVXJpJyBpbiBuLCAnbXNTYXZlQmxvYicgaW4gbl0pID49IDMgJiZcbiAgICAgICAgIWlzVHJpZGVudCgpKTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgYmFzZWQgb24gQ2hyb21pdW0gd2l0aG91dCB1c2luZyB1c2VyLWFnZW50LlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBpc0Nocm9taXVtKCkge1xuICAgIC8vIEJhc2VkIG9uIHJlc2VhcmNoIGluIE9jdG9iZXIgMjAyMC4gVGVzdGVkIHRvIGRldGVjdCBDaHJvbWl1bSA0Mi04Ni5cbiAgICByZXR1cm4gKGNvdW50VHJ1dGh5KFtcbiAgICAgICAgJ3dlYmtpdFBlcnNpc3RlbnRTdG9yYWdlJyBpbiBuLFxuICAgICAgICAnd2Via2l0VGVtcG9yYXJ5U3RvcmFnZScgaW4gbixcbiAgICAgICAgbi52ZW5kb3IuaW5kZXhPZignR29vZ2xlJykgPT09IDAsXG4gICAgICAgICd3ZWJraXRSZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMJyBpbiB3JDEsXG4gICAgICAgICdCYXR0ZXJ5TWFuYWdlcicgaW4gdyQxLFxuICAgICAgICAnd2Via2l0TWVkaWFTdHJlYW0nIGluIHckMSxcbiAgICAgICAgJ3dlYmtpdFNwZWVjaEdyYW1tYXInIGluIHckMSxcbiAgICBdKSA+PSA1KTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgYmFzZWQgb24gbW9iaWxlIG9yIGRlc2t0b3AgU2FmYXJpIHdpdGhvdXQgdXNpbmcgdXNlci1hZ2VudC5cbiAqIEFsbCBpT1MgYnJvd3NlcnMgdXNlIFdlYktpdCAodGhlIFNhZmFyaSBlbmdpbmUpLlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBpc1dlYktpdCgpIHtcbiAgICAvLyBCYXNlZCBvbiByZXNlYXJjaCBpbiBTZXB0ZW1iZXIgMjAyMFxuICAgIHJldHVybiAoY291bnRUcnV0aHkoW1xuICAgICAgICAnQXBwbGVQYXlFcnJvcicgaW4gdyQxLFxuICAgICAgICAnQ1NTUHJpbWl0aXZlVmFsdWUnIGluIHckMSxcbiAgICAgICAgJ0NvdW50ZXInIGluIHckMSxcbiAgICAgICAgbi52ZW5kb3IuaW5kZXhPZignQXBwbGUnKSA9PT0gMCxcbiAgICAgICAgJ2dldFN0b3JhZ2VVcGRhdGVzJyBpbiBuLFxuICAgICAgICAnV2ViS2l0TWVkaWFLZXlzJyBpbiB3JDEsXG4gICAgXSkgPj0gNCk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBXZWJLaXQgYnJvd3NlciBpcyBhIGRlc2t0b3AgU2FmYXJpLlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBpc0Rlc2t0b3BTYWZhcmkoKSB7XG4gICAgcmV0dXJuIChjb3VudFRydXRoeShbXG4gICAgICAgICdzYWZhcmknIGluIHckMSxcbiAgICAgICAgISgnRGV2aWNlTW90aW9uRXZlbnQnIGluIHckMSksXG4gICAgICAgICEoJ29uZ2VzdHVyZWVuZCcgaW4gdyQxKSxcbiAgICAgICAgISgnc3RhbmRhbG9uZScgaW4gbiksXG4gICAgXSkgPj0gMyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBicm93c2VyIGlzIGJhc2VkIG9uIEdlY2tvIChGaXJlZm94IGVuZ2luZSkgd2l0aG91dCB1c2luZyB1c2VyLWFnZW50LlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBpc0dlY2tvKCkge1xuICAgIHZhciBfYTtcbiAgICAvLyBCYXNlZCBvbiByZXNlYXJjaCBpbiBTZXB0ZW1iZXIgMjAyMFxuICAgIHJldHVybiAoY291bnRUcnV0aHkoW1xuICAgICAgICAnYnVpbGRJRCcgaW4gbixcbiAgICAgICAgKChfYSA9IGQuZG9jdW1lbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3R5bGUpICYmICdNb3pBcHBlYXJhbmNlJyBpbiBkLmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICAgICAgJ01lZGlhUmVjb3JkZXJFcnJvckV2ZW50JyBpbiB3JDEsXG4gICAgICAgICdtb3pJbm5lclNjcmVlblgnIGluIHckMSxcbiAgICAgICAgJ0NTU01vekRvY3VtZW50UnVsZScgaW4gdyQxLFxuICAgICAgICAnQ2FudmFzQ2FwdHVyZU1lZGlhU3RyZWFtJyBpbiB3JDEsXG4gICAgXSkgPj0gNCk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBicm93c2VyIGlzIGJhc2VkIG9uIENocm9taXVtIHZlcnNpb24g4omlODYgd2l0aG91dCB1c2luZyB1c2VyLWFnZW50LlxuICogSXQgZG9lc24ndCBjaGVjayB0aGF0IHRoZSBicm93c2VyIGlzIGJhc2VkIG9uIENocm9taXVtLCB0aGVyZSBpcyBhIHNlcGFyYXRlIGZ1bmN0aW9uIGZvciB0aGlzLlxuICovXG5mdW5jdGlvbiBpc0Nocm9taXVtODZPck5ld2VyKCkge1xuICAgIC8vIENoZWNrZWQgaW4gQ2hyb21lIDg1IHZzIENocm9tZSA4NiBib3RoIG9uIGRlc2t0b3AgYW5kIEFuZHJvaWRcbiAgICByZXR1cm4gKGNvdW50VHJ1dGh5KFtcbiAgICAgICAgISgnTWVkaWFTZXR0aW5nc1JhbmdlJyBpbiB3JDEpLFxuICAgICAgICAnUlRDRW5jb2RlZEF1ZGlvRnJhbWUnIGluIHckMSxcbiAgICAgICAgJycgKyB3JDEuSW50bCA9PT0gJ1tvYmplY3QgSW50bF0nLFxuICAgICAgICAnJyArIHckMS5SZWZsZWN0ID09PSAnW29iamVjdCBSZWZsZWN0XScsXG4gICAgXSkgPj0gMyk7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBicm93c2VyIGlzIGJhc2VkIG9uIFdlYktpdCB2ZXJzaW9uIOKJpTYwNiAoU2FmYXJpIOKJpTEyKSB3aXRob3V0IHVzaW5nIHVzZXItYWdlbnQuXG4gKiBJdCBkb2Vzbid0IGNoZWNrIHRoYXQgdGhlIGJyb3dzZXIgaXMgYmFzZWQgb24gV2ViS2l0LCB0aGVyZSBpcyBhIHNlcGFyYXRlIGZ1bmN0aW9uIGZvciB0aGlzLlxuICpcbiAqIEBsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NhZmFyaV92ZXJzaW9uX2hpc3RvcnkjUmVsZWFzZV9oaXN0b3J5IFNhZmFyaS1XZWJLaXQgdmVyc2lvbnMgbWFwXG4gKi9cbmZ1bmN0aW9uIGlzV2ViS2l0NjA2T3JOZXdlcigpIHtcbiAgICAvLyBDaGVja2VkIGluIFNhZmFyaSA54oCTMTRcbiAgICByZXR1cm4gKGNvdW50VHJ1dGh5KFtcbiAgICAgICAgJ0RPTVJlY3RMaXN0JyBpbiB3JDEsXG4gICAgICAgICdSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50JyBpbiB3JDEsXG4gICAgICAgICdTVkdHZW9tZXRyeUVsZW1lbnQnIGluIHckMSxcbiAgICAgICAgJ29udHJhbnNpdGlvbmNhbmNlbCcgaW4gdyQxLFxuICAgIF0pID49IDMpO1xufVxuXG52YXIgdyQyID0gd2luZG93O1xudmFyIGQkMSA9IGRvY3VtZW50O1xuLy8gSW5zcGlyZWQgYnkgYW5kIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9jb3p5bGlmZS9hdWRpby1maW5nZXJwcmludFxuZnVuY3Rpb24gZ2V0QXVkaW9GaW5nZXJwcmludCgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBBdWRpb0NvbnRleHQsIGNvbnRleHQsIG9zY2lsbGF0b3IsIGNvbXByZXNzb3IsIGJ1ZmZlciwgZXJyb3JfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgQXVkaW9Db250ZXh0ID0gdyQyLk9mZmxpbmVBdWRpb0NvbnRleHQgfHwgdyQyLndlYmtpdE9mZmxpbmVBdWRpb0NvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQXVkaW9Db250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgLTIgLyogTm90U3VwcG9ydGVkICovXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCBhdWRpbyBjb250ZXh0IGFsd2F5cyBzdGF5cyBzdXNwZW5kZWQgdW5sZXNzIHRoZSBjb250ZXh0IGlzIHN0YXJ0ZWQgaW4gcmVzcG9uc2UgdG8gYSB1c2VyIGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyAoZS5nLiBhIGNsaWNrIG9yIGEgdGFwKS4gSXQgcHJldmVudHMgYXVkaW8gZmluZ2VycHJpbnQgZnJvbSBiZWluZyB0YWtlbiBhdCBhbiBhcmJpdHJhcnkgbW9tZW50IG9mIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN1Y2ggYnJvd3NlcnMgYXJlIG9sZCBhbmQgdW5wb3B1bGFyLCBzbyB0aGUgYXVkaW8gZmluZ2VycHJpbnRpbmcgaXMganVzdCBza2lwcGVkIGluIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSBhIHNpbWlsYXIgY2FzZSBleHBsYW5hdGlvbiBhdCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjM2MzA0OC9vbmF1ZGlvcHJvY2Vzcy1ub3QtY2FsbGVkLW9uLWlvczExIzQ2NTM0MDg4XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2VzQ3VycmVudEJyb3dzZXJTdXNwZW5kQXVkaW9Db250ZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCAtMSAvKiBLbm93blRvU3VzcGVuZCAqL107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoMSwgNDQxMDAsIDQ0MTAwKTtcbiAgICAgICAgICAgICAgICAgICAgb3NjaWxsYXRvciA9IGNvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICBvc2NpbGxhdG9yLnR5cGUgPSAndHJpYW5nbGUnO1xuICAgICAgICAgICAgICAgICAgICBzZXRBdWRpb1BhcmFtKGNvbnRleHQsIG9zY2lsbGF0b3IuZnJlcXVlbmN5LCAxMDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXByZXNzb3IgPSBjb250ZXh0LmNyZWF0ZUR5bmFtaWNzQ29tcHJlc3NvcigpO1xuICAgICAgICAgICAgICAgICAgICBzZXRBdWRpb1BhcmFtKGNvbnRleHQsIGNvbXByZXNzb3IudGhyZXNob2xkLCAtNTApO1xuICAgICAgICAgICAgICAgICAgICBzZXRBdWRpb1BhcmFtKGNvbnRleHQsIGNvbXByZXNzb3Iua25lZSwgNDApO1xuICAgICAgICAgICAgICAgICAgICBzZXRBdWRpb1BhcmFtKGNvbnRleHQsIGNvbXByZXNzb3IucmF0aW8sIDEyKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QXVkaW9QYXJhbShjb250ZXh0LCBjb21wcmVzc29yLnJlZHVjdGlvbiwgLTIwKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QXVkaW9QYXJhbShjb250ZXh0LCBjb21wcmVzc29yLmF0dGFjaywgMCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEF1ZGlvUGFyYW0oY29udGV4dCwgY29tcHJlc3Nvci5yZWxlYXNlLCAwLjI1KTtcbiAgICAgICAgICAgICAgICAgICAgb3NjaWxsYXRvci5jb25uZWN0KGNvbXByZXNzb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb21wcmVzc29yLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIG9zY2lsbGF0b3Iuc3RhcnQoMCk7XG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgNCwgNV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZW5kZXJBdWRpbyhjb250ZXh0KV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yXzEubmFtZSA9PT0gXCJ0aW1lb3V0XCIgLyogVGltZW91dCAqLyB8fCBlcnJvcl8xLm5hbWUgPT09IFwic3VzcGVuZGVkXCIgLyogU3VzcGVuZGVkICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgLTMgLyogVGltZW91dCAqL107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG9zY2lsbGF0b3IuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICBjb21wcmVzc29yLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCBnZXRIYXNoKGJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKSldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMga25vd24gdG8gYWx3YXlzIHN1c3BlbmQgYXVkaW8gY29udGV4dFxuICovXG5mdW5jdGlvbiBkb2VzQ3VycmVudEJyb3dzZXJTdXNwZW5kQXVkaW9Db250ZXh0KCkge1xuICAgIHJldHVybiBpc1dlYktpdCgpICYmICFpc0Rlc2t0b3BTYWZhcmkoKSAmJiAhaXNXZWJLaXQ2MDZPck5ld2VyKCk7XG59XG5mdW5jdGlvbiBzZXRBdWRpb1BhcmFtKGNvbnRleHQsIHBhcmFtLCB2YWx1ZSkge1xuICAgIHZhciBpc0F1ZGlvUGFyYW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zZXRWYWx1ZUF0VGltZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9O1xuICAgIGlmIChpc0F1ZGlvUGFyYW0ocGFyYW0pKSB7XG4gICAgICAgIHBhcmFtLnNldFZhbHVlQXRUaW1lKHZhbHVlLCBjb250ZXh0LmN1cnJlbnRUaW1lKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW5kZXJBdWRpbyhjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VtZVRyaWVzTWF4Q291bnQgPSAzO1xuICAgIHZhciByZXN1bWVSZXRyeURlbGF5ID0gNTAwO1xuICAgIHZhciBydW5uaW5nVGltZW91dCA9IDEwMDA7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgY29udGV4dC5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiByZXNvbHZlKGV2ZW50LnJlbmRlcmVkQnVmZmVyKTsgfTtcbiAgICAgICAgdmFyIHJlc3VtZVRyaWVzTGVmdCA9IHJlc3VtZVRyaWVzTWF4Q291bnQ7XG4gICAgICAgIHZhciB0cnlSZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250ZXh0LnN0YXJ0UmVuZGVyaW5nKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNvbnRleHQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdydW5uaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QobWFrZUlubmVyRXJyb3IoXCJ0aW1lb3V0XCIgLyogVGltZW91dCAqLykpOyB9LCBydW5uaW5nVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgYXVkaW8gY29udGV4dCBkb2Vzbid0IHN0YXJ0IGFmdGVyIGNhbGxpbmcgYHN0YXJ0UmVuZGVyaW5nYCAoaW4gYWRkaXRpb24gdG8gdGhlIGNhc2VzIHdoZXJlXG4gICAgICAgICAgICAgICAgLy8gYXVkaW8gY29udGV4dCBkb2Vzbid0IHN0YXJ0IGF0IGFsbCkuIEEga25vd24gY2FzZSBpcyBzdGFydGluZyBhbiBhdWRpbyBjb250ZXh0IHdoZW4gdGhlIGJyb3dzZXIgdGFiIGlzIGluXG4gICAgICAgICAgICAgICAgLy8gYmFja2dyb3VuZCBvbiBpUGhvbmUuIFJldHJpZXMgdXN1YWxseSBoZWxwIGluIHRoaXMgY2FzZS5cbiAgICAgICAgICAgICAgICBjYXNlICdzdXNwZW5kZWQnOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYXVkaW8gY29udGV4dCBjYW4gcmVqZWN0IHN0YXJ0aW5nIHVudGlsIHRoZSB0YWIgaXMgaW4gZm9yZWdyb3VuZC4gTG9uZyBmaW5nZXJwcmludCBkdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBiYWNrZ3JvdW5kIGlzbid0IGEgcHJvYmxlbSwgdGhlcmVmb3JlIHRoZSByZXRyeSBhdHRlbXB0cyBkb24ndCBjb3VudCBpbiBiYWNrZ3JvdW5kLiBJdCBjYW4gbGVhZCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBhIHNpdHVhdGlvbiB3aGVuIGEgZmluZ2VycHJpbnQgdGFrZXMgdmVyeSBsb25nIHRpbWUgYW5kIGZpbmlzaGVzIHN1Y2Nlc3NmdWxseS4gRllJLCB0aGUgYXVkaW8gY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gYmUgc3VzcGVuZGVkIHdoZW4gYGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2VgIGFuZCBzdGFydCBydW5uaW5nIGFmdGVyIGEgcmV0cnkuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZCQxLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lVHJpZXNMZWZ0LS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VtZVRyaWVzTGVmdCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodHJ5UmVzdW1lLCByZXN1bWVSZXRyeURlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChtYWtlSW5uZXJFcnJvcihcInN1c3BlbmRlZFwiIC8qIFN1c3BlbmRlZCAqLykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cnlSZXN1bWUoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldEhhc2goc2lnbmFsKSB7XG4gICAgdmFyIGhhc2ggPSAwO1xuICAgIGZvciAodmFyIGkgPSA0NTAwOyBpIDwgNTAwMDsgKytpKSB7XG4gICAgICAgIGhhc2ggKz0gTWF0aC5hYnMoc2lnbmFsW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG59XG5mdW5jdGlvbiBtYWtlSW5uZXJFcnJvcihuYW1lKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG5hbWUpO1xuICAgIGVycm9yLm5hbWUgPSBuYW1lO1xuICAgIHJldHVybiBlcnJvcjtcbn1cblxudmFyIGQkMiA9IGRvY3VtZW50O1xuLy8gV2UgdXNlIG0gb3IgdyBiZWNhdXNlIHRoZXNlIHR3byBjaGFyYWN0ZXJzIHRha2UgdXAgdGhlIG1heGltdW0gd2lkdGguXG4vLyBBbmQgd2UgdXNlIGEgTExpIHNvIHRoYXQgdGhlIHNhbWUgbWF0Y2hpbmcgZm9udHMgY2FuIGdldCBzZXBhcmF0ZWQuXG52YXIgdGVzdFN0cmluZyA9ICdtbU13V0xsaUkwTyYxJztcbi8vIFdlIHRlc3QgdXNpbmcgNDhweCBmb250IHNpemUsIHdlIG1heSB1c2UgYW55IHNpemUuIEkgZ3Vlc3MgbGFyZ2VyIHRoZSBiZXR0ZXIuXG52YXIgdGVzdFNpemUgPSAnNDhweCc7XG4vLyBBIGZvbnQgd2lsbCBiZSBjb21wYXJlZCBhZ2FpbnN0IGFsbCB0aGUgdGhyZWUgZGVmYXVsdCBmb250cy5cbi8vIEFuZCBpZiBpdCBkb2Vzbid0IG1hdGNoIGFsbCAzIHRoZW4gdGhhdCBmb250IGlzIG5vdCBhdmFpbGFibGUuXG52YXIgYmFzZUZvbnRzID0gWydtb25vc3BhY2UnLCAnc2Fucy1zZXJpZicsICdzZXJpZiddO1xudmFyIGZvbnRMaXN0ID0gW1xuICAgIC8vIFRoaXMgaXMgYW5kcm9pZC1zcGVjaWZpYyBmb250IGZyb20gXCJSb2JvdG9cIiBmYW1pbHlcbiAgICAnc2Fucy1zZXJpZi10aGluJyxcbiAgICAnQVJOTyBQUk8nLFxuICAgICdBZ2VuY3kgRkInLFxuICAgICdBcmFiaWMgVHlwZXNldHRpbmcnLFxuICAgICdBcmlhbCBVbmljb2RlIE1TJyxcbiAgICAnQXZhbnRHYXJkZSBCayBCVCcsXG4gICAgJ0JhbmtHb3RoaWMgTWQgQlQnLFxuICAgICdCYXRhbmcnLFxuICAgICdCaXRzdHJlYW0gVmVyYSBTYW5zIE1vbm8nLFxuICAgICdDYWxpYnJpJyxcbiAgICAnQ2VudHVyeScsXG4gICAgJ0NlbnR1cnkgR290aGljJyxcbiAgICAnQ2xhcmVuZG9uJyxcbiAgICAnRVVST1NUSUxFJyxcbiAgICAnRnJhbmtsaW4gR290aGljJyxcbiAgICAnRnV0dXJhIEJrIEJUJyxcbiAgICAnRnV0dXJhIE1kIEJUJyxcbiAgICAnR09USEFNJyxcbiAgICAnR2lsbCBTYW5zJyxcbiAgICAnSEVMVicsXG4gICAgJ0hhZXR0ZW5zY2h3ZWlsZXInLFxuICAgICdIZWx2ZXRpY2EgTmV1ZScsXG4gICAgJ0h1bWFuc3Q1MjEgQlQnLFxuICAgICdMZWVsYXdhZGVlJyxcbiAgICAnTGV0dGVyIEdvdGhpYycsXG4gICAgJ0xldmVuaW0gTVQnLFxuICAgICdMdWNpZGEgQnJpZ2h0JyxcbiAgICAnTHVjaWRhIFNhbnMnLFxuICAgICdNZW5sbycsXG4gICAgJ01TIE1pbmNobycsXG4gICAgJ01TIE91dGxvb2snLFxuICAgICdNUyBSZWZlcmVuY2UgU3BlY2lhbHR5JyxcbiAgICAnTVMgVUkgR290aGljJyxcbiAgICAnTVQgRXh0cmEnLFxuICAgICdNWVJJQUQgUFJPJyxcbiAgICAnTWFybGV0dCcsXG4gICAgJ01laXJ5byBVSScsXG4gICAgJ01pY3Jvc29mdCBVaWdodXInLFxuICAgICdNaW5pb24gUHJvJyxcbiAgICAnTW9ub3R5cGUgQ29yc2l2YScsXG4gICAgJ1BNaW5nTGlVJyxcbiAgICAnUHJpc3RpbmEnLFxuICAgICdTQ1JJUFRJTkEnLFxuICAgICdTZWdvZSBVSSBMaWdodCcsXG4gICAgJ1NlcmlmYScsXG4gICAgJ1NpbUhlaScsXG4gICAgJ1NtYWxsIEZvbnRzJyxcbiAgICAnU3RhY2NhdG8yMjIgQlQnLFxuICAgICdUUkFKQU4gUFJPJyxcbiAgICAnVW5pdmVycyBDRSA1NSBNZWRpdW0nLFxuICAgICdWcmluZGEnLFxuICAgICdaV0Fkb2JlRicsXG5dO1xudmFyIGZvbnRTcGFuU3R5bGUgPSB7XG4gICAgLy8gQ1NTIGZvbnQgcmVzZXQgdG8gcmVzZXQgZXh0ZXJuYWwgc3R5bGVzXG4gICAgZm9udFN0eWxlOiAnbm9ybWFsJyxcbiAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnbm9ybWFsJyxcbiAgICBsaW5lQnJlYWs6ICdhdXRvJyxcbiAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICB0ZXh0VHJhbnNmb3JtOiAnbm9uZScsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICB0ZXh0U2hhZG93OiAnbm9uZScsXG4gICAgd2hpdGVTcGFjZTogJ25vcm1hbCcsXG4gICAgd29yZEJyZWFrOiAnbm9ybWFsJyxcbiAgICB3b3JkU3BhY2luZzogJ25vcm1hbCcsXG4gICAgLy8gV2UgbmVlZCB0aGlzIGNzcyBhcyBpbiBzb21lIHdlaXJkIGJyb3dzZXIgdGhpcyBzcGFuIGVsZW1lbnRzIHNob3dzIHVwIGZvciBhIG1pY3JvU2VjIHdoaWNoIGNyZWF0ZXNcbiAgICAvLyBhIGJhZCB1c2VyIGV4cGVyaWVuY2VcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAnLTk5OTlweCcsXG4gICAgZm9udFNpemU6IHRlc3RTaXplLFxufTtcbi8vIGt1ZG9zIHRvIGh0dHA6Ly93d3cubGFsaXQub3JnL2xhYi9qYXZhc2NyaXB0LWNzcy1mb250LWRldGVjdC9cbmZ1bmN0aW9uIGdldEZvbnRzKCkge1xuICAgIHZhciBoID0gZCQyLmJvZHk7XG4gICAgLy8gZGl2IHRvIGxvYWQgc3BhbnMgZm9yIHRoZSBiYXNlIGZvbnRzXG4gICAgdmFyIGJhc2VGb250c0RpdiA9IGQkMi5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAvLyBkaXYgdG8gbG9hZCBzcGFucyBmb3IgdGhlIGZvbnRzIHRvIGRldGVjdFxuICAgIHZhciBmb250c0RpdiA9IGQkMi5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgZGVmYXVsdFdpZHRoID0ge307XG4gICAgdmFyIGRlZmF1bHRIZWlnaHQgPSB7fTtcbiAgICAvLyBjcmVhdGVzIGEgc3BhbiB3aGVyZSB0aGUgZm9udHMgd2lsbCBiZSBsb2FkZWRcbiAgICB2YXIgY3JlYXRlU3BhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNwYW4gPSBkJDIuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gdGVzdFN0cmluZztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGZvbnRTcGFuU3R5bGUpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHByb3AgPSBfYVtfaV07XG4gICAgICAgICAgICBzcGFuLnN0eWxlW3Byb3BdID0gZm9udFNwYW5TdHlsZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9O1xuICAgIC8vIGNyZWF0ZXMgYSBzcGFuIGFuZCBsb2FkIHRoZSBmb250IHRvIGRldGVjdCBhbmQgYSBiYXNlIGZvbnQgZm9yIGZhbGxiYWNrXG4gICAgdmFyIGNyZWF0ZVNwYW5XaXRoRm9udHMgPSBmdW5jdGlvbiAoZm9udFRvRGV0ZWN0LCBiYXNlRm9udCkge1xuICAgICAgICB2YXIgcyA9IGNyZWF0ZVNwYW4oKTtcbiAgICAgICAgcy5zdHlsZS5mb250RmFtaWx5ID0gXCInXCIgKyBmb250VG9EZXRlY3QgKyBcIicsXCIgKyBiYXNlRm9udDtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgICAvLyBjcmVhdGVzIHNwYW5zIGZvciB0aGUgYmFzZSBmb250cyBhbmQgYWRkcyB0aGVtIHRvIGJhc2VGb250c0RpdlxuICAgIHZhciBpbml0aWFsaXplQmFzZUZvbnRzU3BhbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBiYXNlRm9udHMubWFwKGZ1bmN0aW9uIChiYXNlRm9udCkge1xuICAgICAgICAgICAgdmFyIHMgPSBjcmVhdGVTcGFuKCk7XG4gICAgICAgICAgICBzLnN0eWxlLmZvbnRGYW1pbHkgPSBiYXNlRm9udDtcbiAgICAgICAgICAgIGJhc2VGb250c0Rpdi5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIGNyZWF0ZXMgc3BhbnMgZm9yIHRoZSBmb250cyB0byBkZXRlY3QgYW5kIGFkZHMgdGhlbSB0byBmb250c0RpdlxuICAgIHZhciBpbml0aWFsaXplRm9udHNTcGFucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3RvcmVzIHtmb250TmFtZSA6IFtzcGFucyBmb3IgdGhhdCBmb250XX1cbiAgICAgICAgdmFyIHNwYW5zID0ge307XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgICAgIHNwYW5zW2ZvbnRdID0gYmFzZUZvbnRzLm1hcChmdW5jdGlvbiAoYmFzZUZvbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGNyZWF0ZVNwYW5XaXRoRm9udHMoZm9udCwgYmFzZUZvbnQpO1xuICAgICAgICAgICAgICAgIGZvbnRzRGl2LmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZm9udExpc3RfMSA9IGZvbnRMaXN0OyBfaSA8IGZvbnRMaXN0XzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZm9udCA9IGZvbnRMaXN0XzFbX2ldO1xuICAgICAgICAgICAgX2xvb3BfMShmb250KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbnM7XG4gICAgfTtcbiAgICAvLyBjaGVja3MgaWYgYSBmb250IGlzIGF2YWlsYWJsZVxuICAgIHZhciBpc0ZvbnRBdmFpbGFibGUgPSBmdW5jdGlvbiAoZm9udFNwYW5zKSB7XG4gICAgICAgIHJldHVybiBiYXNlRm9udHMuc29tZShmdW5jdGlvbiAoYmFzZUZvbnQsIGJhc2VGb250SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmb250U3BhbnNbYmFzZUZvbnRJbmRleF0ub2Zmc2V0V2lkdGggIT09IGRlZmF1bHRXaWR0aFtiYXNlRm9udF0gfHxcbiAgICAgICAgICAgICAgICBmb250U3BhbnNbYmFzZUZvbnRJbmRleF0ub2Zmc2V0SGVpZ2h0ICE9PSBkZWZhdWx0SGVpZ2h0W2Jhc2VGb250XTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBjcmVhdGUgc3BhbnMgZm9yIGJhc2UgZm9udHNcbiAgICB2YXIgYmFzZUZvbnRzU3BhbnMgPSBpbml0aWFsaXplQmFzZUZvbnRzU3BhbnMoKTtcbiAgICAvLyBhZGQgdGhlIHNwYW5zIHRvIHRoZSBET01cbiAgICBoLmFwcGVuZENoaWxkKGJhc2VGb250c0Rpdik7XG4gICAgLy8gZ2V0IHRoZSBkZWZhdWx0IHdpZHRoIGZvciB0aGUgdGhyZWUgYmFzZSBmb250c1xuICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoXzEgPSBiYXNlRm9udHMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aF8xOyBpbmRleCsrKSB7XG4gICAgICAgIGRlZmF1bHRXaWR0aFtiYXNlRm9udHNbaW5kZXhdXSA9IGJhc2VGb250c1NwYW5zW2luZGV4XS5vZmZzZXRXaWR0aDsgLy8gd2lkdGggZm9yIHRoZSBkZWZhdWx0IGZvbnRcbiAgICAgICAgZGVmYXVsdEhlaWdodFtiYXNlRm9udHNbaW5kZXhdXSA9IGJhc2VGb250c1NwYW5zW2luZGV4XS5vZmZzZXRIZWlnaHQ7IC8vIGhlaWdodCBmb3IgdGhlIGRlZmF1bHQgZm9udFxuICAgIH1cbiAgICAvLyBjcmVhdGUgc3BhbnMgZm9yIGZvbnRzIHRvIGRldGVjdFxuICAgIHZhciBmb250c1NwYW5zID0gaW5pdGlhbGl6ZUZvbnRzU3BhbnMoKTtcbiAgICAvLyBhZGQgYWxsIHRoZSBzcGFucyB0byB0aGUgRE9NXG4gICAgaC5hcHBlbmRDaGlsZChmb250c0Rpdik7XG4gICAgLy8gY2hlY2sgYXZhaWxhYmxlIGZvbnRzXG4gICAgdmFyIGF2YWlsYWJsZSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZm9udExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0ZvbnRBdmFpbGFibGUoZm9udHNTcGFuc1tmb250TGlzdFtpXV0pKSB7XG4gICAgICAgICAgICBhdmFpbGFibGUucHVzaChmb250TGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVtb3ZlIHNwYW5zIGZyb20gRE9NXG4gICAgaC5yZW1vdmVDaGlsZChmb250c0Rpdik7XG4gICAgaC5yZW1vdmVDaGlsZChiYXNlRm9udHNEaXYpO1xuICAgIHJldHVybiBhdmFpbGFibGU7XG59XG5cbmZ1bmN0aW9uIGdldFBsdWdpbnMoKSB7XG4gICAgaWYgKGlzVHJpZGVudCgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFuYXZpZ2F0b3IucGx1Z2lucykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgcGx1Z2lucyA9IFtdO1xuICAgIC8vIFNhZmFyaSAxMCBkb2Vzbid0IHN1cHBvcnQgaXRlcmF0aW5nIG5hdmlnYXRvci5wbHVnaW5zIHdpdGggZm9yLi4ub2ZcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hdmlnYXRvci5wbHVnaW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwbHVnaW4gPSBuYXZpZ2F0b3IucGx1Z2luc1tpXTtcbiAgICAgICAgaWYgKCFwbHVnaW4pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtaW1lVHlwZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwbHVnaW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBtaW1lVHlwZSA9IHBsdWdpbltqXTtcbiAgICAgICAgICAgIG1pbWVUeXBlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBtaW1lVHlwZS50eXBlLFxuICAgICAgICAgICAgICAgIHN1ZmZpeGVzOiBtaW1lVHlwZS5zdWZmaXhlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbnMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBwbHVnaW4ubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwbHVnaW4uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBtaW1lVHlwZXM6IG1pbWVUeXBlcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwbHVnaW5zO1xufVxuXG5mdW5jdGlvbiBtYWtlQ2FudmFzQ29udGV4dCgpIHtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gMjQwO1xuICAgIGNhbnZhcy5oZWlnaHQgPSAxNDA7XG4gICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcbiAgICByZXR1cm4gW2NhbnZhcywgY2FudmFzLmdldENvbnRleHQoJzJkJyldO1xufVxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoY2FudmFzLCBjb250ZXh0KSB7XG4gICAgLy8gVE9ETzogbG9vayBpbnRvOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9CbG9iXG4gICAgcmV0dXJuICEhKGNvbnRleHQgJiYgY2FudmFzLnRvRGF0YVVSTCk7XG59XG5mdW5jdGlvbiBzYXZlKGNhbnZhcykge1xuICAgIC8vIFRPRE86IGxvb2sgaW50bzogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxDYW52YXNFbGVtZW50L3RvQmxvYlxuICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG59XG4vLyBodHRwczovL3d3dy5icm93c2VybGVha3MuY29tL2NhbnZhcyNob3ctZG9lcy1pdC13b3JrXG5mdW5jdGlvbiBnZXRDYW52YXNGaW5nZXJwcmludCgpIHtcbiAgICB2YXIgX2EgPSBtYWtlQ2FudmFzQ29udGV4dCgpLCBjYW52YXMgPSBfYVswXSwgY29udGV4dCA9IF9hWzFdO1xuICAgIGlmICghaXNTdXBwb3J0ZWQoY2FudmFzLCBjb250ZXh0KSkge1xuICAgICAgICByZXR1cm4geyB3aW5kaW5nOiBmYWxzZSwgZGF0YTogJycgfTtcbiAgICB9XG4gICAgLy8gZGV0ZWN0IGJyb3dzZXIgc3VwcG9ydCBvZiBjYW52YXMgd2luZGluZ1xuICAgIC8vIGh0dHA6Ly9ibG9ncy5hZG9iZS5jb20vd2VicGxhdGZvcm0vMjAxMy8wMS8zMC93aW5kaW5nLXJ1bGVzLWluLWNhbnZhcy9cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY2FudmFzL3dpbmRpbmcuanNcbiAgICBjb250ZXh0LnJlY3QoMCwgMCwgMTAsIDEwKTtcbiAgICBjb250ZXh0LnJlY3QoMiwgMiwgNiwgNik7XG4gICAgdmFyIHdpbmRpbmcgPSAhY29udGV4dC5pc1BvaW50SW5QYXRoKDUsIDUsICdldmVub2RkJyk7XG4gICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSAnYWxwaGFiZXRpYyc7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2Y2MCc7XG4gICAgY29udGV4dC5maWxsUmVjdCgxMjUsIDEsIDYyLCAyMCk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnIzA2OSc7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1ZhbHZlL2ZpbmdlcnByaW50anMyL2lzc3Vlcy82NlxuICAgIC8vIHRoaXMgY2FuIGFmZmVjdCBGUCBnZW5lcmF0aW9uIHdoZW4gYXBwbHlpbmcgZGlmZmVyZW50IENTUyBvbiBkaWZmZXJlbnQgd2Vic2l0ZXNcbiAgICBjb250ZXh0LmZvbnQgPSAnMTFwdCBuby1yZWFsLWZvbnQtMTIzJztcbiAgICAvLyB0aGUgY2hvaWNlIG9mIGVtb2ppcyBoYXMgYSBnaWdhbnRpYyBpbXBhY3Qgb24gcmVuZGVyaW5nIHBlcmZvcm1hbmNlIChlc3BlY2lhbGx5IGluIEZGKVxuICAgIC8vIHNvbWUgbmV3ZXIgZW1vamlzIGNhdXNlIGl0IHRvIHNsb3cgZG93biA1MC0yMDAgdGltZXNcbiAgICAvLyBjb250ZXh0LmZpbGxUZXh0KFwiQ3fniKhtIGZqb3JkYmFuayBcXHVkODNkXFx1ZGUwMyBnbHlcIiwgMiwgMTUpXG4gICAgdmFyIHByaW50ZWRUZXh0ID0gJ0N3bSBmam9yZGJhbmsgXFx1ZDgzZFxcdWRlMDMgZ2x5JztcbiAgICBjb250ZXh0LmZpbGxUZXh0KHByaW50ZWRUZXh0LCAyLCAxNSk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgxMDIsIDIwNCwgMCwgMC4yKSc7XG4gICAgY29udGV4dC5mb250ID0gJzE4cHQgQXJpYWwnO1xuICAgIGNvbnRleHQuZmlsbFRleHQocHJpbnRlZFRleHQsIDQsIDQ1KTtcbiAgICAvLyBjYW52YXMgYmxlbmRpbmdcbiAgICAvLyBodHRwOi8vYmxvZ3MuYWRvYmUuY29tL3dlYnBsYXRmb3JtLzIwMTMvMDEvMjgvYmxlbmRpbmctZmVhdHVyZXMtaW4tY2FudmFzL1xuICAgIC8vIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvTkRZVjgvMTYvXG4gICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnbXVsdGlwbHknO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYigyNTUsMCwyNTUpJztcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuYXJjKDUwLCA1MCwgNTAsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIGNvbnRleHQuZmlsbCgpO1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYigwLDI1NSwyNTUpJztcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQuYXJjKDEwMCwgNTAsIDUwLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBjb250ZXh0LmZpbGwoKTtcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2IoMjU1LDI1NSwwKSc7XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBjb250ZXh0LmFyYyg3NSwgMTAwLCA1MCwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5maWxsKCk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiKDI1NSwwLDI1NSknO1xuICAgIC8vIGNhbnZhcyB3aW5kaW5nXG4gICAgLy8gaHR0cDovL2Jsb2dzLmFkb2JlLmNvbS93ZWJwbGF0Zm9ybS8yMDEzLzAxLzMwL3dpbmRpbmctcnVsZXMtaW4tY2FudmFzL1xuICAgIC8vIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvTkRZVjgvMTkvXG4gICAgY29udGV4dC5hcmMoNzUsIDc1LCA3NSwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgIGNvbnRleHQuYXJjKDc1LCA3NSwgMjUsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICBjb250ZXh0LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aW5kaW5nOiB3aW5kaW5nLFxuICAgICAgICBkYXRhOiBzYXZlKGNhbnZhcyksXG4gICAgfTtcbn1cblxudmFyIG4kMSA9IG5hdmlnYXRvcjtcbnZhciB3JDMgPSB3aW5kb3c7XG4vKipcbiAqIFRoaXMgaXMgYSBjcnVkZSBhbmQgcHJpbWl0aXZlIHRvdWNoIHNjcmVlbiBkZXRlY3Rpb24uIEl0J3Mgbm90IHBvc3NpYmxlIHRvIGN1cnJlbnRseSByZWxpYWJseSBkZXRlY3QgdGhlIGF2YWlsYWJpbGl0eVxuICogb2YgYSB0b3VjaCBzY3JlZW4gd2l0aCBhIEpTLCB3aXRob3V0IGFjdHVhbGx5IHN1YnNjcmliaW5nIHRvIGEgdG91Y2ggZXZlbnQuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnN0dWNveC5jb20vYmxvZy95b3UtY2FudC1kZXRlY3QtYS10b3VjaHNjcmVlbi9cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvaXNzdWVzLzU0OFxuICovXG5mdW5jdGlvbiBnZXRUb3VjaFN1cHBvcnQoKSB7XG4gICAgdmFyIG1heFRvdWNoUG9pbnRzID0gMDtcbiAgICB2YXIgdG91Y2hFdmVudDtcbiAgICBpZiAobiQxLm1heFRvdWNoUG9pbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWF4VG91Y2hQb2ludHMgPSB0b0ludChuJDEubWF4VG91Y2hQb2ludHMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChuJDEubXNNYXhUb3VjaFBvaW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1heFRvdWNoUG9pbnRzID0gbiQxLm1zTWF4VG91Y2hQb2ludHM7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdUb3VjaEV2ZW50Jyk7XG4gICAgICAgIHRvdWNoRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICB0b3VjaEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0b3VjaFN0YXJ0ID0gJ29udG91Y2hzdGFydCcgaW4gdyQzO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1heFRvdWNoUG9pbnRzOiBtYXhUb3VjaFBvaW50cyxcbiAgICAgICAgdG91Y2hFdmVudDogdG91Y2hFdmVudCxcbiAgICAgICAgdG91Y2hTdGFydDogdG91Y2hTdGFydCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRPc0NwdSgpIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLm9zY3B1O1xufVxuXG52YXIgbiQyID0gbmF2aWdhdG9yO1xuZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VzKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgbGFuZ3VhZ2UgPSBuJDIubGFuZ3VhZ2UgfHwgbiQyLnVzZXJMYW5ndWFnZSB8fCBuJDIuYnJvd3Nlckxhbmd1YWdlIHx8IG4kMi5zeXN0ZW1MYW5ndWFnZTtcbiAgICBpZiAobGFuZ3VhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQucHVzaChbbGFuZ3VhZ2VdKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobiQyLmxhbmd1YWdlcykpIHtcbiAgICAgICAgLy8gU3RhcnRpbmcgZnJvbSBDaHJvbWl1bSA4NiwgdGhlcmUgaXMgb25seSBhIHNpbmdsZSB2YWx1ZSBpbiBgbmF2aWdhdG9yLmxhbmd1YWdlYCBpbiBJbmNvZ25pdG8gbW9kZTpcbiAgICAgICAgLy8gdGhlIHZhbHVlIG9mIGBuYXZpZ2F0b3IubGFuZ3VhZ2VgLiBUaGVyZWZvcmUgdGhlIHZhbHVlIGlzIGlnbm9yZWQgaW4gdGhpcyBicm93c2VyLlxuICAgICAgICBpZiAoIShpc0Nocm9taXVtKCkgJiYgaXNDaHJvbWl1bTg2T3JOZXdlcigpKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobiQyLmxhbmd1YWdlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG4kMi5sYW5ndWFnZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZXMgPSBuJDIubGFuZ3VhZ2VzO1xuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChsYW5ndWFnZXMuc3BsaXQoJywnKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29sb3JEZXB0aCgpIHtcbiAgICByZXR1cm4gd2luZG93LnNjcmVlbi5jb2xvckRlcHRoO1xufVxuXG5mdW5jdGlvbiBnZXREZXZpY2VNZW1vcnkoKSB7XG4gICAgLy8gYG5hdmlnYXRvci5kZXZpY2VNZW1vcnlgIGlzIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaW4gc29tZSB1bmlkZW50aWZpZWQgY2FzZXNcbiAgICByZXR1cm4gcmVwbGFjZU5hTih0b0Zsb2F0KG5hdmlnYXRvci5kZXZpY2VNZW1vcnkpLCB1bmRlZmluZWQpO1xufVxuXG52YXIgdyQ0ID0gd2luZG93O1xuZnVuY3Rpb24gZ2V0U2NyZWVuUmVzb2x1dGlvbigpIHtcbiAgICAvLyBTb21lIGJyb3dzZXJzIHJldHVybiBzY3JlZW4gcmVzb2x1dGlvbiBhcyBzdHJpbmdzLCBlLmcuIFwiMTIwMFwiLCBpbnN0ZWFkIG9mIGEgbnVtYmVyLCBlLmcuIDEyMDAuXG4gICAgLy8gSSBzdXNwZWN0IGl0J3MgZG9uZSBieSBjZXJ0YWluIHBsdWdpbnMgdGhhdCByYW5kb21pemUgYnJvd3NlciBwcm9wZXJ0aWVzIHRvIHByZXZlbnQgZmluZ2VycHJpbnRpbmcuXG4gICAgdmFyIGRpbWVuc2lvbnMgPSBbdG9JbnQodyQ0LnNjcmVlbi53aWR0aCksIHRvSW50KHckNC5zY3JlZW4uaGVpZ2h0KV07XG4gICAgZGltZW5zaW9ucy5zb3J0KCkucmV2ZXJzZSgpO1xuICAgIHJldHVybiBkaW1lbnNpb25zO1xufVxuXG52YXIgdyQ1ID0gd2luZG93O1xuZnVuY3Rpb24gZ2V0QXZhaWxhYmxlU2NyZWVuUmVzb2x1dGlvbigpIHtcbiAgICBpZiAodyQ1LnNjcmVlbi5hdmFpbFdpZHRoICYmIHckNS5zY3JlZW4uYXZhaWxIZWlnaHQpIHtcbiAgICAgICAgLy8gU29tZSBicm93c2VycyByZXR1cm4gc2NyZWVuIHJlc29sdXRpb24gYXMgc3RyaW5ncywgZS5nLiBcIjEyMDBcIiwgaW5zdGVhZCBvZiBhIG51bWJlciwgZS5nLiAxMjAwLlxuICAgICAgICAvLyBJIHN1c3BlY3QgaXQncyBkb25lIGJ5IGNlcnRhaW4gcGx1Z2lucyB0aGF0IHJhbmRvbWl6ZSBicm93c2VyIHByb3BlcnRpZXMgdG8gcHJldmVudCBmaW5nZXJwcmludGluZy5cbiAgICAgICAgdmFyIGRpbWVuc2lvbnMgPSBbdG9JbnQodyQ1LnNjcmVlbi5hdmFpbFdpZHRoKSwgdG9JbnQodyQ1LnNjcmVlbi5hdmFpbEhlaWdodCldO1xuICAgICAgICBkaW1lbnNpb25zLnNvcnQoKS5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBnZXRIYXJkd2FyZUNvbmN1cnJlbmN5KCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIHNvbWV0aW1lcyBoYXJkd2FyZSBjb25jdXJyZW5jeSBpcyBhIHN0cmluZ1xuICAgICAgICB2YXIgY29uY3VycmVuY3kgPSB0b0ludChuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSk7XG4gICAgICAgIHJldHVybiBpc05hTihjb25jdXJyZW5jeSkgPyAxIDogY29uY3VycmVuY3k7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXQoKSB7XG4gICAgdmFyIGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuICAgIC8vIFRoZSB0aW1lem9uZSBvZmZzZXQgbWF5IGNoYW5nZSBvdmVyIHRpbWUgZHVlIHRvIGRheWxpZ2h0IHNhdmluZyB0aW1lIChEU1QpIHNoaWZ0cy5cbiAgICAvLyBUaGUgbm9uLURTVCB0aW1lem9uZSBvZmZzZXQgaXMgdXNlZCBhcyB0aGUgcmVzdWx0IHRpbWV6b25lIG9mZnNldC5cbiAgICAvLyBTaW5jZSB0aGUgRFNUIHNlYXNvbiBkaWZmZXJzIGluIHRoZSBub3J0aGVybiBhbmQgdGhlIHNvdXRoZXJuIGhlbWlzcGhlcmVzLFxuICAgIC8vIGJvdGggSmFudWFyeSBhbmQgSnVseSB0aW1lem9uZXMgb2Zmc2V0cyBhcmUgY29uc2lkZXJlZC5cbiAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgLy8gYGdldFRpbWV6b25lT2Zmc2V0YCByZXR1cm5zIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGluIHNvbWUgdW5pZGVudGlmaWVkIGNhc2VzXG4gICAgdG9GbG9hdChuZXcgRGF0ZShjdXJyZW50WWVhciwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSksIHRvRmxvYXQobmV3IERhdGUoY3VycmVudFllYXIsIDYsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCkpKTtcbn1cblxudmFyIHckNiA9IHdpbmRvdztcbmZ1bmN0aW9uIGdldFRpbWV6b25lKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoKF9hID0gdyQ2LkludGwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5EYXRlVGltZUZvcm1hdCkge1xuICAgICAgICByZXR1cm4gbmV3IHckNi5JbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdldFNlc3Npb25TdG9yYWdlKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAhIXdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8qIFNlY3VyaXR5RXJyb3Igd2hlbiByZWZlcmVuY2luZyBpdCBtZWFucyBpdCBleGlzdHMgKi9cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03ODE0NDdcbmZ1bmN0aW9uIGdldExvY2FsU3RvcmFnZSgpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gISF3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvKiBTZWN1cml0eUVycm9yIHdoZW4gcmVmZXJlbmNpbmcgaXQgbWVhbnMgaXQgZXhpc3RzICovXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhlZERCKCkge1xuICAgIC8vIElFIGFuZCBFZGdlIGRvbid0IGFsbG93IGFjY2Vzc2luZyBpbmRleGVkREIgaW4gcHJpdmF0ZSBtb2RlLCB0aGVyZWZvcmUgSUUgYW5kIEVkZ2Ugd2lsbCBoYXZlIGRpZmZlcmVudFxuICAgIC8vIHZpc2l0b3IgaWRlbnRpZmllciBpbiBub3JtYWwgYW5kIHByaXZhdGUgbW9kZXMuXG4gICAgaWYgKGlzVHJpZGVudCgpIHx8IGlzRWRnZUhUTUwoKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gISF3aW5kb3cuaW5kZXhlZERCO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvKiBTZWN1cml0eUVycm9yIHdoZW4gcmVmZXJlbmNpbmcgaXQgbWVhbnMgaXQgZXhpc3RzICovXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3BlbkRhdGFiYXNlKCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5vcGVuRGF0YWJhc2U7XG59XG5cbmZ1bmN0aW9uIGdldENwdUNsYXNzKCkge1xuICAgIHJldHVybiBuYXZpZ2F0b3IuY3B1Q2xhc3M7XG59XG5cbi8qKlxuICogSXQgc2hvdWxkIGJlIGltcHJvdmVkIHRvIGhhbmRsZSBtb2NrIHZhbHVlIG9uIGlPUzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvaXNzdWVzLzUxNCNpc3N1ZWNvbW1lbnQtNzI3NzgyODQyXG4gKi9cbmZ1bmN0aW9uIGdldFBsYXRmb3JtKCkge1xuICAgIHJldHVybiBuYXZpZ2F0b3IucGxhdGZvcm07XG59XG5cbmZ1bmN0aW9uIGdldFBsdWdpbnNTdXBwb3J0KCkge1xuICAgIHJldHVybiBuYXZpZ2F0b3IucGx1Z2lucyAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9kdWN0U3ViKCkge1xuICAgIHJldHVybiBuYXZpZ2F0b3IucHJvZHVjdFN1Yjtcbn1cblxuZnVuY3Rpb24gZ2V0RW1wdHlFdmFsTGVuZ3RoKCkge1xuICAgIHJldHVybiBldmFsLnRvU3RyaW5nKCkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBnZXRFcnJvckZGKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93ICdhJztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGUudG9Tb3VyY2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRWZW5kb3IoKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvci52ZW5kb3I7XG59XG5cbmZ1bmN0aW9uIGdldENocm9tZSgpIHtcbiAgICByZXR1cm4gd2luZG93LmNocm9tZSAhPT0gdW5kZWZpbmVkO1xufVxuXG52YXIgZCQzID0gZG9jdW1lbnQ7XG4vKipcbiAqIG5hdmlnYXRvci5jb29raWVFbmFibGVkIGNhbm5vdCBkZXRlY3QgY3VzdG9tIG9yIG51YW5jZWQgY29va2llIGJsb2NraW5nIGNvbmZpZ3VyYXRpb25zLiBGb3IgZXhhbXBsZSwgd2hlbiBibG9ja2luZ1xuICogY29va2llcyB2aWEgdGhlIEFkdmFuY2VkIFByaXZhY3kgU2V0dGluZ3MgaW4gSUU5LCBpdCBhbHdheXMgcmV0dXJucyB0cnVlLiBBbmQgdGhlcmUgaGF2ZSBiZWVuIGlzc3VlcyBpbiB0aGUgcGFzdCB3aXRoXG4gKiBzaXRlLXNwZWNpZmljIGV4Y2VwdGlvbnMuIERvbid0IHJlbHkgb24gaXQuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29va2llcy5qcyBUYWtlbiBmcm9tIGhlcmVcbiAqL1xuZnVuY3Rpb24gYXJlQ29va2llc0VuYWJsZWQoKSB7XG4gICAgLy8gVGFrZW4gZnJvbSBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29va2llcy5qc1xuICAgIC8vIG5hdmlnYXRvci5jb29raWVFbmFibGVkIGNhbm5vdCBkZXRlY3QgY3VzdG9tIG9yIG51YW5jZWQgY29va2llIGJsb2NraW5nIGNvbmZpZ3VyYXRpb25zLiBGb3IgZXhhbXBsZSwgd2hlbiBibG9ja2luZ1xuICAgIC8vIGNvb2tpZXMgdmlhIHRoZSBBZHZhbmNlZCBQcml2YWN5IFNldHRpbmdzIGluIElFOSwgaXQgYWx3YXlzIHJldHVybnMgdHJ1ZS4gQW5kIHRoZXJlIGhhdmUgYmVlbiBpc3N1ZXMgaW4gdGhlIHBhc3RcbiAgICAvLyB3aXRoIHNpdGUtc3BlY2lmaWMgZXhjZXB0aW9ucy4gRG9uJ3QgcmVseSBvbiBpdC5cbiAgICAvLyB0cnkuLmNhdGNoIGJlY2F1c2Ugc29tZSBpbiBzaXR1YXRpb25zIGBkb2N1bWVudC5jb29raWVgIGlzIGV4cG9zZWQgYnV0IHRocm93cyBhXG4gICAgLy8gU2VjdXJpdHlFcnJvciBpZiB5b3UgdHJ5IHRvIGFjY2VzcyBpdDsgZS5nLiBkb2N1bWVudHMgY3JlYXRlZCBmcm9tIGRhdGEgVVJJc1xuICAgIC8vIG9yIGluIHNhbmRib3hlZCBpZnJhbWVzIChkZXBlbmRpbmcgb24gZmxhZ3MvY29udGV4dClcbiAgICB0cnkge1xuICAgICAgICAvLyBDcmVhdGUgY29va2llXG4gICAgICAgIGQkMy5jb29raWUgPSAnY29va2lldGVzdD0xOyBTYW1lU2l0ZT1TdHJpY3Q7JztcbiAgICAgICAgdmFyIHJlc3VsdCA9IGQkMy5jb29raWUuaW5kZXhPZignY29va2lldGVzdD0nKSAhPT0gLTE7XG4gICAgICAgIC8vIERlbGV0ZSBjb29raWVcbiAgICAgICAgZCQzLmNvb2tpZSA9ICdjb29raWV0ZXN0PTE7IFNhbWVTaXRlPVN0cmljdDsgZXhwaXJlcz1UaHUsIDAxLUphbi0xOTcwIDAwOjAwOjAxIEdNVCc7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGxpc3Qgb2YgZW50cm9weSBzb3VyY2VzIHVzZWQgdG8gbWFrZSB2aXNpdG9yIGlkZW50aWZpZXJzLlxuICpcbiAqIFRoaXMgdmFsdWUgaXNuJ3QgcmVzdHJpY3RlZCBieSBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGl0IG1heSBiZSBjaGFuZ2VkIHdpdGhvdXQgYnVtcGluZyBtaW5vciBvciBtYWpvciB2ZXJzaW9uIG9mXG4gKiB0aGlzIHBhY2thZ2UuXG4gKi9cbnZhciBzb3VyY2VzID0ge1xuICAgIC8vIEV4cGVjdGVkIGVycm9ycyBhbmQgZGVmYXVsdCB2YWx1ZXMgbXVzdCBiZSBoYW5kbGVkIGluc2lkZSB0aGUgZnVuY3Rpb25zLiBVbmV4cGVjdGVkIGVycm9ycyBtdXN0IGJlIHRocm93bi5cbiAgICBvc0NwdTogZ2V0T3NDcHUsXG4gICAgbGFuZ3VhZ2VzOiBnZXRMYW5ndWFnZXMsXG4gICAgY29sb3JEZXB0aDogZ2V0Q29sb3JEZXB0aCxcbiAgICBkZXZpY2VNZW1vcnk6IGdldERldmljZU1lbW9yeSxcbiAgICBzY3JlZW5SZXNvbHV0aW9uOiBnZXRTY3JlZW5SZXNvbHV0aW9uLFxuICAgIGF2YWlsYWJsZVNjcmVlblJlc29sdXRpb246IGdldEF2YWlsYWJsZVNjcmVlblJlc29sdXRpb24sXG4gICAgaGFyZHdhcmVDb25jdXJyZW5jeTogZ2V0SGFyZHdhcmVDb25jdXJyZW5jeSxcbiAgICB0aW1lem9uZU9mZnNldDogZ2V0VGltZXpvbmVPZmZzZXQsXG4gICAgdGltZXpvbmU6IGdldFRpbWV6b25lLFxuICAgIHNlc3Npb25TdG9yYWdlOiBnZXRTZXNzaW9uU3RvcmFnZSxcbiAgICBsb2NhbFN0b3JhZ2U6IGdldExvY2FsU3RvcmFnZSxcbiAgICBpbmRleGVkREI6IGdldEluZGV4ZWREQixcbiAgICBvcGVuRGF0YWJhc2U6IGdldE9wZW5EYXRhYmFzZSxcbiAgICBjcHVDbGFzczogZ2V0Q3B1Q2xhc3MsXG4gICAgcGxhdGZvcm06IGdldFBsYXRmb3JtLFxuICAgIHBsdWdpbnM6IGdldFBsdWdpbnMsXG4gICAgY2FudmFzOiBnZXRDYW52YXNGaW5nZXJwcmludCxcbiAgICAvLyBhZEJsb2NrOiBpc0FkYmxvY2tVc2VkLCAvLyBodHRwczovL2dpdGh1Yi5jb20vZmluZ2VycHJpbnRqcy9maW5nZXJwcmludGpzL2lzc3Vlcy80MDVcbiAgICB0b3VjaFN1cHBvcnQ6IGdldFRvdWNoU3VwcG9ydCxcbiAgICBmb250czogZ2V0Rm9udHMsXG4gICAgYXVkaW86IGdldEF1ZGlvRmluZ2VycHJpbnQsXG4gICAgcGx1Z2luc1N1cHBvcnQ6IGdldFBsdWdpbnNTdXBwb3J0LFxuICAgIHByb2R1Y3RTdWI6IGdldFByb2R1Y3RTdWIsXG4gICAgZW1wdHlFdmFsTGVuZ3RoOiBnZXRFbXB0eUV2YWxMZW5ndGgsXG4gICAgZXJyb3JGRjogZ2V0RXJyb3JGRixcbiAgICB2ZW5kb3I6IGdldFZlbmRvcixcbiAgICBjaHJvbWU6IGdldENocm9tZSxcbiAgICBjb29raWVzRW5hYmxlZDogYXJlQ29va2llc0VuYWJsZWQsXG59O1xuLyoqXG4gKiBHZXRzIGEgY29tcG9uZW50cyBsaXN0IGZyb20gdGhlIGdpdmVuIGxpc3Qgb2YgZW50cm9weSBzb3VyY2VzLlxuICpcbiAqIFdhcm5pbmcgZm9yIHBhY2thZ2UgdXNlcnM6XG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG91dCBvZiBTZW1hbnRpYyBWZXJzaW9uaW5nLCBpLmUuIGNhbiBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2FnZSBpcyBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRzKHNvdXJjZXMsIHNvdXJjZU9wdGlvbnMsIGV4Y2x1ZGVTb3VyY2VzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGltZXN0YW1wLCBjb21wb25lbnRzLCBfaSwgX2EsIHNvdXJjZUtleSwgcmVzdWx0LCBlcnJvcl8xLCBuZXh0VGltZXN0YW1wO1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHNvdXJjZXMpO1xuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShfaSA8IF9hLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VLZXkgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhjbHVkZXMoZXhjbHVkZVNvdXJjZXMsIHNvdXJjZUtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsyLCA0LCAsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgX2IgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc291cmNlc1tzb3VyY2VLZXldKHNvdXJjZU9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChfYi52YWx1ZSA9IF9jLnNlbnQoKSwgX2IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGVycm9yXzEgJiYgdHlwZW9mIGVycm9yXzEgPT09ICdvYmplY3QnICYmICdtZXNzYWdlJyBpbiBlcnJvcl8xID8geyBlcnJvcjogZXJyb3JfMSB9IDogeyBlcnJvcjogeyBtZXNzYWdlOiBlcnJvcl8xIH0gfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBuZXh0VGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tzb3VyY2VLZXldID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJlc3VsdCksIHsgZHVyYXRpb246IG5leHRUaW1lc3RhbXAgLSB0aW1lc3RhbXAgfSk7IC8vIFR5cGVTY3JpcHQgaGFzIGJlYXRlbiBtZSBoZXJlXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IG5leHRUaW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gNjtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbXBvbmVudHNdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKlxuICogQ29sbGVjdHMgZW50cm9weSBjb21wb25lbnRzIGZyb20gdGhlIGJ1aWx0LWluIHNvdXJjZXMgdG8gbWFrZSB0aGUgdmlzaXRvciBpZGVudGlmaWVyLlxuICovXG5mdW5jdGlvbiBnZXRCdWlsdGluQ29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gZ2V0Q29tcG9uZW50cyhzb3VyY2VzLCB1bmRlZmluZWQsIFtdKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50c1RvQ2Fub25pY2FsU3RyaW5nKGNvbXBvbmVudHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudHMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgY29tcG9uZW50S2V5ID0gX2FbX2ldO1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gY29tcG9uZW50c1tjb21wb25lbnRLZXldO1xuICAgICAgICB2YXIgdmFsdWUgPSBjb21wb25lbnQuZXJyb3IgPyAnZXJyb3InIDogSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50LnZhbHVlKTtcbiAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyAocmVzdWx0ID8gJ3wnIDogJycpICsgY29tcG9uZW50S2V5LnJlcGxhY2UoLyhbOnxcXFxcXSkvZywgJ1xcXFwkMScpICsgXCI6XCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudHNUb0RlYnVnU3RyaW5nKGNvbXBvbmVudHMpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50cywgZnVuY3Rpb24gKF9rZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JUb09iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sIDIpO1xufVxuZnVuY3Rpb24gaGFzaENvbXBvbmVudHMoY29tcG9uZW50cykge1xuICAgIHJldHVybiB4NjRoYXNoMTI4KGNvbXBvbmVudHNUb0Nhbm9uaWNhbFN0cmluZyhjb21wb25lbnRzKSk7XG59XG4vKipcbiAqIE1ha2VzIGEgR2V0UmVzdWx0IGltcGxlbWVudGF0aW9uIHRoYXQgY2FsY3VsYXRlcyB0aGUgdmlzaXRvciBpZCBoYXNoIG9uIGRlbWFuZC5cbiAqIERlc2lnbmVkIGZvciBvcHRpbWlzYXRpb24uXG4gKi9cbmZ1bmN0aW9uIG1ha2VMYXp5R2V0UmVzdWx0KGNvbXBvbmVudHMpIHtcbiAgICB2YXIgdmlzaXRvcklkQ2FjaGU7XG4gICAgLy8gQSBwbGFpbiBjbGFzcyBpc24ndCB1c2VkIGJlY2F1c2UgaXRzIGdldHRlcnMgYW5kIHNldHRlcnMgYXJlbid0IGVudW1lcmFibGUuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgICAgZ2V0IHZpc2l0b3JJZCgpIHtcbiAgICAgICAgICAgIGlmICh2aXNpdG9ySWRDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmlzaXRvcklkQ2FjaGUgPSBoYXNoQ29tcG9uZW50cyh0aGlzLmNvbXBvbmVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3JJZENhY2hlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdmlzaXRvcklkKHZpc2l0b3JJZCkge1xuICAgICAgICAgICAgdmlzaXRvcklkQ2FjaGUgPSB2aXNpdG9ySWQ7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogVGhlIGNsYXNzIGlzbid0IGV4cG9ydGVkIGZyb20gdGhlIGluZGV4IGZpbGUgdG8gbm90IGV4cG9zZSB0aGUgY29uc3RydWN0b3IuXG4gKiBUaGUgaGlkaW5nIGdpdmVzIG1vcmUgZnJlZWRvbSBmb3IgZnV0dXJlIG5vbi1icmVha2luZyB1cGRhdGVzLlxuICovXG52YXIgT3BlbkFnZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9wZW5BZ2VudCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBPcGVuQWdlbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRzLCByZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEJ1aWx0aW5Db21wb25lbnRzKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbWFrZUxhenlHZXRSZXN1bHQoY29tcG9uZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nIGlzIG9rIGhlcmUgYmVjYXVzZSBpdCdzIHVuZGVyIGEgZGVidWcgY2xhdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvcHkgdGhlIHRleHQgYmVsb3cgdG8gZ2V0IHRoZSBkZWJ1ZyBkYXRhOlxcblxcbmBgYFxcbnZlcnNpb246IFwiICsgdmVyc2lvbiArIFwiXFxudXNlckFnZW50OiBcIiArIG5hdmlnYXRvci51c2VyQWdlbnQgKyBcIlxcbmdldE9wdGlvbnM6IFwiICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucywgdW5kZWZpbmVkLCAyKSArIFwiXFxudmlzaXRvcklkOiBcIiArIHJlc3VsdC52aXNpdG9ySWQgKyBcIlxcbmNvbXBvbmVudHM6IFwiICsgY29tcG9uZW50c1RvRGVidWdTdHJpbmcoY29tcG9uZW50cykgKyBcIlxcbmBgYFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBPcGVuQWdlbnQ7XG59KCkpO1xuLyoqXG4gKiBCdWlsZHMgYW4gaW5zdGFuY2Ugb2YgQWdlbnQgYW5kIHdhaXRzIGEgZGVsYXkgcmVxdWlyZWQgZm9yIGEgcHJvcGVyIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gbG9hZChfYSkge1xuICAgIHZhciBfYiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuZGVsYXlGYWxsYmFjaywgZGVsYXlGYWxsYmFjayA9IF9iID09PSB2b2lkIDAgPyA1MCA6IF9iO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogXG4gICAgICAgICAgICAgICAgLy8gQSBkZWxheSBpcyByZXF1aXJlZCB0byBlbnN1cmUgY29uc2lzdGVudCBlbnRyb3B5IGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvaXNzdWVzLzI1NFxuICAgICAgICAgICAgICAgIC8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vZmluZ2VycHJpbnRqcy9maW5nZXJwcmludGpzL2lzc3Vlcy8zMDdcbiAgICAgICAgICAgICAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ZpbmdlcnByaW50anMvZmluZ2VycHJpbnRqcy9jb21taXQvOTQ1NjMzZTdjNWY2N2FlMzhlYjBmZWEzNzM0OTcxMmYwZTY2OWIxOFxuICAgICAgICAgICAgICAgIC8vIEEgcHJvcGVyIGRlYWRsaW5lIGlzIHVua25vd24uIExldCBpdCBiZSB0d2ljZSB0aGUgZmFsbGJhY2sgdGltZW91dCBzbyB0aGF0IGJvdGggY2FzZXMgaGF2ZSB0aGUgc2FtZSBhdmVyYWdlIHRpbWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVxdWVzdElkbGVDYWxsYmFja0lmQXZhaWxhYmxlKGRlbGF5RmFsbGJhY2ssIGRlbGF5RmFsbGJhY2sgKiAyKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBBIGRlbGF5IGlzIHJlcXVpcmVkIHRvIGVuc3VyZSBjb25zaXN0ZW50IGVudHJvcHkgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvaXNzdWVzLzI1NFxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ZpbmdlcnByaW50anMvZmluZ2VycHJpbnRqcy9pc3N1ZXMvMzA3XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vZmluZ2VycHJpbnRqcy9maW5nZXJwcmludGpzL2NvbW1pdC85NDU2MzNlN2M1ZjY3YWUzOGViMGZlYTM3MzQ5NzEyZjBlNjY5YjE4XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgcHJvcGVyIGRlYWRsaW5lIGlzIHVua25vd24uIExldCBpdCBiZSB0d2ljZSB0aGUgZmFsbGJhY2sgdGltZW91dCBzbyB0aGF0IGJvdGggY2FzZXMgaGF2ZSB0aGUgc2FtZSBhdmVyYWdlIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBPcGVuQWdlbnQoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vLyBUaGUgZGVmYXVsdCBleHBvcnQgaXMgYSBzeW50YXggc3VnYXIgKGBpbXBvcnQgKiBhcyBGUCBmcm9tICcuLi4nIOKGkiBpbXBvcnQgRlAgZnJvbSAnLi4uJ2ApLlxuLy8gSXQgc2hvdWxkIGNvbnRhaW4gYWxsIHRoZSBwdWJsaWMgZXhwb3J0ZWQgdmFsdWVzLlxudmFyIGluZGV4ID0geyBsb2FkOiBsb2FkLCBoYXNoQ29tcG9uZW50czogaGFzaENvbXBvbmVudHMsIGNvbXBvbmVudHNUb0RlYnVnU3RyaW5nOiBjb21wb25lbnRzVG9EZWJ1Z1N0cmluZyB9O1xuLy8gVGhlIGV4cG9ydHMgYmVsb3cgYXJlIGZvciBwcml2YXRlIHVzYWdlLiBUaGV5IG1heSBjaGFuZ2UgdW5leHBlY3RlZGx5LiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrLlxuLyoqIE5vdCBkb2N1bWVudGVkLCBvdXQgb2YgU2VtYW50aWMgVmVyc2lvbmluZywgdXNhZ2UgaXMgYXQgeW91ciBvd24gcmlzayAqL1xudmFyIG11cm11clg2NEhhc2gxMjggPSB4NjRoYXNoMTI4O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IGNvbXBvbmVudHNUb0RlYnVnU3RyaW5nLCBnZXRDb21wb25lbnRzLCBoYXNoQ29tcG9uZW50cywgaXNDaHJvbWl1bSwgaXNEZXNrdG9wU2FmYXJpLCBpc0VkZ2VIVE1MLCBpc0dlY2tvLCBpc1RyaWRlbnQsIGlzV2ViS2l0LCBsb2FkLCBtdXJtdXJYNjRIYXNoMTI4IH07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQnKTtcbnZhciBlbnRyeVVuYmluZCA9IHJlcXVpcmUoJy4uLy4uL2ludGVybmFscy9lbnRyeS11bmJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRyeVVuYmluZCgnQXJyYXknLCAnZmluZCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKEZJTkQpO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=