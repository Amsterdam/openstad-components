/*! For license information please see reactions.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=91)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return v}));var r=n(3),o=n.n(r),i=n(0),a=n.n(i);n(75);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,a);var c=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var s=e.config||{};return s=m(s),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,s),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),r&&s(t,r),a}(a.a.Component);function m(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=m(e[t]))})),e}},function(e,t,n){"use strict";n(12),n(0),n(6),n(88);var r=n(3),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},ideasSort:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||"random"){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":(r=r||{lat:52.37104644463586,lng:900402911007405}).coordinates&&(r.lat=r.coordinates[0],r.lng=r.coordinates[1]),t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var u=0;u<c;++u){var s=o[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(74)(e))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(22))},function(e,t,n){"use strict";n(12),n(0),n(6),n(93);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(f,e);var t,n,r,s=u(f);function f(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,f);var r=l(t=s.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:null!=o(e.value)?e.value:"",error:null},t.onChange=e.onChange,t}return t=f,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),f}(r.a);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=g(e);if(t){var o=g(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=E(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&v(t.prototype,n),r&&v(t,r),i}(p),T=n(54),I=n(79),b=n.n(I),O=n(80),R=n.n(O),w=n(81),S=n.n(w),D=n(82),A=n.n(D);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object(T.registerPlugin)(b.a,R.a,S.a,A.a);var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r,o=C(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{name:"image",allowMultiple:!1,imageserver:{process:"/image",fetch:"/image"}});var n=[],r=e.value||[];return Array.isArray(r)||(r=[r]),r.forEach((function(e){var t="object"==P(e)?e.src:e;n.push({source:{url:t},options:{type:"local",file:{name:t},metadata:{poster:t}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"init",value:function(){}},{key:"updateUploadedFiles",value:function(e){e.addFile;var t=e.removeFile,n=e.next;if(this.imageuploader&&this.imageuploader.getFiles){var r=this.imageuploader.getFiles();t&&(r=r.filter((function(e){return e.serverId!=t.serverId}))),this.setState({uploadedFiles:r.map((function(e){return e.file}))},(function(){n&&n(r)}))}}},{key:"updateValue",value:function(e){var t=this,n=[],r=t.config.as&&"json"==t.config.as;e.forEach((function(e){try{var t="string"==typeof e.serverId?JSON.parse(e.serverId):e.serverId;n.push(r?{src:t.url}:t.url)}catch(e){console.log(e)}})),t.handleOnChange({name:t.config.name,value:n})}},{key:"render",value:function(){var e=this,t=this;return React.createElement(T.FilePond,{ref:function(t){return e.imageuploader=t},files:this.state.uploadedFiles,oninit:t.init,onprocessfile:function(e,n){return t.updateUploadedFiles({addFile:n,next:function(e){return t.updateValue(e)}})},onremovefile:function(e,n){return t.updateUploadedFiles({removeFile:n,next:function(e){return t.updateValue(e)}})},name:t.config.name,server:this.config.imageserver.process,allowMultiple:this.config.allowMultiple,acceptedFileTypes:["image/*"],allowFileSizeValidation:"true",allowReorder:!0,styleItemPanelAspectRatio:"1",maxFileSize:"8mb",maxFiles:"5",allowBrowse:"true",imageResizeTargetWidth:"80",imageResizeTargetHeight:"80",imageCropAspectRatio:"16:9",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"})}}])&&L(t.prototype,n),r&&L(t,r),i}(p);function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=q(e);if(t){var o=q(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return V(this,n)}}function V(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?B(e):t}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(i,e);var t,n,r,o=U(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(B(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&k(t.prototype,n),r&&k(t,r),i}(r.a);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function z(e,t){return(z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Q(e);if(t){var o=Q(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Z(this,n)}}function Z(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?K(e):t}function K(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Q(e){return(Q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&z(e,t)}(i,e);var t,n,r,o=X(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=K(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(K(t)),n.onInputFocus=n.onInputFocus.bind(K(t)),n.onInputBlur=n.onInputBlur.bind(K(t)),n.onInputKeyUp=n.onInputKeyUp.bind(K(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(Y,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&W(t.prototype,n),r&&W(t,r),i}(r.a);function $(e){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ie(e);if(t){var o=ie(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==$(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ie(e){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(i,e);var t,n,r,o=re(i);function i(){return ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&te(t.prototype,n),r&&te(t,r),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ue(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=de(e);if(t){var o=de(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var he=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(){return ue(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&se(t.prototype,n),r&&se(t,r),i}(p);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ge(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Te(e);if(t){var o=Te(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _e(this,n)}}function _e(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Te(e){return(Te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=ge(i);function i(){return me(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e,t){var n=e.description||e.title||e.value;return React.createElement("option",{value:e.value||"",key:"".concat(n,"-").concat(e.value,"-").concat(t)},n)}))),t)}}])&&Ee(t.prototype,n),r&&Ee(t,r),i}(p);function be(e){return(be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t){return(we=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Se(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ae(e);if(t){var o=Ae(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return De(this,n)}}function De(e,t){return!t||"object"!==be(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ae(e){return(Ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&we(e,t)}(i,e);var t,n,r,o=Se(i);function i(){return Oe(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&Re(t.prototype,n),r&&Re(t,r),i}(p);function Le(e){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=je(e);if(t){var o=je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ge(this,n)}}function Ge(e,t){return!t||"object"!==Le(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function je(e){return(je=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ke=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,r,o=xe(i);function i(){return Me(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Ce(t.prototype,n),r&&Ce(t,r),i}(p);function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ue(Object(n),!0).forEach((function(t){Be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ye(e,t){return(Ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function He(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Xe(e);if(t){var o=Xe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return We(this,n)}}function We(e,t){return!t||"object"!==Fe(t)&&"function"!=typeof t?ze(e):t}function ze(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ze=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ye(e,t)}(i,e);var t,n,r,o=He(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=ze(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.initValue||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(_,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(J,{config:Ve(Ve({},e.config),{},{inputType:"htmlarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(G,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(J,{config:Ve({inputType:"input"},e.config),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(he,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(ae,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(Ie,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Pe,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(ke,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(J,{config:Ve(Ve({},e.config),{},{inputType:"textarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;default:console.log("Form field "+e.config.inputType+"not yet implemented")}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&qe(t.prototype,n),r&&qe(t,r),i}(r.a);function Ke(e){return(Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return(et=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function tt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ot(e);if(t){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return nt(this,n)}}function nt(e,t){return!t||"object"!==Ke(t)&&"function"!=typeof t?rt(e):t}function rt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var it=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&et(e,t)}(i,e);var t,n,r,o=tt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=rt(t=o.call(this,e,{title:null,intro:null,fields:[]})),r=e.values;return!r&&n.config.fields&&n.config.fields.length&&(r={},n.config.fields.map((function(e,t){var n=e.name||e.title.toLowerCase();r[n]=e.value}))),n.state={values:r||{}},n.handleOnChange=n.handleOnChange.bind(rt(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=this,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qe(Object(n),!0).forEach((function(t){Je(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);n[e.name]=e.value,this.setState({values:n},(function(){"function"==typeof t.props.onChange&&t.props.onChange(e)}))}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Ze,Je({config:t,initValue:t.value,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&$e(t.prototype,n),r&&$e(t,r),i}(r.a);function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ut(e,t){return(ut=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function st(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pt(e);if(t){var o=pt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lt(this,n)}}function lt(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?ft(e):t}function ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pt(e){return(pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var dt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ut(e,t)}(i,e);var t,n,r,o=st(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(ft(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&ct(t.prototype,n),r&&ct(t,r),i}(r.a);t.a={Form:it,FormField:Ze,Hidden:_,ImageUpload:G,InputWithCounter:J,Postcode:he,Radios:ae,Select:Ie,Text:Pe,Textarea:ke,Slider:dt}},function(e,t){e.exports=window.ReactDOM},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(51).Promise},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function v(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=v(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=v(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=d(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var E=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(e,t){var n,r,o=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),E.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function g(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function _(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},m.call(y.prototype),m.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var e=new _(null,{status:0,statusText:""});return e.type="error",e};var T=[301,302,303,307,308];_.redirect=function(e,t){if(-1===T.indexOf(t))throw new RangeError("Invalid status code");return new _(null,{status:t,headers:{location:e}})};var I=self.DOMException;try{new I}catch(e){(I=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),I.prototype.constructor=I}function b(t,n){return new e((function(e,o){var i=new y(t,n);if(i.signal&&i.signal.aborted)return o(new I("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new _(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new I("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}b.polyfill=!0,self.fetch||(self.fetch=b,self.Headers=f,self.Request=y,self.Response=_)}).call(this,n(10))},function(e,t,n){var r=n(8),o=n(14),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(15),a=n(26),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(11);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(4),o=n(13);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,function(e,t,n){var r=n(8),o=n(56),i=n(25),a=n(17),c=n(26),u=n(7),s=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(11);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),o=n(11),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(4),o=n(18),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(60),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(63),o=n(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(17),i=n(36).indexOf,a=n(19);e.exports=function(e,t){var n,c=o(e),u=0,s=[];for(n in c)!r(a,n)&&r(c,n)&&s.push(n);for(;t.length>u;)r(c,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(17),o=n(48),i=n(65),a=function(e){return function(t,n,a){var c,u=r(t),s=o(u.length),l=i(a,s);if(e&&n!=n){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t,n){var r=n(4),o=n(24).f,i=n(13),a=n(57),c=n(18),u=n(61),s=n(67);e.exports=function(e,t){var n,l,f,p,d,h=e.target,v=e.global,m=e.stat;if(n=v?r:m?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=o(n,l))&&d.value:n[l],!s(v?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(n,l,p,e)}}},function(e,t,n){var r=n(50),o=n(70),i=n(14),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),a=Object.defineProperty,c={},u=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(s&&!r)return!0;var e={length:-1};s?a(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(4),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},,function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(68);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4),o=n(32),i=n(7),a=n(33),c=n(38),u=n(69),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||a;e.exports=function(e){return i(s,e)||(c&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,u=function(e,t){v[i]=e,v[i+1]=t,2===(i+=2)&&(c?c(m):T())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(m,1)}}var v=new Array(1e3);function m(){for(var e=0;e<i;e+=2)(0,v[e])(v[e+1]),v[e]=void 0,v[e+1]=void 0;i=0}var E,y,g,_,T=void 0;function I(e,t){var n=arguments,r=this,o=new this.constructor(R);void 0===o[O]&&U(o);var i,a=r._state;return a?(i=n[a-1],u((function(){return k(a,o,i,r._result)}))):N(r,o,e,t),o}function b(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(R);return P(t,e),t}p?T=function(){return t.nextTick(m)}:f?(y=0,g=new f(m),_=document.createTextNode(""),g.observe(_,{characterData:!0}),T=function(){_.data=y=++y%2}):d?((E=new MessageChannel).port1.onmessage=m,T=function(){return E.port2.postMessage(0)}):T=void 0===s?function(){try{var e=n(53);return a=e.runOnLoop||e.runOnContext,function(){a(m)}}catch(e){return h()}}():h();var O=Math.random().toString(36).substring(16);function R(){}var w=void 0,S=new G;function D(e){try{return e.then}catch(e){return S.error=e,S}}function A(t,n,r){n.constructor===t.constructor&&r===I&&n.constructor.resolve===b?function(e,t){1===t._state?M(e,t._result):2===t._state?C(e,t._result):N(t,void 0,(function(t){return P(e,t)}),(function(t){return C(e,t)}))}(t,n):r===S?C(t,S.error):void 0===r?M(t,n):e(r)?function(e,t,n){u((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?P(e,n):M(e,n))}),(function(t){r||(r=!0,C(e,t))}),e._label);!r&&o&&(r=!0,C(e,o))}),e)}(t,n,r):M(t,n)}function P(e,t){var n;e===t?C(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?A(e,t,D(t)):M(e,t)}function L(e){e._onerror&&e._onerror(e._result),x(e)}function M(e,t){e._state===w&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(x,e))}function C(e,t){e._state===w&&(e._state=2,e._result=t,u(L,e))}function N(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&u(x,e)}function x(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?k(n,r,o,i):o(i);e._subscribers.length=0}}function G(){this.error=null}var j=new G;function k(t,n,r,o){var i=e(r),a=void 0,c=void 0,u=void 0,s=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return j.error=e,j}}(r,o))===j?(s=!0,c=a.error,a=null):u=!0,n===a)return void C(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,u=!0;n._state!==w||(i&&u?P(n,a):s?C(n,c):1===t?M(n,a):2===t&&C(n,a))}var F=0;function U(e){e[O]=F++,e._state=void 0,e._result=void 0,e._subscribers=[]}function V(e,t){this._instanceConstructor=e,this.promise=new e(R),this.promise[O]||U(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?M(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&M(this.promise,this._result))):C(this.promise,new Error("Array Methods must be provided an Array"))}function B(e){this[O]=F++,this._result=this._state=void 0,this._subscribers=[],R!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof B?function(e,t){try{t((function(t){P(e,t)}),(function(t){C(e,t)}))}catch(t){C(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function q(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=B}return V.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===w&&n<e;n++)this._eachEntry(t[n],n)},V.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===b){var o=D(e);if(o===I&&e._state!==w)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===B){var i=new n(R);A(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},V.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===w&&(this._remaining--,2===e?C(r,n):this._result[t]=n),0===this._remaining&&M(r,this._result)},V.prototype._willSettleAt=function(e,t){var n=this;N(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},B.all=function(e){return new V(this,e).promise},B.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},B.resolve=b,B.reject=function(e){var t=new this(R);return C(t,e),t},B._setScheduler=function(e){c=e},B._setAsap=function(e){u=e},B._asap=u,B.prototype={constructor:B,then:I,catch:function(e){return this.then(null,e)}},q(),B.polyfill=q,B.Promise=B,B},e.exports=o()}).call(this,n(52),n(22))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=c(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||c(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FilePond=t.FileStatus=t.registerPlugin=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r},c=n(94);t.registerPlugin=c.registerPlugin,t.FileStatus=c.FileStatus;var u=(0,c.supported)(),s=["setOptions","on","off","onOnce","appendTo","insertAfter","insertBefore","isAttachedTo","replaceElement","restoreElement","destroy"];t.FilePond=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.allowFilesSync=!0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){var e=this;if(u){var t=Object.assign({},this.props);if(t.onupdatefiles){var n=t.onupdatefiles;t.onupdatefiles=function(t){e.allowFilesSync=!1,n(t)}}this._pond=(0,c.create)(this._element,t),Object.keys(this._pond).filter((function(e){return!s.includes(e)})).forEach((function(t){e[t]=e._pond[t]}))}}},{key:"componentWillUnmount",value:function(){this._pond&&(this._pond.destroy(),this.allowFilesSync=!0)}},{key:"shouldComponentUpdate",value:function(){return!!this.allowFilesSync||(this.allowFilesSync=!0,!1)}},{key:"componentDidUpdate",value:function(){if(this._pond){var e=Object.assign({},this.props);delete e.onupdatefiles,this._pond.setOptions(e)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,r=t.name,o=t.className,a=t.allowMultiple,c=t.required,u=t.captureMethod,s=t.acceptedFileTypes;return(0,i.createElement)("div",{className:"filepond--wrapper"},(0,i.createElement)("input",{type:"file",name:r,id:n,accept:s,multiple:a,required:c,className:o,capture:u,ref:function(t){return e._element=t}}))}}]),t}(a.default.Component)},,function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(4),o=n(13),i=n(7),a=n(18),c=n(29),u=n(58),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var u=!!c&&!!c.unsafe,s=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:o(e,t,n)):s?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(59),c=n(4),u=n(11),s=n(13),l=n(7),f=n(31),p=n(19),d=c.WeakMap;if(a){var h=new d,v=h.get,m=h.has,E=h.set;r=function(e,t){return E.call(h,e,t),t},o=function(e){return v.call(h,e)||{}},i=function(e){return m.call(h,e)}}else{var y=f("state");p[y]=!0,r=function(e,t){return s(e,y,t),t},o=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(4),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(62),i=n(24),a=n(14);e.exports=function(e,t){for(var n=o(t),c=a.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(e,l)||c(e,l,u(t,l))}}},function(e,t,n){var r=n(34),o=n(64),i=n(66),a=n(15);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(35),o=n(20).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==s||n!=u&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(15),i=n(71),a=n(20),c=n(19),u=n(73),s=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(14),i=n(15),a=n(72);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,u=0;c>u;)o.f(e,n=r[u++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(20);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(76);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){return/^image/.test(e.type)};function n(e){this.wrapped=e}function r(e){var r,o;function i(e,n){return new t((function(t,i){var c={key:e,arg:n,resolve:t,reject:i,next:null};o?o=o.next=c:(r=o=c,a(e,n))}))}function a(r,o){try{var i=e[r](o),u=i.value,s=u instanceof n;t.resolve(s?u.wrapped:u).then((function(e){s?a("next",e):c(i.done?"return":"normal",e)}),(function(e){a("throw",e)}))}catch(e){c("throw",e)}}function c(e,t){switch(e){case"return":r.resolve({value:t,done:!0});break;case"throw":r.reject(t);break;default:r.resolve({value:t,done:!1})}(r=r.next)?a(r.key,r.arg):o=null}this._invoke=i,"function"!=typeof e.return&&(this.return=void 0)}function o(e,t){return i(e)||a(e,t)||c()}function i(e){if(Array.isArray(e))return e}function a(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(r.prototype[Symbol.asyncIterator]=function(){return this}),r.prototype.next=function(e){return this._invoke("next",e)},r.prototype.throw=function(e){return this._invoke("throw",e)},r.prototype.return=function(e){return this._invoke("return",e)};var u=function(e,t){return p(e.x*t,e.y*t)},s=function(e,t){return p(e.x+t.x,e.y+t.y)},l=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y);return 0===t?{x:0,y:0}:p(e.x/t,e.y/t)},f=function(e,t,n){var r=Math.cos(t),o=Math.sin(t),i=p(e.x-n.x,e.y-n.y);return p(n.x+r*i.x-o*i.y,n.y+o*i.x+r*i.y)},p=function(){return{x:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,y:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}},d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0;return"string"==typeof e?parseFloat(e)*n:"number"==typeof e?e*(r?t[r]:Math.min(t.width,t.height)):void 0},h=function(e,t,n){var r=e.borderStyle||e.lineStyle||"solid",o=e.backgroundColor||e.fontColor||"transparent",i=e.borderColor||e.lineColor||"transparent",a=d(e.borderWidth||e.lineWidth,t,n);return{"stroke-linecap":e.lineCap||"round","stroke-linejoin":e.lineJoin||"round","stroke-width":a||0,"stroke-dasharray":"string"==typeof r?"":r.map((function(e){return d(e,t,n)})).join(","),stroke:i,fill:o,opacity:e.opacity||1}},v=function(e){return null!=e},m=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=d(e.x,t,n,"width")||d(e.left,t,n,"width"),o=d(e.y,t,n,"height")||d(e.top,t,n,"height"),i=d(e.width,t,n,"width"),a=d(e.height,t,n,"height"),c=d(e.right,t,n,"width"),u=d(e.bottom,t,n,"height");return v(o)||(o=v(a)&&v(u)?t.height-a-u:u),v(r)||(r=v(i)&&v(c)?t.width-i-c:c),v(i)||(i=v(r)&&v(c)?t.width-r-c:0),v(a)||(a=v(o)&&v(u)?t.height-o-u:0),{x:r||0,y:o||0,width:i||0,height:a||0}},E=function(e){return e.map((function(e,t){return"".concat(0===t?"M":"L"," ").concat(e.x," ").concat(e.y)})).join(" ")},y=function(e,t){return Object.keys(t).forEach((function(n){return e.setAttribute(n,t[n])}))},g="http://www.w3.org/2000/svg",_=function(e,t){var n=document.createElementNS(g,e);return t&&y(n,t),n},T=function(e){return y(e,Object.assign({},e.rect,e.styles))},I=function(e){var t=e.rect.x+.5*e.rect.width,n=e.rect.y+.5*e.rect.height,r=.5*e.rect.width,o=.5*e.rect.height;return y(e,Object.assign({cx:t,cy:n,rx:r,ry:o},e.styles))},b={contain:"xMidYMid meet",cover:"xMidYMid slice"},O=function(e,t){y(e,Object.assign({},e.rect,e.styles,{preserveAspectRatio:b[t.fit]||"none"}))},R={left:"start",center:"middle",right:"end"},w=function(e,t,n,r){var o=d(t.fontSize,n,r),i=t.fontFamily||"sans-serif",a=t.fontWeight||"normal",c=R[t.textAlign]||"start";y(e,Object.assign({},e.rect,e.styles,{"stroke-width":0,"font-weight":a,"font-size":o,"font-family":i,"text-anchor":c})),e.text!==t.text&&(e.text=t.text,e.textContent=t.text.length?t.text:" ")},S=function(e,t,n,r){y(e,Object.assign({},e.rect,e.styles,{fill:"none"}));var o=e.childNodes[0],i=e.childNodes[1],a=e.childNodes[2],c=e.rect,p={x:e.rect.x+e.rect.width,y:e.rect.y+e.rect.height};if(y(o,{x1:c.x,y1:c.y,x2:p.x,y2:p.y}),t.lineDecoration){i.style.display="none",a.style.display="none";var h=l({x:p.x-c.x,y:p.y-c.y}),v=d(.05,n,r);if(-1!==t.lineDecoration.indexOf("arrow-begin")){var m=u(h,v),E=s(c,m),g=f(c,2,E),_=f(c,-2,E);y(i,{style:"display:block;",d:"M".concat(g.x,",").concat(g.y," L").concat(c.x,",").concat(c.y," L").concat(_.x,",").concat(_.y)})}if(-1!==t.lineDecoration.indexOf("arrow-end")){var T=u(h,-v),I=s(p,T),b=f(p,2,I),O=f(p,-2,I);y(a,{style:"display:block;",d:"M".concat(b.x,",").concat(b.y," L").concat(p.x,",").concat(p.y," L").concat(O.x,",").concat(O.y)})}}},D=function(e,t,n,r){y(e,Object.assign({},e.styles,{fill:"none",d:E(t.points.map((function(e){return{x:d(e.x,n,r,"width"),y:d(e.y,n,r,"height")}})))}))},A=function(e){return function(t){return _(e,{id:t.id})}},P=function(e){var t=_("g",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round"}),n=_("line");t.appendChild(n);var r=_("path");t.appendChild(r);var o=_("path");return t.appendChild(o),t},L={image:function(e){var t=_("image",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round",opacity:"0"});return t.onload=function(){t.setAttribute("opacity",e.opacity||1)},t.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",e.src),t},rect:A("rect"),ellipse:A("ellipse"),text:A("text"),path:A("path"),line:P},M={rect:T,ellipse:I,image:O,text:w,path:D,line:S},C=function(e,t){return L[e](t)},N=function(e,t,n,r,o){"path"!==t&&(e.rect=m(n,r,o)),e.styles=h(n,r,o),M[t](e,n,r,o)},x=["x","y","left","top","right","bottom","width","height"],G=function(e){return"string"==typeof e&&/%/.test(e)?parseFloat(e)/100:e},j=function(e){var t=o(e,2),n=t[0],r=t[1],i=r.points?{}:x.reduce((function(e,t){return e[t]=G(r[t]),e}),{});return[n,Object.assign({zIndex:0},r,i)]},k=function(e,t){return e[1].zIndex>t[1].zIndex?1:e[1].zIndex<t[1].zIndex?-1:0},F=function(e){return e.utils.createView({name:"image-preview-markup",tag:"svg",ignoreRect:!0,mixins:{apis:["width","height","crop","markup","resize","dirty"]},write:function(e){var t=e.root,n=e.props;if(n.dirty){var r=n.crop,i=n.resize,a=n.markup,c=n.width,u=n.height,s=r.width,l=r.height;if(i){var f=i.size,p=f&&f.width,d=f&&f.height,h=i.mode,v=i.upscale;p&&!d&&(d=p),d&&!p&&(p=d);var m=s<p&&l<d;if(!m||m&&v){var E,y=p/s,g=d/l;"force"===h?(s=p,l=d):("cover"===h?E=Math.max(y,g):"contain"===h&&(E=Math.min(y,g)),s*=E,l*=E)}}var _={width:c,height:u};t.element.setAttribute("width",_.width),t.element.setAttribute("height",_.height);var T=Math.min(c/s,u/l);t.element.innerHTML="";var I=t.query("GET_IMAGE_PREVIEW_MARKUP_FILTER");a.filter(I).map(j).sort(k).forEach((function(e){var n=o(e,2),r=n[0],i=n[1],a=C(r,i);N(a,r,i,_,T),t.element.appendChild(a)}))}}})},U=function(e,t){return{x:e,y:t}},V=function(e,t){return e.x*t.x+e.y*t.y},B=function(e,t){return U(e.x-t.x,e.y-t.y)},q=function(e,t){return V(B(e,t),B(e,t))},Y=function(e,t){return Math.sqrt(q(e,t))},H=function(e,t){var n=e,r=1.5707963267948966,o=t,i=1.5707963267948966-t,a=Math.sin(r),c=Math.sin(o),u=Math.sin(i),s=Math.cos(i),l=n/a;return U(s*(l*c),s*(l*u))},W=function(e,t){var n=e.width,r=e.height,o=H(n,t),i=H(r,t),a=U(e.x+Math.abs(o.x),e.y-Math.abs(o.y)),c=U(e.x+e.width+Math.abs(i.y),e.y+Math.abs(i.x)),u=U(e.x-Math.abs(i.y),e.y+e.height-Math.abs(i.x));return{width:Y(a,c),height:Y(a,u)}},z=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=e.height/e.width,o=1,i=t,a=1,c=r;c>i&&(a=(c=i)/r);var u=Math.max(o/a,i/c),s=e.width/(n*u*a);return{width:s,height:s*t}},X=function(e,t,n,r){var o=r.x>.5?1-r.x:r.x,i=r.y>.5?1-r.y:r.y,a=2*o*e.width,c=2*i*e.height,u=W(t,n);return Math.max(u.width/a,u.height/c)},Z=function(e,t){var n=e.width,r=n*t;return r>e.height&&(n=(r=e.height)/t),{x:.5*(e.width-n),y:.5*(e.height-r),width:n,height:r}},K=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.zoom,r=t.rotation,o=t.center,i=t.aspectRatio;i||(i=e.height/e.width);var a=z(e,i,n),c={x:.5*a.width,y:.5*a.height},u={x:0,y:0,width:a.width,height:a.height,center:c},s=void 0===t.scaleToFit||t.scaleToFit,l=n*X(e,Z(u,i),r,s?o:{x:.5,y:.5});return{widthFloat:a.width/l,heightFloat:a.height/l,width:Math.round(a.width/l),height:Math.round(a.height/l)}},Q={type:"spring",stiffness:.5,damping:.45,mass:10},J=function(e){return e.utils.createView({name:"image-bitmap",ignoreRect:!0,mixins:{styles:["scaleX","scaleY"]},create:function(e){var t=e.root,n=e.props;t.appendChild(n.image)}})},$=function(e){return e.utils.createView({name:"image-canvas-wrapper",tag:"div",ignoreRect:!0,mixins:{apis:["crop","width","height"],styles:["originX","originY","translateX","translateY","scaleX","scaleY","rotateZ"],animations:{originX:Q,originY:Q,scaleX:Q,scaleY:Q,translateX:Q,translateY:Q,rotateZ:Q}},create:function(t){var n=t.root,r=t.props;r.width=r.image.width,r.height=r.image.height,n.ref.bitmap=n.appendChildView(n.createChildView(J(e),{image:r.image}))},write:function(e){var t=e.root,n=e.props.crop.flip,r=t.ref.bitmap;r.scaleX=n.horizontal?-1:1,r.scaleY=n.vertical?-1:1}})},ee=function(e){return e.utils.createView({name:"image-clip",tag:"div",ignoreRect:!0,mixins:{apis:["crop","markup","resize","width","height","dirty","background"],styles:["width","height","opacity"],animations:{opacity:{type:"tween",duration:250}}},didWriteView:function(e){var t=e.root,n=e.props;n.background&&(t.element.style.backgroundColor=n.background)},create:function(t){var n=t.root,r=t.props;n.ref.image=n.appendChildView(n.createChildView($(e),Object.assign({},r))),n.ref.createMarkup=function(){n.ref.markup||(n.ref.markup=n.appendChildView(n.createChildView(F(e),Object.assign({},r))))},n.ref.destroyMarkup=function(){n.ref.markup&&(n.removeChildView(n.ref.markup),n.ref.markup=null)};var o=n.query("GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR");null!==o&&(n.element.dataset.transparencyIndicator="grid"===o?o:"color")},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=n.crop,i=n.markup,a=n.resize,c=n.dirty,u=n.width,s=n.height;t.ref.image.crop=o;var l={x:0,y:0,width:u,height:s,center:{x:.5*u,y:.5*s}},f={width:t.ref.image.width,height:t.ref.image.height},p={x:o.center.x*f.width,y:o.center.y*f.height},d={x:l.center.x-f.width*o.center.x,y:l.center.y-f.height*o.center.y},h=2*Math.PI+o.rotation%(2*Math.PI),v=o.aspectRatio||f.height/f.width,m=void 0===o.scaleToFit||o.scaleToFit,E=X(f,Z(l,v),h,m?o.center:{x:.5,y:.5}),y=o.zoom*E;i&&i.length?(t.ref.createMarkup(),t.ref.markup.width=u,t.ref.markup.height=s,t.ref.markup.resize=a,t.ref.markup.dirty=c,t.ref.markup.markup=i,t.ref.markup.crop=K(f,o)):t.ref.markup&&t.ref.destroyMarkup();var g=t.ref.image;if(r)return g.originX=null,g.originY=null,g.translateX=null,g.translateY=null,g.rotateZ=null,g.scaleX=null,void(g.scaleY=null);g.originX=p.x,g.originY=p.y,g.translateX=d.x,g.translateY=d.y,g.rotateZ=h,g.scaleX=y,g.scaleY=y}})},te=function(e){return e.utils.createView({name:"image-preview",tag:"div",ignoreRect:!0,mixins:{apis:["image","crop","markup","resize","dirty","background"],styles:["translateY","scaleX","scaleY","opacity"],animations:{scaleX:Q,scaleY:Q,translateY:Q,opacity:{type:"tween",duration:400}}},create:function(t){var n=t.root,r=t.props;n.ref.clip=n.appendChildView(n.createChildView(ee(e),{id:r.id,image:r.image,crop:r.crop,markup:r.markup,resize:r.resize,dirty:r.dirty,background:r.background}))},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=t.ref.clip,i=n.image,a=n.crop,c=n.markup,u=n.resize,s=n.dirty;if(o.crop=a,o.markup=c,o.resize=u,o.dirty=s,o.opacity=r?0:1,!r&&!t.rect.element.hidden){var l=i.height/i.width,f=a.aspectRatio||l,p=t.rect.inner.width,d=t.rect.inner.height,h=t.query("GET_IMAGE_PREVIEW_HEIGHT"),v=t.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),m=t.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),E=t.query("GET_PANEL_ASPECT_RATIO"),y=t.query("GET_ALLOW_MULTIPLE");E&&!y&&(h=p*E,f=E);var g=null!==h?h:Math.max(v,Math.min(p*f,m)),_=g/f;_>p&&(g=(_=p)*f),g>d&&(g=d,_=d/f),o.width=_,o.height=g}}})},ne='<svg width="500" height="200" viewBox="0 0 500 200" preserveAspectRatio="none">\n    <defs>\n        <radialGradient id="gradient-__UID__" cx=".5" cy="1.25" r="1.15">\n            <stop offset=\'50%\' stop-color=\'#000000\'/>\n            <stop offset=\'56%\' stop-color=\'#0a0a0a\'/>\n            <stop offset=\'63%\' stop-color=\'#262626\'/>\n            <stop offset=\'69%\' stop-color=\'#4f4f4f\'/>\n            <stop offset=\'75%\' stop-color=\'#808080\'/>\n            <stop offset=\'81%\' stop-color=\'#b1b1b1\'/>\n            <stop offset=\'88%\' stop-color=\'#dadada\'/>\n            <stop offset=\'94%\' stop-color=\'#f6f6f6\'/>\n            <stop offset=\'100%\' stop-color=\'#ffffff\'/>\n        </radialGradient>\n        <mask id="mask-__UID__">\n            <rect x="0" y="0" width="500" height="200" fill="url(#gradient-__UID__)"></rect>\n        </mask>\n    </defs>\n    <rect x="0" width="500" height="200" fill="currentColor" mask="url(#mask-__UID__)"></rect>\n</svg>',re=!1,oe=0,ie=function(e){return e.utils.createView({name:"image-preview-overlay",tag:"div",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;!re&&document.querySelector("base")&&(ne=ne.replace(/url\(\#/g,"url("+window.location.href.replace(window.location.hash,"")+"#"),re=!0),oe++,t.element.classList.add("filepond--image-preview-overlay-".concat(n.status)),t.element.innerHTML=ne.replace(/__UID__/g,oe)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},ae=function(){self.onmessage=function(e){createImageBitmap(e.data.message.file).then((function(t){self.postMessage({id:e.data.id,message:t},[t])}))}},ce=function(){self.onmessage=function(e){for(var t=e.data.message.imageData,n=e.data.message.colorMatrix,r=t.data,o=r.length,i=n[0],a=n[1],c=n[2],u=n[3],s=n[4],l=n[5],f=n[6],p=n[7],d=n[8],h=n[9],v=n[10],m=n[11],E=n[12],y=n[13],g=n[14],_=n[15],T=n[16],I=n[17],b=n[18],O=n[19],R=0,w=0,S=0,D=0,A=0;R<o;R+=4)w=r[R]/255,S=r[R+1]/255,D=r[R+2]/255,A=r[R+3]/255,r[R]=Math.max(0,Math.min(255*(w*i+S*a+D*c+A*u+s),255)),r[R+1]=Math.max(0,Math.min(255*(w*l+S*f+D*p+A*d+h),255)),r[R+2]=Math.max(0,Math.min(255*(w*v+S*m+D*E+A*y+g),255)),r[R+3]=Math.max(0,Math.min(255*(w*_+S*T+D*I+A*b+O),255));self.postMessage({id:e.data.id,message:t},[t.data.buffer])}},ue=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},se={1:function(){return[1,0,0,1,0,0]},2:function(e){return[-1,0,0,1,e,0]},3:function(e,t){return[-1,0,0,-1,e,t]},4:function(e,t){return[1,0,0,-1,0,t]},5:function(){return[0,1,1,0,0,0]},6:function(e,t){return[0,1,-1,0,t,0]},7:function(e,t){return[0,-1,-1,0,t,e]},8:function(e){return[0,-1,1,0,0,e]}},le=function(e,t,n,r){-1!==r&&e.transform.apply(e,se[r](t,n))},fe=function(e,t,n,r){t=Math.round(t),n=Math.round(n);var o=document.createElement("canvas");o.width=t,o.height=n;var i=o.getContext("2d");if(r>=5&&r<=8){var a=[n,t];t=a[0],n=a[1]}return le(i,t,n,r),i.drawImage(e,0,0,t,n),o},pe=function(e){return/^image/.test(e.type)&&!/svg/.test(e.type)},de=10,he=10,ve=function(e){var t=Math.min(de/e.width,he/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,u=0,s=0,l=0,f=0;f<c;f+=4)u+=a[f]*a[f],s+=a[f+1]*a[f+1],l+=a[f+2]*a[f+2];return{r:u=me(u,c),g:s=me(s,c),b:l=me(l,c)}},me=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},Ee=function(e,t){return(t=t||document.createElement("canvas")).width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0),t},ye=function(e){var t;try{t=new ImageData(e.width,e.height)}catch(n){t=document.createElement("canvas").getContext("2d").createImageData(e.width,e.height)}return t.data.set(new Uint8ClampedArray(e.data)),t},ge=function(e){return new t((function(t,n){var r=new Image;r.crossOrigin="Anonymous",r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},_e=function(e){var n=ie(e),r=te(e),o=e.utils.createWorker,i=function(e,n,r){return new t((function(t){e.ref.imageData||(e.ref.imageData=r.getContext("2d").getImageData(0,0,r.width,r.height));var i=ye(e.ref.imageData);if(!n||20!==n.length)return r.getContext("2d").putImageData(i,0,0),t();var a=o(ce);a.post({imageData:i,colorMatrix:n},(function(e){r.getContext("2d").putImageData(e,0,0),a.terminate(),t()}),[i.data.buffer])}))},a=function(e,t){e.removeChildView(t),t.image.width=1,t.image.height=1,t._destroy()},c=function(e){var t=e.root,n=t.ref.images.shift();return n.opacity=0,n.translateY=-15,t.ref.imageViewBin.push(n),n},u=function(e){var t=e.root,n=e.props,o=e.image,i=n.id,a=t.query("GET_ITEM",{id:i});if(a){var c,u,s=a.getMetadata("crop")||{center:{x:.5,y:.5},flip:{horizontal:!1,vertical:!1},zoom:1,rotation:0,aspectRatio:null},l=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),f=!1;t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(c=a.getMetadata("markup")||[],u=a.getMetadata("resize"),f=!0);var p=t.appendChildView(t.createChildView(r,{id:i,image:o,crop:s,resize:u,markup:c,dirty:f,background:l,opacity:0,scaleX:1.15,scaleY:1.15,translateY:15}),t.childViews.length);t.ref.images.push(p),p.opacity=1,p.scaleX=1,p.scaleY=1,p.translateY=0,setTimeout((function(){t.dispatch("DID_IMAGE_PREVIEW_SHOW",{id:i})}),250)}},s=function(e){var t=e.root,n=e.props,r=t.query("GET_ITEM",{id:n.id});if(r){var o=t.ref.images[t.ref.images.length-1];o.crop=r.getMetadata("crop"),o.background=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(o.dirty=!0,o.resize=r.getMetadata("resize"),o.markup=r.getMetadata("markup"))}},l=function(e){var t=e.root,n=e.props,r=e.action;if(/crop|filter|markup|resize/.test(r.change.key)&&t.ref.images.length){var o=t.query("GET_ITEM",{id:n.id});if(o)if(/filter/.test(r.change.key)){var a=t.ref.images[t.ref.images.length-1];i(t,r.change.value,a.image)}else if(/crop|markup|resize/.test(r.change.key)){var l=o.getMetadata("crop"),f=t.ref.images[t.ref.images.length-1];if(Math.abs(l.aspectRatio-f.crop.aspectRatio)>1e-5){var p=c({root:t});u({root:t,props:n,image:Ee(p.image)})}else s({root:t,props:n})}}},f=function(e){var t=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);return!((t?parseInt(t[1]):null)<=58)&&"createImageBitmap"in window&&pe(e)},p=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=URL.createObjectURL(r.file);ue(o,(function(e,r){t.dispatch("DID_IMAGE_PREVIEW_CALCULATE_SIZE",{id:n,width:e,height:r})}))}},d=function(e){var t=e.root,n=e.props,r=n.id,a=t.query("GET_ITEM",r);if(a){var c=URL.createObjectURL(a.file),s=function(){ge(c).then(l)},l=function(e){URL.revokeObjectURL(c);var r=(a.getMetadata("exif")||{}).orientation||-1,o=e.width,s=e.height;if(o&&s){if(r>=5&&r<=8){var l=[s,o];o=l[0],s=l[1]}var f=Math.max(1,.75*window.devicePixelRatio),p=t.query("GET_IMAGE_PREVIEW_ZOOM_FACTOR")*f,d=s/o,h=t.rect.element.width,v=t.rect.element.height,m=h,E=m*d;d>1?E=(m=Math.min(o,h*p))*d:m=(E=Math.min(s,v*p))/d;var y=fe(e,m,E,r),g=function(){var r=t.query("GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR")?ve(data):null;a.setMetadata("color",r,!0),"close"in e&&e.close(),t.ref.overlayShadow.opacity=1,u({root:t,props:n,image:y})},_=a.getMetadata("filter");_?i(t,_,y).then(g):g()}};if(f(a.file)){var p=o(ae);p.post({file:a.file},(function(e){p.terminate(),e?l(e):s()}))}else s()}},h=function(e){var t=e.root,n=t.ref.images[t.ref.images.length-1];n.translateY=0,n.scaleX=1,n.scaleY=1,n.opacity=1},v=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},m=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},E=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},y=function(e){var t=e.root;t.ref.images=[],t.ref.imageData=null,t.ref.imageViewBin=[],t.ref.overlayShadow=t.appendChildView(t.createChildView(n,{opacity:0,status:"idle"})),t.ref.overlaySuccess=t.appendChildView(t.createChildView(n,{opacity:0,status:"success"})),t.ref.overlayError=t.appendChildView(t.createChildView(n,{opacity:0,status:"failure"}))};return e.utils.createView({name:"image-preview-wrapper",create:y,styles:["height"],apis:["height"],destroy:function(e){e.root.ref.images.forEach((function(e){e.image.width=1,e.image.height=1}))},didWriteView:function(e){e.root.ref.images.forEach((function(e){e.dirty=!1}))},write:e.utils.createRoute({DID_IMAGE_PREVIEW_DRAW:h,DID_IMAGE_PREVIEW_CONTAINER_CREATE:p,DID_FINISH_CALCULATE_PREVIEWSIZE:d,DID_UPDATE_ITEM_METADATA:l,DID_THROW_ITEM_LOAD_ERROR:m,DID_THROW_ITEM_PROCESSING_ERROR:m,DID_THROW_ITEM_INVALID:m,DID_COMPLETE_ITEM_PROCESSING:E,DID_START_ITEM_PROCESSING:v,DID_REVERT_ITEM_PROCESSING:v},(function(e){var t=e.root,n=t.ref.imageViewBin.filter((function(e){return 0===e.opacity}));t.ref.imageViewBin=t.ref.imageViewBin.filter((function(e){return e.opacity>0})),n.forEach((function(e){return a(t,e)})),n.length=0}))})},Te=function(t){var n=t.addFilter,r=t.utils,o=r.Type,i=r.createRoute,a=r.isFile,c=_e(t);return n("CREATE_VIEW",(function(t){var n=t.is,r=t.view,o=t.query;if(n("file")&&o("GET_ALLOW_IMAGE_PREVIEW")){var u=function(t){var n=t.root,i=t.props.id,u=o("GET_ITEM",i);if(u&&a(u.file)&&!u.archived){var s=u.file;if(e(s)&&o("GET_IMAGE_PREVIEW_FILTER_ITEM")(u)){var l="createImageBitmap"in(window||{}),f=o("GET_IMAGE_PREVIEW_MAX_FILE_SIZE");if(!(!l&&f&&s.size>f)){n.ref.imagePreview=r.appendChildView(r.createChildView(c,{id:i}));var p=n.query("GET_IMAGE_PREVIEW_HEIGHT");p&&n.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:u.id,height:p});var d=!l&&s.size>o("GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE");n.dispatch("DID_IMAGE_PREVIEW_CONTAINER_CREATE",{id:i},d)}}}},s=function(e,t){if(e.ref.imagePreview){var n=t.id,r=e.query("GET_ITEM",{id:n});if(r){var o=e.query("GET_PANEL_ASPECT_RATIO"),i=e.query("GET_ITEM_PANEL_ASPECT_RATIO"),a=e.query("GET_IMAGE_PREVIEW_HEIGHT");if(!(o||i||a)){var c=e.ref,u=c.imageWidth,s=c.imageHeight;if(u&&s){var l=e.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),f=e.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),p=(r.getMetadata("exif")||{}).orientation||-1;if(p>=5&&p<=8){var d=[s,u];u=d[0],s=d[1]}if(!pe(r.file)||e.query("GET_IMAGE_PREVIEW_UPSCALE")){var h=2048/u;u*=h,s*=h}var v=s/u,m=(r.getMetadata("crop")||{}).aspectRatio||v,E=Math.max(l,Math.min(s,f)),y=e.rect.element.width,g=Math.min(y*m,E);e.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:r.id,height:g})}}}}},l=function(e){e.root.ref.shouldRescale=!0},f=function(e){var t=e.root;"crop"===e.action.change.key&&(t.ref.shouldRescale=!0)},p=function(e){var t=e.root,n=e.action;t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldRescale=!0,t.ref.shouldDrawPreview=!0,t.dispatch("KICK")};r.registerWriter(i({DID_RESIZE_ROOT:l,DID_STOP_RESIZE:l,DID_LOAD_ITEM:u,DID_IMAGE_PREVIEW_CALCULATE_SIZE:p,DID_UPDATE_ITEM_METADATA:f},(function(e){var t=e.root,n=e.props;t.ref.imagePreview&&(t.rect.element.hidden||(t.ref.shouldRescale&&(s(t,n),t.ref.shouldRescale=!1),t.ref.shouldDrawPreview&&(requestAnimationFrame((function(){t.dispatch("DID_FINISH_CALCULATE_PREVIEWSIZE",{id:n.id})})),t.ref.shouldDrawPreview=!1)))})))}})),{options:{allowImagePreview:[!0,o.BOOLEAN],imagePreviewFilterItem:[function(){return!0},o.FUNCTION],imagePreviewHeight:[null,o.INT],imagePreviewMinHeight:[44,o.INT],imagePreviewMaxHeight:[256,o.INT],imagePreviewMaxFileSize:[null,o.INT],imagePreviewZoomFactor:[2,o.INT],imagePreviewUpscale:[!1,o.BOOLEAN],imagePreviewMaxInstantPreviewFileSize:[1e6,o.INT],imagePreviewTransparencyIndicator:[null,o.STRING],imagePreviewCalculateAverageImageColor:[!1,o.BOOLEAN],imagePreviewMarkupShow:[!0,o.BOOLEAN],imagePreviewMarkupFilter:[function(){return!0},o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:Te})),Te}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.isString,a=r.replaceInString,c=r.guesstimateMimeType,u=r.getExtensionFromFilename,s=r.getFilenameFromURL,l=function(e,t){return(/^[^/]+/.exec(e)||[]).pop()===t.slice(0,-2)},f=function(e,t){return e.some((function(e){return/\*$/.test(e)?l(t,e):e===t}))},p=function(e){var t="";if(i(e)){var n=s(e),r=u(n);r&&(t=c(r))}else t=e.type;return t},d=function(e,n,r){if(0===n.length)return!0;var o=p(e);return r?new t((function(t,i){r(e,o).then((function(e){f(n,e)?t():i()})).catch(i)})):f(n,o)},h=function(e){return function(t){return null!==e[t]&&(e[t]||t)}};return n("SET_ATTRIBUTE_TO_OPTION_MAP",(function(e){return Object.assign(e,{accept:"acceptedFileTypes"})})),n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;return!n("GET_ALLOW_FILE_TYPE_VALIDATION")||d(e,n("GET_ACCEPTED_FILE_TYPES"))})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(r("GET_ALLOW_FILE_TYPE_VALIDATION")){var o=r("GET_ACCEPTED_FILE_TYPES"),i=r("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),c=d(e,o,i),u=function(){var e=o.map(h(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter((function(e){return!1!==e}));n({status:{main:r("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:a(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:e.join(", "),allButLastType:e.slice(0,-1).join(", "),lastType:e[e.length-1]})}})};if("boolean"==typeof c)return c?t(e):u();c.then((function(){t(e)})).catch(u)}else t(e)}))})),{options:{allowFileTypeValidation:[!0,o.BOOLEAN],acceptedFileTypes:[[],o.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",o.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",o.STRING],fileValidateTypeLabelExpectedTypesMap:[{},o.OBJECT],fileValidateTypeDetectType:[null,o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.replaceInString,a=r.toNaturalFileSize;return n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return!0;var r=n("GET_MAX_FILE_SIZE");if(null!==r&&e.size>=r)return!1;var o=n("GET_MIN_FILE_SIZE");return!(null!==o&&e.size<=o)})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(!r("GET_ALLOW_FILE_SIZE_VALIDATION"))return t(e);var o=r("GET_FILE_VALIDATE_SIZE_FILTER");if(o&&!o(e))return t(e);var c=r("GET_MAX_FILE_SIZE");if(null!==c&&e.size>=c)n({status:{main:r("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_FILE_SIZE"),{filesize:a(c)})}});else{var u=r("GET_MIN_FILE_SIZE");if(null!==u&&e.size<=u)n({status:{main:r("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MIN_FILE_SIZE"),{filesize:a(u)})}});else{var s=r("GET_MAX_TOTAL_FILE_SIZE");if(null!==s&&r("GET_ACTIVE_ITEMS").reduce((function(e,t){return e+t.fileSize}),0)>s)return void n({status:{main:r("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_TOTAL_FILE_SIZE"),{filesize:a(s)})}});t(e)}}}))})),{options:{allowFileSizeValidation:[!0,o.BOOLEAN],maxFileSize:[null,o.INT],minFileSize:[null,o.INT],maxTotalFileSize:[null,o.INT],fileValidateSizeFilter:[null,o.FUNCTION],labelMinFileSizeExceeded:["File is too small",o.STRING],labelMinFileSize:["Minimum file size is {filesize}",o.STRING],labelMaxFileSizeExceeded:["File is too large",o.STRING],labelMaxFileSize:["Maximum file size is {filesize}",o.STRING],labelMaxTotalFileSizeExceeded:["Maximum total size exceeded",o.STRING],labelMaxTotalFileSize:["Maximum total file size is {filesize}",o.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(10))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e={type:"spring",stiffness:.5,damping:.45,mass:10},n=function(t){return t.utils.createView({name:"file-poster",tag:"div",ignoreRect:!0,create:function(e){var t=e.root;t.ref.image=document.createElement("img"),t.element.appendChild(t.ref.image)},write:t.utils.createRoute({DID_FILE_POSTER_LOAD:function(e){var t=e.root,n=e.props,r=n.id,o=t.query("GET_ITEM",{id:n.id});if(o){var i=o.getMetadata("poster");t.ref.image.src=i,t.dispatch("DID_FILE_POSTER_DRAW",{id:r})}}}),mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:e,scaleY:e,opacity:{type:"tween",duration:750}}}})},r=function(e,t){t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0)},o=function(e){return e.utils.createView({name:"file-poster-overlay",tag:"canvas",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;r(n.template,t.element)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},i=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},a=function(e){return-.5*(Math.cos(Math.PI*e)-1)},c=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:a,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:10,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,c=1-i,u=t.join(","),s=0;s<=o;s++){var l=s/o,f=i+c*l;e.addColorStop(f,"rgba(".concat(u,", ").concat(r(l)*n,")"))}},u=10,s=10,l=function(e){var t=Math.min(u/e.width,s/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,l=0,p=0,d=0,h=0;h<c;h+=4)l+=a[h]*a[h],p+=a[h+1]*a[h+1],d+=a[h+2]*a[h+2];return{r:l=f(l,c),g:p=f(p,c),b:d=f(d,c)}},f=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},p=function(e,t,n,r,o){e.width=t,e.height=n;var i=e.getContext("2d"),a=.5*t,u=i.createRadialGradient(a,n+110,n-100,a,n+110,n+100);c(u,r,o,void 0,8,.4),i.save(),i.translate(.5*-t,0),i.scale(2,1),i.fillStyle=u,i.fillRect(0,0,t,n),i.restore()},d="undefined"!=typeof navigator,h=500,v=200,m=d&&document.createElement("canvas"),E=d&&document.createElement("canvas"),y=d&&document.createElement("canvas");d&&(p(m,h,v,[40,40,40],.85),p(E,h,v,[196,78,71],1),p(y,h,v,[54,151,99],1));var g=function(e,n){return new t((function(t,r){var o=new Image;"string"==typeof crossOrigin&&(o.crossOrigin=n),o.onload=function(){t(o)},o.onerror=function(e){r(e)},o.src=e}))},_=function(e){var t=o(e),r=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=r.getMetadata("poster"),a=function(e){var o=t.query("GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR")?l(e):null;r.setMetadata("color",o,!0),t.dispatch("DID_FILE_POSTER_LOAD",{id:n,data:e})};i(o,(function(e,r){t.dispatch("DID_FILE_POSTER_CALCULATE_SIZE",{id:n,width:e,height:r}),g(o,t.query("GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE")).then(a)}))}},a=function(e){e.root.ref.overlayShadow.opacity=1},c=function(e){var t=e.root.ref.image;t.scaleX=1,t.scaleY=1,t.opacity=1},u=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},s=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},f=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},p=function(r){var o=r.root,i=r.props,a=n(e);o.ref.image=o.appendChildView(o.createChildView(a,{id:i.id,scaleX:1.25,scaleY:1.25,opacity:0})),o.ref.overlayShadow=o.appendChildView(o.createChildView(t,{template:m,opacity:0})),o.ref.overlaySuccess=o.appendChildView(o.createChildView(t,{template:y,opacity:0})),o.ref.overlayError=o.appendChildView(o.createChildView(t,{template:E,opacity:0}))};return e.utils.createView({name:"file-poster-wrapper",create:p,write:e.utils.createRoute({DID_FILE_POSTER_LOAD:a,DID_FILE_POSTER_DRAW:c,DID_FILE_POSTER_CONTAINER_CREATE:r,DID_THROW_ITEM_LOAD_ERROR:s,DID_THROW_ITEM_PROCESSING_ERROR:s,DID_THROW_ITEM_INVALID:s,DID_COMPLETE_ITEM_PROCESSING:f,DID_START_ITEM_PROCESSING:u,DID_REVERT_ITEM_PROCESSING:u})})},T=function(e){var t=e.addFilter,n=e.utils,r=n.Type,o=n.createRoute,i=_(e);return t("CREATE_VIEW",(function(e){var t=e.is,n=e.view,r=e.query;if(t("file")&&r("GET_ALLOW_FILE_POSTER")){var a=function(e){var t=e.root,n=e.props;u(t,n)},c=function(e){var t=e.root,n=e.props,r=e.action;/poster/.test(r.change.key)&&u(t,n)},u=function(e,t){var o=t.id,a=r("GET_ITEM",o);a&&a.getMetadata("poster")&&!a.archived&&r("GET_FILE_POSTER_FILTER_ITEM")(a)&&(e.ref.filePoster&&n.removeChildView(e.ref.filePoster),e.ref.filePoster=n.appendChildView(n.createChildView(i,{id:o})),e.dispatch("DID_FILE_POSTER_CONTAINER_CREATE",{id:o}))},s=function(e){var t=e.root,n=e.action;t.ref.filePoster&&(t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldUpdatePanelHeight=!0,t.dispatch("KICK"))},l=function(e){var t=e.root,n=t.query("GET_FILE_POSTER_HEIGHT");if(n)return n;var r=t.query("GET_FILE_POSTER_MIN_HEIGHT"),o=t.query("GET_FILE_POSTER_MAX_HEIGHT");if(r&&t.ref.imageHeight<r)return r;var i=t.rect.element.width*(t.ref.imageHeight/t.ref.imageWidth);return r&&i<r?r:o&&i>o?o:i};n.registerWriter(o({DID_LOAD_ITEM:a,DID_FILE_POSTER_CALCULATE_SIZE:s,DID_UPDATE_ITEM_METADATA:c},(function(e){var t=e.root,n=e.props;t.ref.filePoster&&(t.rect.element.hidden||t.ref.shouldUpdatePanelHeight&&(t.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:n.id,height:l({root:t})}),t.ref.shouldUpdatePanelHeight=!1))})))}})),{options:{allowFilePoster:[!0,r.BOOLEAN],filePosterHeight:[null,r.INT],filePosterMinHeight:[null,r.INT],filePosterMaxHeight:[null,r.INT],filePosterFilterItem:[function(){return!0},r.FUNCTION],filePosterCalculateAverageImageColor:[!1,r.BOOLEAN],filePosterCrossOriginAttributeValue:["Anonymous",r.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:T})),T}()}).call(this,n(10))},,,,,,function(e,t,n){},,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return G})),n.d(t,"Reactions",(function(){return G}));n(12);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(113),n(1)),u=n(2),s=n(5);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,e);var t,n,r,o=d(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return u.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=u.a.api.getHeaders(e.config),r=e.config.argumentId?"PUT":"POST",o={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:r,headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var r=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(r)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var r=null;return r=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){u.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(s.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),r)}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(i,e);var t,n,r,o=b(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=u.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=u.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=u.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",r=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),o=null;e.canEdit()&&e.canDelete()&&(o=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var a=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(a=React.createElement("div",{className:"osc-reaction-description"},React.createElement(m,{config:g(g({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var c=null;t.parentId||(c=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var s=null,l=null;if(e.canReply()&&!e.config.isClosed&&(s=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=g(g({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(m,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var p=null;return t.reactions&&t.reactions.length&&(p=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},o,r,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),a,c,s),l,p)}}])&&T(t.prototype,n),r&&T(t,r),i}(c.a);function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){P(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r,o=C(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():u.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),r=u.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=A({},t.state);r.reactions=n,r.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(w,{config:t.config,user:t.state.user,data:A({},e)}))}))),r=t.config.title?React.createElement("h3",null,t.config.title):null,o=React.createElement(m,{config:t.config,user:t.state.user});return t.config.isClosed&&(o=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},r,o,n,React.createElement("br",null),React.createElement("br",null))}}])&&L(t.prototype,n),r&&L(t,r),i}(c.a);G.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(G,{attributes:n,config:t}),e)}},,function(e,t,n){},function(e,t,n){(function(e){!function(t){"use strict";var n=function(e){return e instanceof HTMLElement},r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=Object.assign({},e),o=[],i=[],a=function(){var e=[].concat(i);i.length=0,e.forEach((function(e){var t=e.type,n=e.data;c(t,n)}))},c=function(e,t,n){!n||document.hidden?(f[e]&&f[e](t),o.push({type:e,data:t})):i.push({type:e,data:t})},u=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return l[e]?(t=l)[e].apply(t,r):null},s={getState:function(){return Object.assign({},r)},processActionQueue:function(){var e=[].concat(o);return o.length=0,e},processDispatchQueue:a,dispatch:c,query:u},l={};t.forEach((function(e){l=Object.assign({},e(r),{},l)}));var f={};return n.forEach((function(e){f=Object.assign({},e(c,u,r),{},f)})),s},o=function(e,t,n){"function"!=typeof n?Object.defineProperty(e,t,Object.assign({},n)):e[t]=n},i=function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])},a=function(e){var t={};return i(e,(function(n){o(t,n,e[n])})),t},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(null===n)return e.getAttribute(t)||e.hasAttribute(t);e.setAttribute(t,n)},u="http://www.w3.org/2000/svg",s=["svg","path"],l=function(e){return s.includes(e)},f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"==typeof t&&(n=t,t=null);var r=l(e)?document.createElementNS(u,e):document.createElement(e);return t&&(l(e)?c(r,"class",t):r.className=t),i(n,(function(e,t){c(r,e,t)})),r},p=function(e){return function(t,n){void 0!==n&&e.children[n]?e.insertBefore(t,e.children[n]):e.appendChild(t)}},d=function(e,t){return function(e,n){return void 0!==n?t.splice(n,0,e):t.push(e),e}},h=function(e,t){return function(n){return t.splice(t.indexOf(n),1),n.element.parentNode&&e.removeChild(n.element),n}},v="undefined"!=typeof window&&void 0!==window.document,m=function(){return v},E="children"in(m()?f("svg"):{})?function(e){return e.children.length}:function(e){return e.childNodes.length},y=function(e,t,n,r){var o=n[0]||e.left,i=n[1]||e.top,a=o+e.width,c=i+e.height*(r[1]||1),u={element:Object.assign({},e),inner:{left:e.left,top:e.top,right:e.right,bottom:e.bottom},outer:{left:o,top:i,right:a,bottom:c}};return t.filter((function(e){return!e.isRectIgnored()})).map((function(e){return e.rect})).forEach((function(e){g(u.inner,Object.assign({},e.inner)),g(u.outer,Object.assign({},e.outer))})),_(u.inner),u.outer.bottom+=u.element.marginBottom,u.outer.right+=u.element.marginRight,_(u.outer),u},g=function(e,t){t.top+=e.top,t.right+=e.left,t.bottom+=e.top,t.left+=e.left,t.bottom>e.bottom&&(e.bottom=t.bottom),t.right>e.right&&(e.right=t.right)},_=function(e){e.width=e.right-e.left,e.height=e.bottom-e.top},T=function(e){return"number"==typeof e},I=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.001;return Math.abs(e-t)<r&&Math.abs(n)<r},b=function(e){return e<.5?2*e*e:(4-2*e)*e-1},O={spring:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiffness,n=void 0===t?.5:t,r=e.damping,o=void 0===r?.75:r,i=e.mass,c=void 0===i?10:i,u=null,s=null,l=0,f=!1,p=a({interpolate:function(e,t){if(!f){if(!T(u)||!T(s))return f=!0,void(l=0);I(s+=l+=-(s-u)*n/c,u,l*=o)||t?(s=u,l=0,f=!0,p.onupdate(s),p.oncomplete(s)):p.onupdate(s)}},target:{set:function(e){if(T(e)&&!T(s)&&(s=e),null===u&&(u=e,s=e),s===(u=e)||void 0===u)return f=!0,l=0,p.onupdate(s),void p.oncomplete(s);f=!1},get:function(){return u}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return p},tween:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.duration,o=void 0===r?500:r,i=n.easing,c=void 0===i?b:i,u=n.delay,s=void 0===u?0:u,l=null,f=!0,p=!1,d=null,h=a({interpolate:function(n,r){f||null===d||(null===l&&(l=n),n-l<s||((e=n-l-s)>=o||r?(e=1,t=p?0:1,h.onupdate(t*d),h.oncomplete(t*d),f=!0):(t=e/o,h.onupdate((e>=0?c(p?1-t:t):0)*d))))},target:{get:function(){return p?0:d},set:function(e){if(null===d)return d=e,h.onupdate(e),void h.oncomplete(e);e<d?(d=1,p=!0):(p=!1,d=e),f=!1,l=null}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return h}},R=function(e,t,n){var r=e[t]&&"object"==typeof e[t][n]?e[t][n]:e[t]||e,o="string"==typeof r?r:r.type,i="object"==typeof r?Object.assign({},r):{};return O[o]?O[o](i):null},w=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(t=Array.isArray(t)?t:[t]).forEach((function(t){e.forEach((function(e){var o=e,i=function(){return n[e]},a=function(t){return n[e]=t};"object"==typeof e&&(o=e.key,i=e.getter||i,a=e.setter||a),t[o]&&!r||(t[o]={get:i,set:a})}))}))},S=function(e){return function(t,n){e.addEventListener(t,n)}},D=function(e){return function(t,n){e.removeEventListener(t,n)}},A=function(e){return null!=e},P={opacity:1,scaleX:1,scaleY:1,translateX:0,translateY:0,rotateX:0,rotateY:0,rotateZ:0,originX:0,originY:0},L=function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,i=e.view,a=Object.assign({},n),c={};w(t,[r,o],n);var u=function(){return[n.translateX||0,n.translateY||0]},s=function(){return[n.scaleX||0,n.scaleY||0]},l=function(){return i.rect?y(i.rect,i.childViews,u(),s()):null};return r.rect={get:l},o.rect={get:l},t.forEach((function(e){n[e]=void 0===a[e]?P[e]:a[e]})),{write:function(){if(M(c,n))return C(i.element,n),Object.assign(c,Object.assign({},n)),!0},destroy:function(){}}},M=function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!0;for(var n in t)if(t[n]!==e[n])return!0;return!1},C=function(e,t){var n=t.opacity,r=t.perspective,o=t.translateX,i=t.translateY,a=t.scaleX,c=t.scaleY,u=t.rotateX,s=t.rotateY,l=t.rotateZ,f=t.originX,p=t.originY,d=t.width,h=t.height,v="",m="";(A(f)||A(p))&&(m+="transform-origin: "+(f||0)+"px "+(p||0)+"px;"),A(r)&&(v+="perspective("+r+"px) "),(A(o)||A(i))&&(v+="translate3d("+(o||0)+"px, "+(i||0)+"px, 0) "),(A(a)||A(c))&&(v+="scale3d("+(A(a)?a:1)+", "+(A(c)?c:1)+", 1) "),A(l)&&(v+="rotateZ("+l+"rad) "),A(u)&&(v+="rotateX("+u+"rad) "),A(s)&&(v+="rotateY("+s+"rad) "),v.length&&(m+="transform:"+v+";"),A(n)&&(m+="opacity:"+n+";",0===n&&(m+="visibility:hidden;"),n<1&&(m+="pointer-events:none;")),A(h)&&(m+="height:"+h+"px;"),A(d)&&(m+="width:"+d+"px;");var E=e.elementCurrentStyle||"";m.length===E.length&&m===E||(e.style.cssText=m,e.elementCurrentStyle=m)},N={styles:L,listeners:function(e){e.mixinConfig,e.viewProps,e.viewInternalAPI;var t=e.viewExternalAPI,n=(e.viewState,e.view),r=[],o=S(n.element),i=D(n.element);return t.on=function(e,t){r.push({type:e,fn:t}),o(e,t)},t.off=function(e,t){r.splice(r.findIndex((function(n){return n.type===e&&n.fn===t})),1),i(e,t)},{write:function(){return!0},destroy:function(){r.forEach((function(e){i(e.type,e.fn)}))}}},animations:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,a=Object.assign({},n),c=[];return i(t,(function(e,t){var i=R(t);i&&(i.onupdate=function(t){n[e]=t},i.target=a[e],w([{key:e,setter:function(e){i.target!==e&&(i.target=e)},getter:function(){return n[e]}}],[r,o],n,!0),c.push(i))})),{write:function(e){var t=document.hidden,n=!0;return c.forEach((function(r){r.resting||(n=!1),r.interpolate(e,t)})),n},destroy:function(){}}},apis:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewExternalAPI;w(t,r,n)}},x=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.layoutCalculated||(e.paddingTop=parseInt(n.paddingTop,10)||0,e.marginTop=parseInt(n.marginTop,10)||0,e.marginRight=parseInt(n.marginRight,10)||0,e.marginBottom=parseInt(n.marginBottom,10)||0,e.marginLeft=parseInt(n.marginLeft,10)||0,t.layoutCalculated=!0),e.left=t.offsetLeft||0,e.top=t.offsetTop||0,e.width=t.offsetWidth||0,e.height=t.offsetHeight||0,e.right=e.left+e.width,e.bottom=e.top+e.height,e.scrollTop=t.scrollTop,e.hidden=null===t.offsetParent,e},G=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.tag,n=void 0===t?"div":t,r=e.name,o=void 0===r?null:r,i=e.attributes,c=void 0===i?{}:i,u=e.read,s=void 0===u?function(){}:u,l=e.write,v=void 0===l?function(){}:l,m=e.create,g=void 0===m?function(){}:m,_=e.destroy,T=void 0===_?function(){}:_,I=e.filterFrameActionsForChild,b=void 0===I?function(e,t){return t}:I,O=e.didCreateView,R=void 0===O?function(){}:O,w=e.didWriteView,S=void 0===w?function(){}:w,D=e.ignoreRect,A=void 0!==D&&D,P=e.ignoreRectUpdate,L=void 0!==P&&P,M=e.mixins,C=void 0===M?[]:M;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=f(n,"filepond--"+o,c),i=window.getComputedStyle(r,null),u=x(),l=null,m=!1,_=[],I=[],O={},w={},D=[v],P=[s],M=[T],G=function(){return r},j=function(){return _.concat()},k=function(){return O},F=function(e){return function(t,n){return t(e,n)}},U=function(){return l||(l=y(u,_,[0,0],[1,1]))},V=function(){l=null,_.forEach((function(e){return e._read()})),!(L&&u.width&&u.height)&&x(u,r,i);var e={root:X,props:t,rect:u};P.forEach((function(t){return t(e)}))},B=function(e,n,r){var o=0===n.length;return D.forEach((function(i){!1===i({props:t,root:X,actions:n,timestamp:e,shouldOptimize:r})&&(o=!1)})),I.forEach((function(t){!1===t.write(e)&&(o=!1)})),_.filter((function(e){return!!e.element.parentNode})).forEach((function(t){t._write(e,b(t,n),r)||(o=!1)})),_.forEach((function(t,i){t.element.parentNode||(X.appendChild(t.element,i),t._read(),t._write(e,b(t,n),r),o=!1)})),m=o,S({props:t,root:X,actions:n,timestamp:e}),o},q=function(){I.forEach((function(e){return e.destroy()})),M.forEach((function(e){e({root:X,props:t})})),_.forEach((function(e){return e._destroy()}))},Y={element:{get:G},style:{get:function(){return i}},childViews:{get:j}},H=Object.assign({},Y,{rect:{get:U},ref:{get:k},is:function(e){return o===e},appendChild:p(r),createChildView:F(e),linkView:function(e){return _.push(e),e},unlinkView:function(e){_.splice(_.indexOf(e),1)},appendChildView:d(r,_),removeChildView:h(r,_),registerWriter:function(e){return D.push(e)},registerReader:function(e){return P.push(e)},registerDestroyer:function(e){return M.push(e)},invalidateLayout:function(){return r.layoutCalculated=!1},dispatch:e.dispatch,query:e.query}),W={element:{get:G},childViews:{get:j},rect:{get:U},resting:{get:function(){return m}},isRectIgnored:function(){return A},_read:V,_write:B,_destroy:q},z=Object.assign({},Y,{rect:{get:function(){return u}}});Object.keys(C).sort((function(e,t){return"styles"===e?1:"styles"===t?-1:0})).forEach((function(e){var n=N[e]({mixinConfig:C[e],viewProps:t,viewState:w,viewInternalAPI:H,viewExternalAPI:W,view:a(z)});n&&I.push(n)}));var X=a(H);g({root:X,props:t});var Z=E(r);return _.forEach((function(e,t){X.appendChild(e.element,Z+t)})),R(X),a(W)}},j=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:60,r="__framePainter";if(window[r])return window[r].readers.push(e),void window[r].writers.push(t);window[r]={readers:[e],writers:[t]};var o=window[r],i=1e3/n,a=null,c=null,u=null,s=null,l=function(){document.hidden?(u=function(){return window.setTimeout((function(){return f(performance.now())}),i)},s=function(){return window.clearTimeout(c)}):(u=function(){return window.requestAnimationFrame(f)},s=function(){return window.cancelAnimationFrame(c)})};document.addEventListener("visibilitychange",(function(){s&&s(),l(),f(performance.now())}));var f=function e(t){c=u(e),a||(a=t);var n=t-a;n<=i||(a=t-n%i,o.readers.forEach((function(e){return e()})),o.writers.forEach((function(e){return e(t)})))};return l(),f(performance.now()),{pause:function(){s(c)}}},k=function(e,t){return function(n){var r=n.root,o=n.props,i=n.actions,a=void 0===i?[]:i,c=n.timestamp,u=n.shouldOptimize;a.filter((function(t){return e[t.type]})).forEach((function(t){return e[t.type]({root:r,props:o,action:t.data,timestamp:c,shouldOptimize:u})})),t&&t({root:r,props:o,actions:a,timestamp:c,shouldOptimize:u})}},F=function(e,t){return t.parentNode.insertBefore(e,t)},U=function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},V=function(e){return Array.isArray(e)},B=function(e){return null==e},q=function(e){return e.trim()},Y=function(e){return""+e},H=function(e){return"boolean"==typeof e},W=function(e){return H(e)?e:"true"===e},z=function(e){return"string"==typeof e},X=function(e){return T(e)?e:z(e)?Y(e).replace(/[a-z]+/gi,""):0},Z=function(e){return parseInt(X(e),10)},K=function(e){return parseFloat(X(e))},Q=function(e){return T(e)&&isFinite(e)&&Math.floor(e)===e},J=function(e){if(Q(e))return e;var t=Y(e).trim();return/MB$/i.test(t)?(t=t.replace(/MB$i/,"").trim(),1e3*Z(t)*1e3):/KB/i.test(t)?(t=t.replace(/KB$i/,"").trim(),1e3*Z(t)):Z(t)},$=function(e){return"function"==typeof e},ee=function(e){for(var t=self,n=e.split("."),r=null;r=n.shift();)if(!(t=t[r]))return null;return t},te={process:"POST",patch:"PATCH",revert:"DELETE",fetch:"GET",restore:"GET",load:"GET"},ne=function(e){var t={};return t.url=z(e)?e:e.url||"",t.timeout=e.timeout?parseInt(e.timeout,10):0,t.headers=e.headers?e.headers:{},i(te,(function(n){t[n]=re(n,e[n],te[n],t.timeout,t.headers)})),t.remove=e.remove||null,delete t.headers,t},re=function(e,t,n,r,o){if(null===t)return null;if("function"==typeof t)return t;var i={url:"GET"===n||"PATCH"===n?"?"+e+"=":"",method:n,headers:o,withCredentials:!1,timeout:r,onload:null,ondata:null,onerror:null};if(z(t))return i.url=t,i;if(Object.assign(i,t),z(i.headers)){var a=i.headers.split(/:(.+)/);i.headers={header:a[0],value:a[1]}}return i.withCredentials=W(i.withCredentials),i},oe=function(e){return null===e},ie=function(e){return"object"==typeof e&&null!==e},ae=function(e){return ie(e)&&z(e.url)&&ie(e.process)&&ie(e.revert)&&ie(e.restore)&&ie(e.fetch)},ce=function(e){return V(e)?"array":oe(e)?"null":Q(e)?"int":/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e)?"bytes":ae(e)?"api":typeof e},ue=function(e){return e.replace(/{\s*'/g,'{"').replace(/'\s*}/g,'"}').replace(/'\s*:/g,'":').replace(/:\s*'/g,':"').replace(/,\s*'/g,',"').replace(/'\s*,/g,'",')},se={array:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return B(e)?[]:V(e)?e:Y(e).split(t).map(q).filter((function(e){return e.length}))},boolean:W,int:function(e){return"bytes"===ce(e)?J(e):Z(e)},number:K,float:K,bytes:J,string:function(e){return $(e)?e:Y(e)},function:function(e){return ee(e)},serverapi:function(e){return ne(e)},object:function(e){try{return JSON.parse(ue(e))}catch(e){return null}}},le=function(e,t){return se[t](e)},fe=function(e,t,n){if(e===t)return e;var r=ce(e);if(r!==n){var o=le(e,n);if(r=ce(o),null===o)throw'Trying to assign value with incorrect type to "'+option+'", allowed type: "'+n+'"';e=o}return e},pe=function(e,t){var n=e;return{enumerable:!0,get:function(){return n},set:function(r){n=fe(r,e,t)}}},de=function(e){var t={};return i(e,(function(n){var r=e[n];t[n]=pe(r[0],r[1])})),a(t)},he=function(e){return{items:[],listUpdateTimeout:null,itemUpdateTimeout:null,processingQueue:[],options:de(e)}},ve=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.split(/(?=[A-Z])/).map((function(e){return e.toLowerCase()})).join(t)},me=function(e,t){var n={};return i(t,(function(t){n[t]={get:function(){return e.getState().options[t]},set:function(n){e.dispatch("SET_"+ve(t,"_").toUpperCase(),{value:n})}}})),n},Ee=function(e){return function(t,n,r){var o={};return i(e,(function(e){var n=ve(e,"_").toUpperCase();o["SET_"+n]=function(o){try{r.options[e]=o.value}catch(e){}t("DID_SET_"+n,{value:r.options[e]})}})),o}},ye=function(e){return function(t){var n={};return i(e,(function(e){n["GET_"+ve(e,"_").toUpperCase()]=function(n){return t.options[e]}})),n}},ge={API:1,DROP:2,BROWSE:3,PASTE:4,NONE:5},_e=function(){return Math.random().toString(36).substr(2,9)};function Te(e){this.wrapped=e}function Ie(t){var n,r;function o(t,o){return new e((function(e,a){var c={key:t,arg:o,resolve:e,reject:a,next:null};r?r=r.next=c:(n=r=c,i(t,o))}))}function i(n,r){try{var o=t[n](r),c=o.value,u=c instanceof Te;e.resolve(u?c.wrapped:c).then((function(e){u?i("next",e):a(o.done?"return":"normal",e)}),(function(e){i("throw",e)}))}catch(e){a("throw",e)}}function a(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=o,"function"!=typeof t.return&&(this.return=void 0)}function be(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Oe(e,t){if(null==e)return{};var n,r,o=be(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Re(e){return we(e)||Se(e)||De()}function we(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function Se(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function De(){throw new TypeError("Invalid attempt to spread non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(Ie.prototype[Symbol.asyncIterator]=function(){return this}),Ie.prototype.next=function(e){return this._invoke("next",e)},Ie.prototype.throw=function(e){return this._invoke("throw",e)},Ie.prototype.return=function(e){return this._invoke("return",e)};var Ae=function(e,t){return e.splice(t,1)},Pe=function(t,n){n?t():document.hidden?e.resolve(1).then(t):setTimeout(t,0)},Le=function(){var e=[],t=function(t,n){Ae(e,e.findIndex((function(e){return e.event===t&&(e.cb===n||!n)})))},n=function(t,n,r){e.filter((function(e){return e.event===t})).map((function(e){return e.cb})).forEach((function(e){return Pe((function(){return e.apply(void 0,Re(n))}),r)}))};return{fireSync:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!0)},fire:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!1)},on:function(t,n){e.push({event:t,cb:n})},onOnce:function(n,r){e.push({event:n,cb:function(){t(n,r),r.apply(void 0,arguments)}})},off:t}},Me=function(e,t,n){Object.getOwnPropertyNames(e).filter((function(e){return!n.includes(e)})).forEach((function(n){return Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))},Ce=["fire","process","revert","load","on","off","onOnce","retryLoad","extend","archive","archived","release","released","requestProcessing","freeze"],Ne=function(e){var t={};return Me(e,t,Ce),t},xe=function(e){e.forEach((function(t,n){t.released&&Ae(e,n)}))},Ge={INIT:1,IDLE:2,PROCESSING_QUEUED:9,PROCESSING:3,PROCESSING_COMPLETE:5,PROCESSING_ERROR:6,PROCESSING_REVERT_ERROR:10,LOADING:7,LOAD_ERROR:8},je={INPUT:1,LIMBO:2,LOCAL:3},ke=function(e){return/[^0-9]+/.exec(e)},Fe=function(){return ke(1.1.toLocaleString())[0]},Ue=function(){var e=Fe(),t=1e3.toLocaleString();return t!==1e3.toString()?ke(t)[0]:"."===e?",":"."},Ve={BOOLEAN:"boolean",INT:"int",NUMBER:"number",STRING:"string",ARRAY:"array",OBJECT:"object",FUNCTION:"function",ACTION:"action",SERVER_API:"serverapi",REGEX:"regex"},Be=[],qe=function(t,n,r){return new e((function(e,o){var i=Be.filter((function(e){return e.key===t})).map((function(e){return e.cb}));if(0!==i.length){var a=i.shift();i.reduce((function(e,t){return e.then((function(e){return t(e,r)}))}),a(n,r)).then((function(t){return e(t)})).catch((function(e){return o(e)}))}else e(n)}))},Ye=function(e,t,n){return Be.filter((function(t){return t.key===e})).map((function(e){return e.cb(t,n)}))},He=function(e,t){return Be.push({key:e,cb:t})},We=function(e){return Object.assign(Ze,e)},ze=function(){return Object.assign({},Ze)},Xe=function(e){i(e,(function(e,t){Ze[e]&&(Ze[e][0]=fe(t,Ze[e][0],Ze[e][1]))}))},Ze={id:[null,Ve.STRING],name:["filepond",Ve.STRING],disabled:[!1,Ve.BOOLEAN],className:[null,Ve.STRING],required:[!1,Ve.BOOLEAN],captureMethod:[null,Ve.STRING],allowSyncAcceptAttribute:[!0,Ve.BOOLEAN],allowDrop:[!0,Ve.BOOLEAN],allowBrowse:[!0,Ve.BOOLEAN],allowPaste:[!0,Ve.BOOLEAN],allowMultiple:[!1,Ve.BOOLEAN],allowReplace:[!0,Ve.BOOLEAN],allowRevert:[!0,Ve.BOOLEAN],allowRemove:[!0,Ve.BOOLEAN],allowProcess:[!0,Ve.BOOLEAN],allowReorder:[!1,Ve.BOOLEAN],allowDirectoriesOnly:[!1,Ve.BOOLEAN],forceRevert:[!1,Ve.BOOLEAN],maxFiles:[null,Ve.INT],checkValidity:[!1,Ve.BOOLEAN],itemInsertLocationFreedom:[!0,Ve.BOOLEAN],itemInsertLocation:["before",Ve.STRING],itemInsertInterval:[75,Ve.INT],dropOnPage:[!1,Ve.BOOLEAN],dropOnElement:[!0,Ve.BOOLEAN],dropValidation:[!1,Ve.BOOLEAN],ignoredFiles:[[".ds_store","thumbs.db","desktop.ini"],Ve.ARRAY],instantUpload:[!0,Ve.BOOLEAN],maxParallelUploads:[2,Ve.INT],chunkUploads:[!1,Ve.BOOLEAN],chunkForce:[!1,Ve.BOOLEAN],chunkSize:[5e6,Ve.INT],chunkRetryDelays:[[500,1e3,3e3],Ve.Array],server:[null,Ve.SERVER_API],labelDecimalSeparator:[Fe(),Ve.STRING],labelThousandsSeparator:[Ue(),Ve.STRING],labelIdle:['Drag & Drop your files or <span class="filepond--label-action">Browse</span>',Ve.STRING],labelInvalidField:["Field contains invalid files",Ve.STRING],labelFileWaitingForSize:["Waiting for size",Ve.STRING],labelFileSizeNotAvailable:["Size not available",Ve.STRING],labelFileCountSingular:["file in list",Ve.STRING],labelFileCountPlural:["files in list",Ve.STRING],labelFileLoading:["Loading",Ve.STRING],labelFileAdded:["Added",Ve.STRING],labelFileLoadError:["Error during load",Ve.STRING],labelFileRemoved:["Removed",Ve.STRING],labelFileRemoveError:["Error during remove",Ve.STRING],labelFileProcessing:["Uploading",Ve.STRING],labelFileProcessingComplete:["Upload complete",Ve.STRING],labelFileProcessingAborted:["Upload cancelled",Ve.STRING],labelFileProcessingError:["Error during upload",Ve.STRING],labelFileProcessingRevertError:["Error during revert",Ve.STRING],labelTapToCancel:["tap to cancel",Ve.STRING],labelTapToRetry:["tap to retry",Ve.STRING],labelTapToUndo:["tap to undo",Ve.STRING],labelButtonRemoveItem:["Remove",Ve.STRING],labelButtonAbortItemLoad:["Abort",Ve.STRING],labelButtonRetryItemLoad:["Retry",Ve.STRING],labelButtonAbortItemProcessing:["Cancel",Ve.STRING],labelButtonUndoItemProcessing:["Undo",Ve.STRING],labelButtonRetryItemProcessing:["Retry",Ve.STRING],labelButtonProcessItem:["Upload",Ve.STRING],iconRemove:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z" fill="currentColor" fill-rule="nonzero"/></svg>',Ve.STRING],iconProcess:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z" fill="currentColor" fill-rule="evenodd"/></svg>',Ve.STRING],iconRetry:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z" fill="currentColor" fill-rule="nonzero"/></svg>',Ve.STRING],iconUndo:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z" fill="currentColor" fill-rule="nonzero"/></svg>',Ve.STRING],iconDone:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z" fill="currentColor" fill-rule="nonzero"/></svg>',Ve.STRING],oninit:[null,Ve.FUNCTION],onwarning:[null,Ve.FUNCTION],onerror:[null,Ve.FUNCTION],onactivatefile:[null,Ve.FUNCTION],oninitfile:[null,Ve.FUNCTION],onaddfilestart:[null,Ve.FUNCTION],onaddfileprogress:[null,Ve.FUNCTION],onaddfile:[null,Ve.FUNCTION],onprocessfilestart:[null,Ve.FUNCTION],onprocessfileprogress:[null,Ve.FUNCTION],onprocessfileabort:[null,Ve.FUNCTION],onprocessfilerevert:[null,Ve.FUNCTION],onprocessfile:[null,Ve.FUNCTION],onprocessfiles:[null,Ve.FUNCTION],onremovefile:[null,Ve.FUNCTION],onpreparefile:[null,Ve.FUNCTION],onupdatefiles:[null,Ve.FUNCTION],onreorderfiles:[null,Ve.FUNCTION],beforeDropFile:[null,Ve.FUNCTION],beforeAddFile:[null,Ve.FUNCTION],beforeRemoveFile:[null,Ve.FUNCTION],stylePanelLayout:[null,Ve.STRING],stylePanelAspectRatio:[null,Ve.STRING],styleItemPanelAspectRatio:[null,Ve.STRING],styleButtonRemoveItemPosition:["left",Ve.STRING],styleButtonProcessItemPosition:["right",Ve.STRING],styleLoadIndicatorPosition:["right",Ve.STRING],styleProgressIndicatorPosition:["right",Ve.STRING],styleButtonRemoveItemAlign:[!1,Ve.BOOLEAN],files:[[],Ve.ARRAY]},Ke=function(e,t){return B(t)?e[0]||null:Q(t)?e[t]||null:("object"==typeof t&&(t=t.id),e.find((function(e){return e.id===t}))||null)},Qe=function(e){if(B(e))return e;if(/:/.test(e)){var t=e.split(":");return t[1]/t[0]}return parseFloat(e)},Je=function(e){return e.filter((function(e){return!e.archived}))},$e={EMPTY:0,IDLE:1,ERROR:2,BUSY:3,READY:4},et=[Ge.LOAD_ERROR,Ge.PROCESSING_ERROR,Ge.PROCESSING_REVERT_ERROR],tt=[Ge.LOADING,Ge.PROCESSING,Ge.PROCESSING_QUEUED,Ge.INIT],nt=[Ge.PROCESSING_COMPLETE],rt=function(e){return et.includes(e.status)},ot=function(e){return tt.includes(e.status)},it=function(e){return nt.includes(e.status)},at=function(e){return{GET_STATUS:function(){var t=Je(e.items),n=$e.EMPTY,r=$e.ERROR,o=$e.BUSY,i=$e.IDLE,a=$e.READY;return 0===t.length?n:t.some(rt)?r:t.some(ot)?o:t.some(it)?a:i},GET_ITEM:function(t){return Ke(e.items,t)},GET_ACTIVE_ITEM:function(t){return Ke(Je(e.items),t)},GET_ACTIVE_ITEMS:function(){return Je(e.items)},GET_ITEMS:function(){return e.items},GET_ITEM_NAME:function(t){var n=Ke(e.items,t);return n?n.filename:null},GET_ITEM_SIZE:function(t){var n=Ke(e.items,t);return n?n.fileSize:null},GET_STYLES:function(){return Object.keys(e.options).filter((function(e){return/^style/.test(e)})).map((function(t){return{name:t,value:e.options[t]}}))},GET_PANEL_ASPECT_RATIO:function(){return/circle/.test(e.options.stylePanelLayout)?1:Qe(e.options.stylePanelAspectRatio)},GET_ITEM_PANEL_ASPECT_RATIO:function(){return e.options.styleItemPanelAspectRatio},GET_ITEMS_BY_STATUS:function(t){return Je(e.items).filter((function(e){return e.status===t}))},GET_TOTAL_ITEMS:function(){return Je(e.items).length},IS_ASYNC:function(){return ie(e.options.server)&&(ie(e.options.server.process)||$(e.options.server.process))}}},ct=function(e){var t=Je(e.items).length;if(!e.options.allowMultiple)return 0===t;var n=e.options.maxFiles;return null===n||t<n},ut=function(e,t,n){return Math.max(Math.min(n,e),t)},st=function(e,t,n){return e.splice(t,0,n)},lt=function(e,t,n){return B(t)?null:void 0===n?(e.push(t),t):(n=ut(n,0,e.length),st(e,n,t),t)},ft=function(e){return/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i.test(e)},pt=function(e){return e.split("/").pop().split("?").shift()},dt=function(e){return e.split(".").pop()},ht=function(e){if("string"!=typeof e)return"";var t=e.split("/").pop();return/svg/.test(t)?"svg":/zip|compressed/.test(t)?"zip":/plain/.test(t)?"txt":/msword/.test(t)?"doc":/[a-z]+/.test(t)?"jpeg"===t?"jpg":t:""},vt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(t+e).slice(-t.length)},mt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return e.getFullYear()+"-"+vt(e.getMonth()+1,"00")+"-"+vt(e.getDate(),"00")+"_"+vt(e.getHours(),"00")+"-"+vt(e.getMinutes(),"00")+"-"+vt(e.getSeconds(),"00")},Et=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="string"==typeof n?e.slice(0,e.size,n):e.slice(0,e.size,e.type);return o.lastModifiedDate=new Date,e._relativePath&&(o._relativePath=e._relativePath),z(t)||(t=mt()),t&&null===r&&dt(t)?o.name=t:(r=r||ht(o.type),o.name=t+(r?"."+r:"")),o},yt=function(){return window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder},gt=function(e,t){var n=yt();if(n){var r=new n;return r.append(e),r.getBlob(t)}return new Blob([e],{type:t})},_t=function(e,t){for(var n=new ArrayBuffer(e.length),r=new Uint8Array(n),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);return gt(n,t)},Tt=function(e){return(/^data:(.+);/.exec(e)||[])[1]||null},It=function(e){return e.split(",")[1].replace(/\s/g,"")},bt=function(e){return atob(It(e))},Ot=function(e){var t=Tt(e),n=bt(e);return _t(n,t)},Rt=function(e,t,n){return Et(Ot(e),t,null,n)},wt=function(e){if(!/^content-disposition:/i.test(e))return null;var t=e.split(/filename=|filename\*=.+''/).splice(1).map((function(e){return e.trim().replace(/^["']|[;"']{0,2}$/g,"")})).filter((function(e){return e.length}));return t.length?decodeURI(t[t.length-1]):null},St=function(e){if(/content-length:/i.test(e)){var t=e.match(/[0-9]+/)[0];return t?parseInt(t,10):null}return null},Dt=function(e){return/x-content-transfer-id:/i.test(e)&&(e.split(":")[1]||"").trim()||null},At=function(e){var t={source:null,name:null,size:null},n=e.split("\n"),r=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var u=a.value,s=wt(u);if(s)t.name=s;else{var l=St(u);if(l)t.size=l;else{var f=Dt(u);f&&(t.source=f)}}}}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t},Pt=function(e){var t={source:null,complete:!1,progress:0,size:null,timestamp:null,duration:0,request:null},n=function(){return t.progress},r=function(){t.request&&t.request.abort&&t.request.abort()},o=function(){var e=t.source;a.fire("init",e),e instanceof File?a.fire("load",e):e instanceof Blob?a.fire("load",Et(e,e.name)):ft(e)?a.fire("load",Rt(e)):i(e)},i=function(n){e?(t.timestamp=Date.now(),t.request=e(n,(function(e){t.duration=Date.now()-t.timestamp,t.complete=!0,e instanceof Blob&&(e=Et(e,e.name||pt(n))),a.fire("load",e instanceof Blob?e:e?e.body:null)}),(function(e){a.fire("error","string"==typeof e?{type:"error",code:0,body:e}:e)}),(function(e,n,r){r&&(t.size=r),t.duration=Date.now()-t.timestamp,e?(t.progress=n/r,a.fire("progress",t.progress)):t.progress=null}),(function(){a.fire("abort")}),(function(e){var n=At("string"==typeof e?e:e.headers);a.fire("meta",{size:t.size||n.size,filename:n.name,source:n.source})}))):a.fire("error",{type:"error",body:"Can't load URL",code:400})},a=Object.assign({},Le(),{setSource:function(e){return t.source=e},getProgress:n,abort:r,load:o});return a},Lt=function(e){return/GET|HEAD/.test(e)},Mt=function(e,t,n){var r={onheaders:function(){},onprogress:function(){},onload:function(){},ontimeout:function(){},onerror:function(){},onabort:function(){},abort:function(){o=!0,a.abort()}},o=!1,i=!1;n=Object.assign({method:"POST",headers:{},withCredentials:!1},n),t=encodeURI(t),Lt(n.method)&&e&&(t=""+t+encodeURIComponent("string"==typeof e?e:JSON.stringify(e)));var a=new XMLHttpRequest;return(Lt(n.method)?a:a.upload).onprogress=function(e){o||r.onprogress(e.lengthComputable,e.loaded,e.total)},a.onreadystatechange=function(){a.readyState<2||4===a.readyState&&0===a.status||i||(i=!0,r.onheaders(a))},a.onload=function(){a.status>=200&&a.status<300?r.onload(a):r.onerror(a)},a.onerror=function(){return r.onerror(a)},a.onabort=function(){o=!0,r.onabort()},a.ontimeout=function(){return r.ontimeout(a)},a.open(n.method,t,!0),Q(n.timeout)&&(a.timeout=n.timeout),Object.keys(n.headers).forEach((function(e){var t=unescape(encodeURIComponent(n.headers[e]));a.setRequestHeader(e,t)})),n.responseType&&(a.responseType=n.responseType),n.withCredentials&&(a.withCredentials=!0),a.send(e),r},Ct=function(e,t,n,r){return{type:e,code:t,body:n,headers:r}},Nt=function(e){return function(t){e(Ct("error",0,"Timeout",t.getAllResponseHeaders()))}},xt=function(e){return/\?/.test(e)},Gt=function(){for(var e="",t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e+=xt(e)&&xt(t)?t.replace(/\?/,"&"):t})),e},jt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!z(t.url))return null;var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a,c,u,s){var l=Mt(o,Gt(e,t.url),Object.assign({},t,{responseType:"blob"}));return l.onload=function(e){var r=e.getAllResponseHeaders(),a=At(r).name||pt(o);i(Ct("load",e.status,"HEAD"===t.method?null:Et(n(e.response),a),r))},l.onerror=function(e){a(Ct("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},l.onheaders=function(e){s(Ct("headers",e.status,null,e.getAllResponseHeaders()))},l.ontimeout=Nt(a),l.onprogress=c,l.onabort=u,l}},kt={QUEUED:0,COMPLETE:1,PROCESSING:2,ERROR:3,WAITING:4},Ft=function(e,t,n,r,o,i,a,c,u,s,l){for(var f=[],p=l.chunkTransferId,d=l.chunkServer,h=l.chunkSize,v=l.chunkRetryDelays,m={serverId:p,aborted:!1},E=t.ondata||function(e){return e},y=t.onload||function(e,t){return"HEAD"===t?e.getResponseHeader("Upload-Offset"):e.response},g=t.onerror||function(e){return null},_=function(i){var c=new FormData;ie(o)&&c.append(n,JSON.stringify(o));var u="function"==typeof t.headers?t.headers(r,o):Object.assign({},t.headers,{"Upload-Length":r.size}),s=Object.assign({},t,{headers:u}),l=Mt(E(c),Gt(e,t.url),s);l.onload=function(e){return i(y(e,s.method))},l.onerror=function(e){return a(Ct("error",e.status,g(e.response)||e.statusText,e.getAllResponseHeaders()))},l.ontimeout=Nt(a)},T=function(n){var r=Gt(e,d.url,m.serverId),o={headers:"function"==typeof t.headers?t.headers(m.serverId):Object.assign({},t.headers),method:"HEAD"},i=Mt(null,r,o);i.onload=function(e){return n(y(e,o.method))},i.onerror=function(e){return a(Ct("error",e.status,g(e.response)||e.statusText,e.getAllResponseHeaders()))},i.ontimeout=Nt(a)},I=Math.floor(r.size/h),b=0;b<=I;b++){var O=b*h,R=r.slice(O,O+h,"application/offset+octet-stream");f[b]={index:b,size:R.size,offset:O,data:R,file:r,progress:0,retries:Re(v),status:kt.QUEUED,error:null,request:null,timeout:null}}var w=function(){return i(m.serverId)},S=function(e){return e.status===kt.QUEUED||e.status===kt.ERROR},D=function(t){if(!m.aborted)if(t=t||f.find(S)){t.status=kt.PROCESSING,t.progress=null;var n=d.ondata||function(e){return e},o=d.onerror||function(e){return null},i=Gt(e,d.url,m.serverId),c="function"==typeof d.headers?d.headers(t):Object.assign({},d.headers,{"Content-Type":"application/offset+octet-stream","Upload-Offset":t.offset,"Upload-Length":r.size,"Upload-Name":r.name}),s=t.request=Mt(n(t.data),i,Object.assign({},d,{headers:c}));s.onload=function(){t.status=kt.COMPLETE,t.request=null,L()},s.onprogress=function(e,n,r){t.progress=e?n:null,P()},s.onerror=function(e){t.status=kt.ERROR,t.request=null,t.error=o(e.response)||e.statusText,A(t)||a(Ct("error",e.status,o(e.response)||e.statusText,e.getAllResponseHeaders()))},s.ontimeout=function(e){t.status=kt.ERROR,t.request=null,A(t)||Nt(a)(e)},s.onabort=function(){t.status=kt.QUEUED,t.request=null,u()}}else f.every((function(e){return e.status===kt.COMPLETE}))&&w()},A=function(e){return 0!==e.retries.length&&(e.status=kt.WAITING,clearTimeout(e.timeout),e.timeout=setTimeout((function(){D(e)}),e.retries.shift()),!0)},P=function(){var e=f.reduce((function(e,t){return null===e||null===t.progress?null:e+t.progress}),0);if(null===e)return c(!1,0,0);var t=f.reduce((function(e,t){return e+t.size}),0);c(!0,e,t)},L=function(){f.filter((function(e){return e.status===kt.PROCESSING})).length>=1||D()},M=function(){f.forEach((function(e){clearTimeout(e.timeout),e.request&&e.request.abort()}))};return m.serverId?T((function(e){m.aborted||(f.filter((function(t){return t.offset<e})).forEach((function(e){e.status=kt.COMPLETE,e.progress=e.size})),L())})):_((function(e){m.aborted||(s(e),m.serverId=e,L())})),{abort:function(){m.aborted=!0,M()}}},Ut=function(e,t,n,r){return function(o,i,a,c,u,s,l){if(o){var f=r.chunkUploads,p=f&&o.size>r.chunkSize,d=f&&(p||r.chunkForce);if(o instanceof Blob&&d)return Ft(e,t,n,o,i,a,c,u,s,l,r);var h=t.ondata||function(e){return e},v=t.onload||function(e){return e},m=t.onerror||function(e){return null},E=new FormData;ie(i)&&E.append(n,JSON.stringify(i)),(o instanceof Blob?[{name:null,file:o}]:o).forEach((function(e){E.append(n,e.file,null===e.name?e.file.name:""+e.name+e.file.name)}));var y=Mt(h(E),Gt(e,t.url),t);return y.onload=function(e){a(Ct("load",e.status,v(e.response),e.getAllResponseHeaders()))},y.onerror=function(e){c(Ct("error",e.status,m(e.response)||e.statusText,e.getAllResponseHeaders()))},y.ontimeout=Nt(c),y.onprogress=u,y.onabort=s,y}}},Vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return"function"==typeof t?function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return t.apply(void 0,[n].concat(o,[r]))}:t&&z(t.url)?Ut(e,t,n,r):null},Bt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!z(t.url))return function(e,t){return t()};var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a){var c=Mt(o,e+t.url,t);return c.onload=function(e){i(Ct("load",e.status,n(e.response),e.getAllResponseHeaders()))},c.onerror=function(e){a(Ct("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},c.ontimeout=Nt(a),c}},qt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+Math.random()*(t-e)},Yt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,o=null,i=Date.now();return function a(){var c=Date.now()-i,u=qt(n,r);c+u>t&&(u=c+u-t);var s=c/t;s>=1||document.hidden?e(1):(e(s),o=setTimeout(a,u))}(),{clear:function(){clearTimeout(o)}}},Ht=function(e){var t={complete:!1,perceivedProgress:0,perceivedPerformanceUpdater:null,progress:null,timestamp:null,perceivedDuration:0,duration:0,request:null,response:null},n=function(n,r){var o=function(){0!==t.duration&&null!==t.progress&&c.fire("progress",c.getProgress())},i=function(){t.complete=!0,c.fire("load-perceived",t.response.body)};c.fire("start"),t.timestamp=Date.now(),t.perceivedPerformanceUpdater=Yt((function(e){t.perceivedProgress=e,t.perceivedDuration=Date.now()-t.timestamp,o(),t.response&&1===t.perceivedProgress&&!t.complete&&i()}),qt(750,1500)),t.request=e(n,r,(function(e){t.response=ie(e)?e:{type:"load",code:200,body:""+e,headers:{}},t.duration=Date.now()-t.timestamp,t.progress=1,c.fire("load",t.response.body),1===t.perceivedProgress&&i()}),(function(e){t.perceivedPerformanceUpdater.clear(),c.fire("error",ie(e)?e:{type:"error",code:0,body:""+e})}),(function(e,n,r){t.duration=Date.now()-t.timestamp,t.progress=e?n/r:null,o()}),(function(){t.perceivedPerformanceUpdater.clear(),c.fire("abort",t.response?t.response.body:null)}),(function(e){c.fire("transfer",e)}))},r=function(){t.request&&(t.perceivedPerformanceUpdater.clear(),t.request.abort&&t.request.abort(),t.complete=!0)},o=function(){r(),t.complete=!1,t.perceivedProgress=0,t.progress=0,t.timestamp=null,t.perceivedDuration=0,t.duration=0,t.request=null,t.response=null},i=function(){return t.progress?Math.min(t.progress,t.perceivedProgress):null},a=function(){return Math.min(t.duration,t.perceivedDuration)},c=Object.assign({},Le(),{process:n,abort:r,getProgress:i,getDuration:a,reset:o});return c},Wt=function(e){return e.substr(0,e.lastIndexOf("."))||e},zt=function(e){var t=[e.name,e.size,e.type];return e instanceof Blob||ft(e)?t[0]=e.name||mt():ft(e)?(t[1]=e.length,t[2]=Tt(e)):z(e)&&(t[0]=pt(e),t[1]=0,t[2]="application/octet-stream"),{name:t[0],size:t[1],type:t[2]}},Xt=function(e){return!!(e instanceof File||e instanceof Blob&&e.name)},Zt=function e(t){if(!ie(t))return t;var n=V(t)?[]:{};for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];n[r]=o&&ie(o)?e(o):o}return n},Kt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=_e(),i={archived:!1,frozen:!1,released:!1,source:null,file:r,serverFileReference:n,transferId:null,processingAborted:!1,status:n?Ge.PROCESSING_COMPLETE:Ge.INIT,activeLoader:null,activeProcessor:null},c=null,u={},s=function(e){return i.status=e},l=function(e){if(!i.released&&!i.frozen){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];O.fire.apply(O,[e].concat(n))}},f=function(){return dt(i.file.name)},p=function(){return i.file.type},d=function(){return i.file.size},h=function(){return i.file},v=function(e,n,r){i.source=e,O.fireSync("init"),i.file?O.fireSync("load-skip"):(i.file=zt(e),n.on("init",(function(){l("load-init")})),n.on("meta",(function(e){i.file.size=e.size,i.file.filename=e.filename,e.source&&(t=je.LIMBO,i.serverFileReference=e.source,i.status=Ge.PROCESSING_COMPLETE),l("load-meta")})),n.on("progress",(function(e){s(Ge.LOADING),l("load-progress",e)})),n.on("error",(function(e){s(Ge.LOAD_ERROR),l("load-request-error",e)})),n.on("abort",(function(){s(Ge.INIT),l("load-abort")})),n.on("load",(function(e){i.activeLoader=null;var n=function(e){i.file=Xt(e)?e:i.file,t===je.LIMBO&&i.serverFileReference?s(Ge.PROCESSING_COMPLETE):s(Ge.IDLE),l("load")},o=function(t){i.file=e,l("load-meta"),s(Ge.LOAD_ERROR),l("load-file-error",t)};i.serverFileReference?n(e):r(e,n,o)})),n.setSource(e),i.activeLoader=n,n.load())},m=function(){i.activeLoader&&i.activeLoader.load()},E=function(){i.activeLoader?i.activeLoader.abort():(s(Ge.INIT),l("load-abort"))},y=function e(t,n){if(i.processingAborted)i.processingAborted=!1;else if(s(Ge.PROCESSING),c=null,i.file instanceof Blob){t.on("load",(function(e){i.transferId=null,i.serverFileReference=e})),t.on("transfer",(function(e){i.transferId=e})),t.on("load-perceived",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(Ge.PROCESSING_COMPLETE),l("process-complete",e)})),t.on("start",(function(){l("process-start")})),t.on("error",(function(e){i.activeProcessor=null,s(Ge.PROCESSING_ERROR),l("process-error",e)})),t.on("abort",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,s(Ge.IDLE),l("process-abort"),c&&c()})),t.on("progress",(function(e){l("process-progress",e)}));var r=function(e){i.archived||t.process(e,Object.assign({},u))},o=console.error;n(i.file,r,o),i.activeProcessor=t}else O.on("load",(function(){e(t,n)}))},g=function(){i.processingAborted=!1,s(Ge.PROCESSING_QUEUED)},_=function(){return new e((function(e){if(!i.activeProcessor)return i.processingAborted=!0,s(Ge.IDLE),l("process-abort"),void e();c=function(){e()},i.activeProcessor.abort()}))},T=function(t,n){return new e((function(e,r){null!==i.serverFileReference?(t(i.serverFileReference,(function(){i.serverFileReference=null,e()}),(function(t){n?(s(Ge.PROCESSING_REVERT_ERROR),l("process-revert-error"),r(t)):e()})),s(Ge.IDLE),l("process-revert")):e()}))},I=function(e,t,n){var r=e.split("."),o=r[0],i=r.pop(),a=u;r.forEach((function(e){return a=a[e]})),JSON.stringify(a[i])!==JSON.stringify(t)&&(a[i]=t,n||l("metadata-update",{key:o,value:u[o]}))},b=function(e){return Zt(e?u[e]:u)},O=Object.assign({id:{get:function(){return o}},origin:{get:function(){return t}},serverId:{get:function(){return i.serverFileReference}},transferId:{get:function(){return i.transferId}},status:{get:function(){return i.status}},filename:{get:function(){return i.file.name}},filenameWithoutExtension:{get:function(){return Wt(i.file.name)}},fileExtension:{get:f},fileType:{get:p},fileSize:{get:d},file:{get:h},relativePath:{get:function(){return i.file._relativePath}},source:{get:function(){return i.source}},getMetadata:b,setMetadata:function(e,t,n){if(ie(e)){var r=e;return Object.keys(r).forEach((function(e){I(e,r[e],t)})),e}return I(e,t,n),t},extend:function(e,t){return R[e]=t},abortLoad:E,retryLoad:m,requestProcessing:g,abortProcessing:_,load:v,process:y,revert:T},Le(),{freeze:function(){return i.frozen=!0},release:function(){return i.released=!0},released:{get:function(){return i.released}},archive:function(){return i.archived=!0},archived:{get:function(){return i.archived}}}),R=a(O);return R},Qt=function(e,t){return B(t)?0:z(t)?e.findIndex((function(e){return e.id===t})):-1},Jt=function(e,t){var n=Qt(e,t);if(!(n<0))return e[n]||null},$t=function(e,t,n,r,o,i){var a=Mt(null,e,{method:"GET",responseType:"blob"});return a.onload=function(n){var r=n.getAllResponseHeaders(),o=At(r).name||pt(e);t(Ct("load",n.status,Et(n.response,o),r))},a.onerror=function(e){n(Ct("error",e.status,e.statusText,e.getAllResponseHeaders()))},a.onheaders=function(e){i(Ct("headers",e.status,null,e.getAllResponseHeaders()))},a.ontimeout=Nt(n),a.onprogress=r,a.onabort=o,a},en=function(e){return 0===e.indexOf("//")&&(e=location.protocol+e),e.toLowerCase().replace("blob:","").replace(/([a-z])?:\/\//,"$1").split("/")[0]},tn=function(e){return(e.indexOf(":")>-1||e.indexOf("//")>-1)&&en(location.href)!==en(e)},nn=function(e){return function(){return $(e)?e.apply(void 0,arguments):e}},rn=function(e){return!Xt(e.file)},on=function(e,t){clearTimeout(t.listUpdateTimeout),t.listUpdateTimeout=setTimeout((function(){e("DID_UPDATE_ITEMS",{items:Je(t.items)})}),0)},an=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return new e((function(e){if(!t)return e(!0);var n=t.apply(void 0,r);return null==n?e(!0):"boolean"==typeof n?e(n):void("function"==typeof n.then&&n.then(e))}))},cn=function(e,t){e.items.sort((function(e,n){return t(Ne(e),Ne(n))}))},un=function(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.query,o=n.success,i=void 0===o?function(){}:o,a=n.failure,c=void 0===a?function(){}:a,u=Oe(n,["query","success","failure"]),s=Ke(e.items,r);s?t(s,i,c,u||{}):c({error:Ct("error",0,"Item not found"),file:null})}},sn=function(t,n,r){return{ABORT_ALL:function(){Je(r.items).forEach((function(e){e.freeze(),e.abortLoad(),e.abortProcessing()}))},DID_SET_FILES:function(e){var n=e.value,o=(void 0===n?[]:n).map((function(e){return{source:e.source?e.source:e,options:e.options}})),i=Je(r.items);i.forEach((function(e){o.find((function(t){return t.source===e.source||t.source===e.file}))||t("REMOVE_ITEM",{query:e,remove:!1})})),i=Je(r.items),o.forEach((function(e,n){i.find((function(t){return t.source===e.source||t.file===e.source}))||t("ADD_ITEM",Object.assign({},e,{interactionMethod:ge.NONE,index:n}))}))},DID_UPDATE_ITEM_METADATA:function(e){var o=e.id;clearTimeout(r.itemUpdateTimeout),r.itemUpdateTimeout=setTimeout((function(){var e=Jt(r.items,o);if(n("IS_ASYNC")){var i=function(){setTimeout((function(){t("REQUEST_ITEM_PROCESSING",{query:o})}),32)},a=function(t){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(t?i:function(){}).catch((function(){}))},c=function(t){e.abortProcessing().then(t?i:function(){})};return e.status===Ge.PROCESSING_COMPLETE?a(r.options.instantUpload):e.status===Ge.PROCESSING?c(r.options.instantUpload):void(r.options.instantUpload&&i())}qe("SHOULD_PREPARE_OUTPUT",!1,{item:e,query:n}).then((function(n){n&&t("REQUEST_PREPARE_OUTPUT",{query:o,item:e,success:function(e){t("DID_PREPARE_OUTPUT",{id:o,file:e})}},!0)}))}),0)},MOVE_ITEM:function(e){var t=e.query,n=e.index,o=Ke(r.items,t);if(o){var i=r.items.indexOf(o);i!==(n=ut(n,0,r.items.length-1))&&r.items.splice(n,0,r.items.splice(i,1)[0])}},SORT:function(e){var o=e.compare;cn(r,o),t("DID_SORT_ITEMS",{items:n("GET_ACTIVE_ITEMS")})},ADD_ITEMS:function(r){var o=r.items,i=r.index,a=r.interactionMethod,c=r.success,u=void 0===c?function(){}:c,s=r.failure,l=void 0===s?function(){}:s,f=i;if(-1===i||void 0===i){var p=n("GET_ITEM_INSERT_LOCATION"),d=n("GET_TOTAL_ITEMS");f="before"===p?0:d}var h=n("GET_IGNORED_FILES"),v=function(e){return Xt(e)?!h.includes(e.name.toLowerCase()):!B(e)},m=o.filter(v).map((function(n){return new e((function(e,r){t("ADD_ITEM",{interactionMethod:a,source:n.source||n,success:e,failure:r,index:f++,options:n.options||{}})}))}));e.all(m).then(u).catch(l)},ADD_ITEM:function(e){var o=e.source,i=e.index,a=void 0===i?-1:i,c=e.interactionMethod,u=e.success,s=void 0===u?function(){}:u,l=e.failure,f=void 0===l?function(){}:l,p=e.options,d=void 0===p?{}:p;if(B(o))f({error:Ct("error",0,"No source"),file:null});else if(!Xt(o)||!r.options.ignoredFiles.includes(o.name.toLowerCase())){if(!ct(r)){if(r.options.allowMultiple||!r.options.allowMultiple&&!r.options.allowReplace){var h=Ct("warning",0,"Max files");return t("DID_THROW_MAX_FILES",{source:o,error:h}),void f({error:h,file:null})}var v=Je(r.items)[0];if(v.status===Ge.PROCESSING_COMPLETE||v.status===Ge.PROCESSING_REVERT_ERROR){var m=n("GET_FORCE_REVERT");if(v.revert(Bt(r.options.server.url,r.options.server.revert),m).then((function(){m&&t("ADD_ITEM",{source:o,index:a,interactionMethod:c,success:s,failure:f,options:d})})).catch((function(){})),m)return}t("REMOVE_ITEM",{query:v.id})}var E="local"===d.type?je.LOCAL:"limbo"===d.type?je.LIMBO:je.INPUT,y=Kt(E,E===je.INPUT?null:o,d.file);Object.keys(d.metadata||{}).forEach((function(e){y.setMetadata(e,d.metadata[e])})),Ye("DID_CREATE_ITEM",y,{query:n,dispatch:t});var g=n("GET_ITEM_INSERT_LOCATION");r.options.itemInsertLocationFreedom||(a="before"===g?-1:r.items.length),lt(r.items,y,a),$(g)&&o&&cn(r,g);var _=y.id;y.on("init",(function(){t("DID_INIT_ITEM",{id:_})})),y.on("load-init",(function(){t("DID_START_ITEM_LOAD",{id:_})})),y.on("load-meta",(function(){t("DID_UPDATE_ITEM_META",{id:_})})),y.on("load-progress",(function(e){t("DID_UPDATE_ITEM_LOAD_PROGRESS",{id:_,progress:e})})),y.on("load-request-error",(function(e){var n=nn(r.options.labelFileLoadError)(e);if(e.code>=400&&e.code<500)return t("DID_THROW_ITEM_INVALID",{id:_,error:e,status:{main:n,sub:e.code+" ("+e.body+")"}}),void f({error:e,file:Ne(y)});t("DID_THROW_ITEM_LOAD_ERROR",{id:_,error:e,status:{main:n,sub:r.options.labelTapToRetry}})})),y.on("load-file-error",(function(e){t("DID_THROW_ITEM_INVALID",{id:_,error:e.status,status:e.status}),f({error:e.status,file:Ne(y)})})),y.on("load-abort",(function(){t("REMOVE_ITEM",{query:_})})),y.on("load-skip",(function(){t("COMPLETE_LOAD_ITEM",{query:_,item:y,data:{source:o,success:s}})})),y.on("load",(function(){var e=function(e){e?(y.on("metadata-update",(function(e){t("DID_UPDATE_ITEM_METADATA",{id:_,change:e})})),qe("SHOULD_PREPARE_OUTPUT",!1,{item:y,query:n}).then((function(e){var n=function(){t("COMPLETE_LOAD_ITEM",{query:_,item:y,data:{source:o,success:s}}),on(t,r)};e?t("REQUEST_PREPARE_OUTPUT",{query:_,item:y,success:function(e){t("DID_PREPARE_OUTPUT",{id:_,file:e}),n()}},!0):n()}))):t("REMOVE_ITEM",{query:_})};qe("DID_LOAD_ITEM",y,{query:n,dispatch:t}).then((function(){an(n("GET_BEFORE_ADD_FILE"),Ne(y)).then(e)})).catch((function(){e(!1)}))})),y.on("process-start",(function(){t("DID_START_ITEM_PROCESSING",{id:_})})),y.on("process-progress",(function(e){t("DID_UPDATE_ITEM_PROCESS_PROGRESS",{id:_,progress:e})})),y.on("process-error",(function(e){t("DID_THROW_ITEM_PROCESSING_ERROR",{id:_,error:e,status:{main:nn(r.options.labelFileProcessingError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-revert-error",(function(e){t("DID_THROW_ITEM_PROCESSING_REVERT_ERROR",{id:_,error:e,status:{main:nn(r.options.labelFileProcessingRevertError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-complete",(function(e){t("DID_COMPLETE_ITEM_PROCESSING",{id:_,error:null,serverFileReference:e}),t("DID_DEFINE_VALUE",{id:_,value:e})})),y.on("process-abort",(function(){t("DID_ABORT_ITEM_PROCESSING",{id:_})})),y.on("process-revert",(function(){t("DID_REVERT_ITEM_PROCESSING",{id:_}),t("DID_DEFINE_VALUE",{id:_,value:null})})),t("DID_ADD_ITEM",{id:_,index:a,interactionMethod:c}),on(t,r);var T=r.options.server||{},I=T.url,b=T.load,O=T.restore,R=T.fetch;y.load(o,Pt(E===je.INPUT?z(o)&&tn(o)&&R?jt(I,R):$t:E===je.LIMBO?jt(I,O):jt(I,b)),(function(e,t,r){qe("LOAD_FILE",e,{query:n}).then(t).catch(r)}))}},REQUEST_PREPARE_OUTPUT:function(e){var t=e.item,r=e.success,o=e.failure,i=void 0===o?function(){}:o,a={error:Ct("error",0,"Item not found"),file:null};if(t.archived)return i(a);qe("PREPARE_OUTPUT",t.file,{query:n,item:t}).then((function(e){qe("COMPLETE_PREPARE_OUTPUT",e,{query:n,item:t}).then((function(e){if(t.archived)return i(a);r(e)}))}))},COMPLETE_LOAD_ITEM:function(e){var o=e.item,i=e.data,a=i.success,c=i.source,u=n("GET_ITEM_INSERT_LOCATION");if($(u)&&c&&cn(r,u),t("DID_LOAD_ITEM",{id:o.id,error:null,serverFileReference:o.origin===je.INPUT?null:c}),a(Ne(o)),o.origin!==je.LOCAL)return o.origin===je.LIMBO?(t("DID_COMPLETE_ITEM_PROCESSING",{id:o.id,error:null,serverFileReference:c}),void t("DID_DEFINE_VALUE",{id:o.id,value:c})):void(n("IS_ASYNC")&&r.options.instantUpload&&t("REQUEST_ITEM_PROCESSING",{query:o.id}));t("DID_LOAD_LOCAL_ITEM",{id:o.id})},RETRY_ITEM_LOAD:un(r,(function(e){e.retryLoad()})),REQUEST_ITEM_PREPARE:un(r,(function(e,n,r){t("REQUEST_PREPARE_OUTPUT",{query:e.id,item:e,success:function(r){t("DID_PREPARE_OUTPUT",{id:e.id,file:r}),n({file:e,output:r})},failure:r},!0)})),REQUEST_ITEM_PROCESSING:un(r,(function(e,o,i){if(e.status===Ge.IDLE||e.status===Ge.PROCESSING_ERROR)e.status!==Ge.PROCESSING_QUEUED&&(e.requestProcessing(),t("DID_REQUEST_ITEM_PROCESSING",{id:e.id}),t("PROCESS_ITEM",{query:e,success:o,failure:i},!0));else{var a=function(){return t("REQUEST_ITEM_PROCESSING",{query:e,success:o,failure:i})},c=function(){return document.hidden?a():setTimeout(a,32)};e.status===Ge.PROCESSING_COMPLETE||e.status===Ge.PROCESSING_REVERT_ERROR?e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(c).catch((function(){})):e.status===Ge.PROCESSING&&e.abortProcessing().then(c)}})),PROCESS_ITEM:un(r,(function(e,o,i){var a=n("GET_MAX_PARALLEL_UPLOADS");if(n("GET_ITEMS_BY_STATUS",Ge.PROCESSING).length!==a){if(e.status!==Ge.PROCESSING){var c=function e(){var n=r.processingQueue.shift();if(n){var o=n.id,i=n.success,a=n.failure,c=Ke(r.items,o);c&&!c.archived?t("PROCESS_ITEM",{query:o,success:i,failure:a},!0):e()}};e.onOnce("process-complete",(function(){o(Ne(e)),c(),n("GET_ITEMS_BY_STATUS",Ge.PROCESSING_COMPLETE).length===r.items.length&&t("DID_COMPLETE_ITEM_PROCESSING_ALL")})),e.onOnce("process-error",(function(t){i({error:t,file:Ne(e)}),c()}));var u=r.options;e.process(Ht(Vt(u.server.url,u.server.process,u.name,{chunkTransferId:e.transferId,chunkServer:u.server.patch,chunkUploads:u.chunkUploads,chunkForce:u.chunkForce,chunkSize:u.chunkSize,chunkRetryDelays:u.chunkRetryDelays})),(function(r,o,i){qe("PREPARE_OUTPUT",r,{query:n,item:e}).then((function(n){t("DID_PREPARE_OUTPUT",{id:e.id,file:n}),o(n)})).catch(i)}))}}else r.processingQueue.push({id:e.id,success:o,failure:i})})),RETRY_ITEM_PROCESSING:un(r,(function(e){t("REQUEST_ITEM_PROCESSING",{query:e})})),REQUEST_REMOVE_ITEM:un(r,(function(e){an(n("GET_BEFORE_REMOVE_FILE"),Ne(e)).then((function(n){n&&t("REMOVE_ITEM",{query:e})}))})),RELEASE_ITEM:un(r,(function(e){e.release()})),REMOVE_ITEM:un(r,(function(e,o,i,a){var c=function(){var n=e.id;Jt(r.items,n).archive(),t("DID_REMOVE_ITEM",{error:null,id:n,item:e}),on(t,r),o(Ne(e))},u=r.options.server;e.origin===je.LOCAL&&u&&$(u.remove)&&!1!==a.remove?(t("DID_START_ITEM_REMOVE",{id:e.id}),u.remove(e.source,(function(){return c()}),(function(n){t("DID_THROW_ITEM_REMOVE_ERROR",{id:e.id,error:Ct("error",0,n,null),status:{main:nn(r.options.labelFileRemoveError)(n),sub:r.options.labelTapToRetry}})}))):(a.revert&&e.origin!==je.LOCAL&&null!==e.serverId&&e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")),c())})),ABORT_ITEM_LOAD:un(r,(function(e){e.abortLoad()})),ABORT_ITEM_PROCESSING:un(r,(function(e){e.serverId?t("REVERT_ITEM_PROCESSING",{id:e.id}):e.abortProcessing().then((function(){r.options.instantUpload&&t("REMOVE_ITEM",{query:e.id})}))})),REQUEST_REVERT_ITEM_PROCESSING:un(r,(function(e){if(r.options.instantUpload){var o=function(n){n&&t("REVERT_ITEM_PROCESSING",{query:e})},i=n("GET_BEFORE_REMOVE_FILE");if(!i)return o(!0);var a=i(Ne(e));return null==a?o(!0):"boolean"==typeof a?o(a):void("function"==typeof a.then&&a.then(o))}t("REVERT_ITEM_PROCESSING",{query:e})})),REVERT_ITEM_PROCESSING:un(r,(function(e){e.revert(Bt(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then((function(){(r.options.instantUpload||rn(e))&&t("REMOVE_ITEM",{query:e.id})})).catch((function(){}))})),SET_OPTIONS:function(e){var n=e.options;i(n,(function(e,n){t("SET_"+ve(e,"_").toUpperCase(),{value:n})}))}}},ln=function(e){return e},fn=function(e){return document.createElement(e)},pn=function(e,t){var n=e.childNodes[0];n?t!==n.nodeValue&&(n.nodeValue=t):(n=document.createTextNode(t),e.appendChild(n))},dn=function(e,t,n,r){var o=(r%360-90)*Math.PI/180;return{x:e+n*Math.cos(o),y:t+n*Math.sin(o)}},hn=function(e,t,n,r,o,i){var a=dn(e,t,n,o),c=dn(e,t,n,r);return["M",a.x,a.y,"A",n,n,0,i,0,c.x,c.y].join(" ")},vn=function(e,t,n,r,o){var i=1;return o>r&&o-r<=.5&&(i=0),r>o&&r-o>=.5&&(i=0),hn(e,t,n,360*Math.min(.9999,r),360*Math.min(.9999,o),i)},mn=G({tag:"div",name:"progress-indicator",ignoreRectUpdate:!0,ignoreRect:!0,create:function(e){var t=e.root,n=e.props;n.spin=!1,n.progress=0,n.opacity=0;var r=f("svg");t.ref.path=f("path",{"stroke-width":2,"stroke-linecap":"round"}),r.appendChild(t.ref.path),t.ref.svg=r,t.appendChild(r)},write:function(e){var t=e.root,n=e.props;if(0!==n.opacity){n.align&&(t.element.dataset.align=n.align);var r=parseInt(c(t.ref.path,"stroke-width"),10),o=.5*t.rect.element.width,i=0,a=0;n.spin?(i=0,a=.5):(i=0,a=n.progress);var u=vn(o,o,o-r,i,a);c(t.ref.path,"d",u),c(t.ref.path,"stroke-opacity",n.spin||n.progress>0?1:0)}},mixins:{apis:["progress","spin","align"],styles:["opacity"],animations:{opacity:{type:"tween",duration:500},progress:{type:"spring",stiffness:.95,damping:.65,mass:10}}}}),En=G({tag:"button",attributes:{type:"button"},ignoreRect:!0,ignoreRectUpdate:!0,name:"file-action-button",mixins:{apis:["label"],styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}},listeners:!0},create:function(e){var t=e.root,n=e.props;t.element.innerHTML=(n.icon||"")+"<span>"+n.label+"</span>",n.isDisabled=!1},write:function(e){var t=e.root,n=e.props,r=n.isDisabled,o=t.query("GET_DISABLED")||0===n.opacity;o&&!r?(n.isDisabled=!0,c(t.element,"disabled","disabled")):!o&&r&&(n.isDisabled=!1,t.element.removeAttribute("disabled"))}}),yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".";return(e=Math.round(Math.abs(e)))<1e3?e+" bytes":e<_n?Math.floor(e/gn)+" KB":e<Tn?In(e/_n,1,t)+" MB":In(e/Tn,2,t)+" GB"},gn=1e3,_n=1e6,Tn=1e9,In=function(e,t,n){return e.toFixed(t).split(".").filter((function(e){return"0"!==e})).join(n)},bn=function(e){var t=e.root,n=e.props,r=fn("span");r.className="filepond--file-info-main",c(r,"aria-hidden","true"),t.appendChild(r),t.ref.fileName=r;var o=fn("span");o.className="filepond--file-info-sub",t.appendChild(o),t.ref.fileSize=o,pn(o,t.query("GET_LABEL_FILE_WAITING_FOR_SIZE")),pn(r,ln(t.query("GET_ITEM_NAME",n.id)))},On=function(e){var t=e.root,n=e.props;pn(t.ref.fileSize,yn(t.query("GET_ITEM_SIZE",n.id))),pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))},Rn=function(e){var t=e.root,n=e.props;Q(t.query("GET_ITEM_SIZE",n.id))||pn(t.ref.fileSize,t.query("GET_LABEL_FILE_SIZE_NOT_AVAILABLE"))},wn=G({name:"file-info",ignoreRect:!0,ignoreRectUpdate:!0,write:k({DID_LOAD_ITEM:On,DID_UPDATE_ITEM_META:On,DID_THROW_ITEM_LOAD_ERROR:Rn,DID_THROW_ITEM_INVALID:Rn}),didCreateView:function(e){Ye("CREATE_VIEW",Object.assign({},e,{view:e}))},create:bn,mixins:{styles:["translateX","translateY"],animations:{translateX:"spring",translateY:"spring"}}}),Sn=function(e){return Math.round(100*e)},Dn=function(e){var t=e.root,n=fn("span");n.className="filepond--file-status-main",t.appendChild(n),t.ref.main=n;var r=fn("span");r.className="filepond--file-status-sub",t.appendChild(r),t.ref.sub=r,An({root:t,action:{progress:null}})},An=function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_LOADING"):t.query("GET_LABEL_FILE_LOADING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},Pn=function(e){var t=e.root;pn(t.ref.main,""),pn(t.ref.sub,"")},Ln=function(e){var t=e.root,n=e.action;pn(t.ref.main,n.status.main),pn(t.ref.sub,n.status.sub)},Mn=G({name:"file-status",ignoreRect:!0,ignoreRectUpdate:!0,write:k({DID_LOAD_ITEM:Pn,DID_REVERT_ITEM_PROCESSING:Pn,DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_ABORT_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_ABORTED")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_RETRY"))},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root;pn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_COMPLETE")),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_UNDO"))},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_PROCESSING"):t.query("GET_LABEL_FILE_PROCESSING")+" "+Sn(n.progress)+"%";pn(t.ref.main,r),pn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_UPDATE_ITEM_LOAD_PROGRESS:An,DID_THROW_ITEM_LOAD_ERROR:Ln,DID_THROW_ITEM_INVALID:Ln,DID_THROW_ITEM_PROCESSING_ERROR:Ln,DID_THROW_ITEM_PROCESSING_REVERT_ERROR:Ln,DID_THROW_ITEM_REMOVE_ERROR:Ln}),didCreateView:function(e){Ye("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Dn,mixins:{styles:["translateX","translateY","opacity"],animations:{opacity:{type:"tween",duration:250},translateX:"spring",translateY:"spring"}}}),Cn={AbortItemLoad:{label:"GET_LABEL_BUTTON_ABORT_ITEM_LOAD",action:"ABORT_ITEM_LOAD",className:"filepond--action-abort-item-load",align:"LOAD_INDICATOR_POSITION"},RetryItemLoad:{label:"GET_LABEL_BUTTON_RETRY_ITEM_LOAD",action:"RETRY_ITEM_LOAD",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-load",align:"BUTTON_PROCESS_ITEM_POSITION"},RemoveItem:{label:"GET_LABEL_BUTTON_REMOVE_ITEM",action:"REQUEST_REMOVE_ITEM",icon:"GET_ICON_REMOVE",className:"filepond--action-remove-item",align:"BUTTON_REMOVE_ITEM_POSITION"},ProcessItem:{label:"GET_LABEL_BUTTON_PROCESS_ITEM",action:"REQUEST_ITEM_PROCESSING",icon:"GET_ICON_PROCESS",className:"filepond--action-process-item",align:"BUTTON_PROCESS_ITEM_POSITION"},AbortItemProcessing:{label:"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING",action:"ABORT_ITEM_PROCESSING",className:"filepond--action-abort-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RetryItemProcessing:{label:"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING",action:"RETRY_ITEM_PROCESSING",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RevertItemProcessing:{label:"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING",action:"REQUEST_REVERT_ITEM_PROCESSING",icon:"GET_ICON_UNDO",className:"filepond--action-revert-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"}},Nn=[];i(Cn,(function(e){Nn.push(e)}));var xn,Gn=function(e){var t=e.ref.buttonRemoveItem.rect.element;return t.hidden?null:t.width+t.left},jn=function(e){return e.ref.buttonAbortItemLoad.rect.element.width},kn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.height/4)},Fn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.left/2)},Un=function(e){return e.query("GET_STYLE_BUTTON_REMOVE_ITEM_POSITION")},Vn={buttonAbortItemLoad:{opacity:0},buttonRetryItemLoad:{opacity:0},buttonRemoveItem:{opacity:0},buttonProcessItem:{opacity:0},buttonAbortItemProcessing:{opacity:0},buttonRetryItemProcessing:{opacity:0},buttonRevertItemProcessing:{opacity:0},loadProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_LOAD_INDICATOR_POSITION")}},processProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}},processingCompleteIndicator:{opacity:0,scaleX:.75,scaleY:.75},info:{translateX:0,translateY:0,opacity:0},status:{translateX:0,translateY:0,opacity:0}},Bn={buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn}},qn={buttonAbortItemProcessing:{opacity:1},processProgressIndicator:{opacity:1},status:{opacity:1}},Yn={DID_THROW_ITEM_INVALID:{buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn,opacity:1}},DID_START_ITEM_LOAD:{buttonAbortItemLoad:{opacity:1},loadProgressIndicator:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_LOAD_ERROR:{buttonRetryItemLoad:{opacity:1},buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{opacity:1}},DID_START_ITEM_REMOVE:{processProgressIndicator:{opacity:1,align:Un},info:{translateX:Gn},status:{opacity:0}},DID_THROW_ITEM_REMOVE_ERROR:{processProgressIndicator:{opacity:0,align:Un},buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{opacity:1,translateX:Gn}},DID_LOAD_ITEM:Bn,DID_LOAD_LOCAL_ITEM:{buttonRemoveItem:{opacity:1},info:{translateX:Gn},status:{translateX:Gn}},DID_START_ITEM_PROCESSING:qn,DID_REQUEST_ITEM_PROCESSING:qn,DID_UPDATE_ITEM_PROCESS_PROGRESS:qn,DID_COMPLETE_ITEM_PROCESSING:{buttonRevertItemProcessing:{opacity:1},info:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_PROCESSING_ERROR:{buttonRemoveItem:{opacity:1},buttonRetryItemProcessing:{opacity:1},status:{opacity:1},info:{translateX:Gn}},DID_THROW_ITEM_PROCESSING_REVERT_ERROR:{buttonRevertItemProcessing:{opacity:1},status:{opacity:1},info:{opacity:1}},DID_ABORT_ITEM_PROCESSING:{buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Gn},status:{opacity:1}},DID_REVERT_ITEM_PROCESSING:Bn},Hn=G({create:function(e){var t=e.root;t.element.innerHTML=t.query("GET_ICON_DONE")},name:"processing-complete-indicator",ignoreRect:!0,mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",opacity:{type:"tween",duration:250}}}}),Wn=function(e){var t,n=e.root,r=e.props.id,o=n.query("GET_ALLOW_REVERT"),a=n.query("GET_ALLOW_REMOVE"),c=n.query("GET_ALLOW_PROCESS"),u=n.query("GET_INSTANT_UPLOAD"),s=n.query("IS_ASYNC"),l=n.query("GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN");s?c&&!o?t=function(e){return!/RevertItemProcessing/.test(e)}:!c&&o?t=function(e){return!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e)}:c||o||(t=function(e){return!/Process/.test(e)}):t=function(e){return!/Process/.test(e)};var f=t?Nn.filter(t):Nn.concat();if(u&&o&&(Cn.RevertItemProcessing.label="GET_LABEL_BUTTON_REMOVE_ITEM",Cn.RevertItemProcessing.icon="GET_ICON_REMOVE"),s&&!o){var p=Yn.DID_COMPLETE_ITEM_PROCESSING;p.info.translateX=Fn,p.info.translateY=kn,p.status.translateY=kn,p.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}if(s&&!c&&(["DID_START_ITEM_PROCESSING","DID_REQUEST_ITEM_PROCESSING","DID_UPDATE_ITEM_PROCESS_PROGRESS","DID_THROW_ITEM_PROCESSING_ERROR"].forEach((function(e){Yn[e].status.translateY=kn})),Yn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX=jn),l&&o){Cn.RevertItemProcessing.align="BUTTON_REMOVE_ITEM_POSITION";var d=Yn.DID_COMPLETE_ITEM_PROCESSING;d.info.translateX=Gn,d.status.translateY=kn,d.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}a||(Cn.RemoveItem.disabled=!0),i(Cn,(function(e,t){var o=n.createChildView(En,{label:n.query(t.label),icon:n.query(t.icon),opacity:0});f.includes(e)&&n.appendChildView(o),t.disabled&&(o.element.setAttribute("disabled","disabled"),o.element.setAttribute("hidden","hidden")),o.element.dataset.align=n.query("GET_STYLE_"+t.align),o.element.classList.add(t.className),o.on("click",(function(e){e.stopPropagation(),t.disabled||n.dispatch(t.action,{query:r})})),n.ref["button"+e]=o})),n.ref.processingCompleteIndicator=n.appendChildView(n.createChildView(Hn)),n.ref.processingCompleteIndicator.element.dataset.align=n.query("GET_STYLE_BUTTON_PROCESS_ITEM_POSITION"),n.ref.info=n.appendChildView(n.createChildView(wn,{id:r})),n.ref.status=n.appendChildView(n.createChildView(Mn,{id:r}));var h=n.appendChildView(n.createChildView(mn,{opacity:0,align:n.query("GET_STYLE_LOAD_INDICATOR_POSITION")}));h.element.classList.add("filepond--load-indicator"),n.ref.loadProgressIndicator=h;var v=n.appendChildView(n.createChildView(mn,{opacity:0,align:n.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}));v.element.classList.add("filepond--process-indicator"),n.ref.processProgressIndicator=v,n.ref.activeStyles=[]},zn=function(e){var t=e.root,n=e.actions,r=e.props;Xn({root:t,actions:n,props:r});var o=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return Yn[e.type]}));if(o){t.ref.activeStyles=[];var a=Yn[o.type];i(Vn,(function(e,n){var r=t.ref[e];i(n,(function(n,o){var i=a[e]&&void 0!==a[e][n]?a[e][n]:o;t.ref.activeStyles.push({control:r,key:n,value:i})}))}))}t.ref.activeStyles.forEach((function(e){var n=e.control,r=e.key,o=e.value;n[r]="function"==typeof o?o(t):o}))},Xn=k({DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemProcessing.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemLoad.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemRemoval.label=n.value},DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_START_ITEM_LOAD:function(e){var t=e.root;t.ref.loadProgressIndicator.spin=!0,t.ref.loadProgressIndicator.progress=0},DID_START_ITEM_REMOVE:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_UPDATE_ITEM_LOAD_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.loadProgressIndicator.spin=!1,t.ref.loadProgressIndicator.progress=n.progress},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.processProgressIndicator.spin=!1,t.ref.processProgressIndicator.progress=n.progress}}),Zn=G({create:Wn,write:zn,didCreateView:function(e){Ye("CREATE_VIEW",Object.assign({},e,{view:e}))},name:"file"}),Kn=G({create:function(e){var t=e.root,n=e.props;t.ref.fileName=fn("legend"),t.appendChild(t.ref.fileName),t.ref.file=t.appendChildView(t.createChildView(Zn,{id:n.id})),t.ref.data=!1},ignoreRect:!0,write:k({DID_LOAD_ITEM:function(e){var t=e.root,n=e.props;pn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))}}),didCreateView:function(e){Ye("CREATE_VIEW",Object.assign({},e,{view:e}))},tag:"fieldset",name:"file-wrapper"}),Qn={type:"spring",damping:.6,mass:7},Jn=function(e){var t=e.root,n=e.props;[{name:"top"},{name:"center",props:{translateY:null,scaleY:null},mixins:{animations:{scaleY:Qn},styles:["translateY","scaleY"]}},{name:"bottom",props:{translateY:null},mixins:{animations:{translateY:Qn},styles:["translateY"]}}].forEach((function(e){$n(t,e,n.name)})),t.element.classList.add("filepond--"+n.name),t.ref.scalable=null},$n=function(e,t,n){var r=G({name:"panel-"+t.name+" filepond--"+n,mixins:t.mixins,ignoreRectUpdate:!0}),o=e.createChildView(r,t.props);e.ref[t.name]=e.appendChildView(o)},er=G({name:"panel",write:function(e){var t=e.root,n=e.props;if(null!==t.ref.scalable&&n.scalable===t.ref.scalable||(t.ref.scalable=!H(n.scalable)||n.scalable,t.element.dataset.scalable=t.ref.scalable),n.height){var r=t.ref.top.rect.element,o=t.ref.bottom.rect.element,i=Math.max(r.height+o.height,n.height);t.ref.center.translateY=r.height,t.ref.center.scaleY=(i-r.height-o.height)/100,t.ref.bottom.translateY=i-o.height}},create:Jn,ignoreRect:!0,mixins:{apis:["height","scalable"]}}),tr=function(e){var t=e.map((function(e){return e.id})),n=void 0;return{setIndex:function(e){n=e},getIndex:function(){return n},getItemIndex:function(e){return t.indexOf(e.id)}}},nr={type:"spring",stiffness:.75,damping:.45,mass:10},rr="spring",or={DID_START_ITEM_LOAD:"busy",DID_UPDATE_ITEM_LOAD_PROGRESS:"loading",DID_THROW_ITEM_INVALID:"load-invalid",DID_THROW_ITEM_LOAD_ERROR:"load-error",DID_LOAD_ITEM:"idle",DID_THROW_ITEM_REMOVE_ERROR:"remove-error",DID_START_ITEM_REMOVE:"busy",DID_START_ITEM_PROCESSING:"busy processing",DID_REQUEST_ITEM_PROCESSING:"busy processing",DID_UPDATE_ITEM_PROCESS_PROGRESS:"processing",DID_COMPLETE_ITEM_PROCESSING:"processing-complete",DID_THROW_ITEM_PROCESSING_ERROR:"processing-error",DID_THROW_ITEM_PROCESSING_REVERT_ERROR:"processing-revert-error",DID_ABORT_ITEM_PROCESSING:"cancelled",DID_REVERT_ITEM_PROCESSING:"idle"},ir=function(e){var t=e.root,n=e.props;if(t.ref.handleClick=function(e){return t.dispatch("DID_ACTIVATE_ITEM",{id:n.id})},t.element.id="filepond--item-"+n.id,t.element.addEventListener("click",t.ref.handleClick),t.ref.container=t.appendChildView(t.createChildView(Kn,{id:n.id})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"item-panel"})),t.ref.panel.height=null,n.markedForRemoval=!1,t.query("GET_ALLOW_REORDER")){t.element.dataset.dragState="idle";var r=function(e){if(e.isPrimary){var r=!1,o={x:e.pageX,y:e.pageY};n.dragOrigin={x:t.translateX,y:t.translateY},n.dragCenter={x:e.offsetX,y:e.offsetY};var i=tr(t.query("GET_ACTIVE_ITEMS"));t.dispatch("DID_GRAB_ITEM",{id:n.id,dragState:i});var a=function(e){e.isPrimary&&(e.stopPropagation(),e.preventDefault(),n.dragOffset={x:e.pageX-o.x,y:e.pageY-o.y},n.dragOffset.x*n.dragOffset.x+n.dragOffset.y*n.dragOffset.y>16&&!r&&(r=!0,t.element.removeEventListener("click",t.ref.handleClick)),t.dispatch("DID_DRAG_ITEM",{id:n.id,dragState:i}))},c=function e(c){c.isPrimary&&(document.removeEventListener("pointermove",a),document.removeEventListener("pointerup",e),n.dragOffset={x:c.pageX-o.x,y:c.pageY-o.y},t.dispatch("DID_DROP_ITEM",{id:n.id,dragState:i}),r&&setTimeout((function(){return t.element.addEventListener("click",t.ref.handleClick)}),0))};document.addEventListener("pointermove",a),document.addEventListener("pointerup",c)}};t.element.addEventListener("pointerdown",r)}},ar=k({DID_UPDATE_PANEL_HEIGHT:function(e){var t=e.root,n=e.action;t.height=n.height}}),cr=k({DID_GRAB_ITEM:function(e){var t=e.root;e.props.dragOrigin={x:t.translateX,y:t.translateY}},DID_DRAG_ITEM:function(e){e.root.element.dataset.dragState="drag"},DID_DROP_ITEM:function(e){var t=e.root,n=e.props;n.dragOffset=null,n.dragOrigin=null,t.element.dataset.dragState="drop"}},(function(e){var t=e.root,n=e.actions,r=e.props,o=e.shouldOptimize;"drop"===t.element.dataset.dragState&&t.scaleX<=1&&(t.element.dataset.dragState="idle");var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return or[e.type]}));i&&i.type!==r.currentState&&(r.currentState=i.type,t.element.dataset.filepondItemState=or[r.currentState]||"");var a=t.query("GET_ITEM_PANEL_ASPECT_RATIO")||t.query("GET_PANEL_ASPECT_RATIO");a?o||(t.height=t.rect.element.width*a):(ar({root:t,actions:n,props:r}),!t.height&&t.ref.container.rect.element.height>0&&(t.height=t.ref.container.rect.element.height)),o&&(t.ref.panel.height=null),t.ref.panel.height=t.height})),ur=G({create:ir,write:cr,destroy:function(e){var t=e.root,n=e.props;t.element.removeEventListener("click",t.ref.handleClick),t.dispatch("RELEASE_ITEM",{query:n.id})},tag:"li",name:"item",mixins:{apis:["id","interactionMethod","markedForRemoval","spawnDate","dragCenter","dragOrigin","dragOffset"],styles:["translateX","translateY","scaleX","scaleY","opacity","height"],animations:{scaleX:rr,scaleY:rr,translateX:nr,translateY:nr,opacity:{type:"tween",duration:150}}}}),sr=function(e,t,n){if(n){var r=e.rect.element.width,o=t.length,i=null;if(0===o||n.top<t[0].rect.element.top)return-1;var a=t[0].rect.element,c=a.marginLeft+a.marginRight,u=a.width+c,s=Math.round(r/u);if(1===s){for(var l=0;l<o;l++){var f=t[l],p=f.rect.outer.top+.5*f.rect.element.height;if(n.top<p)return l}return o}for(var d=a.marginTop+a.marginBottom,h=a.height+d,v=0;v<o;v++){var m=v%s*u,E=Math.floor(v/s)*h,y=E-a.marginTop,g=m+u,_=E+h+a.marginBottom;if(n.top<_&&n.top>y){if(n.left<g)return v;i=v!==o-1?v:null}}return null!==i?i:o}},lr={height:0,width:0,get getHeight(){return this.height},set setHeight(e){0!==this.height&&0!==e||(this.height=e)},get getWidth(){return this.width},set setWidth(e){0!==this.width&&0!==e||(this.width=e)},setDimensions:function(e,t){0!==this.height&&0!==e||(this.height=e),0!==this.width&&0!==t||(this.width=t)}},fr=function(e){var t=e.root;c(t.element,"role","list"),t.ref.lastItemSpanwDate=Date.now()},pr=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;e.dragOffset?(e.translateX=null,e.translateY=null,e.translateX=e.dragOrigin.x+e.dragOffset.x,e.translateY=e.dragOrigin.y+e.dragOffset.y,e.scaleX=1.025,e.scaleY=1.025):(e.translateX=t,e.translateY=n,Date.now()>e.spawnDate&&(0===e.opacity&&dr(e,t,n,r,o),e.scaleX=1,e.scaleY=1,e.opacity=1))},dr=function(e,t,n,r,o){e.interactionMethod===ge.NONE?(e.translateX=null,e.translateX=t,e.translateY=null,e.translateY=n):e.interactionMethod===ge.DROP?(e.translateX=null,e.translateX=t-20*r,e.translateY=null,e.translateY=n-10*o,e.scaleX=.8,e.scaleY=.8):e.interactionMethod===ge.BROWSE?(e.translateY=null,e.translateY=n-30):e.interactionMethod===ge.API&&(e.translateX=null,e.translateX=t-30,e.translateY=null)},hr=function(e){return e.rect.element.height+.5*e.rect.element.marginBottom+.5*e.rect.element.marginTop},vr=function(e){return e.rect.element.width+.5*e.rect.element.marginLeft+.5*e.rect.element.marginRight},mr=k({DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.index,i=n.interactionMethod;t.ref.addIndex=o;var a=Date.now(),c=a,u=1;if(i!==ge.NONE){u=0;var s=t.query("GET_ITEM_INSERT_INTERVAL"),l=a-t.ref.lastItemSpanwDate;c=l<s?a+(s-l):a}t.ref.lastItemSpanwDate=c,t.appendChildView(t.createChildView(ur,{spawnDate:c,id:r,opacity:u,interactionMethod:i}),o)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action.id,r=t.childViews.find((function(e){return e.id===n}));r&&(r.scaleX=.9,r.scaleY=.9,r.opacity=0,r.markedForRemoval=!0)},DID_DRAG_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.dragState,i=t.query("GET_ITEM",{id:r}),a=t.childViews.find((function(e){return e.id===r})),c=t.childViews.length,u=o.getItemIndex(i);if(a){var s={x:a.dragOrigin.x+a.dragOffset.x+a.dragCenter.x,y:a.dragOrigin.y+a.dragOffset.y+a.dragCenter.y},l=hr(a),f=vr(a),p=Math.floor(t.rect.outer.width/f);p>c&&(p=c);var d=Math.floor(c/p+1);lr.setHeight=l*d,lr.setWidth=f*p;var h={y:Math.floor(s.y/l),x:Math.floor(s.x/f),getGridIndex:function(){return s.y>lr.getHeight||s.y<0||s.x>lr.getWidth||s.x<0?u:this.y*p+this.x},getColIndex:function(){for(var e=t.query("GET_ACTIVE_ITEMS"),n=t.childViews.filter((function(e){return e.rect.element.height})),r=e.map((function(e){return n.find((function(t){return t.id===e.id}))})),o=r.findIndex((function(e){return e===a})),i=hr(a),c=r.length,u=c,l=0,f=0,p=0;p<c;p++)if(l=(f=l)+hr(r[p]),s.y<l){if(o>p){if(s.y<f+i){u=p;break}continue}u=p;break}return u}},v=p>1?h.getGridIndex():h.getColIndex();t.dispatch("MOVE_ITEM",{query:a,index:v});var m=o.getIndex();if(void 0===m||m!==v){if(o.setIndex(v),void 0===m)return;t.dispatch("DID_REORDER_ITEMS",{items:t.query("GET_ACTIVE_ITEMS"),origin:u,target:v})}}}}),Er=G({create:fr,write:function(e){var t=e.root,n=e.props,r=e.actions,o=e.shouldOptimize;mr({root:t,props:n,actions:r});var i=n.dragCoordinates,a=t.rect.element.width,c=t.childViews.filter((function(e){return e.rect.element.height})),u=t.query("GET_ACTIVE_ITEMS").map((function(e){return c.find((function(t){return t.id===e.id}))})).filter((function(e){return e})),s=i?sr(t,u,i):null,l=t.ref.addIndex||null;t.ref.addIndex=null;var f=0,p=0,d=0;if(0!==u.length){var h=u[0].rect.element,v=h.marginTop+h.marginBottom,m=h.marginLeft+h.marginRight,E=h.width+m,y=h.height+v,g=Math.round(a/E);if(1===g){var _=0,T=0;u.forEach((function(e,t){if(s){var n=t-s;T=-2===n?.25*-v:-1===n?.75*-v:0===n?.75*v:1===n?.25*v:0}o&&(e.translateX=null,e.translateY=null),e.markedForRemoval||pr(e,0,_+T);var r=(e.rect.element.height+v)*(e.markedForRemoval?e.opacity:1);_+=r}))}else{var I=0,b=0;u.forEach((function(e,t){t===s&&(f=1),t===l&&(d+=1),e.markedForRemoval&&e.opacity<.5&&(p-=1);var n=t+d+f+p,r=n%g,i=Math.floor(n/g),a=r*E,c=i*y,u=Math.sign(a-I),h=Math.sign(c-b);I=a,b=c,e.markedForRemoval||(o&&(e.translateX=null,e.translateY=null),pr(e,a,c,u,h))}))}}},tag:"ul",name:"list",didWriteView:function(e){var t=e.root;t.childViews.filter((function(e){return e.markedForRemoval&&0===e.opacity&&e.resting})).forEach((function(e){e._destroy(),t.removeChildView(e)}))},filterFrameActionsForChild:function(e,t){return t.filter((function(t){return!t.data||!t.data.id||e.id===t.data.id}))},mixins:{apis:["dragCoordinates"]}}),yr=function(e){var t=e.root,n=e.props;t.ref.list=t.appendChildView(t.createChildView(Er)),n.dragCoordinates=null,n.overflowing=!1},gr=k({DID_DRAG:function(e){var t=e.root,n=e.props,r=e.action;t.query("GET_ITEM_INSERT_LOCATION_FREEDOM")&&(n.dragCoordinates={left:r.position.scopeLeft-t.ref.list.rect.element.left,top:r.position.scopeTop-(t.rect.outer.top+t.rect.element.marginTop+t.rect.element.scrollTop)})},DID_END_DRAG:function(e){e.props.dragCoordinates=null}}),_r=G({create:yr,write:function(e){var t=e.root,n=e.props,r=e.actions;if(gr({root:t,props:n,actions:r}),t.ref.list.dragCoordinates=n.dragCoordinates,n.overflowing&&!n.overflow&&(n.overflowing=!1,t.element.dataset.state="",t.height=null),n.overflow){var o=Math.round(n.overflow);o!==t.height&&(n.overflowing=!0,t.element.dataset.state="overflow",t.height=o)}},name:"list-scroller",mixins:{apis:["overflow","dragCoordinates"],styles:["height","translateY"],animations:{translateY:"spring"}}}),Tr=function(e,t,n){n?c(e,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:""):e.removeAttribute(t)},Ir=function(e){if(e&&""!==e.value){try{e.value=""}catch(e){}if(e.value){var t=fn("form"),n=e.parentNode,r=e.nextSibling;t.appendChild(e),t.reset(),r?n.insertBefore(e,r):n.appendChild(e)}}},br=function(e){var t=e.root,n=e.props;t.element.id="filepond--browser-"+n.id,c(t.element,"name",t.query("GET_NAME")),c(t.element,"aria-controls","filepond--assistant-"+n.id),c(t.element,"aria-labelledby","filepond--drop-label-"+n.id),Or({root:t,action:{value:t.query("GET_ACCEPTED_FILE_TYPES")}}),Rr({root:t,action:{value:t.query("GET_ALLOW_MULTIPLE")}}),wr({root:t,action:{value:t.query("GET_ALLOW_DIRECTORIES_ONLY")}}),Sr({root:t}),Dr({root:t,action:{value:t.query("GET_REQUIRED")}}),Ar({root:t,action:{value:t.query("GET_CAPTURE_METHOD")}}),t.ref.handleChange=function(e){if(t.element.value){var r=Array.from(t.element.files).map((function(e){return e._relativePath=e.webkitRelativePath,e}));setTimeout((function(){n.onload(r),Ir(t.element)}),250)}},t.element.addEventListener("change",t.ref.handleChange)},Or=function(e){var t=e.root,n=e.action;t.query("GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE")&&Tr(t.element,"accept",!!n.value,n.value?n.value.join(","):"")},Rr=function(e){var t=e.root,n=e.action;Tr(t.element,"multiple",n.value)},wr=function(e){var t=e.root,n=e.action;Tr(t.element,"webkitdirectory",n.value)},Sr=function(e){var t=e.root,n=t.query("GET_DISABLED"),r=t.query("GET_ALLOW_BROWSE"),o=n||!r;Tr(t.element,"disabled",o)},Dr=function(e){var t=e.root;e.action.value?0===t.query("GET_TOTAL_ITEMS")&&Tr(t.element,"required",!0):Tr(t.element,"required",!1)},Ar=function(e){var t=e.root,n=e.action;Tr(t.element,"capture",!!n.value,!0===n.value?"":n.value)},Pr=function(e){var t=e.root,n=t.element;t.query("GET_TOTAL_ITEMS")>0?(Tr(n,"required",!1),Tr(n,"name",!1)):(Tr(n,"name",!0,t.query("GET_NAME")),t.query("GET_CHECK_VALIDITY")&&n.setCustomValidity(""),t.query("GET_REQUIRED")&&Tr(n,"required",!0))},Lr=G({tag:"input",name:"browser",ignoreRect:!0,ignoreRectUpdate:!0,attributes:{type:"file"},create:br,destroy:function(e){var t=e.root;t.element.removeEventListener("change",t.ref.handleChange)},write:k({DID_LOAD_ITEM:Pr,DID_REMOVE_ITEM:Pr,DID_THROW_ITEM_INVALID:function(e){var t=e.root;t.query("GET_CHECK_VALIDITY")&&t.element.setCustomValidity(t.query("GET_LABEL_INVALID_FIELD"))},DID_SET_DISABLED:Sr,DID_SET_ALLOW_BROWSE:Sr,DID_SET_ALLOW_DIRECTORIES_ONLY:wr,DID_SET_ALLOW_MULTIPLE:Rr,DID_SET_ACCEPTED_FILE_TYPES:Or,DID_SET_CAPTURE_METHOD:Ar,DID_SET_REQUIRED:Dr})}),Mr={ENTER:13,SPACE:32},Cr=function(e){var t=e.root,n=e.props,r=fn("label");c(r,"for","filepond--browser-"+n.id),c(r,"id","filepond--drop-label-"+n.id),c(r,"aria-hidden","true"),t.ref.handleKeyDown=function(e){(e.keyCode===Mr.ENTER||e.keyCode===Mr.SPACE)&&(e.preventDefault(),t.ref.label.click())},t.ref.handleClick=function(e){e.target===r||r.contains(e.target)||t.ref.label.click()},r.addEventListener("keydown",t.ref.handleKeyDown),t.element.addEventListener("click",t.ref.handleClick),Nr(r,n.caption),t.appendChild(r),t.ref.label=r},Nr=function(e,t){e.innerHTML=t;var n=e.querySelector(".filepond--label-action");return n&&c(n,"tabindex","0"),t},xr=G({name:"drop-label",ignoreRect:!0,create:Cr,destroy:function(e){var t=e.root;t.ref.label.addEventListener("keydown",t.ref.handleKeyDown),t.element.removeEventListener("click",t.ref.handleClick)},write:k({DID_SET_LABEL_IDLE:function(e){var t=e.root,n=e.action;Nr(t.ref.label,n.value)}}),mixins:{styles:["opacity","translateX","translateY"],animations:{opacity:{type:"tween",duration:150},translateX:"spring",translateY:"spring"}}}),Gr=G({name:"drip-blob",ignoreRect:!0,mixins:{styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}}}}),jr=function(e){var t=e.root,n=.5*t.rect.element.width,r=.5*t.rect.element.height;t.ref.blob=t.appendChildView(t.createChildView(Gr,{opacity:0,scaleX:2.5,scaleY:2.5,translateX:n,translateY:r}))},kr=function(e){var t=e.root,n=e.props,r=e.actions;Fr({root:t,props:n,actions:r});var o=t.ref.blob;0===r.length&&o&&0===o.opacity&&(t.removeChildView(o),t.ref.blob=null)},Fr=k({DID_DRAG:function(e){var t=e.root,n=e.action;t.ref.blob?(t.ref.blob.translateX=n.position.scopeLeft,t.ref.blob.translateY=n.position.scopeTop,t.ref.blob.scaleX=1,t.ref.blob.scaleY=1,t.ref.blob.opacity=1):jr({root:t})},DID_DROP:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.scaleX=2.5,t.ref.blob.scaleY=2.5,t.ref.blob.opacity=0)},DID_END_DRAG:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.opacity=0)}}),Ur=G({ignoreRect:!0,ignoreRectUpdate:!0,name:"drip",write:kr}),Vr=function(e){return e.root.ref.fields={}},Br=function(e,t){return e.ref.fields[t]},qr=function(e){e.query("GET_ACTIVE_ITEMS").forEach((function(t){e.ref.fields[t.id]&&e.element.appendChild(e.ref.fields[t.id])}))},Yr=function(e){var t=e.root;return qr(t)},Hr=k({DID_SET_DISABLED:function(e){var t=e.root;t.element.disabled=t.query("GET_DISABLED")},DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=fn("input");r.type="hidden",r.name=t.query("GET_NAME"),r.disabled=t.query("GET_DISABLED"),t.ref.fields[n.id]=r,qr(t)},DID_LOAD_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&null!==n.serverFileReference&&(r.value=n.serverFileReference)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(r.parentNode.removeChild(r),delete t.ref.fields[n.id])},DID_DEFINE_VALUE:function(e){var t=e.root,n=e.action,r=Br(t,n.id);r&&(null===n.value?r.removeAttribute("value"):r.value=n.value,qr(t))},DID_REORDER_ITEMS:Yr,DID_SORT_ITEMS:Yr}),Wr=G({tag:"fieldset",name:"data",create:Vr,write:Hr,ignoreRect:!0}),zr=function(e){return"getRootNode"in e?e.getRootNode():document},Xr=["jpg","jpeg","png","gif","bmp","webp","svg","tiff"],Zr=["css","csv","html","txt"],Kr={zip:"zip|compressed",epub:"application/epub+zip"},Qr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e=e.toLowerCase(),Xr.includes(e)?"image/"+("jpg"===e?"jpeg":"svg"===e?"svg+xml":e):Zr.includes(e)?"text/"+e:Kr[e]||""},Jr=function(t){return new e((function(e,n){var r=uo(t);if(r.length&&!$r(t))return e(r);eo(t).then(e)}))},$r=function(e){return!!e.files&&e.files.length>0},eo=function(t){return new e((function(n,r){var o=(t.items?Array.from(t.items):[]).filter((function(e){return to(e)})).map((function(e){return no(e)}));o.length?e.all(o).then((function(e){var t=[];e.forEach((function(e){t.push.apply(t,e)})),n(t.filter((function(e){return e})).map((function(e){return e._relativePath||(e._relativePath=e.webkitRelativePath),e})))})).catch(console.error):n(t.files?Array.from(t.files):[])}))},to=function(e){if(ao(e)){var t=co(e);if(t)return t.isFile||t.isDirectory}return"file"===e.kind},no=function(t){return new e((function(e,n){io(t)?ro(co(t)).then(e).catch(n):e([t.getAsFile()])}))},ro=function(t){return new e((function(e,n){var r=[],o=0,i=0,a=function(){0===i&&0===o&&e(r)};!function e(t){o++;var c=t.createReader();!function t(){c.readEntries((function(n){if(0===n.length)return o--,void a();n.forEach((function(t){t.isDirectory?e(t):(i++,t.file((function(e){var n=oo(e);t.fullPath&&(n._relativePath=t.fullPath),r.push(n),i--,a()})))})),t()}),n)}()}(t)}))},oo=function(e){if(e.type.length)return e;var t=e.lastModifiedDate,n=e.name;return(e=e.slice(0,e.size,Qr(dt(e.name)))).name=n,e.lastModifiedDate=t,e},io=function(e){return ao(e)&&(co(e)||{}).isDirectory},ao=function(e){return"webkitGetAsEntry"in e},co=function(e){return e.webkitGetAsEntry()},uo=function(e){var t=[];try{if((t=lo(e)).length)return t;t=so(e)}catch(e){}return t},so=function(e){var t=e.getData("url");return"string"==typeof t&&t.length?[t]:[]},lo=function(e){var t=e.getData("text/html");if("string"==typeof t&&t.length){var n=t.match(/src\s*=\s*"(.+?)"/);if(n)return[n[1]]}return[]},fo=[],po=function(e){return{pageLeft:e.pageX,pageTop:e.pageY,scopeLeft:e.offsetX||e.layerX,scopeTop:e.offsetY||e.layerY}},ho=function(e,t,n){var r=vo(t),o={element:e,filterElement:n,state:null,ondrop:function(){},onenter:function(){},ondrag:function(){},onexit:function(){},onload:function(){},allowdrop:function(){}};return o.destroy=r.addListener(o),o},vo=function(e){var t=fo.find((function(t){return t.element===e}));if(t)return t;var n=mo(e);return fo.push(n),n},mo=function(e){var t=[],n={dragenter:To,dragover:Io,dragleave:Oo,drop:bo},r={};i(n,(function(n,o){r[n]=o(e,t),e.addEventListener(n,r[n],!1)}));var o={element:e,addListener:function(a){return t.push(a),function(){t.splice(t.indexOf(a),1),0===t.length&&(fo.splice(fo.indexOf(o),1),i(n,(function(t){e.removeEventListener(t,r[t],!1)})))}}};return o},Eo=function(e,t){return"elementFromPoint"in e||(e=document),e.elementFromPoint(t.x,t.y)},yo=function(e,t){var n=zr(t),r=Eo(n,{x:e.pageX-window.pageXOffset,y:e.pageY-window.pageYOffset});return r===t||t.contains(r)},go=null,_o=function(e,t){try{e.dropEffect=t}catch(e){}},To=function(e,t){return function(e){e.preventDefault(),go=e.target,t.forEach((function(t){var n=t.element,r=t.onenter;yo(e,n)&&(t.state="enter",r(po(e)))}))}},Io=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Jr(n).then((function(r){var o=!1;t.some((function(t){var i=t.filterElement,a=t.element,c=t.onenter,u=t.onexit,s=t.ondrag,l=t.allowdrop;_o(n,"copy");var f=l(r);if(f)if(yo(e,a)){if(o=!0,null===t.state)return t.state="enter",void c(po(e));if(t.state="over",i&&!f)return void _o(n,"none");s(po(e))}else i&&!o&&_o(n,"none"),t.state&&(t.state=null,u(po(e)));else _o(n,"none")}))}))}},bo=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;Jr(n).then((function(n){t.forEach((function(t){var r=t.filterElement,o=t.element,i=t.ondrop,a=t.onexit,c=t.allowdrop;if(t.state=null,!r||yo(e,o))return c(n)?void i(po(e),n):a(po(e))}))}))}},Oo=function(e,t){return function(e){go===e.target&&t.forEach((function(t){var n=t.onexit;t.state=null,n(po(e))}))}},Ro=function(e,t,n){e.classList.add("filepond--hopper");var r=n.catchesDropsOnPage,o=n.requiresDropOnElement,i=n.filterItems,a=void 0===i?function(e){return e}:i,c=ho(e,r?document.documentElement:e,o),u="",s="";c.allowdrop=function(e){return t(a(e))},c.ondrop=function(e,n){var r=a(n);t(r)?(s="drag-drop",l.onload(r,e)):l.ondragend(e)},c.ondrag=function(e){l.ondrag(e)},c.onenter=function(e){s="drag-over",l.ondragstart(e)},c.onexit=function(e){s="drag-exit",l.ondragend(e)};var l={updateHopperState:function(){u!==s&&(e.dataset.hopperState=s,u=s)},onload:function(){},ondragstart:function(){},ondrag:function(){},ondragend:function(){},destroy:function(){c.destroy()}};return l},wo=!1,So=[],Do=function(e){var t=document.activeElement;if(t&&/textarea|input/i.test(t.nodeName)){for(var n=!1,r=t;r!==document.body;){if(r.classList.contains("filepond--root")){n=!0;break}r=r.parentNode}if(!n)return}Jr(e.clipboardData).then((function(e){e.length&&So.forEach((function(t){return t(e)}))}))},Ao=function(e){So.includes(e)||(So.push(e),wo||(wo=!0,document.addEventListener("paste",Do)))},Po=function(e){Ae(So,So.indexOf(e)),0===So.length&&(document.removeEventListener("paste",Do),wo=!1)},Lo=function(){var e=function(e){t.onload(e)},t={destroy:function(){Po(e)},onload:function(){}};return Ao(e),t},Mo=null,Co=null,No=[],xo=function(e,t){e.element.textContent=t},Go=function(e){e.element.textContent=""},jo=function(e,t,n){var r=e.query("GET_TOTAL_ITEMS");xo(e,n+" "+t+", "+r+" "+(1===r?e.query("GET_LABEL_FILE_COUNT_SINGULAR"):e.query("GET_LABEL_FILE_COUNT_PLURAL"))),clearTimeout(Co),Co=setTimeout((function(){Go(e)}),1500)},ko=function(e){return e.element.parentNode.contains(document.activeElement)},Fo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_ABORTED");xo(t,r+" "+o)},Uo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename;xo(t,n.status.main+" "+r+" "+n.status.sub)},Vo=G({create:function(e){var t=e.root,n=e.props;t.element.id="filepond--assistant-"+n.id,c(t.element,"role","status"),c(t.element,"aria-live","polite"),c(t.element,"aria-relevant","additions")},ignoreRect:!0,ignoreRectUpdate:!0,write:k({DID_LOAD_ITEM:function(e){var t=e.root,n=e.action;if(ko(t)){t.element.textContent="";var r=t.query("GET_ITEM",n.id);No.push(r.filename),clearTimeout(Mo),Mo=setTimeout((function(){jo(t,No.join(", "),t.query("GET_LABEL_FILE_ADDED")),No.length=0}),750)}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action;if(ko(t)){var r=n.item;jo(t,r.filename,t.query("GET_LABEL_FILE_REMOVED"))}},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_COMPLETE");xo(t,r+" "+o)},DID_ABORT_ITEM_PROCESSING:Fo,DID_REVERT_ITEM_PROCESSING:Fo,DID_THROW_ITEM_REMOVE_ERROR:Uo,DID_THROW_ITEM_LOAD_ERROR:Uo,DID_THROW_ITEM_INVALID:Uo,DID_THROW_ITEM_PROCESSING_ERROR:Uo}),tag:"span",name:"assistant"}),Bo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.replace(new RegExp(t+".","g"),(function(e){return e.charAt(1).toUpperCase()}))},qo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Date.now(),o=null;return function(){for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];clearTimeout(o);var u=Date.now()-r,s=function(){r=Date.now(),e.apply(void 0,a)};u<t?n||(o=setTimeout(s,t-u)):s()}},Yo=1e6,Ho=function(e){return e.preventDefault()},Wo=function(e){var t=e.root,n=e.props,r=t.query("GET_ID");r&&(t.element.id=r);var o=t.query("GET_CLASS_NAME");o&&o.split(" ").filter((function(e){return e.length})).forEach((function(e){t.element.classList.add(e)})),t.ref.label=t.appendChildView(t.createChildView(xr,Object.assign({},n,{translateY:null,caption:t.query("GET_LABEL_IDLE")}))),t.ref.list=t.appendChildView(t.createChildView(_r,{translateY:null})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"panel-root"})),t.ref.assistant=t.appendChildView(t.createChildView(Vo,Object.assign({},n))),t.ref.data=t.appendChildView(t.createChildView(Wr,Object.assign({},n))),t.ref.measure=fn("div"),t.ref.measure.style.height="100%",t.element.appendChild(t.ref.measure),t.ref.bounds=null,t.query("GET_STYLES").filter((function(e){return!B(e.value)})).map((function(e){var n=e.name,r=e.value;t.element.dataset[n]=r})),t.ref.widthPrevious=null,t.ref.widthUpdated=qo((function(){t.ref.updateHistory=[],t.dispatch("DID_RESIZE_ROOT")}),250),t.ref.previousAspectRatio=null,t.ref.updateHistory=[];var i=window.matchMedia("(pointer: fine) and (hover: hover)").matches,a="PointerEvent"in window;t.query("GET_ALLOW_REORDER")&&a&&!i&&(t.element.addEventListener("touchmove",Ho,{passive:!1}),t.element.addEventListener("gesturestart",Ho))},zo=function(e){var t=e.root,n=e.props,r=e.actions;if(ni({root:t,props:n,actions:r}),r.filter((function(e){return/^DID_SET_STYLE_/.test(e.type)})).filter((function(e){return!B(e.data.value)})).map((function(e){var n=e.type,r=e.data,o=Bo(n.substr(8).toLowerCase(),"_");t.element.dataset[o]=r.value,t.invalidateLayout()})),!t.rect.element.hidden){t.rect.element.width!==t.ref.widthPrevious&&(t.ref.widthPrevious=t.rect.element.width,t.ref.widthUpdated());var o=t.ref.bounds;o||(o=t.ref.bounds=Ko(t),t.element.removeChild(t.ref.measure),t.ref.measure=null);var i=t.ref,a=i.hopper,c=i.label,u=i.list,s=i.panel;a&&a.updateHopperState();var l=t.query("GET_PANEL_ASPECT_RATIO"),f=t.query("GET_ALLOW_MULTIPLE"),p=t.query("GET_TOTAL_ITEMS"),d=p===(f?t.query("GET_MAX_FILES")||Yo:1),h=r.find((function(e){return"DID_ADD_ITEM"===e.type}));if(d&&h){var v=h.data.interactionMethod;c.opacity=0,f?c.translateY=-40:v===ge.API?c.translateX=40:v===ge.BROWSE?c.translateY=40:c.translateY=30}else d||(c.opacity=1,c.translateX=0,c.translateY=0);var m=Xo(t),E=Zo(t),y=c.rect.element.height,g=!f||d?0:y,_=d?u.rect.element.marginTop:0,T=0===p?0:u.rect.element.marginBottom,I=g+_+E.visual+T,b=g+_+E.bounds+T;if(u.translateY=Math.max(0,g-u.rect.element.marginTop)-m.top,l){var O=t.rect.element.width,R=O*l;l!==t.ref.previousAspectRatio&&(t.ref.previousAspectRatio=l,t.ref.updateHistory=[]);var w=t.ref.updateHistory;w.push(O);var S=2;if(w.length>2*S)for(var D=w.length,A=D-10,P=0,L=D;L>=A;L--)if(w[L]===w[L-2]&&P++,P>=S)return;s.scalable=!1,s.height=R;var M=R-g-(T-m.bottom)-(d?_:0);E.visual>M?u.overflow=M:u.overflow=null,t.height=R}else if(o.fixedHeight){s.scalable=!1;var C=o.fixedHeight-g-(T-m.bottom)-(d?_:0);E.visual>C?u.overflow=C:u.overflow=null}else if(o.cappedHeight){var N=I>=o.cappedHeight,x=Math.min(o.cappedHeight,I);s.scalable=!0,s.height=N?x:x-m.top-m.bottom;var G=x-g-(T-m.bottom)-(d?_:0);I>o.cappedHeight&&E.visual>G?u.overflow=G:u.overflow=null,t.height=Math.min(o.cappedHeight,b-m.top-m.bottom)}else{var j=p>0?m.top+m.bottom:0;s.scalable=!0,s.height=Math.max(y,I-j),t.height=Math.max(y,b-j)}}},Xo=function(e){var t=e.ref.list.childViews[0].childViews[0];return t?{top:t.rect.element.marginTop,bottom:t.rect.element.marginBottom}:{top:0,bottom:0}},Zo=function(e){var t=0,n=0,r=e.ref.list,o=r.childViews[0],i=o.childViews.filter((function(e){return e.rect.element.height})),a=e.query("GET_ACTIVE_ITEMS").map((function(e){return i.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));if(0===a.length)return{visual:t,bounds:n};var c=o.rect.element.width,u=sr(o,a,r.dragCoordinates),s=a[0].rect.element,l=s.marginTop+s.marginBottom,f=s.marginLeft+s.marginRight,p=s.width+f,d=s.height+l,h=void 0!==u&&u>=0?1:0,v=a.find((function(e){return e.markedForRemoval&&e.opacity<.45}))?-1:0,m=a.length+h+v,E=Math.round(c/p);return 1===E?a.forEach((function(e){var r=e.rect.element.height+l;n+=r,t+=r*e.opacity})):(n=Math.ceil(m/E)*d,t=n),{visual:t,bounds:n}},Ko=function(e){var t=e.ref.measureHeight||null;return{cappedHeight:parseInt(e.style.maxHeight,10)||null,fixedHeight:0===t?null:t}},Qo=function(e,t){var n=e.query("GET_ALLOW_REPLACE"),r=e.query("GET_ALLOW_MULTIPLE"),o=e.query("GET_TOTAL_ITEMS"),i=e.query("GET_MAX_FILES"),a=t.length;return!r&&a>1||!!(Q(i=r||n?i:1)&&o+a>i)&&(e.dispatch("DID_THROW_MAX_FILES",{source:t,error:Ct("warning",0,"Max files")}),!0)},Jo=function(e,t,n){var r=e.childViews[0];return sr(r,t,{left:n.scopeLeft-r.rect.element.left,top:n.scopeTop-(e.rect.outer.top+e.rect.element.marginTop+e.rect.element.scrollTop)})},$o=function(e){var t=e.query("GET_ALLOW_DROP"),n=e.query("GET_DISABLED"),r=t&&!n;if(r&&!e.ref.hopper){var o=Ro(e.element,(function(t){if(Qo(e,t))return!1;var n=e.query("GET_BEFORE_DROP_FILE")||function(){return!0};return!e.query("GET_DROP_VALIDATION")||t.every((function(t){return Ye("ALLOW_HOPPER_ITEM",t,{query:e.query}).every((function(e){return!0===e}))&&n(t)}))}),{filterItems:function(t){var n=e.query("GET_IGNORED_FILES");return t.filter((function(e){return!Xt(e)||!n.includes(e.name.toLowerCase())}))},catchesDropsOnPage:e.query("GET_DROP_ON_PAGE"),requiresDropOnElement:e.query("GET_DROP_ON_ELEMENT")});o.onload=function(t,n){var r=e.ref.list.childViews[0].childViews.filter((function(e){return e.rect.element.height})),o=e.query("GET_ACTIVE_ITEMS").map((function(e){return r.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));e.dispatch("ADD_ITEMS",{items:t,index:Jo(e.ref.list,o,n),interactionMethod:ge.DROP}),e.dispatch("DID_DROP",{position:n}),e.dispatch("DID_END_DRAG",{position:n})},o.ondragstart=function(t){e.dispatch("DID_START_DRAG",{position:t})},o.ondrag=qo((function(t){e.dispatch("DID_DRAG",{position:t})})),o.ondragend=function(t){e.dispatch("DID_END_DRAG",{position:t})},e.ref.hopper=o,e.ref.drip=e.appendChildView(e.createChildView(Ur))}else!r&&e.ref.hopper&&(e.ref.hopper.destroy(),e.ref.hopper=null,e.removeChildView(e.ref.drip))},ei=function(e,t){var n=e.query("GET_ALLOW_BROWSE"),r=e.query("GET_DISABLED"),o=n&&!r;o&&!e.ref.browser?e.ref.browser=e.appendChildView(e.createChildView(Lr,Object.assign({},t,{onload:function(t){if(Qo(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:ge.BROWSE})}})),0):!o&&e.ref.browser&&(e.removeChildView(e.ref.browser),e.ref.browser=null)},ti=function(e){var t=e.query("GET_ALLOW_PASTE"),n=e.query("GET_DISABLED"),r=t&&!n;r&&!e.ref.paster?(e.ref.paster=Lo(),e.ref.paster.onload=function(t){e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:ge.PASTE})}):!r&&e.ref.paster&&(e.ref.paster.destroy(),e.ref.paster=null)},ni=k({DID_SET_ALLOW_BROWSE:function(e){var t=e.root,n=e.props;ei(t,n)},DID_SET_ALLOW_DROP:function(e){var t=e.root;$o(t)},DID_SET_ALLOW_PASTE:function(e){var t=e.root;ti(t)},DID_SET_DISABLED:function(e){var t=e.root,n=e.props;$o(t),ti(t),ei(t,n),t.query("GET_DISABLED")?t.element.dataset.disabled="disabled":t.element.removeAttribute("data-disabled")}}),ri=G({name:"root",read:function(e){var t=e.root;t.ref.measure&&(t.ref.measureHeight=t.ref.measure.offsetHeight)},create:Wo,write:zo,destroy:function(e){var t=e.root;t.ref.paster&&t.ref.paster.destroy(),t.ref.hopper&&t.ref.hopper.destroy(),t.element.removeEventListener("touchmove",Ho),t.element.removeEventListener("gesturestart",Ho)},mixins:{styles:["height"]}}),oi=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=null,o=ze(),i=r(he(o),[at,ye(o)],[sn,Ee(o)]);i.dispatch("SET_OPTIONS",{options:t});var c=function(){document.hidden||i.dispatch("KICK")};document.addEventListener("visibilitychange",c);var u=null,s=!1,l=!1,f=null,p=null,d=function(){s||(s=!0),clearTimeout(u),u=setTimeout((function(){s=!1,f=null,p=null,l&&(l=!1,i.dispatch("DID_STOP_RESIZE"))}),500)};window.addEventListener("resize",d);var h=ri(i,{id:_e()}),v=!1,m=!1,E={_read:function(){s&&(p=window.innerWidth,f||(f=p),l||p===f||(i.dispatch("DID_START_RESIZE"),l=!0)),m&&v&&(v=null===h.element.offsetParent),v||(h._read(),m=h.rect.element.hidden)},_write:function(e){var t=i.processActionQueue().filter((function(e){return!/^SET_/.test(e.type)}));v&&!t.length||(I(t),v=h._write(e,t,l),xe(i.query("GET_ITEMS")),v&&i.processDispatchQueue())}},y=function(e){return function(t){var n={type:e};if(!t)return n;if(t.hasOwnProperty("error")&&(n.error=t.error?Object.assign({},t.error):null),t.status&&(n.status=Object.assign({},t.status)),t.file&&(n.output=t.file),t.source)n.file=t.source;else if(t.item||t.id){var r=t.item?t.item:i.query("GET_ITEM",t.id);n.file=r?Ne(r):null}return t.items&&(n.items=t.items.map(Ne)),/progress/.test(e)&&(n.progress=t.progress),t.hasOwnProperty("origin")&&t.hasOwnProperty("target")&&(n.origin=t.origin,n.target=t.target),n}},g={DID_DESTROY:y("destroy"),DID_INIT:y("init"),DID_THROW_MAX_FILES:y("warning"),DID_INIT_ITEM:y("initfile"),DID_START_ITEM_LOAD:y("addfilestart"),DID_UPDATE_ITEM_LOAD_PROGRESS:y("addfileprogress"),DID_LOAD_ITEM:y("addfile"),DID_THROW_ITEM_INVALID:[y("error"),y("addfile")],DID_THROW_ITEM_LOAD_ERROR:[y("error"),y("addfile")],DID_THROW_ITEM_REMOVE_ERROR:[y("error"),y("removefile")],DID_PREPARE_OUTPUT:y("preparefile"),DID_START_ITEM_PROCESSING:y("processfilestart"),DID_UPDATE_ITEM_PROCESS_PROGRESS:y("processfileprogress"),DID_ABORT_ITEM_PROCESSING:y("processfileabort"),DID_COMPLETE_ITEM_PROCESSING:y("processfile"),DID_COMPLETE_ITEM_PROCESSING_ALL:y("processfiles"),DID_REVERT_ITEM_PROCESSING:y("processfilerevert"),DID_THROW_ITEM_PROCESSING_ERROR:[y("error"),y("processfile")],DID_REMOVE_ITEM:y("removefile"),DID_UPDATE_ITEMS:y("updatefiles"),DID_ACTIVATE_ITEM:y("activatefile"),DID_REORDER_ITEMS:y("reorderfiles")},_=function(e){var t=Object.assign({pond:x},e);delete t.type,h.element.dispatchEvent(new CustomEvent("FilePond:"+e.type,{detail:t,bubbles:!0,cancelable:!0,composed:!0}));var n=[];e.hasOwnProperty("error")&&n.push(e.error),e.hasOwnProperty("file")&&n.push(e.file);var r=["type","error","file"];Object.keys(e).filter((function(e){return!r.includes(e)})).forEach((function(t){return n.push(e[t])})),x.fire.apply(x,[e.type].concat(n));var o=i.query("GET_ON"+e.type.toUpperCase());o&&o.apply(void 0,n)},I=function(e){e.length&&e.filter((function(e){return g[e.type]})).forEach((function(e){var t=g[e.type];(Array.isArray(t)?t:[t]).forEach((function(t){"DID_INIT_ITEM"===e.type?_(t(e.data)):setTimeout((function(){_(t(e.data))}),0)}))}))},b=function(e){return i.dispatch("SET_OPTIONS",{options:e})},O=function(e){return i.query("GET_ACTIVE_ITEM",e)},R=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PREPARE",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},w=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new e((function(e,r){A([{source:t,options:n}],{index:n.index}).then((function(t){return e(t&&t[0])})).catch(r)}))},S=function(e){return e.file&&e.id},D=function(e,t){return"object"!=typeof e||S(e)||t||(t=e,e=void 0),i.dispatch("REMOVE_ITEM",Object.assign({},t,{query:e})),null===i.query("GET_ACTIVE_ITEM",e)},A=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new e((function(e,t){var r=[],o={};if(V(n[0]))r.push.apply(r,n[0]),Object.assign(o,n[1]||{});else{var a=n[n.length-1];"object"!=typeof a||a instanceof Blob||Object.assign(o,n.pop()),r.push.apply(r,n)}i.dispatch("ADD_ITEMS",{items:r,index:o.index,interactionMethod:ge.API,success:e,failure:t})}))},P=function(){return i.query("GET_ACTIVE_ITEMS")},L=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PROCESSING",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},M=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n,i=o.length?o:P();return e.all(i.map(R))},C=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n;if(!o.length){var i=P().filter((function(e){return!(e.status===Ge.IDLE&&e.origin===je.LOCAL)&&e.status!==Ge.PROCESSING&&e.status!==Ge.PROCESSING_COMPLETE&&e.status!==Ge.PROCESSING_REVERT_ERROR}));return e.all(i.map(L))}return e.all(o.map(L))},N=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o,i=Array.isArray(n[0])?n[0]:n;"object"==typeof i[i.length-1]?o=i.pop():Array.isArray(n[0])&&(o=n[1]);var a=P();return i.length?i.map((function(e){return T(e)?a[e]?a[e].id:null:e})).filter((function(e){return e})).map((function(e){return D(e,o)})):e.all(a.map((function(e){return D(e,o)})))},x=Object.assign({},Le(),{},E,{},me(i,o),{setOptions:b,addFile:w,addFiles:A,getFile:O,processFile:L,prepareFile:R,removeFile:D,moveFile:function(e,t){return i.dispatch("MOVE_ITEM",{query:e,index:t})},getFiles:P,processFiles:C,removeFiles:N,prepareFiles:M,sort:function(e){return i.dispatch("SORT",{compare:e})},browse:function(){var e=h.element.querySelector("input[type=file]");e&&e.click()},destroy:function(){x.fire("destroy",h.element),i.dispatch("ABORT_ALL"),h._destroy(),window.removeEventListener("resize",d),document.removeEventListener("visibilitychange",c),i.dispatch("DID_DESTROY")},insertBefore:function(e){return F(h.element,e)},insertAfter:function(e){return U(h.element,e)},appendTo:function(e){return e.appendChild(h.element)},replaceElement:function(e){F(h.element,e),e.parentNode.removeChild(e),n=e},restoreElement:function(){n&&(U(n,h.element),h.element.parentNode.removeChild(h.element),n=null)},isAttachedTo:function(e){return h.element===e||n===e},element:{get:function(){return h.element}},status:{get:function(){return i.query("GET_STATUS")}}});return i.dispatch("DID_INIT"),a(x)},ii=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return i(ze(),(function(e,n){t[e]=n[0]})),oi(Object.assign({},t,{},e))},ai=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},ci=function(e){return Bo(e.replace(/^data-/,""))},ui=function e(t,n){i(n,(function(n,r){i(t,(function(e,o){var i=new RegExp(n);if(i.test(e)&&(delete t[e],!1!==r))if(z(r))t[r]=o;else{var a=r.group;ie(r)&&!t[a]&&(t[a]={}),t[a][ai(e.replace(i,""))]=o}})),r.mapping&&e(t[r.group],r.mapping)}))},si=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];i(e.attributes,(function(t){n.push(e.attributes[t])}));var r=n.filter((function(e){return e.name})).reduce((function(t,n){var r=c(e,n.name);return t[ci(n.name)]=r===n.name||r,t}),{});return ui(r,t),r},li=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={"^class$":"className","^multiple$":"allowMultiple","^capture$":"captureMethod","^webkitdirectory$":"allowDirectoriesOnly","^server":{group:"server",mapping:{"^process":{group:"process"},"^revert":{group:"revert"},"^fetch":{group:"fetch"},"^restore":{group:"restore"},"^load":{group:"load"}}},"^type$":!1,"^files$":!1};Ye("SET_ATTRIBUTE_TO_OPTION_MAP",n);var r=Object.assign({},t),o=si("FIELDSET"===e.nodeName?e.querySelector("input[type=file]"):e,n);Object.keys(o).forEach((function(e){ie(o[e])?(ie(r[e])||(r[e]={}),Object.assign(r[e],o[e])):r[e]=o[e]})),r.files=(t.files||[]).concat(Array.from(e.querySelectorAll("input:not([type=file])")).map((function(e){return{source:e.value,options:{type:e.dataset.type}}})));var i=ii(r);return e.files&&Array.from(e.files).forEach((function(e){i.addFile(e)})),i.replaceElement(e),i},fi=function(){return n(arguments.length<=0?void 0:arguments[0])?li.apply(void 0,arguments):ii.apply(void 0,arguments)},pi=["fire","_read","_write"],di=function(e){var t={};return Me(e,t,pi),t},hi=function(e,t){return e.replace(/(?:{([a-zA-Z]+)})/g,(function(e,n){return t[n]}))},vi=function(e){var t=new Blob(["(",e.toString(),")()"],{type:"application/javascript"}),n=URL.createObjectURL(t),r=new Worker(n);return{transfer:function(e,t){},post:function(e,t,n){var o=_e();r.onmessage=function(e){e.data.id===o&&t(e.data.message)},r.postMessage({id:o,message:e},n)},terminate:function(){r.terminate(),URL.revokeObjectURL(n)}}},mi=function(t){return new e((function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(e){n(e)},r.src=t}))},Ei=function(e,t){var n=e.slice(0,e.size,e.type);return n.lastModifiedDate=e.lastModifiedDate,n.name=t,n},yi=function(e){return Ei(e,e.name)},gi=[],_i=function(e){if(!gi.includes(e)){gi.push(e);var t=e({addFilter:He,utils:{Type:Ve,forin:i,isString:z,isFile:Xt,toNaturalFileSize:yn,replaceInString:hi,getExtensionFromFilename:dt,getFilenameWithoutExtension:Wt,guesstimateMimeType:Qr,getFileFromBlob:Et,getFilenameFromURL:pt,createRoute:k,createWorker:vi,createView:G,createItemAPI:Ne,loadImage:mi,copyFile:yi,renameFile:Ei,createBlob:gt,applyFilterChain:qe,text:pn,getNumericAspectRatioFromString:Qe},views:{fileActionButton:En}});We(t.options)}},Ti=function(){return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)},Ii=function(){return"Promise"in window},bi=function(){return"slice"in Blob.prototype},Oi=function(){return"URL"in window&&"createObjectURL"in window.URL},Ri=function(){return"visibilityState"in document},wi=function(){return"performance"in window},Si=function(){return"supports"in(window.CSS||{})},Di=function(){return/MSIE|Trident/.test(window.navigator.userAgent)},Ai=(xn=m()&&!Ti()&&Ri()&&Ii()&&bi()&&Oi()&&wi()&&(Si()||Di()),function(){return xn}),Pi={apps:[]},Li="filepond",Mi=function(){};if(t.Status={},t.FileStatus={},t.FileOrigin={},t.OptionTypes={},t.create=Mi,t.destroy=Mi,t.parse=Mi,t.find=Mi,t.registerPlugin=Mi,t.getOptions=Mi,t.setOptions=Mi,Ai()){j((function(){Pi.apps.forEach((function(e){return e._read()}))}),(function(e){Pi.apps.forEach((function(t){return t._write(e)}))}));var Ci=function e(){document.dispatchEvent(new CustomEvent("FilePond:loaded",{detail:{supported:Ai,create:t.create,destroy:t.destroy,parse:t.parse,find:t.find,registerPlugin:t.registerPlugin,setOptions:t.setOptions}})),document.removeEventListener("DOMContentLoaded",e)};"loading"!==document.readyState?setTimeout((function(){return Ci()}),0):document.addEventListener("DOMContentLoaded",Ci);var Ni=function(){return i(ze(),(function(e,n){t.OptionTypes[e]=n[1]}))};t.Status=Object.assign({},$e),t.FileOrigin=Object.assign({},je),t.FileStatus=Object.assign({},Ge),t.OptionTypes={},Ni(),t.create=function(){var e=fi.apply(void 0,arguments);return e.on("destroy",t.destroy),Pi.apps.push(e),di(e)},t.destroy=function(e){var t=Pi.apps.findIndex((function(t){return t.isAttachedTo(e)}));return t>=0&&(Pi.apps.splice(t,1)[0].restoreElement(),!0)},t.parse=function(e){return Array.from(e.querySelectorAll("."+Li)).filter((function(e){return!Pi.apps.find((function(t){return t.isAttachedTo(e)}))})).map((function(e){return t.create(e)}))},t.find=function(e){var t=Pi.apps.find((function(t){return t.isAttachedTo(e)}));return t?di(t):null},t.registerPlugin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(_i),Ni()},t.getOptions=function(){var e={};return i(ze(),(function(t,n){e[t]=n[0]})),e},t.setOptions=function(e){return ie(e)&&(Pi.apps.forEach((function(t){t.setOptions(e)})),Xe(e)),t.getOptions()}}t.supported=Ai,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(10))},,,,,,,,,,,,,,,,,,,function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,