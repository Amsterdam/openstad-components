/*! For license information please see reactions.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=86)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(4),o=n.n(r),i=n(0),c=n.n(i);n(74);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?d(e):t}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(c,e);var t,n,r,i=f(c);function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(this,c);var a=d(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];a[n.name]=n.value})),"string"==typeof a.config)try{a.config=JSON.parse(a.config)}catch(e){}var s=e.config||{};return s=v(s),a.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,s),a.divId=a.divId||a.config&&a.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[a.divId]=a,t}return t=c,(n=[{key:"componentDidMount",value:function(e,t){}}])&&s(t.prototype,n),r&&s(t,r),c}(c.a.Component);function v(e){return"object"!=a(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==a(e[t])&&(e[t]=v(e[t]))})),e}},function(e,t,n){"use strict";n(11),n(0),n(5),n(83);var r=n(4),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var c={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},a=c,u=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],a.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=a.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,a.set("osc-jwt",t)),t},s={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},p={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=u();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||a.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:u,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||a.get("osc-user");if(n)return t(null,n);var r=u(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){a.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(s).includes(n)||(n="all"),s[n].includes(t)}},localStorage:f,sessionStorage:a,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=p},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var c=o[0],a=o.length;(e||"object"!==i(c))&&(c={});for(var u=0;u<a;++u){var s=o[u];if("object"===i(s))for(var l in s)if("__proto__"!==l){var f=e?n.clone(s[l]):s[l];c[l]=t?r(c[l],f):f}}return c}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,c=i(e);if("array"===c)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===c)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(73)(e))},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";n(11),n(0),n(5),n(88);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(s,e);var t,n,r,o=u(s);function s(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,s);var r=l(t=o.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:e.value,error:null},t.onChange=e.onChange,t}return t=s,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&c(t.prototype,n),r&&c(t,r),s}(r.a);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=g(e);if(t){var o=g(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return b(this,n)}}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(i,e);var t,n,r,o=m(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&y(t.prototype,n),r&&y(t,r),i}(p);function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_(e);if(t){var o=_(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return j(this,n)}}function j(e,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{allowMultiple:!1,imageserver:{process:"",fetch:""}});var n=[];return(e.value||[]).forEach((function(e){n.push({source:{url:e},options:{type:"local",file:{name:e},metadata:{poster:e}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this._loadedFiles=0,this.files=["https://unpkg.com/filepond/dist/filepond.js","https://unpkg.com/filepond-polyfill/dist/filepond-polyfill.js","https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js","https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js","https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js","https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.js"],this.loadNextFile()}},{key:"loadNextFile",value:function(){var e,t=this,n=t.files[t._loadedFiles];n&&((e=document.createElement("script")).src=n,e.async=!0,e&&(e.onload=function(){t.loadNextFile()},document.body.appendChild(e))),t._loadedFiles==t.files.length&&t.fileUploaderInit(),t._loadedFiles++}},{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"fileUploaderInit",value:function(){var e=this,t=document.querySelector(".osc-image-upload-container");if(t){FilePond.registerPlugin(FilePondPluginImagePreview),FilePond.registerPlugin(FilePondPluginFileValidateSize),FilePond.registerPlugin(FilePondPluginFileValidateType),FilePond.registerPlugin(FilePondPluginFilePoster);var n={acceptedFileTypes:["image/*"],allowFileSizeValidation:!0,allowMultiple:this.config.allowMultiple,allowReorder:!0,styleItemPanelAspectRatio:1,maxFileSize:"8mb",name:"image",maxFiles:5,allowBrowse:!0,files:this.state.uploadedFiles,server:{process:this.config.imageserver.process,fetch:this.config.imageserver.fetch},imageResizeTargetWidth:80,imageResizeTargetHeight:80,imageCropAspectRatio:"1:1",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"};e.imageuploader=FilePond.create(t,n),document.querySelector(".filepond--root"),document.querySelector(".filepond--root").addEventListener("FilePond:processfile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),document.querySelector(".filepond--root").addEventListener("FilePond:removefile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),e.state.formfields&&e.imageuploader.addFiles(e.state.formfields.images)}}},{key:"fileUploaderUpdateCurrentInput",value:function(){var e=this;e.state.value=[],this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){try{var n="string"==typeof t.serverId?JSON.parse(t.serverId):t.serverId;e.state.value.push(n.url)}catch(e){console.log(e)}})),e.props.onChange({name:e.config.name,value:e.state.value})}},{key:"fileUploaderUploaderAddImages",value:function(e){this.imageuploader&&this.imageuploader.addFiles(e)}},{key:"render",value:function(){var e=null;return this.state.error&&(e=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen afbeelding geupload")),React.createElement("div",{className:"osc-image-upload-container"},React.createElement("input",{type:"file",className:"imageUploader-gebiedstool filepond-gebiedstool"}),e)}}])&&E(t.prototype,n),r&&E(t,r),i}(p);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=N(e);if(t){var o=N(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return I(this,n)}}function I(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?A(e):t}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(i,e);var t,n,r,o=T(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(A(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&x(t.prototype,n),r&&x(t,r),i}(r.a);function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(e,t){return(U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=z(e);if(t){var o=z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return B(this,n)}}function B(e,t){return!t||"object"!==F(t)&&"function"!=typeof t?V(e):t}function V(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function z(e){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(i,e);var t,n,r,o=M(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=V(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(V(t)),n.onInputFocus=n.onInputFocus.bind(V(t)),n.onInputBlur=n.onInputBlur.bind(V(t)),n.onInputKeyUp=n.onInputKeyUp.bind(V(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(D,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&L(t.prototype,n),r&&L(t,r),i}(r.a);function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function W(e,t){return(W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return X(this,n)}}function X(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}(i,e);var t,n,r,o=G(i);function i(){return q(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&J(t.prototype,n),r&&J(t,r),i}(p);function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=oe(e);if(t){var o=oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return re(this,n)}}function re(e,t){return!t||"object"!==Y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(i,e);var t,n,r,o=ne(i);function i(){return Q(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ee(t.prototype,n),r&&ee(t,r),i}(p);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pe(e);if(t){var o=pe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return fe(this,n)}}function fe(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function pe(e){return(pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var de=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(i,e);var t,n,r,o=le(i);function i(){return ae(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e){return React.createElement("option",{value:e.value||"",key:e.value},e.description||e.title||e.value)}))),t)}}])&&ue(t.prototype,n),r&&ue(t,r),i}(p);function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=we(e);if(t){var o=we(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ge(this,n)}}function ge(e,t){return!t||"object"!==he(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Oe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(i,e);var t,n,r,o=be(i);function i(){return ye(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ve(t.prototype,n),r&&ve(t,r),i}(p);function Ee(e){return(Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Re(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function je(e,t){return(je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _e(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ke(e);if(t){var o=ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==Ee(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var xe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&je(e,t)}(i,e);var t,n,r,o=_e(i);function i(){return Re(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Se(t.prototype,n),r&&Se(t,r),i}(p);function Ce(e){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ie(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){Ae(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function De(e,t){return(De=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Me(e);if(t){var o=Me(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Le(this,n)}}function Le(e,t){return!t||"object"!==Ce(t)&&"function"!=typeof t?Ue(e):t}function Ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Me(e){return(Me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Be=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&De(e,t)}(i,e);var t,n,r,o=Fe(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ue(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.value||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(w,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(H,{config:Ie(Ie({},e.config),{},{inputType:"htmlarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(P,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(H,{config:Ie({inputType:"input"},e.config),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(ie,{config:e.config,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(Z,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(de,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Oe,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(xe,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(H,{config:Ie(Ie({},e.config),{},{inputType:"textarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}})}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Ne(t.prototype,n),r&&Ne(t,r),i}(r.a);function Ve(e){return(Ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function He(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qe(e,t){return(qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Xe(e);if(t){var o=Xe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return We(this,n)}}function We(e,t){return!t||"object"!==Ve(t)&&"function"!=typeof t?Ge(e):t}function Ge(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xe(e){return(Xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $e=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&qe(e,t)}(i,e);var t,n,r,o=Je(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ge(t=o.call(this,e,{title:null,intro:null,fields:[]}));return n.state={values:e.values||{}},n.handleOnChange=n.handleOnChange.bind(Ge(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(Object(n),!0).forEach((function(t){He(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);t[e.name]=e.value,this.setState({values:t})}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Be,He({config:t,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&Ke(t.prototype,n),r&&Ke(t,r),i}(r.a);function Ze(e){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qe(e,t){return(Qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=rt(e);if(t){var o=rt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tt(this,n)}}function tt(e,t){return!t||"object"!==Ze(t)&&"function"!=typeof t?nt(e):t}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qe(e,t)}(i,e);var t,n,r,o=et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(nt(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,c=o.max,a=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,c,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:c,step:a,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&Ye(t.prototype,n),r&&Ye(t,r),i}(r.a);t.a={Form:$e,FormField:Be,Hidden:w,ImageUpload:P,InputWithCounter:H,Postcode:ie,Radios:Z,Select:de,Text:Oe,Textarea:xe,Slider:ot}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function u(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function s(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function p(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=d(t);return t.readAsArrayBuffer(e),n}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||a(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=p(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=d(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=u(e),t=s(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[u(e)]},f.prototype.get=function(e){return e=u(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(u(e))},f.prototype.set=function(e,t){this.map[u(e)]=s(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function b(e,t){var n,r,o=(t=t||{}).body;if(e instanceof b){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),m.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function g(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function w(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}b.prototype.clone=function(){return new b(this,{body:this._bodyInit})},v.call(b.prototype),v.call(w.prototype),w.prototype.clone=function(){return new w(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},w.error=function(){var e=new w(null,{status:0,statusText:""});return e.type="error",e};var O=[301,302,303,307,308];w.redirect=function(e,t){if(-1===O.indexOf(t))throw new RangeError("Invalid status code");return new w(null,{status:t,headers:{location:e}})};var E=self.DOMException;try{new E}catch(e){(E=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),E.prototype.constructor=E}function R(t,n){return new e((function(e,o){var i=new b(t,n);if(i.signal&&i.signal.aborted)return o(new E("Aborted","AbortError"));var c=new XMLHttpRequest;function a(){c.abort()}c.onload=function(){var t,n,r={status:c.status,statusText:c.statusText,headers:(t=c.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in c?c.responseURL:r.headers.get("X-Request-URL");var o="response"in c?c.response:c.responseText;e(new w(o,r))},c.onerror=function(){o(new TypeError("Network request failed"))},c.ontimeout=function(){o(new TypeError("Network request failed"))},c.onabort=function(){o(new E("Aborted","AbortError"))},c.open(i.method,i.url,!0),"include"===i.credentials?c.withCredentials=!0:"omit"===i.credentials&&(c.withCredentials=!1),"responseType"in c&&r&&(c.responseType="blob"),i.headers.forEach((function(e,t){c.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",a),c.onreadystatechange=function(){4===c.readyState&&i.signal.removeEventListener("abort",a)}),c.send(void 0===i._bodyInit?null:i._bodyInit)}))}R.polyfill=!0,self.fetch||(self.fetch=R,self.Headers=f,self.Request=b,self.Response=w)}).call(this,n(23))},function(e,t,n){var r=n(8),o=n(13),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(14),c=n(26),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(i(e),t=c(t,!0),i(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(3),o=n(12);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,function(e,t,n){e.exports=n(51).Promise},function(e,t,n){var r=n(8),o=n(55),i=n(25),c=n(16),a=n(26),u=n(7),s=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=c(e),t=a(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),o=n(10),i=r.document,c=o(i)&&o(i.createElement);e.exports=function(e){return c?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(3),o=n(17),i="__core-js_shared__",c=r[i]||o(i,{});e.exports=c},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(59),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(62),o=n(3),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(16),i=n(36).indexOf,c=n(18);e.exports=function(e,t){var n,a=o(e),u=0,s=[];for(n in a)!r(c,n)&&r(a,n)&&s.push(n);for(;t.length>u;)r(a,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){var r=n(16),o=n(48),i=n(64),c=function(e){return function(t,n,c){var a,u=r(t),s=o(u.length),l=i(c,s);if(e&&n!=n){for(;s>l;)if((a=u[l++])!=a)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:c(!0),indexOf:c(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t,n){var r=n(3),o=n(24).f,i=n(12),c=n(56),a=n(17),u=n(60),s=n(66);e.exports=function(e,t){var n,l,f,p,d,h=e.target,y=e.global,v=e.stat;if(n=y?r:v?r[h]||a(h,{}):(r[h]||{}).prototype)for(l in t){if(p=t[l],f=e.noTargetGet?(d=o(n,l))&&d.value:n[l],!s(y?l:h+(v?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),c(n,l,p,e)}}},function(e,t,n){var r=n(50),o=n(69),i=n(13),c=r("unscopables"),a=Array.prototype;null==a[c]&&i.f(a,c,{configurable:!0,value:o(null)}),e.exports=function(e){a[c][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),c=Object.defineProperty,a={},u=function(e){throw e};e.exports=function(e,t){if(i(a,e))return a[e];t||(t={});var n=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return a[e]=!!n&&!o((function(){if(s&&!r)return!0;var e={length:-1};s?c(e,1,{enumerable:!0,get:u}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(3),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},,function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(67);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(3),o=n(32),i=n(7),c=n(33),a=n(38),u=n(68),s=o("wks"),l=r.Symbol,f=u?l:l&&l.withoutSetter||c;e.exports=function(e){return i(s,e)||(a&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,c=void 0,a=void 0,u=function(e,t){y[i]=e,y[i+1]=t,2===(i+=2)&&(a?a(v):O())},s="undefined"!=typeof window?window:void 0,l=s||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(v,1)}}var y=new Array(1e3);function v(){for(var e=0;e<i;e+=2)(0,y[e])(y[e+1]),y[e]=void 0,y[e+1]=void 0;i=0}var m,b,g,w,O=void 0;function E(e,t){var n=arguments,r=this,o=new this.constructor(j);void 0===o[S]&&B(o);var i,c=r._state;return c?(i=n[c-1],u((function(){return U(c,o,i,r._result)}))):N(r,o,e,t),o}function R(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(j);return C(t,e),t}p?O=function(){return t.nextTick(v)}:f?(b=0,g=new f(v),w=document.createTextNode(""),g.observe(w,{characterData:!0}),O=function(){w.data=b=++b%2}):d?((m=new MessageChannel).port1.onmessage=v,O=function(){return m.port2.postMessage(0)}):O=void 0===s?function(){try{var e=n(53);return c=e.runOnLoop||e.runOnContext,function(){c(v)}}catch(e){return h()}}():h();var S=Math.random().toString(36).substring(16);function j(){}var _=void 0,P=new F;function k(e){try{return e.then}catch(e){return P.error=e,P}}function x(t,n,r){n.constructor===t.constructor&&r===E&&n.constructor.resolve===R?function(e,t){1===t._state?I(e,t._result):2===t._state?A(e,t._result):N(t,void 0,(function(t){return C(e,t)}),(function(t){return A(e,t)}))}(t,n):r===P?A(t,P.error):void 0===r?I(t,n):e(r)?function(e,t,n){u((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?C(e,n):I(e,n))}),(function(t){r||(r=!0,A(e,t))}),e._label);!r&&o&&(r=!0,A(e,o))}),e)}(t,n,r):I(t,n)}function C(e,t){var n;e===t?A(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?x(e,t,k(t)):I(e,t)}function T(e){e._onerror&&e._onerror(e._result),D(e)}function I(e,t){e._state===_&&(e._result=t,e._state=1,0!==e._subscribers.length&&u(D,e))}function A(e,t){e._state===_&&(e._state=2,e._result=t,u(T,e))}function N(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&u(D,e)}function D(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,c=0;c<t.length;c+=3)r=t[c],o=t[c+n],r?U(n,r,o,i):o(i);e._subscribers.length=0}}function F(){this.error=null}var L=new F;function U(t,n,r,o){var i=e(r),c=void 0,a=void 0,u=void 0,s=void 0;if(i){if((c=function(e,t){try{return e(t)}catch(e){return L.error=e,L}}(r,o))===L?(s=!0,a=c.error,c=null):u=!0,n===c)return void A(n,new TypeError("A promises callback cannot return that same promise."))}else c=o,u=!0;n._state!==_||(i&&u?C(n,c):s?A(n,a):1===t?I(n,c):2===t&&A(n,c))}var M=0;function B(e){e[S]=M++,e._state=void 0,e._result=void 0,e._subscribers=[]}function V(e,t){this._instanceConstructor=e,this.promise=new e(j),this.promise[S]||B(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?I(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&I(this.promise,this._result))):A(this.promise,new Error("Array Methods must be provided an Array"))}function z(e){this[S]=M++,this._result=this._state=void 0,this._subscribers=[],j!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof z?function(e,t){try{t((function(t){C(e,t)}),(function(t){A(e,t)}))}catch(t){A(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function H(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=z}return V.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===_&&n<e;n++)this._eachEntry(t[n],n)},V.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===R){var o=k(e);if(o===E&&e._state!==_)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===z){var i=new n(j);x(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},V.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===_&&(this._remaining--,2===e?A(r,n):this._result[t]=n),0===this._remaining&&I(r,this._result)},V.prototype._willSettleAt=function(e,t){var n=this;N(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},z.all=function(e){return new V(this,e).promise},z.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},z.resolve=R,z.reject=function(e){var t=new this(j);return A(t,e),t},z._setScheduler=function(e){a=e},z._setAsap=function(e){u=e},z._asap=u,z.prototype={constructor:z,then:E,catch:function(e){return this.then(null,e)}},H(),z.polyfill=H,z.Promise=z,z},e.exports=o()}).call(this,n(52),n(21))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function c(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:c}catch(e){r=c}}();var u,s=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!l){var e=a(p);l=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===c||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||l||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},,function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(3),o=n(12),i=n(7),c=n(17),a=n(29),u=n(57),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,n,a){var u=!!a&&!!a.unsafe,s=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(u?!p&&e[t]&&(s=!0):delete e[t],s?e[t]=n:o(e,t,n)):s?e[t]=n:c(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a(this)}))},function(e,t,n){var r,o,i,c=n(58),a=n(3),u=n(10),s=n(12),l=n(7),f=n(31),p=n(18),d=a.WeakMap;if(c){var h=new d,y=h.get,v=h.has,m=h.set;r=function(e,t){return m.call(h,e,t),t},o=function(e){return y.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var b=f("state");p[b]=!0,r=function(e,t){return s(e,b,t),t},o=function(e){return l(e,b)?e[b]:{}},i=function(e){return l(e,b)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!u(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(3),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(61),i=n(24),c=n(13);e.exports=function(e,t){for(var n=o(t),a=c.f,u=i.f,s=0;s<n.length;s++){var l=n[s];r(e,l)||a(e,l,u(t,l))}}},function(e,t,n){var r=n(34),o=n(63),i=n(65),c=n(14);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(c(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(3);e.exports=r},function(e,t,n){var r=n(35),o=n(19).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=a[c(e)];return n==s||n!=u&&("function"==typeof t?r(t):!!t)},c=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},a=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(14),i=n(70),c=n(19),a=n(18),u=n(72),s=n(28),l=n(31),f=l("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=c.length;n--;)delete h.prototype[c[n]];return h()};a[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=o(e),n=new p,p.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(13),i=n(14),c=n(71);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=c(t),a=r.length,u=0;a>u;)o.f(e,n=r[u++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(19);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(75);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,,,,,,function(e,t,n){},,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return F})),n.d(t,"Reactions",(function(){return F}));n(11);var r=n(0),o=n.n(r),i=n(5),c=n.n(i),a=(n(106),n(1)),u=n(2),s=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,e);var t,n,r,o=d(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return u.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=u.a.api.getHeaders(e.config),r=e.config.argumentId?"PUT":"POST",o={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:r,headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var r=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(r)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var r=null;return r=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){u.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(s.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),r)}}])&&f(t.prototype,n),r&&f(t,r),i}(a.a);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=j(e);if(t){var o=j(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=R(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=u.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=u.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=u.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",r=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),o=null;e.canEdit()&&e.canDelete()&&(o=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var c=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(c=React.createElement("div",{className:"osc-reaction-description"},React.createElement(v,{config:g(g({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var a=null;t.parentId||(a=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var s=null,l=null;if(e.canReply()&&!e.config.isClosed&&(s=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=g(g({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(v,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var p=null;return t.reactions&&t.reactions.length&&(p=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},o,r,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),c,a,s),l,p)}}])&&O(t.prototype,n),r&&O(t,r),i}(a.a);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function A(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=D(e);if(t){var o=D(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return N(this,n)}}function N(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(i,e);var t,n,r,o=A(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():u.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),r=u.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=x({},t.state);r.reactions=n,r.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(_,{config:t.config,user:t.state.user,data:x({},e)}))}))),r=t.config.title?React.createElement("h3",null,t.config.title):null,o=React.createElement(v,{config:t.config,user:t.state.user});return t.config.isClosed&&(o=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},r,o,n,React.createElement("br",null),React.createElement("br",null))}}])&&T(t.prototype,n),r&&T(t,r),i}(a.a);F.renderElement=function(e,t){var n=e.attributes;c.a.render(o.a.createElement(F,{attributes:n,config:t}),e)}},,function(e,t,n){},,,,,,,,,,,,,,,,,,function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50L2luZGV4LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvc2Vzc2lvbi1zdG9yYWdlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi91c2VyL2dldC1qd3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3VzZXIvaGFzLXJvbGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2xvY2FsLXN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvaW5kZXguanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9saWJzL2xpYi9hcGkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL2FwaS9nZXQtaGVhZGVycy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9nZXQtdXNlci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvbGlicy9saWIvdXNlci9sb2dvdXQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2xpYnMvbGliL3JlYWN0LXRlbXBsYXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL21lcmdlL21lcmdlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9kZWZhdWx0LWlucHV0LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2hpZGRlbi5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9pbWFnZS11cGxvYWQuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvaHRtbGFyZWEuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvaW5wdXQtd2l0aC1jb3VudGVyLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L3JhZGlvcy5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9wb3N0Y29kZS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9zZWxlY3QuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvdGV4dGlucHV0LmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L3RleHRhcmVhLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvZm9ybXMvY29tcG9uZW50L2Zvcm0tZmllbGQuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9jb21wb25lbnQvZm9ybS5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL2Zvcm1zL2NvbXBvbmVudC9zbGlkZXIuanN4Iiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL3NyYy9mb3Jtcy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW50cnktdW5iaW5kLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL09wZW5TdGFkQ29tcG9uZW50cy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXMvYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2NvbXBvbmVudC9yZWFjdGlvbi1mb3JtLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2NvbXBvbmVudC9yZWFjdGlvbi5qc3giLCJ3ZWJwYWNrOi8vT3BlblN0YWRDb21wb25lbnRzLy4vc3JjL3JlYWN0aW9ucy9jb21wb25lbnQvcmVhY3Rpb25zLmpzeCIsIndlYnBhY2s6Ly9PcGVuU3RhZENvbXBvbmVudHMvLi9zcmMvcmVhY3Rpb25zL2luZGV4LmpzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIndpbmRvdyIsIk9wZW5TdGFkQ29tcG9uZW50IiwicHJvcHMiLCJkZWZhdWx0Q29uZmlnIiwiZGVmYXVsdGRlZmF1bHRDb25maWciLCJzZWxmIiwiYXR0cmlidXRlcyIsImtleXMiLCJmb3JFYWNoIiwiYXR0cmlidXRlIiwiY29uZmlnIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwicHJvcHNDb25maWciLCJyZW1vdmVVbmRlZkFuZE51bGwiLCJtZXJnZSIsInJlY3Vyc2l2ZSIsInNpdGVJZCIsImFwaSIsInVybCIsImhlYWRlcnMiLCJpc1VzZXJMb2dnZWRJbiIsInVzZXIiLCJkaXZJZCIsImlkIiwicGFyc2VJbnQiLCJNYXRoIiwicmFuZG9tIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJvYmoiLCJvc2NTZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiand0IiwibWF0Y2giLCJsb2NhdGlvbiIsInNlYXJjaCIsInNldCIsImRvY3VtZW50IiwicmVwbGFjZSIsInJvbGVzIiwiYWRtaW4iLCJtb2RlcmF0b3IiLCJlZGl0b3IiLCJtZW1iZXIiLCJhbm9ueW1vdXMiLCJhbGwiLCJvd25lciIsIm9zY0xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIk9wZW5TdGFkQ29tcG9uZW50TGlicyIsImdldEhlYWRlcnMiLCJnZXRKV1QiLCJnZXRVc2VyIiwibmV4dCIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwiRXJyb3IiLCJqc29uIiwibG9nb3V0IiwiaGFzUm9sZSIsInJlcXVpcmVkUm9sZSIsInVzZXJSb2xlIiwicm9sZSIsImluY2x1ZGVzIiwicmVhY3RUZW1wbGF0ZSIsImh0bWwiLCJhcmdzIiwiYXJndW1lbnRzIiwibWF0Y2hlcyIsIlJlZ0V4cCIsImV4ZWMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIml0IiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJpc05vZGUiLCJQdWJsaWMiLCJjbG9uZSIsIm1lcmdlX3JlY3Vyc2l2ZSIsImJhc2UiLCJleHRlbmQiLCJ0eXBlT2YiLCJhcmd2IiwicmVzdWx0Iiwic2l6ZSIsImxlbmd0aCIsImluZGV4IiwiaXRlbSIsInNpdGVtIiwiaW5wdXQiLCJ0b1N0cmluZyIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJvdXRwdXQiLCJ0eXBlIiwiT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQiLCJjaG9pY2VzIiwicGxhY2Vob2xkZXIiLCJkaXNhYmxlZCIsInJlcXVpcmVkIiwic3RhdGUiLCJlcnJvciIsIm9uQ2hhbmdlIiwic2hvd0Vycm9ycyIsImlzVmFsaWQiLCJ0aGlzIiwic2V0U3RhdGUiLCJkYXRhIiwidmFsaWRhdGUiLCJPcGVuU3RhZENvbXBvbmVudFNlbGVjdCIsImUiLCJoYW5kbGVPbkNoYW5nZSIsInJlZiIsImVsIiwiYWxsb3dNdWx0aXBsZSIsImltYWdlc2VydmVyIiwicHJvY2VzcyIsInVwbG9hZGVkRmlsZXMiLCJpbWFnZSIsInB1c2giLCJzb3VyY2UiLCJvcHRpb25zIiwiZmlsZSIsIm1ldGFkYXRhIiwicG9zdGVyIiwiX2xvYWRlZEZpbGVzIiwiZmlsZXMiLCJsb2FkTmV4dEZpbGUiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImFzeW5jIiwib25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZmlsZVVwbG9hZGVySW5pdCIsImltYWdldXBsb2FkZXIiLCJnZXRGaWxlcyIsInNlcnZlcklkIiwiY29udGFpbmVyRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJGaWxlUG9uZCIsInJlZ2lzdGVyUGx1Z2luIiwiRmlsZVBvbmRQbHVnaW5JbWFnZVByZXZpZXciLCJGaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVNpemUiLCJGaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVR5cGUiLCJGaWxlUG9uZFBsdWdpbkZpbGVQb3N0ZXIiLCJmaWxlUG9uZFNldHRpbmdzIiwiYWNjZXB0ZWRGaWxlVHlwZXMiLCJhbGxvd0ZpbGVTaXplVmFsaWRhdGlvbiIsImFsbG93UmVvcmRlciIsInN0eWxlSXRlbVBhbmVsQXNwZWN0UmF0aW8iLCJtYXhGaWxlU2l6ZSIsIm1heEZpbGVzIiwiYWxsb3dCcm93c2UiLCJzZXJ2ZXIiLCJpbWFnZVJlc2l6ZVRhcmdldFdpZHRoIiwiaW1hZ2VSZXNpemVUYXJnZXRIZWlnaHQiLCJpbWFnZUNyb3BBc3BlY3RSYXRpbyIsImxhYmVsSWRsZSIsImxhYmVsSW52YWxpZEZpZWxkIiwibGFiZWxGaWxlV2FpdGluZ0ZvclNpemUiLCJsYWJlbEZpbGVTaXplTm90QXZhaWxhYmxlIiwibGFiZWxGaWxlQ291bnRTaW5ndWxhciIsImxhYmVsRmlsZUNvdW50UGx1cmFsIiwibGFiZWxGaWxlTG9hZGluZyIsImxhYmVsRmlsZUFkZGVkIiwibGFiZWxGaWxlTG9hZEVycm9yIiwibGFiZWxGaWxlUmVtb3ZlZCIsImxhYmVsRmlsZVJlbW92ZUVycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZyIsImxhYmVsRmlsZVByb2Nlc3NpbmdDb21wbGV0ZSIsImxhYmVsRmlsZVByb2Nlc3NpbmdBYm9ydGVkIiwibGFiZWxGaWxlUHJvY2Vzc2luZ0Vycm9yIiwibGFiZWxGaWxlUHJvY2Vzc2luZ1JldmVydEVycm9yIiwibGFiZWxUYXBUb0NhbmNlbCIsImxhYmVsVGFwVG9SZXRyeSIsImxhYmVsVGFwVG9VbmRvIiwibGFiZWxCdXR0b25SZW1vdmVJdGVtIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Mb2FkIiwibGFiZWxCdXR0b25SZXRyeUl0ZW1Mb2FkIiwibGFiZWxCdXR0b25BYm9ydEl0ZW1Qcm9jZXNzaW5nIiwibGFiZWxCdXR0b25VbmRvSXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblJldHJ5SXRlbVByb2Nlc3NpbmciLCJsYWJlbEJ1dHRvblByb2Nlc3NJdGVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRldGFpbCIsImZpbGVVcGxvYWRlclVwZGF0ZUN1cnJlbnRJbnB1dCIsImZvcm1maWVsZHMiLCJhZGRGaWxlcyIsImltYWdlcyIsImVycm9ySFRNTCIsImNsYXNzTmFtZSIsIk9wZW5TdGFkQ29tcG9uZW50SFRNTEFyZWEiLCJvbktleVVweCIsImZpbHRlckhUTUwiLCJpbm5lckhUTUwiLCJjb21tYW5kIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJleGVjQ29tbWFuZCIsIm9uS2V5VXAiLCJvbkZvY3VzIiwib25CbHVyIiwib25Nb3VzZURvd24iLCJleGVjdXRlQWN0aW9uIiwicHJvbXB0IiwiY29udGVudEVkaXRhYmxlIiwiRm9ybWZpZWxkSW5wdXRXaXRoQ291bnRlciIsImlucHV0VHlwZSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImZvY3VzZWQiLCJ2YWx1ZUxlbmd0aCIsInVzZUtleSIsIm9uSW5wdXRGb2N1cyIsIm9uSW5wdXRCbHVyIiwib25JbnB1dEtleVVwIiwid2FybmluZyIsInNob3dXYXJuaW5nIiwiY291bnRlciIsImlucHV0SFRNTCIsImluc3RhbmNlIiwiT3BlblN0YWRDb21wb25lbnRSYWRpb3MiLCJtYXAiLCJjaG9pY2UiLCJkYW5nZXJvdXNEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwidGl0bGUiLCJPcGVuU3RhZENvbXBvbmVudFBvc3Rjb2RlIiwiT3BlblN0YWRDb21wb25lbnRUZXh0IiwiT3BlblN0YWRDb21wb25lbnRGb3JtRmllbGQiLCJ2YWxpZGF0ZUFjdGlvbiIsImNoYW5nZUFjdGlvbiIsInVuZGVmaW5lZCIsInRpdGxlSFRNTCIsImRlc2NyaXB0aW9uSFRNTCIsImZpZWxkSFRNTCIsIk9wZW5TdGFkQ29tcG9uZW50Rm9ybSIsImludHJvIiwiZmllbGRzIiwidmFsdWVzIiwic2Nyb2xsVG8iLCJmaXJzdEludmFsaWQiLCJmaWVsZCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJpbnRyb0hUTUwiLCJmaWVsZHNIVE1MIiwiZmllbGRDb25maWciLCJTbGlkZXIiLCJ0b3VjaGVkIiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJtaW4iLCJtYXgiLCJzdGVwIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJjYWxjUHJvZ3Jlc3MiLCJvbkNsaWNrIiwiZG9Ub3VjaCIsIkZvcm0iLCJGb3JtRmllbGQiLCJIaWRkZW4iLCJJbWFnZVVwbG9hZCIsIklucHV0V2l0aENvdW50ZXIiLCJQb3N0Y29kZSIsIlJhZGlvcyIsIlNlbGVjdCIsIlRleHQiLCJUZXh0YXJlYSIsImZhaWxzIiwic3VwcG9ydCIsIkJsb2IiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpbmRleE9mIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsInNoaWZ0IiwiZG9uZSIsIkhlYWRlcnMiLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsIlByb21pc2UiLCJyZWplY3QiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZXNvbHZlIiwib25lcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIkRhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiYXJyYXlCdWZmZXIiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsImNoYXJzIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwib2xkVmFsdWUiLCJoYXMiLCJjYWxsYmFjayIsInRoaXNBcmciLCJlbnRyaWVzIiwibWV0aG9kcyIsIlJlcXVlc3QiLCJtZXRob2QiLCJ1cGNhc2VkIiwiY3JlZGVudGlhbHMiLCJzaWduYWwiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJzcGxpdCIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwiRE9NRXhjZXB0aW9uIiwibWVzc2FnZSIsInN0YWNrIiwiY29uc3RydWN0b3IiLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJpc09iamVjdCIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwiYSIsIkVYSVNUUyIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJzZXRHbG9iYWwiLCJTSEFSRUQiLCJzaGFyZWQiLCJ1aWQiLCJJU19QVVJFIiwidmVyc2lvbiIsImNvcHlyaWdodCIsInBvc3RmaXgiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJoaWRkZW5LZXlzIiwibmFtZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJjZWlsIiwiZmxvb3IiLCJhcmd1bWVudCIsImlzTmFOIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicmVkZWZpbmUiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInNoYW0iLCJ3ZWxsS25vd25TeW1ib2wiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiY2FjaGUiLCJ0aHJvd2VyIiwiTUVUSE9EX05BTUUiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJDT05TVFJVQ1RPUiIsIk1FVEhPRCIsImNsYXNzb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvSW50ZWdlciIsInRoYXQiLCJiIiwiYXBwbHkiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiZmFjdG9yeSIsImlzRnVuY3Rpb24iLCJ4IiwibGVuIiwidmVydHhOZXh0IiwiY3VzdG9tU2NoZWR1bGVyRm4iLCJhc2FwIiwiYXJnIiwicXVldWUiLCJmbHVzaCIsInNjaGVkdWxlRmx1c2giLCJicm93c2VyV2luZG93IiwiYnJvd3Nlckdsb2JhbCIsIkJyb3dzZXJNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJpc1dvcmtlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiaW1wb3J0U2NyaXB0cyIsIk1lc3NhZ2VDaGFubmVsIiwidXNlU2V0VGltZW91dCIsImdsb2JhbFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2hhbm5lbCIsIml0ZXJhdGlvbnMiLCJvYnNlcnZlciIsIm5vZGUiLCJvbkZ1bGZpbGxtZW50Iiwib25SZWplY3Rpb24iLCJfYXJndW1lbnRzIiwicGFyZW50IiwiY2hpbGQiLCJub29wIiwiUFJPTUlTRV9JRCIsIm1ha2VQcm9taXNlIiwiX3N0YXRlIiwiaW52b2tlQ2FsbGJhY2siLCJfcmVzdWx0Iiwic3Vic2NyaWJlIiwiX3Jlc29sdmUiLCJuZXh0VGljayIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJ2ZXJ0eCIsInJ1bk9uTG9vcCIsInJ1bk9uQ29udGV4dCIsImF0dGVtcHRWZXJ0eCIsInN1YnN0cmluZyIsIlBFTkRJTkciLCJHRVRfVEhFTl9FUlJPUiIsIkVycm9yT2JqZWN0IiwiZ2V0VGhlbiIsImhhbmRsZU1heWJlVGhlbmFibGUiLCJtYXliZVRoZW5hYmxlIiwidGhlbiQkIiwidGhlbmFibGUiLCJmdWxmaWxsIiwiX3JlamVjdCIsInJlYXNvbiIsImhhbmRsZU93blRoZW5hYmxlIiwic2VhbGVkIiwiZnVsZmlsbG1lbnRIYW5kbGVyIiwicmVqZWN0aW9uSGFuZGxlciIsInRyeVRoZW4iLCJfbGFiZWwiLCJoYW5kbGVGb3JlaWduVGhlbmFibGUiLCJwdWJsaXNoUmVqZWN0aW9uIiwiX29uZXJyb3IiLCJwdWJsaXNoIiwiX3N1YnNjcmliZXJzIiwic3Vic2NyaWJlcnMiLCJzZXR0bGVkIiwiVFJZX0NBVENIX0VSUk9SIiwiaGFzQ2FsbGJhY2siLCJzdWNjZWVkZWQiLCJmYWlsZWQiLCJ0cnlDYXRjaCIsIkVudW1lcmF0b3IiLCJDb25zdHJ1Y3RvciIsIl9pbnN0YW5jZUNvbnN0cnVjdG9yIiwiX2lucHV0IiwiX3JlbWFpbmluZyIsIl9lbnVtZXJhdGUiLCJyZXNvbHZlciIsIm5lZWRzUmVzb2x2ZXIiLCJpbml0aWFsaXplUHJvbWlzZSIsIm5lZWRzTmV3IiwibG9jYWwiLCJwcm9taXNlVG9TdHJpbmciLCJjYXN0IiwiX2VhY2hFbnRyeSIsImVudHJ5IiwicmVzb2x2ZSQkIiwiX3RoZW4iLCJfc2V0dGxlZEF0IiwiX3dpbGxTZXR0bGVBdCIsImVudW1lcmF0b3IiLCJyYWNlIiwiXyIsIl9zZXRTY2hlZHVsZXIiLCJzY2hlZHVsZUZuIiwiX3NldEFzYXAiLCJhc2FwRm4iLCJfYXNhcCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsImJyb3dzZXIiLCJlbnYiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJWIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInVuc2FmZSIsInNpbXBsZSIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZ2V0QnVpbHRJbiIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJpbnRlZ2VyIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJzdHJpbmciLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJkaXNwbGF5IiwiY29udGVudFdpbmRvdyIsIkYiLCJQcm9wZXJ0aWVzIiwib2JqZWN0S2V5cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJlbnRyeVVuYmluZCIsIiQiLCIkaW5jbHVkZXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwicHJvdG8iLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIiwiYXJndW1lbnRJZCIsImRlc2NyaXB0aW9uTWluTGVuZ3RoIiwiZGVzY3JpcHRpb25NYXhMZW5ndGgiLCJyZXF1aXJlZFVzZXJSb2xlIiwiZm9ybUludHJvIiwibG9naW5VcmwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJocmVmIiwiaXNCdXN5IiwiY2FuU3VibWl0IiwiYWxlcnQiLCJpZGVhSWQiLCJwYXJlbnRJZCIsInNlbnRpbWVudCIsIm9uU3VibWl0IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibWVzc2FnZXMiLCJzdWJtaXRCdXR0b25IVE1MIiwic3VibWl0Rm9ybSIsIk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24iLCJpc01lbnVBY3RpdmUiLCJpc1JlcGx5RnJvbUFjdGl2ZSIsImVkaXRNb2RlIiwibmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lciIsIm9uTmV3UmVhY3Rpb25TdG9yZWQiLCJyZWFjdGlvbkVkaXRlZExpc3RlbmVyIiwib25SZWFjdGlvbkVkaXRlZCIsIndoYXQiLCJjYW4iLCJlZGl0IiwiaXNDbG9zZWQiLCJyZXBseSIsImNhbkRlbGV0ZSIsImlzRGVsZXRlZCIsImNhbkxpa2UiLCJ5ZXMiLCJoYXNVc2VyVm90ZWQiLCJyZWFjdGlvbiIsImlzQWRtaW4iLCJtZXRhZGF0YUhUTUwiLCJuaWNrTmFtZSIsImZ1bGxOYW1lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJtZW51SFRNTCIsImNhbkVkaXQiLCJzaG93TWVudSIsImNvbmZpcm0iLCJzdWJtaXREZWxldGUiLCJ0b2dnbGVFZGl0Rm9ybSIsImVkaXRGb3JtIiwibGlrZUJ1dHRvbkhUTUwiLCJzdWJtaXRMaWtlIiwicmVwbHlCdXR0b25IVE1MIiwicmVwbHlGb3JtSFRNTCIsImNhblJlcGx5IiwidG9nZ2xlUmVwbHlGb3JtIiwicmVwbGllc0hUTUwiLCJyZWFjdGlvbnMiLCJjcmVhdGVEYXRlSHVtYW5pemVkIiwiT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMiLCJzY3JvbGxUb05ld1JlYWN0aW9uIiwiY2xvc2VkVGV4dCIsImZldGNoRGF0YSIsInJlYWN0aW9uRGVsZXRlZExpc3RlbmVyIiwib25SZWFjdGlvbkRlbGV0ZWQiLCJzb3J0IiwiY3JlYXRlZEF0IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZWFjdGlvbkZvcm1IVE1MIiwicmVuZGVyRWxlbWVudCIsImVsZW0iLCJSZWFjdERPTSIsInJlbmRlciJdLCJtYXBwaW5ncyI6IjtzQ0FDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUEwRGYsT0FyREFGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSSxnQkNsRnZDaEMsRUFBT0QsUUFBVWtDLE9BQWMsTyx1NUNDTXhCQyxFLHNRQUVuQixXQUFZQyxHQUFzRCxNQUEvQ0MsRUFBK0MsdURBQS9CLEdBQUlDLEVBQTJCLHVEQUFKLEdBQUksVUFJaEUsSUFBSUMsRUFBTyxFQUZYLGNBQU1ILElBWU4sR0FSSUEsRUFBTUksWUFDUjVCLE9BQU82QixLQUFLTCxFQUFNSSxZQUFZRSxTQUFRLFNBQUNqQixHQUNyQyxJQUFJa0IsRUFBWVAsRUFBTUksV0FBV2YsR0FDakNjLEVBQUtJLEVBQVVsQyxNQUFRa0MsRUFBVXhCLFNBS1gsaUJBQWZvQixFQUFLSyxPQUNkLElBQ0VMLEVBQUtLLE9BQVNDLEtBQUtDLE1BQU1QLEVBQUtLLFFBQzlCLE1BQU9HLElBRVgsSUFBSUMsRUFBY1osRUFBTVEsUUFBVSxHQW5COEIsT0FvQmhFSSxFQUFjQyxFQUFtQkQsR0FDbkNULEVBQUtLLE9BQVNNLElBQU1DLFVBQVUsQ0FDMUJDLE9BQVEsS0FDWEMsSUFBSyxDQUNBQyxJQUFLLEtBQ0xDLFFBQVMsS0FDVEMsZ0JBQWdCLEdBRWxCQyxLQUFNLElBQ0xwQixFQUFlQyxFQUFzQlUsR0FFeENULEVBQUttQixNQUFRbkIsRUFBS21CLE9BQVduQixFQUFLSyxRQUFVTCxFQUFLSyxPQUFPYyxPQUFXdEIsRUFBTXVCLElBQTVELDZCQUEwRkMsU0FBVSxJQUFZQyxLQUFLQyxXQUVsSTVCLE9BQU9LLEVBQUttQixPQUFTbkIsRUFqQzJDLEUsdURBcUNoRHdCLEVBQVdDLFMsOEJBdkNnQkMsSUFBTUMsV0ErQ3JELFNBQVNqQixFQUFtQmtCLEdBQzFCLE1BQWtCLFVBQWQsRUFBT0EsSUFDWHZELE9BQU82QixLQUFLMEIsR0FBS3pCLFNBQVEsU0FBQ2pCLFFBQ0QsSUFBWjBDLEVBQUkxQyxJQUFtQyxNQUFaMEMsRUFBSTFDLFdBQXFCMEMsRUFBSTFDLEdBQzVDLFVBQW5CLEVBQU8wQyxFQUFJMUMsTUFBa0IwQyxFQUFJMUMsR0FBT3dCLEVBQW1Ca0IsRUFBSTFDLFFBSGxDMEMsSSw0U0N0RHJDLElBQUlDLEVBQW9CLENBRXhCQSxJQUF3QixTQUFTM0QsR0FFaEMsSUFBSVUsRUFBUWtELGVBQWVDLFFBQVE3RCxHQUVuQyxJQUNDVSxFQUFRMEIsS0FBS0MsTUFBTTNCLEdBQ2xCLE1BQU00QixJQUVSLE9BQU81QixHQUlSaUQsSUFBd0IsU0FBUzNELEVBQU1VLEdBRXRDLEdBQW9CLGlCQUFSVixFQUFaLENBR0EsUUFEcUIsSUFBVFUsSUFBdUJBLEVBQVEsSUFDdEIsVUFBaEIsRUFBT0EsR0FDWCxJQUNDQSxFQUFRMEIsS0FBSzBCLFVBQVVwRCxHQUN0QixNQUFNNEIsSUFHVHNCLGVBQWVHLFFBQVMvRCxFQUFNVSxLQUsvQmlELE9BQTJCLFNBQVMzRCxHQUNsQzRELGVBQWVJLFdBQVdoRSxLQUdiMkQsSUNoQ0EsV0FBU3hCLEdBRXRCLElBQUk4QixFQUdBQyxFQUFRekMsT0FBTzBDLFNBQVNDLE9BQU9GLE1BQU0sOEVBQ3pDLEdBQUlBLEVBQU8sQ0FDVEQsRUFBTUMsRUFBTSxHQUNaTixFQUFlUyxJQUFJLFVBQVdKLEdBQzlCLElBQUlHLEVBQVNFLFNBQVNILFNBQVNDLE9BQU9HLFFBQVEsT0FBU04sRUFBSyxJQUM5QyxLQUFWRyxJQUFlQSxFQUFTLElBQzVCRSxTQUFTSCxTQUFTQyxPQUFTQSxFQVU3QixPQVBBSCxFQUFNTCxFQUFldEQsSUFBSSxXQUVyQjZCLEdBQVVBLEVBQU84QixNQUNuQkEsRUFBTTlCLEVBQU84QixJQUNiTCxFQUFlUyxJQUFJLFVBQVdKLElBR3pCQSxHQ3BCTE8sRUFBUSxDQUNWQyxNQUFPLENBQUMsUUFBUyxZQUFhLFNBQVUsU0FBVSxZQUFhLE9BQy9EQyxVQUFXLENBQUMsWUFBYSxTQUFVLFNBQVUsWUFBYSxPQUMxREMsT0FBUSxDQUFDLFNBQVUsU0FBVSxZQUFhLE9BQzFDQyxPQUFRLENBQUMsU0FBVSxZQUFhLE9BQ2hDQyxVQUFXLENBQUMsWUFBYSxPQUN6QkMsSUFBSyxDQUFDLE9BQ05DLE1BQU8sTSxxT0NWVCxJQUFJQyxFQUFrQixDQUV0QkEsSUFBc0IsU0FBU2hGLEdBRTlCLElBQUlVLEVBQVF1RSxhQUFhcEIsUUFBUTdELEdBRWpDLElBQ0NVLEVBQVEwQixLQUFLQyxNQUFNM0IsR0FDbEIsTUFBTTRCLElBRVIsT0FBTzVCLEdBSVJzRSxJQUFzQixTQUFTaEYsRUFBTVUsR0FFcEMsR0FBb0IsaUJBQVJWLEVBQVosQ0FHQSxRQURxQixJQUFUVSxJQUF1QkEsRUFBUSxJQUN0QixVQUFoQixFQUFPQSxHQUNYLElBQ0NBLEVBQVEwQixLQUFLMEIsVUFBVXBELEdBQ3RCLE1BQU00QixJQUdUMkMsYUFBYWxCLFFBQVMvRCxFQUFNVSxLQUs3QnNFLE9BQXlCLFNBQVNoRixHQUNoQ2lGLGFBQWFqQixXQUFXaEUsS0NadEJrRixFQUF3QixDQUMxQnRDLElDbEJ5QixDQUN6QnVDLFdDQWEsU0FBU2hELEdBRXRCLElBQUlXLEVBQVVMLElBQU1DLFVBQVUsQ0FBRSxlQUFnQixvQkFBc0JQLEdBQVVBLEVBQU9TLEtBQU9ULEVBQU9TLElBQUlFLFNBRXJHbUIsRUFBTW1CLElBS1YsT0FKSW5CLElBQ0ZuQixFQUFVTCxJQUFNQyxVQUFVLENBQUUsa0JBQW1CLFVBQVl1QixHQUFPbkIsSUFHN0RBLElGU1BFLEtHaEIwQixDQUMxQnFDLFFDSGEsU0FBU2xELEVBQVFtRCxHQUU5QkEsRUFBT0EsR0FBUSxTQUFTdEMsR0FDdEJ1QyxRQUFRQyxJQUFJLDhCQUNaRCxRQUFRQyxJQUFJeEMsSUFHZCxJQUFJQSxFQUFPYixFQUFPYSxNQUFRWSxFQUFldEQsSUFBSSxZQUU3QyxHQUFJMEMsRUFFRixPQUFPc0MsRUFBSyxLQUFNdEMsR0FJcEIsSUFBSWlCLEVBQU1tQixFQUFPakQsR0FFakIsSUFBSzhCLEVBRUgsT0FBT3FCLEVBQUssS0FBTSxJQUlwQixJQUFJekMsRUFBTSxHQUFILE9BQU1WLEVBQU9TLElBQUlDLElBQWpCLHVCQUF1Q1YsRUFBT1EsT0FBOUMsT0FDSEcsRUFBVSxDQUFFLG1DQUErQm1CLEdBQU8sZUFBZ0Isb0JBQ3RFd0IsTUFBTTVDLEVBQUssQ0FBRUMsWUFDVjRDLE1BQUssU0FBQ0MsR0FDTCxJQUFLQSxFQUFTQyxHQUFJLE1BQU0sSUFBSUMsTUFBTSxrQkFDbEMsT0FBT0YsRUFBU0csVUFFakJKLE1BQU0sU0FBQ0ksR0FDTmxDLEVBQWVTLElBQUksV0FBWXlCLEdBQy9CUixFQUFLLEtBQU1RLE1BUGYsT0FTUyxTQUFDeEQsR0FDTmdELEVBQUtoRCxPRC9CVDhDLFNBQ0FXLE9FTGEsU0FBUzVELEVBQVFtRCxHQUU5QkEsRUFBT0EsR0FBUSxTQUFTdEMsR0FDdEJ1QyxRQUFRQyxJQUFJLDhCQUdkLElBQUl4QyxFQUFPYixFQUFPYSxNQUFRWSxFQUFldEQsSUFBSSxZQUU3QyxHQUFJMEMsRUFFRixPQUFPc0MsRUFBSyxLQUFNdEMsR0FJcEIsSUFBSWlCLEVBQU1tQixFQUFPakQsR0FFakIsSUFBSzhCLEVBRUgsT0FBT3FCLEVBQUssS0FBTSxJQUlwQixJQUFJekMsRUFBTVYsRUFBT1MsSUFBSUMsSUFBTSxlQUFpQlYsRUFBT1EsT0FBUyxNQUU1RDhDLE1BQU01QyxFQUFLLENBQUVDLFFBREMsQ0FBRSxrQkFBbUIsVUFBWW1CLEVBQUssZUFBZ0Isc0JBRWpFeUIsTUFBSyxTQUFDQyxHQUNMLElBQUtBLEVBQVNDLEdBQUksTUFBTSxJQUFJQyxNQUFNLGtCQUNsQyxPQUFPRixFQUFTRyxVQUVqQkosTUFBTSxTQUFBSSxHQUNMbEMsRUFBZVMsSUFBSSxXQUFZeUIsR0FDL0JSLEVBQUssS0FBTVEsTUFQZixPQVNTLFNBQUN4RCxHQUNOZ0QsRUFBS2hELE9GNUJUMEQsUUxJYSxTQUFTaEQsRUFBTWlELEdBQzVCLElBQUlDLEVBQVdsRCxFQUFLbUQsS0FFcEIsT0FES2hHLE9BQU82QixLQUFLd0MsR0FBTzRCLFNBQVNGLEtBQVdBLEVBQVcsT0FDaEQxQixFQUFNMEIsR0FBVUUsU0FBU0gsS0VNaENoQixhRFlhRCxFQ1hicEIsaUJBQ0F5QyxjTXBCYSxZQUFzQixRQUFYQyxZQUFXLE1BQU4sR0FBTSxFQUUvQkMsRUFBT0MsVUFBVSxVQUNkRCxFQUFLRCxLQUVaLElBQUlHLEVBQVUsRUFxQmQsT0FuQkF0RyxPQUFPNkIsS0FBS3VFLEdBQU10RSxTQUFRLFNBQUNqQixHQUV6QixJQUNJa0QsRUFEUSxJQUFJd0MsT0FBSiw0QkFBZ0MxRixFQUFoQyxzQkFBeUQsS0FDbkQyRixLQUFLTCxHQUVuQnBDLElBQ0Z1QyxJQUNBSCxFQUNFLGdDQUNBLDRCQUFNTSx3QkFBeUIsQ0FBRUMsT0FBUTNDLEVBQU0sTUFDOUNxQyxFQUFLdkYsR0FDTiw0QkFBTTRGLHdCQUF5QixDQUFFQyxPQUFRM0MsRUFBTSxXQU90QyxHQUFYdUMsSUFBY0gsRUFBTyw0QkFBTU0sd0JBQXlCLENBQUVDLE9BQVFQLE1BQzNEQSxJTkpNcEIsTyxpQk8xQmYsOEJBQ0UsT0FBTzRCLEdBQU1BLEVBQUcxRCxNQUFRQSxNQUFRMEQsR0FJbEN0SCxFQUFPRCxRQUVMd0gsRUFBMkIsaUJBQWRDLFlBQTBCQSxhQUN2Q0QsRUFBdUIsaUJBQVZ0RixRQUFzQkEsU0FDbkNzRixFQUFxQixpQkFBUmpGLE1BQW9CQSxPQUNqQ2lGLEVBQXVCLGlCQUFWRSxHQUFzQkEsSUFFbkNDLFNBQVMsY0FBVEEsSyxtQ0NaRixhQVNDLFNBQVVDLEdBU1YsSUFBSUMsRUFBUyxTQUFTQyxHQUVyQixPQUFPNUUsR0FBZ0IsSUFBVjRFLEdBQWdCLEVBQU9iLFlBMkRyQyxTQUFTYyxFQUFnQkMsRUFBTUMsR0FFOUIsR0FBcUIsV0FBakJDLEVBQU9GLEdBRVYsT0FBT0MsRUFFUixJQUFLLElBQUl4RyxLQUFPd0csRUFFVyxXQUF0QkMsRUFBT0YsRUFBS3ZHLEtBQThDLFdBQXhCeUcsRUFBT0QsRUFBT3hHLElBRW5EdUcsRUFBS3ZHLEdBQU9zRyxFQUFnQkMsRUFBS3ZHLEdBQU13RyxFQUFPeEcsSUFJOUN1RyxFQUFLdkcsR0FBT3dHLEVBQU94RyxHQU1yQixPQUFPdUcsRUFZUixTQUFTOUUsRUFBTTRFLEVBQU8zRSxFQUFXZ0YsR0FFaEMsSUFBSUMsRUFBU0QsRUFBSyxHQUNqQkUsRUFBT0YsRUFBS0csUUFFVFIsR0FBNEIsV0FBbkJJLEVBQU9FLE1BRW5CQSxFQUFTLElBRVYsSUFBSyxJQUFJRyxFQUFNLEVBQUVBLEVBQU1GLElBQU9FLEVBQU8sQ0FFcEMsSUFBSUMsRUFBT0wsRUFBS0ksR0FJaEIsR0FBYSxXQUZMTCxFQUFPTSxHQUlmLElBQUssSUFBSS9HLEtBQU8rRyxFQUVmLEdBQVksY0FBUi9HLEVBQUosQ0FFQSxJQUFJZ0gsRUFBUVgsRUFBUUQsRUFBT0MsTUFBTVUsRUFBSy9HLElBQVErRyxFQUFLL0csR0FJbEQyRyxFQUFPM0csR0FGSjBCLEVBRVc0RSxFQUFnQkssRUFBTzNHLEdBQU1nSCxHQUk3QkEsR0FRakIsT0FBT0wsRUFZUixTQUFTRixFQUFPUSxHQUVmLE1BQU8sR0FBS0MsU0FBU3RJLEtBQUtxSSxHQUFPRSxNQUFNLEdBQUksR0FBR0MsY0FuSS9DaEIsRUFBTzFFLFVBQVksU0FBUzJFLEdBRTNCLE9BQU81RSxHQUFnQixJQUFWNEUsR0FBZ0IsRUFBTWIsWUFVcENZLEVBQU9DLE1BQVEsU0FBU1ksR0FFdkIsSUFFQ0gsRUFBT0YsRUFGSlMsRUFBU0osRUFDWkssRUFBT2IsRUFBT1EsR0FHZixHQUFhLFVBQVRLLEVBS0gsSUFIQUQsRUFBUyxHQUNUVCxFQUFPSyxFQUFNSixPQUVSQyxFQUFNLEVBQUVBLEVBQU1GLElBQU9FLEVBRXpCTyxFQUFPUCxHQUFTVixFQUFPQyxNQUFNWSxFQUFNSCxTQUU5QixHQUFhLFdBQVRRLEVBSVYsSUFBS1IsS0FGTE8sRUFBUyxHQUVLSixFQUViSSxFQUFPUCxHQUFTVixFQUFPQyxNQUFNWSxFQUFNSCxJQUlyQyxPQUFPTyxHQWtHSmxCLEVBRUgzSCxFQUFPRCxRQUFVNkgsRUFJakIzRixPQUFpQixNQUFJMkYsRUFuS3RCLENBdUtnQzVILEdBQW9DLGlCQUFuQkEsRUFBT0QsU0FBd0JDLEVBQU9ELFcsbUNDaEwxRUMsRUFBT0QsUUFBVWtDLE9BQWlCLFUsaTNDQ0kzQjhHLEUsc1FBRW5CLFdBQVk1RyxHQUEyQixNQUFwQkMsRUFBb0IsdURBQUosR0FBSSxVQVV2QyxJQUFJRSxFQUFPLEVBUlQsY0FBTUgsRUFBTyxDQUNYNkcsUUFBUyxHQUNaeEksS0FBTSxHQUNIeUksWUFBYSxHQUNiQyxVQUFVLEVBQ1ZDLFVBQVUsR0FDWC9HLElBUm9DLE9BWXJDRSxFQUFLOEcsTUFBUSxDQUNYbEksTUFBT2lCLEVBQU1qQixNQUNibUksTUFBTyxNQUdULEVBQUtDLFNBQVduSCxFQUFNbUgsU0FqQmUsRSxpREFxQmYsSUFBZEMsRUFBYyxFQUFkQSxXQUNOQyxHQUFVQyxLQUFLOUcsT0FBT3dHLFlBQWFNLEtBQUtMLE1BQU1sSSxNQUM1Q21JLEVBQVEsR0FHZCxPQUZPRyxHQUFXRCxJQUFZRixHQUFRLEdBQ3BDSSxLQUFLQyxTQUFTLENBQUVGLFVBQVNILFVBQ3BCRyxJLHFDQUdPRyxHQUNkLElBQUlySCxFQUFPbUgsS0FDVEUsRUFBT0EsR0FBUSxHQUNqQnJILEVBQUtvSCxTQUFTQyxHQUFNLFdBQ2hCckgsRUFBS3NILFNBQVMsT0FFVSxtQkFBakJ0SCxFQUFLZ0gsVUFDZmhILEVBQUtnSCxTQUFTLENBQUU5SSxLQUFNOEIsRUFBS0ssT0FBT25DLEtBQU1VLE1BQU95SSxFQUFLekksYSw4QkF0Q0lnQixLLDJ5Q0NBdEMySCxFLDBXQUluQixJQUFJdkgsRUFBT21ILEtBRVQsT0FDRCw2QkFBT1gsS0FBSyxTQUFTNUgsTUFBT3VJLEtBQUt0SCxNQUFNakIsTUFBT2dJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVOEksSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLFUsOEJBUDNKbEIsRyw2c0NDQWhDYyxFLHNRQUVuQixXQUFZMUgsR0FBTyxPLDRGQUFBLFNBRWpCLGNBQU1BLEVBQU8sQ0FDWCtILGVBQWUsRUFDbEJDLFlBQWEsQ0FDWkMsUUFBUyxHQUNUbkUsTUFBTyxNQUlQLElBQUlvRSxFQUFnQixHQVZILE9BV0xsSSxFQUFNakIsT0FBUyxJQUNyQnVCLFNBQVEsU0FBQzZILEdBQ2JELEVBQWNFLEtBQUssQ0FDakJDLE9BQVEsQ0FBRW5ILElBQUtpSCxHQUNmRyxRQUFVLENBQ1IzQixLQUFNLFFBRU40QixLQUFNLENBQ0psSyxLQUFNOEosR0FJUkssU0FBVSxDQUNSQyxPQUFRTixTQU1oQixFQUFLbEIsTUFBUSxDQUNYaUIsY0FBZUEsR0EvQkEsRSx1REFvQ0Z2RyxFQUFXQyxHQUU1QjBGLEtBQUtvQixhQUFlLEVBQ2xCcEIsS0FBS3FCLE1BQVEsQ0FDWCw4Q0FDQSxnRUFDQSx3RkFDQSxrR0FDQSxrR0FDQSxxRkFFRnJCLEtBQUtzQixpQixxQ0FLTCxJQUdHQyxFQUhDMUksRUFBT21ILEtBQ1BpQixFQUFPcEksRUFBS3dJLE1BQU14SSxFQUFLdUksY0FDdkJILEtBRUxNLEVBQVVsRyxTQUFTbUcsY0FBYyxXQUN6QkMsSUFBTVIsRUFDZE0sRUFBUUcsT0FBUSxFQUNaSCxJQUNIQSxFQUFRSSxPQUFTLFdBQ1g5SSxFQUFLeUksZ0JBRVhqRyxTQUFTdUcsS0FBS0MsWUFBWU4sS0FHeEIxSSxFQUFLdUksY0FBZ0J2SSxFQUFLd0ksTUFBTXpDLFFBQ2hDL0YsRUFBS2lKLG1CQUVUakosRUFBS3VJLGlCLGlDQUlILElBQUlyQixHQUFVLEVBU2QsT0FSR0MsS0FBSytCLGVBQWlCL0IsS0FBSytCLGNBQWNDLFVBQ2hDaEMsS0FBSytCLGNBQWNDLFdBQ3pCaEosU0FBUSxTQUFTNkgsR0FDbEJBLEVBQU1vQixXQUNWbEMsR0FBVSxNQUlKQSxJLHlDQUtQLElBQUlsSCxFQUFPbUgsS0FFVGtDLEVBQW1CN0csU0FBUzhHLGNBQWMsK0JBQzlDLEdBQUlELEVBQWtCLENBQ3JCRSxTQUFTQyxlQUFlQyw0QkFDeEJGLFNBQVNDLGVBQWVFLGdDQUN4QkgsU0FBU0MsZUFBZUcsZ0NBQ3hCSixTQUFTQyxlQUFlSSwwQkFNeEIsSUFBSUMsRUFBbUIsQ0FFdEJDLGtCQUFtQixDQUFDLFdBQ3BCQyx5QkFBeUIsRUFDckJuQyxjQUFlVCxLQUFLOUcsT0FBT3VILGNBQzNCb0MsY0FBYyxFQUNkQywwQkFBMkIsRUFDL0JDLFlBQWEsTUFDYmhNLEtBQU0sUUFDTmlNLFNBQVUsRUFDVkMsYUFBYSxFQUNiNUIsTUFBT3JCLEtBQUtMLE1BQU1pQixjQUNsQnNDLE9BQVEsQ0FDUHZDLFFBQVNYLEtBQUs5RyxPQUFPd0gsWUFBWUMsUUFDakNuRSxNQUFPd0QsS0FBSzlHLE9BQU93SCxZQUFZbEUsT0FFaEMyRyx1QkFBd0IsR0FDeEJDLHdCQUF5QixHQUN6QkMscUJBQXNCLE1BQ3RCQyxVQUFXLCtGQUNYQyxrQkFBbUIsK0JBQ25CQyx3QkFBeUIsc0JBQ3pCQywwQkFBMkIsMkJBQzNCQyx1QkFBd0IsbUJBQ3hCQyxxQkFBc0IscUJBQ3RCQyxpQkFBa0IsUUFDbEJDLGVBQWdCLGFBQ2hCQyxtQkFBb0Isd0JBQ3BCQyxpQkFBa0IsYUFDbEJDLHFCQUFzQiwyQkFDdEJDLG9CQUFxQixRQUNyQkMsNEJBQTZCLHFCQUM3QkMsMkJBQTRCLG1CQUM1QkMseUJBQTBCLHNCQUMxQkMsK0JBQWdDLHNCQUNoQ0MsaUJBQWtCLGdCQUNsQkMsZ0JBQWlCLGVBQ2pCQyxlQUFnQixjQUNoQkMsc0JBQXVCLGNBQ3ZCQyx5QkFBMEIsUUFDMUJDLHlCQUEwQixRQUMxQkMsK0JBQWdDLFlBQ2hDQyw4QkFBK0IsT0FDL0JDLCtCQUFnQyxRQUNoQ0MsdUJBQXdCLFVBR3RCbE0sRUFBS2tKLGNBQWdCSyxTQUFTdEssT0FBT29LLEVBQWtCUSxHQUU3Q3JILFNBQVM4RyxjQUFjLG1CQU1wQzlHLFNBQVM4RyxjQUFjLG1CQUFtQjZDLGlCQUFpQix3QkFBd0IsU0FBQTNFLEdBQzlFQSxFQUFFNEUsUUFBVTVFLEVBQUU0RSxPQUFPckYsT0FDeEJ0RCxRQUFRQyxJQUFJLHdCQUF5QjhELEVBQUU0RSxRQUV4Q3BNLEVBQUtxTSxvQ0FHTjdKLFNBQVM4RyxjQUFjLG1CQUFtQjZDLGlCQUFpQix1QkFBdUIsU0FBQTNFLEdBQzdFQSxFQUFFNEUsUUFBVTVFLEVBQUU0RSxPQUFPckYsT0FDeEJ0RCxRQUFRQyxJQUFJLHdCQUF5QjhELEVBQUU0RSxRQUV4Q3BNLEVBQUtxTSxvQ0FHRnJNLEVBQUs4RyxNQUFNd0YsWUFDZHRNLEVBQUtrSixjQUFjcUQsU0FBU3ZNLEVBQUs4RyxNQUFNd0YsV0FBV0UsVyx1REFRbEQsSUFBSXhNLEVBQU9tSCxLQUNibkgsRUFBSzhHLE1BQU1sSSxNQUFRLEdBQ2R1SSxLQUFLK0IsZUFBaUIvQixLQUFLK0IsY0FBY0MsVUFDaENoQyxLQUFLK0IsY0FBY0MsV0FDekJoSixTQUFRLFNBQUM2SCxHQUNmLElBQ0MsSUFBSW9CLEVBQW9DLGlCQUFsQnBCLEVBQU1vQixTQUF1QjlJLEtBQUtDLE1BQU15SCxFQUFNb0IsVUFBWXBCLEVBQU1vQixTQUN0RnBKLEVBQUs4RyxNQUFNbEksTUFBTXFKLEtBQUttQixFQUFTckksS0FDOUIsTUFBTVAsR0FBT2lELFFBQVFDLElBQUlsRCxPQUczQlIsRUFBS0gsTUFBTW1ILFNBQVMsQ0FBQzlJLEtBQU04QixFQUFLSyxPQUFPbkMsS0FBTVUsTUFBT29CLEVBQUs4RyxNQUFNbEksVSxvREFHbkM0TixHQUcxQnJGLEtBQUsrQixlQUNSL0IsS0FBSytCLGNBQWNxRCxTQUFTQyxLLCtCQU03QixJQUVNQyxFQUFZLEtBS2hCLE9BUFN0RixLQUdBTCxNQUFNQyxRQUNiMEYsRUFBYSwyQkFBS0MsVUFBVSxrQkFBZix5Q0FJaEIsMkJBQUtBLFVBQVUsOEJBQ2QsNkJBQU9sRyxLQUFLLE9BQU9rRyxVQUFVLG1EQUN4QkQsUSw4QkF0TjRDaEcsRyxndENDSWhDa0csRSxzUUFFbkIsV0FBWTlNLEdBQU8sYSw0RkFBQSxVQUNqQixjQUFNQSxJQUVEaUgsTUFBUSxDQUNYbEksTUFBTyxFQUFLaUIsTUFBTWpCLE9BR3BCLEVBQUtnTyxTQUFXLEVBQUtBLFNBQVN6TixLQUFkLE1BUEMsRSx1REFXRnFDLEVBQVdDLEdBQzFCLElBQUk3QyxFQUFRdUksS0FBS3RILE1BQU1qQixNQUN2QkEsRUFBUXVJLEtBQUswRixXQUFXak8sR0FDeEJ1SSxLQUFLaEIsTUFBTTJHLFVBQVlsTyxJLGlDQUdkQSxHQUlULE9BREFBLEdBREFBLEdBREFBLEVBQVFBLEVBQU02RCxRQUFRLDhEQUErRCxhQUN2RUEsUUFBUSxXQUFZLEtBQ3BCQSxRQUFRLHdCQUF5QixVLG9DQUluQytFLEVBQUd1RixFQUFTdEksR0FDeEIrQyxFQUFFd0YsaUJBQ0Z4RixFQUFFeUYsa0JBQ0Z6SyxTQUFTMEssWUFBWUgsR0FBUSxFQUFNdEksR0FDbkMwQyxLQUFLZ0csWSw4QkFHQzNGLEdBQ0ZMLEtBQUt0SCxNQUFNdU4sU0FDYmpHLEtBQUt0SCxNQUFNdU4sUUFBUTVGLEssNkJBSWhCQSxHQUNETCxLQUFLdEgsTUFBTXdOLFFBQ2JsRyxLQUFLdEgsTUFBTXdOLE9BQU83RixHQUVoQkwsS0FBS3RILE1BQU1tSCxVQUNiRyxLQUFLdEgsTUFBTW1ILFNBQVMsQ0FBRXBJLE1BQU91SSxLQUFLTCxNQUFNbEksVSxpQ0FLMUMsSUFBSUEsRUFBUXVJLEtBQUtoQixNQUFNMkcsVUFDdkJsTyxFQUFRdUksS0FBSzBGLFdBQVdqTyxHQUN4QnVJLEtBQUtDLFNBQVMsQ0FBRXhJLFVBQ1p1SSxLQUFLdEgsTUFBTXNOLFNBQ2JoRyxLQUFLdEgsTUFBTXNOLFFBQVF2TyxLLCtCQUliLFdBQ1IsT0FDRSwyQkFBSzhOLFVBQVUsbUJBQ2IsMkJBQUtBLFVBQVUsMkJBQ2IsMkJBQUtBLFVBQVUscURBQXFEWSxZQUFhLFNBQUE5RixHQUFDLE9BQUksRUFBSytGLGNBQWMvRixFQUFHLFVBQTVHLEtBQ0EsMkJBQUtrRixVQUFVLHVEQUF1RFksWUFBYSxTQUFBOUYsR0FBQyxPQUFJLEVBQUsrRixjQUFjL0YsRUFBRyxZQUE5RyxLQUNBLDJCQUFLa0YsVUFBVSxvRUFBb0VZLFlBQWEsU0FBQTlGLEdBQUMsT0FBSSxFQUFLK0YsY0FBYy9GLEVBQUcseUJBQTNILEtBQ0EsMkJBQUtrRixVQUFVLDJEQUEyRFksWUFBYSxTQUFBOUYsR0FBQyxPQUFJLEVBQUsrRixjQUFjL0YsRUFBRyxhQUFjZ0csT0FBTyxZQUFZLGNBQW5KLE1BRUYsMkJBQUtkLFVBQVUsMEJBQTBCZSxpQkFBaUIsRUFDckRMLFFBQVUsU0FBQTVGLEdBQUMsT0FBSSxFQUFLNEYsUUFBUTVGLElBQzVCNkYsT0FBUyxTQUFBN0YsR0FBQyxPQUFJLEVBQUs2RixPQUFPN0YsSUFDMUIyRixRQUFVLFNBQUEzRixHQUFDLE9BQUksRUFBS29GLFlBRXBCbEYsSUFBSyxTQUFBQyxHQUFFLE9BQUssRUFBS3hCLE1BQVF3QixXLDhCQXZFaUIvSCxLLGd0Q0NBbEM4TixFLHNRQUVuQixXQUFZN04sR0FBTyxPLDRGQUFBLFNBVW5CLElBQUlHLEVBQU8sRUFSVCxjQUFNSCxFQUFPLENBQ2QzQixLQUFNLFFBQ055UCxVQUFXLFFBQ1hDLFVBQVcsRUFDWEMsVUFBVyxLQUNSbEgsWUFBYSxNQVBFLE9BV25CM0csRUFBS29CLEdBQUt2QixFQUFNdUIsSUFBTSx5Q0FBMkNDLFNBQVUsSUFBVUMsS0FBS0MsVUFFeEZ2QixFQUFLOEcsTUFBUSxDQUNkZ0gsU0FBUyxFQUNObFAsTUFBT2lCLEVBQU1qQixPQUFTLEdBQ3pCbVAsWUFBYWxPLEVBQU1qQixPQUFTaUIsRUFBTWpCLE1BQU1tSCxRQUFVLEdBR2pEL0YsRUFBS2QsSUFBTVcsRUFBTW1PLFNBQVloTyxFQUFLb0IsSUFBTSwyQkFBOEJDLFNBQVUsSUFBV0MsS0FBS0MsUUFFaEcsRUFBS3lGLFNBQVduSCxFQUFNbUgsU0FFdEJoSCxFQUFLeUgsZUFBaUJ6SCxFQUFLeUgsZUFBZXRJLEtBQXBCLE1BQ3RCYSxFQUFLaU8sYUFBZWpPLEVBQUtpTyxhQUFhOU8sS0FBbEIsTUFDcEJhLEVBQUtrTyxZQUFjbE8sRUFBS2tPLFlBQVkvTyxLQUFqQixNQUNuQmEsRUFBS21PLGFBQWVuTyxFQUFLbU8sYUFBYWhQLEtBQWxCLE1BMUJILEUsK0NBK0JuQixJQUFJMkgsRUFBUSxDQUNaQSxTQUFnQixFQUNoQkEsUUFBZ0IsTUFVaEIsT0FUSUssS0FBS0wsTUFBTWlILFlBQWM1RyxLQUFLOUcsT0FBT3VOLFlBQ3hDOUcsRUFBTXNILFFBQU4sc0JBQ0F0SCxFQUFNSSxTQUFVLEdBRWJDLEtBQUtMLE1BQU1pSCxZQUFjNUcsS0FBSzlHLE9BQU93TixZQUN4Qy9HLEVBQU1zSCxRQUFOLHNCQUNBdEgsRUFBTUksU0FBVSxHQUVqQkMsS0FBS0MsU0FBU04sR0FDUEEsRUFBTUksVSxpQ0FLYixPQURBQyxLQUFLQyxTQUFTLENBQUVpSCxhQUFhLElBQ3RCbEgsS0FBS0QsWSxxQ0FHRUcsR0FDWkEsRUFBT0EsR0FBUSxHQUNqQkYsS0FBS0MsU0FBU0MsR0FDYyxtQkFBakJGLEtBQUtILFVBQ2ZHLEtBQUtILFNBQVMsQ0FBRTlJLEtBQU1pSixLQUFLOUcsT0FBT25DLEtBQU1VLE1BQU95SSxFQUFLekksVSxxQ0FLckQsSUFBSWtJLEVBQVEsQ0FDWkEsU0FBZ0IsRUFDaEJBLGFBQW9CLEdBQ3BCSyxLQUFLQyxTQUFTTixLLG9DQUlkLElBQUlBLEVBQVEsQ0FDWkEsU0FBZ0IsR0FDaEJLLEtBQUtDLFNBQVNOLEssbUNBR0ZsSSxHQUNaLElBQUlrSSxFQUFRLEdBQ1pBLEVBQU1sSSxNQUFRQSxHQUFTdUksS0FBS2hCLE1BQU12SCxNQUNsQyxJQUFJbVAsRUFBY2pILEVBQU1sSSxNQUFNbUgsT0FDOUJlLEVBQU1pSCxZQUFjQSxFQUNwQmpILEVBQU1JLFFBQVU2RyxHQUFlNUcsS0FBSzlHLE9BQU91TixXQUFhRyxHQUFlNUcsS0FBSzlHLE9BQU93TixVQUNuRjFHLEtBQUtDLFNBQVNOLEssK0JBR04sV0FFSjlHLEVBQU9tSCxLQUVQbUgsRUFBVSxLQUNWRixFQUFVLEtBQ2QsR0FBSXBPLEVBQUs4RyxNQUFNZ0gsUUFDZCxHQUFJOU4sRUFBSzhHLE1BQU1pSCxZQUFjL04sRUFBS0ssT0FBT3VOLFVBQ3hDVSxFQUFXLDJCQUFLNUIsVUFBVSxtQ0FBZixnQkFBOEQsNEJBQU1BLFVBQVUsSUFBSTFNLEVBQUtLLE9BQU91TixVQUFZNU4sRUFBSzhHLE1BQU1pSCxhQUFySCxlQUNMLENBQ04sSUFBSWhILEVBQVEvRyxFQUFLOEcsTUFBTWlILFlBQWMvTixFQUFLSyxPQUFPd04sVUFBWSxpQkFBbUIsR0FDaEZTLEVBQVcsMkJBQUs1QixVQUFXLG9CQUFzQjNGLEdBQXRDLGVBQXlELDRCQUFNMkYsVUFBVSxJQUFJMU0sRUFBS0ssT0FBT3dOLFVBQVk3TixFQUFLOEcsTUFBTWlILGFBQWhILGlCQUlUL04sRUFBSzhHLE1BQU11SCxhQUFlck8sRUFBSzhHLE1BQU1zSCxVQUN4Q0EsRUFBVywyQkFBSzFCLFVBQVUsbUJBQW1CaEYsSUFBTSxTQUFBQyxHQUFFLE9BQUksRUFBSyxnQkFBa0JBLElBQU8zSCxFQUFLOEcsTUFBTXNILFVBR2pHLElBQUlHLEVBQVksS0FFaEIsT0FBT3ZPLEVBQUtLLE9BQU9zTixXQUVqQixJQUFLLFdBQ0hZLEVBQ0Usb0JBQUMsRUFBRCxDQUNFM1AsTUFBT3VJLEtBQUtMLE1BQU1sSSxNQUNsQm9JLFNBQVVoSCxFQUFLeUgsZUFDZjJGLFFBQVNwTixFQUFLaU8sYUFDZFosT0FBUXJOLEVBQUtrTyxZQUNiZixRQUFTbk4sRUFBS21PLGVBbUJsQixNQUVGLElBQUssV0FDSEksRUFDRixnQ0FBVXJQLElBQUtjLEVBQUtkLElBQUt3SSxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsR0FBSy9JLE1BQU91SSxLQUFLTCxNQUFNbEksTUFBT2dJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVdU8sUUFBUyxTQUFBM0YsR0FBQyxPQUFJeEgsRUFBS21PLGdCQUFnQmYsUUFBUyxTQUFBNUYsR0FBQyxPQUFJeEgsRUFBS2lPLGFBQWF6RyxJQUFJNkYsT0FBUSxTQUFBN0YsR0FBQyxPQUFJeEgsRUFBS2tPLFlBQVkxRyxNQUV6VCxNQUVGLElBQUssUUFDTCxRQUNFK0csRUFDRiw2QkFBT3JQLElBQUtjLEVBQUtkLElBQUt3SSxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsR0FBSy9JLE1BQU91SSxLQUFLTCxNQUFNbEksTUFBT2dJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVdU8sUUFBUyxTQUFBM0YsR0FBQyxPQUFJeEgsRUFBS21PLGdCQUFnQmYsUUFBUyxTQUFBNUYsR0FBQyxPQUFJeEgsRUFBS2lPLGFBQWF6RyxJQUFJNkYsT0FBUSxTQUFBN0YsR0FBQyxPQUFJeEgsRUFBS2tPLFlBQVkxRyxNQUsxVCxPQUNELDJCQUFLcEcsR0FBSXBCLEVBQUtvQixHQUFJc0csSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLd08sU0FBVzdHLEdBQUsrRSxVQUFVLDBCQUM1RCwyQkFBS0EsVUFBVSxxQkFDYjZCLEVBQ0FELEVBQ0FGLFMsOEJBekppRHhPLEssMnlDQ0psQzZPLEUsMFdBSW5CLElBQUl6TyxFQUFPbUgsS0FFTHNGLEVBQVksS0FLaEIsT0FKSXpNLEVBQUs4RyxNQUFNQyxRQUNiMEYsRUFBYSwyQkFBS0MsVUFBVSxrQkFBZixtQ0FJaEIsMkJBQUtBLFVBQVUsY0FDVDFNLEVBQUtLLE9BQU9xRyxRQUFRZ0ksS0FBSyxTQUFBQyxHQUN4QixPQUFJQSxFQUFPQyxxQkFDRiwyQkFBS2xDLFVBQVUsc0JBQXNCeE4sSUFBS3lQLEVBQU8vUCxPQUFPLDJCQUFLOE4sVUFBUyx5QkFBcUIxTSxFQUFLOEcsTUFBTWxJLE9BQVMrUCxFQUFPL1AsTUFBUSwyQkFBNkIsS0FBTSw2QkFBTzRILEtBQUssUUFBUXRJLEtBQU04QixFQUFLbUIsTUFBT3ZDLE1BQU8rUCxFQUFPL1AsTUFBT29JLFNBQVUsU0FBQVEsR0FBQyxPQUFJeEgsRUFBS3lILGVBQWUsQ0FBRTdJLE1BQU8rUCxFQUFPL1AsWUFBa0IsMkJBQUs4TixVQUFVLGlCQUFpQjVILHdCQUF5QixDQUFFQyxPQUFRNEosRUFBT0MseUJBRTNXLDJCQUFLbEMsVUFBVSxzQkFBc0J4TixJQUFLeVAsRUFBTy9QLE9BQU8sMkJBQUs4TixVQUFTLHlCQUFxQjFNLEVBQUs4RyxNQUFNbEksT0FBUytQLEVBQU8vUCxNQUFRLDJCQUE2QixLQUFNLDZCQUFPNEgsS0FBSyxRQUFRdEksS0FBTThCLEVBQUttQixNQUFPdkMsTUFBTytQLEVBQU8vUCxNQUFPb0ksU0FBVSxTQUFBUSxHQUFDLE9BQUl4SCxFQUFLeUgsZUFBZSxDQUFFN0ksTUFBTytQLEVBQU8vUCxZQUFrQiwyQkFBSzhOLFVBQVUsa0JBQWtCaUMsRUFBT0MscUJBQXVCLEtBQU9ELEVBQU9FLGFBQWVGLEVBQU9HLE9BQVNILEVBQU8vUCxXQUc5WjZOLFEsOEJBcEI0Q2hHLEcscXpDQ0FoQ3NJLEcsK1dBRUssSUFBZDlILEVBQWMsRUFBZEEsV0FFTkMsR0FBVSxFQUNSSCxFQUFRLEdBVWQsT0FUT0ksS0FBS0wsTUFBTWxJLE9BQVV1SSxLQUFLTCxNQUFNbEksTUFBTXdELE1BQU0sc0NBQy9DOEUsR0FBVSxFQUNORCxJQUFZRixFQUFRLHlCQUV0QkksS0FBSzlHLE9BQU93RyxXQUFhTSxLQUFLTCxNQUFNbEksUUFDdENzSSxHQUFVLEVBQ05ELElBQVlGLEVBQVEsK0JBRTFCSSxLQUFLQyxTQUFTLENBQUVGLFVBQVNILFVBQ3BCRyxJLCtCQUtQLElBQUlsSCxFQUFPbUgsS0FFTHNGLEVBQVksS0FLaEIsT0FKSXpNLEVBQUs4RyxNQUFNQyxRQUNiMEYsRUFBYSwyQkFBS0MsVUFBVSxrQkFBa0IxTSxFQUFLOEcsTUFBTUMsUUFJNUQsMkJBQUsyRixVQUFVLGlCQUNiLDZCQUFPbEcsS0FBSyxPQUFPNUgsTUFBT3VJLEtBQUt0SCxNQUFNakIsTUFBT2dJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVOEksSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLEtBQ3ZNOEUsUSxnQ0E5QjhDaEcsRyx5ekNDQWxDYyxHLHdYQUlqQixJQUFJM0ksRUFBUXVJLEtBQUtMLE1BQU1sSSxPQUFXdUksS0FBSzlHLE9BQU9xRyxRQUFRLElBQU1TLEtBQUs5RyxPQUFPcUcsUUFBUSxHQUFHOUgsTUFDbkZ1SSxLQUFLTSxlQUFlLENBQUU3SSxZLCtCQUt4QixJQUFJb0IsRUFBT21ILEtBRUxzRixFQUFZLEtBS2hCLE9BSkl6TSxFQUFLOEcsTUFBTUMsUUFDYjBGLEVBQWEsMkJBQUtDLFVBQVUsa0JBQWYsbUNBSWhCLDJCQUFLQSxVQUFVLGNBQ2IsOEJBQVE5TixNQUFPdUksS0FBS0wsTUFBTWxJLE9BQVMsR0FBSWdJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVOEksSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLElBQ2hNM0gsRUFBS0ssT0FBT3FHLFFBQVFnSSxLQUFLLFNBQUFDLEdBQ3hCLE9BQU8sOEJBQVEvUCxNQUFPK1AsRUFBTy9QLE9BQVMsR0FBSU0sSUFBS3lQLEVBQU8vUCxPQUFRK1AsRUFBT0UsYUFBZUYsRUFBT0csT0FBU0gsRUFBTy9QLFdBRzlHNk4sUSxnQ0F4QjRDaEcsRyx5ekNDQWhDdUksRyw2V0FJbkIsSUFBSWhQLEVBQU9tSCxLQUVMc0YsRUFBWSxLQUtoQixPQUpJek0sRUFBSzhHLE1BQU1DLFFBQ2IwRixFQUFhLDJCQUFLQyxVQUFVLGtCQUFmLCtCQUloQiwyQkFBS0EsVUFBVSxpQkFDYiw2QkFBT2xHLEtBQUssT0FBTzVILE1BQU91SSxLQUFLdEgsTUFBTWpCLE1BQU9nSSxTQUFVTyxLQUFLdEgsTUFBTStHLFNBQVVELFlBQWFRLEtBQUs5RyxPQUFPc0csWUFBYUssU0FBVSxTQUFBUSxHQUFDLE9BQUl4SCxFQUFLeUgsZUFBZSxDQUFFN0ksTUFBT29CLEVBQUttRyxNQUFNdkgsU0FBVThJLElBQUssU0FBQUMsR0FBRSxPQUFLM0gsRUFBS21HLE1BQVF3QixLQUN2TThFLFEsZ0NBZDBDaEcsRyx5ekNDQTlCYyxHLDZXQUluQixJQUFJdkgsRUFBT21ILEtBRUxzRixFQUFZLEtBS2hCLE9BSkl6TSxFQUFLOEcsTUFBTUMsUUFDYjBGLEVBQWEsMkJBQUtDLFVBQVUsa0JBQWYsK0JBSWhCLDJCQUFLQSxVQUFVLGdCQUNiLGdDQUFVOU4sTUFBT3VJLEtBQUt0SCxNQUFNakIsTUFBT2dJLFNBQVVPLEtBQUt0SCxNQUFNK0csU0FBVUQsWUFBYVEsS0FBSzlHLE9BQU9zRyxZQUFhSyxTQUFVLFNBQUFRLEdBQUMsT0FBSXhILEVBQUt5SCxlQUFlLENBQUU3SSxNQUFPb0IsRUFBS21HLE1BQU12SCxTQUFVOEksSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLElBQU1SLEtBQUtMLE1BQU1sSSxPQUMvTTZOLFEsZ0NBZDRDaEcsRyw0NURDU2hDd0ksRyx3UUFFbkIsV0FBWXBQLEdBQU8sTyw0RkFBQSxTQWNuQixJQUFJRyxFQUFPLEdBWlQsY0FBTUgsRUFBTyxDQUNYOE4sVUFBVyxLQUVYdUIsZUFBZ0IsS0FDaEJDLGFBQWMsS0FDZHRJLFVBQVUsRUFFVmlJLE1BQU8sS0FDUEQsWUFBYSxLQUNibkksUUFBUyxNQVhNLE9BZ0JqQjFHLEVBQUtLLE9BQU9uQyxLQUFPOEIsRUFBS0ssT0FBT25DLE1BQVE4QixFQUFLSyxPQUFPeU8sTUFBTXhJLGNBRXpEdEcsRUFBSzhHLE1BQVEsQ0FDWGxJLE1BQU9pQixFQUFNakIsWUFBU3dRLEdBR3hCcFAsRUFBS3lILGVBQWlCekgsRUFBS3lILGVBQWV0SSxLQUFLYSxHQUUvQ0EsRUFBS2dILFNBQVduSCxFQUFNbUgsU0F4QkwsRSxpREE0QkssSUFBZEMsRUFBYyxFQUFkQSxXQUNSLE9BQU9FLEtBQUtoQixPQUFRZ0IsS0FBS2hCLE1BQU1tQixTQUFTLENBQUVMLGlCLHFDQUc5QkksR0FFYyxtQkFBakJGLEtBQUtILFVBQ2ZHLEtBQUtILFNBQVNLLEssK0JBTWYsSUFBSXJILEVBQU9tSCxLQUVMa0ksRUFBWSxLQUNaclAsRUFBS0ssT0FBT3lPLFFBQ2RPLEVBQVksMEJBQUkzQyxVQUFVLGtCQUFrQjFNLEVBQUtLLE9BQU95TyxRQUcxRCxJQUFJUSxFQUFrQixLQUNsQnRQLEVBQUtLLE9BQU93TyxjQUNkUyxFQUFrQiwyQkFBSzVDLFVBQVUsdUJBQXVCNUgsd0JBQXlCLENBQUVDLE9BQVEvRSxFQUFLSyxPQUFPd08sZ0JBR3pHLElBQUlVLEVBQVksS0FFaEIsT0FBUXZQLEVBQUtLLE9BQU9zTixXQUVsQixJQUFLLFNBQ0g0QixFQUFZLG9CQUFDLEVBQUQsQ0FBeUJsUCxPQUFRTCxFQUFLSyxPQUFRekIsTUFBUXVJLEtBQUt0SCxNQUFNakIsT0FBU3VJLEtBQUs5RyxPQUFPekIsTUFBUW9JLFNBQVVoSCxFQUFLeUgsZUFBZ0JDLElBQUssU0FBQUMsR0FBRSxPQUFLM0gsRUFBS21HLE1BQVF3QixLQUNsSyxNQUVGLElBQUssb0JBQ0wsSUFBSyx3QkFDSDRILEVBQVksb0JBQUMsRUFBRCxDQUFtQ2xQLE9BQU0sU0FBT0wsRUFBS0ssUUFBWixJQUFvQnNOLFVBQVcsYUFBYy9PLE1BQVF1SSxLQUFLdEgsTUFBTWpCLE9BQVN1SSxLQUFLOUcsT0FBT3pCLE1BQVFvSSxTQUFVaEgsRUFBS3lILGVBQWdCQyxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsS0FDMU0sTUFFRixJQUFLLGVBQ0g0SCxFQUFZLG9CQUFDLEVBQUQsQ0FBOEJsUCxPQUFRTCxFQUFLSyxPQUFRekIsTUFBUXVJLEtBQUt0SCxNQUFNakIsT0FBU3VJLEtBQUs5RyxPQUFPekIsTUFBUW9JLFNBQVVoSCxFQUFLeUgsZUFBZ0JDLElBQUssU0FBQUMsR0FBRSxPQUFLM0gsRUFBS21HLE1BQVF3QixLQUN2SyxNQUVGLElBQUsscUJBQ0wsSUFBSyxvQkFDSDRILEVBQVksb0JBQUMsRUFBRCxDQUFtQ2xQLE9BQU0sSUFBSXNOLFVBQVcsU0FBWTNOLEVBQUtLLFFBQVV6QixNQUFRdUksS0FBS3RILE1BQU1qQixPQUFTdUksS0FBSzlHLE9BQU96QixNQUFRb0ksU0FBVWhILEVBQUt5SCxlQUFnQkMsSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLEtBQ3ZNLE1BRUYsSUFBSyxXQUNINEgsRUFBWSxvQkFBQ1IsR0FBRCxDQUEyQjFPLE9BQVFMLEVBQUtLLE9BQVEyRyxTQUFVaEgsRUFBS3lILGVBQWdCQyxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsS0FDcEgsTUFFRixJQUFLLFNBQ0g0SCxFQUFZLG9CQUFDZCxFQUFELENBQXlCcE8sT0FBUUwsRUFBS0ssT0FBUXpCLE1BQVF1SSxLQUFLdEgsTUFBTWpCLE9BQVN1SSxLQUFLOUcsT0FBT3pCLE1BQVFvSSxTQUFVaEgsRUFBS3lILGVBQWdCQyxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsS0FDbEssTUFFRixJQUFLLFNBQ0wsSUFBSyxrQkFDSDRILEVBQVksb0JBQUMsR0FBRCxDQUF5QmxQLE9BQVFMLEVBQUtLLE9BQVF6QixNQUFRdUksS0FBS3RILE1BQU1qQixPQUFTdUksS0FBSzlHLE9BQU96QixNQUFRb0ksU0FBVWhILEVBQUt5SCxlQUFnQkMsSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLEtBQ2xLLE1BRUYsSUFBSyxPQUNINEgsRUFBWSxvQkFBQ1AsR0FBRCxDQUF1QjNPLE9BQVFMLEVBQUtLLE9BQVF6QixNQUFRdUksS0FBS3RILE1BQU1qQixPQUFTdUksS0FBSzlHLE9BQU96QixNQUFRb0ksU0FBVWhILEVBQUt5SCxlQUFnQkMsSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLbUcsTUFBUXdCLEtBQ2hLLE1BRUYsSUFBSyxXQUNINEgsRUFBWSxvQkFBQyxHQUFELENBQTJCbFAsT0FBUUwsRUFBS0ssT0FBUXpCLE1BQVF1SSxLQUFLdEgsTUFBTWpCLE9BQVN1SSxLQUFLOUcsT0FBT3pCLE1BQVFvSSxTQUFVaEgsRUFBS3lILGVBQWdCQyxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsS0FDcEssTUFFRixJQUFLLHdCQUNINEgsRUFBWSxvQkFBQyxFQUFELENBQW1DbFAsT0FBTSxTQUFPTCxFQUFLSyxRQUFaLElBQW9Cc04sVUFBVyxhQUFjL08sTUFBUXVJLEtBQUt0SCxNQUFNakIsT0FBU3VJLEtBQUs5RyxPQUFPekIsTUFBUW9JLFNBQVVoSCxFQUFLeUgsZUFBZ0JDLElBQUssU0FBQUMsR0FBRSxPQUFLM0gsRUFBS21HLE1BQVF3QixLQU05TSxPQUNELDJCQUFLdkcsR0FBSXBCLEVBQUtvQixHQUFJc0csSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLd08sU0FBVzdHLEdBQUsrRSxVQUFVLGtCQUMzRDJDLEVBQ0FDLEVBQ0FDLFEsZ0NBN0dtRDNQLEssdWpEQ1BuQzRQLEcsd1FBRW5CLFdBQVkzUCxHQUFPLE8sNEZBQUEsU0FRbkIsSUFBSUcsRUFBTyxHQU5ULGNBQU1ILEVBQU8sQ0FDWGlQLE1BQU8sS0FDUFcsTUFBTyxLQUNQQyxPQUFRLE1BTE8sT0FVakIxUCxFQUFLOEcsTUFBUSxDQUNYNkksT0FBUTlQLEVBQU04UCxRQUFTLElBR3pCM1AsRUFBS3lILGVBQWlCekgsRUFBS3lILGVBQWV0SSxLQUFwQixPQUV0QmEsRUFBSzBQLE9BQVMsR0FoQkcsRSxpREFzQmpCLE9BQU92SSxLQUFLTCxNQUFNNkksUyxrQ0FHYyxJQUF4QjFJLEVBQXdCLEVBQXhCQSxXQUFZMkksRUFBWSxFQUFaQSxTQUVoQjFJLEdBQVUsRUFDVjJJLEVBQWUsS0FTbkIsT0FYVTFJLEtBR0x1SSxPQUFPdlAsU0FBUSxTQUFDMlAsR0FDZEEsRUFBTXhJLFNBQVMsQ0FBRUwsaUJBQ3BCQyxHQUFVLEVBQ0wySSxJQUFjQSxFQUFlQyxPQUlsQ0YsR0FBWUMsR0FBZ0JBLEVBQWFyQixVQUFZcUIsRUFBYXJCLFNBQVN1QixnQkFBZ0JGLEVBQWFyQixTQUFTdUIsZUFBZSxDQUFDQyxTQUFVLFdBQ3hJOUksSSxxQ0FJS0csR0FFWixJQUNJc0ksRSxrV0FBUyxJQUFLeEksS0FBS0wsTUFBTTZJLFFBQzdCQSxFQUFPdEksRUFBS25KLE1BQVFtSixFQUFLekksTUFDM0J1SSxLQUFLQyxTQUFTLENBQUV1SSxhLCtCQUtoQixJQUFJM1AsRUFBT21ILEtBRUxrSSxFQUFZLEtBQ1pyUCxFQUFLSyxPQUFPeU8sUUFDZE8sRUFBWSwwQkFBSTNDLFVBQVUsa0JBQWtCMU0sRUFBS0ssT0FBT3lPLFFBRzFELElBQUltQixFQUFZLEtBQ1pqUSxFQUFLSyxPQUFPb1AsUUFDZFEsRUFBWSwyQkFBS3ZELFVBQVUsaUJBQWlCNUgsd0JBQXlCLENBQUVDLE9BQVEvRSxFQUFLSyxPQUFPb1AsVUFHN0YsSUFBSVMsRUFBYSxLQVVqQixPQVRJbFEsRUFBS0ssT0FBT3FQLFFBQVUxUCxFQUFLSyxPQUFPcVAsT0FBTzNKLFNBQzNDbUssRUFDRSwyQkFBS3hELFVBQVUsbUJBQ1gxTSxFQUFLSyxPQUFPcVAsT0FBT2hCLEtBQUksU0FBQ3lCLEVBQWF4UyxHQUNyQyxPQUFPLG9CQUFDLEdBQUQsSUFBNEIwQyxPQUFROFAsRUFBYW5KLFNBQVVoSCxFQUFLeUgsZUFBZ0JDLElBQUssU0FBQUMsR0FBRSxPQUFLM0gsRUFBS21HLE1BQVF3QixHQUFLekksSUFBRyx5QkFBb0J2QixJQUFySSxPQUFnSixTQUFBZ0ssR0FBUTNILEVBQUswUCxPQUFPL1IsR0FBS2dLLFdBTXpMLDJCQUFLdkcsR0FBSXBCLEVBQUttQixNQUFPdUwsVUFBVSxXQUFXaEYsSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLd08sU0FBVzdHLElBQ3BFMEgsRUFDQVksRUFDQUMsUSxnQ0EvRThDdFEsSywrdENDdURwQ3dRLEcsd1FBeERiLFdBQVl2USxHQUFNLGEsNEZBQUEsVUFDaEIsY0FBTUEsSUFDRGlILE1BQVEsQ0FDWGxJLE1BQU8sRUFBS2lCLE1BQU1qQixNQUNsQnlSLFFBQVMsRUFBS3hRLE1BQU13USxVQUFXLEdBRWpDLEVBQUtDLGFBQWUsRUFBS0EsYUFBYW5SLEtBQWxCLE9BTkosRSxrREFTTG9SLEdBQU8sSUFDVjNSLEVBQVUyUixFQUFNQyxPQUFoQjVSLE1BRTBCLG1CQUF4QnVJLEtBQUt0SCxNQUFNbUgsVUFDbkJHLEtBQUt0SCxNQUFNbUgsU0FBU3BJLEdBR3RCdUksS0FBS0MsU0FBUyxDQUFDeEksUUFBT3lSLFNBQVMsTSxnQ0FLRyxtQkFBeEJsSixLQUFLdEgsTUFBTW1ILFVBQ25CRyxLQUFLdEgsTUFBTW1ILFNBQVMsSUFHdEJHLEtBQUtDLFNBQVMsQ0FBQ2lKLFNBQVMsTSxtQ0FJYkksRUFBS0MsRUFBSzlSLEdBR3JCLE9BQXFCLEdBRERBLEVBQVE2UixJQURkQyxFQUFNRCxHQUVXLEksK0JBSS9CLElBQUl6USxFQUFPbUgsS0FETCxFQUVxQm5ILEVBQUs4RyxNQUF4QmxJLEVBRkYsRUFFRUEsTUFBT3lSLEVBRlQsRUFFU0EsUUFGVCxFQUdxQnJRLEVBQUtILE1BQXhCNFEsRUFIRixFQUdFQSxJQUFLQyxFQUhQLEVBR09BLElBQUtDLEVBSFosRUFHWUEsS0FDbEIsT0FDRSwyQkFBS2pFLFVBQVMsVUFBSzFNLEVBQUtILE1BQU02TSxVQUFoQixnQkFDWiwyQkFBS0EsVUFBVSw4QkFDYiwyQkFBS0EsVUFBVSxxQkFDZiwyQkFBS0EsVUFBVSx1Q0FDYiwyQkFBS0EsVUFBVSw0QkFBNEJrRSxNQUFPLENBQUVDLFVBQVcsVUFBWTdRLEVBQUs4USxhQUFhTCxFQUFLQyxFQUFLOVIsR0FBUyxRQUVsSCwyQkFBSzhOLFVBQVUsdURBQ2YsMkJBQUtBLFVBQVUsMkRBQ2YsMkJBQUtBLFVBQVUseURBRWpCLDZCQUFPbEcsS0FBSyxRQUFRaUssSUFBS0EsRUFBS0MsSUFBS0EsRUFBS0MsS0FBTUEsRUFBTS9SLE1BQU9BLEVBQU9tUyxRQUFTLFdBQWFWLEdBQVNyUSxFQUFLZ1IsV0FBZWhLLFNBQVVoSCxFQUFLc1EsYUFBYzVELFVBQVcyRCxFQUFVLHlCQUEyQiw4Q0FBK0MzSSxJQUFLLFNBQUFDLEdBQUUsT0FBSzNILEVBQUttRyxNQUFRd0IsVyxnQ0FuRDdQL0gsS0NvQk4sS0FDYnFSLFFBQ0FDLGFBQ0FDLFNBQ0FDLGNBQ0FDLG1CQUNBQyxZQUNBQyxTQUNBQyxVQUNBQyxRQUNBQyxZQUNBdEIsWSxjQ25DRixJQUFJNVEsRUFBaUIsR0FBR0EsZUFFeEI5QixFQUFPRCxRQUFVLFNBQVV1SCxFQUFJOUYsR0FDN0IsT0FBT00sRUFBZTFCLEtBQUtrSCxFQUFJOUYsSyxnQkNIakMsSUFBSXlTLEVBQVEsRUFBUSxHQUdwQmpVLEVBQU9ELFNBQVdrVSxHQUFNLFdBQ3RCLE9BQThFLEdBQXZFdFQsT0FBT0MsZUFBZSxHQUFJLEVBQUcsQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUSxPLGNDSjFFZCxFQUFPRCxRQUFVLFNBQVVvSCxHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBT2tDLEdBQ1AsT0FBTyxLLGNDSlhySixFQUFPRCxRQUFVLFNBQVV1SCxHQUN6QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLEksOEJDRHZELGdCQUFJNE0sRUFDWSxvQkFBcUI1UixLQURqQzRSLEVBRVEsV0FBWTVSLE1BQVEsYUFBY3RCLE9BRjFDa1QsRUFJQSxlQUFnQjVSLE1BQ2hCLFNBQVVBLE1BQ1YsV0FDRSxJQUVFLE9BREEsSUFBSTZSLE1BQ0csRUFDUCxNQUFPckssR0FDUCxPQUFPLEdBTFgsR0FOQW9LLEVBY1EsYUFBYzVSLEtBZHRCNFIsRUFlVyxnQkFBaUI1UixLQU9oQyxHQUFJNFIsRUFDRixJQUFJRSxFQUFjLENBQ2hCLHFCQUNBLHNCQUNBLDZCQUNBLHNCQUNBLHVCQUNBLHNCQUNBLHVCQUNBLHdCQUNBLHlCQUdFQyxFQUNGQyxZQUFZQyxRQUNaLFNBQVNyUSxHQUNQLE9BQU9BLEdBQU9rUSxFQUFZSSxRQUFRN1QsT0FBT2tCLFVBQVU2RyxTQUFTdEksS0FBSzhELEtBQVMsR0FJaEYsU0FBU3VRLEVBQWNqVSxHQUlyQixHQUhvQixpQkFBVEEsSUFDVEEsRUFBT2tVLE9BQU9sVSxJQUVaLDRCQUE0Qm1VLEtBQUtuVSxHQUNuQyxNQUFNLElBQUlvVSxVQUFVLDBDQUV0QixPQUFPcFUsRUFBS29JLGNBR2QsU0FBU2lNLEVBQWUzVCxHQUl0QixNQUhxQixpQkFBVkEsSUFDVEEsRUFBUXdULE9BQU94VCxJQUVWQSxFQUlULFNBQVM0VCxFQUFZQyxHQUNuQixJQUFJQyxFQUFXLENBQ2JsUCxLQUFNLFdBQ0osSUFBSTVFLEVBQVE2VCxFQUFNRSxRQUNsQixNQUFPLENBQUNDLFVBQWdCeEQsSUFBVnhRLEVBQXFCQSxNQUFPQSxLQVU5QyxPQU5JZ1QsSUFDRmMsRUFBU2hVLE9BQU9nVSxVQUFZLFdBQzFCLE9BQU9BLElBSUpBLEVBR0YsU0FBU0csRUFBUTdSLEdBQ3RCbUcsS0FBS3VILElBQU0sR0FFUDFOLGFBQW1CNlIsRUFDckI3UixFQUFRYixTQUFRLFNBQVN2QixFQUFPVixHQUM5QmlKLEtBQUsyTCxPQUFPNVUsRUFBTVUsS0FDakJ1SSxNQUNNNEwsTUFBTUMsUUFBUWhTLEdBQ3ZCQSxFQUFRYixTQUFRLFNBQVM4UyxHQUN2QjlMLEtBQUsyTCxPQUFPRyxFQUFPLEdBQUlBLEVBQU8sTUFDN0I5TCxNQUNNbkcsR0FDVDNDLE9BQU82VSxvQkFBb0JsUyxHQUFTYixTQUFRLFNBQVNqQyxHQUNuRGlKLEtBQUsyTCxPQUFPNVUsRUFBTThDLEVBQVE5QyxNQUN6QmlKLE1BZ0VQLFNBQVNnTSxFQUFTcEssR0FDaEIsR0FBSUEsRUFBS3FLLFNBQ1AsT0FBT0MsRUFBUUMsT0FBTyxJQUFJaEIsVUFBVSxpQkFFdEN2SixFQUFLcUssVUFBVyxFQUdsQixTQUFTRyxFQUFnQkMsR0FDdkIsT0FBTyxJQUFJSCxHQUFRLFNBQVNJLEVBQVNILEdBQ25DRSxFQUFPMUssT0FBUyxXQUNkMkssRUFBUUQsRUFBTzNOLFNBRWpCMk4sRUFBT0UsUUFBVSxXQUNmSixFQUFPRSxFQUFPek0sV0FLcEIsU0FBUzRNLEVBQXNCQyxHQUM3QixJQUFJSixFQUFTLElBQUlLLFdBQ2JDLEVBQVVQLEVBQWdCQyxHQUU5QixPQURBQSxFQUFPTyxrQkFBa0JILEdBQ2xCRSxFQW9CVCxTQUFTRSxFQUFZQyxHQUNuQixHQUFJQSxFQUFJNU4sTUFDTixPQUFPNE4sRUFBSTVOLE1BQU0sR0FFakIsSUFBSTZOLEVBQU8sSUFBSUMsV0FBV0YsRUFBSUcsWUFFOUIsT0FEQUYsRUFBSzNSLElBQUksSUFBSTRSLFdBQVdGLElBQ2pCQyxFQUFLRyxPQUloQixTQUFTQyxJQTBGUCxPQXpGQW5OLEtBQUtpTSxVQUFXLEVBRWhCak0sS0FBS29OLFVBQVksU0FBU3hMLEdBaE01QixJQUFvQm5ILEVBaU1oQnVGLEtBQUtxTixVQUFZekwsRUFDWkEsRUFFc0IsaUJBQVRBLEVBQ2hCNUIsS0FBS3NOLFVBQVkxTCxFQUNSNkksR0FBZ0JDLEtBQUt0UyxVQUFVbVYsY0FBYzNMLEdBQ3RENUIsS0FBS3dOLFVBQVk1TCxFQUNSNkksR0FBb0JnRCxTQUFTclYsVUFBVW1WLGNBQWMzTCxHQUM5RDVCLEtBQUswTixjQUFnQjlMLEVBQ1o2SSxHQUF3QmtELGdCQUFnQnZWLFVBQVVtVixjQUFjM0wsR0FDekU1QixLQUFLc04sVUFBWTFMLEVBQUszQyxXQUNid0wsR0FBdUJBLEtBNU1sQmhRLEVBNE02Q21ILElBM01qRGdNLFNBQVN4VixVQUFVbVYsY0FBYzlTLEtBNE0zQ3VGLEtBQUs2TixpQkFBbUJoQixFQUFZakwsRUFBS3NMLFFBRXpDbE4sS0FBS3FOLFVBQVksSUFBSTNDLEtBQUssQ0FBQzFLLEtBQUs2TixvQkFDdkJwRCxJQUF3QkksWUFBWXpTLFVBQVVtVixjQUFjM0wsSUFBU2dKLEVBQWtCaEosSUFDaEc1QixLQUFLNk4saUJBQW1CaEIsRUFBWWpMLEdBRXBDNUIsS0FBS3NOLFVBQVkxTCxFQUFPMUssT0FBT2tCLFVBQVU2RyxTQUFTdEksS0FBS2lMLEdBaEJ2RDVCLEtBQUtzTixVQUFZLEdBbUJkdE4sS0FBS25HLFFBQVF4QyxJQUFJLGtCQUNBLGlCQUFUdUssRUFDVDVCLEtBQUtuRyxRQUFRdUIsSUFBSSxlQUFnQiw0QkFDeEI0RSxLQUFLd04sV0FBYXhOLEtBQUt3TixVQUFVbk8sS0FDMUNXLEtBQUtuRyxRQUFRdUIsSUFBSSxlQUFnQjRFLEtBQUt3TixVQUFVbk8sTUFDdkNvTCxHQUF3QmtELGdCQUFnQnZWLFVBQVVtVixjQUFjM0wsSUFDekU1QixLQUFLbkcsUUFBUXVCLElBQUksZUFBZ0IscURBS25DcVAsSUFDRnpLLEtBQUt5TSxLQUFPLFdBQ1YsSUFBSXFCLEVBQVc5QixFQUFTaE0sTUFDeEIsR0FBSThOLEVBQ0YsT0FBT0EsRUFHVCxHQUFJOU4sS0FBS3dOLFVBQ1AsT0FBT3RCLEVBQVFJLFFBQVF0TSxLQUFLd04sV0FDdkIsR0FBSXhOLEtBQUs2TixpQkFDZCxPQUFPM0IsRUFBUUksUUFBUSxJQUFJNUIsS0FBSyxDQUFDMUssS0FBSzZOLG9CQUNqQyxHQUFJN04sS0FBSzBOLGNBQ2QsTUFBTSxJQUFJOVEsTUFBTSx3Q0FFaEIsT0FBT3NQLEVBQVFJLFFBQVEsSUFBSTVCLEtBQUssQ0FBQzFLLEtBQUtzTixjQUkxQ3ROLEtBQUsrTixZQUFjLFdBQ2pCLE9BQUkvTixLQUFLNk4saUJBQ0E3QixFQUFTaE0sT0FBU2tNLEVBQVFJLFFBQVF0TSxLQUFLNk4sa0JBRXZDN04sS0FBS3lNLE9BQU9oUSxLQUFLK1AsS0FLOUJ4TSxLQUFLZ08sS0FBTyxXQUNWLElBM0ZvQnZCLEVBQ2xCSixFQUNBTSxFQXlGRW1CLEVBQVc5QixFQUFTaE0sTUFDeEIsR0FBSThOLEVBQ0YsT0FBT0EsRUFHVCxHQUFJOU4sS0FBS3dOLFVBQ1AsT0FqR2tCZixFQWlHSXpNLEtBQUt3TixVQWhHM0JuQixFQUFTLElBQUlLLFdBQ2JDLEVBQVVQLEVBQWdCQyxHQUM5QkEsRUFBTzRCLFdBQVd4QixHQUNYRSxFQThGRSxHQUFJM00sS0FBSzZOLGlCQUNkLE9BQU8zQixFQUFRSSxRQTVGckIsU0FBK0JRLEdBSTdCLElBSEEsSUFBSUMsRUFBTyxJQUFJQyxXQUFXRixHQUN0Qm9CLEVBQVEsSUFBSXRDLE1BQU1tQixFQUFLbk8sUUFFbEJwSSxFQUFJLEVBQUdBLEVBQUl1VyxFQUFLbk8sT0FBUXBJLElBQy9CMFgsRUFBTTFYLEdBQUt5VSxPQUFPa0QsYUFBYXBCLEVBQUt2VyxJQUV0QyxPQUFPMFgsRUFBTUUsS0FBSyxJQXFGU0MsQ0FBc0JyTyxLQUFLNk4sbUJBQzdDLEdBQUk3TixLQUFLME4sY0FDZCxNQUFNLElBQUk5USxNQUFNLHdDQUVoQixPQUFPc1AsRUFBUUksUUFBUXRNLEtBQUtzTixZQUk1QjdDLElBQ0Z6SyxLQUFLc08sU0FBVyxXQUNkLE9BQU90TyxLQUFLZ08sT0FBT3ZSLEtBQUs4UixLQUk1QnZPLEtBQUtuRCxLQUFPLFdBQ1YsT0FBT21ELEtBQUtnTyxPQUFPdlIsS0FBS3RELEtBQUtDLFFBR3hCNEcsS0ExTVQwTCxFQUFRdFQsVUFBVXVULE9BQVMsU0FBUzVVLEVBQU1VLEdBQ3hDVixFQUFPaVUsRUFBY2pVLEdBQ3JCVSxFQUFRMlQsRUFBZTNULEdBQ3ZCLElBQUkrVyxFQUFXeE8sS0FBS3VILElBQUl4USxHQUN4QmlKLEtBQUt1SCxJQUFJeFEsR0FBUXlYLEVBQVdBLEVBQVcsS0FBTy9XLEVBQVFBLEdBR3hEaVUsRUFBUXRULFVBQWtCLE9BQUksU0FBU3JCLFVBQzlCaUosS0FBS3VILElBQUl5RCxFQUFjalUsS0FHaEMyVSxFQUFRdFQsVUFBVWYsSUFBTSxTQUFTTixHQUUvQixPQURBQSxFQUFPaVUsRUFBY2pVLEdBQ2RpSixLQUFLeU8sSUFBSTFYLEdBQVFpSixLQUFLdUgsSUFBSXhRLEdBQVEsTUFHM0MyVSxFQUFRdFQsVUFBVXFXLElBQU0sU0FBUzFYLEdBQy9CLE9BQU9pSixLQUFLdUgsSUFBSWxQLGVBQWUyUyxFQUFjalUsS0FHL0MyVSxFQUFRdFQsVUFBVWdELElBQU0sU0FBU3JFLEVBQU1VLEdBQ3JDdUksS0FBS3VILElBQUl5RCxFQUFjalUsSUFBU3FVLEVBQWUzVCxJQUdqRGlVLEVBQVF0VCxVQUFVWSxRQUFVLFNBQVMwVixFQUFVQyxHQUM3QyxJQUFLLElBQUk1WCxLQUFRaUosS0FBS3VILElBQ2hCdkgsS0FBS3VILElBQUlsUCxlQUFldEIsSUFDMUIyWCxFQUFTL1gsS0FBS2dZLEVBQVMzTyxLQUFLdUgsSUFBSXhRLEdBQU9BLEVBQU1pSixPQUtuRDBMLEVBQVF0VCxVQUFVVyxLQUFPLFdBQ3ZCLElBQUl1UyxFQUFRLEdBSVosT0FIQXRMLEtBQUtoSCxTQUFRLFNBQVN2QixFQUFPVixHQUMzQnVVLEVBQU14SyxLQUFLL0osTUFFTnNVLEVBQVlDLElBR3JCSSxFQUFRdFQsVUFBVW9RLE9BQVMsV0FDekIsSUFBSThDLEVBQVEsR0FJWixPQUhBdEwsS0FBS2hILFNBQVEsU0FBU3ZCLEdBQ3BCNlQsRUFBTXhLLEtBQUtySixNQUVONFQsRUFBWUMsSUFHckJJLEVBQVF0VCxVQUFVd1csUUFBVSxXQUMxQixJQUFJdEQsRUFBUSxHQUlaLE9BSEF0TCxLQUFLaEgsU0FBUSxTQUFTdkIsRUFBT1YsR0FDM0J1VSxFQUFNeEssS0FBSyxDQUFDL0osRUFBTVUsT0FFYjRULEVBQVlDLElBR2pCYixJQUNGaUIsRUFBUXRULFVBQVViLE9BQU9nVSxVQUFZRyxFQUFRdFQsVUFBVXdXLFNBcUp6RCxJQUFJQyxFQUFVLENBQUMsU0FBVSxNQUFPLE9BQVEsVUFBVyxPQUFRLE9BT3BELFNBQVNDLEVBQVE5UCxFQUFPZ0MsR0FFN0IsSUFQdUIrTixFQUNuQkMsRUFNQXBOLEdBREpaLEVBQVVBLEdBQVcsSUFDRlksS0FFbkIsR0FBSTVDLGFBQWlCOFAsRUFBUyxDQUM1QixHQUFJOVAsRUFBTWlOLFNBQ1IsTUFBTSxJQUFJZCxVQUFVLGdCQUV0Qm5MLEtBQUtwRyxJQUFNb0YsRUFBTXBGLElBQ2pCb0csS0FBS2lQLFlBQWNqUSxFQUFNaVEsWUFDcEJqTyxFQUFRbkgsVUFDWG1HLEtBQUtuRyxRQUFVLElBQUk2UixFQUFRMU0sRUFBTW5GLFVBRW5DbUcsS0FBSytPLE9BQVMvUCxFQUFNK1AsT0FDcEIvTyxLQUFLckksS0FBT3FILEVBQU1ySCxLQUNsQnFJLEtBQUtrUCxPQUFTbFEsRUFBTWtRLE9BQ2Z0TixHQUEyQixNQUFuQjVDLEVBQU1xTyxZQUNqQnpMLEVBQU81QyxFQUFNcU8sVUFDYnJPLEVBQU1pTixVQUFXLFFBR25Cak0sS0FBS3BHLElBQU1xUixPQUFPak0sR0FZcEIsR0FUQWdCLEtBQUtpUCxZQUFjak8sRUFBUWlPLGFBQWVqUCxLQUFLaVAsYUFBZSxlQUMxRGpPLEVBQVFuSCxTQUFZbUcsS0FBS25HLFVBQzNCbUcsS0FBS25HLFFBQVUsSUFBSTZSLEVBQVExSyxFQUFRbkgsVUFFckNtRyxLQUFLK08sUUFqQ2tCQSxFQWlDTy9OLEVBQVErTixRQUFVL08sS0FBSytPLFFBQVUsTUFoQzNEQyxFQUFVRCxFQUFPSSxjQUNkTixFQUFROUQsUUFBUWlFLElBQVksRUFBSUEsRUFBVUQsR0FnQ2pEL08sS0FBS3JJLEtBQU9xSixFQUFRckosTUFBUXFJLEtBQUtySSxNQUFRLEtBQ3pDcUksS0FBS2tQLE9BQVNsTyxFQUFRa08sUUFBVWxQLEtBQUtrUCxPQUNyQ2xQLEtBQUtvUCxTQUFXLE1BRUssUUFBaEJwUCxLQUFLK08sUUFBb0MsU0FBaEIvTyxLQUFLK08sU0FBc0JuTixFQUN2RCxNQUFNLElBQUl1SixVQUFVLDZDQUV0Qm5MLEtBQUtvTixVQUFVeEwsR0FPakIsU0FBUzJNLEVBQU8zTSxHQUNkLElBQUl5TixFQUFPLElBQUk1QixTQVlmLE9BWEE3TCxFQUNHME4sT0FDQUMsTUFBTSxLQUNOdlcsU0FBUSxTQUFTd1csR0FDaEIsR0FBSUEsRUFBTyxDQUNULElBQUlELEVBQVFDLEVBQU1ELE1BQU0sS0FDcEJ4WSxFQUFPd1ksRUFBTS9ELFFBQVFsUSxRQUFRLE1BQU8sS0FDcEM3RCxFQUFROFgsRUFBTW5CLEtBQUssS0FBSzlTLFFBQVEsTUFBTyxLQUMzQytULEVBQUsxRCxPQUFPOEQsbUJBQW1CMVksR0FBTzBZLG1CQUFtQmhZLFFBR3hENFgsRUFxQkYsU0FBU0ssRUFBU0MsRUFBVTNPLEdBQzVCQSxJQUNIQSxFQUFVLElBR1poQixLQUFLWCxLQUFPLFVBQ1pXLEtBQUs0UCxZQUE0QjNILElBQW5CakgsRUFBUTRPLE9BQXVCLElBQU01TyxFQUFRNE8sT0FDM0Q1UCxLQUFLckQsR0FBS3FELEtBQUs0UCxRQUFVLEtBQU81UCxLQUFLNFAsT0FBUyxJQUM5QzVQLEtBQUs2UCxXQUFhLGVBQWdCN08sRUFBVUEsRUFBUTZPLFdBQWEsS0FDakU3UCxLQUFLbkcsUUFBVSxJQUFJNlIsRUFBUTFLLEVBQVFuSCxTQUNuQ21HLEtBQUtwRyxJQUFNb0gsRUFBUXBILEtBQU8sR0FDMUJvRyxLQUFLb04sVUFBVXVDLEdBakRqQmIsRUFBUTFXLFVBQVVnRyxNQUFRLFdBQ3hCLE9BQU8sSUFBSTBRLEVBQVE5TyxLQUFNLENBQUM0QixLQUFNNUIsS0FBS3FOLGFBbUN2Q0YsRUFBS3hXLEtBQUttWSxFQUFRMVcsV0FnQmxCK1UsRUFBS3hXLEtBQUsrWSxFQUFTdFgsV0FFbkJzWCxFQUFTdFgsVUFBVWdHLE1BQVEsV0FDekIsT0FBTyxJQUFJc1IsRUFBUzFQLEtBQUtxTixVQUFXLENBQ2xDdUMsT0FBUTVQLEtBQUs0UCxPQUNiQyxXQUFZN1AsS0FBSzZQLFdBQ2pCaFcsUUFBUyxJQUFJNlIsRUFBUTFMLEtBQUtuRyxTQUMxQkQsSUFBS29HLEtBQUtwRyxPQUlkOFYsRUFBUzlQLE1BQVEsV0FDZixJQUFJbEQsRUFBVyxJQUFJZ1QsRUFBUyxLQUFNLENBQUNFLE9BQVEsRUFBR0MsV0FBWSxLQUUxRCxPQURBblQsRUFBUzJDLEtBQU8sUUFDVDNDLEdBR1QsSUFBSW9ULEVBQW1CLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxLQUU1Q0osRUFBU0ssU0FBVyxTQUFTblcsRUFBS2dXLEdBQ2hDLElBQTBDLElBQXRDRSxFQUFpQi9FLFFBQVE2RSxHQUMzQixNQUFNLElBQUlJLFdBQVcsdUJBR3ZCLE9BQU8sSUFBSU4sRUFBUyxLQUFNLENBQUNFLE9BQVFBLEVBQVEvVixRQUFTLENBQUNxQixTQUFVdEIsTUFHMUQsSUFBSXFXLEVBQWVwWCxLQUFLb1gsYUFDL0IsSUFDRSxJQUFJQSxFQUNKLE1BQU81VyxJQUNQNFcsRUFBZSxTQUFTQyxFQUFTblosR0FDL0JpSixLQUFLa1EsUUFBVUEsRUFDZmxRLEtBQUtqSixLQUFPQSxFQUNaLElBQUk2SSxFQUFRaEQsTUFBTXNULEdBQ2xCbFEsS0FBS21RLE1BQVF2USxFQUFNdVEsUUFFUi9YLFVBQVlsQixPQUFPWSxPQUFPOEUsTUFBTXhFLFdBQzdDNlgsRUFBYTdYLFVBQVVnWSxZQUFjSCxFQUdoQyxTQUFTelQsRUFBTXdDLEVBQU9xUixHQUMzQixPQUFPLElBQUluRSxHQUFRLFNBQVNJLEVBQVNILEdBQ25DLElBQUltRSxFQUFVLElBQUl4QixFQUFROVAsRUFBT3FSLEdBRWpDLEdBQUlDLEVBQVFwQixRQUFVb0IsRUFBUXBCLE9BQU9xQixRQUNuQyxPQUFPcEUsRUFBTyxJQUFJOEQsRUFBYSxVQUFXLGVBRzVDLElBQUlPLEVBQU0sSUFBSUMsZUFFZCxTQUFTQyxJQUNQRixFQUFJRyxRQUdOSCxFQUFJN08sT0FBUyxXQUNYLElBeEZnQmlQLEVBQ2hCL1csRUF1RkltSCxFQUFVLENBQ1o0TyxPQUFRWSxFQUFJWixPQUNaQyxXQUFZVyxFQUFJWCxXQUNoQmhXLFNBM0ZjK1csRUEyRlFKLEVBQUlLLHlCQUEyQixHQTFGdkRoWCxFQUFVLElBQUk2UixFQUdRa0YsRUFBV3RWLFFBQVEsZUFBZ0IsS0FDekNpVSxNQUFNLFNBQVN2VyxTQUFRLFNBQVM4WCxHQUNsRCxJQUFJQyxFQUFRRCxFQUFLdkIsTUFBTSxLQUNuQnhYLEVBQU1nWixFQUFNdkYsUUFBUThELE9BQ3hCLEdBQUl2WCxFQUFLLENBQ1AsSUFBSU4sRUFBUXNaLEVBQU0zQyxLQUFLLEtBQUtrQixPQUM1QnpWLEVBQVE4UixPQUFPNVQsRUFBS04sT0FHakJvQyxJQWdGSG1ILEVBQVFwSCxJQUFNLGdCQUFpQjRXLEVBQU1BLEVBQUlRLFlBQWNoUSxFQUFRbkgsUUFBUXhDLElBQUksaUJBQzNFLElBQUl1SyxFQUFPLGFBQWM0TyxFQUFNQSxFQUFJOVQsU0FBVzhULEVBQUlTLGFBQ2xEM0UsRUFBUSxJQUFJb0QsRUFBUzlOLEVBQU1aLEtBRzdCd1AsRUFBSWpFLFFBQVUsV0FDWkosRUFBTyxJQUFJaEIsVUFBVSw0QkFHdkJxRixFQUFJVSxVQUFZLFdBQ2QvRSxFQUFPLElBQUloQixVQUFVLDRCQUd2QnFGLEVBQUlXLFFBQVUsV0FDWmhGLEVBQU8sSUFBSThELEVBQWEsVUFBVyxnQkFHckNPLEVBQUlZLEtBQUtkLEVBQVF2QixPQUFRdUIsRUFBUTFXLEtBQUssR0FFVixZQUF4QjBXLEVBQVFyQixZQUNWdUIsRUFBSWEsaUJBQWtCLEVBQ1csU0FBeEJmLEVBQVFyQixjQUNqQnVCLEVBQUlhLGlCQUFrQixHQUdwQixpQkFBa0JiLEdBQU8vRixJQUMzQitGLEVBQUljLGFBQWUsUUFHckJoQixFQUFRelcsUUFBUWIsU0FBUSxTQUFTdkIsRUFBT1YsR0FDdEN5WixFQUFJZSxpQkFBaUJ4YSxFQUFNVSxNQUd6QjZZLEVBQVFwQixTQUNWb0IsRUFBUXBCLE9BQU9sSyxpQkFBaUIsUUFBUzBMLEdBRXpDRixFQUFJZ0IsbUJBQXFCLFdBRUEsSUFBbkJoQixFQUFJaUIsWUFDTm5CLEVBQVFwQixPQUFPd0Msb0JBQW9CLFFBQVNoQixLQUtsREYsRUFBSW1CLFVBQWtDLElBQXRCckIsRUFBUWpELFVBQTRCLEtBQU9pRCxFQUFRakQsY0FJdkU3USxFQUFNb1YsVUFBVyxFQUVaL1ksS0FBSzJELFFBQ1IzRCxLQUFLMkQsTUFBUUEsRUFDYjNELEtBQUs2UyxRQUFVQSxFQUNmN1MsS0FBS2lXLFFBQVVBLEVBQ2ZqVyxLQUFLNlcsU0FBV0EsSyxrQ0NsZ0JsQixJQUFJbUMsRUFBYyxFQUFRLEdBQ3RCQyxFQUF1QixFQUFRLElBQy9CQyxFQUEyQixFQUFRLElBRXZDeGIsRUFBT0QsUUFBVXViLEVBQWMsU0FBVTNaLEVBQVFILEVBQUtOLEdBQ3BELE9BQU9xYSxFQUFxQkUsRUFBRTlaLEVBQVFILEVBQUtnYSxFQUF5QixFQUFHdGEsS0FDckUsU0FBVVMsRUFBUUgsRUFBS04sR0FFekIsT0FEQVMsRUFBT0gsR0FBT04sRUFDUFMsSSxnQkNSVCxJQUFJMlosRUFBYyxFQUFRLEdBQ3RCSSxFQUFpQixFQUFRLElBQ3pCQyxFQUFXLEVBQVEsSUFDbkJDLEVBQWMsRUFBUSxJQUV0QkMsRUFBdUJsYixPQUFPQyxlQUlsQ2IsRUFBUTBiLEVBQUlILEVBQWNPLEVBQXVCLFNBQXdCQyxFQUFHQyxFQUFHQyxHQUk3RSxHQUhBTCxFQUFTRyxHQUNUQyxFQUFJSCxFQUFZRyxHQUFHLEdBQ25CSixFQUFTSyxHQUNMTixFQUFnQixJQUNsQixPQUFPRyxFQUFxQkMsRUFBR0MsRUFBR0MsR0FDbEMsTUFBTzNTLElBQ1QsR0FBSSxRQUFTMlMsR0FBYyxRQUFTQSxFQUFZLE1BQU1wSCxVQUFVLDJCQUVoRSxNQURJLFVBQVdvSCxJQUFZRixFQUFFQyxHQUFLQyxFQUFXOWEsT0FDdEM0YSxJLGdCQ2xCVCxJQUFJRyxFQUFXLEVBQVEsSUFFdkJqYyxFQUFPRCxRQUFVLFNBQVV1SCxHQUN6QixJQUFLMlUsRUFBUzNVLEdBQ1osTUFBTXNOLFVBQVVGLE9BQU9wTixHQUFNLHFCQUM3QixPQUFPQSxJLGlCQ0pYLElBQUk0VSxFQUFnQixFQUFRLElBQ3hCQyxFQUF5QixFQUFRLElBRXJDbmMsRUFBT0QsUUFBVSxTQUFVdUgsR0FDekIsT0FBTzRVLEVBQWNDLEVBQXVCN1UsTSxnQkNMOUMsSUFBSUcsRUFBUyxFQUFRLEdBQ2pCMlUsRUFBOEIsRUFBUSxJQUUxQ3BjLEVBQU9ELFFBQVUsU0FBVXlCLEVBQUtOLEdBQzlCLElBQ0VrYixFQUE0QjNVLEVBQVFqRyxFQUFLTixHQUN6QyxNQUFPbUksR0FDUDVCLEVBQU9qRyxHQUFPTixFQUNkLE9BQU9BLEksY0NSWGxCLEVBQU9ELFFBQVUsSSxjQ0NqQkMsRUFBT0QsUUFBVSxDQUNmLGNBQ0EsaUJBQ0EsZ0JBQ0EsdUJBQ0EsaUJBQ0EsV0FDQSxZLGVDUkYsSUFBSXNjLEVBR0pBLEVBQUksV0FDSCxPQUFPNVMsS0FESixHQUlKLElBRUM0UyxFQUFJQSxHQUFLLElBQUkzVSxTQUFTLGNBQWIsR0FDUixNQUFPb0MsR0FFYyxpQkFBWDdILFNBQXFCb2EsRUFBSXBhLFFBT3JDakMsRUFBT0QsUUFBVXNjLEcsaUJDbkJqQnJjLEVBQU9ELFFBQVUsRUFBUSxJQUFlNFYsUyxnQkNBeEMsSUFBSTJGLEVBQWMsRUFBUSxHQUN0QmdCLEVBQTZCLEVBQVEsSUFDckNkLEVBQTJCLEVBQVEsSUFDbkNlLEVBQWtCLEVBQVEsSUFDMUJYLEVBQWMsRUFBUSxJQUN0QjFELEVBQU0sRUFBUSxHQUNkd0QsRUFBaUIsRUFBUSxJQUV6QmMsRUFBaUM3YixPQUFPOGIseUJBSTVDMWMsRUFBUTBiLEVBQUlILEVBQWNrQixFQUFpQyxTQUFrQ1YsRUFBR0MsR0FHOUYsR0FGQUQsRUFBSVMsRUFBZ0JULEdBQ3BCQyxFQUFJSCxFQUFZRyxHQUFHLEdBQ2ZMLEVBQWdCLElBQ2xCLE9BQU9jLEVBQStCVixFQUFHQyxHQUN6QyxNQUFPMVMsSUFDVCxHQUFJNk8sRUFBSTRELEVBQUdDLEdBQUksT0FBT1AsR0FBMEJjLEVBQTJCYixFQUFFcmIsS0FBSzBiLEVBQUdDLEdBQUlELEVBQUVDLE0sY0NsQjdGL2IsRUFBT0QsUUFBVSxTQUFVMmMsRUFBUXhiLEdBQ2pDLE1BQU8sQ0FDTEwsYUFBdUIsRUFBVDZiLEdBQ2RDLGVBQXlCLEVBQVRELEdBQ2hCRSxXQUFxQixFQUFURixHQUNaeGIsTUFBT0EsSyxnQkNMWCxJQUFJK2EsRUFBVyxFQUFRLElBTXZCamMsRUFBT0QsUUFBVSxTQUFVMEksRUFBT29VLEdBQ2hDLElBQUtaLEVBQVN4VCxHQUFRLE9BQU9BLEVBQzdCLElBQUlxVSxFQUFJQyxFQUNSLEdBQUlGLEdBQW9ELG1CQUF4QkMsRUFBS3JVLEVBQU1DLFlBQTRCdVQsRUFBU2MsRUFBTUQsRUFBRzFjLEtBQUtxSSxJQUFTLE9BQU9zVSxFQUM5RyxHQUFtQyxtQkFBdkJELEVBQUtyVSxFQUFNdVUsV0FBMkJmLEVBQVNjLEVBQU1ELEVBQUcxYyxLQUFLcUksSUFBUyxPQUFPc1UsRUFDekYsSUFBS0YsR0FBb0QsbUJBQXhCQyxFQUFLclUsRUFBTUMsWUFBNEJ1VCxFQUFTYyxFQUFNRCxFQUFHMWMsS0FBS3FJLElBQVMsT0FBT3NVLEVBQy9HLE1BQU1uSSxVQUFVLDZDLGdCQ1psQixJQUFJMEcsRUFBYyxFQUFRLEdBQ3RCckgsRUFBUSxFQUFRLEdBQ2hCaEosRUFBZ0IsRUFBUSxJQUc1QmpMLEVBQU9ELFNBQVd1YixJQUFnQnJILEdBQU0sV0FDdEMsT0FFUSxHQUZEdFQsT0FBT0MsZUFBZXFLLEVBQWMsT0FBUSxJQUFLLENBQ3REbkssSUFBSyxXQUFjLE9BQU8sS0FDekJtYyxNLGdCQ1JMLElBQUl4VixFQUFTLEVBQVEsR0FDakJ3VSxFQUFXLEVBQVEsSUFFbkJuWCxFQUFXMkMsRUFBTzNDLFNBRWxCb1ksRUFBU2pCLEVBQVNuWCxJQUFhbVgsRUFBU25YLEVBQVNtRyxlQUVyRGpMLEVBQU9ELFFBQVUsU0FBVXVILEdBQ3pCLE9BQU80VixFQUFTcFksRUFBU21HLGNBQWMzRCxHQUFNLEssZ0JDUi9DLElBQUk2VixFQUFRLEVBQVEsSUFFaEJDLEVBQW1CMVYsU0FBU2dCLFNBR0UsbUJBQXZCeVUsRUFBTUUsZ0JBQ2ZGLEVBQU1FLGNBQWdCLFNBQVUvVixHQUM5QixPQUFPOFYsRUFBaUJoZCxLQUFLa0gsS0FJakN0SCxFQUFPRCxRQUFVb2QsRUFBTUUsZSxnQkNYdkIsSUFBSTVWLEVBQVMsRUFBUSxHQUNqQjZWLEVBQVksRUFBUSxJQUVwQkMsRUFBUyxxQkFDVEosRUFBUTFWLEVBQU84VixJQUFXRCxFQUFVQyxFQUFRLElBRWhEdmQsRUFBT0QsUUFBVW9kLEcsZ0JDTmpCLElBQUlLLEVBQVMsRUFBUSxJQUNqQkMsRUFBTSxFQUFRLElBRWRqYixFQUFPZ2IsRUFBTyxRQUVsQnhkLEVBQU9ELFFBQVUsU0FBVXlCLEdBQ3pCLE9BQU9nQixFQUFLaEIsS0FBU2dCLEVBQUtoQixHQUFPaWMsRUFBSWpjLE0sZ0JDTnZDLElBQUlrYyxFQUFVLEVBQVEsSUFDbEJQLEVBQVEsRUFBUSxLQUVuQm5kLEVBQU9ELFFBQVUsU0FBVXlCLEVBQUtOLEdBQy9CLE9BQU9pYyxFQUFNM2IsS0FBUzJiLEVBQU0zYixRQUFpQmtRLElBQVZ4USxFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUlxSixLQUFLLENBQ3RCb1QsUUFBUyxRQUNUdmMsS0FBTXNjLEVBQVUsT0FBUyxTQUN6QkUsVUFBVywwQyxjQ1JiLElBQUlsYSxFQUFLLEVBQ0xtYSxFQUFVamEsS0FBS0MsU0FFbkI3RCxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixNQUFPLFVBQVlrVCxZQUFlaEQsSUFBUmxRLEVBQW9CLEdBQUtBLEdBQU8sUUFBVWtDLEVBQUttYSxHQUFTblYsU0FBUyxNLGdCQ0o3RixJQUFJb1YsRUFBTyxFQUFRLElBQ2ZyVyxFQUFTLEVBQVEsR0FFakJzVyxFQUFZLFNBQVVDLEdBQ3hCLE1BQTBCLG1CQUFaQSxFQUF5QkEsT0FBV3RNLEdBR3BEMVIsRUFBT0QsUUFBVSxTQUFVa2UsRUFBV3pGLEdBQ3BDLE9BQU94UixVQUFVcUIsT0FBUyxFQUFJMFYsRUFBVUQsRUFBS0csS0FBZUYsRUFBVXRXLEVBQU93VyxJQUN6RUgsRUFBS0csSUFBY0gsRUFBS0csR0FBV3pGLElBQVcvUSxFQUFPd1csSUFBY3hXLEVBQU93VyxHQUFXekYsSyxnQkNUM0YsSUFBSU4sRUFBTSxFQUFRLEdBQ2RxRSxFQUFrQixFQUFRLElBQzFCL0gsRUFBVSxFQUFRLElBQStCQSxRQUNqRDBKLEVBQWEsRUFBUSxJQUV6QmxlLEVBQU9ELFFBQVUsU0FBVTRCLEVBQVF3YyxHQUNqQyxJQUdJM2MsRUFIQXNhLEVBQUlTLEVBQWdCNWEsR0FDcEIxQixFQUFJLEVBQ0prSSxFQUFTLEdBRWIsSUFBSzNHLEtBQU9zYSxHQUFJNUQsRUFBSWdHLEVBQVkxYyxJQUFRMFcsRUFBSTRELEVBQUd0YSxJQUFRMkcsRUFBT29DLEtBQUsvSSxHQUVuRSxLQUFPMmMsRUFBTTlWLE9BQVNwSSxHQUFPaVksRUFBSTRELEVBQUd0YSxFQUFNMmMsRUFBTWxlLFNBQzdDdVUsRUFBUXJNLEVBQVEzRyxJQUFRMkcsRUFBT29DLEtBQUsvSSxJQUV2QyxPQUFPMkcsSSxnQkNmVCxJQUFJb1UsRUFBa0IsRUFBUSxJQUMxQjZCLEVBQVcsRUFBUSxJQUNuQkMsRUFBa0IsRUFBUSxJQUcxQkMsRUFBZSxTQUFVQyxHQUMzQixPQUFPLFNBQVVDLEVBQU92VSxFQUFJd1UsR0FDMUIsSUFHSXZkLEVBSEE0YSxFQUFJUyxFQUFnQmlDLEdBQ3BCblcsRUFBUytWLEVBQVN0QyxFQUFFelQsUUFDcEJDLEVBQVErVixFQUFnQkksRUFBV3BXLEdBSXZDLEdBQUlrVyxHQUFldFUsR0FBTUEsR0FBSSxLQUFPNUIsRUFBU0MsR0FHM0MsSUFGQXBILEVBQVE0YSxFQUFFeFQsT0FFR3BILEVBQU8sT0FBTyxPQUV0QixLQUFNbUgsRUFBU0MsRUFBT0EsSUFDM0IsSUFBS2lXLEdBQWVqVyxLQUFTd1QsSUFBTUEsRUFBRXhULEtBQVcyQixFQUFJLE9BQU9zVSxHQUFlalcsR0FBUyxFQUNuRixPQUFRaVcsSUFBZ0IsSUFJOUJ2ZSxFQUFPRCxRQUFVLENBR2Y2RyxTQUFVMFgsR0FBYSxHQUd2QjlKLFFBQVM4SixHQUFhLEssY0M5QnhCLElBQUlJLEVBQU85YSxLQUFLOGEsS0FDWkMsRUFBUS9hLEtBQUsrYSxNQUlqQjNlLEVBQU9ELFFBQVUsU0FBVTZlLEdBQ3pCLE9BQU9DLE1BQU1ELEdBQVlBLEdBQVksR0FBS0EsRUFBVyxFQUFJRCxFQUFRRCxHQUFNRSxLLGdCQ056RSxJQUFJM0ssRUFBUSxFQUFRLEdBRXBCalUsRUFBT0QsVUFBWVksT0FBT21lLHdCQUEwQjdLLEdBQU0sV0FHeEQsT0FBUVMsT0FBTzFULGMsaUJDTGpCLElBQUl5RyxFQUFTLEVBQVEsR0FDakJnVixFQUEyQixFQUFRLElBQW1EaEIsRUFDdEZXLEVBQThCLEVBQVEsSUFDdEMyQyxFQUFXLEVBQVEsSUFDbkJ6QixFQUFZLEVBQVEsSUFDcEIwQixFQUE0QixFQUFRLElBQ3BDQyxFQUFXLEVBQVEsSUFnQnZCamYsRUFBT0QsUUFBVSxTQUFVMEssRUFBU0QsR0FDbEMsSUFHWXNJLEVBQVF0UixFQUFLMGQsRUFBZ0JDLEVBQWdCQyxFQUhyREMsRUFBUzVVLEVBQVFxSSxPQUNqQndNLEVBQVM3VSxFQUFRaEQsT0FDakI4WCxFQUFTOVUsRUFBUStVLEtBU3JCLEdBTkUxTSxFQURFd00sRUFDTzdYLEVBQ0E4WCxFQUNBOVgsRUFBTzRYLElBQVcvQixFQUFVK0IsRUFBUSxLQUVuQzVYLEVBQU80WCxJQUFXLElBQUl4ZCxVQUV0QixJQUFLTCxLQUFPZ0osRUFBUSxDQVE5QixHQVBBMlUsRUFBaUIzVSxFQUFPaEosR0FHdEIwZCxFQUZFelUsRUFBUWdWLGFBQ1ZMLEVBQWEzQyxFQUF5QjNKLEVBQVF0UixLQUNmNGQsRUFBV2xlLE1BQ3BCNFIsRUFBT3RSLElBQ3RCeWQsRUFBU0ssRUFBUzlkLEVBQU02ZCxHQUFVRSxFQUFTLElBQU0sS0FBTy9kLEVBQUtpSixFQUFRaVYsY0FFNUNoTyxJQUFuQndOLEVBQThCLENBQzNDLFVBQVdDLFVBQTBCRCxFQUFnQixTQUNyREYsRUFBMEJHLEVBQWdCRCxJQUd4Q3pVLEVBQVFrVixNQUFTVCxHQUFrQkEsRUFBZVMsT0FDcER2RCxFQUE0QitDLEVBQWdCLFFBQVEsR0FHdERKLEVBQVNqTSxFQUFRdFIsRUFBSzJkLEVBQWdCMVUsTSxnQkNuRDFDLElBQUltVixFQUFrQixFQUFRLElBQzFCcmUsRUFBUyxFQUFRLElBQ2pCZ2EsRUFBdUIsRUFBUSxJQUUvQnNFLEVBQWNELEVBQWdCLGVBQzlCRSxFQUFpQnpLLE1BQU14VCxVQUlRNlAsTUFBL0JvTyxFQUFlRCxJQUNqQnRFLEVBQXFCRSxFQUFFcUUsRUFBZ0JELEVBQWEsQ0FDbERsRCxjQUFjLEVBQ2R6YixNQUFPSyxFQUFPLFFBS2xCdkIsRUFBT0QsUUFBVSxTQUFVeUIsR0FDekJzZSxFQUFlRCxHQUFhcmUsSUFBTyxJLGdCQ2xCckMsSUFBSThaLEVBQWMsRUFBUSxHQUN0QnJILEVBQVEsRUFBUSxHQUNoQmlFLEVBQU0sRUFBUSxHQUVkdFgsRUFBaUJELE9BQU9DLGVBQ3hCbWYsRUFBUSxHQUVSQyxFQUFVLFNBQVUxWSxHQUFNLE1BQU1BLEdBRXBDdEgsRUFBT0QsUUFBVSxTQUFVa2dCLEVBQWF4VixHQUN0QyxHQUFJeU4sRUFBSTZILEVBQU9FLEdBQWMsT0FBT0YsRUFBTUUsR0FDckN4VixJQUFTQSxFQUFVLElBQ3hCLElBQUkrTixFQUFTLEdBQUd5SCxHQUNaQyxJQUFZaEksRUFBSXpOLEVBQVMsY0FBZUEsRUFBUXlWLFVBQ2hEQyxFQUFZakksRUFBSXpOLEVBQVMsR0FBS0EsRUFBUSxHQUFLdVYsRUFDM0NJLEVBQVlsSSxFQUFJek4sRUFBUyxHQUFLQSxFQUFRLFFBQUtpSCxFQUUvQyxPQUFPcU8sRUFBTUUsS0FBaUJ6SCxJQUFXdkUsR0FBTSxXQUM3QyxHQUFJaU0sSUFBYzVFLEVBQWEsT0FBTyxFQUN0QyxJQUFJUSxFQUFJLENBQUV6VCxRQUFTLEdBRWY2WCxFQUFXdGYsRUFBZWtiLEVBQUcsRUFBRyxDQUFFamIsWUFBWSxFQUFNQyxJQUFLa2YsSUFDeERsRSxFQUFFLEdBQUssRUFFWnRELEVBQU9wWSxLQUFLMGIsRUFBR3FFLEVBQVdDLFEsZ0JDeEI5QixJQUFJM1ksRUFBUyxFQUFRLEdBQ2pCaEcsRUFBTyxFQUFRLElBRWZyQixFQUFPc0gsU0FBU3RILEtBRXBCSixFQUFPRCxRQUFVLFNBQVVzZ0IsRUFBYUMsRUFBUWpZLEdBQzlDLE9BQU81RyxFQUFLckIsRUFBTXFILEVBQU80WSxHQUFheGUsVUFBVXllLEdBQVNqWSxLLGlCQ04zRCxJQUFJNEwsRUFBUSxFQUFRLEdBQ2hCc00sRUFBVSxFQUFRLElBRWxCdkgsRUFBUSxHQUFHQSxNQUdmaFosRUFBT0QsUUFBVWtVLEdBQU0sV0FHckIsT0FBUXRULE9BQU8sS0FBSzZmLHFCQUFxQixNQUN0QyxTQUFVbFosR0FDYixNQUFzQixVQUFmaVosRUFBUWpaLEdBQWtCMFIsRUFBTTVZLEtBQUtrSCxFQUFJLElBQU0zRyxPQUFPMkcsSUFDM0QzRyxRLGNDWkosSUFBSStILEVBQVcsR0FBR0EsU0FFbEIxSSxFQUFPRCxRQUFVLFNBQVV1SCxHQUN6QixPQUFPb0IsRUFBU3RJLEtBQUtrSCxHQUFJcUIsTUFBTSxHQUFJLEssY0NEckMzSSxFQUFPRCxRQUFVLFNBQVV1SCxHQUN6QixHQUFVb0ssTUFBTnBLLEVBQWlCLE1BQU1zTixVQUFVLHdCQUEwQnROLEdBQy9ELE9BQU9BLEksZ0JDSlQsSUFBSW1aLEVBQVksRUFBUSxJQUVwQjFOLEVBQU1uUCxLQUFLbVAsSUFJZi9TLEVBQU9ELFFBQVUsU0FBVTZlLEdBQ3pCLE9BQU9BLEVBQVcsRUFBSTdMLEVBQUkwTixFQUFVN0IsR0FBVyxrQkFBb0IsSSxnQkNQckUsSUFBSWIsRUFBWSxFQUFRLElBR3hCL2QsRUFBT0QsUUFBVSxTQUFVK2MsRUFBSTRELEVBQU1yWSxHQUVuQyxHQURBMFYsRUFBVWpCLFFBQ0dwTCxJQUFUZ1AsRUFBb0IsT0FBTzVELEVBQy9CLE9BQVF6VSxHQUNOLEtBQUssRUFBRyxPQUFPLFdBQ2IsT0FBT3lVLEVBQUcxYyxLQUFLc2dCLElBRWpCLEtBQUssRUFBRyxPQUFPLFNBQVV6RCxHQUN2QixPQUFPSCxFQUFHMWMsS0FBS3NnQixFQUFNekQsSUFFdkIsS0FBSyxFQUFHLE9BQU8sU0FBVUEsRUFBRzBELEdBQzFCLE9BQU83RCxFQUFHMWMsS0FBS3NnQixFQUFNekQsRUFBRzBELElBRTFCLEtBQUssRUFBRyxPQUFPLFNBQVUxRCxFQUFHMEQsRUFBR3JnQixHQUM3QixPQUFPd2MsRUFBRzFjLEtBQUtzZ0IsRUFBTXpELEVBQUcwRCxFQUFHcmdCLElBRy9CLE9BQU8sV0FDTCxPQUFPd2MsRUFBRzhELE1BQU1GLEVBQU0xWixjLGdCQ3JCMUIsSUFBSVMsRUFBUyxFQUFRLEdBQ2pCK1YsRUFBUyxFQUFRLElBQ2pCdEYsRUFBTSxFQUFRLEdBQ2R1RixFQUFNLEVBQVEsSUFDZG9ELEVBQWdCLEVBQVEsSUFDeEJDLEVBQW9CLEVBQVEsSUFFNUJDLEVBQXdCdkQsRUFBTyxPQUMvQnhjLEVBQVN5RyxFQUFPekcsT0FDaEJnZ0IsRUFBd0JGLEVBQW9COWYsRUFBU0EsR0FBVUEsRUFBT2lnQixlQUFpQnhELEVBRTNGemQsRUFBT0QsUUFBVSxTQUFVUyxHQUl2QixPQUhHMFgsRUFBSTZJLEVBQXVCdmdCLEtBQzFCcWdCLEdBQWlCM0ksRUFBSWxYLEVBQVFSLEdBQU91Z0IsRUFBc0J2Z0IsR0FBUVEsRUFBT1IsR0FDeEV1Z0IsRUFBc0J2Z0IsR0FBUXdnQixFQUFzQixVQUFZeGdCLElBQzlEdWdCLEVBQXNCdmdCLEssaUJDZmpDLGtCQVFtQjBnQixJQUlYLFdBQWUsYUFNdkIsU0FBU0MsRUFBV0MsR0FDbEIsTUFBb0IsbUJBQU5BLEVBR2hCLElBU0k5TCxFQVJDRCxNQUFNQyxRQUtFRCxNQUFNQyxRQUpOLFNBQVU4TCxHQUNuQixNQUE2QyxtQkFBdEN6Z0IsT0FBT2tCLFVBQVU2RyxTQUFTdEksS0FBS2doQixJQVF0Q0MsRUFBTSxFQUNOQyxPQUFZNVAsRUFDWjZQLE9BQW9CN1AsRUFFcEI4UCxFQUFPLFNBQWNySixFQUFVc0osR0FDakNDLEVBQU1MLEdBQU9sSixFQUNidUosRUFBTUwsRUFBTSxHQUFLSSxFQUVMLEtBRFpKLEdBQU8sS0FLREUsRUFDRkEsRUFBa0JJLEdBRWxCQyxNQWFGQyxFQUFrQyxvQkFBWDVmLE9BQXlCQSxZQUFTeVAsRUFDekRvUSxFQUFnQkQsR0FBaUIsR0FDakNFLEVBQTBCRCxFQUFjRSxrQkFBb0JGLEVBQWNHLHVCQUMxRXRhLEVBQXlCLG9CQUFUckYsV0FBMkMsSUFBWjhILEdBQTJELHFCQUFoQyxHQUFLMUIsU0FBU3RJLEtBQUtnSyxHQUc3RjhYLEVBQXdDLG9CQUF0QkMsbUJBQThELG9CQUFsQkMsZUFBMkQsb0JBQW5CQyxlQXNDMUcsU0FBU0MsSUFHUCxJQUFJQyxFQUFtQkMsV0FDdkIsT0FBTyxXQUNMLE9BQU9ELEVBQWlCWixFQUFPLElBSW5DLElBQUlELEVBQVEsSUFBSXJNLE1BQU0sS0FDdEIsU0FBU3NNLElBQ1AsSUFBSyxJQUFJMWhCLEVBQUksRUFBR0EsRUFBSW9oQixFQUFLcGhCLEdBQUssR0FJNUJrWSxFQUhldUosRUFBTXpoQixJQUNYeWhCLEVBQU16aEIsRUFBSSxJQUlwQnloQixFQUFNemhCLFFBQUt5UixFQUNYZ1EsRUFBTXpoQixFQUFJLFFBQUt5UixFQUdqQjJQLEVBQU0sRUFjUixJQTFDTW9CLEVBWkFDLEVBQ0FDLEVBQ0FDLEVBb0RGaEIsT0FBZ0JsUSxFQWNwQixTQUFTeEwsRUFBSzJjLEVBQWVDLEdBQzNCLElBQUlDLEVBQWEvYixVQUViZ2MsRUFBU3ZaLEtBRVR3WixFQUFRLElBQUl4WixLQUFLb1EsWUFBWXFKLFFBRVB4UixJQUF0QnVSLEVBQU1FLElBQ1JDLEVBQVlILEdBR2QsSUFJUTlLLEVBSkprTCxFQUFTTCxFQUFPSyxPQWFwQixPQVhJQSxHQUVJbEwsRUFBVzRLLEVBQVdNLEVBQVMsR0FDbkM3QixHQUFLLFdBQ0gsT0FBTzhCLEVBQWVELEVBQVFKLEVBQU85SyxFQUFVNkssRUFBT08sYUFJMURDLEVBQVVSLEVBQVFDLEVBQU9KLEVBQWVDLEdBR25DRyxFQWtDVCxTQUFTbE4sRUFBUXBVLEdBSWYsR0FBSUEsR0FBNEIsaUJBQVhBLEdBQXVCQSxFQUFPa1ksY0FGakNwUSxLQUdoQixPQUFPOUgsRUFHVCxJQUFJeVUsRUFBVSxJQU5JM00sS0FNWXlaLEdBRTlCLE9BREFPLEVBQVNyTixFQUFTelUsR0FDWHlVLEVBaEZMek8sRUFDRmlhLEVBdEVPLFdBQ0wsT0FBT3hYLEVBQVFzWixTQUFTL0IsSUFzRWpCSSxHQTFETFcsRUFBYSxFQUNiQyxFQUFXLElBQUlaLEVBQXdCSixHQUN2Q2lCLEVBQU85ZCxTQUFTNmUsZUFBZSxJQUNuQ2hCLEVBQVNpQixRQUFRaEIsRUFBTSxDQUFFaUIsZUFBZSxJQXdEeENqQyxFQXRETyxXQUNMZ0IsRUFBS2paLEtBQU8rWSxJQUFlQSxFQUFhLElBc0RqQ1IsSUFoRExPLEVBQVUsSUFBSUosZ0JBQ1Z5QixNQUFNQyxVQUFZcEMsRUFnRDFCQyxFQS9DTyxXQUNMLE9BQU9hLEVBQVF1QixNQUFNQyxZQUFZLEtBZ0RuQ3JDLE9BRDJCbFEsSUFBbEJtUSxFQW5CWCxXQUNFLElBQ0UsSUFDSXFDLEVBQVEsRUFBRSxJQUVkLE9BREE1QyxFQUFZNEMsRUFBTUMsV0FBYUQsRUFBTUUsYUFyRGhDLFdBQ0w5QyxFQUFVSyxJQXNEVixNQUFPN1gsR0FDUCxPQUFPd1ksS0FhTytCLEdBRUEvQixJQTBFbEIsSUFBSWEsRUFBYXZmLEtBQUtDLFNBQVM2RSxTQUFTLElBQUk0YixVQUFVLElBRXRELFNBQVNwQixLQUVULElBQUlxQixPQUFVLEVBSVZDLEVBQWlCLElBQUlDLEVBVXpCLFNBQVNDLEVBQVF0TyxHQUNmLElBQ0UsT0FBT0EsRUFBUWxRLEtBQ2YsTUFBT21ELEdBRVAsT0FEQW1iLEVBQWVuYixNQUFRQSxFQUNoQm1iLEdBdURYLFNBQVNHLEVBQW9Cdk8sRUFBU3dPLEVBQWVDLEdBQy9DRCxFQUFjL0ssY0FBZ0J6RCxFQUFReUQsYUFBZWdMLElBQVczZSxHQUFRMGUsRUFBYy9LLFlBQVk5RCxVQUFZQSxFQWZwSCxTQUEyQkssRUFBUzBPLEdBM0RwQixJQTREVkEsRUFBU3pCLE9BQ1gwQixFQUFRM08sRUFBUzBPLEVBQVN2QixTQTVEZixJQTZERnVCLEVBQVN6QixPQUNsQjJCLEVBQVE1TyxFQUFTME8sRUFBU3ZCLFNBRTFCQyxFQUFVc0IsT0FBVXBULEdBQVcsU0FBVXhRLEdBQ3ZDLE9BQU91aUIsRUFBU3JOLEVBQVNsVixNQUN4QixTQUFVK2pCLEdBQ1gsT0FBT0QsRUFBUTVPLEVBQVM2TyxNQU8xQkMsQ0FBa0I5TyxFQUFTd08sR0FFdkJDLElBQVdMLEVBQ2JRLEVBQVE1TyxFQUFTb08sRUFBZW5iLFlBQ1pxSSxJQUFYbVQsRUFDVEUsRUFBUTNPLEVBQVN3TyxHQUNSekQsRUFBVzBELEdBbkQxQixTQUErQnpPLEVBQVMwTyxFQUFVNWUsR0FDaERzYixHQUFLLFNBQVVwTCxHQUNiLElBQUkrTyxHQUFTLEVBQ1Q5YixFQVhSLFNBQWlCbkQsRUFBTWhGLEVBQU9ra0IsRUFBb0JDLEdBQ2hELElBQ0VuZixFQUFLOUYsS0FBS2MsRUFBT2trQixFQUFvQkMsR0FDckMsTUFBT3ZiLEdBQ1AsT0FBT0EsR0FPS3diLENBQVFwZixFQUFNNGUsR0FBVSxTQUFVNWpCLEdBQ3hDaWtCLElBR0pBLEdBQVMsRUFDTEwsSUFBYTVqQixFQUNmdWlCLEVBQVNyTixFQUFTbFYsR0FFbEI2akIsRUFBUTNPLEVBQVNsVixPQUVsQixTQUFVK2pCLEdBQ1BFLElBR0pBLEdBQVMsRUFFVEgsRUFBUTVPLEVBQVM2TyxNQUNGN08sRUFBUW1QLFNBRXBCSixHQUFVOWIsSUFDYjhiLEdBQVMsRUFDVEgsRUFBUTVPLEVBQVMvTSxNQUVsQitNLEdBMEJDb1AsQ0FBc0JwUCxFQUFTd08sRUFBZUMsR0FFOUNFLEVBQVEzTyxFQUFTd08sR0FLdkIsU0FBU25CLEVBQVNyTixFQUFTbFYsR0FqVDNCLElBQTBCa2dCLEVBa1RwQmhMLElBQVlsVixFQUNkOGpCLEVBQVE1TyxFQXJGSCxJQUFJeEIsVUFBVSw2Q0E3TkQsbUJBREl3TSxFQW9USWxnQixJQW5UbUIsaUJBQU5rZ0IsR0FBd0IsT0FBTkEsRUFvVHpEdUQsRUFBb0J2TyxFQUFTbFYsRUFBT3dqQixFQUFReGpCLElBRTVDNmpCLEVBQVEzTyxFQUFTbFYsR0FJckIsU0FBU3VrQixFQUFpQnJQLEdBQ3BCQSxFQUFRc1AsVUFDVnRQLEVBQVFzUCxTQUFTdFAsRUFBUW1OLFNBRzNCb0MsRUFBUXZQLEdBR1YsU0FBUzJPLEVBQVEzTyxFQUFTbFYsR0FDcEJrVixFQUFRaU4sU0FBV2tCLElBSXZCbk8sRUFBUW1OLFFBQVVyaUIsRUFDbEJrVixFQUFRaU4sT0FqSE0sRUFtSHNCLElBQWhDak4sRUFBUXdQLGFBQWF2ZCxRQUN2Qm1aLEVBQUttRSxFQUFTdlAsSUFJbEIsU0FBUzRPLEVBQVE1TyxFQUFTNk8sR0FDcEI3TyxFQUFRaU4sU0FBV2tCLElBR3ZCbk8sRUFBUWlOLE9BM0hLLEVBNEhiak4sRUFBUW1OLFFBQVUwQixFQUVsQnpELEVBQUtpRSxFQUFrQnJQLElBR3pCLFNBQVNvTixFQUFVUixFQUFRQyxFQUFPSixFQUFlQyxHQUMvQyxJQUFJOEMsRUFBZTVDLEVBQU80QyxhQUN0QnZkLEVBQVN1ZCxFQUFhdmQsT0FFMUIyYSxFQUFPMEMsU0FBVyxLQUVsQkUsRUFBYXZkLEdBQVU0YSxFQUN2QjJDLEVBQWF2ZCxFQXpJQyxHQXlJcUJ3YSxFQUNuQytDLEVBQWF2ZCxFQXpJQSxHQXlJcUJ5YSxFQUVuQixJQUFYemEsR0FBZ0IyYSxFQUFPSyxRQUN6QjdCLEVBQUttRSxFQUFTM0MsR0FJbEIsU0FBUzJDLEVBQVF2UCxHQUNmLElBQUl5UCxFQUFjelAsRUFBUXdQLGFBQ3RCRSxFQUFVMVAsRUFBUWlOLE9BRXRCLEdBQTJCLElBQXZCd0MsRUFBWXhkLE9BQWhCLENBUUEsSUFKQSxJQUFJNGEsT0FBUXZSLEVBQ1J5RyxPQUFXekcsRUFDWGhELEVBQVMwSCxFQUFRbU4sUUFFWnRqQixFQUFJLEVBQUdBLEVBQUk0bEIsRUFBWXhkLE9BQVFwSSxHQUFLLEVBQzNDZ2pCLEVBQVE0QyxFQUFZNWxCLEdBQ3BCa1ksRUFBVzBOLEVBQVk1bEIsRUFBSTZsQixHQUV2QjdDLEVBQ0ZLLEVBQWV3QyxFQUFTN0MsRUFBTzlLLEVBQVV6SixHQUV6Q3lKLEVBQVN6SixHQUliMEgsRUFBUXdQLGFBQWF2ZCxPQUFTLEdBR2hDLFNBQVNvYyxJQUNQaGIsS0FBS0osTUFBUSxLQUdmLElBQUkwYyxFQUFrQixJQUFJdEIsRUFXMUIsU0FBU25CLEVBQWV3QyxFQUFTMVAsRUFBUytCLEVBQVV6SixHQUNsRCxJQUFJc1gsRUFBYzdFLEVBQVdoSixHQUN6QmpYLE9BQVF3USxFQUNSckksT0FBUXFJLEVBQ1J1VSxPQUFZdlUsRUFDWndVLE9BQVN4VSxFQUViLEdBQUlzVSxHQVdGLElBVkE5a0IsRUFqQkosU0FBa0JpWCxFQUFVekosR0FDMUIsSUFDRSxPQUFPeUosRUFBU3pKLEdBQ2hCLE1BQU81RSxHQUVQLE9BREFpYyxFQUFnQjFjLE1BQVFTLEVBQ2pCaWMsR0FZQ0ksQ0FBU2hPLEVBQVV6SixNQUVicVgsR0FDWkcsR0FBUyxFQUNUN2MsRUFBUW5JLEVBQU1tSSxNQUNkbkksRUFBUSxNQUVSK2tCLEdBQVksRUFHVjdQLElBQVlsVixFQUVkLFlBREE4akIsRUFBUTVPLEVBbk1MLElBQUl4QixVQUFVLDhEQXVNbkIxVCxFQUFRd04sRUFDUnVYLEdBQVksRUFHVjdQLEVBQVFpTixTQUFXa0IsSUFFWnlCLEdBQWVDLEVBQ3RCeEMsRUFBU3JOLEVBQVNsVixHQUNUZ2xCLEVBQ1RsQixFQUFRNU8sRUFBUy9NLEdBMU5QLElBMk5EeWMsRUFDVGYsRUFBUTNPLEVBQVNsVixHQTNOUixJQTROQTRrQixHQUNUZCxFQUFRNU8sRUFBU2xWLElBZ0J2QixJQUFJd0MsRUFBSyxFQUtULFNBQVMwZixFQUFZaE4sR0FDbkJBLEVBQVErTSxHQUFjemYsSUFDdEIwUyxFQUFRaU4sWUFBUzNSLEVBQ2pCMEUsRUFBUW1OLGFBQVU3UixFQUNsQjBFLEVBQVF3UCxhQUFlLEdBR3pCLFNBQVNRLEVBQVdDLEVBQWE1ZCxHQUMvQmdCLEtBQUs2YyxxQkFBdUJELEVBQzVCNWMsS0FBSzJNLFFBQVUsSUFBSWlRLEVBQVluRCxHQUUxQnpaLEtBQUsyTSxRQUFRK00sSUFDaEJDLEVBQVkzWixLQUFLMk0sU0FHZmQsRUFBUTdNLElBQ1ZnQixLQUFLOGMsT0FBUzlkLEVBQ2RnQixLQUFLcEIsT0FBU0ksRUFBTUosT0FDcEJvQixLQUFLK2MsV0FBYS9kLEVBQU1KLE9BRXhCb0IsS0FBSzhaLFFBQVUsSUFBSWxPLE1BQU01TCxLQUFLcEIsUUFFVixJQUFoQm9CLEtBQUtwQixPQUNQMGMsRUFBUXRiLEtBQUsyTSxRQUFTM00sS0FBSzhaLFVBRTNCOVosS0FBS3BCLE9BQVNvQixLQUFLcEIsUUFBVSxFQUM3Qm9CLEtBQUtnZCxhQUNtQixJQUFwQmhkLEtBQUsrYyxZQUNQekIsRUFBUXRiLEtBQUsyTSxRQUFTM00sS0FBSzhaLFdBSS9CeUIsRUFBUXZiLEtBQUsyTSxRQUtSLElBQUkvUCxNQUFNLDRDQWlXbkIsU0FBU3NQLEVBQVErUSxHQUNmamQsS0FBSzBaLEdBMVlFemYsSUEyWVArRixLQUFLOFosUUFBVTlaLEtBQUs0WixZQUFTM1IsRUFDN0JqSSxLQUFLbWMsYUFBZSxHQUVoQjFDLElBQVN3RCxJQUNTLG1CQUFiQSxHQXJIWCxXQUNFLE1BQU0sSUFBSTlSLFVBQVUsc0ZBb0hnQitSLEdBQ2xDbGQsZ0JBQWdCa00sRUE5WnBCLFNBQTJCUyxFQUFTc1EsR0FDbEMsSUFDRUEsR0FBUyxTQUF3QnhsQixHQUMvQnVpQixFQUFTck4sRUFBU2xWLE1BQ2pCLFNBQXVCK2pCLEdBQ3hCRCxFQUFRNU8sRUFBUzZPLE1BRW5CLE1BQU9uYixHQUNQa2IsRUFBUTVPLEVBQVN0TSxJQXNaUzhjLENBQWtCbmQsS0FBTWlkLEdBbEh0RCxXQUNFLE1BQU0sSUFBSTlSLFVBQVUseUhBaUg0Q2lTLElBa1BsRSxTQUFTeEwsSUFDTCxJQUFJeUwsT0FBUXBWLEVBRVosUUFBc0IsSUFBWGpLLEVBQ1BxZixFQUFRcmYsT0FDTCxHQUFvQixvQkFBVG5GLEtBQ2R3a0IsRUFBUXhrQixVQUVSLElBQ0l3a0IsRUFBUXBmLFNBQVMsY0FBVEEsR0FDVixNQUFPb0MsR0FDTCxNQUFNLElBQUl6RCxNQUFNLDRFQUl4QixJQUFJMFYsRUFBSStLLEVBQU1uUixRQUVkLEdBQUlvRyxFQUFHLENBQ0gsSUFBSWdMLEVBQWtCLEtBQ3RCLElBQ0lBLEVBQWtCcG1CLE9BQU9rQixVQUFVNkcsU0FBU3RJLEtBQUsyYixFQUFFaEcsV0FDckQsTUFBT2pNLElBSVQsR0FBd0IscUJBQXBCaWQsSUFBMkNoTCxFQUFFaUwsS0FDN0MsT0FJUkYsRUFBTW5SLFFBQVVBLEVBUXBCLE9BN25CQXlRLEVBQVd2a0IsVUFBVTRrQixXQUFhLFdBSWhDLElBSEEsSUFBSXBlLEVBQVNvQixLQUFLcEIsT0FDZGtlLEVBQVM5YyxLQUFLOGMsT0FFVHRtQixFQUFJLEVBQUd3SixLQUFLNFosU0FBV2tCLEdBQVd0a0IsRUFBSW9JLEVBQVFwSSxJQUNyRHdKLEtBQUt3ZCxXQUFXVixFQUFPdG1CLEdBQUlBLElBSS9CbW1CLEVBQVd2a0IsVUFBVW9sQixXQUFhLFNBQVVDLEVBQU9qbkIsR0FDakQsSUFBSUssRUFBSW1KLEtBQUs2YyxxQkFDVGEsRUFBWTdtQixFQUFFeVYsUUFFbEIsR0FBSW9SLElBQWNwUixFQUFTLENBQ3pCLElBQUlxUixFQUFRMUMsRUFBUXdDLEdBRXBCLEdBQUlFLElBQVVsaEIsR0FBUWdoQixFQUFNN0QsU0FBV2tCLEVBQ3JDOWEsS0FBSzRkLFdBQVdILEVBQU03RCxPQUFRcGpCLEVBQUdpbkIsRUFBTTNELGNBQ2xDLEdBQXFCLG1CQUFWNkQsRUFDaEIzZCxLQUFLK2MsYUFDTC9jLEtBQUs4WixRQUFRdGpCLEdBQUtpbkIsT0FDYixHQUFJNW1CLElBQU1xVixFQUFTLENBQ3hCLElBQUlTLEVBQVUsSUFBSTlWLEVBQUU0aUIsR0FDcEJ5QixFQUFvQnZPLEVBQVM4USxFQUFPRSxHQUNwQzNkLEtBQUs2ZCxjQUFjbFIsRUFBU25XLFFBRTVCd0osS0FBSzZkLGNBQWMsSUFBSWhuQixHQUFFLFNBQVU2bUIsR0FDakMsT0FBT0EsRUFBVUQsTUFDZmpuQixRQUdOd0osS0FBSzZkLGNBQWNILEVBQVVELEdBQVFqbkIsSUFJekNtbUIsRUFBV3ZrQixVQUFVd2xCLFdBQWEsU0FBVWplLEVBQU9uSixFQUFHaUIsR0FDcEQsSUFBSWtWLEVBQVUzTSxLQUFLMk0sUUFFZkEsRUFBUWlOLFNBQVdrQixJQUNyQjlhLEtBQUsrYyxhQWpVTSxJQW1VUHBkLEVBQ0Y0YixFQUFRNU8sRUFBU2xWLEdBRWpCdUksS0FBSzhaLFFBQVF0akIsR0FBS2lCLEdBSUUsSUFBcEJ1SSxLQUFLK2MsWUFDUHpCLEVBQVEzTyxFQUFTM00sS0FBSzhaLFVBSTFCNkMsRUFBV3ZrQixVQUFVeWxCLGNBQWdCLFNBQVVsUixFQUFTblcsR0FDdEQsSUFBSXNuQixFQUFhOWQsS0FFakIrWixFQUFVcE4sT0FBUzFFLEdBQVcsU0FBVXhRLEdBQ3RDLE9BQU9xbUIsRUFBV0YsV0FwVk4sRUFvVjRCcG5CLEVBQUdpQixNQUMxQyxTQUFVK2pCLEdBQ1gsT0FBT3NDLEVBQVdGLFdBclZQLEVBcVY0QnBuQixFQUFHZ2xCLE9BOFM5Q3RQLEVBQVFyUSxJQTNQUixTQUFhK1MsR0FDWCxPQUFPLElBQUkrTixFQUFXM2MsS0FBTTRPLEdBQVNqQyxTQTJQdkNULEVBQVE2UixLQXZMUixTQUFjblAsR0FFWixJQUFJZ08sRUFBYzVjLEtBRWxCLE9BQUs2TCxFQUFRK0MsR0FLSixJQUFJZ08sR0FBWSxTQUFVdFEsRUFBU0gsR0FFeEMsSUFEQSxJQUFJdk4sRUFBU2dRLEVBQVFoUSxPQUNacEksRUFBSSxFQUFHQSxFQUFJb0ksRUFBUXBJLElBQzFCb21CLEVBQVl0USxRQUFRc0MsRUFBUXBZLElBQUlpRyxLQUFLNlAsRUFBU0gsTUFQM0MsSUFBSXlRLEdBQVksU0FBVW9CLEVBQUc3UixHQUNsQyxPQUFPQSxFQUFPLElBQUloQixVQUFVLHdDQWtMbENlLEVBQVFJLFFBQVVBLEVBQ2xCSixFQUFRQyxPQXJJUixTQUFnQnFQLEdBRWQsSUFDSTdPLEVBQVUsSUFESTNNLEtBQ1l5WixHQUU5QixPQURBOEIsRUFBUTVPLEVBQVM2TyxHQUNWN08sR0FpSVRULEVBQVErUixjQXp6QlIsU0FBc0JDLEdBQ3BCcEcsRUFBb0JvRyxHQXl6QnRCaFMsRUFBUWlTLFNBdHpCUixTQUFpQkMsR0FDZnJHLEVBQU9xRyxHQXN6QlRsUyxFQUFRbVMsTUFBUXRHLEVBRWhCN0wsRUFBUTlULFVBQVksQ0FDbEJnWSxZQUFhbEUsRUFtTWJ6UCxLQUFNQSxFQTZCTixNQUFTLFNBQWdCNGMsR0FDdkIsT0FBT3JaLEtBQUt2RCxLQUFLLEtBQU00YyxLQXFDM0J6SCxJQUVBMUYsRUFBUTBGLFNBQVdBLEVBQ25CMUYsRUFBUUEsUUFBVUEsRUFFWEEsR0FybkM0RDNWLEVBQU9ELFFBQVVtaEIsTSxzQ0NScEYsSUFPSTZHLEVBQ0FDLEVBUkE1ZCxFQUFVcEssRUFBT0QsUUFBVSxHQVUvQixTQUFTa29CLElBQ0wsTUFBTSxJQUFJNWhCLE1BQU0sbUNBRXBCLFNBQVM2aEIsSUFDTCxNQUFNLElBQUk3aEIsTUFBTSxxQ0FzQnBCLFNBQVM4aEIsRUFBV0MsR0FDaEIsR0FBSUwsSUFBcUJ2RixXQUVyQixPQUFPQSxXQUFXNEYsRUFBSyxHQUczQixJQUFLTCxJQUFxQkUsSUFBcUJGLElBQXFCdkYsV0FFaEUsT0FEQXVGLEVBQW1CdkYsV0FDWkEsV0FBVzRGLEVBQUssR0FFM0IsSUFFSSxPQUFPTCxFQUFpQkssRUFBSyxHQUMvQixNQUFNdGUsR0FDSixJQUVJLE9BQU9pZSxFQUFpQjNuQixLQUFLLEtBQU1nb0IsRUFBSyxHQUMxQyxNQUFNdGUsR0FFSixPQUFPaWUsRUFBaUIzbkIsS0FBS3FKLEtBQU0yZSxFQUFLLE1BdkNuRCxXQUNHLElBRVFMLEVBRHNCLG1CQUFmdkYsV0FDWUEsV0FFQXlGLEVBRXpCLE1BQU9uZSxHQUNMaWUsRUFBbUJFLEVBRXZCLElBRVFELEVBRHdCLG1CQUFqQkssYUFDY0EsYUFFQUgsRUFFM0IsTUFBT3BlLEdBQ0xrZSxFQUFxQkUsR0FqQjdCLEdBd0VBLElBRUlJLEVBRkE1RyxFQUFRLEdBQ1I2RyxHQUFXLEVBRVhDLEdBQWMsRUFFbEIsU0FBU0MsSUFDQUYsR0FBYUQsSUFHbEJDLEdBQVcsRUFDUEQsRUFBYWpnQixPQUNicVosRUFBUTRHLEVBQWFJLE9BQU9oSCxHQUU1QjhHLEdBQWMsRUFFZDlHLEVBQU1yWixRQUNOc2dCLEtBSVIsU0FBU0EsSUFDTCxJQUFJSixFQUFKLENBR0EsSUFBSUssRUFBVVQsRUFBV00sR0FDekJGLEdBQVcsRUFHWCxJQURBLElBQUlsSCxFQUFNSyxFQUFNclosT0FDVmdaLEdBQUssQ0FHUCxJQUZBaUgsRUFBZTVHLEVBQ2ZBLEVBQVEsS0FDQzhHLEVBQWFuSCxHQUNkaUgsR0FDQUEsRUFBYUUsR0FBWUssTUFHakNMLEdBQWMsRUFDZG5ILEVBQU1LLEVBQU1yWixPQUVoQmlnQixFQUFlLEtBQ2ZDLEdBQVcsRUFuRWYsU0FBeUJPLEdBQ3JCLEdBQUlkLElBQXVCSyxhQUV2QixPQUFPQSxhQUFhUyxHQUd4QixJQUFLZCxJQUF1QkUsSUFBd0JGLElBQXVCSyxhQUV2RSxPQURBTCxFQUFxQkssYUFDZEEsYUFBYVMsR0FFeEIsSUFFV2QsRUFBbUJjLEdBQzVCLE1BQU9oZixHQUNMLElBRUksT0FBT2tlLEVBQW1CNW5CLEtBQUssS0FBTTBvQixHQUN2QyxNQUFPaGYsR0FHTCxPQUFPa2UsRUFBbUI1bkIsS0FBS3FKLEtBQU1xZixLQWdEN0NDLENBQWdCSCxJQWlCcEIsU0FBU0ksRUFBS1osRUFBS2EsR0FDZnhmLEtBQUsyZSxJQUFNQSxFQUNYM2UsS0FBS3dmLE1BQVFBLEVBWWpCLFNBQVMvRixLQTVCVDlZLEVBQVFzWixTQUFXLFNBQVUwRSxHQUN6QixJQUFJcmhCLEVBQU8sSUFBSXNPLE1BQU1yTyxVQUFVcUIsT0FBUyxHQUN4QyxHQUFJckIsVUFBVXFCLE9BQVMsRUFDbkIsSUFBSyxJQUFJcEksRUFBSSxFQUFHQSxFQUFJK0csVUFBVXFCLE9BQVFwSSxJQUNsQzhHLEVBQUs5RyxFQUFJLEdBQUsrRyxVQUFVL0csR0FHaEN5aEIsRUFBTW5YLEtBQUssSUFBSXllLEVBQUtaLEVBQUtyaEIsSUFDSixJQUFqQjJhLEVBQU1yWixRQUFpQmtnQixHQUN2QkosRUFBV1EsSUFTbkJLLEVBQUtubkIsVUFBVWduQixJQUFNLFdBQ2pCcGYsS0FBSzJlLElBQUl4SCxNQUFNLEtBQU1uWCxLQUFLd2YsUUFFOUI3ZSxFQUFRZ0gsTUFBUSxVQUNoQmhILEVBQVE4ZSxTQUFVLEVBQ2xCOWUsRUFBUStlLElBQU0sR0FDZC9lLEVBQVFsQyxLQUFPLEdBQ2ZrQyxFQUFRdVQsUUFBVSxHQUNsQnZULEVBQVFnZixTQUFXLEdBSW5CaGYsRUFBUWlmLEdBQUtuRyxFQUNiOVksRUFBUWtmLFlBQWNwRyxFQUN0QjlZLEVBQVFtZixLQUFPckcsRUFDZjlZLEVBQVFvZixJQUFNdEcsRUFDZDlZLEVBQVFxZixlQUFpQnZHLEVBQ3pCOVksRUFBUXNmLG1CQUFxQnhHLEVBQzdCOVksRUFBUXVmLEtBQU96RyxFQUNmOVksRUFBUXdmLGdCQUFrQjFHLEVBQzFCOVksRUFBUXlmLG9CQUFzQjNHLEVBRTlCOVksRUFBUTBmLFVBQVksU0FBVXRwQixHQUFRLE1BQU8sSUFFN0M0SixFQUFRMmYsUUFBVSxTQUFVdnBCLEdBQ3hCLE1BQU0sSUFBSTZGLE1BQU0scUNBR3BCK0QsRUFBUTRmLElBQU0sV0FBYyxNQUFPLEtBQ25DNWYsRUFBUTZmLE1BQVEsU0FBVUMsR0FDdEIsTUFBTSxJQUFJN2pCLE1BQU0sbUNBRXBCK0QsRUFBUStmLE1BQVEsV0FBYSxPQUFPLEksOENDdExwQyxJQUFJQyxFQUE2QixHQUFHNUoscUJBQ2hDL0QsRUFBMkI5YixPQUFPOGIseUJBR2xDNE4sRUFBYzVOLElBQTZCMk4sRUFBMkJocUIsS0FBSyxDQUFFa3FCLEVBQUcsR0FBSyxHQUl6RnZxQixFQUFRMGIsRUFBSTRPLEVBQWMsU0FBOEJFLEdBQ3RELElBQUluTCxFQUFhM0MsRUFBeUJoVCxLQUFNOGdCLEdBQ2hELFFBQVNuTCxHQUFjQSxFQUFXdmUsWUFDaEN1cEIsRyxnQkNaSixJQUFJM2lCLEVBQVMsRUFBUSxHQUNqQjJVLEVBQThCLEVBQVEsSUFDdENsRSxFQUFNLEVBQVEsR0FDZG9GLEVBQVksRUFBUSxJQUNwQkQsRUFBZ0IsRUFBUSxJQUN4Qm1OLEVBQXNCLEVBQVEsSUFFOUJDLEVBQW1CRCxFQUFvQjFwQixJQUN2QzRwQixFQUF1QkYsRUFBb0JHLFFBQzNDQyxFQUFXbFcsT0FBT0EsUUFBUXNFLE1BQU0sV0FFbkNoWixFQUFPRCxRQUFVLFNBQVUrYixFQUFHdGEsRUFBS04sRUFBT3VKLEdBQ3pDLElBQUlvZ0IsSUFBU3BnQixLQUFZQSxFQUFRb2dCLE9BQzdCQyxJQUFTcmdCLEtBQVlBLEVBQVE1SixXQUM3QjRlLElBQWNoVixLQUFZQSxFQUFRZ1YsWUFDbEIsbUJBQVR2ZSxJQUNTLGlCQUFQTSxHQUFvQjBXLEVBQUloWCxFQUFPLFNBQVNrYixFQUE0QmxiLEVBQU8sT0FBUU0sR0FDOUZrcEIsRUFBcUJ4cEIsR0FBT3NKLE9BQVNvZ0IsRUFBUy9TLEtBQW1CLGlCQUFQclcsRUFBa0JBLEVBQU0sS0FFaEZzYSxJQUFNclUsR0FJRW9qQixHQUVBcEwsR0FBZTNELEVBQUV0YSxLQUMzQnNwQixHQUFTLFVBRkZoUCxFQUFFdGEsR0FJUHNwQixFQUFRaFAsRUFBRXRhLEdBQU9OLEVBQ2hCa2IsRUFBNEJOLEVBQUd0YSxFQUFLTixJQVRuQzRwQixFQUFRaFAsRUFBRXRhLEdBQU9OLEVBQ2hCb2MsRUFBVTliLEVBQUtOLEtBVXJCd0csU0FBUzdGLFVBQVcsWUFBWSxXQUNqQyxNQUFzQixtQkFBUjRILE1BQXNCZ2hCLEVBQWlCaGhCLE1BQU1lLFFBQVU2UyxFQUFjNVQsVSxnQkNoQ3JGLElBU0k1RSxFQUFLL0QsRUFBS29YLEVBVFY2UyxFQUFrQixFQUFRLElBQzFCdGpCLEVBQVMsRUFBUSxHQUNqQndVLEVBQVcsRUFBUSxJQUNuQkcsRUFBOEIsRUFBUSxJQUN0QzRPLEVBQVksRUFBUSxHQUNwQkMsRUFBWSxFQUFRLElBQ3BCL00sRUFBYSxFQUFRLElBRXJCZ04sRUFBVXpqQixFQUFPeWpCLFFBZ0JyQixHQUFJSCxFQUFpQixDQUNuQixJQUFJNU4sRUFBUSxJQUFJK04sRUFDWkMsRUFBUWhPLEVBQU1yYyxJQUNkc3FCLEVBQVFqTyxFQUFNakYsSUFDZG1ULEVBQVFsTyxFQUFNdFksSUFDbEJBLEVBQU0sU0FBVXlDLEVBQUlxRCxHQUVsQixPQURBMGdCLEVBQU1qckIsS0FBSytjLEVBQU83VixFQUFJcUQsR0FDZkEsR0FFVDdKLEVBQU0sU0FBVXdHLEdBQ2QsT0FBTzZqQixFQUFNL3FCLEtBQUsrYyxFQUFPN1YsSUFBTyxJQUVsQzRRLEVBQU0sU0FBVTVRLEdBQ2QsT0FBTzhqQixFQUFNaHJCLEtBQUsrYyxFQUFPN1YsUUFFdEIsQ0FDTCxJQUFJZ2tCLEVBQVFMLEVBQVUsU0FDdEIvTSxFQUFXb04sSUFBUyxFQUNwQnptQixFQUFNLFNBQVV5QyxFQUFJcUQsR0FFbEIsT0FEQXlSLEVBQTRCOVUsRUFBSWdrQixFQUFPM2dCLEdBQ2hDQSxHQUVUN0osRUFBTSxTQUFVd0csR0FDZCxPQUFPMGpCLEVBQVUxakIsRUFBSWdrQixHQUFTaGtCLEVBQUdna0IsR0FBUyxJQUU1Q3BULEVBQU0sU0FBVTVRLEdBQ2QsT0FBTzBqQixFQUFVMWpCLEVBQUlna0IsSUFJekJ0ckIsRUFBT0QsUUFBVSxDQUNmOEUsSUFBS0EsRUFDTC9ELElBQUtBLEVBQ0xvWCxJQUFLQSxFQUNMeVMsUUEvQ1ksU0FBVXJqQixHQUN0QixPQUFPNFEsRUFBSTVRLEdBQU14RyxFQUFJd0csR0FBTXpDLEVBQUl5QyxFQUFJLEtBK0NuQ2lrQixVQTVDYyxTQUFVQyxHQUN4QixPQUFPLFNBQVVsa0IsR0FDZixJQUFJOEIsRUFDSixJQUFLNlMsRUFBUzNVLEtBQVE4QixFQUFRdEksRUFBSXdHLElBQUt3QixPQUFTMGlCLEVBQzlDLE1BQU01VyxVQUFVLDBCQUE0QjRXLEVBQU8sYUFDbkQsT0FBT3BpQixNLGdCQ3BCYixJQUFJM0IsRUFBUyxFQUFRLEdBQ2pCNFYsRUFBZ0IsRUFBUSxJQUV4QjZOLEVBQVV6akIsRUFBT3lqQixRQUVyQmxyQixFQUFPRCxRQUE2QixtQkFBWm1yQixHQUEwQixjQUFjdlcsS0FBSzBJLEVBQWM2TixLLGNDTG5GbHJCLEVBQU9ELFNBQVUsRyxnQkNBakIsSUFBSW1ZLEVBQU0sRUFBUSxHQUNkdVQsRUFBVSxFQUFRLElBQ2xCQyxFQUFpQyxFQUFRLElBQ3pDblEsRUFBdUIsRUFBUSxJQUVuQ3ZiLEVBQU9ELFFBQVUsU0FBVStTLEVBQVF0SSxHQUlqQyxJQUhBLElBQUloSSxFQUFPaXBCLEVBQVFqaEIsR0FDZjVKLEVBQWlCMmEsRUFBcUJFLEVBQ3RDZ0IsRUFBMkJpUCxFQUErQmpRLEVBQ3JEeGIsRUFBSSxFQUFHQSxFQUFJdUMsRUFBSzZGLE9BQVFwSSxJQUFLLENBQ3BDLElBQUl1QixFQUFNZ0IsRUFBS3ZDLEdBQ1ZpWSxFQUFJcEYsRUFBUXRSLElBQU1aLEVBQWVrUyxFQUFRdFIsRUFBS2liLEVBQXlCalMsRUFBUWhKLE8sZ0JDWHhGLElBQUltcUIsRUFBYSxFQUFRLElBQ3JCQyxFQUE0QixFQUFRLElBQ3BDQyxFQUE4QixFQUFRLElBQ3RDbFEsRUFBVyxFQUFRLElBR3ZCM2IsRUFBT0QsUUFBVTRyQixFQUFXLFVBQVcsWUFBYyxTQUFpQnJrQixHQUNwRSxJQUFJOUUsRUFBT29wQixFQUEwQm5RLEVBQUVFLEVBQVNyVSxJQUM1Q3dYLEVBQXdCK00sRUFBNEJwUSxFQUN4RCxPQUFPcUQsRUFBd0J0YyxFQUFLa21CLE9BQU81SixFQUFzQnhYLElBQU85RSxJLGdCQ1QxRSxJQUFJaUYsRUFBUyxFQUFRLEdBRXJCekgsRUFBT0QsUUFBVTBILEcsZ0JDRmpCLElBQUlxa0IsRUFBcUIsRUFBUSxJQUc3QjVOLEVBRmMsRUFBUSxJQUVHd0ssT0FBTyxTQUFVLGFBSTlDM29CLEVBQVEwYixFQUFJOWEsT0FBTzZVLHFCQUF1QixTQUE2QnNHLEdBQ3JFLE9BQU9nUSxFQUFtQmhRLEVBQUdvQyxLLGdCQ1IvQixJQUFJdUMsRUFBWSxFQUFRLElBRXBCek4sRUFBTXBQLEtBQUtvUCxJQUNYRCxFQUFNblAsS0FBS21QLElBS2YvUyxFQUFPRCxRQUFVLFNBQVV1SSxFQUFPRCxHQUNoQyxJQUFJMGpCLEVBQVV0TCxFQUFVblksR0FDeEIsT0FBT3lqQixFQUFVLEVBQUkvWSxFQUFJK1ksRUFBVTFqQixFQUFRLEdBQUswSyxFQUFJZ1osRUFBUzFqQixLLGNDVi9EdEksRUFBUTBiLEVBQUk5YSxPQUFPbWUsdUIsZ0JDQW5CLElBQUk3SyxFQUFRLEVBQVEsR0FFaEIrWCxFQUFjLGtCQUVkL00sRUFBVyxTQUFVZ04sRUFBU0MsR0FDaEMsSUFBSWhyQixFQUFReUksRUFBS3dpQixFQUFVRixJQUMzQixPQUFPL3FCLEdBQVNrckIsR0FDWmxyQixHQUFTbXJCLElBQ1csbUJBQWJILEVBQTBCalksRUFBTWlZLEtBQ3JDQSxJQUdKQyxFQUFZbE4sRUFBU2tOLFVBQVksU0FBVUcsR0FDN0MsT0FBTzVYLE9BQU80WCxHQUFRdm5CLFFBQVFpbkIsRUFBYSxLQUFLcGpCLGVBRzlDZSxFQUFPc1YsRUFBU3RWLEtBQU8sR0FDdkIwaUIsRUFBU3BOLEVBQVNvTixPQUFTLElBQzNCRCxFQUFXbk4sRUFBU21OLFNBQVcsSUFFbkNwc0IsRUFBT0QsUUFBVWtmLEcsY0NwQmpCamYsRUFBT0QsUUFBVSxTQUFVdUgsR0FDekIsR0FBaUIsbUJBQU5BLEVBQ1QsTUFBTXNOLFVBQVVGLE9BQU9wTixHQUFNLHNCQUM3QixPQUFPQSxJLGdCQ0hYLElBQUl1WixFQUFnQixFQUFRLElBRTVCN2dCLEVBQU9ELFFBQVU4Z0IsSUFFWDdmLE9BQU8yZSxNQUVrQixpQkFBbkIzZSxPQUFPZ1UsVSxnQkNObkIsSUFtREl1WCxFQW5EQTVRLEVBQVcsRUFBUSxJQUNuQjZRLEVBQW1CLEVBQVEsSUFDM0JDLEVBQWMsRUFBUSxJQUN0QnZPLEVBQWEsRUFBUSxJQUNyQnBYLEVBQU8sRUFBUSxJQUNmNGxCLEVBQXdCLEVBQVEsSUFDaEN6QixFQUFZLEVBQVEsSUFNcEIwQixFQUFXMUIsRUFBVSxZQUVyQjJCLEVBQW1CLGFBRW5CQyxFQUFZLFNBQVVDLEdBQ3hCLE1BQU9DLFdBQW1CRCxFQUFuQkMsZ0JBbUNMQyxFQUFrQixXQUNwQixJQUVFVCxFQUFrQnpuQixTQUFTbW9CLFFBQVUsSUFBSUMsY0FBYyxZQUN2RCxNQUFPN2pCLElBMUJvQixJQUl6QjhqQixFQUZBQyxFQXlCSkosRUFBa0JULEVBcENZLFNBQVVBLEdBQ3hDQSxFQUFnQmMsTUFBTVIsRUFBVSxLQUNoQ04sRUFBZ0JlLFFBQ2hCLElBQUlDLEVBQU9oQixFQUFnQmlCLGFBQWE3c0IsT0FFeEMsT0FEQTRyQixFQUFrQixLQUNYZ0IsRUErQjZCRSxDQUEwQmxCLEtBekIxRGEsRUFBU1YsRUFBc0IsV0FHNUJ4WixNQUFNd2EsUUFBVSxPQUN2QjVtQixFQUFLd0UsWUFBWThoQixHQUVqQkEsRUFBT2xpQixJQUFNd0osT0FMSixnQkFNVHlZLEVBQWlCQyxFQUFPTyxjQUFjN29CLFVBQ3ZCK1YsT0FDZnNTLEVBQWVFLE1BQU1SLEVBQVUsc0JBQy9CTSxFQUFlRyxRQUNSSCxFQUFlUyxHQWdCdEIsSUFEQSxJQUFJdmxCLEVBQVNva0IsRUFBWXBrQixPQUNsQkEsWUFBaUIya0IsRUFBeUIsVUFBRVAsRUFBWXBrQixJQUMvRCxPQUFPMmtCLEtBR1Q5TyxFQUFXeU8sSUFBWSxFQUl2QjNzQixFQUFPRCxRQUFVWSxPQUFPWSxRQUFVLFNBQWdCdWEsRUFBRytSLEdBQ25ELElBQUkxbEIsRUFRSixPQVBVLE9BQU4yVCxHQUNGOFEsRUFBMEIsVUFBSWpSLEVBQVNHLEdBQ3ZDM1QsRUFBUyxJQUFJeWtCLEVBQ2JBLEVBQTBCLFVBQUksS0FFOUJ6a0IsRUFBT3drQixHQUFZN1EsR0FDZDNULEVBQVM2a0IsU0FDTXRiLElBQWZtYyxFQUEyQjFsQixFQUFTcWtCLEVBQWlCcmtCLEVBQVEwbEIsSyxnQkM1RXRFLElBQUl2UyxFQUFjLEVBQVEsR0FDdEJDLEVBQXVCLEVBQVEsSUFDL0JJLEVBQVcsRUFBUSxJQUNuQm1TLEVBQWEsRUFBUSxJQUl6Qjl0QixFQUFPRCxRQUFVdWIsRUFBYzNhLE9BQU82ckIsaUJBQW1CLFNBQTBCMVEsRUFBRytSLEdBQ3BGbFMsRUFBU0csR0FLVCxJQUpBLElBR0l0YSxFQUhBZ0IsRUFBT3NyQixFQUFXRCxHQUNsQnhsQixFQUFTN0YsRUFBSzZGLE9BQ2RDLEVBQVEsRUFFTEQsRUFBU0MsR0FBT2lULEVBQXFCRSxFQUFFSyxFQUFHdGEsRUFBTWdCLEVBQUs4RixLQUFVdWxCLEVBQVdyc0IsSUFDakYsT0FBT3NhLEksZ0JDZFQsSUFBSWdRLEVBQXFCLEVBQVEsSUFDN0JXLEVBQWMsRUFBUSxJQUkxQnpzQixFQUFPRCxRQUFVWSxPQUFPNkIsTUFBUSxTQUFjc1osR0FDNUMsT0FBT2dRLEVBQW1CaFEsRUFBRzJRLEssZ0JDTi9CLElBQUlkLEVBQWEsRUFBUSxJQUV6QjNyQixFQUFPRCxRQUFVNHJCLEVBQVcsV0FBWSxvQixjQ0Z4QzNyQixFQUFPRCxRQUFVLFNBQVNDLEdBb0J6QixPQW5CS0EsRUFBTyt0QixrQkFDWC90QixFQUFPZ3VCLFVBQVksYUFDbkJodUIsRUFBT2l1QixNQUFRLEdBRVZqdUIsRUFBT2t1QixXQUFVbHVCLEVBQU9rdUIsU0FBVyxJQUN4Q3Z0QixPQUFPQyxlQUFlWixFQUFRLFNBQVUsQ0FDdkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9FLEtBR2hCUyxPQUFPQyxlQUFlWixFQUFRLEtBQU0sQ0FDbkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9DLEtBR2hCRCxFQUFPK3RCLGdCQUFrQixHQUVuQi90QixJLGdCQ3BCUixFQUFRLElBQ1IsSUFBSW11QixFQUFjLEVBQVEsSUFFMUJudUIsRUFBT0QsUUFBVW91QixFQUFZLFFBQVMsYSw2QkNGdEMsSUFBSUMsRUFBSSxFQUFRLElBQ1pDLEVBQVksRUFBUSxJQUErQnpuQixTQUNuRDBuQixFQUFtQixFQUFRLElBTy9CRixFQUFFLENBQUV0YixPQUFRLFFBQVN5YixPQUFPLEVBQU03TyxRQU5KLEVBQVEsR0FFakI4TyxDQUF3QixVQUFXLENBQUV0TyxXQUFXLEVBQU1vSyxFQUFHLEtBSWpCLENBQzNEMWpCLFNBQVUsU0FBa0JxRCxHQUMxQixPQUFPb2tCLEVBQVU1a0IsS0FBTVEsRUFBSWpELFVBQVVxQixPQUFTLEVBQUlyQixVQUFVLFFBQUswSyxNQUtyRTRjLEVBQWlCLGEsczZDQ1hJRyxFLHNRQUVuQixXQUFZdHNCLEdBQU8sYSw0RkFBQSxVQUVqQixjQUFNQSxFQUFPLENBQ1h1c0IsV0FBWSxLQUNadHJCLElBQUssQ0FDSEMsSUFBSyxLQUNMQyxRQUFTLE1BRVhFLEtBQU0sR0FDTm1yQixxQkFBc0IsR0FDdEJDLHFCQUFzQixJQUN0QkMsaUJBQWtCLFNBQ2xCQyxVQUFXLEdBQ1g3bEIsWUFBYSxNQUdWdEcsT0FBT29zQixTQUFXLEVBQUtwc0IsT0FBT29zQixVQUFZLHlCQUEyQkMsbUJBQW1CbHFCLFNBQVNILFNBQVNzcUIsTUFFL0csRUFBSzdsQixNQUFRLENBQ1grSCxZQUFhLEVBQUt4TyxPQUFPd08sYUFBZSxHQUN4QzNILFNBQVMsRUFDVDBsQixRQUFRLEdBckJPLEUsb0RBMEJKdmxCLElBQ2JBLEVBQU9BLEdBQVEsSUFDTndILGNBQWF4SCxFQUFLSCxRQUFVQyxLQUFLMEgsWUFBWTNILFdBQ3REQyxLQUFLQyxTQUFTQyxLLGtDQUlkLElBQUlrbEIsRUFBbUJwbEIsS0FBSzlHLE9BQU9rc0IsaUJBQy9CcnJCLEVBQU9pRyxLQUFLdEgsTUFBTXFCLE1BQVEsR0FDOUIsT0FBT2tDLElBQXNCbEMsS0FBS2dELFFBQVFoRCxFQUFNcXJCLEssbUNBS2hELElBQUl2c0IsRUFBT21ILEtBRVhuSCxFQUFLb0gsU0FBUyxDQUFFd2xCLFFBQVEsSUFBUSxXQUc5QixHQURjNXNCLEVBQUs2TyxZQUFZdkgsU0FBUyxDQUFFK0csYUFBYSxJQUN2RCxDQUtBLElBQUtyTyxFQUFLNnNCLFlBQWEsT0FBT0MsTUFBTSx5QkFFcEMsSUFBSS9yQixFQUFNLEdBQUgsT0FBTWYsRUFBS0ssT0FBT1MsS0FBT2QsRUFBS0ssT0FBT1MsSUFBSUMsSUFBekMscUJBQThEZixFQUFLSyxPQUFPUSxPQUExRSxpQkFBNkZiLEVBQUtLLE9BQU8wc0IsT0FBekcsb0JBQWdJL3NCLEVBQUtLLE9BQU8rckIsV0FBWixXQUErQnBzQixFQUFLSyxPQUFPK3JCLFlBQWUsSUFDN0xwckIsRUFBVW9DLElBQXNCdEMsSUFBSXVDLFdBQVdyRCxFQUFLSyxRQUNwRDZWLEVBQVNsVyxFQUFLSyxPQUFPK3JCLFdBQWEsTUFBUSxPQUUxQ3JqQixFQUFPLENBQ1Rpa0IsU0FBVWh0QixFQUFLSyxPQUFPMnNCLFNBQ3RCQyxVQUFXanRCLEVBQUtLLE9BQU80c0IsVUFDdkJwZSxZQUFhN08sRUFBSzhHLE1BQU0rSCxhQUcxQmxMLE1BQU01QyxFQUFLLENBQ1RtVixTQUNBbFYsVUFDQStILEtBQU16SSxLQUFLMEIsVUFBVStHLEtBRXBCbkYsTUFBTSxTQUFTQyxHQUNkLEdBQUlBLEVBQVNDLEdBQ1gsT0FBT0QsRUFBU0csT0FFbEIsTUFBTUgsRUFBU3NSLFVBRWhCdlIsTUFBSyxTQUFTSSxHQUVzQixtQkFBeEJoRSxFQUFLSyxPQUFPNnNCLFVBQ3JCbHRCLEVBQUtLLE9BQU82c0IsU0FBUyxDQUFFcmUsWUFBYTdPLEVBQUs4RyxNQUFNK0gsY0FHakQ3TyxFQUFLb0gsU0FBUyxDQUFFeUgsWUFBYSxHQUFJK2QsUUFBUSxFQUFPMWxCLFNBQVMsSUFBUyxXQUloRSxHQUZBbEgsRUFBSzZPLFlBQVlwSCxlQUFlLENBQUU3SSxNQUFPLEtBRXJDb0IsRUFBS0ssT0FBTytyQixXQUFZLENBQzVCLElBQUk3YixFQUFRLElBQUk0YyxZQUFZLHNCQUF1QixDQUFFL2dCLE9BQVFwSSxJQUM3RHhCLFNBQVM0cUIsY0FBYzdjLE9BQ2hCLENBQ1AsSUFBSUEsRUFBUSxJQUFJNGMsWUFBWSwwQkFBMkIsQ0FBRS9nQixPQUFRcEksSUFDakV4QixTQUFTNHFCLGNBQWM3YyxVQTFCN0IsT0FnQ1MsU0FBU3hKLEdBQ2RBLEVBQU1uRCxNQUFLLFNBQVN5cEIsR0FBNkIsT0FBakJQLE1BQU1PLEdBQWtCNXBCLFFBQVFDLElBQUkycEIsTUFDcEVydEIsRUFBS29ILFNBQVMsQ0FBRXdsQixRQUFRLEVBQU8xbEIsU0FBUyxZQWxEMUNsSCxFQUFLb0gsU0FBUyxDQUFFd2xCLFFBQVEsRUFBTzFsQixTQUFTLFMsK0JBMkQ1QyxJQUFJbEgsRUFBT21ILEtBRVA5RyxFQUFTLENBQ1hnc0IscUJBQXNCcnNCLEVBQUtLLE9BQU9nc0Isc0JBQXdCLEdBQzFEQyxxQkFBc0J0c0IsRUFBS0ssT0FBT2lzQixzQkFBd0IsS0FHeERFLEVBQVksS0FDWnhzQixFQUFLSyxPQUFPbXNCLFlBQ2RBLEVBQ0UsMkJBQUs5ZixVQUFVLGFBQWExTSxFQUFLSyxPQUFPbXNCLFlBSTVDLElBQUljLEVBQW1CLEtBZXZCLE9BYkVBLEVBREV0dEIsRUFBSzZzQixZQUVMLDJCQUFLbmdCLFVBQVUsNkJBQ2hCLDhCQUFRcUUsUUFBUyxTQUFDdkosR0FBYXhILEVBQUs4RyxNQUFNOGxCLFFBQVE1c0IsRUFBS3V0QixjQUFpQjdnQixVQUFTLDBCQUFzQjFNLEVBQUs4RyxNQUFNSSxTQUFXbEgsRUFBSzhHLE1BQU04bEIsT0FBUyxnQkFBa0IsS0FBbkssY0FLQywyQkFBS2xnQixVQUFVLDZCQUNiLDhCQUFRcUUsUUFBUyxXQUFRM04sSUFBc0JELGFBQWFaLElBQUksK0JBQStCLEdBQU9DLFNBQVNILFNBQVNzcUIsS0FBTzNzQixFQUFLSyxPQUFPb3NCLFVBQWEvZixVQUFVLDRDQUFsSyxhQU1KLDJCQUFLdEwsR0FBSXBCLEVBQUttQixNQUFPdUwsVUFBVSxHQUFHaEYsSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLd08sU0FBVzdHLElBQzNENmtCLEVBQ0Qsb0JBQUMsSUFBdUJuYixpQkFBeEIsQ0FBeUN6SyxVQUFVTyxLQUFLMGxCLGFBQWMsS0FBYXhzQixPQUFRLENBQUVzTixVQUFXLFdBQVlDLFVBQVd2TixFQUFPZ3NCLHFCQUFzQnhlLFVBQVd4TixFQUFPaXNCLHFCQUFzQjNsQixZQUFhM0csRUFBS0ssT0FBT3NHLGFBQWUvSCxNQUFPb0IsRUFBSzhHLE1BQU0rSCxZQUFhN0gsU0FBVyxTQUFBSyxHQUFJLE9BQUlySCxFQUFLeUgsZUFBZSxDQUFFb0gsWUFBYXhILEVBQUt6SSxTQUFXOEksSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLNk8sWUFBY2xILEtBQy9XMmxCLFEsOEJBNUlrRDF0QixLLG80RENBdEM0dEIsRSxzUUFFbkIsV0FBWTN0QixHQUFPLGEsNEZBQUEsVUFFakIsY0FBTUEsRUFBTyxDQUNYZ0IsT0FBUSxLQUNSa3NCLE9BQVEsS0FDUmplLE1BQU8sS0FDUHVkLHFCQUFzQixHQUN0QkMscUJBQXNCLElBQ3RCeHJCLElBQUssQ0FDSEMsSUFBSyxLQUNMQyxRQUFTLE1BRVh1ckIsaUJBQWtCLFlBR2Z6bEIsTUFBUSxDQUNYNUYsS0FBTXJCLEVBQU1xQixLQUNadXNCLGNBQWMsRUFDZEMsbUJBQW1CLEVBQ25CQyxVQUFVLEdBbkJLLEUsdURBd0JEbnNCLEVBQVdDLEdBRTNCLElBQUl6QixFQUFPbUgsS0FFWG5ILEVBQUs0dEIsMEJBQTRCLFNBQVNyZCxHQUN4Q3ZRLEVBQUs2dEIsb0JBQW9CdGQsRUFBTW5FLFNBRWpDNUosU0FBUzJKLGlCQUFpQiwwQkFBMkJuTSxFQUFLNHRCLDJCQUUxRDV0QixFQUFLOHRCLHVCQUF5QixTQUFTdmQsR0FDckN2USxFQUFLK3RCLGlCQUFpQnhkLEVBQU1uRSxTQUU5QjVKLFNBQVMySixpQkFBaUIsc0JBQXVCbk0sRUFBSzh0QiwwQiw2Q0FLeER0ckIsU0FBU3FXLG9CQUFvQiwwQkFBMkIxUixLQUFLeW1CLDJCQUM3RHByQixTQUFTcVcsb0JBQW9CLHNCQUF1QjFSLEtBQUsybUIsMEIsaUNBSXZEM21CLEtBQUtDLFNBQVMsQ0FBRXFtQixjQUFjLE0sd0NBSTlCdG1CLEtBQUtDLFNBQVMsQ0FBRXNtQixtQkFBb0J2bUIsS0FBS0wsTUFBTTRtQixzQixxQ0FHbENNLEdBQ2I3bUIsS0FBS0MsU0FBUyxDQUFFdW1CLFVBQVd4bUIsS0FBS0wsTUFBTTZtQixhLGdDQUl0QyxPQUFPeG1CLEtBQUt0SCxNQUFNd0gsS0FBSzRtQixJQUFJQyxPLGtDQUkzQixPQUFPL21CLEtBQUt0SCxNQUFNd0gsS0FBSzRtQixJQUFoQixTLGdDQUlQLEdBQUk5bUIsS0FBSzlHLE9BQU84dEIsU0FBVSxPQUFPLEVBQ2pDLElBQUk1QixFQUFtQnBsQixLQUFLOUcsT0FBT2tzQixpQkFDL0Jub0IsRUFBVytDLEtBQUt0SCxNQUFNcUIsTUFBUWlHLEtBQUt0SCxNQUFNcUIsS0FBS21ELEtBQ2hELE1BQTZCLGFBQXBCa29CLEdBQW1Dbm9CLEdBQ3BCLFVBQXBCbW9CLElBQThDLFVBQVpub0IsR0FBb0MsVUFBWkEsR0FBb0MsYUFBWkEsR0FBdUMsU0FBWkEsSUFDekYsVUFBcEJtb0IsSUFBOEMsVUFBWm5vQixHQUFvQyxhQUFaQSxHQUF1QyxTQUFaQSxJQUNqRSxhQUFwQm1vQixJQUFpRCxhQUFabm9CLEdBQXVDLFNBQVpBLElBQzVDLFNBQXBCbW9CLEdBQTJDLFNBQVpub0IsSSxpQ0FJckMsT0FBTytDLEtBQUt0SCxNQUFNd0gsS0FBSzRtQixJQUFJRyxRLHFDQUszQixJQUFJcHVCLEVBQU9tSCxLQUVYLElBQUtuSCxFQUFLcXVCLFlBQWEsT0FBT3ZCLE1BQU0sd0NBRXBDLElBQUkvckIsRUFBTSxHQUFILE9BQU1mLEVBQUtLLE9BQU9TLEtBQU9kLEVBQUtLLE9BQU9TLElBQUlDLElBQXpDLHFCQUE4RGYsRUFBS0ssT0FBT1EsT0FBMUUsaUJBQTZGYixFQUFLSyxPQUFPMHNCLE9BQXpHLHFCQUFnSS9zQixFQUFLSCxNQUFNd0gsS0FBS2pHLElBQ25KSixFQUFVb0MsSUFBc0J0QyxJQUFJdUMsV0FBV3JELEVBQUtLLFFBSXhEc0QsTUFBTTVDLEVBQUssQ0FDVG1WLE9BQVEsU0FDUmxWLFVBQ0ErSCxLQUFNekksS0FBSzBCLFVBTEYsTUFPUjRCLE1BQU0sU0FBU0MsR0FDZCxHQUFJQSxFQUFTQyxHQUNYLE9BQU9ELEVBQVNHLE9BRWxCLE1BQU1ILEVBQVNzUixVQUVoQnZSLE1BQUssU0FBU0ksR0FDYmhFLEVBQUtvSCxTQUFTLENBQUVrbkIsV0FBVyxJQUU3QixJQUFJL2QsRUFBUSxJQUFJNGMsWUFBWSx1QkFBd0IsQ0FBRS9nQixPQUFRLENBQUUyZ0IsT0FBUS9zQixFQUFLSyxPQUFPMHNCLFVBQ3BGdnFCLFNBQVM0cUIsY0FBYzdjLE1BZnpCLE9Ba0JTLFNBQVN4SixHQUNkdEQsUUFBUUMsSUFBSXFELEdBQ1pBLEVBQU1uRCxNQUFLLFNBQVN5cEIsR0FBWSxPQUFPNXBCLFFBQVFDLElBQUkycEIsVyxtQ0FPdkQsSUFBSXJ0QixFQUFPbUgsS0FFWCxJQUFLbkgsRUFBS3V1QixVQUFXLE9BQU96QixNQUFNLGtDQUVsQyxJQUFJL3JCLEVBQU0sR0FBSCxPQUFNZixFQUFLSyxPQUFPUyxLQUFPZCxFQUFLSyxPQUFPUyxJQUFJQyxJQUF6QyxxQkFBOERmLEVBQUtLLE9BQU9RLE9BQTFFLGlCQUE2RmIsRUFBS0ssT0FBTzBzQixPQUF6RyxxQkFBZ0kvc0IsRUFBS0gsTUFBTXdILEtBQUtqRyxHQUFoSixTQUNISixFQUFVb0MsSUFBc0J0QyxJQUFJdUMsV0FBV3JELEVBQUtLLFFBSXhEc0QsTUFBTTVDLEVBQUssQ0FDVG1WLE9BQVEsT0FDUmxWLFVBQ0ErSCxLQUFNekksS0FBSzBCLFVBTEYsTUFPUjRCLE1BQU0sU0FBU0MsR0FDZCxHQUFJQSxFQUFTQyxHQUNYLE9BQU9ELEVBQVNHLE9BRWxCLE1BQU1ILEVBQVNzUixVQUVoQnZSLE1BQUssU0FBU0ksR0FFYmhFLEVBQUtvSCxTQUFTLENBQUVvbkIsSUFBS3hxQixFQUFLd3FCLElBQUtDLGFBQWN6cUIsRUFBS3lxQixrQkFidEQsT0FlUyxTQUFTMW5CLEdBQ2R0RCxRQUFRQyxJQUFJcUQsR0FDWkEsRUFBTW5ELE1BQUssU0FBU3lwQixHQUFZLE9BQU81cEIsUUFBUUMsSUFBSTJwQixXLDBDQUtyQ3FCLEdBQ2xCdm5CLEtBQUtDLFNBQVMsQ0FBRXFtQixjQUFjLEVBQU9DLG1CQUFtQixNLHVDQUd6Q2dCLEdBQ1hBLEVBQVN0dEIsSUFBTStGLEtBQUt0SCxNQUFNd0gsS0FBS2pHLElBQ2pDK0YsS0FBS0MsU0FBUyxDQUFFdW1CLFVBQVUsRUFBT0YsY0FBYyxNLCtCQU1qRCxJQUFJenRCLEVBQU9tSCxLQUNQRSxFQUFPckgsRUFBS0gsTUFBTXdILE1BQVEsQ0FBRTRtQixJQUFLLElBRXJDLEdBQUk1bUIsRUFBS2luQixVQUFXLE9BQU8sS0FFM0IsSUFBSUssRUFBVXZyQixJQUFzQmxDLEtBQUtnRCxRQUFRbUQsRUFBS25HLEtBQU0sVUFBWSxlQUFpQixHQUNyRjB0QixFQUFlLDJCQUFLbGlCLFVBQVMsNEJBQXVCaWlCLElBQVl0bkIsRUFBS25HLEtBQUsydEIsVUFBWXhuQixFQUFLbkcsS0FBSzR0QixVQUFoQyxVQUErQ3puQixFQUFLbkcsS0FBSzZ0QixVQUF6RCxZQUF5RTFuQixFQUFLbkcsS0FBSzh0QixXQUVuSkMsRUFBVyxLQUNWanZCLEVBQUtrdkIsV0FBYWx2QixFQUFLcXVCLGNBQzFCWSxFQUNFLDJCQUFLdmlCLFVBQVMsMkJBQTBCMU0sRUFBSzhHLE1BQU0ybUIsYUFBZSxpQ0FBbUMsSUFBTzFjLFFBQVUsV0FBUS9RLEVBQUttdkIsYUFDakkseUJBQUd6aUIsVUFBVSxzQkFBc0JvQyxNQUFNLHVCQUF1QmlDLFFBQVUsV0FBWXFlLFFBQVEsdUJBQXVCcHZCLEVBQUtxdkIsa0JBQzFILHlCQUFHM2lCLFVBQVUsb0JBQW9Cb0MsTUFBTSxvQkFBb0JpQyxRQUFVLGtCQUFNL1EsRUFBS3N2QixzQkFLdEYsSUFBSWhnQixFQUFtQiwyQkFBSzVDLFVBQVUsNEJBQTRCckYsRUFBS3dILGFBQ25FN08sRUFBSzhHLE1BQU02bUIsV0FDYnJlLEVBQ0UsMkJBQUs1QyxVQUFVLDRCQUNiLG9CQUFDLEVBQUQsQ0FBK0JyTSxPQUFNLE9BQU9MLEVBQUtLLFFBQVosSUFBb0J3TyxZQUFheEgsRUFBS3dILFlBQWF1ZCxXQUFZL2tCLEVBQUtqRyxLQUFNRixLQUFNbEIsRUFBSzhHLE1BQU01RixLQUFNd0csSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLdXZCLFNBQVc1bkIsT0FLeEssSUFBSTZuQixFQUFpQixLQUNoQm5vQixFQUFLMmxCLFdBQ1J3QyxFQUNELHlCQUFHOWlCLFVBQVMsd0NBQW1FLElBQTNCMU0sRUFBSzhHLE1BQU0ybkIsYUFBOEJ6dUIsRUFBSzhHLE1BQU0ybkIsYUFBZXBuQixFQUFLb25CLGNBQWlCLHFDQUF1QyxJQUFPMWQsUUFBVSxrQkFBTS9RLEVBQUt5dkIsZUFBaE4sYUFDVyxnQ0FBOEUsUUFBNUMsSUFBbEJ6dkIsRUFBSzhHLE1BQU0wbkIsSUFBcUJ4dUIsRUFBSzhHLE1BQU0wbkIsSUFBTW5uQixFQUFLbW5CLE1BRGpGLE1BTUQsSUFBSWtCLEVBQWtCLEtBQ2xCQyxFQUFnQixLQUNwQixHQUFJM3ZCLEVBQUs0dkIsYUFBZTV2QixFQUFLSyxPQUFPOHRCLFdBQ2xDdUIsRUFBbUIseUJBQUczZSxRQUFVLGtCQUFNL1EsRUFBSzZ2QixtQkFBb0JuakIsVUFBVSxvQkFBdEQsWUFDZjFNLEVBQUs4RyxNQUFNNG1CLG1CQUFtQixDQUNoQyxJQUFJcnRCLEVBQVMsRUFBSCxLQUFRTCxFQUFLSyxRQUFiLElBQXFCMnNCLFNBQVUzbEIsRUFBS2pHLEtBQzlDZixFQUFPbXNCLFVBQVksR0FDbkJtRCxFQUNELDJCQUFLdnVCLEdBQUUsdUJBQWtCaUcsRUFBS2pHLElBQU1zTCxVQUFVLGFBQ3pDLG9CQUFDLEVBQUQsQ0FBK0JyTSxPQUFRQSxFQUFRYSxLQUFNbEIsRUFBSzhHLE1BQU01RixLQUFNd0csSUFBSyxTQUFBQyxHQUFFLE9BQUszSCxFQUFLdXZCLFNBQVc1bkIsTUFNMUcsSUFBSW1vQixFQUFjLEtBa0JsQixPQWpCSXpvQixFQUFLMG9CLFdBQWExb0IsRUFBSzBvQixVQUFVaHFCLFNBQ25DK3BCLEVBQ0UsMEJBQUlwakIsVUFBVSxzQkFDWHJGLEVBQUswb0IsVUFBVXJoQixLQUFJLFNBQUNnZ0IsR0FFbkIsSUFBSXh2QixFQUFNLG9CQUFILE9BQTBCd3ZCLEVBQVN0dEIsSUFBTUMsU0FBVSxJQUFVQyxLQUFLQyxXQUN6RSxPQUNFLDBCQUFJckMsSUFBS0EsR0FDUCxvQkFBQ3N1QixFQUFELENBQTJCbnRCLE9BQVFMLEVBQUtLLE9BQVFxTSxVQUFVLFlBQVl4TCxLQUFNbEIsRUFBSzhHLE1BQU01RixLQUFNbUcsS0FBTXFuQixVQVU3RywrQkFFRCwyQkFBS3R0QixHQUFFLHVCQUFrQmlHLEVBQUtqRyxJQUFNc0wsVUFBWTFNLEVBQUtILE1BQU02TSxXQUFhLGdCQUVsRXVpQixFQUVBTCxFQUNMLDJCQUFLbGlCLFVBQVUscUJBQXFCckYsRUFBSzJvQixxQkFDcEMxZ0IsRUFFQWtnQixFQUNIRSxHQUlGQyxFQUNHRyxRLDhCQXpQOENsd0IsSyxvNERDQ2xDcXdCLEUsc1FBRW5CLFdBQVlwd0IsR0FBTyxhLDRGQUFBLFVBRWpCLGNBQU1BLEVBQU8sQ0FDWHF3QixxQkFBcUIsRUFDckIvQixVQUFVLEVBQ1ZnQyxXQUFZLHFDQUNabEQsZUFBVzdkLEVBQ1h2TyxPQUFRLEtBQ1Jrc0IsT0FBUSxLQUNSamUsTUFBTyxLQUNQNU4sS0FBTSxLQUNOdXJCLFNBQVUsR0FDVjNyQixJQUFLLENBQ0hDLElBQUssS0FDTEMsUUFBUyxNQUVYdXJCLGlCQUFrQixTQUNsQjVsQixZQUFhLEdBQ2I2bEIsVUFBVyxNQUdSMWxCLE1BQVEsQ0FDWDVGLEtBQU0sRUFBS2IsT0FBT2EsS0FDbEI2dUIsVUFBVyxJQXZCSSxFLHVEQTRCRHZ1QixFQUFXQyxHQUUzQixJQUFJekIsRUFBT21ILEtBR0puSCxFQUFLOEcsTUFBTTVGLE1BQVFsQixFQUFLOEcsTUFBTTVGLEtBQUttRCxLQU94Q3JFLEVBQUtvd0IsWUFOTGh0QixJQUFzQmxDLEtBQUtxQyxRQUFRLENBQUVyQyxLQUFNbEIsRUFBS0ssT0FBT2EsS0FBTWlCLElBQUtuQyxFQUFLSyxPQUFPOEIsSUFBS3RCLE9BQVFiLEVBQUtLLE9BQU9RLE9BQVFDLElBQUtkLEVBQUtLLE9BQU9TLE1BQU8sU0FBQ04sRUFBS1UsR0FDM0lsQixFQUFLb0gsU0FBUyxDQUFFbEcsU0FBUSxXQUN0QmxCLEVBQUtvd0Isa0JBT1hwd0IsRUFBSzR0QiwwQkFBNEIsU0FBU3JkLEdBQ3hDdlEsRUFBSzZ0QixvQkFBb0J0ZCxFQUFNbkUsU0FFakM1SixTQUFTMkosaUJBQWlCLDBCQUEyQm5NLEVBQUs0dEIsMkJBRTFENXRCLEVBQUs4dEIsdUJBQXlCLFNBQVN2ZCxHQUNyQ3ZRLEVBQUsrdEIsaUJBQWlCeGQsRUFBTW5FLFNBRTlCNUosU0FBUzJKLGlCQUFpQixzQkFBdUJuTSxFQUFLOHRCLHdCQUV0RDl0QixFQUFLcXdCLHdCQUEwQixTQUFTOWYsR0FDdEN2USxFQUFLc3dCLGtCQUFrQi9mLEVBQU1uRSxTQUUvQjVKLFNBQVMySixpQkFBaUIsdUJBQXdCbk0sRUFBS3F3QiwyQiw2Q0FLdkQ3dEIsU0FBU3FXLG9CQUFvQiwwQkFBMkIxUixLQUFLeW1CLDJCQUM3RHByQixTQUFTcVcsb0JBQW9CLHNCQUF1QjFSLEtBQUsybUIsd0JBQ3pEdHJCLFNBQVNxVyxvQkFBb0IsdUJBQXdCMVIsS0FBS2twQiwyQixnQ0FHbEQ3c0IsR0FFUixJQUFJeEQsRUFBT21ILEtBRVBwRyxFQUFNLEdBQUgsT0FBTWYsRUFBS0ssT0FBT1MsS0FBT2QsRUFBS0ssT0FBT1MsSUFBSUMsSUFBekMscUJBQThEZixFQUFLSyxPQUFPUSxPQUExRSxpQkFBNkZiLEVBQUtLLE9BQU8wc0IsT0FBekcsK0JBQTBJL3NCLEVBQUtLLE9BQU80c0IsVUFBdEosNEVBQ0hqc0IsRUFBVW9DLElBQXNCdEMsSUFBSXVDLFdBQVdyRCxFQUFLSyxRQUV4RHNELE1BQU01QyxFQUFLLENBQUVDLFlBQ1Y0QyxNQUFNLFNBQVNDLEdBQ2QsR0FBSUEsRUFBU0MsR0FDWCxPQUFPRCxFQUFTRyxPQUVsQixNQUFNSCxFQUFTc1IsVUFFaEJ2UixNQUFLLFNBQVNJLEdBRWIsSUFBSThDLEVBQVEsS0FBSzlHLEVBQUs4RyxPQUN0QkEsRUFBTWlwQixVQUFZL3JCLEVBQ2xCOEMsRUFBTWlwQixVQUFVUSxNQUFLLFNBQUM1VixFQUFHMEQsR0FDdkIsT0FBTzFELEVBQUU2VixVQUFZblMsRUFBRW1TLGFBR3pCeHdCLEVBQUtvSCxTQUFTTixHQUFPLFdBQ25CLEdBQUl0RCxFQUFNLE9BQU9BLFVBaEJ2QixPQW9CUyxTQUFTdUQsR0FDZHRELFFBQVFDLElBQUlxRCxHQUNaQSxFQUFNbkQsTUFBSyxTQUFTeXBCLEdBQVksT0FBTzVwQixRQUFRQyxJQUFJMnBCLFcsMENBS3JDcUIsR0FBVSxXQUM1QnZuQixLQUFLaXBCLFdBQVUsV0FDVCxFQUFLL3ZCLE9BQU82dkIscUJBQ0ExdEIsU0FBU2l1QixlQUFULHVCQUEwQy9CLEVBQVN0dEIsTUFDbERvQixTQUFTaXVCLGVBQVQsdUJBQTBDL0IsRUFBU3R0QixLQUFNMk8sc0IsdUNBSzdEMmUsR0FDZnZuQixLQUFLaXBCLGMsd0NBR1cxQixHQUNoQnZuQixLQUFLaXBCLGMsK0JBR0UsV0FFSHB3QixFQUFPbUgsS0FFUDRvQixFQUNGLDBCQUFJcmpCLFVBQVUsc0JBQ1gxTSxFQUFLOEcsTUFBTWlwQixVQUFVcmhCLEtBQUksU0FBQ2dnQixHQUV6QixJQUFJeHZCLEVBQU0sb0JBQUgsT0FBMEJ3dkIsRUFBU3R0QixJQUFNQyxTQUFVLElBQVVDLEtBQUtDLFdBQ3pFLE9BQ0UsMEJBQUlyQyxJQUFLQSxHQUNQLG9CQUFDLEVBQUQsQ0FBMkJtQixPQUFRTCxFQUFLSyxPQUFRYSxLQUFNbEIsRUFBSzhHLE1BQU01RixLQUFNbUcsS0FBSSxLQUFPcW5CLFVBT3hGNWYsRUFBUTlPLEVBQUtLLE9BQU95TyxNQUFRLDhCQUFLOU8sRUFBS0ssT0FBT3lPLE9BQWMsS0FFM0Q0aEIsRUFBbUIsb0JBQUMsRUFBRCxDQUErQnJ3QixPQUFRTCxFQUFLSyxPQUFRYSxLQUFNbEIsRUFBSzhHLE1BQU01RixPQVM1RixPQVJJbEIsRUFBS0ssT0FBTzh0QixXQUVadUMsRUFERTF3QixFQUFLSyxPQUFPOHZCLFdBQ0ssMkJBQUt6akIsVUFBVSxtQkFBbUIxTSxFQUFLSyxPQUFPOHZCLFlBRTlDLE1BS3JCLDJCQUFLL3VCLEdBQUkrRixLQUFLL0YsR0FBSXNMLFVBQVcxTSxFQUFLSCxNQUFNNk0sV0FBYSxnQkFBaUJoRixJQUFLLFNBQUNDLEdBQVMsRUFBSzZHLFNBQVc3RyxJQUVsR21ILEVBRUE0aEIsRUFFQVgsRUFDRCwrQkFBSyxxQyw4QkE1SjJDbndCLEtDT3hEcXdCLEVBQTJCVSxjQUFnQixTQUF3QkMsRUFBTXZ3QixHQUN2RSxJQUFJSixFQUFhMndCLEVBQUszd0IsV0FDdkI0d0IsSUFBU0MsT0FBUSxrQkFBQyxFQUFELENBQTRCN3dCLFdBQVlBLEVBQVlJLE9BQVFBLElBQVd1d0IsSyIsImZpbGUiOiJyZWFjdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODYpO1xuIiwiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvd1tcIlJlYWN0XCJdOyB9KCkpOyIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdjb3JlLWpzL2VzL2FycmF5L2luY2x1ZGVzJztcblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGRlZmF1bHRDb25maWcgPSB7fSwgZGVmYXVsdGRlZmF1bHRDb25maWcgPSB7fSkge1xuXG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHByb3BzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIE9iamVjdC5rZXlzKHByb3BzLmF0dHJpYnV0ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBsZXQgYXR0cmlidXRlID0gcHJvcHMuYXR0cmlidXRlc1trZXldO1xuICAgICAgICBzZWxmW2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuXHRcdC8vIGNvbmZpZ1xuICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcgPT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuY29uZmlnID0gSlNPTi5wYXJzZShzZWxmLmNvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuICAgIGxldCBwcm9wc0NvbmZpZyA9IHByb3BzLmNvbmZpZyB8fCB7fTtcbiAgICBwcm9wc0NvbmZpZyA9IHJlbW92ZVVuZGVmQW5kTnVsbChwcm9wc0NvbmZpZyk7IC8vIHJlbW92ZSB1bmRlZmluZWQgYW5kIG51bGxcblx0XHRzZWxmLmNvbmZpZyA9IG1lcmdlLnJlY3Vyc2l2ZSh7XG4gICAgICBzaXRlSWQ6IG51bGwsXG5cdFx0XHRhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgICBpc1VzZXJMb2dnZWRJbjogZmFsc2UsXG4gICAgICB9LFxuICAgICAgdXNlcjoge30sXG4gICAgfSwgZGVmYXVsdENvbmZpZywgZGVmYXVsdGRlZmF1bHRDb25maWcsIHByb3BzQ29uZmlnKVxuXG4gICAgc2VsZi5kaXZJZCA9IHNlbGYuZGl2SWQgfHwgKCBzZWxmLmNvbmZpZyAmJiBzZWxmLmNvbmZpZy5kaXZJZCApIHx8IHByb3BzLmlkIHx8IGBvcGVuc3RhZC1jb21wb25lbnQtJHsgIHBhcnNlSW50KCAxMDAwMDAwMDAgKiBNYXRoLnJhbmRvbSgpICl9YDtcbiAgICBcbiAgICB3aW5kb3dbc2VsZi5kaXZJZF0gPSBzZWxmO1xuXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIC8vIGxldCBldmVudCA9IG5ldyBFdmVudCgnaXNSZWFkeScpO1xuICAgIC8vIHNlbGYuaXNSZWFkeSA9IHRydWU7XG4gICAgLy8gc2VsZi5pbnN0YW5jZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZVVuZGVmQW5kTnVsbChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT0gJ29iamVjdCcpIHJldHVybiBvYmo7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAndW5kZWZpbmVkJyB8fCBvYmpba2V5XSA9PSBudWxsKSBkZWxldGUgb2JqW2tleV07XG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnb2JqZWN0Jykgb2JqW2tleV0gPSByZW1vdmVVbmRlZkFuZE51bGwob2JqW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuICBvYmo7XG59XG4iLCJsZXQgb3NjU2Vzc2lvblN0b3JhZ2UgPSB7fTtcblxub3NjU2Vzc2lvblN0b3JhZ2UuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuXG5cdHZhciB2YWx1ZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obmFtZSk7XG5cblx0dHJ5IHtcblx0XHR2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuXHR9IGNhdGNoKGVycikge31cblxuXHRyZXR1cm4gdmFsdWU7XG5cbn1cblxub3NjU2Vzc2lvblN0b3JhZ2Uuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcblxuXHRpZiAoIHR5cGVvZiBuYW1lICE9ICdzdHJpbmcnICkgcmV0dXJuO1xuXG5cdGlmICggdHlwZW9mIHZhbHVlID09ICd1bmRlZmluZWQnICkgdmFsdWUgPSBcIlwiO1xuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyApIHtcblx0XHR0cnkge1xuXHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdFx0fSBjYXRjaChlcnIpIHt9XG5cdH07XG5cblx0c2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSggbmFtZSwgdmFsdWUgKTtcblxufVxuXG5cbm9zY1Nlc3Npb25TdG9yYWdlLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShuYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBvc2NTZXNzaW9uU3RvcmFnZTtcbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbmZpZykge1xuXG4gIGxldCBqd3Q7XG5cbiAgLy8gand0IGluIHVybFxuICBsZXQgbWF0Y2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLm1hdGNoKC8oPzpcXD98Jilqd3Q9KFtBLVphLXowLTktXz1dK1xcLltBLVphLXowLTktXz1dK1xcLj9bQS1aYS16MC05LV8uKy89XSopKD86JnwkKS8pO1xuICBpZiAobWF0Y2gpIHtcbiAgICBqd3QgPSBtYXRjaFsxXTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy1qd3QnLCBqd3QpO1xuICAgIGxldCBzZWFyY2ggPSBkb2N1bWVudC5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZSgnand0PScgKyBqd3QsICcnKTtcbiAgICBpZiAoc2VhcmNoID09ICc/Jykgc2VhcmNoID0gJyc7XG4gICAgZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoID0gc2VhcmNoO1xuICB9XG5cbiAgand0ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0KCdvc2Mtand0Jyk7XG5cbiAgaWYgKGNvbmZpZyAmJiBjb25maWcuand0KSB7XG4gICAgand0ID0gY29uZmlnLmp3dDtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy1qd3QnLCBqd3QpXG4gIH1cblxuICByZXR1cm4gand0O1xuICBcbn1cbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGdldEpXVCBmcm9tICcuL2dldC1qd3QuanMnO1xuXG5sZXQgcm9sZXMgPSB7XG4gIGFkbWluOiBbJ2FkbWluJywgJ21vZGVyYXRvcicsICdlZGl0b3InLCAnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgbW9kZXJhdG9yOiBbJ21vZGVyYXRvcicsICdlZGl0b3InLCAnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgZWRpdG9yOiBbJ2VkaXRvcicsICdtZW1iZXInLCAnYW5vbnltb3VzJywgJ2FsbCddLFxuICBtZW1iZXI6IFsnbWVtYmVyJywgJ2Fub255bW91cycsICdhbGwnXSxcbiAgYW5vbnltb3VzOiBbJ2Fub255bW91cycsICdhbGwnXSxcbiAgYWxsOiBbJ2FsbCddLCAgIC8vIHNwZWNpYWxcbiAgb3duZXI6IG51bGwsIC8vIHNwZWNpYWxcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXNlciwgcmVxdWlyZWRSb2xlKSB7XG4gIGxldCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgaWYgKCFPYmplY3Qua2V5cyhyb2xlcykuaW5jbHVkZXModXNlclJvbGUpKSB1c2VyUm9sZSA9ICdhbGwnO1xuICByZXR1cm4gcm9sZXNbdXNlclJvbGVdLmluY2x1ZGVzKHJlcXVpcmVkUm9sZSk7XG59XG4iLCJsZXQgb3NjTG9jYWxTdG9yYWdlID0ge307XG5cbm9zY0xvY2FsU3RvcmFnZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG5cblx0dmFyIHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG5cblx0dHJ5IHtcblx0XHR2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuXHR9IGNhdGNoKGVycikge31cblxuXHRyZXR1cm4gdmFsdWU7XG5cbn1cblxub3NjTG9jYWxTdG9yYWdlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cblx0aWYgKCB0eXBlb2YgbmFtZSAhPSAnc3RyaW5nJyApIHJldHVybjtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJyApIHZhbHVlID0gXCJcIjtcblx0aWYgKCB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdH0gY2F0Y2goZXJyKSB7fVxuXHR9O1xuXG5cdGxvY2FsU3RvcmFnZS5zZXRJdGVtKCBuYW1lLCB2YWx1ZSApO1xuXG59XG5cblxub3NjTG9jYWxTdG9yYWdlLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3NjTG9jYWxTdG9yYWdlO1xuIiwiLy8gcG9seWZpbGxzXG4vL2ltcG9ydCAnY29yZS1qcy9lcy9tYXAnO1xuLy9pbXBvcnQgJ2NvcmUtanMvZXMvc2V0JztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLy8gcmVhY3RcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuLy8gaW1wb3J0IGNzcyB0byBtYWtlIHN1cmUgaXQgaXMgZ2VuZXJhdGVkIGluIHRoZSByZXN1bHRcbmltcG9ydCAnLi9jc3MvZGVmYXVsdC5sZXNzJztcblxuLy8gdGhlIG1vZHVsZVxuaW1wb3J0IGFwaSBmcm9tICcuL2xpYi9hcGkvaW5kZXguanMnO1xuaW1wb3J0IHVzZXIgZnJvbSAnLi9saWIvdXNlci9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxTdG9yYWdlIGZyb20gJy4vbGliL2xvY2FsLXN0b3JhZ2UuanMnO1xuaW1wb3J0IHNlc3Npb25TdG9yYWdlIGZyb20gJy4vbGliL3Nlc3Npb24tc3RvcmFnZS5qcyc7XG5pbXBvcnQgcmVhY3RUZW1wbGF0ZSBmcm9tICcuL2xpYi9yZWFjdC10ZW1wbGF0ZS5qcyc7XG5cbmxldCBPcGVuU3RhZENvbXBvbmVudExpYnMgPSB7XG4gIGFwaSxcbiAgdXNlcixcbiAgbG9jYWxTdG9yYWdlLFxuICBzZXNzaW9uU3RvcmFnZSxcbiAgcmVhY3RUZW1wbGF0ZSxcbn1cbmV4cG9ydCBkZWZhdWx0IE9wZW5TdGFkQ29tcG9uZW50TGlicztcblxuIiwiaW1wb3J0IGdldEhlYWRlcnMgZnJvbSAnLi9nZXQtaGVhZGVycy5qcydcblxubGV0IE9wZW5TdGFkQ29tcG9uZW50QVBJID0ge1xuICBnZXRIZWFkZXJzLFxufVxuXG5leHBvcnQgZGVmYXVsdCBPcGVuU3RhZENvbXBvbmVudEFQSTtcblxuIiwiaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlJztcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi4vdXNlci9nZXQtand0LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uZmlnKSB7XG5cbiAgbGV0IGhlYWRlcnMgPSBtZXJnZS5yZWN1cnNpdmUoeyAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIGNvbmZpZyAmJiBjb25maWcuYXBpICYmIGNvbmZpZy5hcGkuaGVhZGVycyk7XG5cbiAgbGV0IGp3dCA9IGdldEpXVCgpO1xuICBpZiAoand0KSB7XG4gICAgaGVhZGVycyA9IG1lcmdlLnJlY3Vyc2l2ZSh7IFwiWC1BdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgand0IH0sIGhlYWRlcnMpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG4gIFxufVxuIiwiaW1wb3J0IGdldFVzZXIgZnJvbSAnLi9nZXQtdXNlci5qcydcbmltcG9ydCBnZXRKV1QgZnJvbSAnLi9nZXQtand0LmpzJ1xuaW1wb3J0IGxvZ291dCBmcm9tICcuL2xvZ291dC5qcydcbmltcG9ydCBoYXNSb2xlIGZyb20gJy4vaGFzLXJvbGUuanMnXG5cbmxldCBPcGVuU3RhZENvbXBvbmVudFVzZXIgPSB7XG4gIGdldFVzZXIsXG4gIGdldEpXVCxcbiAgbG9nb3V0LFxuICBoYXNSb2xlLFxufVxuXG5leHBvcnQgZGVmYXVsdCBPcGVuU3RhZENvbXBvbmVudFVzZXI7XG5cbiIsImltcG9ydCBzZXNzaW9uU3RvcmFnZSBmcm9tICcuLi9zZXNzaW9uLXN0b3JhZ2UuanMnO1xuaW1wb3J0IGdldEpXVCBmcm9tICcuL2dldC1qd3QuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25maWcsIG5leHQpIHtcblxuICBuZXh0ID0gbmV4dCB8fCBmdW5jdGlvbih1c2VyKSB7XG4gICAgY29uc29sZS5sb2coJ2dldFVzZXI6IG5leHQgbm90IGRlZmluZWQuJyk7XG4gICAgY29uc29sZS5sb2codXNlcik7XG4gIH07XG5cbiAgbGV0IHVzZXIgPSBjb25maWcudXNlciB8fCBzZXNzaW9uU3RvcmFnZS5nZXQoJ29zYy11c2VyJyk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICAvLyByZXR1cm4gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHVzZXIpO1xuICB9XG5cbiAgLy8gand0XG4gIGxldCBqd3QgPSBnZXRKV1QoY29uZmlnKTtcblxuICBpZiAoIWp3dCkge1xuICAgIC8vIHJldHVybiBubyB1c2VyXG4gICAgcmV0dXJuIG5leHQobnVsbCwge30pO1xuICB9XG5cbiAgLy8gZmV0Y2ggdXNlclxuICBsZXQgdXJsID0gYCR7Y29uZmlnLmFwaS51cmwgIH0vb2F1dGgvc2l0ZS8keyAgY29uZmlnLnNpdGVJZCAgfS9tZWA7XG4gIGxldCBoZWFkZXJzID0geyAnWC1BdXRob3JpemF0aW9uJzogYEJlYXJlciAkeyAgand0fWAsICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgZmV0Y2godXJsLCB7IGhlYWRlcnMgfSApXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIGZldGNoJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG4gICAgLnRoZW4oIChqc29uKSA9PiB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXQoJ29zYy11c2VyJywganNvbik7XG4gICAgICBuZXh0KG51bGwsIGpzb24pO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9KTtcblxufVxuIiwiaW1wb3J0IHNlc3Npb25TdG9yYWdlIGZyb20gJy4uL3Nlc3Npb24tc3RvcmFnZS5qcyc7XG5pbXBvcnQgZ2V0SldUIGZyb20gJy4vZ2V0LWp3dC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbmZpZywgbmV4dCkge1xuXG4gIG5leHQgPSBuZXh0IHx8IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICBjb25zb2xlLmxvZygnbG9nb3V0OiBuZXh0IG5vdCBkZWZpbmVkLicpO1xuICB9XG5cbiAgbGV0IHVzZXIgPSBjb25maWcudXNlciB8fCBzZXNzaW9uU3RvcmFnZS5nZXQoJ29zYy11c2VyJyk7XG5cbiAgaWYgKHVzZXIpIHtcbiAgICAvLyByZXR1cm4gdXNlclxuICAgIHJldHVybiBuZXh0KG51bGwsIHVzZXIpO1xuICB9XG5cbiAgLy8gand0XG4gIGxldCBqd3QgPSBnZXRKV1QoY29uZmlnKTtcblxuICBpZiAoIWp3dCkge1xuICAgIC8vIHJldHVybiBubyB1c2VyXG4gICAgcmV0dXJuIG5leHQobnVsbCwge30pXG4gIH1cblxuICAvLyBmZXRjaCB1c2VyXG4gIGxldCB1cmwgPSBjb25maWcuYXBpLnVybCArICcvb2F1dGgvc2l0ZS8nICsgY29uZmlnLnNpdGVJZCArICcvbWUnO1xuICBsZXQgaGVhZGVycyA9IHsgJ1gtQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIGp3dCwgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICBmZXRjaCh1cmwsIHsgaGVhZGVycyB9IClcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcignRXJyb3Igb24gZmV0Y2gnKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9KVxuICAgIC50aGVuKCBqc29uID0+IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldCgnb3NjLXVzZXInLCBqc29uKVxuICAgICAgbmV4dChudWxsLCBqc29uKVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH0pO1xuICBcbn1cbiIsImltcG9ydCBtZXJnZSBmcm9tICdtZXJnZSc7XG5cbi8vIFRPRE86IGRpdCB3ZXJrdCBhbGxlZW4gYWxzIGhldCBlciAxIGlzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHsgaHRtbD0nJyB9KSB7XG5cbiAgbGV0IGFyZ3MgPSBhcmd1bWVudHNbMF07XG4gIGRlbGV0ZSBhcmdzLmh0bWw7XG5cbiAgbGV0IG1hdGNoZXMgPSAwO1xuXG4gIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goKGtleSkgPT4ge1xuXG4gICAgbGV0IHJlZ0V4ID0gbmV3IFJlZ0V4cChgXigoPzoufFxcbnxcXHIpKilcXFxceyR7a2V5fVxcXFx9KCg/Oi58XFxufFxccikqKSRgLCAnZycpO1xuICAgIGxldCBtYXRjaCA9IHJlZ0V4LmV4ZWMoaHRtbCk7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG1hdGNoZXMrKztcbiAgICAgIGh0bWwgPSAoXG4gICAgICAgIDxzcGFuPlxuICAgICAgICA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IG1hdGNoWzFdIH19Pjwvc3Bhbj5cbiAgICAgICAge2FyZ3Nba2V5XX1cbiAgICAgICAgPHNwYW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBtYXRjaFsyXSB9fT48L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICk7XG4gICAgfVxuXG4gIH0pO1xuXG4gIGlmIChtYXRjaGVzID09IDApIGh0bWwgPSA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGh0bWwgfX0+PC9zcGFuPlxuICByZXR1cm4gaHRtbDtcbiAgXG59XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwiLyohXHJcbiAqIEBuYW1lIEphdmFTY3JpcHQvTm9kZUpTIE1lcmdlIHYxLjIuMVxyXG4gKiBAYXV0aG9yIHllaWtvc1xyXG4gKiBAcmVwb3NpdG9yeSBodHRwczovL2dpdGh1Yi5jb20veWVpa29zL2pzLm1lcmdlXHJcblxyXG4gKiBDb3B5cmlnaHQgMjAxNCB5ZWlrb3MgLSBNSVQgbGljZW5zZVxyXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL3llaWtvcy9qcy5tZXJnZS9tYXN0ZXIvTElDRU5TRVxyXG4gKi9cclxuXHJcbjsoZnVuY3Rpb24oaXNOb2RlKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIE1lcmdlIG9uZSBvciBtb3JlIG9iamVjdHMgXHJcblx0ICogQHBhcmFtIGJvb2w/IGNsb25lXHJcblx0ICogQHBhcmFtIG1peGVkLC4uLiBhcmd1bWVudHNcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHR2YXIgUHVibGljID0gZnVuY3Rpb24oY2xvbmUpIHtcclxuXHJcblx0XHRyZXR1cm4gbWVyZ2UoY2xvbmUgPT09IHRydWUsIGZhbHNlLCBhcmd1bWVudHMpO1xyXG5cclxuXHR9LCBwdWJsaWNOYW1lID0gJ21lcmdlJztcclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0cyByZWN1cnNpdmVseSBcclxuXHQgKiBAcGFyYW0gYm9vbD8gY2xvbmVcclxuXHQgKiBAcGFyYW0gbWl4ZWQsLi4uIGFyZ3VtZW50c1xyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblxyXG5cdFB1YmxpYy5yZWN1cnNpdmUgPSBmdW5jdGlvbihjbG9uZSkge1xyXG5cclxuXHRcdHJldHVybiBtZXJnZShjbG9uZSA9PT0gdHJ1ZSwgdHJ1ZSwgYXJndW1lbnRzKTtcclxuXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ2xvbmUgdGhlIGlucHV0IHJlbW92aW5nIGFueSByZWZlcmVuY2VcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblxyXG5cdFB1YmxpYy5jbG9uZSA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcblxyXG5cdFx0dmFyIG91dHB1dCA9IGlucHV0LFxyXG5cdFx0XHR0eXBlID0gdHlwZU9mKGlucHV0KSxcclxuXHRcdFx0aW5kZXgsIHNpemU7XHJcblxyXG5cdFx0aWYgKHR5cGUgPT09ICdhcnJheScpIHtcclxuXHJcblx0XHRcdG91dHB1dCA9IFtdO1xyXG5cdFx0XHRzaXplID0gaW5wdXQubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yIChpbmRleD0wO2luZGV4PHNpemU7KytpbmRleClcclxuXHJcblx0XHRcdFx0b3V0cHV0W2luZGV4XSA9IFB1YmxpYy5jbG9uZShpbnB1dFtpbmRleF0pO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcclxuXHJcblx0XHRcdG91dHB1dCA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yIChpbmRleCBpbiBpbnB1dClcclxuXHJcblx0XHRcdFx0b3V0cHV0W2luZGV4XSA9IFB1YmxpYy5jbG9uZShpbnB1dFtpbmRleF0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBNZXJnZSB0d28gb2JqZWN0cyByZWN1cnNpdmVseVxyXG5cdCAqIEBwYXJhbSBtaXhlZCBpbnB1dFxyXG5cdCAqIEBwYXJhbSBtaXhlZCBleHRlbmRcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblxyXG5cdGZ1bmN0aW9uIG1lcmdlX3JlY3Vyc2l2ZShiYXNlLCBleHRlbmQpIHtcclxuXHJcblx0XHRpZiAodHlwZU9mKGJhc2UpICE9PSAnb2JqZWN0JylcclxuXHJcblx0XHRcdHJldHVybiBleHRlbmQ7XHJcblxyXG5cdFx0Zm9yICh2YXIga2V5IGluIGV4dGVuZCkge1xyXG5cclxuXHRcdFx0aWYgKHR5cGVPZihiYXNlW2tleV0pID09PSAnb2JqZWN0JyAmJiB0eXBlT2YoZXh0ZW5kW2tleV0pID09PSAnb2JqZWN0Jykge1xyXG5cclxuXHRcdFx0XHRiYXNlW2tleV0gPSBtZXJnZV9yZWN1cnNpdmUoYmFzZVtrZXldLCBleHRlbmRba2V5XSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRiYXNlW2tleV0gPSBleHRlbmRba2V5XTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGJhc2U7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0c1xyXG5cdCAqIEBwYXJhbSBib29sIGNsb25lXHJcblx0ICogQHBhcmFtIGJvb2wgcmVjdXJzaXZlXHJcblx0ICogQHBhcmFtIGFycmF5IGFyZ3ZcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cclxuXHRmdW5jdGlvbiBtZXJnZShjbG9uZSwgcmVjdXJzaXZlLCBhcmd2KSB7XHJcblxyXG5cdFx0dmFyIHJlc3VsdCA9IGFyZ3ZbMF0sXHJcblx0XHRcdHNpemUgPSBhcmd2Lmxlbmd0aDtcclxuXHJcblx0XHRpZiAoY2xvbmUgfHwgdHlwZU9mKHJlc3VsdCkgIT09ICdvYmplY3QnKVxyXG5cclxuXHRcdFx0cmVzdWx0ID0ge307XHJcblxyXG5cdFx0Zm9yICh2YXIgaW5kZXg9MDtpbmRleDxzaXplOysraW5kZXgpIHtcclxuXHJcblx0XHRcdHZhciBpdGVtID0gYXJndltpbmRleF0sXHJcblxyXG5cdFx0XHRcdHR5cGUgPSB0eXBlT2YoaXRlbSk7XHJcblxyXG5cdFx0XHRpZiAodHlwZSAhPT0gJ29iamVjdCcpIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIGl0ZW0pIHtcclxuXHJcblx0XHRcdFx0aWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHR2YXIgc2l0ZW0gPSBjbG9uZSA/IFB1YmxpYy5jbG9uZShpdGVtW2tleV0pIDogaXRlbVtrZXldO1xyXG5cclxuXHRcdFx0XHRpZiAocmVjdXJzaXZlKSB7XHJcblxyXG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBtZXJnZV9yZWN1cnNpdmUocmVzdWx0W2tleV0sIHNpdGVtKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRyZXN1bHRba2V5XSA9IHNpdGVtO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHR5cGUgb2YgdmFyaWFibGVcclxuXHQgKiBAcGFyYW0gbWl4ZWQgaW5wdXRcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqXHJcblx0ICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS90eXBlb2Z2YXJcclxuXHQgKi9cclxuXHJcblx0ZnVuY3Rpb24gdHlwZU9mKGlucHV0KSB7XHJcblxyXG5cdFx0cmV0dXJuICh7fSkudG9TdHJpbmcuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKGlzTm9kZSkge1xyXG5cclxuXHRcdG1vZHVsZS5leHBvcnRzID0gUHVibGljO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdHdpbmRvd1twdWJsaWNOYW1lXSA9IFB1YmxpYztcclxuXHJcblx0fVxyXG5cclxufSkodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpOyIsIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dbXCJSZWFjdERPTVwiXTsgfSgpKTsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMsIGRlZmF1bHRDb25maWcgPSB7fSkge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGNob2ljZXM6IFtdLFxuXHRcdFx0bmFtZTogJycsXG4gICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG5cdFx0fSwgZGVmYXVsdENvbmZpZyk7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgZXJyb3I6IG51bGwsXG5cdFx0fTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICB9XG5cblx0dmFsaWRhdGUoeyBzaG93RXJyb3JzIH0pIHtcblx0XHRsZXQgaXNWYWxpZCA9IHRoaXMuY29uZmlnLnJlcXVpcmVkID8gISF0aGlzLnN0YXRlLnZhbHVlIDogdHJ1ZTtcbiAgICBsZXQgZXJyb3IgPSAnJztcbiAgICBpZiAoIWlzVmFsaWQgJiYgc2hvd0Vycm9ycykgZXJyb3IgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1ZhbGlkLCBlcnJvciB9KVxuXHRcdHJldHVybiBpc1ZhbGlkO1xuXHR9XG5cblx0aGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuXHRcdGxldCBzZWxmID0gdGhpcztcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcblx0XHRzZWxmLnNldFN0YXRlKGRhdGEsICgpID0+IHtcbiAgICAgIHNlbGYudmFsaWRhdGUoe30pO1xuICAgIH0pXG5cdFx0aWYgKHR5cGVvZiBzZWxmLm9uQ2hhbmdlID09ICdmdW5jdGlvbicpIHtcblx0XHRcdHNlbGYub25DaGFuZ2UoeyBuYW1lOiBzZWxmLmNvbmZpZy5uYW1lLCB2YWx1ZTogZGF0YS52YWx1ZSB9KTtcblx0XHR9XG5cdH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQge1xuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGlucHV0IHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFNlbGVjdCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGFsbG93TXVsdGlwbGU6IGZhbHNlLFxuXHRcdFx0aW1hZ2VzZXJ2ZXI6IHtcblx0XHRcdFx0cHJvY2VzczogJycsXG5cdFx0XHRcdGZldGNoOiAnJ1xuXHRcdFx0fSxcbiAgICB9KTtcblxuICAgIHZhciB1cGxvYWRlZEZpbGVzID0gW107XG4gICAgbGV0IHZhbHVlID0gcHJvcHMudmFsdWUgfHwgW107XG4gICAgdmFsdWUuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICAgIHVwbG9hZGVkRmlsZXMucHVzaCh7XG4gICAgICAgIHNvdXJjZTogeyB1cmw6IGltYWdlIH0sXG4gICAgICAgIG9wdGlvbnMgOiB7XG4gICAgICAgICAgdHlwZTogJ2xvY2FsJyxcbiAgICAgICAgICAvLyBtb2NrIGZpbGUgaW5mb3JtYXRpb25cbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICBuYW1lOiBpbWFnZSxcbiAgICAgICAgICAgIC8vXHRcdCBzaXplOiAzMDAxMDI1LFxuICAgICAgICAgICAgLy9cdCB0eXBlOiAnaW1hZ2UvcG5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIHBvc3RlcjogaW1hZ2UsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVwbG9hZGVkRmlsZXM6IHVwbG9hZGVkRmlsZXMsXG4gICAgfVxuXG4gIH1cblxuXHRjb21wb25lbnREaWRNb3VudChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIC8vIGZpbGVwb25kIGZpbGVzXG5cdFx0dGhpcy5fbG9hZGVkRmlsZXMgPSAwO1xuICAgIHRoaXMuZmlsZXMgPSBbXG4gICAgICBcImh0dHBzOi8vdW5wa2cuY29tL2ZpbGVwb25kL2Rpc3QvZmlsZXBvbmQuanNcIixcbiAgICAgIFwiaHR0cHM6Ly91bnBrZy5jb20vZmlsZXBvbmQtcG9seWZpbGwvZGlzdC9maWxlcG9uZC1wb2x5ZmlsbC5qc1wiLFxuICAgICAgXCJodHRwczovL3VucGtnLmNvbS9maWxlcG9uZC1wbHVnaW4taW1hZ2UtcHJldmlldy9kaXN0L2ZpbGVwb25kLXBsdWdpbi1pbWFnZS1wcmV2aWV3LmpzXCIsXG4gICAgICBcImh0dHBzOi8vdW5wa2cuY29tL2ZpbGVwb25kLXBsdWdpbi1maWxlLXZhbGlkYXRlLXR5cGUvZGlzdC9maWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS10eXBlLmpzXCIsXG4gICAgICBcImh0dHBzOi8vdW5wa2cuY29tL2ZpbGVwb25kLXBsdWdpbi1maWxlLXZhbGlkYXRlLXNpemUvZGlzdC9maWxlcG9uZC1wbHVnaW4tZmlsZS12YWxpZGF0ZS1zaXplLmpzXCIsXG4gICAgICBcImh0dHBzOi8vdW5wa2cuY29tL2ZpbGVwb25kLXBsdWdpbi1maWxlLXBvc3Rlci9kaXN0L2ZpbGVwb25kLXBsdWdpbi1maWxlLXBvc3Rlci5qc1wiLFxuICAgIF07XG4gICAgdGhpcy5sb2FkTmV4dEZpbGUoKTtcblxuICB9XG4gIFxuICBsb2FkTmV4dEZpbGUoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBmaWxlID0gc2VsZi5maWxlc1tzZWxmLl9sb2FkZWRGaWxlc107XG4gICAgaWYgKGZpbGUpIHtcblx0XHRcdGxldCBlbGVtZW50O1xuXHRcdFx0ZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHRcdFx0ZWxlbWVudC5zcmMgPSBmaWxlO1xuXHRcdFx0ZWxlbWVudC5hc3luYyA9IHRydWU7XG5cdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRlbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYubG9hZE5leHRGaWxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRcdH1cbiAgICB9XG5cdFx0aWYgKHNlbGYuX2xvYWRlZEZpbGVzID09IHNlbGYuZmlsZXMubGVuZ3RoKSB7XG4gICAgICBzZWxmLmZpbGVVcGxvYWRlckluaXQoKVxuICAgIH1cblx0XHRzZWxmLl9sb2FkZWRGaWxlcysrO1xuICB9XG5cbiAgdmFsaWRhdGUoKSB7XG4gICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5pbWFnZXVwbG9hZGVyICYmIHRoaXMuaW1hZ2V1cGxvYWRlci5nZXRGaWxlcyApIHtcblx0XHRcdHZhciBpbWFnZXMgPSB0aGlzLmltYWdldXBsb2FkZXIuZ2V0RmlsZXMoKTtcblx0XHRcdGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XG5cdFx0XHRcdGlmICghaW1hZ2Uuc2VydmVySWQpIHtcblx0XHRcdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cbiAgICByZXR1cm4gaXNWYWxpZDtcbiAgfVxuXG4gIGZpbGVVcGxvYWRlckluaXQoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHR2YXIgY29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vc2MtaW1hZ2UtdXBsb2FkLWNvbnRhaW5lcicpO1xuXHRcdGlmIChjb250YWluZXJFbGVtZW50KSB7XG5cdFx0XHRGaWxlUG9uZC5yZWdpc3RlclBsdWdpbihGaWxlUG9uZFBsdWdpbkltYWdlUHJldmlldyk7XG5cdFx0XHRGaWxlUG9uZC5yZWdpc3RlclBsdWdpbihGaWxlUG9uZFBsdWdpbkZpbGVWYWxpZGF0ZVNpemUpO1xuXHRcdFx0RmlsZVBvbmQucmVnaXN0ZXJQbHVnaW4oRmlsZVBvbmRQbHVnaW5GaWxlVmFsaWRhdGVUeXBlKTtcblx0XHRcdEZpbGVQb25kLnJlZ2lzdGVyUGx1Z2luKEZpbGVQb25kUGx1Z2luRmlsZVBvc3Rlcik7XG5cblx0XHRcdC8vIEZpbGVQb25kLnNldE9wdGlvbnMoe1xuXHRcdFx0Ly8gICBzZXJ2ZXI6ICdodHRwczovL2ltYWdlLXNlcnZlcjIub3BlbnN0YWRzZGVlbC5ubC9pbWFnZS8/YWNjZXNzX3Rva2VuPU1IaGZiNVUwbTh2cXVBUjgxcCcsXG5cdFx0XHQvLyB9KTtcbiAgICAgIFxuXHRcdFx0dmFyIGZpbGVQb25kU2V0dGluZ3MgPSB7XG5cdFx0XHRcdC8vIHNldCBhbGxvd2VkIGZpbGUgdHlwZXMgd2l0aCBtaW1lIHR5cGVzXG5cdFx0XHRcdGFjY2VwdGVkRmlsZVR5cGVzOiBbJ2ltYWdlLyonXSxcblx0XHRcdFx0YWxsb3dGaWxlU2l6ZVZhbGlkYXRpb246IHRydWUsXG4gICAgICAgIGFsbG93TXVsdGlwbGU6IHRoaXMuY29uZmlnLmFsbG93TXVsdGlwbGUsXG4gICAgICAgIGFsbG93UmVvcmRlcjogdHJ1ZSxcbiAgICAgICAgc3R5bGVJdGVtUGFuZWxBc3BlY3RSYXRpbzogMSxcblx0XHRcdFx0bWF4RmlsZVNpemU6ICc4bWInLFxuXHRcdFx0XHRuYW1lOiAnaW1hZ2UnLFxuXHRcdFx0XHRtYXhGaWxlczogNSxcblx0XHRcdFx0YWxsb3dCcm93c2U6IHRydWUsXG5cdFx0XHRcdGZpbGVzOiB0aGlzLnN0YXRlLnVwbG9hZGVkRmlsZXMsXG5cdFx0XHRcdHNlcnZlcjoge1xuXHRcdFx0XHRcdHByb2Nlc3M6IHRoaXMuY29uZmlnLmltYWdlc2VydmVyLnByb2Nlc3MsXG5cdFx0XHRcdFx0ZmV0Y2g6IHRoaXMuY29uZmlnLmltYWdlc2VydmVyLmZldGNoLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpbWFnZVJlc2l6ZVRhcmdldFdpZHRoOiA4MCxcblx0XHRcdFx0aW1hZ2VSZXNpemVUYXJnZXRIZWlnaHQ6IDgwLFxuXHRcdFx0XHRpbWFnZUNyb3BBc3BlY3RSYXRpbzogJzE6MScsXG5cdFx0XHRcdGxhYmVsSWRsZTogXCJTbGVlcCBhZmJlZWxkaW5nKGVuKSBuYWFyIGRlemUgcGxlayBvZiA8c3BhbiBjbGFzcz0nZmlsZXBvbmQtLWxhYmVsLWFjdGlvbic+S0xJSyBISUVSPC9zcGFuPlwiLFxuXHRcdFx0XHRsYWJlbEludmFsaWRGaWVsZDogXCJGaWVsZCBjb250YWlucyBpbnZhbGlkIGZpbGVzXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVdhaXRpbmdGb3JTaXplOiBcIldhY2h0ZW5kIG9wIGdyb290dGVcIixcblx0XHRcdFx0bGFiZWxGaWxlU2l6ZU5vdEF2YWlsYWJsZTogXCJHcm9vdHRlIG5pZXQgYmVzY2hpa2JhYXJcIixcblx0XHRcdFx0bGFiZWxGaWxlQ291bnRTaW5ndWxhcjogXCJCZXN0YW5kIGluIGxpanN0XCIsXG5cdFx0XHRcdGxhYmVsRmlsZUNvdW50UGx1cmFsOiBcIkJlc3RhbmRlbiBpbiBsaWpzdFwiLFxuXHRcdFx0XHRsYWJlbEZpbGVMb2FkaW5nOiBcIkxhZGVuXCIsXG5cdFx0XHRcdGxhYmVsRmlsZUFkZGVkOiBcIlRvZWdldm9lZ2RcIiwgLy8gYXNzaXN0aXZlIG9ubHlcblx0XHRcdFx0bGFiZWxGaWxlTG9hZEVycm9yOiBcIkZvdXQgYmlqIGhldCB1cGxvYWRlblwiLFxuXHRcdFx0XHRsYWJlbEZpbGVSZW1vdmVkOiBcIlZlcndpamRlcmRcIiwgLy8gYXNzaXN0aXZlIG9ubHlcblx0XHRcdFx0bGFiZWxGaWxlUmVtb3ZlRXJyb3I6IFwiRm91dCBiaWogaGV0IHZlcndpamRlcmVuXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVByb2Nlc3Npbmc6IFwiTGFkZW5cIixcblx0XHRcdFx0bGFiZWxGaWxlUHJvY2Vzc2luZ0NvbXBsZXRlOiBcIkFmYmVlbGRpbmcgZ2VsYWRlblwiLFxuXHRcdFx0XHRsYWJlbEZpbGVQcm9jZXNzaW5nQWJvcnRlZDogXCJVcGxvYWQgY2FuY2VsbGVkXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVByb2Nlc3NpbmdFcnJvcjogXCJFcnJvciBkdXJpbmcgdXBsb2FkXCIsXG5cdFx0XHRcdGxhYmVsRmlsZVByb2Nlc3NpbmdSZXZlcnRFcnJvcjogXCJFcnJvciBkdXJpbmcgcmV2ZXJ0XCIsXG5cdFx0XHRcdGxhYmVsVGFwVG9DYW5jZWw6IFwidGFwIHRvIGNhbmNlbFwiLFxuXHRcdFx0XHRsYWJlbFRhcFRvUmV0cnk6IFwidGFwIHRvIHJldHJ5XCIsXG5cdFx0XHRcdGxhYmVsVGFwVG9VbmRvOiBcInRhcCB0byB1bmRvXCIsXG5cdFx0XHRcdGxhYmVsQnV0dG9uUmVtb3ZlSXRlbTogXCJWZXJ3aWpkZXJlblwiLFxuXHRcdFx0XHRsYWJlbEJ1dHRvbkFib3J0SXRlbUxvYWQ6IFwiQWJvcnRcIixcblx0XHRcdFx0bGFiZWxCdXR0b25SZXRyeUl0ZW1Mb2FkOiBcIlJldHJ5XCIsXG5cdFx0XHRcdGxhYmVsQnV0dG9uQWJvcnRJdGVtUHJvY2Vzc2luZzogXCJWZXJ3aWpkZXJcIixcblx0XHRcdFx0bGFiZWxCdXR0b25VbmRvSXRlbVByb2Nlc3Npbmc6IFwiVW5kb1wiLFxuXHRcdFx0XHRsYWJlbEJ1dHRvblJldHJ5SXRlbVByb2Nlc3Npbmc6IFwiUmV0cnlcIixcblx0XHRcdFx0bGFiZWxCdXR0b25Qcm9jZXNzSXRlbTogXCJVcGxvYWRcIlxuXHRcdFx0fVxuXG4gICAgICBzZWxmLmltYWdldXBsb2FkZXIgPSBGaWxlUG9uZC5jcmVhdGUoY29udGFpbmVyRWxlbWVudCwgZmlsZVBvbmRTZXR0aW5ncyk7XG5cdFx0XHR2YXIgc29ydGFibGVJbnN0YW5jZTtcblx0XHRcdHZhciBwb25kRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsZXBvbmQtLXJvb3QnKTtcblxuICAgICAgLy8gdG1wXG4gICAgICAvL3NlbGYuc3RhdGUudmFsdWUgPSBbXCJodHRwczovL2ltYWdlLXNlcnZlci5zdGFnaW5nLm9wZW5zdGFkc2RlZWwubmwvaW1hZ2UvODVlZjU2NjlkOWE1ZGIyZjBlYzJhZGI2MzEwNjIwYmVcIl1cbiAgICAgIC8vc2VsZi5wcm9wcy5oYW5kbGVGaWVsZENoYW5nZShzZWxmLnByb3BzLm5hbWUsIHNlbGYuc3RhdGUudmFsdWUgKVxuXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsZXBvbmQtLXJvb3QnKS5hZGRFdmVudExpc3RlbmVyKCdGaWxlUG9uZDpwcm9jZXNzZmlsZScsIGUgPT4ge1xuXHRcdFx0XHRpZiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwuZXJyb3IpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3IgdXBsb2RpbmcgZmlsZTogJywgZS5kZXRhaWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZmlsZVVwbG9hZGVyVXBkYXRlQ3VycmVudElucHV0KClcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsZXBvbmQtLXJvb3QnKS5hZGRFdmVudExpc3RlbmVyKCdGaWxlUG9uZDpyZW1vdmVmaWxlJywgZSA9PiB7XG5cdFx0XHRcdGlmIChlLmRldGFpbCAmJiBlLmRldGFpbC5lcnJvcikge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdFcnJvciB1cGxvZGluZyBmaWxlOiAnLCBlLmRldGFpbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5maWxlVXBsb2FkZXJVcGRhdGVDdXJyZW50SW5wdXQoKVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChzZWxmLnN0YXRlLmZvcm1maWVsZHMpIHtcblx0XHRcdFx0c2VsZi5pbWFnZXVwbG9hZGVyLmFkZEZpbGVzKHNlbGYuc3RhdGUuZm9ybWZpZWxkcy5pbWFnZXMpXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG4gIGZpbGVVcGxvYWRlclVwZGF0ZUN1cnJlbnRJbnB1dCgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5zdGF0ZS52YWx1ZSA9IFtdO1xuXHRcdGlmICggdGhpcy5pbWFnZXVwbG9hZGVyICYmIHRoaXMuaW1hZ2V1cGxvYWRlci5nZXRGaWxlcyApIHtcblx0XHRcdHZhciBpbWFnZXMgPSB0aGlzLmltYWdldXBsb2FkZXIuZ2V0RmlsZXMoKTtcblx0XHRcdGltYWdlcy5mb3JFYWNoKChpbWFnZSkgPT4ge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzZXJ2ZXJJZCA9IHR5cGVvZiBpbWFnZS5zZXJ2ZXJJZCA9PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoaW1hZ2Uuc2VydmVySWQpIDogaW1hZ2Uuc2VydmVySWQ7XG5cdFx0XHRcdFx0c2VsZi5zdGF0ZS52YWx1ZS5wdXNoKHNlcnZlcklkLnVybClcblx0XHRcdFx0fSBjYXRjaChlcnIpIHsgY29uc29sZS5sb2coZXJyKSB9XG5cdFx0XHR9KTtcblx0XHR9XG4gICAgc2VsZi5wcm9wcy5vbkNoYW5nZSh7bmFtZTogc2VsZi5jb25maWcubmFtZSwgdmFsdWU6IHNlbGYuc3RhdGUudmFsdWV9KVxuXHR9XG5cbiAgZmlsZVVwbG9hZGVyVXBsb2FkZXJBZGRJbWFnZXMoaW1hZ2VzKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKHRoaXMuaW1hZ2V1cGxvYWRlcikge1xuXHRcdFx0dGhpcy5pbWFnZXVwbG9hZGVyLmFkZEZpbGVzKGltYWdlcylcblx0XHR9XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3JcIj5KZSBoZWJ0IG5vZyBnZWVuIGFmYmVlbGRpbmcgZ2V1cGxvYWQ8L2Rpdj4pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbWFnZS11cGxvYWQtY29udGFpbmVyXCI+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzTmFtZT1cImltYWdlVXBsb2FkZXItZ2ViaWVkc3Rvb2wgZmlsZXBvbmQtZ2ViaWVkc3Rvb2xcIi8+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuLy8gVE9ETzogaXQgaXMgcHJvYmFibHkgbm90IG9rIHRvIHdyaXRlIHlvdXIgb3duIGh0bWwgZWRpdG9yLCBidXQgYWZ0ZXIgaW50ZXJncmF0aW5nIGNrZWRpdG9yIG9yIHJlYWN0LXJ0ZSB0aGUgYnVpbGQgd2FzIChtb3JlIHRoYW4pIHR3aWNlIGFzIGxhcmdlOyBhIGJldHR0ZXIgc29sdXRpb24gbXVzdCBiZSBwb3NzaWJsZVxuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50SFRNTEFyZWEgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCAge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuXHQgIH07XG5cbiAgICB0aGlzLm9uS2V5VXB4ID0gdGhpcy5vbktleVVweC5iaW5kKHRoaXMpO1xuXG4gIH1cblxuXHRjb21wb25lbnREaWRNb3VudChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgdmFsdWUgPSB0aGlzLmZpbHRlckhUTUwodmFsdWUpO1xuICAgIHRoaXMuaW5wdXQuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH1cblxuICBmaWx0ZXJIVE1MKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC88KFxcLz9cXHMqKD86YSBbXj5dK3xhfGJ8aXxzdHJvbmd8ZW18cHxkaXZ8YnJ8dWx8bGkpXFxzKlxcLz8pPi9nLCBcIltbWyQxXV1dXCIpO1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvPFtePl0rPi9nLCBcIlwiKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcW1xcW1xcWyhbXlxcXV0rKVxcXVxcXVxcXS9nLCBcIjwkMT5cIik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZXhlY3V0ZUFjdGlvbihlLCBjb21tYW5kLCBhcmdzKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLGZhbHNlLGFyZ3MpO1xuICAgIHRoaXMub25LZXlVcCgpO1xuICB9XG4gIFxuICBvbkZvY3VzKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh7IHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uS2V5VXB4KCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuaW5wdXQuaW5uZXJIVE1MO1xuICAgIHZhbHVlID0gdGhpcy5maWx0ZXJIVE1MKHZhbHVlKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWUgfSlcbiAgICBpZiAodGhpcy5wcm9wcy5vbktleVVwKSB7XG4gICAgICB0aGlzLnByb3BzLm9uS2V5VXAodmFsdWUpO1xuICAgIH1cbiAgfVxuICBcbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3JcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3ItYnV0dG9uc1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWJ1dHRvbiBvc2MtaHRtbC1lZGl0b3ItYnV0dG9uLWJvbGRcIiBvbk1vdXNlRG93bj17ZSA9PiB0aGlzLmV4ZWN1dGVBY3Rpb24oZSwgJ2JvbGQnKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3ItYnV0dG9uIG9zYy1odG1sLWVkaXRvci1idXR0b24taXRhbGljXCIgb25Nb3VzZURvd249e2UgPT4gdGhpcy5leGVjdXRlQWN0aW9uKGUsICdpdGFsaWMnKX0+Jm5ic3A7PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtaHRtbC1lZGl0b3ItYnV0dG9uIG9zYy1odG1sLWVkaXRvci1idXR0b24taW5zZXJ0dW5vcmRlcmVkbGlzdFwiIG9uTW91c2VEb3duPXtlID0+IHRoaXMuZXhlY3V0ZUFjdGlvbihlLCAnaW5zZXJ0dW5vcmRlcmVkbGlzdCcpfT4mbmJzcDs8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1odG1sLWVkaXRvci1idXR0b24gb3NjLWh0bWwtZWRpdG9yLWJ1dHRvbi1jcmVhdGVsaW5rXCIgb25Nb3VzZURvd249e2UgPT4gdGhpcy5leGVjdXRlQWN0aW9uKGUsICdjcmVhdGVsaW5rJywgcHJvbXB0KCdMYW5rIG5hYXInLCdodHRwOi8vJykpfT4mbmJzcDs8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWh0bWwtZWRpdG9yLWNvbnRlbnRcIiBjb250ZW50RWRpdGFibGU9e3RydWV9XG4gICAgICAgICAgICAgb25Gb2N1cz17IGUgPT4gdGhpcy5vbkZvY3VzKGUpfVxuICAgICAgICAgICAgIG9uQmx1cj17IGUgPT4gdGhpcy5vbkJsdXIoZSl9XG4gICAgICAgICAgICAgb25LZXlVcD17IGUgPT4gdGhpcy5vbktleVVweCgpfVxuICAgICAgICAgICAgIC8vIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5zdGF0ZS52YWx1ZSB9fVxuICAgICAgICAgICAgIHJlZj17ZWwgPT4gKHRoaXMuaW5wdXQgPSBlbCl9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gRWRpdEJ1dHRvbihwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGtleT17cHJvcHMuY21kfVxuICAgICAgb25Nb3VzZURvd249e2V2dCA9PiB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBBdm9pZHMgbG9vc2luZyBmb2N1cyBmcm9tIHRoZSBlZGl0YWJsZSBhcmVhXG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKHByb3BzLmNtZCwgZmFsc2UsIHByb3BzLmFyZyk7IC8vIFNlbmQgdGhlIGNvbW1hbmQgdG8gdGhlIGJyb3dzZXJcbiAgICAgIH19XG4gICAgPlxuICAgICAge3Byb3BzLm5hbWUgfHwgcHJvcHMuY21kfVxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vL2ltcG9ydCBDS0VkaXRvciBmcm9tICdAY2tlZGl0b3IvY2tlZGl0b3I1LXJlYWN0Jztcbi8vaW1wb3J0IENsYXNzaWNFZGl0b3IgZnJvbSAnQGNrZWRpdG9yL2NrZWRpdG9yNS1idWlsZC1jbGFzc2ljJztcbmltcG9ydCBIVE1MQXJlYSBmcm9tICcuL2h0bWxhcmVhLmpzeCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybWZpZWxkSW5wdXRXaXRoQ291bnRlciBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcblx0XHRcdG5hbWU6ICd0ZWtzdCcsXG5cdFx0XHRpbnB1dFR5cGU6ICdpbnB1dCcsXG5cdFx0XHRtaW5MZW5ndGg6IDUsXG5cdFx0XHRtYXhMZW5ndGg6IDEwMjQsXG4gICAgICBwbGFjZWhvbGRlcjogJycsXG5cdFx0fSk7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5pZCA9IHByb3BzLmlkIHx8ICdvc2MtZm9ybWZpZWxkcy1wbGFpbnRleHQtd2l0aC1jb3VudGVyLScgKyBwYXJzZUludCggMTAwMDAwMCAqIE1hdGgucmFuZG9tKCkgKVxuXG4gICAgc2VsZi5zdGF0ZSA9IHtcblx0XHRcdGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgdmFsdWU6IHByb3BzLnZhbHVlIHx8ICcnLFxuXHRcdFx0dmFsdWVMZW5ndGg6IHByb3BzLnZhbHVlICYmIHByb3BzLnZhbHVlLmxlbmd0aCB8fCAwLFxuXHRcdH07XG5cbiAgICBzZWxmLmtleSA9IHByb3BzLnVzZUtleSB8fCAoIHNlbGYuaWQgfHwgJ29zYy1pbnB1dC13aXRoLWNvdW50ZXItJyApICsgcGFyc2VJbnQoIDEwMDAwMDAwICogTWF0aC5yYW5kb20gKTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICAgIHNlbGYuaGFuZGxlT25DaGFuZ2UgPSBzZWxmLmhhbmRsZU9uQ2hhbmdlLmJpbmQodGhpcylcbiAgICBzZWxmLm9uSW5wdXRGb2N1cyA9IHNlbGYub25JbnB1dEZvY3VzLmJpbmQodGhpcylcbiAgICBzZWxmLm9uSW5wdXRCbHVyID0gc2VsZi5vbklucHV0Qmx1ci5iaW5kKHRoaXMpXG4gICAgc2VsZi5vbklucHV0S2V5VXAgPSBzZWxmLm9uSW5wdXRLZXlVcC5iaW5kKHRoaXMpXG5cbiAgfVxuXG5cdGlzVmFsaWQoKSB7XG5cdFx0bGV0IHN0YXRlID0ge307XG5cdFx0c3RhdGUuaXNWYWxpZCA9IHRydWU7XG5cdFx0c3RhdGUud2FybmluZyA9IG51bGw7XG5cdFx0aWYgKHRoaXMuc3RhdGUudmFsdWVMZW5ndGggPCB0aGlzLmNvbmZpZy5taW5MZW5ndGgpIHtcblx0XHRcdHN0YXRlLndhcm5pbmcgPSBgRGUgdGVrc3QgaXMgdGUga29ydGA7XG5cdFx0XHRzdGF0ZS5pc1ZhbGlkID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnN0YXRlLnZhbHVlTGVuZ3RoID4gdGhpcy5jb25maWcubWF4TGVuZ3RoKSB7XG5cdFx0XHRzdGF0ZS53YXJuaW5nID0gYERlIHRla3N0IGlzIHRlIGxhbmdgO1xuXHRcdFx0c3RhdGUuaXNWYWxpZCA9IGZhbHNlO1xuXHRcdH1cblx0XHR0aGlzLnNldFN0YXRlKHN0YXRlKVxuXHRcdHJldHVybiBzdGF0ZS5pc1ZhbGlkO1xuICB9XG5cblx0dmFsaWRhdGUoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHNob3dXYXJuaW5nOiB0cnVlIH0pXG5cdFx0cmV0dXJuIHRoaXMuaXNWYWxpZCgpO1xuXHR9XG4gIFxuXHRoYW5kbGVPbkNoYW5nZShkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG5cdFx0dGhpcy5zZXRTdGF0ZShkYXRhKVxuXHRcdGlmICh0eXBlb2YgdGhpcy5vbkNoYW5nZSA9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlKHsgbmFtZTogdGhpcy5jb25maWcubmFtZSwgdmFsdWU6IGRhdGEudmFsdWUgfSk7XG5cdFx0fVxuXHR9XG5cblx0b25JbnB1dEZvY3VzKCkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLmZvY3VzZWQgPSB0cnVlO1xuXHRcdHN0YXRlLnNob3dXYXJuaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5zZXRTdGF0ZShzdGF0ZSlcblx0fVxuXG5cdG9uSW5wdXRCbHVyKCkge1xuXHRcdGxldCBzdGF0ZSA9IHt9O1xuXHRcdHN0YXRlLmZvY3VzZWQgPSBmYWxzZTtcblx0XHR0aGlzLnNldFN0YXRlKHN0YXRlKVxuXHR9XG5cblx0b25JbnB1dEtleVVwKHZhbHVlKSB7XG5cdFx0bGV0IHN0YXRlID0ge307XG5cdFx0c3RhdGUudmFsdWUgPSB2YWx1ZSB8fCB0aGlzLmlucHV0LnZhbHVlO1xuXHRcdGxldCB2YWx1ZUxlbmd0aCA9IHN0YXRlLnZhbHVlLmxlbmd0aDtcblx0XHRzdGF0ZS52YWx1ZUxlbmd0aCA9IHZhbHVlTGVuZ3RoO1xuXHRcdHN0YXRlLmlzVmFsaWQgPSB2YWx1ZUxlbmd0aCA+PSB0aGlzLmNvbmZpZy5taW5MZW5ndGggJiYgdmFsdWVMZW5ndGggPD0gdGhpcy5jb25maWcubWF4TGVuZ3RoO1xuXHRcdHRoaXMuc2V0U3RhdGUoc3RhdGUpXG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRsZXQgY291bnRlciA9IG51bGw7XG5cdFx0bGV0IHdhcm5pbmcgPSBudWxsO1xuXHRcdGlmIChzZWxmLnN0YXRlLmZvY3VzZWQpIHtcblx0XHRcdGlmIChzZWxmLnN0YXRlLnZhbHVlTGVuZ3RoIDwgc2VsZi5jb25maWcubWluTGVuZ3RoKSB7XG5cdFx0XHRcdGNvdW50ZXIgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1jb3VudGVyIG9zYy1mb3JtLWVycm9yXCI+Tm9nIG1pbmltYWFsIDxzcGFuIGNsYXNzTmFtZT1cIlwiPntzZWxmLmNvbmZpZy5taW5MZW5ndGggLSBzZWxmLnN0YXRlLnZhbHVlTGVuZ3RofTwvc3Bhbj4gdGVrZW5zPC9kaXY+KVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGV0IGVycm9yID0gc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aCA+IHNlbGYuY29uZmlnLm1heExlbmd0aCA/ICdvc2MtZm9ybS1lcnJvcicgOiAnJztcblx0XHRcdFx0Y291bnRlciA9ICg8ZGl2IGNsYXNzTmFtZT17J29zYy1mb3JtLWNvdW50ZXIgJyArIGVycm9yfT5KZSBoZWJ0IG5vZyA8c3BhbiBjbGFzc05hbWU9XCJcIj57c2VsZi5jb25maWcubWF4TGVuZ3RoIC0gc2VsZi5zdGF0ZS52YWx1ZUxlbmd0aH08L3NwYW4+IHRla2VucyBvdmVyLjwvZGl2Pilcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoc2VsZi5zdGF0ZS5zaG93V2FybmluZyAmJiBzZWxmLnN0YXRlLndhcm5pbmcpIHtcblx0XHRcdHdhcm5pbmcgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS13YXJuaW5nXCIgcmVmPXsgZWwgPT4gdGhpc1snZm9ybS13YXJuaW5nJ10gPSBlbCAgfT57c2VsZi5zdGF0ZS53YXJuaW5nfTwvZGl2Pilcblx0XHR9XG5cbiAgICBsZXQgaW5wdXRIVE1MID0gbnVsbDtcblxuICAgIHN3aXRjaChzZWxmLmNvbmZpZy5pbnB1dFR5cGUpIHtcbiAgICAgICAgXG4gICAgICBjYXNlICdodG1sYXJlYSc6XG4gICAgICAgIGlucHV0SFRNTCA9IChcbiAgICAgICAgICA8SFRNTEFyZWFcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9XG4gICAgICAgICAgICBvbkZvY3VzPXtzZWxmLm9uSW5wdXRGb2N1c31cbiAgICAgICAgICAgIG9uQmx1cj17c2VsZi5vbklucHV0Qmx1cn1cbiAgICAgICAgICAgIG9uS2V5VXA9e3NlbGYub25JbnB1dEtleVVwfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICAgIC8vIGlucHV0SFRNTCA9IChcbiAgICAgICAgLy8gICA8Q0tFZGl0b3JcbiAgICAgICAgLy8gICAgIGVkaXRvcj17IENsYXNzaWNFZGl0b3IgfVxuICAgICAgICAvLyAgICAgY29uZmlnPXt7IHRvb2xiYXI6IFsgJ2gzJywgJ2JvbGQnLCAnaXRhbGljJywgJ2xpbmsnIF0gfX1cbiAgICAgICAgLy8gICAgIGRhdGE9e3RoaXMuc3RhdGUudmFsdWV9XG4gICAgICAgIC8vICAgICBvbkluaXQ9eyBlZGl0b3IgPT4ge1xuICAgICAgICAvLyAgICAgICAvLyBUT0RPOiBiZXRlcmUgc2VsZWN0b3JcbiAgICAgICAgLy8gICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNrLWNvbnRlbnQnKS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gICAgICAgICBzZWxmLm9uSW5wdXRLZXlVcChlLCBlZGl0b3IuZ2V0RGF0YSgpKVxuICAgICAgICAvLyAgICAgICB9KVxuICAgICAgICAvLyAgICAgfX1cbiAgICAgICAgLy8gICAgIG9uQ2hhbmdlPXsoIGV2ZW50LCBlZGl0b3IgKSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IGVkaXRvci5nZXREYXRhKCkgfSl9XG4gICAgICAgIC8vICAgICBvbkZvY3VzPXtlID0+IHNlbGYub25JbnB1dEZvY3VzKGUpfVxuICAgICAgICAvLyAgICAgb25CbHVyPXtlID0+IHNlbGYub25JbnB1dEJsdXIoZSl9XG4gICAgICAgIC8vICAgLz5cbiAgICAgICAgLy8gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBpbnB1dEhUTUwgPSAoXG5cdFx0XHRcdCAgPHRleHRhcmVhIGtleT17c2VsZi5rZXl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IG9uS2V5VXA9e2UgPT4gc2VsZi5vbklucHV0S2V5VXAoKX0gb25Gb2N1cz17ZSA9PiBzZWxmLm9uSW5wdXRGb2N1cyhlKX0gb25CbHVyPXtlID0+IHNlbGYub25JbnB1dEJsdXIoZSl9PjwvdGV4dGFyZWE+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpbnB1dEhUTUwgPSAoXG5cdFx0XHRcdCAgPGlucHV0IGtleT17c2VsZi5rZXl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9IHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IG9uS2V5VXA9e2UgPT4gc2VsZi5vbklucHV0S2V5VXAoKX0gb25Gb2N1cz17ZSA9PiBzZWxmLm9uSW5wdXRGb2N1cyhlKX0gb25CbHVyPXtlID0+IHNlbGYub25JbnB1dEJsdXIoZSl9PjwvaW5wdXQ+XG4gICAgICAgICk7XG5cbiAgICB9XG5cdFx0XG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgaWQ9e3NlbGYuaWR9IHJlZj17ZWwgPT4gKHNlbGYuaW5zdGFuY2UgPSBlbCl9IGNsYXNzTmFtZT1cIm9zYy1pbnB1dC13aXRoLWNvdW50ZXJcIj5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1mZWVkYmFja1wiPlxuXHRcdFx0XHRcdHtpbnB1dEhUTUx9XG5cdFx0XHRcdFx0e2NvdW50ZXJ9XG5cdFx0XHRcdFx0e3dhcm5pbmd9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IGZyb20gJy4vZGVmYXVsdC1pbnB1dC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFJhZGlvcyBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3JcIj5KZSBoZWJ0IG5vZyBnZWVuIGtldXplIGdlbWFha3Q8L2Rpdj4pXG4gICAgfVxuXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvc1wiPlxuICAgICAgICB7c2VsZi5jb25maWcuY2hvaWNlcy5tYXAoIGNob2ljZSA9PiB7XG4gICAgICAgICAgaWYgKGNob2ljZS5kYW5nZXJvdXNEZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLWNvbnRhaW5lclwiIGtleT17Y2hvaWNlLnZhbHVlfT48ZGl2IGNsYXNzTmFtZT17YG9zYy1yYWRpby1pbnB1dCR7IHNlbGYuc3RhdGUudmFsdWUgPT0gY2hvaWNlLnZhbHVlID8gJyBvc2MtcmFkaW8taW5wdXQtY2hlY2tlZCcgOiAnJ31gfT48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT17c2VsZi5kaXZJZH0gdmFsdWU9e2Nob2ljZS52YWx1ZX0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBjaG9pY2UudmFsdWUgfSl9IC8+PC9kaXY+PGRpdiBjbGFzc05hbWU9XCJvc2MtcmFkaW8tdGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY2hvaWNlLmRhbmdlcm91c0Rlc2NyaXB0aW9uIH19Lz48L2Rpdj5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwib3NjLXJhZGlvLWNvbnRhaW5lclwiIGtleT17Y2hvaWNlLnZhbHVlfT48ZGl2IGNsYXNzTmFtZT17YG9zYy1yYWRpby1pbnB1dCR7IHNlbGYuc3RhdGUudmFsdWUgPT0gY2hvaWNlLnZhbHVlID8gJyBvc2MtcmFkaW8taW5wdXQtY2hlY2tlZCcgOiAnJ31gfT48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT17c2VsZi5kaXZJZH0gdmFsdWU9e2Nob2ljZS52YWx1ZX0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBjaG9pY2UudmFsdWUgfSl9IC8+PC9kaXY+PGRpdiBjbGFzc05hbWU9XCJvc2MtcmFkaW8tdGV4dFwiPntjaG9pY2UuZGFuZ2Vyb3VzRGVzY3JpcHRpb24gPyBudWxsIDogY2hvaWNlLmRlc2NyaXB0aW9uIHx8IGNob2ljZS50aXRsZSB8fCBjaG9pY2UudmFsdWV9PC9kaXY+PC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICB9KX1cbiAgICAgICAge2Vycm9ySFRNTH1cblx0XHQgIDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCBmcm9tICcuL2RlZmF1bHQtaW5wdXQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRQb3N0Y29kZSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuXHR2YWxpZGF0ZSh7IHNob3dFcnJvcnMgfSkge1xuICAgIFxuXHRcdGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBsZXQgZXJyb3IgPSAnJztcbiAgICBpZiAoIXRoaXMuc3RhdGUudmFsdWUgfHwgIXRoaXMuc3RhdGUudmFsdWUubWF0Y2goL15cXHMqXFxkezR9XFxzKlthLXpBLVpdW2EtekEtWl1cXHMqJC8pKSB7XG4gICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICBpZiAoc2hvd0Vycm9ycykgZXJyb3IgPSAnRGl0IGlzIGdlZW4gcG9zdGNvZGUnO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25maWcucmVxdWlyZWQgJiYgIXRoaXMuc3RhdGUudmFsdWUpIHtcbiAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgIGlmIChzaG93RXJyb3JzKSBlcnJvciA9ICdKZSBoZWJ0IG5vZyBuaWV0cyBpbmdldnVsZCc7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1ZhbGlkLCBlcnJvciB9KVxuXHRcdHJldHVybiBpc1ZhbGlkO1xuXHR9XG5cbiAgcmVuZGVyKCkge1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgbGV0IGVycm9ySFRNTCA9IG51bGw7XG4gICAgaWYgKHNlbGYuc3RhdGUuZXJyb3IpIHtcbiAgICAgIGVycm9ySFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1mb3JtLWVycm9yXCI+e3NlbGYuc3RhdGUuZXJyb3J9PC9kaXY+KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtdGV4dGlucHV0XCI+XG5cdFx0XHQgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgICAge2Vycm9ySFRNTH1cblx0XHQgIDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCBmcm9tICcuL2RlZmF1bHQtaW5wdXQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3BlblN0YWRDb21wb25lbnRTZWxlY3QgZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudERlZmF1bHRJbnB1dCB7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gaW5pdCB2YWx1ZVxuICAgIGxldCB2YWx1ZSA9IHRoaXMuc3RhdGUudmFsdWUgfHwgKCB0aGlzLmNvbmZpZy5jaG9pY2VzWzBdICYmIHRoaXMuY29uZmlnLmNob2ljZXNbMF0udmFsdWUgKTtcbiAgICB0aGlzLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWUgfSlcbiAgfVxuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBlcnJvckhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLnN0YXRlLmVycm9yKSB7XG4gICAgICBlcnJvckhUTUwgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1lcnJvclwiPkplIGhlYnQgbm9nIGdlZW4ga2V1emUgZ2VtYWFrdDwvZGl2PilcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2Mtc2VsZWN0XCI+XG5cdFx0XHQgIDxzZWxlY3QgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWUgfHwgJyd9IGRpc2FibGVkPXt0aGlzLnByb3BzLmRpc2FibGVkfSBwbGFjZWhvbGRlcj17dGhpcy5jb25maWcucGxhY2Vob2xkZXJ9IG9uQ2hhbmdlPXtlID0+IHNlbGYuaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogc2VsZi5pbnB1dC52YWx1ZSB9KX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0+XG4gICAgICAgICAge3NlbGYuY29uZmlnLmNob2ljZXMubWFwKCBjaG9pY2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxvcHRpb24gdmFsdWU9e2Nob2ljZS52YWx1ZSB8fCAnJ30ga2V5PXtjaG9pY2UudmFsdWV9PntjaG9pY2UuZGVzY3JpcHRpb24gfHwgY2hvaWNlLnRpdGxlIHx8IGNob2ljZS52YWx1ZX08L29wdGlvbj5cbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50VGV4dCBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50RGVmYXVsdElucHV0IHtcblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgZXJyb3JIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5zdGF0ZS5lcnJvcikge1xuICAgICAgZXJyb3JIVE1MID0gKDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZXJyb3JcIj5KZSBoZWJ0IG5vZyBuaWV0cyBpbmdldnVsZDwvZGl2PilcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwib3NjLXRleHRpbnB1dFwiPlxuXHRcdFx0ICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWR9IHBsYWNlaG9sZGVyPXt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcn0gb25DaGFuZ2U9e2UgPT4gc2VsZi5oYW5kbGVPbkNoYW5nZSh7IHZhbHVlOiBzZWxmLmlucHV0LnZhbHVlIH0pfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQgZnJvbSAnLi9kZWZhdWx0LWlucHV0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnREZWZhdWx0SW5wdXQge1xuXG5cdHJlbmRlcigpIHtcblxuXHRcdGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBlcnJvckhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLnN0YXRlLmVycm9yKSB7XG4gICAgICBlcnJvckhUTUwgPSAoPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1lcnJvclwiPkplIGhlYnQgbm9nIG5pZXRzIGluZ2V2dWxkPC9kaXY+KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJvc2MtdGV4dGFyZWFcIj5cblx0XHRcdCAgPHRleHRhcmVhIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH0gcGxhY2Vob2xkZXI9e3RoaXMuY29uZmlnLnBsYWNlaG9sZGVyfSBvbkNoYW5nZT17ZSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgdmFsdWU6IHNlbGYuaW5wdXQudmFsdWUgfSl9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Pnt0aGlzLnN0YXRlLnZhbHVlfTwvdGV4dGFyZWE+XG4gICAgICAgIHtlcnJvckhUTUx9XG5cdFx0ICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudEhpZGRlbiBmcm9tICcuL2hpZGRlbi5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50SW1hZ2VVcGxvYWQgZnJvbSAnLi9pbWFnZS11cGxvYWQuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudElucHV0V2l0aENvdW50ZXIgZnJvbSAnLi9pbnB1dC13aXRoLWNvdW50ZXIuanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudFJhZGlvcyBmcm9tICcuL3JhZGlvcy5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UG9zdGNvZGUgZnJvbSAnLi9wb3N0Y29kZS5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50U2VsZWN0IGZyb20gJy4vc2VsZWN0LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRUZXh0IGZyb20gJy4vdGV4dGlucHV0LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRUZXh0QXJlYSBmcm9tICcuL3RleHRhcmVhLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50Rm9ybUZpZWxkIGV4dGVuZHMgT3BlblN0YWRDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cbiAgICBzdXBlcihwcm9wcywge1xuICAgICAgaW5wdXRUeXBlOiBudWxsLFxuXG4gICAgICB2YWxpZGF0ZUFjdGlvbjogbnVsbCxcbiAgICAgIGNoYW5nZUFjdGlvbjogbnVsbCxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcblxuICAgICAgdGl0bGU6IG51bGwsXG4gICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgIGNob2ljZXM6IFtdLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5jb25maWcubmFtZSA9IHNlbGYuY29uZmlnLm5hbWUgfHwgc2VsZi5jb25maWcudGl0bGUudG9Mb3dlckNhc2UoKTtcblxuICAgIHNlbGYuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogcHJvcHMudmFsdWUgfHwgdW5kZWZpbmVkLFxuXHRcdH07XG5cbiAgICBzZWxmLmhhbmRsZU9uQ2hhbmdlID0gc2VsZi5oYW5kbGVPbkNoYW5nZS5iaW5kKHNlbGYpO1xuXG4gICAgc2VsZi5vbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlO1xuXG4gIH1cbiAgXG5cdHZhbGlkYXRlKHsgc2hvd0Vycm9ycyB9KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXQgPyB0aGlzLmlucHV0LnZhbGlkYXRlKHsgc2hvd0Vycm9ycyB9KSA6IHRydWU7XG5cdH1cblxuXHRoYW5kbGVPbkNoYW5nZShkYXRhKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJmb3JtIGZpZWxkIGNoYW5nZVwiLCBkYXRhKTtcblx0XHRpZiAodHlwZW9mIHRoaXMub25DaGFuZ2UgPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5vbkNoYW5nZShkYXRhKTtcblx0XHR9XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgdGl0bGVIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcudGl0bGUpIHtcbiAgICAgIHRpdGxlSFRNTCA9IDxoMyBjbGFzc05hbWU9XCJvc2MtZm9ybS10aXRsZVwiPntzZWxmLmNvbmZpZy50aXRsZX08L2gzPlxuICAgIH1cblxuICAgIGxldCBkZXNjcmlwdGlvbkhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy5kZXNjcmlwdGlvbikge1xuICAgICAgZGVzY3JpcHRpb25IVE1MID0gPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1kZXNjcmlwdGlvblwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogc2VsZi5jb25maWcuZGVzY3JpcHRpb24gfX0+PC9kaXY+XG4gICAgfVxuXG4gICAgbGV0IGZpZWxkSFRNTCA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKHNlbGYuY29uZmlnLmlucHV0VHlwZSkge1xuXG4gICAgICBjYXNlICdoaWRkZW4nOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRIaWRkZW4gY29uZmlnPXtzZWxmLmNvbmZpZ30gdmFsdWU9eyB0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMuY29uZmlnLnZhbHVlIH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2h0bWwtd2l0aC1jb3VudGVyJzpcbiAgICAgIGNhc2UgJ2h0bWxhcmVhLXdpdGgtY291bnRlcic6XG4gICAgICAgIGZpZWxkSFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudElucHV0V2l0aENvdW50ZXIgY29uZmlnPXt7IC4uLnNlbGYuY29uZmlnLCBpbnB1dFR5cGU6ICdodG1sYXJlYScgfX0gdmFsdWU9eyB0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMuY29uZmlnLnZhbHVlIH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2ltYWdlLXVwbG9hZCc6XG4gICAgICAgIGZpZWxkSFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudEltYWdlVXBsb2FkIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpbnB1dC13aXRoLWNvdW50ZXInOlxuICAgICAgY2FzZSAndGV4dC13aXRoLWNvdW50ZXInOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyBpbnB1dFR5cGU6ICdpbnB1dCcsIC4uLnNlbGYuY29uZmlnIH19IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb3N0Y29kZSc6XG4gICAgICAgIGZpZWxkSFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudFBvc3Rjb2RlIGNvbmZpZz17c2VsZi5jb25maWd9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdyYWRpb3MnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRSYWRpb3MgY29uZmlnPXtzZWxmLmNvbmZpZ30gdmFsdWU9eyB0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMuY29uZmlnLnZhbHVlIH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICdtdWx0aXBsZS1jaG9pY2UnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRTZWxlY3QgY29uZmlnPXtzZWxmLmNvbmZpZ30gdmFsdWU9eyB0aGlzLnByb3BzLnZhbHVlIHx8IHRoaXMuY29uZmlnLnZhbHVlIH0gb25DaGFuZ2U9e3NlbGYuaGFuZGxlT25DaGFuZ2V9IHJlZj17ZWwgPT4gKHNlbGYuaW5wdXQgPSBlbCl9Lz5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRUZXh0IGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGZpZWxkSFRNTCA9IDxPcGVuU3RhZENvbXBvbmVudFRleHRBcmVhIGNvbmZpZz17c2VsZi5jb25maWd9IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0ZXh0YXJlYS13aXRoLWNvdW50ZXInOlxuICAgICAgICBmaWVsZEhUTUwgPSA8T3BlblN0YWRDb21wb25lbnRJbnB1dFdpdGhDb3VudGVyIGNvbmZpZz17eyAuLi5zZWxmLmNvbmZpZywgaW5wdXRUeXBlOiAndGV4dGFyZWEnIH19IHZhbHVlPXsgdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLmNvbmZpZy52YWx1ZSB9IG9uQ2hhbmdlPXtzZWxmLmhhbmRsZU9uQ2hhbmdlfSByZWY9e2VsID0+IChzZWxmLmlucHV0ID0gZWwpfS8+XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIHJldHVybiAoXG5cdFx0XHQ8ZGl2IGlkPXtzZWxmLmlkfSByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSBjbGFzc05hbWU9XCJvc2MtZm9ybS1maWVsZFwiPlxuXHRcdFx0XHR7dGl0bGVIVE1MfVxuXHRcdFx0XHR7ZGVzY3JpcHRpb25IVE1MfVxuXHRcdFx0XHR7ZmllbGRIVE1MfVxuXHRcdFx0PC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtRmllbGQgZnJvbSAnLi9mb3JtLWZpZWxkLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50Rm9ybSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgaW50cm86IG51bGwsXG4gICAgICBmaWVsZHM6IFtdLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlczogcHJvcHMudmFsdWVzfHwge30sXG5cdFx0fTtcblxuICAgIHNlbGYuaGFuZGxlT25DaGFuZ2UgPSBzZWxmLmhhbmRsZU9uQ2hhbmdlLmJpbmQodGhpcyk7XG5cbiAgICBzZWxmLmZpZWxkcyA9IFtdO1xuXG4gIH1cbiAgXG5cbiAgZ2V0VmFsdWVzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnZhbHVlcztcblx0fVxuXG5cdHZhbGlkYXRlKHsgc2hvd0Vycm9ycywgc2Nyb2xsVG8gfSkge1xuICAgIGxldCBzZWxmPSB0aGlzO1xuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcbiAgICBsZXQgZmlyc3RJbnZhbGlkID0gbnVsbFxuICAgIHNlbGYuZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICBpZiAoIWZpZWxkLnZhbGlkYXRlKHsgc2hvd0Vycm9ycyB9KSkge1xuICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIGlmICghZmlyc3RJbnZhbGlkKSBmaXJzdEludmFsaWQgPSBmaWVsZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzY3JvbGxUbyAmJiBmaXJzdEludmFsaWQgJiYgZmlyc3RJbnZhbGlkLmluc3RhbmNlICYmIGZpcnN0SW52YWxpZC5pbnN0YW5jZS5zY3JvbGxJbnRvVmlldykgZmlyc3RJbnZhbGlkLmluc3RhbmNlLnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogJ3Ntb290aCd9KTtcbiAgICByZXR1cm4gaXNWYWxpZDsgICAgXG5cblx0fVxuXG5cdGhhbmRsZU9uQ2hhbmdlKGRhdGEpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImZvcm1jaGFuZ2VcIiwgZGF0YSk7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCB2YWx1ZXMgPSB7IC4uLnRoaXMuc3RhdGUudmFsdWVzIH07XG4gICAgdmFsdWVzW2RhdGEubmFtZV0gPSBkYXRhLnZhbHVlO1xuXHRcdHRoaXMuc2V0U3RhdGUoeyB2YWx1ZXMgfSk7XG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgdGl0bGVIVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jb25maWcudGl0bGUpIHtcbiAgICAgIHRpdGxlSFRNTCA9IDxoMiBjbGFzc05hbWU9XCJvc2MtZm9ybS10aXRsZVwiPntzZWxmLmNvbmZpZy50aXRsZX08L2gyPlxuICAgIH1cblxuICAgIGxldCBpbnRyb0hUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy5pbnRybykge1xuICAgICAgaW50cm9IVE1MID0gPGRpdiBjbGFzc05hbWU9XCJvc2MtZm9ybS1pbnRyb1wiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogc2VsZi5jb25maWcuaW50cm8gfX0+PC9kaXY+XG4gICAgfVxuXG4gICAgbGV0IGZpZWxkc0hUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNvbmZpZy5maWVsZHMgJiYgc2VsZi5jb25maWcuZmllbGRzLmxlbmd0aCkge1xuICAgICAgZmllbGRzSFRNTCA9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLWZvcm0tZmllbGRzXCI+XG4gICAgICAgICAgeyBzZWxmLmNvbmZpZy5maWVsZHMubWFwKChmaWVsZENvbmZpZywgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDxPcGVuU3RhZENvbXBvbmVudEZvcm1GaWVsZCBjb25maWc9e2ZpZWxkQ29uZmlnfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVPbkNoYW5nZX0gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0ga2V5PXtgb3NjLWZvcm0tZmllbGQtJHtpfWB9ICByZWY9e2VsID0+IHsgc2VsZi5maWVsZHNbaV0gPSBlbDsgfX0vPlxuICAgICAgICAgIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXHRcdFx0PGRpdiBpZD17c2VsZi5kaXZJZH0gY2xhc3NOYW1lPVwib3NjLWZvcm1cIiByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfT5cblx0XHRcdFx0e3RpdGxlSFRNTH1cblx0XHRcdFx0e2ludHJvSFRNTH1cblx0XHRcdFx0e2ZpZWxkc0hUTUx9XG5cdFx0XHQ8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50L2luZGV4LmpzeCc7XG5cbmNsYXNzIFNsaWRlciBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgIHRvdWNoZWQ6IHRoaXMucHJvcHMudG91Y2hlZCB8fCBmYWxzZSxcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpXG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC50YXJnZXRcblxuICAgIGlmKHR5cGVvZiB0aGlzLnByb3BzLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKXtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodmFsdWUpXG4gICAgfVxuICAgIFxuICAgIHRoaXMuc2V0U3RhdGUoe3ZhbHVlLCB0b3VjaGVkOiB0cnVlfSlcbiAgfVxuXG4gIGRvVG91Y2goKSB7XG5cbiAgICBpZih0eXBlb2YgdGhpcy5wcm9wcy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKDUwKVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe3RvdWNoZWQ6IHRydWV9KVxuXG4gIH1cblxuICBjYWxjUHJvZ3Jlc3MobWluLCBtYXgsIHZhbHVlKSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW5cbiAgICBjb25zdCBwcm9nSW5SYW5nZSA9IHZhbHVlIC0gbWluXG4gICAgcmV0dXJuICgocHJvZ0luUmFuZ2UqMikvcmFuZ2UpLTFcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBjb25zdCB7IHZhbHVlLCB0b3VjaGVkIH0gPSBzZWxmLnN0YXRlXG4gICAgY29uc3QgeyBtaW4sIG1heCwgc3RlcCB9ID0gc2VsZi5wcm9wc1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtzZWxmLnByb3BzLmNsYXNzTmFtZX0gb3NjLXNsaWRlcmB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLXByb2dyZXNzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2Mtc2xpZGVyLXRyYWNrLXByb2dyZXNzXCIgc3R5bGU9e3sgdHJhbnNmb3JtOiAnc2NhbGVYKCcgKyBzZWxmLmNhbGNQcm9ncmVzcyhtaW4sIG1heCwgdmFsdWUpICsgJyknIH19PjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1kb3QtZW5kIG9zYy1zbGlkZXItdHJhY2stZG90LWxlZnRcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1zbGlkZXItdHJhY2stZG90LXN0YXJ0IG9zYy1zbGlkZXItdHJhY2stZG90LWNlbnRlclwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXNsaWRlci10cmFjay1kb3QtZW5kIG9zYy1zbGlkZXItdHJhY2stZG90LXJpZ2h0XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW5wdXQgdHlwZT0ncmFuZ2UnIG1pbj17bWlufSBtYXg9e21heH0gc3RlcD17c3RlcH0gdmFsdWU9e3ZhbHVlfSBvbkNsaWNrPXsoKSA9PiB7IGlmICghdG91Y2hlZCkgc2VsZi5kb1RvdWNoKCk7IH0gfSBvbkNoYW5nZT17c2VsZi5oYW5kbGVDaGFuZ2V9IGNsYXNzTmFtZT17dG91Y2hlZCA/ICdvc2Mtc2xpZGVyLWlucHV0LXJhbmdlJyA6ICdvc2Mtc2xpZGVyLWlucHV0LXJhbmdlIG9zYy1zbGlkZXItdW50b3VjaGVkJ30gcmVmPXtlbCA9PiAoc2VsZi5pbnB1dCA9IGVsKX0vPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNsaWRlcjtcbiIsIi8vIHBvbHlmaWxsc1xuLy9pbXBvcnQgJ2NvcmUtanMvZXMvbWFwJztcbi8vaW1wb3J0ICdjb3JlLWpzL2VzL3NldCc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIHJlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbi8vIGltcG9ydCBjc3MgdG8gbWFrZSBzdXJlIGl0IGlzIGdlbmVyYXRlZCBpbiB0aGUgcmVzdWx0XG5pbXBvcnQgJy4vY3NzL2RlZmF1bHQubGVzcyc7XG5cbi8vIHRoZSBtb2R1bGVcbmltcG9ydCBGb3JtIGZyb20gJy4vY29tcG9uZW50L2Zvcm0uanN4JztcbmltcG9ydCBGb3JtRmllbGQgZnJvbSAnLi9jb21wb25lbnQvZm9ybS1maWVsZC5qc3gnO1xuaW1wb3J0IEhpZGRlbiBmcm9tICcuL2NvbXBvbmVudC9oaWRkZW4uanN4JztcbmltcG9ydCBJbWFnZVVwbG9hZCBmcm9tICcuL2NvbXBvbmVudC9pbWFnZS11cGxvYWQuanN4JztcbmltcG9ydCBJbnB1dFdpdGhDb3VudGVyIGZyb20gJy4vY29tcG9uZW50L2lucHV0LXdpdGgtY291bnRlci5qc3gnO1xuaW1wb3J0IFBvc3Rjb2RlIGZyb20gJy4vY29tcG9uZW50L3Bvc3Rjb2RlLmpzeCc7XG5pbXBvcnQgUmFkaW9zIGZyb20gJy4vY29tcG9uZW50L3JhZGlvcy5qc3gnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL2NvbXBvbmVudC9zZWxlY3QuanN4JztcbmltcG9ydCBUZXh0IGZyb20gJy4vY29tcG9uZW50L3RleHRpbnB1dC5qc3gnO1xuaW1wb3J0IFRleHRhcmVhIGZyb20gJy4vY29tcG9uZW50L3RleHRhcmVhLmpzeCc7XG5pbXBvcnQgU2xpZGVyIGZyb20gJy4vY29tcG9uZW50L3NsaWRlci5qc3gnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBGb3JtLFxuICBGb3JtRmllbGQsXG4gIEhpZGRlbixcbiAgSW1hZ2VVcGxvYWQsXG4gIElucHV0V2l0aENvdW50ZXIsXG4gIFBvc3Rjb2RlLFxuICBSYWRpb3MsXG4gIFNlbGVjdCxcbiAgVGV4dCxcbiAgVGV4dGFyZWEsXG4gIFNsaWRlcixcbn1cblxuLy8gcmVuZGVyIHRoZSBiYXNlIGVsZW1lbnRcbi8vIGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoIGVsZW0sIGNvbmZpZyApIHtcbi8vICAgbGV0IGF0dHJpYnV0ZXMgPSBlbGVtLmF0dHJpYnV0ZXM7XG4vLyAgIFJlYWN0RE9NLnJlbmRlciggPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zIGF0dHJpYnV0ZXM9e2F0dHJpYnV0ZXN9IGNvbmZpZz17Y29uZmlnfS8+LCBlbGVtKVxuLy8gfVxuLy8gZXhwb3J0IHtyZW5kZXJFbGVtZW50fVxuXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgYmxvYjpcbiAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICdCbG9iJyBpbiBzZWxmICYmXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB0aGlzLmFwcGVuZChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbFxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xuICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICB9XG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKG5hbWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIGl0ZW1zLnB1c2godmFsdWUpXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICBpdGVtcy5wdXNoKFtuYW1lLCB2YWx1ZV0pXG4gIH0pXG4gIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbn1cblxuaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbn1cblxuZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbignJylcbn1cblxuZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gIGlmIChidWYuc2xpY2UpIHtcbiAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gIH0gZWxzZSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICB9XG59XG5cbmZ1bmN0aW9uIEJvZHkoKSB7XG4gIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgIGlmICghYm9keSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXG4gICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICB9XG4gIH1cblxuICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG52YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbFxuICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gIH1cbiAgdGhpcy5faW5pdEJvZHkoYm9keSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHtib2R5OiB0aGlzLl9ib2R5SW5pdH0pXG59XG5cbmZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgYm9keVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoJyYnKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gZm9ybVxufVxuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKVxuICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgaWYgKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIHJldHVybiBoZWFkZXJzXG59XG5cbkJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvblxudHJ5IHtcbiAgbmV3IERPTUV4Y2VwdGlvbigpXG59IGNhdGNoIChlcnIpIHtcbiAgRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24obWVzc2FnZSwgbmFtZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSlcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgfVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpXG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBET01FeGNlcHRpb25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgIHhoci5hYm9ydCgpXG4gICAgfVxuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICB9XG4gICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgfVxuXG4gICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgIH0pXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghc2VsZi5mZXRjaCkge1xuICBzZWxmLmZldGNoID0gZmV0Y2hcbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxufVxuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUiwgTUVUSE9ELCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJpbmQoY2FsbCwgZ2xvYmFsW0NPTlNUUlVDVE9SXS5wcm90b3R5cGVbTUVUSE9EXSwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMy4xXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBfaXNBcnJheSA9IHVuZGVmaW5lZDtcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn0gZWxzZSB7XG4gIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdW5kZWZpbmVkO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdW5kZWZpbmVkO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICh7fSkudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4vLyB0ZXN0IGZvciB3ZWIgd29ya2VyIGJ1dCBub3QgaW4gSUUxMFxudmFyIGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuLy8gbm9kZVxuZnVuY3Rpb24gdXNlTmV4dFRpY2soKSB7XG4gIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy93aGVuL2lzc3Vlcy80MTAgZm9yIGRldGFpbHNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gIH07XG59XG5cbi8vIHZlcnR4XG5mdW5jdGlvbiB1c2VWZXJ0eFRpbWVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHIgPSByZXF1aXJlO1xuICAgIHZhciB2ZXJ0eCA9IHIoJ3ZlcnR4Jyk7XG4gICAgdmVydHhOZXh0ID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcbiAgICByZXR1cm4gdXNlVmVydHhUaW1lcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVzZVNldFRpbWVvdXQoKTtcbiAgfVxufVxuXG52YXIgc2NoZWR1bGVGbHVzaCA9IHVuZGVmaW5lZDtcbi8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG5pZiAoaXNOb2RlKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VOZXh0VGljaygpO1xufSBlbHNlIGlmIChCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTXV0YXRpb25PYnNlcnZlcigpO1xufSBlbHNlIGlmIChpc1dvcmtlcikge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTWVzc2FnZUNoYW5uZWwoKTtcbn0gZWxzZSBpZiAoYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSBhdHRlbXB0VmVydHgoKTtcbn0gZWxzZSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgdmFyIHBhcmVudCA9IHRoaXM7XG5cbiAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaWYgKGNoaWxkW1BST01JU0VfSURdID09PSB1bmRlZmluZWQpIHtcbiAgICBtYWtlUHJvbWlzZShjaGlsZCk7XG4gIH1cblxuICB2YXIgX3N0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICBpZiAoX3N0YXRlKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IF9hcmd1bWVudHNbX3N0YXRlIC0gMV07XG4gICAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlKG9iamVjdCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3Jlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDE2KTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgR0VUX1RIRU5fRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gc2VsZkZ1bGZpbGxtZW50KCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG59XG5cbmZ1bmN0aW9uIGNhbm5vdFJldHVybk93bigpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZXMgY2FsbGJhY2sgY2Fubm90IHJldHVybiB0aGF0IHNhbWUgcHJvbWlzZS4nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGhlbihwcm9taXNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBHRVRfVEhFTl9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBHRVRfVEhFTl9FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlUaGVuKHRoZW4sIHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpIHtcbiAgdHJ5IHtcbiAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUsIHRoZW4pIHtcbiAgYXNhcChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IgPSB0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfVxuICB9LCBwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQgPT09IEdFVF9USEVOX0VSUk9SKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHRoZW4kJCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgX3JlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3JlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHByb21pc2UuX3N0YXRlID0gUkVKRUNURUQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHJlYXNvbjtcblxuICBhc2FwKHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgdmFyIF9zdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gIHZhciBsZW5ndGggPSBfc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgX3N1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgUkVKRUNURURdID0gb25SZWplY3Rpb247XG5cbiAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwYXJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2gocHJvbWlzZSkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNoaWxkID0gdW5kZWZpbmVkLFxuICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQsXG4gICAgICBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICB9XG4gIH1cblxuICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBFcnJvck9iamVjdCgpIHtcbiAgdGhpcy5lcnJvciA9IG51bGw7XG59XG5cbnZhciBUUllfQ0FUQ0hfRVJST1IgPSBuZXcgRXJyb3JPYmplY3QoKTtcblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVycm9yID0gdW5kZWZpbmVkLFxuICAgICAgc3VjY2VlZGVkID0gdW5kZWZpbmVkLFxuICAgICAgZmFpbGVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBkZXRhaWw7XG4gICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICAgIF9yZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiBFbnVtZXJhdG9yKENvbnN0cnVjdG9yLCBpbnB1dCkge1xuICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoIXRoaXMucHJvbWlzZVtQUk9NSVNFX0lEXSkge1xuICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gIH1cblxuICBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9yZWplY3QodGhpcy5wcm9taXNlLCB2YWxpZGF0aW9uRXJyb3IoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIF9pbnB1dCA9IHRoaXMuX2lucHV0O1xuXG4gIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLl9lYWNoRW50cnkoX2lucHV0W2ldLCBpKTtcbiAgfVxufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSwgaSkge1xuICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gIHZhciByZXNvbHZlJCQgPSBjLnJlc29sdmU7XG5cbiAgaWYgKHJlc29sdmUkJCA9PT0gcmVzb2x2ZSkge1xuICAgIHZhciBfdGhlbiA9IGdldFRoZW4oZW50cnkpO1xuXG4gICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgdGhpcy5fc2V0dGxlZEF0KGVudHJ5Ll9zdGF0ZSwgaSwgZW50cnkuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoZW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgdGhpcy5fcmVzdWx0W2ldID0gZW50cnk7XG4gICAgfSBlbHNlIGlmIChjID09PSBQcm9taXNlKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBjKG5vb3ApO1xuICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQobmV3IGMoZnVuY3Rpb24gKHJlc29sdmUkJCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSQkKGVudHJ5KTtcbiAgICAgIH0pLCBpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fd2lsbFNldHRsZUF0KHJlc29sdmUkJChlbnRyeSksIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gKHN0YXRlLCBpLCB2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgIGlmIChzdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gKHByb21pc2UsIGkpIHtcbiAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gIHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KFJFSkVDVEVELCBpLCByZWFzb24pO1xuICB9KTtcbn07XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcbiAgX3JlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIHRoaXNbUFJPTUlTRV9JRF0gPSBuZXh0SWQoKTtcbiAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgaWYgKG5vb3AgIT09IHJlc29sdmVyKSB7XG4gICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gIH1cbn1cblxuUHJvbWlzZS5hbGwgPSBhbGw7XG5Qcm9taXNlLnJhY2UgPSByYWNlO1xuUHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuUHJvbWlzZS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlLl9hc2FwID0gYXNhcDtcblxuUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQcm9taXNlLFxuXG4gIC8qKlxuICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIENoYWluaW5nXG4gICAgLS0tLS0tLS1cbiAgXG4gICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgfSk7XG4gIFxuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgIH0pO1xuICAgIGBgYFxuICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBBc3NpbWlsYXRpb25cbiAgICAtLS0tLS0tLS0tLS1cbiAgXG4gICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgU2ltcGxlIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgcmVzdWx0O1xuICBcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBFcnJiYWNrIEV4YW1wbGVcbiAgXG4gICAgYGBganNcbiAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBQcm9taXNlIEV4YW1wbGU7XG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAtLS0tLS0tLS0tLS0tLVxuICBcbiAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gIFxuICAgIGBgYGphdmFzY3JpcHRcbiAgICBsZXQgYXV0aG9yLCBib29rcztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICBcbiAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gIFxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgXG4gICAgfVxuICBcbiAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRBdXRob3IoKS5cbiAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgdGhlblxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuICB0aGVuOiB0aGVuLFxuXG4gIC8qKlxuICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBcbiAgICBgYGBqc1xuICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgIH1cbiAgXG4gICAgLy8gc3luY2hyb25vdXNcbiAgICB0cnkge1xuICAgICAgZmluZEF1dGhvcigpO1xuICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH1cbiAgXG4gICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCBjYXRjaFxuICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gICdjYXRjaCc6IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICB2YXIgbG9jYWwgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICBpZiAoUCkge1xuICAgICAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9taXNlVG9TdHJpbmcgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZTtcbn1cblxucG9seWZpbGwoKTtcbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UuUHJvbWlzZSA9IFByb21pc2U7XG5cbnJldHVybiBQcm9taXNlO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xudmFyIGVudHJ5VW5iaW5kID0gcmVxdWlyZSgnLi4vLi4vaW50ZXJuYWxzL2VudHJ5LXVuYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudHJ5VW5iaW5kKCdBcnJheScsICdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2luZGV4T2YnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMTogMCB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRGb3JtcyBmcm9tICcuLi8uLi9mb3Jtcy9pbmRleC5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9uRm9ybSBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIGFyZ3VtZW50SWQ6IG51bGwsXG4gICAgICBhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgfSxcbiAgICAgIHVzZXI6IHt9LFxuICAgICAgZGVzY3JpcHRpb25NaW5MZW5ndGg6IDMwLFxuICAgICAgZGVzY3JpcHRpb25NYXhMZW5ndGg6IDUwMCxcbiAgICAgIHJlcXVpcmVkVXNlclJvbGU6ICdtZW1iZXInLFxuICAgICAgZm9ybUludHJvOiAnJyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICB9KTtcblxuICAgIHRoaXMuY29uZmlnLmxvZ2luVXJsID0gdGhpcy5jb25maWcubG9naW5VcmwgfHwgJy9vYXV0aC9sb2dpbj9yZXR1cm5Ubz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpO1xuICAgIFxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5jb25maWcuZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgIGlzQnVzeTogZmFsc2UsXG4gICAgfTtcblxuICB9XG5cbiAgaGFuZGxlT25DaGFuZ2UoZGF0YSkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGlmIChkYXRhLmRlc2NyaXB0aW9uKSBkYXRhLmlzVmFsaWQgPSB0aGlzLmRlc2NyaXB0aW9uLmlzVmFsaWQoKTtcbiAgICB0aGlzLnNldFN0YXRlKGRhdGEpO1xuICB9XG5cbiAgY2FuU3VibWl0KCkge1xuICAgIGxldCByZXF1aXJlZFVzZXJSb2xlID0gdGhpcy5jb25maWcucmVxdWlyZWRVc2VyUm9sZTtcbiAgICBsZXQgdXNlciA9IHRoaXMucHJvcHMudXNlciB8fCB7fTtcbiAgICByZXR1cm4gT3BlblN0YWRDb21wb25lbnRMaWJzLnVzZXIuaGFzUm9sZSh1c2VyLCByZXF1aXJlZFVzZXJSb2xlKVxuICB9XG5cbiAgc3VibWl0Rm9ybSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuc2V0U3RhdGUoeyBpc0J1c3k6IHRydWUgfSwgKCkgPT4ge1xuXG4gICAgICBsZXQgaXNWYWxpZCA9IHNlbGYuZGVzY3JpcHRpb24udmFsaWRhdGUoeyBzaG93V2FybmluZzogdHJ1ZSB9KTtcbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNCdXN5OiBmYWxzZSwgaXNWYWxpZDogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLmNhblN1Ym1pdCgpKSByZXR1cm4gYWxlcnQoJ0plIGJlbnQgbmlldCBpbmdlbG9nZCcpO1xuXG4gICAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50JHsgICBzZWxmLmNvbmZpZy5hcmd1bWVudElkID8gYC8keyAgc2VsZi5jb25maWcuYXJndW1lbnRJZH1gIDogJyd9YDtcbiAgICAgIGxldCBoZWFkZXJzID0gT3BlblN0YWRDb21wb25lbnRMaWJzLmFwaS5nZXRIZWFkZXJzKHNlbGYuY29uZmlnKTtcbiAgICAgIGxldCBtZXRob2QgPSBzZWxmLmNvbmZpZy5hcmd1bWVudElkID8gJ1BVVCcgOiAnUE9TVCc7XG5cbiAgICAgIGxldCBib2R5ID0ge1xuICAgICAgICBwYXJlbnRJZDogc2VsZi5jb25maWcucGFyZW50SWQsXG4gICAgICAgIHNlbnRpbWVudDogc2VsZi5jb25maWcuc2VudGltZW50LFxuICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5kZXNjcmlwdGlvbixcbiAgICAgIH07XG5cbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5jb25maWcub25TdWJtaXQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5jb25maWcub25TdWJtaXQoeyBkZXNjcmlwdGlvbjogc2VsZi5zdGF0ZS5kZXNjcmlwdGlvbiB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLnNldFN0YXRlKHsgZGVzY3JpcHRpb246ICcnLCBpc0J1c3k6IGZhbHNlLCBpc1ZhbGlkOiBmYWxzZSB9LCAoKSA9PiB7XG5cbiAgICAgICAgICAgIHNlbGYuZGVzY3JpcHRpb24uaGFuZGxlT25DaGFuZ2UoeyB2YWx1ZTogJycgfSk7XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hcmd1bWVudElkKSB7XG5cdFx0ICAgICAgICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLXJlYWN0aW9uLWVkaXRlZCcsIHsgZGV0YWlsOiBqc29uIH0pO1xuXHRcdCAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLW5ldy1yZWFjdGlvbi1zdG9yZWQnLCB7IGRldGFpbDoganNvbiB9KTtcblx0XHQgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBlcnJvci50aGVuKGZ1bmN0aW9uKG1lc3NhZ2VzKSB7IGFsZXJ0KG1lc3NhZ2VzKTsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IGlzQnVzeTogZmFsc2UsIGlzVmFsaWQ6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgY29uZmlnID0ge1xuICAgICAgZGVzY3JpcHRpb25NaW5MZW5ndGg6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uTWluTGVuZ3RoIHx8IDMwLFxuICAgICAgZGVzY3JpcHRpb25NYXhMZW5ndGg6IHNlbGYuY29uZmlnLmRlc2NyaXB0aW9uTWF4TGVuZ3RoIHx8IDUwMCxcbiAgICB9O1xuXG4gICAgbGV0IGZvcm1JbnRybyA9IG51bGw7XG4gICAgaWYgKHNlbGYuY29uZmlnLmZvcm1JbnRybykge1xuICAgICAgZm9ybUludHJvID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1pbnRyb1wiPntzZWxmLmNvbmZpZy5mb3JtSW50cm99PC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBzdWJtaXRCdXR0b25IVE1MID0gbnVsbDtcbiAgICBpZiAoc2VsZi5jYW5TdWJtaXQoKSkge1xuICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtYWxpZ24tcmlnaHQtY29udGFpbmVyXCI+XG5cdFx0XHQgICAgPGJ1dHRvbiBvbkNsaWNrPXsoZSkgPT4geyBpZiAoIXNlbGYuc3RhdGUuaXNCdXN5KSBzZWxmLnN1Ym1pdEZvcm0oKTsgfX0gY2xhc3NOYW1lPXtgb3NjLWJ1dHRvbi1ibHVlJHsgIXNlbGYuc3RhdGUuaXNWYWxpZCB8fCBzZWxmLnN0YXRlLmlzQnVzeSA/ICcgb3NjLWRpc2FibGVkJyA6ICcnIH1gfSA+VmVyemVuZGVuPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VibWl0QnV0dG9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtYWxpZ24tcmlnaHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB7IE9wZW5TdGFkQ29tcG9uZW50TGlicy5sb2NhbFN0b3JhZ2Uuc2V0KCdvc2MtcmVhY3Rpb25zLWxvZ2luLXBlbmRpbmcnLCB0cnVlKTsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IHNlbGYuY29uZmlnLmxvZ2luVXJsOyB9fSBjbGFzc05hbWU9XCJvc2MtYnV0dG9uLWJsdWUgb3NjLW5vdC1sb2dnZWQtaW4tYnV0dG9uXCI+SW5sb2dnZW48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPXtzZWxmLmRpdklkfSBjbGFzc05hbWU9XCJcIiByZWY9e2VsID0+IChzZWxmLmluc3RhbmNlID0gZWwpfSA+XG4gICAgICAgIHtmb3JtSW50cm99XG4gICAgICAgIDxPcGVuU3RhZENvbXBvbmVudEZvcm1zLklucHV0V2l0aENvdW50ZXIgZGlzYWJsZWQ9e3RoaXMuY2FuU3VibWl0KCkgPyBudWxsIDogdHJ1ZX0gY29uZmlnPXt7IGlucHV0VHlwZTogJ3RleHRhcmVhJywgbWluTGVuZ3RoOiBjb25maWcuZGVzY3JpcHRpb25NaW5MZW5ndGgsIG1heExlbmd0aDogY29uZmlnLmRlc2NyaXB0aW9uTWF4TGVuZ3RoLCBwbGFjZWhvbGRlcjogc2VsZi5jb25maWcucGxhY2Vob2xkZXIgfX0gdmFsdWU9e3NlbGYuc3RhdGUuZGVzY3JpcHRpb259IG9uQ2hhbmdlPXsgZGF0YSA9PiBzZWxmLmhhbmRsZU9uQ2hhbmdlKHsgZGVzY3JpcHRpb246IGRhdGEudmFsdWUgfSkgfSByZWY9e2VsID0+IChzZWxmLmRlc2NyaXB0aW9uID0gZWwpfS8+XG4gICAgICAgIHtzdWJtaXRCdXR0b25IVE1MfVxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG5cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50TGlicyBmcm9tICcuLi8uLi9saWJzL2luZGV4LmpzeCc7XG5pbXBvcnQgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gZnJvbSAnLi9yZWFjdGlvbi1mb3JtLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gZXh0ZW5kcyBPcGVuU3RhZENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcblxuICAgIHN1cGVyKHByb3BzLCB7XG4gICAgICBzaXRlSWQ6IG51bGwsXG4gICAgICBpZGVhSWQ6IG51bGwsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIGRlc2NyaXB0aW9uTWluTGVuZ3RoOiAzMCxcbiAgICAgIGRlc2NyaXB0aW9uTWF4TGVuZ3RoOiA1MDAsXG4gICAgICBhcGk6IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBoZWFkZXJzOiBudWxsLFxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkVXNlclJvbGU6ICdtZW1iZXInLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXI6IHByb3BzLnVzZXIsXG4gICAgICBpc01lbnVBY3RpdmU6IGZhbHNlLFxuICAgICAgaXNSZXBseUZyb21BY3RpdmU6IGZhbHNlLFxuICAgICAgZWRpdE1vZGU6IGZhbHNlLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLm5ld1JlYWN0aW9uU3RvcmVkTGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgc2VsZi5vbk5ld1JlYWN0aW9uU3RvcmVkKGV2ZW50LmRldGFpbCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtbmV3LXJlYWN0aW9uLXN0b3JlZCcsIHNlbGYubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lcilcblxuICAgIHNlbGYucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25FZGl0ZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1lZGl0ZWQnLCBzZWxmLnJlYWN0aW9uRWRpdGVkTGlzdGVuZXIpXG5cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgdGhpcy5uZXdSZWFjdGlvblN0b3JlZExpc3RlbmVyKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZWRpdGVkJywgdGhpcy5yZWFjdGlvbkVkaXRlZExpc3RlbmVyKTtcbiAgfVxuXG4gIHNob3dNZW51KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc01lbnVBY3RpdmU6IHRydWUgfSk7XG4gIH1cblxuICB0b2dnbGVSZXBseUZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzUmVwbHlGcm9tQWN0aXZlOiAhdGhpcy5zdGF0ZS5pc1JlcGx5RnJvbUFjdGl2ZSB9KTtcbiAgfVxuXG4gIHRvZ2dsZUVkaXRGb3JtKHdoYXQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6ICF0aGlzLnN0YXRlLmVkaXRNb2RlIH0pO1xuICB9XG5cbiAgY2FuRWRpdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kYXRhLmNhbi5lZGl0O1xuICB9XG5cbiAgY2FuRGVsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRhdGEuY2FuLmRlbGV0ZTtcbiAgfVxuXG4gIGNhbkxpa2UoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmlzQ2xvc2VkKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHJlcXVpcmVkVXNlclJvbGUgPSB0aGlzLmNvbmZpZy5yZXF1aXJlZFVzZXJSb2xlO1xuICAgIGxldCB1c2VyUm9sZSA9IHRoaXMucHJvcHMudXNlciAmJiB0aGlzLnByb3BzLnVzZXIucm9sZTtcbiAgICAgIHJldHVybiAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ2Fub255bW91cycgJiYgdXNlclJvbGUgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdtZW1iZXInICYmICggdXNlclJvbGUgPT0gJ21lbWJlcicgfHwgdXNlclJvbGUgPT0gJ2VkaXRvcicgfHwgdXNlclJvbGUgPT0gJ21vZGVyYXRvcicgfHwgdXNlclJvbGUgPT0gJ2FkbWluJyApICkgIHx8XG4gICAgICAgICggcmVxdWlyZWRVc2VyUm9sZSA9PSAnZWRpdG9yJyAmJiAoIHVzZXJSb2xlID09ICdlZGl0b3InIHx8IHVzZXJSb2xlID09ICdtb2RlcmF0b3InIHx8IHVzZXJSb2xlID09ICdhZG1pbicgKSApICB8fFxuICAgICAgICAoIHJlcXVpcmVkVXNlclJvbGUgPT0gJ21vZGVyYXRvcicgJiYgKCB1c2VyUm9sZSA9PSAnbW9kZXJhdG9yJyB8fCB1c2VyUm9sZSA9PSAnYWRtaW4nICkgKSAgfHxcbiAgICAgICAgKCByZXF1aXJlZFVzZXJSb2xlID09ICdhZG1pbicgJiYgdXNlclJvbGUgPT0gJ2FkbWluJyApO1xuICB9XG5cbiAgY2FuUmVwbHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGF0YS5jYW4ucmVwbHk7XG4gIH1cblxuICBzdWJtaXREZWxldGUoKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoIXNlbGYuY2FuRGVsZXRlKCkpIHJldHVybiBhbGVydCgnVSBrdW50IGRlemUgcmVhY3RpZSBuaWV0IHZlcndpamRlcmVuJyk7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50LyR7ICBzZWxmLnByb3BzLmRhdGEuaWR9YDtcbiAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICBsZXQgYm9keSA9IHt9O1xuXG4gICAgZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgIH0pXG4gICAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyByZXNwb25zZS50ZXh0KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICBzZWxmLnNldFN0YXRlKHsgaXNEZWxldGVkOiB0cnVlIH0pO1xuXG5cdFx0ICAgIGxldCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnb3NjLXJlYWN0aW9uLWRlbGV0ZWQnLCB7IGRldGFpbDogeyBpZGVhSWQ6IHNlbGYuY29uZmlnLmlkZWFJZCB9IH0pO1xuXHRcdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICB9KTtcblxuICB9XG5cbiAgc3VibWl0TGlrZSgpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGlmICghc2VsZi5jYW5MaWtlKCkpIHJldHVybiBhbGVydCgnVSBrdW50IGRlemUgcmVhY3RpZSBuaWV0IGxpa2VuJyk7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50LyR7ICBzZWxmLnByb3BzLmRhdGEuaWQgIH0vdm90ZWA7XG4gICAgbGV0IGhlYWRlcnMgPSBPcGVuU3RhZENvbXBvbmVudExpYnMuYXBpLmdldEhlYWRlcnMoc2VsZi5jb25maWcpO1xuXG4gICAgbGV0IGJvZHkgPSB7fTtcblxuICAgIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgfSlcbiAgICAgIC50aGVuKCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHsgeWVzOiBqc29uLnllcywgaGFzVXNlclZvdGVkOiBqc29uLmhhc1VzZXJWb3RlZCB9KTtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IHllczoganNvbi55ZXMsIGhhc1VzZXJWb3RlZDoganNvbi5oYXNVc2VyVm90ZWQgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgZXJyb3IudGhlbihmdW5jdGlvbihtZXNzYWdlcykgeyByZXR1cm4gY29uc29sZS5sb2cobWVzc2FnZXMpO30gKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBvbk5ld1JlYWN0aW9uU3RvcmVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzTWVudUFjdGl2ZTogZmFsc2UsIGlzUmVwbHlGcm9tQWN0aXZlOiBmYWxzZSB9KTtcbiAgfVxuXG4gIG9uUmVhY3Rpb25FZGl0ZWQocmVhY3Rpb24pIHtcbiAgICBpZiAocmVhY3Rpb24uaWQgPT0gdGhpcy5wcm9wcy5kYXRhLmlkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6IGZhbHNlLCBpc01lbnVBY3RpdmU6IGZhbHNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGF0YSA9IHNlbGYucHJvcHMuZGF0YSB8fCB7IGNhbjoge30gfTtcblxuICAgIGlmIChkYXRhLmlzRGVsZXRlZCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgaXNBZG1pbiA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy51c2VyLmhhc1JvbGUoZGF0YS51c2VyLCAnZWRpdG9yJykgPyAnb3NjLWlzLWFkbWluJyA6ICcnO1xuICAgIGxldCBtZXRhZGF0YUhUTUwgPSA8ZGl2IGNsYXNzTmFtZT17YG9zYy1yZWFjdGlvbi11c2VyICR7aXNBZG1pbn1gfT57ZGF0YS51c2VyLm5pY2tOYW1lIHx8IGRhdGEudXNlci5mdWxsTmFtZSB8fCBgJHtkYXRhLnVzZXIuZmlyc3ROYW1lIH0gJHsgIGRhdGEudXNlci5sYXN0TmFtZX1gfTwvZGl2PlxuXG4gICAgbGV0IG1lbnVIVE1MID0gbnVsbDtcbiAgICBpZiAoIHNlbGYuY2FuRWRpdCgpICYmIHNlbGYuY2FuRGVsZXRlKCkgKSB7XG4gICAgICBtZW51SFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9eyBgb3NjLXJlYWN0aW9uLW1lbnUkeyAgIHNlbGYuc3RhdGUuaXNNZW51QWN0aXZlID8gJyBvc2MtcmVhY3Rpb24taGFtYnVyZ2VyLWFjdGl2ZScgOiAnJ31gIH0gb25DbGljaz17ICgpID0+IHsgc2VsZi5zaG93TWVudSgpOyB9fT5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZGVsZXRlXCIgdGl0bGU9XCJBcmd1bWVudCB2ZXJ3aWpkZXJlblwiIG9uQ2xpY2s9eyAoKSA9PiB7IGlmIChjb25maXJtKCdXZWV0IGplIGhldCB6ZWtlcj8nKSkgc2VsZi5zdWJtaXREZWxldGUoKTsgfSB9Lz5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZWRpdFwiIHRpdGxlPVwiQXJndW1lbnQgYmV3ZXJrZW5cIiBvbkNsaWNrPXsgKCkgPT4gc2VsZi50b2dnbGVFZGl0Rm9ybSgpIH0vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGRlc2NyaXB0aW9uSFRNTCA9ICg8ZGl2IGNsYXNzTmFtZT1cIm9zYy1yZWFjdGlvbi1kZXNjcmlwdGlvblwiPntkYXRhLmRlc2NyaXB0aW9ufTwvZGl2Pik7XG4gICAgaWYgKHNlbGYuc3RhdGUuZWRpdE1vZGUpIHtcbiAgICAgIGRlc2NyaXB0aW9uSFRNTCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb24tZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gY29uZmlnPXt7IC4uLnNlbGYuY29uZmlnLCBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbiwgYXJndW1lbnRJZDogZGF0YS5pZCB9fSB1c2VyPXtzZWxmLnN0YXRlLnVzZXJ9IHJlZj17ZWwgPT4gKHNlbGYuZWRpdEZvcm0gPSBlbCl9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBsaWtlQnV0dG9uSFRNTCA9IG51bGw7XG4gICAgaWYgKCFkYXRhLnBhcmVudElkKSB7XG4gICAgICBsaWtlQnV0dG9uSFRNTCA9IChcblx0XHRcdCAgPGEgY2xhc3NOYW1lPXsgYG9zYy1yZWFjdGlvbi1saWtlLWJ1dHRvbiR7ICggdHlwZW9mIHNlbGYuc3RhdGUuaGFzVXNlclZvdGVkICE9ICd1bmRlZmluZWQnID8gc2VsZi5zdGF0ZS5oYXNVc2VyVm90ZWQgOiBkYXRhLmhhc1VzZXJWb3RlZCApID8gJyBvc2MtcmVhY3Rpb24tbGlrZS1idXR0b24taGFzdm90ZWQnIDogJyd9YCB9IG9uQ2xpY2s9eyAoKSA9PiBzZWxmLnN1Ym1pdExpa2UoKSB9PlxuXHRcdFx0XHQgIE1lZSBlZW5zICg8c3Bhbj57KCB0eXBlb2Ygc2VsZi5zdGF0ZS55ZXMgIT0gJ3VuZGVmaW5lZCcgPyBzZWxmLnN0YXRlLnllcyA6IGRhdGEueWVzICkgfCAwfTwvc3Bhbj4pXG4gICAgICAgIDwvYT5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHJlcGx5QnV0dG9uSFRNTCA9IG51bGw7XG4gICAgbGV0IHJlcGx5Rm9ybUhUTUwgPSBudWxsO1xuICAgIGlmIChzZWxmLmNhblJlcGx5KCkgJiYgIXNlbGYuY29uZmlnLmlzQ2xvc2VkKSB7XG4gICAgICByZXBseUJ1dHRvbkhUTUwgPSAoPGEgb25DbGljaz17ICgpID0+IHNlbGYudG9nZ2xlUmVwbHlGb3JtKCkgfSBjbGFzc05hbWU9XCJvc2MtcmVwbHktYnV0dG9uXCI+UmVhZ2VyZW48L2E+KTtcbiAgICAgIGlmIChzZWxmLnN0YXRlLmlzUmVwbHlGcm9tQWN0aXZlKSB7XG4gICAgICAgIGxldCBjb25maWcgPSB7IC4uLnNlbGYuY29uZmlnLCBwYXJlbnRJZDogZGF0YS5pZCB9O1xuICAgICAgICBjb25maWcuZm9ybUludHJvID0gJyc7XG4gICAgICAgIHJlcGx5Rm9ybUhUTUwgPSAoXG5cdFx0XHQgICAgPGRpdiBpZD17YG9zYy1yZWFjdGlvbi0ke2RhdGEuaWR9YH0gY2xhc3NOYW1lPVwib3NjLXJlcGx5XCI+XG4gICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbkZvcm0gY29uZmlnPXtjb25maWd9IHVzZXI9e3NlbGYuc3RhdGUudXNlcn0gcmVmPXtlbCA9PiAoc2VsZi5lZGl0Rm9ybSA9IGVsKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXBsaWVzSFRNTCA9IG51bGw7XG4gICAgaWYgKGRhdGEucmVhY3Rpb25zICYmIGRhdGEucmVhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgcmVwbGllc0hUTUwgPSAoXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJvc2MtcmVhY3Rpb25zLWxpc3RcIj5cbiAgICAgICAgICB7ZGF0YS5yZWFjdGlvbnMubWFwKChyZWFjdGlvbikgPT4ge1xuXG4gICAgICAgICAgICBsZXQga2V5ID0gYG9zYy1yZWFjdGlvbi1rZXktJHsgICByZWFjdGlvbi5pZCB8fCBwYXJzZUludCggMTAwMDAwMCAqIE1hdGgucmFuZG9tKCkgKX1gO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPGxpIGtleT17a2V5fT5cbiAgICAgICAgICAgICAgICA8T3BlblN0YWRDb21wb25lbnRSZWFjdGlvbiBjb25maWc9e3NlbGYuY29uZmlnfSBjbGFzc05hbWU9XCJvc2MtcmVwbHlcIiB1c2VyPXtzZWxmLnN0YXRlLnVzZXJ9IGRhdGE9e3JlYWN0aW9ufS8+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvdWw+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuXG5cdFx0XHQgIDxkaXYgaWQ9e2Bvc2MtcmVhY3Rpb24tJHtkYXRhLmlkfWB9IGNsYXNzTmFtZT17IHNlbGYucHJvcHMuY2xhc3NOYW1lIHx8ICdvc2MtcmVhY3Rpb24nIH0+XG5cbiAgICAgICAgICB7bWVudUhUTUx9XG5cbiAgICAgICAgICB7bWV0YWRhdGFIVE1MfVxuXHRcdFx0XHQgIDxkaXYgY2xhc3NOYW1lPVwib3NjLXJlYWN0aW9uLWRhdGVcIj57ZGF0YS5jcmVhdGVEYXRlSHVtYW5pemVkfTwvZGl2PlxuICAgICAgICAgIHtkZXNjcmlwdGlvbkhUTUx9XG5cbiAgICAgICAgICB7bGlrZUJ1dHRvbkhUTUx9XG5cdFx0XHQgICAge3JlcGx5QnV0dG9uSFRNTH1cblxuXHRcdCAgICA8L2Rpdj5cblxuXHRcdFx0ICB7cmVwbHlGb3JtSFRNTH1cbiAgICAgICAge3JlcGxpZXNIVE1MfVxuXG5cdFx0ICA8L2Rpdj5cblxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQvaW5kZXguanN4JztcbmltcG9ydCBPcGVuU3RhZENvbXBvbmVudExpYnMgZnJvbSAnLi4vLi4vbGlicy9pbmRleC5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIGZyb20gJy4vcmVhY3Rpb24tZm9ybS5qc3gnO1xuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gZnJvbSAnLi9yZWFjdGlvbi5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBleHRlbmRzIE9wZW5TdGFkQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuXG4gICAgc3VwZXIocHJvcHMsIHtcbiAgICAgIHNjcm9sbFRvTmV3UmVhY3Rpb246IHRydWUsXG4gICAgICBpc0Nsb3NlZDogZmFsc2UsXG4gICAgICBjbG9zZWRUZXh0OiAnRGUgcmVhY3RpZW1vZ2VsaWpraGVpZCBpcyBnZXNsb3RlbicsXG4gICAgICBzZW50aW1lbnQ6IHVuZGVmaW5lZCxcbiAgICAgIHNpdGVJZDogbnVsbCxcbiAgICAgIGlkZWFJZDogbnVsbCxcbiAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgdXNlcjogbnVsbCxcbiAgICAgIGxvZ2luVXJsOiAnJyxcbiAgICAgIGFwaToge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIGhlYWRlcnM6IG51bGwsXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWRVc2VyUm9sZTogJ21lbWJlcicsXG4gICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICBmb3JtSW50cm86ICcnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXI6IHRoaXMuY29uZmlnLnVzZXIsXG4gICAgICByZWFjdGlvbnM6IFtdLFxuICAgIH07XG5cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyB1c2VyXG4gICAgaWYgKCEoIHNlbGYuc3RhdGUudXNlciAmJiBzZWxmLnN0YXRlLnVzZXIucm9sZSApKSB7XG4gICAgICBPcGVuU3RhZENvbXBvbmVudExpYnMudXNlci5nZXRVc2VyKHsgdXNlcjogc2VsZi5jb25maWcudXNlciwgand0OiBzZWxmLmNvbmZpZy5qd3QsIHNpdGVJZDogc2VsZi5jb25maWcuc2l0ZUlkLCBhcGk6IHNlbGYuY29uZmlnLmFwaSB9LCAoZXJyLCB1c2VyKSA9PiB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyB1c2VyIH0sICgpID0+IHtcbiAgICAgICAgICBzZWxmLmZldGNoRGF0YSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmZldGNoRGF0YSgpO1xuICAgIH1cblxuICAgIHNlbGYubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uTmV3UmVhY3Rpb25TdG9yZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1uZXctcmVhY3Rpb24tc3RvcmVkJywgc2VsZi5uZXdSZWFjdGlvblN0b3JlZExpc3RlbmVyKTtcblxuICAgIHNlbGYucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25FZGl0ZWQoZXZlbnQuZGV0YWlsKTtcbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ29zYy1yZWFjdGlvbi1lZGl0ZWQnLCBzZWxmLnJlYWN0aW9uRWRpdGVkTGlzdGVuZXIpO1xuXG4gICAgc2VsZi5yZWFjdGlvbkRlbGV0ZWRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBzZWxmLm9uUmVhY3Rpb25EZWxldGVkKGV2ZW50LmRldGFpbCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvc2MtcmVhY3Rpb24tZGVsZXRlZCcsIHNlbGYucmVhY3Rpb25EZWxldGVkTGlzdGVuZXIpO1xuXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdvc2MtbmV3LXJlYWN0aW9uLXN0b3JlZCcsIHRoaXMubmV3UmVhY3Rpb25TdG9yZWRMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXJlYWN0aW9uLWVkaXRlZCcsIHRoaXMucmVhY3Rpb25FZGl0ZWRMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3NjLXJlYWN0aW9uLWRlbGV0ZWQnLCB0aGlzLnJlYWN0aW9uRGVsZXRlZExpc3RlbmVyKTtcbiAgfVxuXG4gIGZldGNoRGF0YShuZXh0KSB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgdXJsID0gYCR7c2VsZi5jb25maWcuYXBpICYmIHNlbGYuY29uZmlnLmFwaS51cmwgICB9L2FwaS9zaXRlLyR7ICBzZWxmLmNvbmZpZy5zaXRlSWQgIH0vaWRlYS8keyAgc2VsZi5jb25maWcuaWRlYUlkICB9L2FyZ3VtZW50P3NlbnRpbWVudD0keyAgc2VsZi5jb25maWcuc2VudGltZW50ICB9JndpdGhVc2VyPTEmd2l0aFVzZXJWb3RlPTEmd2l0aFZvdGVDb3VudD0xJmluY2x1ZGVSZWFjdGlvbnNPblJlYWN0aW9ucz0xYDtcbiAgICBsZXQgaGVhZGVycyA9IE9wZW5TdGFkQ29tcG9uZW50TGlicy5hcGkuZ2V0SGVhZGVycyhzZWxmLmNvbmZpZyk7XG5cbiAgICBmZXRjaCh1cmwsIHsgaGVhZGVycyB9KVxuICAgICAgLnRoZW4oIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGpzb24pIHtcblxuICAgICAgICBsZXQgc3RhdGUgPSB7IC4uLnNlbGYuc3RhdGUgfTtcbiAgICAgICAgc3RhdGUucmVhY3Rpb25zID0ganNvbjtcbiAgICAgICAgc3RhdGUucmVhY3Rpb25zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICByZXR1cm4gYS5jcmVhdGVkQXQgPCBiLmNyZWF0ZWRBdDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXRlLnJlYWN0aW9ucyk7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChuZXh0KSByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9KTtcblxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIGVycm9yLnRoZW4oZnVuY3Rpb24obWVzc2FnZXMpIHsgcmV0dXJuIGNvbnNvbGUubG9nKG1lc3NhZ2VzKTt9ICk7XG4gICAgICB9KTtcblxuICB9XG5cbiAgb25OZXdSZWFjdGlvblN0b3JlZChyZWFjdGlvbikge1xuICAgIHRoaXMuZmV0Y2hEYXRhKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zY3JvbGxUb05ld1JlYWN0aW9uKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG9zYy1yZWFjdGlvbi0keyAgcmVhY3Rpb24uaWR9YCk7XG4gICAgICAgIGlmICggZWxlbWVudCApIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBvc2MtcmVhY3Rpb24tJHsgIHJlYWN0aW9uLmlkfWApLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBvblJlYWN0aW9uRWRpdGVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIG9uUmVhY3Rpb25EZWxldGVkKHJlYWN0aW9uKSB7XG4gICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCByZWFjdGlvbnMgPVxuICAgICAgPHVsIGNsYXNzTmFtZT1cIm9zYy1yZWFjdGlvbnMtbGlzdFwiPlxuICAgICAgICB7c2VsZi5zdGF0ZS5yZWFjdGlvbnMubWFwKChyZWFjdGlvbikgPT4ge1xuXG4gICAgICAgICAgbGV0IGtleSA9IGBvc2MtcmVhY3Rpb24ta2V5LSR7ICAgcmVhY3Rpb24uaWQgfHwgcGFyc2VJbnQoIDEwMDAwMDAgKiBNYXRoLnJhbmRvbSgpICl9YDtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGtleT17a2V5fT5cbiAgICAgICAgICAgICAgPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb24gY29uZmlnPXtzZWxmLmNvbmZpZ30gdXNlcj17c2VsZi5zdGF0ZS51c2VyfSBkYXRhPXt7IC4uLnJlYWN0aW9uIH19Lz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKTtcblxuICAgICAgICB9KX1cbiAgICAgIDwvdWw+O1xuXG4gICAgbGV0IHRpdGxlID0gc2VsZi5jb25maWcudGl0bGUgPyA8aDM+e3NlbGYuY29uZmlnLnRpdGxlfTwvaDM+IDogbnVsbDtcblxuICAgIGxldCByZWFjdGlvbkZvcm1IVE1MID0gPE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25Gb3JtIGNvbmZpZz17c2VsZi5jb25maWd9IHVzZXI9e3NlbGYuc3RhdGUudXNlcn0vPjtcbiAgICBpZiAoc2VsZi5jb25maWcuaXNDbG9zZWQpIHtcbiAgICAgIGlmIChzZWxmLmNvbmZpZy5jbG9zZWRUZXh0KSB7XG4gICAgICAgIHJlYWN0aW9uRm9ybUhUTUwgPSA8ZGl2IGNsYXNzTmFtZT1cIm9zYy1jbG9zZWQtdGV4dFwiPntzZWxmLmNvbmZpZy5jbG9zZWRUZXh0fTwvZGl2PlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVhY3Rpb25Gb3JtSFRNTCA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD17dGhpcy5pZH0gY2xhc3NOYW1lPXtzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnb3NjLXJlYWN0aW9ucyd9IHJlZj17KGVsKSA9PiB7IHRoaXMuaW5zdGFuY2UgPSBlbDsgfX0gPlxuXG4gICAgICAgIHt0aXRsZX1cblxuICAgICAgICB7cmVhY3Rpb25Gb3JtSFRNTH1cblxuICAgICAgICB7cmVhY3Rpb25zfVxuICAgICAgICA8YnIvPjxici8+XG5cbiAgICAgIDwvZGl2PlxuICAgICk7XG5cbiAgfVxuXG59XG4iLCIvLyBwb2x5ZmlsbHNcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLy8gcmVhY3RcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuLy8gaW1wb3J0IGNzcyB0byBtYWtlIHN1cmUgaXQgaXMgZ2VuZXJhdGVkIGluIHRoZSByZXN1bHRcbmltcG9ydCAnLi9jc3MvZGVmYXVsdC5sZXNzJztcblxuLy8gdGhlIG1vZHVsZVxuaW1wb3J0IE9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zIGZyb20gJy4vY29tcG9uZW50L3JlYWN0aW9ucy5qc3gnO1xuXG4vLyByZW5kZXIgZWxlbWVudHNcbk9wZW5TdGFkQ29tcG9uZW50UmVhY3Rpb25zLnJlbmRlckVsZW1lbnQgPSBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCBlbGVtLCBjb25maWcgKSB7XG4gIGxldCBhdHRyaWJ1dGVzID0gZWxlbS5hdHRyaWJ1dGVzO1xuXHRSZWFjdERPTS5yZW5kZXIoIDxPcGVuU3RhZENvbXBvbmVudFJlYWN0aW9ucyBhdHRyaWJ1dGVzPXthdHRyaWJ1dGVzfSBjb25maWc9e2NvbmZpZ30vPiwgZWxlbSlcbn1cblxuZXhwb3J0IHtcbiAgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMgYXMgZGVmYXVsdCxcbiAgT3BlblN0YWRDb21wb25lbnRSZWFjdGlvbnMgYXMgUmVhY3Rpb25zLFxufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==