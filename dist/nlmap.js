/*! For license information please see nlmap.js.LICENSE.txt */
window.OpenStadComponents=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=96)}([function(t,e){t.exports=window.React},function(t,e,r){"use strict";r.d(e,"a",(function(){return y}));var n=r(4),o=r.n(n),i=r(0),a=r.n(i);r(74);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function f(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=h(t);if(e){var o=h(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return p(this,r)}}function p(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?d(t):e}function d(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(a,t);var e,r,n,i=f(a);function a(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};c(this,a);var s=d(e=i.call(this,t));if(t.attributes&&Object.keys(t.attributes).forEach((function(e){var r=t.attributes[e];s[r.name]=r.value})),"string"==typeof s.config)try{s.config=JSON.parse(s.config)}catch(t){}var u=t.config||{};return u=v(u),s.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},r,n,u),s.divId=s.divId||s.config&&s.config.divId||t.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[s.divId]=s,e}return e=a,(r=[{key:"componentDidMount",value:function(t,e){}}])&&u(e.prototype,r),n&&u(e,n),a}(a.a.Component);function v(t){return"object"!=s(t)||Object.keys(t).forEach((function(e){void 0!==t[e]&&null!=t[e]||delete t[e],"object"==s(t[e])&&(t[e]=v(t[e]))})),t}},,function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||Function("return this")()}).call(this,r(21))},function(t,e,r){(function(t){!function(e){var r=function(t){return o(!0===t,!1,arguments)};function n(t,e){if("object"!==i(t))return e;for(var r in e)"object"===i(t[r])&&"object"===i(e[r])?t[r]=n(t[r],e[r]):t[r]=e[r];return t}function o(t,e,o){var a=o[0],s=o.length;(t||"object"!==i(a))&&(a={});for(var c=0;c<s;++c){var u=o[c];if("object"===i(u))for(var l in u)if("__proto__"!==l){var f=t?r.clone(u[l]):u[l];a[l]=e?n(a[l],f):f}}return a}function i(t){return{}.toString.call(t).slice(8,-1).toLowerCase()}r.recursive=function(t){return o(!0===t,!0,arguments)},r.clone=function(t){var e,n,o=t,a=i(t);if("array"===a)for(o=[],n=t.length,e=0;e<n;++e)o[e]=r.clone(t[e]);else if("object"===a)for(e in o={},t)o[e]=r.clone(t[e]);return o},e?t.exports=r:window.merge=r}(t&&"object"==typeof t.exports&&t.exports)}).call(this,r(73)(t))},function(t,e){t.exports=window.ReactDOM},,function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(9);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){"use strict";(function(t){var e="URLSearchParams"in self,r="Symbol"in self&&"iterator"in Symbol,n="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(t){return t&&a.indexOf(Object.prototype.toString.call(t))>-1};function c(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function l(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(e){if(e.bodyUsed)return t.reject(new TypeError("Already read"));e.bodyUsed=!0}function d(e){return new t((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function h(t){var e=new FileReader,r=d(e);return e.readAsArrayBuffer(t),r}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(t){var r;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:o&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:e&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():i&&n&&((r=t)&&DataView.prototype.isPrototypeOf(r))?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(t)||s(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):e&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var e=p(this);if(e)return e;if(this._bodyBlob)return t.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return t.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return t.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||t.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var e,r,n,o=p(this);if(o)return o;if(this._bodyBlob)return e=this._bodyBlob,r=new FileReader,n=d(r),r.readAsText(e),n;if(this._bodyArrayBuffer)return t.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return t.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=c(t),e=u(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},f.prototype.delete=function(t){delete this.map[c(t)]},f.prototype.get=function(t){return t=c(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(c(t))},f.prototype.set=function(t,e){this.map[c(t)]=u(e)},f.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},f.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),l(t)},f.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),l(t)},f.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),l(t)},r&&(f.prototype[Symbol.iterator]=f.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function _(t,e){var r,n,o=(e=e||{}).body;if(t instanceof _){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),m.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function g(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}_.prototype.clone=function(){return new _(this,{body:this._bodyInit})},v.call(_.prototype),v.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var w=[301,302,303,307,308];g.redirect=function(t,e){if(-1===w.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})};var k=self.DOMException;try{new k}catch(t){(k=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),k.prototype.constructor=k}function O(e,r){return new t((function(t,o){var i=new _(e,r);if(i.signal&&i.signal.aborted)return o(new k("Aborted","AbortError"));var a=new XMLHttpRequest;function s(){a.abort()}a.onload=function(){var e,r,n={status:a.status,statusText:a.statusText,headers:(e=a.getAllResponseHeaders()||"",r=new f,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var e=t.split(":"),n=e.shift().trim();if(n){var o=e.join(":").trim();r.append(n,o)}})),r)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;t(new g(o,n))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new k("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&n&&(a.responseType="blob"),i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",s),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",s)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}O.polyfill=!0,self.fetch||(self.fetch=O,self.Headers=f,self.Request=_,self.Response=g)}).call(this,r(23))},function(t,e,r){var n=r(8),o=r(13),i=r(25);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(8),o=r(27),i=r(14),a=r(26),s=Object.defineProperty;e.f=n?s:function(t,e,r){if(i(t),e=a(e,!0),i(r),o)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(10);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},,function(t,e,r){var n=r(45),o=r(47);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(3),o=r(12);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},function(t,e){t.exports={}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},,function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},,function(t,e,r){t.exports=r(51).Promise},function(t,e,r){var n=r(8),o=r(55),i=r(25),a=r(16),s=r(26),c=r(7),u=r(27),l=Object.getOwnPropertyDescriptor;e.f=n?l:function(t,e){if(t=a(t),e=s(e,!0),u)try{return l(t,e)}catch(t){}if(c(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(10);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(8),o=r(9),i=r(28);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(3),o=r(10),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(30),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(t){return o.call(t)}),t.exports=n.inspectSource},function(t,e,r){var n=r(3),o=r(17),i="__core-js_shared__",a=n[i]||o(i,{});t.exports=a},function(t,e,r){var n=r(32),o=r(33),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,r){var n=r(59),o=r(30);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:n?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e,r){var n=r(62),o=r(3),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},function(t,e,r){var n=r(7),o=r(16),i=r(36).indexOf,a=r(18);t.exports=function(t,e){var r,s=o(t),c=0,u=[];for(r in s)!n(a,r)&&n(s,r)&&u.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~i(u,r)||u.push(r));return u}},function(t,e,r){var n=r(16),o=r(48),i=r(64),a=function(t){return function(e,r,a){var s,c=n(e),u=o(c.length),l=i(a,u);if(t&&r!=r){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===r)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(9);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},,function(t,e,r){var n=r(3),o=r(24).f,i=r(12),a=r(56),s=r(17),c=r(60),u=r(66);t.exports=function(t,e){var r,l,f,p,d,h=t.target,y=t.global,v=t.stat;if(r=y?n:v?n[h]||s(h,{}):(n[h]||{}).prototype)for(l in e){if(p=e[l],f=t.noTargetGet?(d=o(r,l))&&d.value:r[l],!u(y?l:h+(v?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;c(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(r,l,p,t)}}},function(t,e,r){var n=r(50),o=r(69),i=r(13),a=n("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),t.exports=function(t){s[a][t]=!0}},function(t,e,r){var n=r(8),o=r(9),i=r(7),a=Object.defineProperty,s={},c=function(t){throw t};t.exports=function(t,e){if(i(s,t))return s[t];e||(e={});var r=[][t],u=!!i(e,"ACCESSORS")&&e.ACCESSORS,l=i(e,0)?e[0]:c,f=i(e,1)?e[1]:void 0;return s[t]=!!r&&!o((function(){if(u&&!n)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:c}):t[1]=1,r.call(t,l,f)}))}},function(t,e,r){var n=r(3),o=r(49),i=Function.call;t.exports=function(t,e,r){return o(i,n[t].prototype[e],r)}},,function(t,e,r){var n=r(9),o=r(46),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(37),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e,r){var n=r(67);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(3),o=r(32),i=r(7),a=r(33),s=r(38),c=r(68),u=o("wks"),l=n.Symbol,f=c?l:l&&l.withoutSetter||a;t.exports=function(t){return i(u,t)||(s&&i(l,t)?u[t]=l[t]:u[t]=f("Symbol."+t)),u[t]}},function(t,e,r){(function(e,n){var o;o=function(){"use strict";function t(t){return"function"==typeof t}var o=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},i=0,a=void 0,s=void 0,c=function(t,e){y[i]=t,y[i+1]=e,2===(i+=2)&&(s?s(v):w())},u="undefined"!=typeof window?window:void 0,l=u||{},f=l.MutationObserver||l.WebKitMutationObserver,p="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),d="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var t=setTimeout;return function(){return t(v,1)}}var y=new Array(1e3);function v(){for(var t=0;t<i;t+=2)(0,y[t])(y[t+1]),y[t]=void 0,y[t+1]=void 0;i=0}var m,_,b,g,w=void 0;function k(t,e){var r=arguments,n=this,o=new this.constructor(E);void 0===o[C]&&U(o);var i,a=n._state;return a?(i=r[a-1],c((function(){return B(a,o,i,n._result)}))):F(n,o,t,e),o}function O(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(E);return A(e,t),e}p?w=function(){return e.nextTick(v)}:f?(_=0,b=new f(v),g=document.createTextNode(""),b.observe(g,{characterData:!0}),w=function(){g.data=_=++_%2}):d?((m=new MessageChannel).port1.onmessage=v,w=function(){return m.port2.postMessage(0)}):w=void 0===u?function(){try{var t=r(53);return a=t.runOnLoop||t.runOnContext,function(){a(v)}}catch(t){return h()}}():h();var C=Math.random().toString(36).substring(16);function E(){}var x=void 0,j=new I;function S(t){try{return t.then}catch(t){return j.error=t,j}}function P(e,r,n){r.constructor===e.constructor&&n===k&&r.constructor.resolve===O?function(t,e){1===e._state?T(t,e._result):2===e._state?L(t,e._result):F(e,void 0,(function(e){return A(t,e)}),(function(e){return L(t,e)}))}(e,r):n===j?L(e,j.error):void 0===n?T(e,r):t(n)?function(t,e,r){c((function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,(function(r){n||(n=!0,e!==r?A(t,r):T(t,r))}),(function(e){n||(n=!0,L(t,e))}),t._label);!n&&o&&(n=!0,L(t,o))}),t)}(e,r,n):T(e,r)}function A(t,e){var r;t===e?L(t,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(r=e)||"object"==typeof r&&null!==r?P(t,e,S(e)):T(t,e)}function M(t){t._onerror&&t._onerror(t._result),D(t)}function T(t,e){t._state===x&&(t._result=e,t._state=1,0!==t._subscribers.length&&c(D,t))}function L(t,e){t._state===x&&(t._state=2,t._result=e,c(M,t))}function F(t,e,r,n){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+1]=r,o[i+2]=n,0===i&&t._state&&c(D,t)}function D(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,a=0;a<e.length;a+=3)n=e[a],o=e[a+r],n?B(r,n,o,i):o(i);t._subscribers.length=0}}function I(){this.error=null}var R=new I;function B(e,r,n,o){var i=t(n),a=void 0,s=void 0,c=void 0,u=void 0;if(i){if((a=function(t,e){try{return t(e)}catch(t){return R.error=t,R}}(n,o))===R?(u=!0,s=a.error,a=null):c=!0,r===a)return void L(r,new TypeError("A promises callback cannot return that same promise."))}else a=o,c=!0;r._state!==x||(i&&c?A(r,a):u?L(r,s):1===e?T(r,a):2===e&&L(r,a))}var N=0;function U(t){t[C]=N++,t._state=void 0,t._result=void 0,t._subscribers=[]}function G(t,e){this._instanceConstructor=t,this.promise=new t(E),this.promise[C]||U(this.promise),o(e)?(this._input=e,this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):L(this.promise,new Error("Array Methods must be provided an Array"))}function q(t){this[C]=N++,this._result=this._state=void 0,this._subscribers=[],E!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof q?function(t,e){try{e((function(e){A(t,e)}),(function(e){L(t,e)}))}catch(e){L(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function K(){var t=void 0;if(void 0!==n)t=n;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=q}return G.prototype._enumerate=function(){for(var t=this.length,e=this._input,r=0;this._state===x&&r<t;r++)this._eachEntry(e[r],r)},G.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===O){var o=S(t);if(o===k&&t._state!==x)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===q){var i=new r(E);P(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},G.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===x&&(this._remaining--,2===t?L(n,r):this._result[e]=r),0===this._remaining&&T(n,this._result)},G.prototype._willSettleAt=function(t,e){var r=this;F(t,void 0,(function(t){return r._settledAt(1,e,t)}),(function(t){return r._settledAt(2,e,t)}))},q.all=function(t){return new G(this,t).promise},q.race=function(t){var e=this;return o(t)?new e((function(r,n){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(r,n)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},q.resolve=O,q.reject=function(t){var e=new this(E);return L(e,t),e},q._setScheduler=function(t){s=t},q._setAsap=function(t){c=t},q._asap=c,q.prototype={constructor:q,then:k,catch:function(t){return this.then(null,t)}},K(),q.polyfill=K,q.Promise=q,q},t.exports=o()}).call(this,r(52),r(21))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var c,u=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&d())}function d(){if(!l){var t=s(p);l=!0;for(var e=u.length;e;){for(c=u,u=[];++f<e;)c&&c[f].run();f=-1,e=u.length}c=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];u.push(new h(t,e)),1!==u.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){},,function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(3),o=r(12),i=r(7),a=r(17),s=r(29),c=r(57),u=c.get,l=c.enforce,f=String(String).split("String");(t.exports=function(t,e,r,s){var c=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof r&&("string"!=typeof e||i(r,"name")||o(r,"name",e),l(r).source=f.join("string"==typeof e?e:"")),t!==n?(c?!p&&t[e]&&(u=!0):delete t[e],u?t[e]=r:o(t,e,r)):u?t[e]=r:a(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},function(t,e,r){var n,o,i,a=r(58),s=r(3),c=r(10),u=r(12),l=r(7),f=r(31),p=r(18),d=s.WeakMap;if(a){var h=new d,y=h.get,v=h.has,m=h.set;n=function(t,e){return m.call(h,t,e),e},o=function(t){return y.call(h,t)||{}},i=function(t){return v.call(h,t)}}else{var _=f("state");p[_]=!0,n=function(t,e){return u(t,_,e),e},o=function(t){return l(t,_)?t[_]:{}},i=function(t){return l(t,_)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!c(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){var n=r(3),o=r(29),i=n.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,e){t.exports=!1},function(t,e,r){var n=r(7),o=r(61),i=r(24),a=r(13);t.exports=function(t,e){for(var r=o(e),s=a.f,c=i.f,u=0;u<r.length;u++){var l=r[u];n(t,l)||s(t,l,c(e,l))}}},function(t,e,r){var n=r(34),o=r(63),i=r(65),a=r(14);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){var n=r(3);t.exports=n},function(t,e,r){var n=r(35),o=r(19).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(37),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(9),o=/#|\.prototype\./,i=function(t,e){var r=s[a(t)];return r==u||r!=c&&("function"==typeof e?n(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=i.data={},c=i.NATIVE="N",u=i.POLYFILL="P";t.exports=i},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,r){var n=r(38);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n,o=r(14),i=r(70),a=r(19),s=r(18),c=r(72),u=r(28),l=r(31),f=l("IE_PROTO"),p=function(){},d=function(t){return"<script>"+t+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;h=n?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(n):((e=u("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var r=a.length;r--;)delete h.prototype[a[r]];return h()};s[f]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(p.prototype=o(t),r=new p,p.prototype=null,r[f]=t):r=h(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(8),o=r(13),i=r(14),a=r(71);t.exports=n?Object.defineProperties:function(t,e){i(t);for(var r,n=a(e),s=n.length,c=0;s>c;)o.f(t,r=n[c++],e[r]);return t}},function(t,e,r){var n=r(35),o=r(19);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(34);t.exports=n("document","documentElement")},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){r(75);var n=r(43);t.exports=n("Array","includes")},function(t,e,r){"use strict";var n=r(40),o=r(36).includes,i=r(41);n({target:"Array",proto:!0,forced:!r(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentNLMap}));var merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4),merge__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(merge__WEBPACK_IMPORTED_MODULE_0__),_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(100);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ownKeys(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(r),!0).forEach((function(e){_defineProperty(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function _defineProperty(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _createSuper(t){var e=_isNativeReflectConstruct();return function(){var r,n=_getPrototypeOf(t);if(e){var o=_getPrototypeOf(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _possibleConstructorReturn(this,r)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var OpenStadComponentNLMap=function(_OpenStadComponent){_inherits(OpenStadComponentNLMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentNLMap);function OpenStadComponentNLMap(t){var e;_classCallCheck(this,OpenStadComponentNLMap);var r=_assertThisInitialized(e=_super.call(this,t,{style:"standaard",marker:!1,search:!1,center:{latitude:52.37104644463586,longitude:4.900402911007405},zoom:14,zoomposition:"bottomleft",disableDefaultUI:!0,polygon:null,autoZoomAndCenter:!1}));switch(r.config.target=r.divId,r._loadedFiles=0,r.files=[{type:"css",href:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"},{type:"script",src:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"}],r.config.variant){case"amaps":r.files.push({type:"script",src:"https://map.data.amsterdam.nl/dist/amaps.iife.js"});break;default:r.files.push({type:"css",href:"https://nlmaps.nl/dist/assets/css/nlmaps.css"}),r.files.push({type:"script",src:"https://nlmaps.nl/dist/nlmaps.iife.js"})}return r.files.push({type:"css",href:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"}),r.files.push({type:"script",src:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"}),r.markers=r.config.markers||[],e}return _createClass(OpenStadComponentNLMap,[{key:"componentDidMount",value:function(t,e){var r=this;r.loadNextFile((function(){r.createMap(),r.mapIsReady=!0;var t=new CustomEvent("osc-map-is-ready",{detail:{id:r.divId}});document.dispatchEvent(t)}))}},{key:"loadNextFile",value:function(t){var e,r=this,n=r.files[r._loadedFiles];n&&("script"===n.type&&((e=document.createElement("script")).src=n.src,e.async=!0),"css"===n.type&&((e=document.createElement("link")).href=n.href,e.rel="stylesheet"),e&&(e.onload=function(){r.loadNextFile(t)},this.instance.appendChild(e)));r._loadedFiles==r.files.length&&t(),r._loadedFiles++}},{key:"createMap",value:function createMap(){var self=this;switch(self.config.variant){case"amaps":self.map=amaps.createMap(_objectSpread({},self.config));break;default:self.map=nlmaps.createMap(self.config)}if(0==self.config.zoomControl&&self.map.removeControl(self.map.zoomControl),self.config.clustering&&self.config.clustering.isActive&&L.markerClusterGroup){var iconCreateFunction=self.config.clustering.iconCreateFunction||_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__.a.bind(self);iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction)),self.markerClusterGroup=L.markerClusterGroup({iconCreateFunction:iconCreateFunction,showCoverageOnHover:self.config.clustering.showCoverageOnHover,maxClusterRadius:self.config.clustering.maxClusterRadius||80}),self.markerClusterGroup.on("clusterclick",self.onClusterClick),self.markerClusterGroup.on("animationend",self.onClusterAnimationEnd),self.map.addLayer(self.markerClusterGroup)}if(self.map.on("click",self.onMapClick),self.config.polygon&&self.createCutoutPolygon(self.config.polygon),self.markers.length&&self.markers.forEach((function(t){self.addMarker(t)})),self.config.autoZoomAndCenter){var centerOn="polygon"==self.config.autoZoomAndCenter&&self.config.polygon||self.markers&&self.markers.length&&self.markers;self.editorMarker&&(centerOn=self.editorMarker.position?[self.editorMarker]:self.config.polygon),centerOn&&self.setBoundsAndCenter(centerOn)}}},{key:"addMarkers",value:function(t){var e=this;t.forEach((function(t){e.addMarker(t)}))}},{key:"addMarker",value:function addMarker(markerData){var self=this,icon=markerData.icon,marker;if(!icon){var iconCreateFunction=self.config.iconCreateFunction;iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction),icon=iconCreateFunction())}marker=icon?L.marker([markerData.lat,markerData.lng],{icon:icon}):L.marker([markerData.lat,markerData.lng]),marker.visible=!0,marker.data=markerData.data,marker.doNotCluster=markerData.doNotCluster,markerData.href&&(markerData.onClick=function(){document.location.href=markerData.href});var onClick=self.onMarkerClick;return onClick&&("string"==typeof onClick&&(onClick=eval(onClick)),marker.on("click",onClick)),self.markerClusterGroup&&!markerData.doNotCluster?self.markerClusterGroup.addLayer(marker):self.map.addLayer(marker),self.markers.push(marker),marker}},{key:"removeMarker",value:function(t){if(t){var e=this.markers.indexOf(t);e>-1&&(this.markers.splice(e,1),this.map.removeLayer(t),this.markerClusterGroup.removeLayer(t))}}},{key:"updateMarker",value:function(t,e){if(e.location){var r=new L.LatLng(e.location.lat,e.location.lng);t.setLatLng(r)}}},{key:"createClusterIcon",value:function(t){var e=t.getChildCount();return L.divIcon({html:e,className:"osc-nlmap-icon-cluster",iconSize:L.point(20,20),iconAnchor:[20,10]})}},{key:"createCutoutPolygon",value:function(t){var e=L.polygon(t).getBounds().getCenter(),r=0,n=0;t.forEach((function(t,o){var i=Math.sin(t.lng-e.lng)*Math.cos(t.lat),a=Math.cos(e.lat)*Math.sin(t.lat)-Math.sin(e.lat)*Math.cos(t.lat)*Math.cos(t.lng-e.lng),s=180*Math.atan2(i,a)/Math.PI;45-s<r&&(r=45-s,n=o)}));var o=t.slice(0,n),i=t.slice(n,t.length);t=i.concat(o);var a=[{lat:-85,lng:-179.99},{lat:-85,lng:0},{lat:-85,lng:179.99},{lat:0,lng:179.99},{lat:85,lng:179.99},{lat:85,lng:0},{lat:85,lng:-179.99},{lat:85,lng:-179.99},{lat:0,lng:-179.99}],s=merge__WEBPACK_IMPORTED_MODULE_0___default()({color:"#d00",fillColor:"#000",fillOpacity:.15},this.config.polygonStyle),c=L.polygon([a,t],s);return this.map.addLayer(c),c}},{key:"removePolygon",value:function(t){t&&this.map.removeLayer(t)}},{key:"setBoundsAndCenter",value:function(t){var e=this;if(Array.isArray(t)){var r=[];if(t.forEach((function(t){t._latlng?t=t._latlng:t.position&&(t=t.position.coordinates?{lat:t.position.coordinates[0],lng:t.position.coordinates[1]}:t.position),r.push(t)})),1==r.length)e.map.panTo(new L.LatLng(r[0].lat,r[0].lng));else{var n=L.latLngBounds(r);e.map.fitBounds(n)}}else e.map.panTo(new L.LatLng(e.config.center.latitude,e.config.center.longitude))}},{key:"showMarkers",value:function(t){var e=this;t.forEach((function(t){e.showMarker(t)}))}},{key:"showMarker",value:function(t){var e=this;t.visible=!0,e.markerClusterGroup&&!t.doNotCluster?e.markerClusterGroup.addLayer(t):t.addTo(e.map)}},{key:"hideMarkers",value:function(t){var e=this;t.forEach((function(t){e.hideMarker(t)}))}},{key:"hideMarker",value:function(t){var e=this;t.visible=!1,e.markerClusterGroup&&!t.doNotCluster?e.markerClusterGroup.removeLayer(t):t.remove(e.map)}},{key:"setFilter",value:function(t){this.filterFunction=t,this.applyFilter()}},{key:"applyFilter",value:function(){var t=this;t.filterFunction?t.markers.forEach((function(e){t.filterFunction(e)?t.showMarker(e):t.hideMarker(e)})):t.markers.forEach((function(e){t.showMarker(e)}))}},{key:"isPointInPolygon",value:function(t,e){if(!t)return!1;if(!e)return!0;for(var r=t.lat,n=t.lng,o=!1,i=0,a=e.length-1;i<e.length;a=i++){var s=e[i].lat,c=e[i].lng,u=e[a].lat,l=e[a].lng;c>n!=l>n&&r<(u-s)*(n-c)/(l-c)+s&&(o=!o)}return o}},{key:"getPointInfo",value:function(t,e,r){var n="https://api.data.amsterdam.nl/bag/nummeraanduiding/?format=json&locatie=[[lat]],[[lng]],50".replace(/\[\[lat\]\]/,(t=t||{}).lat).replace(/\[\[lng\]\]/,t.lng);fetch(n).then((function(t){return t.json()})).then((function(n){var o=n&&n.results&&n.results[0]&&n.results[0].landelijk_id,i="https://api.data.amsterdam.nl/bag/nummeraanduiding/[[id]]/?format=json".replace(/\[\[id\]\]/,o);fetch(i).then((function(t){return t.json()})).then((function(n){n.lat=t.lat,n.lng=t.lng,r&&r(n,e)}))})).catch((function(t){console.log("Zoek adres: niet goed"),console.log(t),r&&r({},e)}))}},{key:"onMapClick",value:function(t){var e=new CustomEvent("osc-map-click",{detail:t});document.dispatchEvent(e)}},{key:"onMarkerClick",value:function(t){var e=new CustomEvent("osc-map-marker-click",{detail:t});document.dispatchEvent(e)}},{key:"onClusterClick",value:function(t){var e=new CustomEvent("osc-map-cluster-click",{detail:t});document.dispatchEvent(e)}},{key:"onClusterAnimationEnd",value:function(t){var e=new CustomEvent("osc-map-cluster-animation-end",{detail:t});document.dispatchEvent(e)}},{key:"render",value:function(){var t=this;return React.createElement("div",{id:this.divId,className:this.props.className||"osc-nlmap",ref:function(e){return t.instance=e}},React.createElement("div",{id:this.divId+"-map"}))}}]),OpenStadComponentNLMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a)},,,,,,,,,,,,,,,,,function(t,e,r){"use strict";r.r(e);r(11);var n=r(0),o=r.n(n),i=r(5),a=r.n(i),s=(r(119),r(79));r.d(e,"default",(function(){return s.a})),r.d(e,"NLMap",(function(){return s.a})),s.a.renderElement=function(t,e){var r=t.attributes;a.a.render(o.a.createElement(s.a,{attributes:r,config:e}),t)}},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";function amapsCreateClusterIcon(cluster){var self=this,count=cluster.getChildCount(),markers=cluster.getAllChildMarkers(),colors={},total=markers.length,isFaded=!1;markers.forEach((function(entry){var type=entry.data&&eval("entry.data.".concat(self.config.typeField)),tmp=self.config.types.find((function(t){return type&&(t.id==type||t.name==type)})),color=tmp&&(tmp.color||tmp.backgroundColor)||"#164995";null==type&&(type="undef"),colors[color]||(colors[color]=0),colors[color]++,entry.data&&entry.data.isFaded&&(isFaded=!0)}));var html='<svg viewBox="0 0 36 36"><circle cx="18" cy="18" r="14" fill="white"/>',soFar=0;return Object.keys(colors).forEach((function(t){var e=t,r=100*colors[t]/total;html+='  <path\n             d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"\n             fill="none"\n             transform="rotate('.concat(soFar/100*360,', 18, 18)"\n             stroke="').concat(e,'"\n             stroke-width="4"\n             stroke-dasharray="').concat(r,', 100"\n             />'),soFar+=r})),html+='<text x="18" y="21" text-anchor="middle" class="openstad-component-ideas-on-map-icon openstad-component-ideas-on-map-icon-text">'+count+"</text></svg>",L.divIcon({html:html,className:"openstad-component-ideas-on-map-icon-cluster",iconSize:L.point(36,36),iconAnchor:[18,18],isFaded:isFaded})}__webpack_require__.d(__webpack_exports__,"a",(function(){return amapsCreateClusterIcon}))},,,,,,,,,,,,,,,,,,,function(t,e,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,