/*! For license information please see all.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=136)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(4),o=n.n(r),i=n(0),a=n.n(i);n(74);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?p(e):t}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(this,a);var c=p(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var u=e.config||{};return u=y(u),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,u),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&u(t.prototype,n),r&&u(t,r),a}(a.a.Component);function y(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=y(e[t]))})),e}},function(e,t,n){"use strict";n(11),n(0),n(5),n(83);var r=n(4),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,s=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},u={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},d={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=s();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:s,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(u).includes(n)||(n="all"),u[n].includes(t)}},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=d},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<c;++s){var u=o[s];if("object"===i(u))for(var l in u)if("__proto__"!==l){var f=e?n.clone(u[l]):u[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(73)(e))},function(e,t){e.exports=window.ReactDOM},function(e,t,n){"use strict";n(11),n(0),n(5),n(88);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(u,e);var t,n,r,o=s(u);function u(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,u);var r=l(t=o.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:e.value,error:null},t.onChange=e.onChange,t}return t=u,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),u}(r.a);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return v(this,n)}}function v(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(i,e);var t,n,r,o=g(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&m(t.prototype,n),r&&m(t,r),i}(d);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return k(this,n)}}function k(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{allowMultiple:!1,imageserver:{process:"",fetch:""}});var n=[];return(e.value||[]).forEach((function(e){n.push({source:{url:e},options:{type:"local",file:{name:e},metadata:{poster:e}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this._loadedFiles=0,this.files=["https://unpkg.com/filepond/dist/filepond.js","https://unpkg.com/filepond-polyfill/dist/filepond-polyfill.js","https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js","https://unpkg.com/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js","https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js","https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.js"],this.loadNextFile()}},{key:"loadNextFile",value:function(){var e,t=this,n=t.files[t._loadedFiles];n&&((e=document.createElement("script")).src=n,e.async=!0,e&&(e.onload=function(){t.loadNextFile()},document.body.appendChild(e))),t._loadedFiles==t.files.length&&t.fileUploaderInit(),t._loadedFiles++}},{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"fileUploaderInit",value:function(){var e=this,t=document.querySelector(".osc-image-upload-container");if(t){FilePond.registerPlugin(FilePondPluginImagePreview),FilePond.registerPlugin(FilePondPluginFileValidateSize),FilePond.registerPlugin(FilePondPluginFileValidateType),FilePond.registerPlugin(FilePondPluginFilePoster);var n={acceptedFileTypes:["image/*"],allowFileSizeValidation:!0,allowMultiple:this.config.allowMultiple,allowReorder:!0,styleItemPanelAspectRatio:1,maxFileSize:"8mb",name:"image",maxFiles:5,allowBrowse:!0,files:this.state.uploadedFiles,server:{process:this.config.imageserver.process,fetch:this.config.imageserver.fetch},imageResizeTargetWidth:80,imageResizeTargetHeight:80,imageCropAspectRatio:"1:1",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"};e.imageuploader=FilePond.create(t,n),document.querySelector(".filepond--root"),document.querySelector(".filepond--root").addEventListener("FilePond:processfile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),document.querySelector(".filepond--root").addEventListener("FilePond:removefile",(function(t){t.detail&&t.detail.error&&console.log("Error uploding file: ",t.detail),e.fileUploaderUpdateCurrentInput()})),e.state.formfields&&e.imageuploader.addFiles(e.state.formfields.images)}}},{key:"fileUploaderUpdateCurrentInput",value:function(){var e=this;e.state.value=[],this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){try{var n="string"==typeof t.serverId?JSON.parse(t.serverId):t.serverId;e.state.value.push(n.url)}catch(e){console.log(e)}})),e.props.onChange({name:e.config.name,value:e.state.value})}},{key:"fileUploaderUploaderAddImages",value:function(e){this.imageuploader&&this.imageuploader.addFiles(e)}},{key:"render",value:function(){var e=null;return this.state.error&&(e=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen afbeelding geupload")),React.createElement("div",{className:"osc-image-upload-container"},React.createElement("input",{type:"file",className:"imageUploader-gebiedstool filepond-gebiedstool"}),e)}}])&&O(t.prototype,n),r&&O(t,r),i}(d);function C(e){return(C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=M(e);if(t){var o=M(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return T(this,n)}}function T(e,t){return!t||"object"!==C(t)&&"function"!=typeof t?x(e):t}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var D=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(i,e);var t,n,r,o=L(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(x(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&I(t.prototype,n),r&&I(t,r),i}(r.a);function N(e){return(N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=H(e);if(t){var o=H(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return U(this,n)}}function U(e,t){return!t||"object"!==N(t)&&"function"!=typeof t?q(e):t}function q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(i,e);var t,n,r,o=B(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=q(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(q(t)),n.onInputFocus=n.onInputFocus.bind(q(t)),n.onInputBlur=n.onInputBlur.bind(q(t)),n.onInputKeyUp=n.onInputKeyUp.bind(q(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(D,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&A(t.prototype,n),r&&A(t,r),i}(r.a);function W(e){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=$(e);if(t){var o=$(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Q(this,n)}}function Q(e,t){return!t||"object"!==W(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $(e){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(i,e);var t,n,r,o=J(i);function i(){return z(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&K(t.prototype,n),r&&K(t,r),i}(d);function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function X(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=oe(e);if(t){var o=oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return re(this,n)}}function re(e,t){return!t||"object"!==Y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(i,e);var t,n,r,o=ne(i);function i(){return X(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ee(t.prototype,n),r&&ee(t,r),i}(d);function ae(e){return(ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ce(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e,t){return(ue=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=de(e);if(t){var o=de(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return fe(this,n)}}function fe(e,t){return!t||"object"!==ae(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function de(e){return(de=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ue(e,t)}(i,e);var t,n,r,o=le(i);function i(){return ce(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e){return React.createElement("option",{value:e.value||"",key:e.value},e.description||e.title||e.value)}))),t)}}])&&se(t.prototype,n),r&&se(t,r),i}(d);function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ge(e,t){return(ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_e(e);if(t){var o=_e(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return be(this,n)}}function be(e,t){return!t||"object"!==he(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ge(e,t)}(i,e);var t,n,r,o=ve(i);function i(){return me(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ye(t.prototype,n),r&&ye(t,r),i}(d);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ce(e);if(t){var o=Ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}(i,e);var t,n,r,o=Re(i);function i(){return Ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.props.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Se(t.prototype,n),r&&Se(t,r),i}(d);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Le(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function De(e,t){return(De=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Be(e);if(t){var o=Be(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ae(this,n)}}function Ae(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?Fe(e):t}function Fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Be(e){return(Be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ue=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&De(e,t)}(i,e);var t,n,r,o=Ne(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Fe(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.value||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(_,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement(V,{config:Te(Te({},e.config),{},{inputType:"htmlarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(P,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement(V,{config:Te({inputType:"input"},e.config),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(ie,{config:e.config,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(Z,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(pe,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(we,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(Ie,{config:e.config,value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement(V,{config:Te(Te({},e.config),{},{inputType:"textarea"}),value:this.props.value||this.config.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}})}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Me(t.prototype,n),r&&Me(t,r),i}(r.a);function qe(e){return(qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function He(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ve(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function We(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return(ze=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Qe(e);if(t){var o=Qe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ge(this,n)}}function Ge(e,t){return!t||"object"!==qe(t)&&"function"!=typeof t?Je(e):t}function Je(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Qe(e){return(Qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $e=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ze(e,t)}(i,e);var t,n,r,o=Ke(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Je(t=o.call(this,e,{title:null,intro:null,fields:[]}));return n.state={values:e.values||{}},n.handleOnChange=n.handleOnChange.bind(Je(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?He(Object(n),!0).forEach((function(t){Ve(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):He(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);t[e.name]=e.value,this.setState({values:t})}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Ue,Ve({config:t,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&We(t.prototype,n),r&&We(t,r),i}(r.a);function Ze(e){return(Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e,t){return(Xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=rt(e);if(t){var o=rt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return tt(this,n)}}function tt(e,t){return!t||"object"!==Ze(t)&&"function"!=typeof t?nt(e):t}function nt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ot=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xe(e,t)}(i,e);var t,n,r,o=et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(nt(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&Ye(t.prototype,n),r&&Ye(t,r),i}(r.a);t.a={Form:$e,FormField:Ue,Hidden:_,ImageUpload:P,InputWithCounter:V,Postcode:ie,Radios:Z,Select:pe,Text:we,Textarea:Ie,Slider:ot}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(9);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function d(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function p(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=d(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=p(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=s(e),t=u(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[s(e)]},f.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},f.prototype.set=function(e,t){this.map[s(e)]=u(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(e,t){var n,r,o=(t=t||{}).body;if(e instanceof v){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function _(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},y.call(v.prototype),y.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var e=new _(null,{status:0,statusText:""});return e.type="error",e};var w=[301,302,303,307,308];_.redirect=function(e,t){if(-1===w.indexOf(t))throw new RangeError("Invalid status code");return new _(null,{status:t,headers:{location:e}})};var O=self.DOMException;try{new O}catch(e){(O=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),O.prototype.constructor=O}function E(t,n){return new e((function(e,o){var i=new v(t,n);if(i.signal&&i.signal.aborted)return o(new O("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new _(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new O("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=f,self.Request=v,self.Response=_)}).call(this,n(23))},function(e,t,n){var r=n(8),o=n(13),i=n(25);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(27),i=n(14),a=n(26),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return m})),n.d(t,"e",(function(){return c}));var r=n(92),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,u=t,l=[],f=l,d=!1;function p(){f===l&&(f=l.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function y(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,u=s(u,e)}finally{d=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,y({type:i.REPLACE})}function v(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return y({type:i.INIT}),(o={dispatch:y,subscribe:m,getState:h,replaceReducer:g})[r.a]=v,o}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function u(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,c=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<c.length;i++){var u=c[i],l=n[u],f=e[u],d=l(f,t);if(void 0===d){var p=s(u,t);throw new Error(p)}o[u]=d,r=r||d!==f}return(r=r||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){var r=n(45),o=n(47);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(3),o=n(12);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){"use strict";(function(e){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[G]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[K]||!!e.constructor[K]||d(e)||p(e))}function a(e,t,n){void 0===n&&(n=!1),0===c(e)?(n?Object.keys:J)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function c(e){var t=e[G];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:d(e)?2:p(e)?3:0}function s(e,t){return 2===c(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){return 2===c(e)?e.get(t):e[t]}function l(e,t,n){var r=c(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){return H&&e instanceof Map}function p(e){return V&&e instanceof Set}function h(e){return e.o||e.t}function m(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Q(e);delete t[G];for(var n=J(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function y(e,t){return void 0===t&&(t=!1),v(e)||o(e)||!i(e)||(c(e)>1&&(e.set=e.add=e.clear=e.delete=g),Object.freeze(e),t&&a(e,(function(e,t){return y(t,!0)}),!0)),e}function g(){r(2)}function v(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function b(e){var t=$[e];return t||r(18,e),t}function _(e,t){$[e]||($[e]=t)}function w(){return U}function O(e,t){t&&(b("Patches"),e.u=[],e.s=[],e.v=t)}function E(e){S(e),e.p.forEach(R),e.p=null}function S(e){e===U&&(U=e.l)}function k(e){return U={p:[],l:U,h:e,m:!0,_:0}}function R(e){var t=e[G];0===t.i||1===t.i?t.j():t.g=!0}function P(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||b("ES5").S(t,e,o),o?(n[G].P&&(E(t),r(4)),i(e)&&(e=C(t,e),t.l||j(t,e)),t.u&&b("Patches").M(n[G],e,t.u,t.s)):e=C(t,n,[]),E(t),t.u&&t.v(t.u,t.s),e!==z?e:void 0}function C(e,t,n){if(v(t))return t;var r=t[G];if(!r)return a(t,(function(o,i){return I(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return j(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=m(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return I(e,r,o,t,i,n)})),j(e,o,!1),n&&e.u&&b("Patches").R(r,n,e.u,e.s)}return r.o}function I(e,t,n,r,a,c){if(o(a)){var u=C(e,a,c&&t&&3!==t.i&&!s(t.D,r)?c.concat(r):void 0);if(l(n,r,u),!o(u))return;e.m=!1}if(i(a)&&!v(a)){if(!e.h.N&&e._<1)return;C(e,a),t&&t.A.l||j(e,a)}}function j(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&y(t,n)}function L(e,t){var n=e[G];return(n?h(n):e)[t]}function T(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function x(e){e.P||(e.P=!0,e.l&&x(e.l))}function M(e){e.o||(e.o=m(e.t))}function D(e,t,n){var r=d(t)?b("MapSet").T(t,n):p(t)?b("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:w(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=Z;n&&(o=[r],i=Y);var a=Proxy.revocable(o,i),c=a.revoke,s=a.proxy;return r.k=s,r.j=c,s}(t,n):b("ES5").J(t,n);return(n?n.A:w()).p.push(r),r}function N(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[G],o=c(t);if(r){if(!r.P&&(r.i<4||!b("ES5").K(r)))return r.t;r.I=!0,n=A(t,o),r.I=!1}else n=A(t,o);return a(n,(function(t,o){r&&u(r.t,t)===o||l(n,t,e(o))})),3===o?new Set(n):n}(e)}function A(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return m(e)}function F(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[G];return Z.get(t,e)},set:function(t){var n=this[G];Z.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][G];if(!o.P)switch(o.i){case 5:r(o)&&x(o);break;case 4:n(o)&&x(o)}}}function n(e){for(var t=e.t,n=e.k,r=J(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==G){var a=t[i];if(void 0===a&&!s(t,i))return!0;var c=n[i],u=c&&c[G];if(u?u.t!==a:!f(c,a))return!0}}var l=!!t[G];return r.length!==J(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};_("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=Q(n);delete i[G];for(var a=J(i),c=0;c<a.length;c++){var s=a[c];i[s]=e(s,t||!!i[s].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:w(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,G,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[G].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[G];if(n){var o=n.t,i=n.k,c=n.D,u=n.i;if(4===u)a(i,(function(t){t!==G&&(void 0!==o[t]||s(o,t)?c[t]||e(i[t]):(c[t]=!0,x(n)))})),a(o,(function(e){void 0!==i[e]||s(i,e)||(c[e]=!1,x(n))}));else if(5===u){if(r(n)&&(x(n),c.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)c[l]=!1;else for(var f=o.length;f<i.length;f++)c[f]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===c[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}n.d(t,"a",(function(){return N})),n.d(t,"c",(function(){return F})),n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return i}));var B,U,q="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),H="undefined"!=typeof Map,V="undefined"!=typeof Set,W="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,z=q?Symbol.for("immer-nothing"):((B={})["immer-nothing"]=!0,B),K=q?Symbol.for("immer-draftable"):"__$immer_draftable",G=q?Symbol.for("immer-state"):"__$immer_state",J=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Q=Object.getOwnPropertyDescriptors||function(e){var t={};return J(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},$={},Z={get:function(e,t){if(t===G)return e;var n=h(e);if(!s(n,t))return function(e,t,n){var r,o=T(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===L(e.t,t)?(M(e),e.o[t]=D(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=T(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=L(h(e),t),i=null==o?void 0:o[G];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||s(e.t,t)))return!0;M(e),x(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==L(e.t,t)||t in e.t?(e.D[t]=!1,M(e),x(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},Y={};a(Z,(function(e,t){Y[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Y.deleteProperty=function(e,t){return Z.deleteProperty.call(this,e[0],t)},Y.set=function(e,t,n){return Z.set.call(this,e[0],t,n,e[0])};var X=new(function(){function t(e){this.O=W,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var n=t.prototype;return n.produce=function(t,n,o){if("function"==typeof t&&"function"!=typeof n){var a=n;n=t;var c=this;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return c.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var s;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),i(t)){var u=k(this),l=D(this,t,void 0),f=!0;try{s=n(l),f=!1}finally{f?E(u):S(u)}return void 0!==e&&s instanceof e?s.then((function(e){return O(u,o),P(e,u)}),(function(e){throw E(u),e})):(O(u,o),P(s,u))}if(!t||"object"!=typeof t){if((s=n(t))===z)return;return void 0===s&&(s=t),this.N&&y(s,!0),s}r(21,t)},n.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},n.createDraft=function(e){i(e)||r(8),o(e)&&(e=N(e));var t=k(this),n=D(this,e,void 0);return n[G].C=!0,S(t),n},n.finishDraft=function(e,t){var n=(e&&e[G]).A;return O(n,t),P(void 0,n)},n.setAutoFreeze=function(e){this.N=e},n.setUseProxies=function(e){e&&!W&&r(20),this.O=e},n.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=b("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},t}()),ee=X.produce;X.produceWithPatches.bind(X),X.setAutoFreeze.bind(X),X.setUseProxies.bind(X),X.applyPatches.bind(X),X.createDraft.bind(X),X.finishDraft.bind(X);t.b=ee}).call(this,n(23))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g})),n.d(t,"Image",(function(){return g})),n.d(t,"IdeaImage",(function(){return k}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(89),n(4)),s=n.n(c);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=s.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images;return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=u(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=u(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n;console.log(r);var a=r*i.getAspectRatioFactor();console.log(a);var c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&d(t.prototype,n),r&&d(t,r),a}(n(1).a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=S(e);if(t){var o=S(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return E(this,n)}}function E(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(){return b(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&_(t.prototype,n),r&&_(t,r),i}(g);k.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(k,{attributes:n,config:t}),e)}},function(e,t,n){e.exports=n(51).Promise},function(e,t,n){var r=n(8),o=n(55),i=n(25),a=n(16),c=n(26),s=n(7),u=n(27),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(8),o=n(9),i=n(28);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),o=n(10),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(30),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(3),o=n(17),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(32),o=n(33),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(59),o=n(30);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(62),o=n(3),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(16),i=n(36).indexOf,a=n(18);e.exports=function(e,t){var n,c=o(e),s=0,u=[];for(n in c)!r(a,n)&&r(c,n)&&u.push(n);for(;t.length>s;)r(c,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(16),o=n(48),i=n(64),a=function(e){return function(t,n,a){var c,s=r(t),u=o(s.length),l=i(a,u);if(e&&n!=n){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(9);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return E})),n.d(t,"c",(function(){return b}));var r=n(20),o=n(15),i=(n(77),n(93));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return(l=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&s(o,n.prototype),o}).apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return(f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,c(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,e)})(e)}var d="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?o.d:o.d.apply(null,arguments)};function p(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var h=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return l(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?l(r,t[0].concat(this)):l(r,t.concat(this))},r}(f(Array));function m(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new h);r&&("boolean"==typeof r?o.push(i.a):o.push(i.a.withExtraArgument(r.extraArgument)));0;return o}(e)}}function y(e){var t,n=m(),r=e||{},i=r.reducer,c=void 0===i?void 0:i,s=r.middleware,u=void 0===s?n():s,l=r.devTools,f=void 0===l||l,h=r.preloadedState,y=void 0===h?void 0:h,g=r.enhancers,v=void 0===g?void 0:g;if("function"==typeof c)t=c;else{if(!p(c))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Object(o.c)(c)}var b=o.a.apply(void 0,"function"==typeof u?u(n):u),_=o.d;f&&(_=d(a({trace:!1},"object"==typeof f&&f)));var w=[b];Array.isArray(v)?w=[b].concat(v):"function"==typeof v&&(w=v(w));var O=_.apply(void 0,w);return Object(o.e)(t,y,O)}function g(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return a({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function v(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function b(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var o=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?v(e.extraReducers):[e.extraReducers],c=i[0],s=void 0===c?{}:c,u=i[1],l=void 0===u?[]:u,f=i[2],d=void 0===f?void 0:f,p=Object.keys(o),h={},m={},y={};p.forEach((function(e){var n,r,i=o[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,h[e]=n,m[a]=n,y[e]=r?g(a,r):g(a)}));var b=function(e,t,n,o){void 0===n&&(n=[]);var i="function"==typeof t?v(t):[t,n,o],a=i[0],c=i[1],s=i[2];return function(t,n){void 0===t&&(t=e);var o=[a[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===o.filter((function(e){return!!e})).length&&(o=[s]),o.reduce((function(e,t){if(t){if(Object(r.d)(e)){var o=t(e,n);return void 0===o?e:o}if(Object(r.e)(e))return Object(r.b)(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return e}),t)}}(n,a({},s,{},m),l,d);return{name:t,reducer:b,actions:y,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var _=["name","message","stack","code"],w=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},O=function(e){if("object"==typeof e&&null!==e){var t={},n=_,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function E(t,n,r){var o=g(t+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),i=g(t+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),a=g(t+"/rejected",(function(e,t,n){var o=e instanceof w,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof w?e.payload:void 0,error:(r&&r.serializeError||O)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),c="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){0},e}();return Object.assign((function(t){return function(s,u,l){var f,d=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),p=new c,h=new e((function(e,t){return p.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:f||"Aborted"})}))})),m=!1;var y=function(){try{var c,f=function(e){return y?e:(r&&!r.dispatchConditionRejection&&a.match(c)&&c.meta.condition||s(c),c)},y=!1,g=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){if(r&&r.condition&&!1===r.condition(t,{getState:u,extra:l}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return m=!0,s(i(d,t)),e.resolve(e.race([h,e.resolve(n(t,{dispatch:s,getState:u,extra:l,requestId:d,signal:p.signal,rejectWithValue:function(e){return new w(e)}})).then((function(e){return e instanceof w?a(e,d,t):o(e,d,t)}))])).then((function(e){c=e}))}),(function(e){c=a(e,d,t)}));return e.resolve(g&&g.then?g.then(f):f(g))}catch(t){return e.reject(t)}}();return Object.assign(y,{abort:function(e){m&&(f=e,p.abort())},requestId:d,arg:t})}}),{pending:i,rejected:a,fulfilled:o,typePrefix:t})}Object(r.c)()}).call(this,n(23))},function(e,t,n){var r=n(3),o=n(24).f,i=n(12),a=n(56),c=n(17),s=n(60),u=n(66);e.exports=function(e,t){var n,l,f,d,p,h=e.target,m=e.global,y=e.stat;if(n=m?r:y?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(p=o(n,l))&&p.value:n[l],!u(m?l:h+(y?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;s(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,l,d,e)}}},function(e,t,n){var r=n(50),o=n(69),i=n(13),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(8),o=n(9),i=n(7),a=Object.defineProperty,c={},s=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],u=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:s,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(u&&!r)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:s}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(3),o=n(49),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}s((o=o.apply(t,n||[])).next())}))}function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;Object.create}).call(this,n(23))},function(e,t,n){var r=n(9),o=n(46),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(37),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(67);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(3),o=n(32),i=n(7),a=n(33),c=n(38),s=n(68),u=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(c&&i(l,e)?u[e]=l[e]:u[e]=f("Symbol."+e)),u[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,s=function(e,t){m[i]=e,m[i+1]=t,2===(i+=2)&&(c?c(y):w())},u="undefined"!=typeof window?window:void 0,l=u||{},f=l.MutationObserver||l.WebKitMutationObserver,d="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(y,1)}}var m=new Array(1e3);function y(){for(var e=0;e<i;e+=2)(0,m[e])(m[e+1]),m[e]=void 0,m[e+1]=void 0;i=0}var g,v,b,_,w=void 0;function O(e,t){var n=arguments,r=this,o=new this.constructor(k);void 0===o[S]&&U(o);var i,a=r._state;return a?(i=n[a-1],s((function(){return F(a,o,i,r._result)}))):M(r,o,e,t),o}function E(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(k);return j(t,e),t}d?w=function(){return t.nextTick(y)}:f?(v=0,b=new f(y),_=document.createTextNode(""),b.observe(_,{characterData:!0}),w=function(){_.data=v=++v%2}):p?((g=new MessageChannel).port1.onmessage=y,w=function(){return g.port2.postMessage(0)}):w=void 0===u?function(){try{var e=n(53);return a=e.runOnLoop||e.runOnContext,function(){a(y)}}catch(e){return h()}}():h();var S=Math.random().toString(36).substring(16);function k(){}var R=void 0,P=new N;function C(e){try{return e.then}catch(e){return P.error=e,P}}function I(t,n,r){n.constructor===t.constructor&&r===O&&n.constructor.resolve===E?function(e,t){1===t._state?T(e,t._result):2===t._state?x(e,t._result):M(t,void 0,(function(t){return j(e,t)}),(function(t){return x(e,t)}))}(t,n):r===P?x(t,P.error):void 0===r?T(t,n):e(r)?function(e,t,n){s((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?j(e,n):T(e,n))}),(function(t){r||(r=!0,x(e,t))}),e._label);!r&&o&&(r=!0,x(e,o))}),e)}(t,n,r):T(t,n)}function j(e,t){var n;e===t?x(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?I(e,t,C(t)):T(e,t)}function L(e){e._onerror&&e._onerror(e._result),D(e)}function T(e,t){e._state===R&&(e._result=t,e._state=1,0!==e._subscribers.length&&s(D,e))}function x(e,t){e._state===R&&(e._state=2,e._result=t,s(L,e))}function M(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&s(D,e)}function D(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?F(n,r,o,i):o(i);e._subscribers.length=0}}function N(){this.error=null}var A=new N;function F(t,n,r,o){var i=e(r),a=void 0,c=void 0,s=void 0,u=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return A.error=e,A}}(r,o))===A?(u=!0,c=a.error,a=null):s=!0,n===a)return void x(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,s=!0;n._state!==R||(i&&s?j(n,a):u?x(n,c):1===t?T(n,a):2===t&&x(n,a))}var B=0;function U(e){e[S]=B++,e._state=void 0,e._result=void 0,e._subscribers=[]}function q(e,t){this._instanceConstructor=e,this.promise=new e(k),this.promise[S]||U(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&T(this.promise,this._result))):x(this.promise,new Error("Array Methods must be provided an Array"))}function H(e){this[S]=B++,this._result=this._state=void 0,this._subscribers=[],k!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof H?function(e,t){try{t((function(t){j(e,t)}),(function(t){x(e,t)}))}catch(t){x(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function V(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=H}return q.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===R&&n<e;n++)this._eachEntry(t[n],n)},q.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===E){var o=C(e);if(o===O&&e._state!==R)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===H){var i=new n(k);I(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},q.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===R&&(this._remaining--,2===e?x(r,n):this._result[t]=n),0===this._remaining&&T(r,this._result)},q.prototype._willSettleAt=function(e,t){var n=this;M(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},H.all=function(e){return new q(this,e).promise},H.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},H.resolve=E,H.reject=function(e){var t=new this(k);return x(t,e),t},H._setScheduler=function(e){c=e},H._setAsap=function(e){s=e},H._asap=s,H.prototype={constructor:H,then:O,catch:function(e){return this.then(null,e)}},V(),H.polyfill=V,H.Promise=H,H},e.exports=o()}).call(this,n(52),n(21))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&p())}function p(){if(!l){var e=c(d);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r,o=n(39),i=n(102),a=Object(o.c)({name:"ideas",initialState:{ideas:[]},reducers:{setIdeas:function(e,t){e.ideas=t.payload},addIdea:function(e,t){var n=t.payload;e.ideas.push(n)},removeIdea:function(e,t){e.ideas.splice(e.ideas.findIndex((function(e){return e.id===t.payload})),1)}},extraReducers:function(e){e.addCase(i.a.fulfilled,(function(e,t){e.ideas=t.payload}))}}),c=((r=a.actions).setIdeas,r.addIdea);t.b=a.reducer},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(3),o=n(12),i=n(7),a=n(17),c=n(29),s=n(57),u=s.get,l=s.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var s=!!c&&!!c.unsafe,u=!!c&&!!c.enumerable,d=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(s?!d&&e[t]&&(u=!0):delete e[t],u?e[t]=n:o(e,t,n)):u?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(58),c=n(3),s=n(10),u=n(12),l=n(7),f=n(31),d=n(18),p=c.WeakMap;if(a){var h=new p,m=h.get,y=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},o=function(e){return m.call(h,e)||{}},i=function(e){return y.call(h,e)}}else{var v=f("state");d[v]=!0,r=function(e,t){return u(e,v,t),t},o=function(e){return l(e,v)?e[v]:{}},i=function(e){return l(e,v)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(3),o=n(29),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(61),i=n(24),a=n(13);e.exports=function(e,t){for(var n=o(t),c=a.f,s=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||c(e,l,s(t,l))}}},function(e,t,n){var r=n(34),o=n(63),i=n(65),a=n(14);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(3);e.exports=r},function(e,t,n){var r=n(35),o=n(19).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(37),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(9),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==u||n!=s&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(38);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(14),i=n(70),a=n(19),c=n(18),s=n(72),u=n(28),l=n(31),f=l("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=u("iframe")).style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=o(e),n=new d,d.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(8),o=n(13),i=n(14),a=n(71);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,s=0;c>s;)o.f(e,n=r[s++],t[n]);return e}},function(e,t,n){var r=n(35),o=n(19);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(34);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(75);var r=n(43);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(40),o=n(36).includes,i=n(41);r({target:"Array",proto:!0,forced:!n(42)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return V})),n.d(t,"IdeasList",(function(){return y})),n.d(t,"IdeasOverview",(function(){return V})),n.d(t,"IdeasFilterbar",(function(){return R})),n.d(t,"IdeasFilter",(function(){return g.a})),n.d(t,"IdeasSort",(function(){return x})),n.d(t,"IdeasSearch",(function(){return v.a}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(121),n(1)),s=n(2),u=n(90);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{title:"Inzendingen",type:"tiles",columns:3,onMouseOverTileFadeOthers:!1},idea:{titleField:"title",summaryField:"summary"},sort:{sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"}],showSort:!0,defaultValue:"createdtime,desc"},types:[]})).state={highLightIdeaId:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideaTileMouseOverListener=function(e){n.onTileMouseOver(e.detail)},document.addEventListener("osc-idea-tile-mouse-over",n.ideaTileMouseOverListener),n.ideaTileMouseOutListener=function(e){n.onTileMouseOut(e.detail)},document.addEventListener("osc-idea-tile-mouse-out",n.ideaTileMouseOutListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-idea-tile-mouse-over",this.ideaTileMouseOverListener),document.removeEventListener("osc-idea-tile-mouse-out",this.ideaTileMouseOutListener)}},{key:"onTileMouseOver",value:function(e){var t=e.idea;this.setState({highLightIdeaId:t.id})}},{key:"onTileMouseOut",value:function(e){e.idea,this.setState({highLightIdeaId:null})}},{key:"render",value:function(){var e=this,t=this,n=t.props.ideas||[];return React.createElement("div",{className:"osc-tile-list-container ".concat(t.props.className||"")},React.createElement("div",{className:"osc-tile-list"},n.map((function(n,r){return React.createElement(u.a,{config:t.config,idea:n,className:"osc-".concat(t.config.display.columns,"-columns").concat(e.config.display.onMouseOverTileFadeOthers&&t.state.highLightIdeaId&&t.state.highLightIdeaId!=n.id?" osc-opacity-65":""),key:"osc-idea-tile-".concat(n.id)})}))))}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a),g=n(81),v=n(82);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=k(e);if(t){var o=k(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return E(this,n)}}function E(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?S(e):t}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{}})).doNextPendingResetAction=t.doNextPendingResetAction.bind(S(t)),t.state={pendingResetActions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasSearchOnchangeListener=function(e){n.doNextPendingResetAction()},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasFilterOnchangeListener=function(e){n.hideMobileActiveSelector(),n.doNextPendingResetAction()},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener)}},{key:"toggleMobileActiveSelector",value:function(e){this.state.mobileActiveSelector!=e?this.showMobileActiveSelector(e):this.hideMobileActiveSelector()}},{key:"showMobileActiveSelector",value:function(e){this.setState({mobileActiveSelector:e})}},{key:"hideMobileActiveSelector",value:function(){this.setState({mobileActiveSelector:null})}},{key:"resetAll",value:function(){var e=this;e.search&&e.state.pendingResetActions.push(e.search.setSearch),e.filters&&e.filters.forEach((function(t){e.state.pendingResetActions.push(t.setFilter)}));var t=new window.CustomEvent("osc-ideas-filter-reset-all",{detail:{}});document.dispatchEvent(t),e.doNextPendingResetAction()}},{key:"doNextPendingResetAction",value:function(){var e=this.state.pendingResetActions.shift();e&&e({value:""})}},{key:"render",value:function(){var e=this;if(!(void 0!==e.props.showFilterbar?e.props.showFilterbar:e.config.display.showFilterbar))return null;var t,n=null;e.config.search&&(n=React.createElement("div",{className:"osc-ideas-search-container"},React.createElement("div",{className:"osc-ideas-search-button",onClick:function(){return e.toggleMobileActiveSelector("search")}}),React.createElement(v.a,{config:e.config.search,className:"".concat("search"==e.state.mobileActiveSelector?" osc-is-active":""),ref:function(t){return e.search=t}}))),t=React.createElement("button",{value:"reset",onClick:function(){return e.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,o=null;if(e.config.filter.length){var i=e.filters&&e.filters.find((function(e){return e.state.currentValue}));e.filters=[],o=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(i?" osc-active":""),onClick:function(){return e.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==e.state.mobileActiveSelector?" osc-is-active":"")},e.config.filter.map((function(t,n){return React.createElement(g.a,{config:t,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(t){return e.filters[n]=t}})}))),t)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},o),React.createElement("div",{className:"osc-ideas-filterbar ".concat(e.props.className||"")},n,r)}}])&&_(t.prototype,n),r&&_(t,r),i}(c.a);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=T(e);if(t){var o=T(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return L(this,n)}}function L(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function T(e){return(T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(i,e);var t,n,r,o=j(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{label:null,sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"},{value:"title",label:"Titel"},{value:"random",label:"Willekeurig"},{value:"likes,desc",label:"Meeste likes"},{value:"likes,asc",label:"Minste likes"},{value:"args,desc",label:"Meeste reacties"},{value:"args,asc",label:"Minste reacties"},{value:"ranking,asc",label:"Ranglijst"}],defaultValue:"createdtime,desc",showSort:!0,center:{latitude:52.37104644463586,longitude:4.900402911007405}})).state={currentValue:t.config.defaultValue},t}return t=i,(n=[{key:"doSort",value:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||this.state.currentValue){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":r=r||this.config.center,t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t}},{key:"setSortOrder",value:function(e){var t=e.sortOrder,n=this.props.ideas||[];n=this.doSort({ideas:n,sortOrder:t}),this.setState({ideas:n,currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-sort-onchange",{detail:n});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(e.props.ideas,!(void 0!==e.props.showSort?e.props.showSort:e.config.showSort))return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-sort-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-sort ".concat(e.props.className||"")},t,React.createElement("select",{defaultValue:e.state.currentValue,onChange:function(){return e.setSortOrder({sortOrder:e.sortSelector.value})},className:"osc-default-select",ref:function(t){return e.sortSelector=t}},e.config.sortOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"sort-option-"+t},e.label)}))))}}])&&C(t.prototype,n),r&&C(t,r),i}(c.a);function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=H(e);if(t){var o=H(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return q(this,n)}}function q(e,t){return!t||"object"!==M(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(i,e);var t,n,r,o=U(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,title:"Inzendingen",display:{showFilterbar:!0},idea:{titleField:"title",summaryField:"summary"},sort:{showSort:!0,defaultValue:"createdtime,desc"},filter:[],types:[],typeLabel:"Thema"})).state={ideas:t.props.ideas||[],filters:{},search:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasFilterOnchangeListener=function(e){n.updateFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasSearchOnchangeListener=function(e){n.updateSearch(e.detail)},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasSortOnchangeListener=function(e){n.updateSort(e.detail)},document.addEventListener("osc-ideas-sort-onchange",n.ideasSortOnchangeListener),void 0===n.props.ideas&&n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-sort-onchange",this.ideasSortOnchangeListener)}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea?summary=1&includeVoteCount=1&includeArgsCount=1"),n=s.a.api.getHeaders(e.config);fetch(t,{headers:n}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;n=e.sorter.doSort({ideas:n}),e.setState({ideas:n},(function(){}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"updateFilter",value:function(e){var t=N({},this.state.filters);e.value?t[e.fieldName]={value:e.value,doFilter:e.doFilter}:delete t[e.fieldName],this.setState({filters:t})}},{key:"updateSearch",value:function(e){e=e.value?{value:e.value,doSearch:e.doSearch}:null,this.setState({search:e})}},{key:"updateSort",value:function(e){this.setState({ideas:e})}},{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=t;Object.keys(e.state.filters).forEach((function(t){var r=e.state.filters[t];n=r.doFilter(n)})),e.state.search&&(n=e.state.search.doSearch(n)),this.props.maxLength&&(n=t.slice(0,this.props.maxLength));var r=React.createElement("h3",{className:"osc-title"},e.config.title," (",n.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(R,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(x,{config:N({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),r,React.createElement(y,{config:e.config,ideas:n,className:""}))}}])&&F(t.prototype,n),r&&F(t,r),i}(c.a);V.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(V,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";function r(e,t){return e===t}function o(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function i(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}n.d(t,"a",(function(){return a}));var a=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=0,c=r.pop(),s=i(r),u=e.apply(void 0,[function(){return a++,c.apply(null,arguments)}].concat(n)),l=e((function(){for(var e=[],t=s.length,n=0;n<t;n++)e.push(s[n].apply(null,arguments));return u.apply(null,e)}));return l.resultFunc=c,l.dependencies=s,l.recomputations=function(){return a},l.resetRecomputations=function(){return a=0},l}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,i=null;return function(){return o(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentLightbox}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentLightbox=function(_OpenStadComponent){_inherits(OpenStadComponentLightbox,_OpenStadComponent);var _super=_createSuper(OpenStadComponentLightbox);function OpenStadComponentLightbox(e){var t;return _classCallCheck(this,OpenStadComponentLightbox),(t=_super.call(this,e)).state={images:[],startIndex:0},t.recalcSizes=t.recalcSizes.bind(_assertThisInitialized(t)),t}return _createClass(OpenStadComponentLightbox,[{key:"componentDidMount",value:function(e,t){var n=this;n.showLightBoxListener=function(e){n.showLightbox(e.detail)},document.addEventListener("osc-show-light-box",n.showLightBoxListener),document.body.appendChild(this.instance)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-show-light-box",this.showLightBoxListener)}},{key:"showLightbox",value:function showLightbox(data){var self=this,aspectRatio;try{aspectRatio=eval(data.aspectRatio.replace&&data.aspectRatio.replace("x","/"))}catch(e){}"number"!=typeof aspectRatio&&(aspectRatio=16/9),self.setState({images:data.images,startIndex:data.startIndex,aspectRatio:aspectRatio},(function(){self.instance.style.display="block",self.recalcSizes()})),window.addEventListener("resize",self.recalcSizes)}},{key:"hideLightbox",value:function(){this.instance.style.display="none",window.removeEventListener("resize",this.recalcSizes)}},{key:"showImage",value:function(e,t){e.stopPropagation(),this.mainImage.src=t}},{key:"recalcSizes",value:function(){var e=this;if(e.mainContainer){var t=e.mainContainer.offsetWidth,n=e.mainContainer.offsetHeight;if(t/n>e.state.aspectRatio){var r=.8*n;e.mainImageContainer.style.height=r+"px",e.mainImageContainer.style.width=e.state.aspectRatio*r+"px",e.mainImageContainer.style.top=(n-r)/2+"px",e.mainImageContainer.style.left=(t-e.state.aspectRatio*r)/2+"px"}else{var o=t;e.mainImageContainer.style.width=o+"px",e.mainImageContainer.style.height=1/e.state.aspectRatio*o+"px",e.mainImageContainer.style.top=(n-1/e.state.aspectRatio*o)/2+"px",e.mainImageContainer.style.left=0}e.mainImage.style.width=e.mainImageContainer.style.width,e.mainImage.style.height=e.mainImageContainer.style.height;var i=e.state.aspectRatio*e.navigationContainer.offsetHeight,a=e.state.images.length*i+20*e.state.images.length;a>e.navigationContainer.offsetWidth&&(a=e.navigationContainer.offsetWidth,i=a/e.state.images.length-20),e.navigationContainer.style.width=a+"px",e.state.images.map((function(t,n){var r=parseInt(i);e["lighbox-image-container-".concat(n)].style.width=r+"px",e["lighbox-image-container-".concat(n)].style.height=parseInt(1/e.state.aspectRatio*r)+"px",e["lighbox-image-".concat(n)].style.width=e["lighbox-image-container-".concat(n)].style.width,e["lighbox-image-".concat(n)].style.height=e["lighbox-image-container-".concat(n)].style.height}))}}},{key:"getImageSrc",value:function(e){var t=e;return"object"==_typeof(e)&&e.src&&(t=e.src),t}},{key:"render",value:function(){var e=this,t=this;return React.createElement("div",{className:"osc-lightbox",onClick:function(){e.hideLightbox()},ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-close-button",onClick:function(e){return t.hideLightbox(e)}}),React.createElement("div",{className:"osc-lightbox-main-container",ref:function(e){return t.mainContainer=e}},React.createElement("div",{className:"osc-image-container",ref:function(e){return t.mainImageContainer=e}},React.createElement("img",{src:t.state.images[t.state.startIndex]&&t.getImageSrc(t.state.images[t.state.startIndex]),ref:function(e){return t.mainImage=e}}))),React.createElement("div",{className:"osc-lightbox-navigation-container"},React.createElement("div",{className:"osc-lightbox-navigation",ref:function(e){return t.navigationContainer=e}},t.state.images.map((function(e,n){return React.createElement("div",{className:"osc-image-container",style:{backgroundImage:"url(".concat(t.getImageSrc(e),")")},onClick:function(n){return t.showImage(n,t.getImageSrc(e))},key:"lighbox-image-container-".concat(n),ref:function(e){return t["lighbox-image-container-".concat(n)]=e}},React.createElement("img",{src:t.getImageSrc(e),ref:function(e){return t["lighbox-image-".concat(n)]=e}}))})))))}}]),OpenStadComponentLightbox}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentNLMap}));var merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4),merge__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(merge__WEBPACK_IMPORTED_MODULE_0__),_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(100);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentNLMap=function(_OpenStadComponent){_inherits(OpenStadComponentNLMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentNLMap);function OpenStadComponentNLMap(e){var t;_classCallCheck(this,OpenStadComponentNLMap);var n=_assertThisInitialized(t=_super.call(this,e,{style:"standaard",marker:!1,search:!1,center:{latitude:52.37104644463586,longitude:4.900402911007405},zoom:14,zoomposition:"bottomleft",disableDefaultUI:!0,polygon:null,autoZoomAndCenter:!1}));switch(n.config.target=n.divId,n._loadedFiles=0,n.files=[{type:"css",href:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"},{type:"script",src:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"}],n.config.variant){case"amaps":n.files.push({type:"script",src:"https://map.data.amsterdam.nl/dist/amaps.iife.js"});break;default:n.files.push({type:"css",href:"https://nlmaps.nl/dist/assets/css/nlmaps.css"}),n.files.push({type:"script",src:"https://nlmaps.nl/dist/nlmaps.iife.js"})}return n.files.push({type:"css",href:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"}),n.files.push({type:"script",src:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"}),n.markers=n.config.markers||[],t}return _createClass(OpenStadComponentNLMap,[{key:"componentDidMount",value:function(e,t){var n=this;n.loadNextFile((function(){n.createMap(),n.mapIsReady=!0;var e=new CustomEvent("osc-map-is-ready",{detail:{id:n.divId}});document.dispatchEvent(e)}))}},{key:"loadNextFile",value:function(e){var t,n=this,r=n.files[n._loadedFiles];r&&("script"===r.type&&((t=document.createElement("script")).src=r.src,t.async=!0),"css"===r.type&&((t=document.createElement("link")).href=r.href,t.rel="stylesheet"),t&&(t.onload=function(){n.loadNextFile(e)},this.instance.appendChild(t)));n._loadedFiles==n.files.length&&e(),n._loadedFiles++}},{key:"createMap",value:function createMap(){var self=this;switch(self.config.variant){case"amaps":self.map=amaps.createMap(_objectSpread({},self.config));break;default:self.map=nlmaps.createMap(self.config)}if(0==self.config.zoomControl&&self.map.removeControl(self.map.zoomControl),self.config.clustering&&self.config.clustering.isActive&&L.markerClusterGroup){var iconCreateFunction=self.config.clustering.iconCreateFunction||_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__.a.bind(self);iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction)),self.markerClusterGroup=L.markerClusterGroup({iconCreateFunction:iconCreateFunction,showCoverageOnHover:self.config.clustering.showCoverageOnHover,maxClusterRadius:self.config.clustering.maxClusterRadius||80}),self.markerClusterGroup.on("clusterclick",self.onClusterClick),self.markerClusterGroup.on("animationend",self.onClusterAnimationEnd),self.map.addLayer(self.markerClusterGroup)}if(self.map.on("click",self.onMapClick),self.config.polygon&&self.createCutoutPolygon(self.config.polygon),self.markers.length&&self.markers.forEach((function(e){self.addMarker(e)})),self.config.autoZoomAndCenter){var centerOn="polygon"==self.config.autoZoomAndCenter&&self.config.polygon||self.markers&&self.markers.length&&self.markers;self.editorMarker&&(centerOn=self.editorMarker.position?[self.editorMarker]:self.config.polygon),centerOn&&self.setBoundsAndCenter(centerOn)}}},{key:"addMarkers",value:function(e){var t=this;e.forEach((function(e){t.addMarker(e)}))}},{key:"addMarker",value:function addMarker(markerData){var self=this,icon=markerData.icon,marker;if(!icon){var iconCreateFunction=self.config.iconCreateFunction;iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction),icon=iconCreateFunction())}marker=icon?L.marker([markerData.lat,markerData.lng],{icon:icon}):L.marker([markerData.lat,markerData.lng]),marker.visible=!0,marker.data=markerData.data,marker.doNotCluster=markerData.doNotCluster,markerData.href&&(markerData.onClick=function(){document.location.href=markerData.href});var onClick=self.onMarkerClick;return onClick&&("string"==typeof onClick&&(onClick=eval(onClick)),marker.on("click",onClick)),self.markerClusterGroup&&!markerData.doNotCluster?self.markerClusterGroup.addLayer(marker):self.map.addLayer(marker),self.markers.push(marker),marker}},{key:"removeMarker",value:function(e){if(e){var t=this.markers.indexOf(e);t>-1&&(this.markers.splice(t,1),this.map.removeLayer(e),this.markerClusterGroup.removeLayer(e))}}},{key:"updateMarker",value:function(e,t){if(t.location){var n=new L.LatLng(t.location.lat,t.location.lng);e.setLatLng(n)}}},{key:"createClusterIcon",value:function(e){var t=e.getChildCount();return L.divIcon({html:t,className:"osc-nlmap-icon-cluster",iconSize:L.point(20,20),iconAnchor:[20,10]})}},{key:"createCutoutPolygon",value:function(e){var t=L.polygon(e).getBounds().getCenter(),n=0,r=0;e.forEach((function(e,o){var i=Math.sin(e.lng-t.lng)*Math.cos(e.lat),a=Math.cos(t.lat)*Math.sin(e.lat)-Math.sin(t.lat)*Math.cos(e.lat)*Math.cos(e.lng-t.lng),c=180*Math.atan2(i,a)/Math.PI;45-c<n&&(n=45-c,r=o)}));var o=e.slice(0,r),i=e.slice(r,e.length);e=i.concat(o);var a=[{lat:-85,lng:-179.99},{lat:-85,lng:0},{lat:-85,lng:179.99},{lat:0,lng:179.99},{lat:85,lng:179.99},{lat:85,lng:0},{lat:85,lng:-179.99},{lat:85,lng:-179.99},{lat:0,lng:-179.99}],c=merge__WEBPACK_IMPORTED_MODULE_0___default()({color:"#d00",fillColor:"#000",fillOpacity:.15},this.config.polygonStyle),s=L.polygon([a,e],c);return this.map.addLayer(s),s}},{key:"removePolygon",value:function(e){e&&this.map.removeLayer(e)}},{key:"setBoundsAndCenter",value:function(e){var t=this;if(Array.isArray(e)){var n=[];if(e.forEach((function(e){e._latlng?e=e._latlng:e.position&&(e=e.position.coordinates?{lat:e.position.coordinates[0],lng:e.position.coordinates[1]}:e.position),n.push(e)})),1==n.length)t.map.panTo(new L.LatLng(n[0].lat,n[0].lng));else{var r=L.latLngBounds(n);t.map.fitBounds(r)}}else t.map.panTo(new L.LatLng(t.config.center.latitude,t.config.center.longitude))}},{key:"showMarkers",value:function(e){var t=this;e.forEach((function(e){t.showMarker(e)}))}},{key:"showMarker",value:function(e){var t=this;e.visible=!0,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.addLayer(e):e.addTo(t.map)}},{key:"hideMarkers",value:function(e){var t=this;e.forEach((function(e){t.hideMarker(e)}))}},{key:"hideMarker",value:function(e){var t=this;e.visible=!1,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.removeLayer(e):e.remove(t.map)}},{key:"setFilter",value:function(e){this.filterFunction=e,this.applyFilter()}},{key:"applyFilter",value:function(){var e=this;e.filterFunction?e.markers.forEach((function(t){e.filterFunction(t)?e.showMarker(t):e.hideMarker(t)})):e.markers.forEach((function(t){e.showMarker(t)}))}},{key:"isPointInPolygon",value:function(e,t){if(!e)return!1;if(!t)return!0;for(var n=e.lat,r=e.lng,o=!1,i=0,a=t.length-1;i<t.length;a=i++){var c=t[i].lat,s=t[i].lng,u=t[a].lat,l=t[a].lng;s>r!=l>r&&n<(u-c)*(r-s)/(l-s)+c&&(o=!o)}return o}},{key:"getPointInfo",value:function(e,t,n){var r="https://api.data.amsterdam.nl/bag/nummeraanduiding/?format=json&locatie=[[lat]],[[lng]],50".replace(/\[\[lat\]\]/,(e=e||{}).lat).replace(/\[\[lng\]\]/,e.lng);fetch(r).then((function(e){return e.json()})).then((function(r){var o=r&&r.results&&r.results[0]&&r.results[0].landelijk_id,i="https://api.data.amsterdam.nl/bag/nummeraanduiding/[[id]]/?format=json".replace(/\[\[id\]\]/,o);fetch(i).then((function(e){return e.json()})).then((function(r){r.lat=e.lat,r.lng=e.lng,n&&n(r,t)}))})).catch((function(e){console.log("Zoek adres: niet goed"),console.log(e),n&&n({},t)}))}},{key:"onMapClick",value:function(e){var t=new CustomEvent("osc-map-click",{detail:e});document.dispatchEvent(t)}},{key:"onMarkerClick",value:function(e){var t=new CustomEvent("osc-map-marker-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterClick",value:function(e){var t=new CustomEvent("osc-map-cluster-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterAnimationEnd",value:function(e){var t=new CustomEvent("osc-map-cluster-animation-end",{detail:e});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this;return React.createElement("div",{id:this.divId,className:this.props.className||"osc-nlmap",ref:function(t){return e.instance=t}},React.createElement("div",{id:this.divId+"-map"}))}}]),OpenStadComponentNLMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasDetails}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(87),_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(86),_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(103),_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasDetails=function(_OpenStadComponent){_inherits(IdeasDetails,_OpenStadComponent);var _super=_createSuper(IdeasDetails);function IdeasDetails(e){var t;return _classCallCheck(this,IdeasDetails),(t=_super.call(this,e,{siteId:null,ideaId:null,idea:{showVoteButtons:!0,showLabels:!1,allowMultipleImages:!1,shareChannelsSelection:["facebook","twitter","mail","whatsapp"],metaDataTemplate:null},argument:{isActive:!0,formIntro:"Mijn reactie op deze inzending is ...",ignoreReactionsForIdeaIds:"",closeReactionsForIdeaIds:""},poll:{canAddPolls:!1},labels:{},types:null,typeField:"typeId",typeLabel:"Thema"})).state={idea:t.props.idea,ideaId:e.idea&&e.idea.id||t.config.ideaId,showPollForm:!1},t}return _createClass(IdeasDetails,[{key:"componentDidMount",value:function(e,t){var n=this;n.reactionAddedListener=function(e){n.onReactionStored(e.detail,!0)},document.addEventListener("osc-new-reaction-stored",n.reactionAddedListener),n.reactionEditedListener=function(e){n.onReactionStored(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener),n.pollCreatedListener=function(e){n.onPollCreated(e.detail)},document.addEventListener("osc-new-poll-stored",n.pollCreatedListener),n.pollDeletedListener=function(e){n.onPollDeleted(e.detail)},document.addEventListener("osc-poll-deleted",n.pollDeletedListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.reactionAddedListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener),document.removeEventListener("osc-new-poll-stored",this.pollCreatedListener),document.removeEventListener("osc-poll-deleted",this.pollDeletedListener)}},{key:"dispatchEditIdeaClick",value:function(e){if(e.stopPropagation(),this.config.editIdeaLink)document.location.href=this.config.editIdeaLink;else{var t=new window.CustomEvent("osc-edit-idea-click",{detail:this.state.idea});document.dispatchEvent(t)}}},{key:"showPollForm",value:function(){this.setState({showPollForm:!0})}},{key:"hidePollForm",value:function(){this.setState({showPollForm:!1})}},{key:"dispatchAddPollClick",value:function(e){e.stopPropagation(),this.showPollForm()}},{key:"onReactionStored",value:function(e,t){t&&this.state.idea.argCount++,this.setState({idea:this.state.idea})}},{key:"onReactionDeleted",value:function(e){this.state.idea.argCount--,this.setState({idea:this.state.idea})}},{key:"onPollCreated",value:function(){this.hidePollForm(),this.fetchData()}},{key:"onPollDeleted",value:function(){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t=e.state.ideaId||this.state.idea&&this.state.idea.id;if(t){var n="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(t,"?includeVoteCount=1&includeArguments=1&includeArgsCount=1&includeUser=1&includeUserVote=1");e.config.poll.canAddPolls&&(n+="&includePoll=1");var r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(e.config);fetch(n,{headers:r}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;e.setState({idea:n},(function(){_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.get("osc-reactions-login-pending")&&(window.location.hash="#reactions",_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.set("osc-reactions-login-pending",!1))}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"deleteIdea",value:function(){var e=this,t=this;if(t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(this.state.idea||this.state.idea.id)){var n="".concat(t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(this.state.idea.id),r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),o=this.state.idea.id;fetch(n,{method:"DELETE",headers:r}).then((function(e){if(!e.ok)throw Error("Error deleting idea");return e.json()})).then((function(t){if(e.config.afterDeleteIdeaLink)document.location.href=e.config.afterDeleteIdeaLink;else{var n=new window.CustomEvent("osc-idea-deleted",{detail:{ideaId:o}});document.dispatchEvent(n)}})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"render",value:function render(){var self=this,idea=self.state.idea;if(!idea)return null;var labelHTML=null;if(self.config.idea.showLabels){var typeId=eval("idea.".concat(self.config.typeField)),typeDef=self.config.types&&self.config.types.find((function(e){return e.id==typeId||e.value==typeId}));if(typeDef){var labelText=typeDef.label,backgroundColor=typeDef.backgroundColor,textColor=typeDef.textColor;labelHTML=React.createElement("div",{className:"osc-idea-label",style:{color:textColor,backgroundColor:backgroundColor}},labelText)}}var pollHTML=null,addPollButtonHTML=null;self.config.poll.canAddPolls&&(idea.poll||self.state.showPollForm?pollHTML=React.createElement("div",null,React.createElement("div",{id:"poll",className:"osc-poll-header"},React.createElement("h3",null,self.config.poll.title||"Poll")),React.createElement(_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__.default,{config:_objectSpread(_objectSpread(_objectSpread({},self.config),self.config.poll),{},{ideaId:self.state.ideaId}),poll:idea.poll})):idea.can&&idea.can.edit&&(addPollButtonHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchAddPollClick(e)}},"Poll toevoegen"))));var voteButtonsHTML=null;self.config.idea.showVoteButtons&&(voteButtonsHTML=React.createElement("div",{className:"osc-details-vote-buttons-container"},React.createElement("h3",null,"Likes"),React.createElement(_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__.a,{config:{text:"eens",opinion:"yes",api:this.config.api,user:this.config.user,siteId:this.config.siteId},idea:this.state.idea,name:"likebutton",value:idea.yes})));var editButtonsHTML=null;idea.can&&idea.can.edit&&(editButtonsHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchEditIdeaClick(e)}},"Bewerk idee"),React.createElement("button",{className:"osc-idea-details-editbutton osc-delete",onClick:function(e){confirm("Weet je het zeker")&&self.deleteIdea(e)}},"Verwijder idee")));var modBreakHTML=null;idea&&idea.modBreak&&(modBreakHTML=React.createElement("div",{className:"osc-modbreak"},idea.modBreakDateHumanized,React.createElement("br",null),React.createElement("br",null),idea.modBreak));var reactionsCountHTML=null;self.config.argument.isActive&&(reactionsCountHTML=React.createElement("div",null,React.createElement("h3",null,"Reacties"),React.createElement("a",{href:"#reactions",className:"osc-no-of-reactions"},idea.argCount||0," reacties")));var reactionsHTML=null;if(self.config.argument.isActive){var config=_objectSpread({},self.config);config.argument.isActive=this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),config.argument.isClosed=this.config.argument.isClosed||this.config.argument.closeReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),reactionsHTML=React.createElement("div",null,React.createElement("div",{id:"reactions",className:"osc-reactions-header"},React.createElement("h3",null,self.config.argument.title||"Reacties")),React.createElement(_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__.default,{config:_objectSpread(_objectSpread({},self.config.argument),{},{title:void 0,api:self.config.api,user:self.config.user,siteId:self.config.siteId,ideaId:idea.id,loginUrl:self.config.loginUrl})}))}var shareButtonsHTML=null;if(self.config.idea.shareChannelsSelection.length){var facebookButtonHTML=self.config.idea.shareChannelsSelection.includes("facebook")?React.createElement("li",null,React.createElement("a",{className:"osc-share-facebook",target:"_blank",href:"https://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(document.location.href)},"Facebook")):null,twitterButtonHTML=self.config.idea.shareChannelsSelection.includes("twitter")?React.createElement("li",null,React.createElement("a",{className:"osc-share-twitter",target:"_blank",href:"https://twitter.com/intent/tweet?text="+encodeURIComponent(document.location.href)},"Twitter")):null,mailButtonHTML=self.config.idea.shareChannelsSelection.includes("mail")?React.createElement("li",null,React.createElement("a",{className:"osc-share-email",target:"_blank",href:"mailto:?subject="+encodeURIComponent(eval("idea.".concat(self.config.titleField)))+"&body="+encodeURIComponent(document.location.href)},"Email")):null,whatsappButtonHTML=self.config.idea.shareChannelsSelection.includes("whatsapp")?React.createElement("li",null,React.createElement("a",{className:"osc-share-whatsapp",target:"_blank",href:"https://wa.me/?text="+encodeURIComponent(document.location.href)},"WhatsApp")):null;shareButtonsHTML=React.createElement("div",{className:"osc-details-sharebuttons"},React.createElement("ul",null,facebookButtonHTML,twitterButtonHTML,mailButtonHTML,whatsappButtonHTML))}var authorHTML=idea.user.nickName||idea.user.fullName||idea.user.firstName+" "+idea.user.lastName;this.config.linkToUserPageUrl&&(authorHTML=React.createElement("a",{href:this.config.linkToUserPageUrl+"/"+idea.user.id,className:"osc-author-link"},authorHTML));var metaDataHTML=self.config.idea.metaDataTemplate;return metaDataHTML&&(metaDataHTML=metaDataHTML.replace(/\{createDate\}/,idea.createDateHumanized),metaDataHTML=metaDataHTML.replace(/\{theme\}/,idea.extraData.theme),console.log("xx"),console.log(metaDataHTML),metaDataHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:metaDataHTML,username:authorHTML}),console.log(metaDataHTML)),React.createElement("div",{id:self.id,className:self.props.className||"osc-info-block-idea-details",ref:function(e){return self.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("div",{className:"osc-idea-details-container"},React.createElement("div",{className:"osc-idea-details"},React.createElement("h2",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-details-image-and-stats"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__.IdeaImage,{config:{allowMultipleImages:self.config.idea.allowMultipleImages},idea:idea})),labelHTML,shareButtonsHTML,React.createElement("div",{className:"osc-details-stats"},voteButtonsHTML,reactionsCountHTML,editButtonsHTML)),React.createElement("p",{className:""},metaDataHTML),modBreakHTML,React.createElement("p",{className:"osc-details-summary"},idea.summary),React.createElement("p",{className:"osc-details-description",dangerouslySetInnerHTML:{__html:idea.description}}),addPollButtonHTML),pollHTML,reactionsHTML,React.createElement("div",{className:"osc-bottom-spacer"})))}}]),IdeasDetails}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasFilter}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasFilter=function(_OpenStadComponent){_inherits(IdeasFilter,_OpenStadComponent);var _super=_createSuper(IdeasFilter);function IdeasFilter(e){var t;return _classCallCheck(this,IdeasFilter),(t=_super.call(this,e)).doFilter=t.doFilter.bind(_assertThisInitialized(t)),t.setFilter=t.setFilter.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasFilter,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doFilter",value:function doFilter(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var fieldName=self.config.fieldName,fieldValue=eval("idea.".concat(fieldName));return fieldValue==value})),ideas}},{key:"setFilter",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-filter-onchange",{detail:{fieldName:n.config.fieldName,value:t,doFilter:n.doFilter}});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(0==e.config.showFilter)return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-filter-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-filter ".concat(e.props.className||"")},t,React.createElement("select",{value:e.state.currentValue,onChange:function(){return e.setFilter({value:e.filterSelector.value})},className:"osc-default-select",ref:function(t){return e.filterSelector=t}},e.config.filterOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"filter-option-"+t},e.label)}))))}}]),IdeasFilter}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasSearch}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasSearch=function(_OpenStadComponent){_inherits(IdeasSearch,_OpenStadComponent);var _super=_createSuper(IdeasSearch);function IdeasSearch(e){var t;return _classCallCheck(this,IdeasSearch),(t=_super.call(this,e,{placeholder:"Zoeken",fieldNames:["title","summary"],showSearch:!0,showButton:!1,showSuggestions:!1,defaultValue:""})).doSearch=t.doSearch.bind(_assertThisInitialized(t)),t.setSearch=t.setSearch.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasSearch,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doSearch",value:function doSearch(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var found=!1;return self.config.fieldNames.forEach((function(fieldName){var fieldValue=eval("idea.".concat(fieldName));fieldValue.match(new RegExp(value,"i"))&&(found=!0)})),found})),ideas}},{key:"setSearch",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-search-onchange",{detail:{value:t,doSearch:n.doSearch}});document.dispatchEvent(e)}))}},{key:"showSuggestions",value:function(){}},{key:"hideSuggestions",value:function(){}},{key:"render",value:function(){var e=this;if(0==e.config.showSearch)return null;var t=null;e.config.label&&(t=React.createElement("div",{className:"osc-search-label"},e.config.label,":"));return React.createElement("div",{className:"osc-ideas-search ".concat(e.props.className||"")},t,null,React.createElement("input",{type:"text",value:this.state.currentValue,placeholder:e.config.placeholder,onChange:function(){return e.setSearch({value:e.searchInput.value})},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-ideas-search-input",ref:function(t){return e.searchInput=t}}),React.createElement("button",{className:"osc-ideas-search-button".concat(this.state.currentValue?" osc-active":""),onClick:function(t){return e.setSearch({value:""})},ref:function(t){return e.resetButton=t}}))}}]),IdeasSearch}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p})),n.d(t,"PreviousNextButtonBlock",(function(){return p}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i);n(118);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(i,e);var t,n,r,o=l(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e,{})}return t=i,(n=[{key:"render",value:function(){var e,t,n=this,r=this,o=this.props.previousAction;this.props.previousUrl&&(o=function(){document.location.href="".concat(n.props.previousUrl)}),o&&(e=React.createElement("div",{className:"osc-previous-button".concat(this.props.previousIsDisabled?" osc-disabled":""),onClick:function(e){return o(e)}},this.props.previousLabel));var i=this.props.nextAction;return this.props.nextUrl&&(i=function(){document.location.href="".concat(n.props.nextUrl)}),i&&(t=React.createElement("div",{className:"osc-next-button".concat(this.props.nextIsDisabled?" osc-disabled":""),onClick:function(e){return i(e)}},this.props.nextLabel)),React.createElement("div",{className:"osc-previous-next-button-block",ref:function(e){return r.instance=e}},e,t)}}])&&s(t.prototype,n),r&&s(t,r),i}(n(1).a);p.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(p,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return q}));var r=n(0),o=n.n(r),i=(n(131),o.a.createContext(null));var a=function(e){e()},c={notify:function(){}};function s(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var u=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var l=function(e){var t=e.store,n=e.context,a=e.children,c=Object(r.useMemo)((function(){var e=new u(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=c.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[c,s]);var l=n||i;return o.a.createElement(l.Provider,{value:c},a)};function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var p=n(109),h=n.n(p),m=n(108),y="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],v=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){y((function(){return e.apply(void 0,t)}),n)}function w(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function O(e,t,n,r,o,i,a,c,s,u){if(e){var l=!1,f=null,d=function(){if(!l){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||s():(i.current=e,c.current=e,a.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var E=function(){return[null,0]};function S(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,c=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=n.methodName,l=void 0===s?"connectAdvanced":s,p=n.renderCountProp,y=void 0===p?void 0:p,S=n.shouldHandleStateChanges,k=void 0===S||S,R=n.storeKey,P=void 0===R?"store":R,C=(n.withRef,n.forwardRef),I=void 0!==C&&C,j=n.context,L=void 0===j?i:j,T=d(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),x=L;return function(t){var n=t.displayName||t.name||"Component",i=c(n),a=f({},T,{getDisplayName:c,methodName:l,renderCountProp:y,shouldHandleStateChanges:k,storeKey:P,displayName:i,wrappedComponentName:n,WrappedComponent:t}),s=T.pure;var p=s?r.useMemo:function(e){return e()};function S(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=d(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),c=i[0],s=i[1],l=i[2],h=Object(r.useMemo)((function(){return c&&c.Consumer&&Object(m.isContextConsumer)(o.a.createElement(c.Consumer,null))?c:x}),[c,x]),y=Object(r.useContext)(h),S=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(y)&&Boolean(y.store);var R=S?n.store:y.store,P=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(R)}),[R]),C=Object(r.useMemo)((function(){if(!k)return v;var e=new u(R,S?null:y.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[R,S,y]),I=C[0],j=C[1],L=Object(r.useMemo)((function(){return S?y:f({},y,{subscription:I})}),[S,y,I]),T=Object(r.useReducer)(b,g,E),M=T[0][0],D=T[1];if(M&&M.error)throw M.error;var N=Object(r.useRef)(),A=Object(r.useRef)(l),F=Object(r.useRef)(),B=Object(r.useRef)(!1),U=p((function(){return F.current&&l===A.current?F.current:P(R.getState(),l)}),[R,M,l]);_(w,[A,N,B,l,U,F,j]),_(O,[k,R,I,P,A,N,B,F,j,D],[R,I,P]);var q=Object(r.useMemo)((function(){return o.a.createElement(t,f({},U,{ref:s}))}),[s,t,U]);return Object(r.useMemo)((function(){return k?o.a.createElement(h.Provider,{value:L},q):q}),[h,q,L])}var R=s?o.a.memo(S):S;if(R.WrappedComponent=t,R.displayName=i,I){var C=o.a.forwardRef((function(e,t){return o.a.createElement(R,f({},e,{reactReduxForwardedRef:t}))}));return C.displayName=i,C.WrappedComponent=t,h()(C,t)}return h()(R,t)}}function k(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function R(e,t){if(k(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!k(e[n[o]],t[n[o]]))return!1;return!0}var P=n(15);function C(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function j(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var L=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:C((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?C((function(t){return Object(P.b)(e,t)})):void 0}];var T=[function(e){return"function"==typeof e?j(e):void 0},function(e){return e?void 0:C((function(){return{}}))}];function x(e,t,n){return f({},n,e,t)}var M=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return x}}];function D(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function N(e,t,n,r,o){var i,a,c,s,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,y=!f(p,a),g=!l(o,i);return i=o,a=p,y&&g?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):y?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):g?(h=e(i,a),m=!d(h,c),c=h,m&&(u=n(c,s,a)),u):u}return function(o,l){return p?h(o,l):(c=e(i=o,a=l),s=t(r,a),u=n(c,s,a),p=!0,u)}}function A(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=d(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?N:D)(a,c,s,e,i)}function F(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function B(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?S:n,o=t.mapStateToPropsFactories,i=void 0===o?T:o,a=t.mapDispatchToPropsFactories,c=void 0===a?L:a,s=t.mergePropsFactories,u=void 0===s?M:s,l=t.selectorFactory,p=void 0===l?A:l;return function(e,t,n,o){void 0===o&&(o={});var a=o,s=a.pure,l=void 0===s||s,h=a.areStatesEqual,m=void 0===h?B:h,y=a.areOwnPropsEqual,g=void 0===y?R:y,v=a.areStatePropsEqual,b=void 0===v?R:v,_=a.areMergedPropsEqual,w=void 0===_?R:_,O=d(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=F(e,i,"mapStateToProps"),S=F(t,c,"mapDispatchToProps"),k=F(n,u,"mergeProps");return r(p,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:S,initMergeProps:k,pure:l,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:w},O))}}var q=U();var H,V=n(5);H=V.unstable_batchedUpdates,a=H},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N})),n.d(t,"Reactions",(function(){return N}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(106),n(1)),s=n(2),u=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return s.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=s.a.api.getHeaders(e.config),r=e.config.argumentId?"PUT":"POST",o={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:r,headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var r=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(r)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var r=null;return r=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(u.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),r)}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=k(e);if(t){var o=k(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(i,e);var t,n,r,o=E(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=s.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=s.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=s.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",r=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),o=null;e.canEdit()&&e.canDelete()&&(o=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var a=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(a=React.createElement("div",{className:"osc-reaction-description"},React.createElement(y,{config:b(b({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var c=null;t.parentId||(c=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var u=null,l=null;if(e.canReply()&&!e.config.isClosed&&(u=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=b(b({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(y,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var d=null;return t.reactions&&t.reactions.length&&(d=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},o,r,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),a,c,u),l,d)}}])&&w(t.prototype,n),r&&w(t,r),i}(c.a);function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){j(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=D(e);if(t){var o=D(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return M(this,n)}}function M(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,e);var t,n,r,o=x(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=I({},t.state);r.reactions=n,r.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(R,{config:t.config,user:t.state.user,data:I({},e)}))}))),r=t.config.title?React.createElement("h3",null,t.config.title):null,o=React.createElement(y,{config:t.config,user:t.state.user});return t.config.isClosed&&(o=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},r,o,n,React.createElement("br",null),React.createElement("br",null))}}])&&L(t.prototype,n),r&&L(t,r),i}(c.a);N.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(N,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return j})),n.d(t,"Poll",(function(){return j}));n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(105),n(1)),s=n(2),u=n(6);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=y(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{user:{},questionMinLength:30,questionMaxLength:500,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,allowChoiceTitles:!0})).state={user:e.user,pollId:e.pollId,poll:e.poll,isBusy:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.state.poll||n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.state.poll||n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({poll:{question:"",choices:{1:{},2:{}}}});var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.config.pollId,"?withUser=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=d({},t.state);r.poll=n,t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"validatedResult",value:function(){var e=this,t=e.state.poll,n=e["question-input"],r=n.validate(),o={question:n.state.value,choices:{}};return Object.keys(t.choices).forEach((function(t){var n=e["title-input-".concat(t)],i=e["description-input-".concat(t)];(n&&n.state.value||i.state.value)&&(o.choices[t]={},e.config.allowChoiceTitles&&n.state.value&&(o.choices[t].title=n.state.value,n.validate()||(r=!1)),i.state.value&&(o.choices[t].description=i.state.value,i.validate()||(r=!1)))})),r?Object.keys(o.choices).length<2?null:o:null}},{key:"handleOnChange",value:function(e){var t=d({},this.state.poll);e.choice&&(t.choices[e.choice.id]={title:this.config.allowChoiceTitles&&e.choice.title,description:e.choice.description}),e.question&&(t.question=e.question),this.setState({poll:t},(function(){}))}},{key:"addChoice",value:function(){var e=d({},this.state.poll),t=Object.keys(e.choices).sort(),n=parseInt(t[t.length-1])+1;e.choices[n]={},this.setState({poll:e})}},{key:"canSubmit",value:function(){if(this.state.poll&&this.state.poll.can)return this.state.poll.can.edit;var e=this.config.requiredUserRole,t="moderator";return("anonymous"==e?t:"member"==e&&!0)||"editor"==e&&!0||"moderator"==e&&!0||"admin"==e&&!1}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.validatedResult();if(t){if(!e.canSubmit())return alert("Je bent niet ingelogd");var n=!0,r="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll"),o="POST";e.state.poll&&e.state.poll.id&&(r+="/".concat(e.state.poll.id),o="PUT",n=!1);var i=s.a.api.getHeaders(e.config),a=t;fetch(r,{method:o,headers:i,body:JSON.stringify(a)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(r){var o=new CustomEvent("osc-new-poll-stored",{detail:r});n||(o=new CustomEvent("osc-poll-edited",{detail:r})),document.dispatchEvent(o),"function"==typeof e.config.onFinished&&e.config.onFinished(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}else e.setState({isBusy:!1})}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{},r=null;t.config.formIntro&&(r=React.createElement("div",{className:"osc-intro"},t.config.formIntro));var o=null;return o=t.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitForm()},className:"osc-button-blue osc-margin-left".concat(t.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button osc-margin-left"},"Inloggen")),React.createElement("div",{id:t.divId,className:"osc-form",ref:function(e){return t.instance=e}},r,React.createElement("h4",null,"Vraag"),React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.questionMinLength,maxLength:t.config.questionMaxLength,placeholder:"Vraag"},value:n.question,onChange:function(e){return t.handleOnChange({question:e.value})},ref:function(e){return t["question-input"]=e}}),React.createElement("h4",null,"Keuzemogelijkheden"),React.createElement("ol",{className:"osc-poll-form-choices"},n&&n.choices&&Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;return t.config.allowChoiceTitles&&(o=React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.titleMinLength,maxLength:t.config.titleMaxLength,placeholder:"Titel"},value:r.title,onChange:function(n){return t.handleOnChange({choice:{id:e,title:n.value}})},ref:function(n){return t["title-input-".concat(e)]=n}})),React.createElement("li",{className:"osc-poll-form-choice",key:"osc-key-".concat(e)},o,React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.descriptionMinLength,maxLength:t.config.descriptionMaxLength,placeholder:"Beschrijving"},value:r.description,onChange:function(n){return t.handleOnChange({choice:{id:e,description:n.value}})},ref:function(n){return t["description-input-".concat(e)]=n}}))}))),React.createElement("a",{className:"osc-add-choice-button",onClick:function(t){return e.addChoice()}},"Nog een keuzemogelijkheid toevoegen"),o)}}])&&h(t.prototype,n),r&&h(t,r),i}(c.a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=I(e);if(t){var o=I(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?C(e):t}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(i,e);var t,n,r,o=R(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=C(t=o.call(this,e,{siteId:null,ideaId:null,title:null,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",withPercentage:!0,allowChoiceTitles:!0,allowShowResultsIfNotVoted:!1}));return n.config.loginUrl=n.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),n.hideEditForm=n.hideEditForm.bind(n),n.state={user:n.config.user,poll:e.poll,pollId:e.poll&&e.poll.id||n.config.pollId,selectedChoice:null,showResult:!1,showQuestion:!1,editMode:!1,showVoteSucceeded:!1},n.state.poll&&(n.parseVoteCount(n.state.poll),n.state.poll.userVote&&(n.state.selectedChoice=n.state.poll.userVote)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?!n.state.poll&&n.config.ideaId&&n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){!n.state.poll&&n.config.ideaId&&n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({editMode:!0},(function(){}));var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.state.pollId,"?withUser=1&withUserVote=1&withVoteCount=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=O(O({},t.state),{},{showResult:!1,showQuestion:!1});r.poll=n,r.pollId=n.id,t.parseVoteCount(r.poll),r.poll.userVote&&(r.selectedChoice=r.poll.userVote),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"parseVoteCount",value:function(e){e.voteCount&&Object.keys(e.choices).sort().forEach((function(t){var n=e.choices[t];n.votesAbs=e.voteCount[t],n.votesPrc=parseInt(e.voteCount[t]/e.voteCount.total*100),n.votesPrc=n.votesPrc||0}))}},{key:"showEditForm",value:function(){this.setState({editMode:!0})}},{key:"hideEditForm",value:function(){this.setState({editMode:!1},(function(){this.fetchData()}))}},{key:"setShowResult",value:function(){this.setState({showResult:!0})}},{key:"setShowQuestion",value:function(){this.setState({showQuestion:!0})}},{key:"selectChoice",value:function(e){this.setState({selectedChoice:e.choice})}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"isValid",value:function(){return!!this.state.selectedChoice}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.state.user&&this.state.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"submitVote",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.isValid()){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id,"/vote"),n=s.a.api.getHeaders(e.config),r={choice:e.state.selectedChoice};fetch(t,{method:"POST",headers:n,body:JSON.stringify(r)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData((function(){e.setState({isBusy:!1,showVoteSucceeded:!0},(function(){var e=new CustomEvent("osc-poll-voted",{detail:t});document.dispatchEvent(e)}))})),"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description})})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"deletePoll",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.state.poll;if(!(t&&t.can&&t.can.delete))return alert("U kunt deze poll niet verwijderen");if(!t||!t.id)return alert("U kunt deze poll niet verwijderen");var n="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id),r=s.a.api.getHeaders(e.config);fetch(n,{method:"DELETE",headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){var t=new CustomEvent("osc-poll-deleted",{detail:e});document.dispatchEvent(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{};if(t.state.editMode)return React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},React.createElement(b,{config:O(O({},t.config),{},{onFinished:t.hideEditForm}),pollId:t.state.poll&&t.state.poll.id,poll:t.state.poll,user:t.state.user}));var r=null;if(n&&n.choices&&!n.userVote||t.state.showQuestion){var o={name:"pollChoice",choices:[]};Object.keys(n.choices).sort().map((function(e){var r=t.config.allowChoiceTitles&&n.choices[e].title?"<h4>".concat(n.choices[e].title,"</h4>"):"";r+=n.choices[e].description||"",o.choices.push({dangerousDescription:r,value:e})}));var i=null;i=t.canSubmit()?React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitVote()},className:"osc-button-blue".concat(t.isValid()?"":" osc-disabled")},"Stemmen"):React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-poll-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen");var a=null;!t.config.allowShowResultsIfNotVoted||n.userVote||t.state.showResult||(a=React.createElement("a",{className:"osc-show-result-button",onClick:function(t){return e.setShowResult()}},"Resultaat bekijken")),r=React.createElement("div",{className:"osc-poll-question osc-form"},React.createElement(u.a.Radios,{config:o,value:t.state.selectedChoice,onChange:function(e){return t.selectChoice({choice:e.value})},ref:function(e){return t.description=e}}),React.createElement("div",{className:"osc-poll-question-buttons"},i,a))}var c=null;if(n&&(n.userVote||t.state.showResult)){var l=null;t.state.showQuestion||n&&n.choices&&!n.userVote||(l=React.createElement("a",{className:"osc-show-question-button",onClick:function(t){return e.setShowQuestion()}},"Stem aanpassen"));var f=null;if(n.voteCount&&n.voteCount.total){var d=1==n.voteCount.total?"stem":"stemmen";f=React.createElement("div",null,"Totaal ",n.voteCount.total," ",d,React.createElement("br",null),React.createElement("br",null))}c=React.createElement("ul",{className:"osc-choices"},Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;t.config.allowChoiceTitles&&r.title&&(o=React.createElement("h4",null,r.title));var i=null;r.description&&(i=React.createElement("div",null,r.description));var a=null;t.config.withPercentage&&(a=React.createElement("div",{className:"osc-percentage"},r.votesPrc,"%"));var c=React.createElement("div",{className:"osc-choice-default"},o,i,React.createElement("div",{className:"osc-choice-bar".concat(t.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:{width:(r.votesPrc||0)+"%"}})),a);return React.createElement("li",{className:"osc-choice",key:"osc-key-".concat(e)},c)})),f,l)}var p=null;t.state.poll&&t.state.poll.can&&t.state.poll.can.edit&&(p=React.createElement("div",{className:"osc-editbuttons"},React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk poll"),React.createElement("button",{className:"osc-editbutton osc-delete",onClick:function(e){confirm("Weet u het zeker")&&t.deletePoll()}},"Verwijder poll")));var h=null;return t.state.showVoteSucceeded&&(h=React.createElement("div",{className:"osc-vote-succeeded"},"Uw stem is opgeslagen")),React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},p,h,React.createElement("h4",null,n.question),r,c,React.createElement("br",null),React.createElement("br",null))}}])&&S(t.prototype,n),r&&S(t,r),i}(c.a);j.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(j,{attributes:n,config:t}),e)}},function(e,t,n){},function(e,t,n){},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasOverview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasOverview=function(_OpenStadComponent){_inherits(IdeasOverview,_OpenStadComponent);var _super=_createSuper(IdeasOverview);function IdeasOverview(e){var t;_classCallCheck(this,IdeasOverview);var n={idea:{showVoteButtons:!0,titleField:"title",summaryField:"summary"},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},vote:{isViewable:!0,voteValues:[{value:"yes"},{value:"no"}]},types:[],typeField:"typeId"};switch(e.config.display&&e.config.display.type){case"list":n.display={columns:1,showStatusLabel:!1,showTheme:!1,showArea:!1,showVoteProgressbar:!1,showStats:!0,showTypeIcon:!0};break;case"grid":n.display={columns:3,showStatusLabel:!1,showTheme:!0,showArea:!0,showVoteProgressbar:!1,showStats:!1,showTypeIcon:!1};break;default:n.display={type:"tiles",columns:4,showStatusLabel:!0,showTheme:!1,showArea:!1,showVoteProgressbar:!0,showStats:!0,showTypeIcon:!1}}return(t=_super.call(this,e,n)).state={idea:t.props.idea||{}},t}return _createClass(IdeasOverview,[{key:"dispatchIdeaTileClick",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOver",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-over",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOut",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-out",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"render",value:function render(){var self=this,idea=self.state.idea,statusLabelHTML=null;self.config.display.showStatusLabel;var themeAndAreaHTML=null;if(self.config.display.showTheme||self.config.display.showArea){var areaHTML=null;self.config.display.showArea&&idea.extraData.area&&(areaHTML=React.createElement("div",{className:"osc-area"},idea.extraData.area)),themeAndAreaHTML=React.createElement("div",{className:"osc-theme-and-area"},self.config.display.showTheme&&idea.extraData.theme&&React.createElement("div",{className:"osc-theme"},idea.extraData.theme),self.config.display.showTheme&&idea.extraData.theme&&self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-divider"}),self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-area"},idea.extraData.area))}var statsHTML=null;if(self.config.display.showStats){var stats=[];this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"yes"===e.value}))&&stats.push(React.createElement("div",{className:"osc-yes-votes"},idea.yes||0)),this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"no"===e.value}))&&stats.push(React.createElement("div",{className:"osc-no-votes"},idea.no||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&stats.push(React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),statsHTML=React.createElement("div",{className:"osc-idea-stats-container"},stats.map((function(e,t){return React.createElement("div",{className:"osc-stat",key:"osc-stat-".concat(idea.id,"-").concat(t)},e)})))}var voteProgressHTML=null;self.config.display.showVoteProgressbar&&(voteProgressHTML=React.createElement("div",null,"GENOEGSTEMMNBALK"));var typeIconHTML=null;if(self.config.display.showTypeIcon){var ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return ideaTypeValue&&(e.id==ideaTypeValue||e.name==ideaTypeValue)}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});try{"string"==typeof typeDef.listicon&&(typeDef.listicon=JSON.parse(typeDef.listicon))}catch(e){}typeDef.listicon.html&&(typeIconHTML=React.createElement("div",{className:"osc-typeicon"},React.createElement("div",{className:"osc-typeicon-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))}return React.createElement("div",{id:self.divId,className:"osc-idea-tile osc-displaytype-".concat(self.config.display.type," ").concat(self.props.className||""),onClick:function(e){return self.dispatchIdeaTileClick(e,idea)},onMouseOver:function(e){return self.dispatchIdeaTileMouseOver(e,idea)},onMouseOut:function(e){return self.dispatchIdeaTileMouseOut(e,idea)}},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-idea-tile-content"},statusLabelHTML,React.createElement("h4",{className:"osc-title"},eval("idea.".concat(self.config.idea.titleField))),themeAndAreaHTML,React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.idea.summaryField))),voteProgressHTML,statsHTML),typeIconHTML)}}]),IdeasOverview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var _filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(110),_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(94),_preview_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(98),_map_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(126),_component_index_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(2),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(54),react_redux__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(85),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(99),redux__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(15);function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var mapDispatch={addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.a},OpenStadComponentIdeasOnMap=function(_OpenStadComponent){_inherits(OpenStadComponentIdeasOnMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentIdeasOnMap);function OpenStadComponentIdeasOnMap(e){var t;_classCallCheck(this,OpenStadComponentIdeasOnMap);var n=_assertThisInitialized(t=_super.call(this,e,{display:{type:"complete",width:null,height:null},canSelectLocation:!0,types:[],typeField:null,titleField:"title",summaryField:"summary",user:{},api:{url:null,headers:null,isUserLoggedIn:!1},idea:{canAddNewIdeas:!0},content:{}}));return n.config.ideaName=n.config.ideaName||"Inzendingen",n.config.doSearchFunction=n.config.doSearchFunction||n.doSearch.bind(n),n.config.typeField=n.config.typeField||"extraData.theme",n.config.types&&n.config.types.length&&n.config.types.forEach((function(e){if(e.value&&!e.name&&(e.name=e.value),e.mapicon&&"string"==typeof e.mapicon)try{e.mapicon=JSON.parse(e.mapicon)}catch(t){console.log(e),console.log(t)}if(e.listicon&&"string"==typeof e.listicon)try{e.listicon=JSON.parse(e.listicon)}catch(t){console.log(e),console.log(t)}if(e.buttonicon&&"string"==typeof e.buttonicon)try{e.buttonicon=JSON.parse(e.buttonicon)}catch(t){console.log(e),console.log(t)}})),n.state={ideas:[],visibleIdeas:[],listedIdeas:[],status:"default",mobileState:"closed",editIdea:null,selectedIdea:null,selectedLocation:null},t}return _createClass(OpenStadComponentIdeasOnMap,[{key:"componentDidMount",value:function(){var e=this;window.addEventListener("hashchange",(function(t){e.hideIdeaDetails();var n=window.location.hash.match(/(\w)(\d+)/);if(n){var r=n[2],o=e.state.ideas&&e.state.ideas.find((function(e){return e.id==r}));"D"==n[1]&&e.showIdeaDetails(o)}}),!1),document.addEventListener("osc-map-is-ready",(function(t){e.fetchData({}),e.map.map.on("zoomend",(function(){e.onChangeMapBoundaries()})),e.map.map.on("moveend",(function(){e.onChangeMapBoundaries()}))})),document.addEventListener("osc-map-click",(function(t){e.onMapClick(t.detail)})),document.addEventListener("osc-map-marker-click",(function(t){e.onMarkerClick(t.detail)})),document.addEventListener("osc-map-cluster-click",(function(t){e.onClusterClick(t.detail)})),document.addEventListener("osc-ideas-filter-onchange",(function(t){e.onChangeFilter(t.detail)})),document.addEventListener("osc-set-selected-idea",(function(t){e.onUpdateSelectedIdea(t.detail)})),document.addEventListener("osc-set-selected-location",(function(t){e.setSelectedLocation(t.detail)})),document.addEventListener("osc-new-idea-click",(function(t){e.onNewIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-selected-idea-click",(function(t){e.onSelectedIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-click-mobile-switcher",(function(t){e.onClickMobileSwitcher()})),document.addEventListener("osc-idea-tile-click",(function(t){e.onIdeaClick(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-over",(function(t){e.onTileMouseOver(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-out",(function(t){e.onTileMouseOut(t.detail.idea)})),document.addEventListener("osc-idea-liked",(function(t){e.onIdeaLiked(t.detail)})),document.addEventListener("osc-new-reaction-stored",(function(t){e.onReactionStored(t.detail,!0)})),document.addEventListener("osc-reaction-edited",(function(t){e.onReactionStored(t.detail)})),document.addEventListener("osc-reaction-deleted",(function(t){e.onReactionDeleted(t.detail)})),document.addEventListener("osc-edit-idea-click",(function(t){e.onEditIdeaClick(t.detail)})),document.addEventListener("osc-idea-deleted",(function(t){e.onIdeaDeleted(t.detail)})),document.addEventListener("osc-idea-stored",(function(t){document.location.href="#",e.onIdeaStored(t.detail.idea)})),document.addEventListener("osc-update-edit-idea",(function(t){e.onUpdateEditIdea(t.detail.idea)}))}},{key:"fetchData",value:function(e){for(var t=e.showIdeaDetails,n=e.showIdeaSelected,r=this,o="".concat(r.config.api.url,"/api/site/").concat(r.config.siteId,"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1"),i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_5__.a.api.getHeaders(r.config);r.map.markers.length>0;){var a=r.map.markers[0];r.map.removeMarker(a)}r.map.markers=[],fetch(o,{headers:i}).then((function(e){return e.json()})).then((function(e){t=t||window.location.hash.match(/^#D(\d+)/)&&window.location.hash.match(/^#D(\d+)/)[1],n=n||window.location.hash.match(/^#S(\d+)/)&&window.location.hash.match(/^#S(\d+)/)[1];var o=e.filter((function(e){return e.location}));o.map((function(e){e.id==t&&(t=e),e.id==n&&(n=e),e.image=e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[0]||"https://stemvanwest.amsterdam.nl/img/placeholders/idea.jpg",r.map.addIdea(e)})),r.map.setBoundsAndCenter(),r.setState({ideas:o},(function(){if("object"==_typeof(n)&&null!=n&&(r.setNewIdea(null),r.setSelectedIdea(n,(function(){r.setState({status:"idea-selected"}),r.map.map.invalidateSize(),r.map.showMarkers({})}))),"object"==_typeof(t)&&null!=t&&(r.setNewIdea(null),r.showIdeaDetails(t)),window.location.hash.match(/^#newidea/)){var e=window.location.hash.match(/&([^&]+)=([^&]+)/g),o={};e&&e.forEach((function(e){var t=_slicedToArray(e.split("="),2),n=t[0],r=t[1];n=n.substring(1,n.length),o[n]=decodeURIComponent(r)})),r.setNewIdea(o),r.showIdeaForm(o)}r.onChangeMapBoundaries()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"showIdeaDetails",value:function(e){var t=this;t.setSelectedIdea(e),t.setState({status:"idea-details"},(function(){t.map.map.invalidateSize(),t.map.hideMarkers({exception:{location:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]}}})}))}},{key:"hideIdeaDetails",value:function(){var e=this;e.setState({status:"idea-selected"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({})}))}},{key:"showIdeaForm",value:function(e,t){var n=this;if(n.config.idea.formUrl){var r=n.config.idea.formUrl;r=(r=(r=(r=r.replace(/:ideaId/,"number"==typeof e.id?e.id:"")).replace(/:location/,e.location?JSON.stringify({lat:e.location.coordinates[0],lng:e.location.coordinates[1]}):"")).replace(/:typeId/,e.typeId)).replace(/:address/,e.address),document.location.href=r}else n.setState({status:"idea-form",editIdea:e},(function(){n.map.map.invalidateSize(),n.map.hideMarkers({exception:{location:e&&e.location&&{lat:e.location.coordinates[0],lng:e.location.coordinates[1]}||n.map.selectedLocation}}),t&&t()}))}},{key:"hideIdeaForm",value:function(){var e=this;if(this.state.editIdea&&"number"==typeof this.state.editIdea.id){var t=e.state.ideas.find((function(t){return t.id==e.state.editIdea.id}));e.showIdeaDetails(t),document.location.href="#D"+t.id}else document.location.href="#",e.state.editIdea&&e.state.editIdea.location?e.setState({status:"location-selected"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({}),e.setNewIdea(e.state.editIdea)})):e.setState({status:"default"},(function(){e.map.map.invalidateSize(),e.map.showMarkers({}),e.setNewIdea(null)}))}},{key:"doSearch",value:function doSearch(searchValue,callback){var self=this,searchValueLc=searchValue.toLowerCase(),searchResult={ideas:[],locations:[]};function onClickAddress(e){fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/lookup?fq=gemeentenaam:amsterdam&&id="+e,{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){if(e&&e.response&&e.response.docs&&e.response.docs[0]){var t=e.response.docs[0].centroide_ll.match(/POINT\((\d+\.\d+) (\d+\.\d+)\)/);self.map.map.panTo(new L.LatLng(t[2],t[1])),self.onMapClick({latlng:{lat:t[2],lng:t[1]}},!0)}})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}this.state.ideas.forEach((function(idea){var title=eval("idea.".concat(self.config.titleField))||"",titlelLc=title.toLowerCase(),summary=eval("idea.".concat(self.config.summaryField))||"",summaryLc=summary.toLowerCase();(titlelLc.match(searchValueLc)||summaryLc.match(searchValueLc))&&searchResult.ideas.push({text:title,onClick:function(){self.onUpdateSelectedIdea(idea)}})})),fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?rows=5&fq=gemeentenaam:amsterdam&fq=*:*&q="+searchValueLc,{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){e&&e.response&&e.response.docs&&e.response.docs.length&&(searchResult.locations=e.response.docs.map((function(e){return{text:e.weergavenaam,onClick:function(){onClickAddress(e.id)}}}))),callback(searchValue,searchResult)})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}},{key:"getVisibleIdeas",value:function(){if("opened"==this.state.mobileState)return console.log(1),this.state.visibleIdeas;console.log(2);var e=this.map.getVisibleIdeas();return this.setState({visibleIdeas:e}),e}},{key:"setSelectedLocation",value:function(e){var t=this;t.map&&t.map.setSelectedLocation(e),e?t.infobar.ideaform&&(t.infobar.ideaform.handleLocationChange({location:e,address:"Bezig met adresgegevens ophalen..."}),t.map.getPointInfo(e,null,(function(n,r){var o=n&&n._display||"Geen adres gevonden";t.state.editIdea.address=o,t.infobar.ideaform.handleLocationChange({location:e,address:o})}))):(t.map&&t.map.unfadeAllMarkers(),t.setSelectedIdea(null),this.setState({status:"default",newIdea:null,editIdea:null},(function(){})))}},{key:"setNewIdea",value:function(e){var t=this;e&&(e.isPointInPolygon=e.location&&t.map.isPointInPolygon({lat:e.location.coordinates[0],lng:e.location.coordinates[1]},t.config.map.polygon)),t.setState({editIdea:e},(function(){e?(t.map.fadeMarkers({exception:[e.location]}),e.location&&t.setSelectedLocation({lat:e.location.coordinates[0],lng:e.location.coordinates[1]}),t.infobar&&(t.setState({editIdea:t.state.editIdea}),e.location?(t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:"Bezig met adresgegevens ophalen..."})),t.map.getPointInfo({lat:e.location.coordinates[0],lng:e.location.coordinates[1]},null,(function(e,n){var r=e&&e._display||"Geen adres gevonden",o=t.state.editIdea;o.address=r,t.setState({editIdea:o}),t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:r}))}))):t.infobar.setNewIdea(_objectSpread(_objectSpread({},t.state.editIdea),{},{address:"Geen locatie geselecteerd..."})),t.infobar.updateIdeas({ideas:t.state.ideas.filter((function(t){return t.id!=e.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]},maxLength:5}))):(t.map.unfadeAllMarkers(),t.infobar&&(t.infobar.setNewIdea(null),t.infobar.updateIdeas({ideas:t.getVisibleIdeas(),hideSortButton:!1})))}))}},{key:"setSelectedIdea",value:function(e,t){var n=this;n.setState({selectedIdea:e},(function(){if(e?(n.map.fadeMarkers({exception:e}),n.infobar&&(n.infobar.setSelectedIdea(e),n.infobar.updateIdeas({ideas:n.state.ideas.filter((function(t){return t.id!=e.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]},maxLength:5}))):(n.map&&n.map.unfadeAllMarkers(),n.infobar&&(n.infobar.setSelectedIdea(null),n.infobar.updateIdeas({ideas:n.getVisibleIdeas(),hideSortButton:!1}))),"function"==typeof t)return t()}))}},{key:"onMapClick",value:function(e,t){if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));switch(this.state.status){case"idea-details":break;case"idea-form":this.map.isPointInPolygon(e.latlng,this.config.map.polygon)&&this.setSelectedLocation(e.latlng);break;default:if(this.setSelectedIdea(null),!this.state.selectedIdea&&!this.map.selectedLocation||t){if(!this.config.canSelectLocation)break;this.setState(_objectSpread(_objectSpread({},this.state),{},{status:"location-selected"}));var n={id:"New Idea",location:{coordinates:[e.latlng.lat,e.latlng.lng]}};this.setNewIdea(n)}else this.setState(_objectSpread(_objectSpread({},this.state),{},{status:"default"})),document.location.href="#",this.setSelectedLocation(null),this.setNewIdea(null),this.infobar.updateIdeas({ideas:this.getVisibleIdeas(),hideSortButton:!1});this.map.updateFading(),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onMarkerClick",value:function(e){var t=this;if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));switch(this.state.status){case"idea-details":case"idea-form":break;default:this.state.editIdea?(this.setSelectedIdea(null),this.setState({status:"default"}),this.setNewIdea(null),this.onUpdateSelectedIdea(null)):this.setSelectedIdea(e.target.data,(function(){t.setState({status:"idea-selected"}),t.setNewIdea(null),t.onUpdateSelectedIdea(e.target.data)})),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onClusterClick",value:function(e){if("opened"==this.state.mobileState)return this.infobar.setState({mobileState:"closed"}),void this.setState({mobileState:"closed"},(function(){this.map.map.invalidateSize()}));this.setState({status:"default"}),this.setNewIdea(null),this.setSelectedIdea(null)}},{key:"onChangeMapBoundaries",value:function(){var e=this;if(console.log("change",e.state.status,e.map),e.map)switch(e.map.updateFading(),e.state.status){case"idea-details":case"idea-form":break;case"idea-selected":case"location-selected":if(e.infobar){var t=e.state.selectedIdea||e.state.editIdea;t&&e.infobar.updateIdeas({ideas:e.state.ideas.filter((function(e){return e.id!=t.id})),sortOrder:"distance",hideSortButton:!0,center:{lat:t.location.coordinates[0],lng:t.location.coordinates[1]},maxLength:5})}break;default:e.infobar&&e.infobar.updateIdeas({ideas:e.getVisibleIdeas(),hideSortButton:!1})}}},{key:"onUpdateEditIdea",value:function(e){this.setSelectedIdea(e),this.setState({editIdea:_objectSpread({},e)})}},{key:"onUpdateSelectedIdea",value:function(e){this.state.editIdea&&this.setNewIdea(null);var t=e?"idea-selected":"default";document.location.href=e?"#S"+e.id:"#",this.setState({status:t},(function(){this.setSelectedIdea(e)}))}},{key:"onIdeaClick",value:function(e){var t=this;this.state.editIdea&&this.setNewIdea(null),this.setSelectedIdea(e,(function(){t.setState({status:"idea-selected"},(function(){document.location.href="#D"+e.id}))}))}},{key:"onEditIdeaClick",value:function(e){var t=this,n={lat:e.location.coordinates[0],lng:e.location.coordinates[1]};t.showIdeaForm(e,(function(){t.infobar.ideaform.handleLocationChange({location:n,address:"Bezig met adresgegevens ophalen..."}),t.map.getPointInfo(n,null,(function(e,r){var o=e&&e._display||"Geen adres gevonden";t.state.editIdea.address=o,t.infobar.ideaform.handleLocationChange({location:n,address:o})}))}))}},{key:"onIdeaDeleted",value:function(e){var t=this;t.setNewIdea(null),t.setSelectedIdea(null),t.setSelectedLocation(null),t.setState({status:"default"},(function(){t.map.map.invalidateSize(),t.map.setBoundsAndCenter(),t.fetchData({})}))}},{key:"onDeleteIdeaClick",value:function(e){console.log("Delete idea",e.id),alert("TODO")}},{key:"onSelectedIdeaClick",value:function(e){var t=e.idea;document.location.href="#D"+t.id}},{key:"onNewIdeaClick",value:function(e){var t=this,n=e.idea,r=this,o=this.state.editIdea||{};o.typeId=n.typeId,r.showIdeaForm(o,(function(){if(t.state.editIdea&&t.state.editIdea.location){var e={lat:t.state.editIdea.location.coordinates[0],lng:t.state.editIdea.location.coordinates[1]};r.infobar.ideaform.handleLocationChange({location:e,address:"Bezig met adresgegevens ophalen..."}),r.map.getPointInfo(e,null,(function(t,n){var o=t&&t._display||"Geen adres gevonden";r.state.editIdea.address=o,r.infobar.ideaform.handleLocationChange({location:e,address:o})}))}}))}},{key:"onIdeaStored",value:function(e){this.setNewIdea(null),this.fetchData({showIdeaDetails:e.id})}},{key:"onIdeaLiked",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).yes+=e.change}},{key:"onReactionStored",value:function(e,t){t&&this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount++}},{key:"onReactionDeleted",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount--}},{key:"onChangeFilter",value:function(e){console.log(e),this.setSelectedIdea(null),this.setNewIdea(null),this.setSelectedLocation(null),this.setState({status:"default"}),this.onChangeMapBoundaries()}},{key:"onTileMouseOver",value:function(e){this.map.fadeMarkers({exception:e}),this.map.updateFading()}},{key:"onTileMouseOut",value:function(e){this.map.unfadeAllMarkers(),this.state.selectedIdea&&this.map.fadeMarkers({exception:this.state.selectedIdea}),this.map.selectedLocation&&this.map.fadeMarkers({}),this.map.updateFading()}},{key:"onClickBackToOverview",value:function(e){document.location.href="#S"+this.state.selectedIdea.id}},{key:"onClickMobileSwitcher",value:function(){var e=this;e.infobar&&e.infobar.setState({mobileState:"closed"==e.state.mobileState?"opened":"closed"}),e.setState({mobileState:"closed"==e.state.mobileState?"opened":"closed"},(function(){if(e.map.map.invalidateSize(),"location-selected"==this.state.status||"idea-selected"==this.state.status){e.state.selectedIdea||e.state.editIdea;e.map.setBoundsAndCenter()}}))}},{key:"render",value:function render(){var _this5=this,infoHTML=null,filterHTML=null,mobilePopupHTML=null;switch(this.state.status){case"idea-details":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,displayType:"details",idea:this.state.selectedIdea,className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.onClickBackToOverview()}},"Terug naar overzicht"));break;case"idea-form":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,displayType:"form",idea:_objectSpread(_objectSpread({},this.state.editIdea),{},{user:this.state.editIdea&&this.state.editIdea.user||this.config.user}),className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.hideIdeaForm()}},"Terug naar ",this.state.editIdea&&"number"==typeof this.state.editIdea.id?"idee":"overzicht"));break;case"location-selected":case"idea-selected":"location-selected"==this.state.status?this.state.editIdea&&this.state.editIdea.isPointInPolygon&&(mobilePopupHTML=React.createElement(_preview_jsx__WEBPACK_IMPORTED_MODULE_2__.a,{config:_objectSpread(_objectSpread({},this.config),{},{display:{type:"mobilePreview"}}),selectedLocation:this.state.editIdea})):mobilePopupHTML=React.createElement("div",{className:"osc-mobile-popup osc-clickable",onClick:function(){_this5.setState({mobileState:"opened"}),_this5.infobar.setState({mobileState:"opened"}),document.location.href="#D"+_this5.state.selectedIdea.id}},React.createElement("div",{className:"osc-image",style:{backgroundImage:"url(".concat(this.state.selectedIdea&&this.state.selectedIdea.image,")")}}),eval(this.state.selectedIdea&&"this.state.selectedIdea.".concat(this.config.titleField))),infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",mobileState:this.state.mobileState,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__.a,{config:this.config,className:"osc-ideas-filterbar"});break;default:infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{config:this.config,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",mobileState:this.state.mobileState,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_0__.a,{config:this.config,className:"osc-ideas-filterbar"}),mobilePopupHTML=null}var divStyle={},simpleHTML=null;if("simple"==this.config.display.type){filterHTML=null,infoHTML=null,mobilePopupHTML=null;var buttonHTML=null;this.config.linkToCompleteUrl&&(buttonHTML=React.createElement("button",{onClick:function(){document.location.href=_this5.config.linkToCompleteUrl},className:"osc-button-blue",style:{position:"absolute",top:20,right:20}},"Bekijk de volledige kaart")),simpleHTML=React.createElement("div",{style:{position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1e3}},buttonHTML),this.config.display.width&&(divStyle.width=this.config.display.width),this.config.display.height&&(divStyle.height=this.config.display.height)}return React.createElement("div",{id:this.divId,className:"osc-ideas-on-map osc-ideas-on-map-".concat(this.state.status," osc-mobile-").concat(this.state.mobileState),style:divStyle,ref:function(e){return _this5.instance=e}},filterHTML,infoHTML,React.createElement("div",{className:"osc-ideas-on-map-map osc-ideas-on-map-map-".concat(this.config.display.type)},React.createElement(_map_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{id:this.divId+"-map",config:_objectSpread(_objectSpread({},this.config.map),{},{types:this.config.types,typeField:this.config.typeField,zoomControl:"simple"!=this.config.display.type}),ref:function(e){return _this5.map=e}})),simpleHTML,mobilePopupHTML)}}]),OpenStadComponentIdeasOnMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_4__.a),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_8__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_9__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_6__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_7__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(OpenStadComponentIdeasOnMap)},function(e,t,n){"use strict";(function(e,r){var o,i=n(101);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(21),n(120)(e))},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";n.d(t,"a",(function(){return C}));var r=n(1),o=n(76);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,i=d(a);function a(){return u(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=React.createElement("h3",{className:"osc-title"},e.config.title," (",t.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(o.IdeasFilterbar,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(o.IdeasSort,{config:c({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),n,React.createElement(o.IdeasList,{config:e.config,ideas:t,className:""}))}}])&&l(t.prototype,n),r&&l(t,r),a}(o.IdeasOverview),y=n(97),g=n(125),v=n(98);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=P(e);if(t){var o=P(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return R(this,n)}}function R(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(i,e);var t,n,r,o=k(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{columns:1,showFilterbar:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},types:[]})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(t.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(t.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),t.state={currentSortOrder:t.config.defaultValue,selectedIdea:void 0,newIdea:void 0,ideas:[],mobileState:e.mobileState||"closed"},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.setSelectedIdeaListener=function(e){n.setSelectedIdea(e.detail)},document.addEventListener("osc-set-selected-idea",n.setSelectedIdeaListener),n.setSelectedLocationListener=function(e){n.setNewIdea(e.detail)},document.addEventListener("osc-set-selected-location",n.setSelectedLocationListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-set-selected-idea",this.setSelectedIdeaListener),document.removeEventListener("osc-set-selected-location",this.setSelectedLocationListener)}},{key:"updateIdeas",value:function(e){var t=e.ideas,n=void 0===t?this.state.ideas:t,r=e.sortOrder,o=void 0===r?this.state.currentSortOrder:r,i=(e.hideSortButton,e.center),a=void 0===i?{lat:52.37104644463586,lng:4.900402911007405}:i,c=e.maxLength;n=this.list?this.list.sorter.doSort({ideas:n,sortOrder:o,center:a}):[],c&&(n=n.splice(0,c)),this.setState({ideas:n})}},{key:"setSelectedIdea",value:function(e){this.setState(w(w({},this.state),{},{selectedIdea:e,newIdea:null}))}},{key:"setNewIdea",value:function(e){this.setState(w(w({},this.state),{},{newIdea:e,selectedIdea:null}))}},{key:"dispatchClickMobileSwitcher",value:function(e){e.stopPropagation();var t=new window.CustomEvent("osc-click-mobile-switcher",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this,t=this,n=w({},t.config);if(n.display.type="list",this.props.idea&&this.props.idea.extraData&&this.props.idea.extraData.type&&("Kans"==this.props.idea.extraData.type||"Knelpunt"==this.props.idea.extraData.type)&&(n.types=[{name:"Kans",label:"Dit gaat goed",value:"Kans",buttonLabel:"Ik wil een idee posten",backgroundColor:"#bed200",textColor:"black"},{name:"Knelpunt",label:"Dit kan beter",value:"Knelpunt",backgroundColor:"#ff9100",textColor:"black"}],n.typeField="extraData.type",n.showLabels=!0),"details"==t.props.displayType)return React.createElement(y.default,{config:n,idea:this.props.idea,className:t.props.className||"osc-infobar-idea-details",ref:function(t){return e.ideadetails=t}});if("form"==t.props.displayType)return React.createElement(g.a,{config:n,idea:this.props.idea,className:"osc-ideas-on-map-info",ref:function(t){return e.ideaform=t}});t.state.ideas;var r,o="",i="",a=null,c=!1;t.state.newIdea&&(o="in de buurt",i="Meer details en acties",a=5,c=!0),t.state.selectedIdea&&(o="in de buurt",i="Meer details",a=5,c=!0),o||(o="in dit gebied"),t.state.newIdea||t.state.selectedIdea||(i="".concat(n.ideaName," in dit gebied (").concat(t.state.ideas&&t.state.ideas.length||0,")")),"opened"==t.state.mobileState&&(i="Terug naar de kaart"),r=React.createElement("div",{className:"osc-mobile-switcher",onClick:function(e){return t.dispatchClickMobileSwitcher(e)}},i);var s=n.ideaName+" "+o;return n.display.onMouseOverTileFadeOthers=!0,React.createElement("div",{id:t.props.id,className:t.props.className||"osc-infobar",ref:function(e){return t.instance=e}},r,React.createElement("div",{className:"osc-info-content"},React.createElement(v.a,{config:n,selectedIdea:t.state.selectedIdea,selectedLocation:t.state.newIdea}),React.createElement(m,{config:n,ideas:t.state.ideas,maxLength:a,hideSortButton:c,title:s,ref:function(e){return t.list=e}})))}}])&&E(t.prototype,n),r&&E(t,r),i}(r.a)},function(e,t,n){"use strict";n.r(t);n(11),n(115);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(117),n(78));n.d(t,"default",(function(){return c.a})),n.d(t,"Lightbox",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t);n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(119),n(79));n.d(t,"default",(function(){return c.a})),n.d(t,"NLMap",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t);n(11);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(122),n(80));n.d(t,"default",(function(){return c.a})),n.d(t,"IdeaDetails",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Preview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(22);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Preview=function(_OpenStadComponent){_inherits(Preview,_OpenStadComponent);var _super=_createSuper(Preview);function Preview(e){var t;return _classCallCheck(this,Preview),(t=_super.call(this,e,{display:{type:"idea-selection"},api:{},content:{noSelectionLoggedInHTML:'<div class="osc-infobar-default-block"><div class="osc-infobar-default-block-line osc-line-1">Klik op een plek op de kaart om een nieuw punt toe te voegen.</div><div class="osc-infobar-default-block-line osc-line-2">Selecteer een inzending op de kaart om meer informatie over de inzending te bekijken.</div><div class="osc-infobar-default-block-line osc-line-3">Bekijk hieronder de inzendingen die nu zichtbaar zijn op de kaart.</div></div>',noSelectionNotLoggedInHTML:'<div class="osc-infobar-default-block"><div class="osc-infobar-default-block-line osc-line-1">Klik op een plek op de kaart om een nieuw punt toe te voegen.</div><div class="osc-infobar-default-block-line osc-line-2">Selecteer een inzending op de kaart om meer informatie over de inzending te bekijken.</div><div class="osc-infobar-default-block-line osc-line-3">Bekijk hieronder de inzendingen die nu zichtbaar zijn op de kaart.</div></div>',selectionActiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {addButton}.",selectionInactiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",selectionActiveNotLoggedInHTML:'Niet ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {loginButton} of <a href="{loginLink}">login link</a>.',selectionInactiveNotLoggedInHTML:"Niet ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",mobilePreviewLoggedInHTML:"Een locatie vlakbij <h4>{address}</h4>{addButton}",mobilePreviewNotLoggedInHTML:'Een locatie vlakbij <h4>{address}</h4><div>Wilt u een nieuw punt toevoegen? Dan moet u eerst <a href="{loginLink}">inloggen</a>.</div>',showNoSelectionOnMobile:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content=e.config.content||{},e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(t.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(t.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),t.state={},t}return _createClass(Preview,[{key:"dispatchOnButtonIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selection-button-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchNewIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-new-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchSelectedIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selected-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchClosePreview",value:function(e,t){var n;e.stopPropagation(),"idea"==t&&(n=new window.CustomEvent("osc-set-selected-idea",{detail:null})),"location"==t&&(n=new window.CustomEvent("osc-set-selected-location",{detail:null})),document.dispatchEvent(n)}},{key:"render",value:function render(){var _this2=this,self=this;if("mobilePreview"==self.config.display.type){var contentHTML=this.config.api.isUserLoggedIn?this.config.content.mobilePreviewLoggedInHTML:this.config.content.mobilePreviewNotLoggedInHTML,_addButton=null,_loginButton=null,_loginLink=null;return this.config.api.isUserLoggedIn?this.config.idea.canAddNewIdeas&&(_addButton=React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){_this2.onClickMobileSwitcher(e),_this2.onNewIdeaClick(e)},ref:function(e){return self.newIdeaButton=e}},"Nieuw punt toevoegen")):this.config.idea.canAddNewIdeas&&(_loginButton=React.createElement("button",{onClick:function(){document.location.href="/oauth/login?returnTo="+encodeURIComponent(document.location.href)},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),_loginLink="javascript: document.location.href = '/oauth/login?returnTo=' + encodeURIComponent(document.location.href)"),contentHTML=contentHTML.replace(/\{address\}/g,this.props.selectedLocation.address||""),contentHTML=contentHTML.replace(/\{loginLink\}/g,_loginLink),contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:contentHTML,addButton:_addButton,loginButton:_loginButton}),React.createElement("div",{className:"osc-mobile-popup"},contentHTML)}var selectedLocationHTML=null,selectedIdeaHTML=null,titleAddition="",mobileSwitcherHTML=null,mobileTitle="",addButton=null,loginButton=null,loginLink=null;if(self.config.idea.canAddNewIdeas&&(addButton=self.config.types&&"typeId"==self.config.typeField?React.createElement("span",{className:"osc-new-idea-buttons"},self.config.types.map((function(e,t){var n=e;if(!n.auth||n.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,n.auth.createableBy)){var r=n?React.createElement("div",{className:"osc-button-background-image",dangerouslySetInnerHTML:{__html:n.buttonicon&&n.buttonicon.html||""}}):null;return React.createElement("button",{className:"osc-button osc-button-white"+(n&&n.auth&&n.auth.createableBy?" osc-button-required-role-is-".concat(n.auth.createableBy):""),onClick:function(e){return self.dispatchNewIdeaClick(e,{typeId:n.id||n.name})},key:"osc-button-".concat(t)},r,n&&n.buttonLabel||"Nieuw punt toevoegen")}return null}))):React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){return self.dispatchNewIdeaClick(e)}},"Nieuw punt toevoegen"),loginButton=React.createElement("button",{onClick:function(){document.location.href=_this2.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),loginLink="javascript: document.location.href = '".concat(this.config.loginUrl,"'")),self.props.selectedLocation){var _contentHTML=null;_contentHTML=self.props.selectedLocation.isPointInPolygon?self.config.api.isUserLoggedIn?self.config.content.selectionActiveLoggedInHTML:self.config.content.selectionActiveNotLoggedInHTML:self.config.api.isUserLoggedIn?self.config.content.selectionInactiveLoggedInHTML:self.config.content.selectionInactiveNotLoggedInHTML,_contentHTML=_contentHTML.replace(/\{address\}/g,self.props.selectedLocation.address||""),_contentHTML=_contentHTML.replace(/\{loginLink\}/g,loginLink),_contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:_contentHTML,addButton:addButton,loginButton:loginButton}),selectedLocationHTML=React.createElement("div",{className:"osc-infobar-new-idea"},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"location")},ref:function(e){return self.resetButton=e}}),_contentHTML),titleAddition="in de buurt",mobileTitle="Meer details en acties"}if(self.props.selectedIdea){var idea=self.props.selectedIdea,ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return e.name==ideaTypeValue||e.id==ideaTypeValue}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});var voteCountHTML=null;this.config.idea.showVoteButtons&&(voteCountHTML=React.createElement("div",{className:"osc-likes"},idea.yes||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&(argcountHTML=React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),selectedIdeaHTML=React.createElement("div",{className:"osc-infobar-selected-idea",onClick:function(e){return self.dispatchSelectedIdeaClick(e,self.props.selectedIdea)}},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"idea")},ref:function(e){return self.resetButton=e}}),React.createElement("h3",null,"Geselecteerd"),React.createElement("div",{className:"osc-infobar-selected-idea-idea"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-content"},React.createElement("h4",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.summaryField))),React.createElement("div",{className:"osc-stats"},voteCountHTML,argcountHTML,React.createElement("div",{className:"osc-type"},React.createElement("div",{className:"osc-type-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))),React.createElement("div",{className:"osc-clear-both"}))),titleAddition="in de buurt",mobileTitle="Meer details"}var defaultBlockHTML=null;if(!selectedLocationHTML&&!selectedIdeaHTML){var noSelectionHTML=self.config.content.noSelectionNotLoggedInHTML;self.config.api.isUserLoggedIn&&(noSelectionHTML=self.config.content.noSelectionLoggedInHTML),noSelectionHTML=noSelectionHTML.replace(/\{loginLink\}/g,loginLink),noSelectionHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:noSelectionHTML,addButton:addButton,loginButton:loginButton}),defaultBlockHTML=React.createElement("div",{className:"osc-infobar-default-block".concat(self.config.content.showNoSelectionOnMobile?" osc-visible-on-mobile":"")},noSelectionHTML),mobileTitle="".concat(self.config.ideaName," in dit gebied (").concat(self.state.ideas&&self.state.ideas.length||0,")")}return React.createElement("div",{className:"osc-selection-block"},defaultBlockHTML,selectedLocationHTML,selectedIdeaHTML)}}]),Preview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(77),o=function(e){return e.ideas},i=Object(r.a)([o],(function(e){return e}));Object(r.a)([o],(function(e){return e})),Object(r.a)([o],(function(e){return e}))},function(module,__webpack_exports__,__webpack_require__){"use strict";function amapsCreateClusterIcon(cluster){var self=this,count=cluster.getChildCount(),markers=cluster.getAllChildMarkers(),colors={},total=markers.length,isFaded=!1;markers.forEach((function(entry){var type=entry.data&&eval("entry.data.".concat(self.config.typeField)),tmp=self.config.types.find((function(e){return type&&(e.id==type||e.name==type)})),color=tmp&&(tmp.color||tmp.backgroundColor)||"#164995";null==type&&(type="undef"),colors[color]||(colors[color]=0),colors[color]++,entry.data&&entry.data.isFaded&&(isFaded=!0)}));var html='<svg viewBox="0 0 36 36"><circle cx="18" cy="18" r="14" fill="white"/>',soFar=0;return Object.keys(colors).forEach((function(e){var t=e,n=100*colors[e]/total;html+='  <path\n             d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"\n             fill="none"\n             transform="rotate('.concat(soFar/100*360,', 18, 18)"\n             stroke="').concat(t,'"\n             stroke-width="4"\n             stroke-dasharray="').concat(n,', 100"\n             />'),soFar+=n})),html+='<text x="18" y="21" text-anchor="middle" class="openstad-component-ideas-on-map-icon openstad-component-ideas-on-map-icon-text">'+count+"</text></svg>",L.divIcon({html:html,className:"openstad-component-ideas-on-map-icon-cluster",iconSize:L.point(36,36),iconAnchor:[18,18],isFaded:isFaded})}__webpack_require__.d(__webpack_exports__,"a",(function(){return amapsCreateClusterIcon}))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(39),o=function(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}s((o=o.apply(t,n||[])).next())}))},i=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},a=Object(r.b)("ideas/fetchIdeas",(function(e,t){var n=t.getState;return o(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return console.log("fetch ideas async"),e=n(),[4,fetch(e.config.api+"/site/"+e.config.siteId+"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1")];case 1:return[2,t.sent().json()]}}))}))}))}).call(this,n(23))},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(1),o=n(2);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(u,e);var t,n,r,i=s(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e,{name:"likebutton",backgroundColor:"#164995",color:"#fff",text:"like",opinion:"yes"})).state={value:t.props.value,busy:!1},t}return t=u,(n=[{key:"componentDidMount",value:function(e,t){o.a.localStorage.get("osc-ideas-on-map-vote-pending")&&(this.doVote(),o.a.localStorage.remove("osc-ideas-on-map-vote-pending"))}},{key:"doVote",value:function(e){var t=this;if(e&&e.stopPropagation(),!this.state.busy){this.setState({busy:!0});var n=this,r="".concat(n.config.api.url,"/api/site/").concat(n.config.siteId,"/vote"),i=o.a.api.getHeaders(n.config);if(!n.config.user||!n.config.user.role){o.a.localStorage.set("osc-ideas-on-map-vote-pending",!0);var a="/oauth/login?returnTo="+encodeURIComponent(document.location.href)+"&useOauth=anonymous";return document.location.href=a}fetch(r,{method:"post",headers:i,body:JSON.stringify({ideaId:n.props.idea.id,opinion:n.config.opinion})}).then((function(e){if(!e.ok)throw Error("Stemmen is niet gelukt");return e.json()})).then((function(e){var r=e.length?1:-1,o=n.state.value+r;n.setState({value:o}),n.props.idea.userVote=e.length&&e||null,t.setState({busy:!1});var i=new window.CustomEvent("osc-idea-liked",{detail:{ideaId:n.props.idea.id,change:r}});document.dispatchEvent(i)})).catch((function(e){alert(e.message)}))}}},{key:"render",value:function(){var e=this,t=parseInt(e.state.value)||0,n=parseInt(t/100)||0,r=parseInt((t-100*n)/10)||0,o=t-100*n-10*r;return React.createElement("div",{id:e.id,className:e.props.className||"osc-vote-button osc-number-button",ref:function(t){return e.instance=t}},React.createElement("div",{className:"osc-number-plates",style:{color:this.config.color,backgroundColor:this.config.backgroundColor}},React.createElement("div",{id:"".concat(this.config.name,"-number-plate-000"),className:"osc-number-plate"},n),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-00"),className:"osc-number-plate"},r),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-0"),className:"osc-number-plate"},o)),React.createElement("div",{className:"osc-number-button-text ".concat(this.config.name,"-name ").concat(this.props.idea.userVote?" osc-user-has-voted":""," ").concat(this.state.busy?" osc-busy":""),style:{color:this.config.color,backgroundColor:this.config.backgroundColor},onClick:function(t){return e.doVote(t)}},e.config.text),React.createElement("div",{className:"osc-clear-both"}))}}])&&a(t.prototype,n),r&&a(t,r),u}(r.a)},function(e,t,n){var r=n(49),o=n(45),i=n(112),a=n(48),c=n(113),s=[].push,u=function(e){var t=1==e,n=2==e,u=3==e,l=4==e,f=6==e,d=5==e||f;return function(p,h,m,y){for(var g,v,b=i(p),_=o(b),w=r(h,m,3),O=a(_.length),E=0,S=y||c,k=t?S(p,O):n?S(p,0):void 0;O>E;E++)if((d||E in _)&&(v=w(g=_[E],E,b),e))if(t)k[E]=v;else if(v)switch(e){case 3:return!0;case 5:return g;case 6:return E;case 2:s.call(k,g)}else if(l)return!1;return f?-1:u||l?l:k}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s})),n.d(t,"OpenstadStore",(function(){return s}));var r=n(39),o=n(15),i=Object(r.c)({name:"config",initialState:{api:{}},reducers:{}}).reducer,a=n(54),c=Object(o.c)({config:i,ideas:a.b}),s=function(e){return Object(r.a)({reducer:c,preloadedState:e})}},function(e,t,n){"use strict";e.exports=n(134)},function(e,t,n){"use strict";var r=n(108),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var u=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=s(t),m=s(n),y=0;y<a.length;++y){var g=a[y];if(!(i[g]||r&&r[g]||m&&m[g]||c&&c[g])){var v=d(n,g);try{u(t,g,v)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return C}));var r=n(1),o=n(76),i=(n(4),n(0)),a=n.n(i);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?m(e):t}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{searchIn:["ideas","addresses"]})).config.doSearchFunction=t.config.doSearchFunction||t.doSearchx.bind(m(t)),t.state={searchValue:"",searchResult:{locations:[],ideas:[]},showSuggestions:!1},t.updateSearchResult=t.updateSearchResult.bind(m(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"handleChange",value:function(e){this.updateSearchValue(e),e.length>=3&&this.config.doSearchFunction(e,this.updateSearchResult)}},{key:"handleButtonClick",value:function(e){var t=this;t.state.searchValue&&t.setState({searchValue:""},(function(){t.inputfield.focus()}))}},{key:"updateSearchValue",value:function(e){this.setState({searchValue:e,showSuggestions:e.length>=3})}},{key:"showSuggestions",value:function(){this.setState({showSuggestions:this.state.searchValue.length>=3})}},{key:"hideSuggestions",value:function(){var e=this;setTimeout((function(){e.setState({showSuggestions:!1})}),500)}},{key:"updateSearchResult",value:function(e,t){this.setState(u(u({},this.state),{},{searchResult:t,showSuggestions:e.length>=3}))}},{key:"doSearchx",value:function(e){console.log("search function not defined")}},{key:"onSuggestionClick",value:function(e,t,n){this.updateSearchValue(e),n&&n(t)}},{key:"render",value:function(){var e=this,t=null;if(e.state.showSuggestions){var n=null;this.config.searchIn.includes("ideas")&&this.config.searchIn.includes("addresses")&&(n=a.a.createElement("div",{className:"osc-search-suggestions-hr"}));var r=null;this.config.searchIn.includes("addresses")&&(r=a.a.createElement("div",null,"Adressen:",e.state.searchResult.locations.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})}))));var o=null;this.config.searchIn.includes("ideas")&&(o=a.a.createElement("div",null,this.config.ideaName,":",e.state.searchResult.ideas.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})})))),t=a.a.createElement("div",{className:"osc-search-suggestions",ref:function(t){return e.suggestions=t}},r,n,o)}return a.a.createElement("div",{id:e.id,className:e.props.className||"osc-search",ref:function(t){return e.instance=t}},t,a.a.createElement("input",{type:"text",value:this.state.searchValue,placeholder:e.config.placeholder,onChange:function(){return e.handleChange(e.inputfield.value)},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-search-input",ref:function(t){return e.inputfield=t}}),a.a.createElement("button",{className:"osc-search-button".concat(this.state.searchValue?" osc-active":""),onClick:function(t){return e.handleButtonClick(t)},ref:function(t){return e.resetButton=t}}))}}])&&f(t.prototype,n),r&&f(t,r),i}(r.a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=P(e);if(t){var o=P(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return R(this,n)}}function R(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(a,e);var t,n,r,i=k(a);function a(){return O(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e,t=this,n=null;t.config.search&&(n=React.createElement("div",{className:"osc-search-container"},React.createElement("div",{className:"osc-search-button",onClick:function(){return t.toggleMobileActiveSelector("search")}}),React.createElement(g,{config:_({},this.config),className:"osc-search".concat("search"==t.state.mobileActiveSelector?" osc-is-active":"")}))),e=React.createElement("button",{value:"reset",onClick:function(){return t.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,i=null;if(t.config.filter.length){var a=t.filters&&t.filters.find((function(e){return e.state.currentValue}));t.filters=[],i=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(a?" osc-active":""),onClick:function(){return t.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==t.state.mobileActiveSelector?" osc-is-active":"")},t.config.filter.map((function(e,n){return React.createElement(o.IdeasFilter,{config:e,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(e){return t.filters[n]=e}})}))),e)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},i),React.createElement("div",{className:"osc-ideas-filterbar ".concat(t.props.className||"")},n,r)}}])&&E(t.prototype,n),r&&E(t,r),a}(o.IdeasFilterbar)},function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t,n){var r=n(47);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(10),o=n(114),i=n(50)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(46);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){n(116);var r=n(43);e.exports=r("Array","findIndex")},function(e,t,n){"use strict";var r=n(40),o=n(104).findIndex,i=n(41),a=n(42),c="findIndex",s=!0,u=a(c);c in[]&&Array(1).findIndex((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!u},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return ye})),n.d(t,"ChoicesGuide",(function(){return ye})),n.d(t,"ChoicesGuideResult",(function(){return Ie}));n(11),n(127),n(111);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=(n(130),n(4)),s=n.n(c),u=n(1),l=n(2),f=n(22),d=n(6);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?v(e):t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=y(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).config.aspectRatio=t.config.aspectRatio||"16x9",t.questionId=e.data.id,t.state={value:50,isAnswered:!1},t.onChangeHandler=t.onChangeHandler.bind(v(t)),t.showLightbox=t.showLightbox.bind(v(t)),t}return t=i,(n=[{key:"onChangeHandler",value:function(e){var t=this,n={value:e,isAnswered:!0,error:void 0};this.setState(n,(function(){t.liveUpdates()}))}},{key:"isValid",value:function(){return!(void 0===(this.props.data||{}).value&&!this.state.isAnswered&&(this.setState({error:"Je hebt nog geen keuze gemaakt"}),1))}},{key:"getAnswer",value:function(){if(this.state.isAnswered){var e,t=this.props.data||{},n=(t.values,t.dimensions);try{n=JSON.parse(n)}catch(e){}return n=n||["x"],"number"==typeof this.state.value||"string"==typeof this.state.value?(e={},n.includes("x")&&(e.x=this.state.value),n.includes("y")&&(e.y=this.state.value),n.includes("z")&&(e.z=this.state.value)):(e={},n.includes("x")&&(e.x=this.state.value.x),n.includes("y")&&(e.y=this.state.value.y),n.includes("z")&&(e.z=this.state.value.z)),e}}},{key:"liveUpdates",value:function(){var e=new window.CustomEvent("osc-choices-guide-live-updates");document.dispatchEvent(e)}},{key:"showLightbox",value:function(e){var t=this.props.data||{},n=[t.values&&t.values.A&&t.values.A.questionImage||"",t.values&&t.values.B&&t.values.B.questionImage||""],r=n.findIndex((function(t){return t==e})),o=new window.CustomEvent("osc-show-light-box",{detail:{images:n,startIndex:r,aspectRatio:this.config.aspectRatio}});document.dispatchEvent(o)}},{key:"render",value:function(){var e=this,t=this,n=t.props.data||{},r=!1;t.state.error&&(r=!0);var o=t.state.isAnswered,i="object"==p(n.value)?n.value.x:void 0!==n.value?n.value:"not defined";"not defined"===i?i=this.state.value:o=!0;var a=null,c=n.images;if(c){Array.isArray(c)||(c=[c]);var s=c[0];a=React.createElement("div",{className:"osc-question-image-container"},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:s}))}var u=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}})),l=null;switch(n.type){case"continuous":l=React.createElement("div",{className:"osc-question-selector"},React.createElement(d.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:n.minLabel}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:n.maxLabel}}));break;case"a-to-b":var h=n.values&&n.values.A&&n.values.A.label||"A",m=n.values&&n.values.B&&n.values.B.label||"B",y=n.values&&n.values.A&&n.values.A.questionText,g=n.values&&n.values.B&&n.values.B.questionText,v=null,b=null;y&&g&&(v=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},h),React.createElement("div",{className:"osc-question-description-labeled-text"},y)),b=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},m),React.createElement("div",{className:"osc-question-description-labeled-text"},g)),u=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),v,b));var _=n.values&&n.values.A&&n.values.A.questionImage,w=n.values&&n.values.B&&n.values.B.questionImage;_&&w&&(u=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-a"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-a"},h),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:_,onClick:function(){return t.showLightbox(_)}}))),React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-b"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-b"},m),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:w,onClick:function(){return t.showLightbox(w)}}))),React.createElement("div",{style:{clear:"both",height:15}}),v,b)),l=React.createElement("div",{className:"osc-question-selector"},React.createElement("div",{className:"osc-question-selector-label-a"},h),React.createElement("div",{className:"osc-question-selector-label-b"},m),React.createElement(d.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:n.minLabel}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:n.maxLabel}}));break;case"enum-radio":l=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(r,o){var i=parseInt(1e6*Math.random()),a=!1;return"object"==p(n.value)?(a=!0,Object.keys(n.value).forEach((function(e){n.value[e]!==r.value[e]&&(a=!1)}))):n.value===r.value&&(a=!0),"undefined"!=n.value?n.value:e.state.value,React.createElement("div",{key:"div-value-".concat(i),className:"osc-radio-container"},React.createElement("div",{className:"osc-radio-input".concat(a?" osc-radio-input-checked":"")},React.createElement("input",{name:"enum-radio-".concat(n.id),type:"radio",onChange:function(){return t.onChangeHandler(r.value)},key:"button-value-".concat(i)})),React.createElement("div",{className:"osc-radio-text"},r.text))})));break;case"enum-buttons":l=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(e,n){return React.createElement("button",{onClick:function(){return t.onChangeHandler(e.value)},key:"button-value-".concat(n)},e.text)})));break;default:l=React.createElement("div",null,"Type ",n.type," is (nog) niet geimplementeerd.")}var O=null;return r&&(O=React.createElement("div",{className:"osc-error-text"},t.state.error)),React.createElement("div",{id:t.props.config.divId,className:"osc-question osc-question-".concat(n.type).concat(r?" osc-error":"")},a,React.createElement("div",{className:"osc-question-content",id:t.props.config.divId+"-content"},React.createElement("h3",{className:"osc-question-title"}," ",n.title),u,l,O))}}])&&h(t.prototype,n),r&&h(t,r),i}(u.a);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){S(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function S(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function P(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=I(e);if(t){var o=I(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return C(this,n)}}function C(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(i,e);var t,n,r,o=P(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).noOfQuestionsToShow=t.config.noOfQuestionsToShow||1,t.questionElements=[],t.state={currentQuestion:0,values:{}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"isValid",value:function(){var e=this,t=!0,n=e.props.data.questions.slice(e.state.currentQuestion,e.state.currentQuestion+e.noOfQuestionsToShow),r=!1;return n.forEach((function(n,o){e.questionElements[o].isValid()||(r||setTimeout((function(){document.querySelector("#".concat(e.questionElements[o].config.divId,"-content")).scrollIntoView({behavior:"smooth"})}),250),r=!0,t=!1)})),t}},{key:"getAnswers",value:function(){var e=this,t=s()({},this.props.data&&this.props.data.values,e.state.values);return e.props.data&&e.props.data.questions.forEach((function(n,r){var o=e.questionElements.find((function(e){return e&&e.questionId==n.id}));o&&void 0!==o.getAnswer()&&(t[n.id]=o.getAnswer())})),e.setState({values:t}),t}},{key:"gotoNextQuestion",value:function(){if(this.isValid()){var e=this.state.currentQuestion+this.noOfQuestionsToShow;return e>=this.props.data.questions.length?(e=0,this.setState({currentQuestion:e}),{isReady:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isReady:!1,currentQuestion:e})}}},{key:"gotoPreviousQuestion",value:function(){var e=this.state.currentQuestion-this.noOfQuestionsToShow;return e<0?(e=0,this.setState({currentQuestion:e}),{isBeginning:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isBeginning:!1,currentQuestion:e})}},{key:"render",value:function(){var e,t=this,n=t.props.data||{questions:[]},r=n.questions.slice(t.state.currentQuestion,t.state.currentQuestion+t.noOfQuestionsToShow),o=s()({},this.props.data&&this.props.data.values,t.state.values);return e=React.createElement("div",{className:"osc-questions"},r.map((function(e,n){return React.createElement(_,{config:E(E({},t.config),{},{divId:"osc-question-".concat(e.id)}),data:E(E({},e),{},{value:o[e.id]}),key:"question-".concat(e.id),ref:function(e){t.questionElements[n]=e}})}))),React.createElement("div",{id:this.id,className:"osc-question-group"},React.createElement("h3",{className:"osc-question-group-title"},n.title),React.createElement("div",{className:"osc-question-group-description",dangerouslySetInnerHTML:{__html:n.description}}),e)}}])&&k(t.prototype,n),r&&k(t,r),i}(u.a);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=N(e);if(t){var o=N(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return D(this,n)}}function D(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(i,e);var t,n,r,o=M(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),null==(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null,barColor:{default:"#bed200",min:"#ff9100",max:"#bed200"}})).config.barColor.min&&(t.config.barColor.min="#ff9100"),null==t.config.barColor.max&&(t.config.barColor.max="#bed200"),t.answers=e.data&&e.data.answers||{},Object.keys(t.answers).forEach((function(e){t.answers[e]==parseInt(t.answers[e])&&(t.answers[e]={x:parseInt(t.answers[e])})})),t.state={score:t.props.score||0},t}return t=i,(n=[{key:"getTitle",value:function(e,t){return this.props.data&&this.props.data.title}},{key:"calculateScore",value:function(e){var t=this,n=this.answers,r=e||{},o=(Object.keys(n).length,{});Object.keys(n).forEach((function(e){var i=n[e]||{},a=r[e]||(t.config.startWithAllQuestionsAnswered?{x:50,y:50,z:50}:{}),c=o[e]={};["x","y","z"].forEach((function(e){if(void 0!==i[e]&&void 0!==a[e])return c[e]=100-Math.abs(i[e]-a[e])}))}));var i={};return Object.keys(n).forEach((function(e){["x","y","z"].forEach((function(t){i[t]=i[t]||{score:[],noOfAnswers:0},void 0!==o[e][t]&&i[t].score.push(o[e][t]),n[e]&&void 0!==n[e][t]&&i[t].noOfAnswers++}))})),Object.keys(i).forEach((function(e){i[e]=i[e].score.length?i[e].score.reduce((function(e,t){return e+t}))/i[e].noOfAnswers:void 0})),this.setState({score:i}),i}},{key:"render",value:function(){var e=this,t=e.state.score,n=null;switch(this.config.type){case"plane":var r=null,o=this.props.data&&this.props.data.images;if(o){Array.isArray(o)||(o=[o]);var i=o[0],a=i;"object"==L(i)&&(a=i.src),r=React.createElement("img",{className:"osc-choice-plane-background-image",src:a,style:{width:this.props.baseSize/2,height:this.props.baseSize/2}})}return React.createElement("div",{className:"osc-choice-plane",style:{width:this.props.baseSize/2,height:this.props.baseSize/2}},r);case"minus-to-plus-100":var c=null,s=parseInt(2*(t.x-50));e.config.withPercentage&&(c=React.createElement("div",{className:"osc-percentage"},s,"%"));var u=e.config.barColor.max.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),l=e.config.barColor.min.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),f=parseInt(l[1],16)+(parseInt(u[1],16)-parseInt(l[1],16))*(t.x/100),d=parseInt(l[2],16)+(parseInt(u[2],16)-parseInt(l[2],16))*(t.x/100),p=parseInt(l[3],16)+(parseInt(u[3],16)-parseInt(l[3],16))*(t.x/100),h={backgroundColor:"rgb(".concat(f,",").concat(d,",").concat(p,")")};s>=0&&(h.width=s/2+"%",h.left="50%",h.right="auto"),s<0&&(h.width=-s/2+"%",h.left="auto",h.right="50%"),n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar osc-from-center".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-progress",style:h})),c);break;case"zero-to-100":default:var m=null;if(e.config.withPercentage){var y=parseInt(t.x);m=React.createElement("div",{className:"osc-percentage"},y,"%")}h={width:(t.x||0)+"%",backgroundColor:e.config.barColor.default},n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:h})),m)}var g=null;return(e.config.minLabel||e.config.maxLabel)&&(g=React.createElement("div",{className:"osc-minmax-labels"},React.createElement("div",{className:"osc-min-label"},e.config.minLabel),React.createElement("div",{className:"osc-max-label"},e.config.maxLabel))),React.createElement("li",{className:"osc-choice"},n,g)}}])&&T(t.prototype,n),r&&T(t,r),i}(u.a);function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){q(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function W(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=K(e);if(t){var o=K(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return z(this,n)}}function z(e,t){return!t||"object"!==F(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=W(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null})).choiceElements=[],t.state={title:"Je hebt nog geen keuze gemaakt",scores:e.scores,planePos:{x:50,y:50}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.choicesClickListener=function(e){n.setState({random:Math.random()})},document.addEventListener("osc-choices-click",n.choicesClickListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-click",self.choicesClickListener)}},{key:"calculateScores",value:function(e){var t=this,n={};t.choiceElements.forEach((function(t){n[t.config.divId]=t.calculateScore(e)}));var r={x:50,y:50};if(t.config.type){var o=Object.keys(e);if(o.length){r={x:0,y:0};var i={x:0,y:0,z:0};o.forEach((function(t){var n=e[t];["x","y","z"].forEach((function(e){void 0!==n[e]&&(r[e]+=parseInt(n[e])||0,i[e]++)}))})),r.x=i.x?parseInt(r.x/i.x):void 0,r.y=i.y?parseInt(r.y/i.y):void 0}}return t.setState({answers:e,scores:n,planePos:r}),{answers:e,scores:n,planePos:r}}},{key:"getPreferedChoice",value:function(e){var t=e.scores,n=e.planePos,r=this;switch(t=t||r.state.scores,r.config.type){case"plane":return(n=n||r.state.planePos).x<50&&n.y<50?r.choiceElements[0]:n.x>50&&n.y<50?r.choiceElements[1]:n.x<50&&n.y>50?r.choiceElements[2]:n.x>50&&n.y>50?r.choiceElements[3]:null;default:var o=Object.keys(t).sort((function(e,n){return t[n].x-t[e].x}))[0];return r.choiceElements.find((function(e){return e&&e.config.divId==o}))}}},{key:"render",value:function(){var e=this;switch(this.config.type){case"plane":var t=document.querySelector("#".concat(this.divId))&&document.querySelector("#".concat(this.divId)).offsetWidth-1||180,n=(void 0===e.state.planePos.y?50:e.state.planePos.y)*(t/100),r=(void 0===e.state.planePos.x?50:e.state.planePos.x)*(t/100);return React.createElement("div",{id:this.divId,className:"osc-choices osc-choice-plane-plane",ref:function(t){e.planePlaneElement=t}},Object.keys(e.props.choices).map((function(n,r){var o=e.props.choices[n];return React.createElement(A,{config:U({divId:"choice-".concat(o.id)},e.config),data:o,score:e.props.scores&&e.props.scores["choice-".concat(o.id)],key:"choice-".concat(o.id),baseSize:t,ref:function(t){e.choiceElements[r]=t}})})),React.createElement("div",{className:"osc-point",style:{top:n,left:r}}),React.createElement("div",{style:{clear:"both"}}));case"zero-to-100":case"minus-to-plus-100":default:return React.createElement("ul",{className:"osc-choices"},Object.keys(e.props.choices).map((function(t,n){var r=e.props.choices[t];return React.createElement(A,{config:U({divId:"choice-".concat(r.id)},e.config),data:r,score:e.props.scores&&e.props.scores["choice-".concat(r.id)],key:"choice-".concat(r.id),ref:function(t){e.choiceElements[n]=t}})})))}}}])&&H(t.prototype,n),r&&H(t,r),i}(u.a);function J(e){return(J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=X(e);if(t){var o=X(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Y(this,n)}}function Y(e,t){return!t||"object"!==J(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function X(e){return(X=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(i,e);var t,n,r,o=Z(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null}})).state={choicesGuideId:t.props.data.choicesGuideId,currentTarget:{},busy:!1},t.onFinished=t.props.onFinished,t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.config.choicesGuideId,"?includeChoices=1&includeQuestions=1"),n=l.a.api.getHeaders();fetch(t,{headers:n}).then((function(e){return e.json()})).then((function(t){var n={};n.choicesGuideId=t.id,n.title=t.title,n.description=t.description,n.images=t.images,n.choices=t.choices||[],n.questionGroups=t.questiongroups||[],n.busy=!1,e.setState(n,(function(){e.setCurrentForm({what:"choices-guide"})}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"handleFieldChange",value:function(e){var t=this.state.currentTarget;Object.keys(e).forEach((function(n){t[n]=e[n]})),this.setState({currentTarget:t})}},{key:"setCurrentForm",value:function(e){var t,n,r;switch(e.what){case"choices-guide":e.title=this.state.title,e.description=this.state.description,e.images=this.state.images?JSON.stringify(this.state.images):"";break;case"choice":n=e.questionGroupId?(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).choices&&t.choices.find((function(t){return t.id==e.choiceId}))||{}:this.state.choices.find((function(t){return t.id==e.choicesId}))||{},e.title=n.title,e.description=n.description,e.images=n.images?JSON.stringify(n.images):"",e.answers=n.answers?JSON.stringify(n.answers):"",e.seqnr=n.seqnr||0;break;case"question-group":t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{},e.title=t.title,e.description=t.description,e.images=t.images?JSON.stringify(t.images):"",e.seqnr=t.seqnr||0;break;case"question":r=(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).questions&&t.questions.find((function(t){return t.id==e.questionId}))||{},e.title=r.title,e.description=r.description,e.images=r.images?JSON.stringify(r.images):"",e.minLabel=r.minLabel,e.maxLabel=r.maxLabel,e.type=r.type,e.dimensions=r.dimensions,e.values=r.values?JSON.stringify(r.values):"",e.seqnr=r.seqnr||0}this.setState({currentTarget:e})}},{key:"submitForm",value:function(){var e=this;e.setState({busy:!0},(function(){var t,n,r;if(!e.config.user||!e.config.user.role||"admin"!=e.config.user.role)return alert("Je mag dit niet");switch(e.state.currentTarget.what){case"choices-guide":r=e.state.choicesGuideId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images};break;case"choice":r=e.state.currentTarget.choiceId,t=e.state.currentTarget.questionGroupId?"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/choice"):"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/choice"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,answers:e.state.currentTarget.answers?JSON.parse(e.state.currentTarget.answers):"",seqnr:e.state.currentTarget.seqnr};break;case"question-group":r=e.state.currentTarget.questionGroupId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,seqnr:e.state.currentTarget.seqnr};break;case"question":r=e.state.currentTarget.questionId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/question"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,minLabel:e.state.currentTarget.minLabel,maxLabel:e.state.currentTarget.maxLabel,type:e.state.currentTarget.type,dimensions:e.state.currentTarget.dimensions,values:e.state.currentTarget.values?JSON.parse(e.state.currentTarget.values):"",seqnr:e.state.currentTarget.seqnr}}t+=r?"/".concat(r):"";var o=l.a.api.getHeaders(e.config);fetch(t,{method:r?"PUT":"POST",headers:o,body:JSON.stringify(n)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData()})).catch((function(t){t.then((function(e){return console.log(e)})),e.setState({busy:!1})}))}))}},{key:"deleteElement",value:function(e){var t=e.what,n=e.questionGroupId,r=e.choiceId,o=e.questionId,i=e.title,a=this;if(confirm("Je gaat "+t+" "+i+" verwijderen. Weet je het zeker?")){var c;switch(t){case"question-group":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n);break;case"choice":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/choice/").concat(r);break;case"question":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/question/").concat(o)}var s=l.a.api.getHeaders(a.config);fetch(c,{method:"DELETE",headers:s}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){a.fetchData()})).catch((function(e){e.then((function(e){return console.log(e)})),a.setState({busy:!1})}))}}},{key:"render",value:function(){var e=this,t=null,n=null,r=null,o=React.createElement("button",{onClick:function(){e.setCurrentForm({what:"choices-guide"})}},"Terug"),i=React.createElement("button",{onClick:function(t){return e.submitForm()}},"Submit");switch(e.state.currentTarget.what){case"choices-guide":t="Bewerk keuzewijzer",n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{key:"x1",config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{key:"x2",config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(d.a.Textarea,{key:"i1",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}})),r=React.createElement("div",{className:"openstad-form"},React.createElement("h4",null,"Vraaggroepen"),Object.keys(e.state.questionGroups).map((function(t,n){var r,o=e.state.questionGroups[t],i=React.createElement("ul",null,Object.keys(o.questions).map((function(t,n){var r=o.questions[t];return React.createElement("li",null,"(",r.id,") - ",r.title," - ",r.seqnr,"-",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question",questionGroupId:o.id,questionId:r.id})}},"Bewerk"),"-",React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"question",questionGroupId:o.id,questionId:r.id,title:r.title})}},"Verwijder"))})),React.createElement("li",null,React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question",questionGroupId:o.id})}},"Nieuwe vraag"))),a=React.createElement("ul",null,Object.keys(o.choices).map((function(t,n){var r=o.choices[t];return React.createElement("li",null,r.title," - ",r.seqnr,"- ",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"choice",questionGroupId:o.id,choiceId:r.id})}},"Bewerk"),"- ",React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"choice",questionGroupId:o.id,choiceId:r.id,title:r.title})}},"Verwijder"))})),React.createElement("li",null,React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"choice",questionGroupId:o.id})}},"Nieuwe keuze")));return 0==Object.keys(o.choices).length&&0==Object.keys(o.questions).length&&(r=React.createElement("a",{href:"#",onClick:function(t){return e.deleteElement({what:"question-group",questionGroupId:o.id,title:o.title})}},"Verwijder")),React.createElement("div",null,o.title," - ",o.seqnr,"- ",React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question-group",questionGroupId:o.id})}},"Bewerk"),"- ",r,i,a)})),React.createElement("a",{href:"#",onClick:function(t){return e.setCurrentForm({what:"question-group"})}},"Nieuwe groep")),o=React.createElement("button",{onClick:function(){e.onFinished&&e.onFinished()}},"Terug");break;case"choice":t="Bewerk Keuze",n=React.createElement("div",null,React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(d.a.Textarea,{key:"i2",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Antwoorden"),React.createElement(d.a.Text,{config:{},value:e.state.currentTarget.answers,onChange:function(t){return e.handleFieldChange({answers:t.value})},ref:function(t){return e.answersField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;case"question-group":t="Bewerk Vragengroep",n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(d.a.Textarea,{key:"i3",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;case"question":t="Bewerk Vraag ".concat(e.state.currentTarget.questionId),n=React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.state.currentTarget.description,onChange:function(t){return e.handleFieldChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Afbeeldingen"),React.createElement(d.a.Textarea,{key:"i4",config:{},value:e.state.currentTarget.images,onChange:function(t){return e.handleFieldChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Label minimale waarde"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.minLabel,onChange:function(t){return e.handleFieldChange({minLabel:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Label maximale waarde"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.state.currentTarget.maxLabel,onChange:function(t){return e.handleFieldChange({maxLabel:t.value})},ref:function(t){return e.maxLabelField=t}}),React.createElement("h3",null,"Type"),React.createElement("select",{key:"dezemoetnogweg".concat(e.state.currentTarget.questionGroupId),value:e.state.currentTarget.type,onChange:function(){return e.handleFieldChange({type:e.typeField.value})},ref:function(t){return e.typeField=t}},React.createElement("option",{value:"continuous"},"continue"),React.createElement("option",{value:"a-to-b"},"van a naar b"),React.createElement("option",{value:"enum-buttons"},"multiple choice - buttons"),React.createElement("option",{value:"enum-radio"},"multiple choice - radio")),React.createElement("h3",null,"Dimensions"),React.createElement(d.a.Text,{config:{},value:e.state.currentTarget.dimensions,onChange:function(t){return e.handleFieldChange({dimensions:t.value})},ref:function(t){return e.dimensionsField=t}}),React.createElement("h3",null,"Waarden"),React.createElement(d.a.Textarea,{config:{},value:e.state.currentTarget.values,onChange:function(t){return e.handleFieldChange({values:t.value})},ref:function(t){return e.valuesField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.state.currentTarget.seqnr,onChange:function(t){return e.handleFieldChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}));break;default:o=React.createElement("button",{onClick:function(){e.onFinished&&e.onFinished()}},"Terug"),i=null}return React.createElement("div",{id:this.divId,className:"osc-form".concat(this.state.busy?" osc-busy":"")},React.createElement("h2",null,t),n,React.createElement("br",null),React.createElement("br",null),o,i,r)}}])&&Q(t.prototype,n),r&&Q(t,r),i}(u.a),te=n(95),ne=n(84);function re(e){var t=e.config,n="".concat(t.api&&t.api.url,"/api/site/").concat(t.siteId,"/choicesguide/").concat(t.choicesGuideId,"?includeChoices=1&includeQuestions=1"),r=l.a.api.getHeaders();return fetch(n,{headers:r}).then((function(e){return e.json()})).then((function(e){return{choicesGuideId:e.id,images:e.images,choicesGuideConfig:e.config,title:e.title,description:e.description,choices:e.choices||[],questionGroups:e.questiongroups||[],status:"active"}}))}function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e){return function(e){if(Array.isArray(e))return ae(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ae(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ae(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ae(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ce(Object(n),!0).forEach((function(t){ue(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ue(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fe(e,t){return(fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function de(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=me(e);if(t){var o=me(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pe(this,n)}}function pe(e,t){return!t||"object"!==oe(t)&&"function"!=typeof t?he(e):t}function he(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&fe(e,t)}(i,e);var t,n,r,o=de(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=he(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"<b>Jouw voorkeur:</b>{preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!1,minLabel:null,maxLabel:null}}));!n.config.aspectRatio&&n.config.choices&&n.config.choices.type&&"plane"==n.config.choices.type&&(n.config.aspectRatio="10x7");var r=l.a.localStorage.get("osc-choices-guide.values")||{},a=l.a.localStorage.get("osc-choices-guide.scores")||{};return n.state={title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,currentQuestion:void 0,status:"init",values:r[n.config.choicesGuideId],scores:a[n.config.choicesGuideId]},n.liveUpdates=n.liveUpdates.bind(he(t)),n.hideEditForm=n.hideEditForm.bind(he(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.liveUpdateListener=function(e){n.liveUpdates(e.detail)},document.addEventListener("osc-choices-guide-live-updates",n.liveUpdateListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-guide-live-updates",self.liveUpdateListener)}},{key:"fetchData",value:function(){var e=this;re({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e=this,t={currentQuestionGroupIndex:0};e.setState(t,(function(){e.liveUpdates();var t=new window.CustomEvent("osc-choices-guide-is-ready");document.dispatchEvent(t)}))}},{key:"showEditForm",value:function(){this.setState({status:"edit"})}},{key:"hideEditForm",value:function(){var e=l.a.localStorage.get("osc-choices-guide.values")||{},t=l.a.localStorage.get("osc-choices-guide.scores")||{};this.setState({title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,status:"init",values:e[this.config.choicesGuideId],scores:t[this.config.choicesGuideId]},(function(){this.fetchData()}))}},{key:"gotoNextQuestion",value:function(){var e=this,t={};t.values=s()(e.state.values||{},e.questionGroupElement.getAnswers()),e.setState(t),e.choicesElement.calculateScores(t.values),e.userPreference&&e.userPreference.calculateScores();var n=e.questionGroupElement.gotoNextQuestion(),r=n.isReady,o=n.currentQuestion;e.setState({currentQuestion:o},(function(){r?e.gotoNextGroup():window.scrollTo(0,0)}))}},{key:"gotoPreviousQuestion",value:function(){var e=this;if("result"==this.state.status)return this.gotoPreviousGroup();var t={};t.values=s()(this.state.values||{},this.questionGroupElement.getAnswers()),this.setState(t),this.choicesElement.calculateScores(t.values),self.userPreference&&self.userPreference.calculateScores();var n=this.questionGroupElement.gotoPreviousQuestion(),r=n.isBeginning,o=n.currentQuestion;this.setState({currentQuestion:o},(function(){r?e.gotoPreviousGroup():window.scrollTo(0,0)}))}},{key:"gotoNextGroup",value:function(){var e=this,t=se({},this.state);t.currentQuestionGroupIndex<t.questionGroups.length-1?(t.values=s()(t.values||{},this.questionGroupElement.getAnswers()),t.currentQuestionGroupIndex++,this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))):this.gotoResult()}},{key:"gotoPreviousGroup",value:function(){var e=this,t={};t.currentQuestionGroupIndex=this.state.currentQuestionGroupIndex-1,"result"==this.state.status&&(t.currentQuestionGroupIndex=this.state.questionGroups.length-1,t.status="active"),this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))}},{key:"gotoResult",value:function(){document.location.href=this.config.afterUrl}},{key:"liveUpdates",value:function(){var e,t=this,n=s()(t.state.values||{},t.questionGroupElement.getAnswers()),r=t.choicesElement.calculateScores(n);e=r.scores,t.userPreference&&t.userPreference.calculateScores(n),t.setState({scores:e,firstAnswerGiven:Object.keys(n).length>0},(function(){var r=l.a.localStorage.get("osc-choices-guide.values")||{};r[t.config.choicesGuideId]=n,l.a.localStorage.set("osc-choices-guide.values",r);var o=l.a.localStorage.get("osc-choices-guide.scores")||{};o[t.config.choicesGuideId]=e,l.a.localStorage.set("osc-choices-guide.scores",o),t.updateChoicesTitle()}))}},{key:"updateChoicesTitle",value:function(){var e=this,t=e.config.choices.title.noPreferenceYet,n=e.choicesElement&&e.choicesElement.getPreferedChoice({});e.state.firstAnswerGiven&&(t=n?e.config.choices.title.preference.replace("{preferredChoice}",n&&n.getTitle(e.state.scores[n.config.divId])||t):e.config.choices.title.inBetween),e.setState({choicesTitle:t})}},{key:"onChoicesClick",value:function(e){this.choicesAccordeon.className.match(" osc-closed")?this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-closed"," osc-open"):this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-open"," osc-closed");var t=new window.CustomEvent("osc-choices-click",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e,t=this,n=t.state.choices;t.state.currentQuestionGroupIndex>=0&&(e=t.state.questionGroups[t.state.currentQuestionGroupIndex])&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=null,o=t.state.images;o&&(Array.isArray(o)||(o=[o]),r=React.createElement(f.Image,{className:"osc-top-image-spacer",width:"100%",image:o[0]}));var i=null;if("edit"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement(ee,{config:t.config,onFinished:t.hideEditForm,data:se({},t.state)}));else if("init"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement("div",{className:"osc-intro"},"Laden..."));else{var a=React.createElement("div",{id:"osc-choices-container-"+this.divId,className:"osc-choices-container osc-accordeon osc-closed ".concat("osc-type-"+t.config.choices.type),ref:function(e){t.choicesAccordeon=e}},React.createElement("div",{onClick:function(e){return t.onChoicesClick(e)},className:"osc-accordeon-button",dangerouslySetInnerHTML:{__html:t.state.choicesTitle}}),React.createElement("div",{className:"osc-accordeon-content"},React.createElement(G,{config:se(se({},t.config.choices),{},{startWithAllQuestionsAnswered:this.config.startWithAllQuestionsAnswered}),choices:ie(n),scores:se({},t.state.scores),firstAnswerGiven:!!t.state.firstAnswerGiven,ref:function(e){t.choicesElement=e},key:"choices"}))),c=React.createElement(j,{config:t.config,data:e,ref:function(e){t.questionGroupElement=e},key:"group".concat(t.state.currentQuestionsGroupIndex)}),s=null;t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(s=React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk keuzewijzer"));var u=null,l=null,d=null;t.state.currentQuestionGroupIndex>0||t.state.currentQuestion>0?(l=function(){t.gotoPreviousQuestion()},d="Terug"):t.config.beforeUrl&&(u=t.config.beforeUrl,d="Introductie");var p=null,h=null;"init"==t.state.status?(p=null,h=null):(p=function(){t.gotoNextQuestion()},h="Volgende");var m=null;(d||h)&&(m=React.createElement(ne.default,{previousAction:l,previousUrl:u,previousLabel:d,nextAction:p,nextUrl:null,nextLabel:h})),i=React.createElement("div",{className:"osc-choices-guide-content"},s,a,c,m)}return React.createElement("div",{id:this.divId,className:"osc-choices-guide"},React.createElement(te.default,null),r,i)}}])&&le(t.prototype,n),r&&le(t,r),i}(u.a),ge=n(124);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e){return function(e){if(Array.isArray(e))return _e(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return _e(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _e(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function we(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?we(Object(n),!0).forEach((function(t){Ee(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):we(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ee(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ce(e);if(t){var o=Ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ie=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}(i,e);var t,n,r,o=Re(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",submission:{type:"none",requireLoginSettings:{title:"Stemcode",description:"Om te kunnen stemmen vul je de stemcode in die je per post hebt ontvangen. Wij controleren je stemcode op geldigheid. Als dat gelukt is kun je stemmen.",buttonTextLogin:"Vul je stemcode in",buttonTextLoggedIn:"Geldige stemcode",buttonTextAlreadySubmitted:"Ongeldige stemcode",changeLoginLinkText:"Vul een andere stemcode in",loggedInMessage:"Het controleren van je stemcode is gelukt! Klik op onderstaande knop om je keuze in te sturen.",alreadySubmittedMessage:"Deze stemcode is al gebruikt om te stemmen. Een stemcode kan maar één keer gebruikt worden."}},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"Jouw voorkeur is {preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!0,minLabel:null,maxLabel:null}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href);var n=l.a.localStorage.get("osc-choices-guide.values")||{},r=l.a.localStorage.get("osc-choices-guide.scores")||{};return t.state={title:"",answers:n[t.config.choicesGuideId],scores:r[t.config.choicesGuideId]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;re({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e,t=this,n=t.choicesElement&&t.choicesElement.calculateScores(t.state.answers);n.scores,e=n.planePos;var r="",o=-1;if(t.choicesElement){var i=t.choicesElement.getPreferedChoice({planePos:e});i?(r=t.config.choices.title.preference.replace("{preferredChoice}",i&&i.getTitle(t.state.scores[i.config.divId])||r),o=i.divId):r=t.config.choices.title.inBetween,t.setState({title:r});var a=new window.CustomEvent("osc-choices-guide-result-is-ready",{detail:{preferredChoice:{name:void 0,title:r,preferredChoiceId:o},answers:t.state.answers,scores:t.state.scores}});document.dispatchEvent(a),"auto"==t.config.submission.type&&t.submitResult()}}},{key:"submitResult",value:function(){var e,t=this;if("form"!=t.config.submission.type||(e=t.form.getValues(),t.form.validate({showErrors:!0,scrollTo:!0})))if(t.state.choicesGuideConfig&&t.state.choicesGuideConfig.requiredUserRole&&!t.isUserLoggedIn()){var n=document.querySelector(".osc-require-login");n&&n.scrollIntoView({behavior:"smooth"})}else ge.a.load().then((function(n){n.get().then((function(n){var r=n.visitorId,o="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/choicesguide/").concat(t.config.choicesGuideId,"/result"),i=l.a.api.getHeaders(t.config),a={result:{answers:t.state.answers,scores:t.state.scores},extraData:e,userFingerprint:r};fetch(o,{method:"POST",headers:i,body:JSON.stringify(a)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){"form"==t.config.submission.type&&(document.location.href=t.config.afterUrl)})).catch((function(e){e.then((function(e){try{e=JSON.parse(e)}catch(e){}var n=Array.isArray(e)&&e[0]&&e[0].message||e[0]||e.message||e;t.setState({submissionError:{message:n.toString(),type:"Je hebt je mening al ingestuurd"==n?"alreadySubmitted":"unknown"}},(function(){return console.log(e)}))}))}))}))}))}},{key:"isUserLoggedIn",value:function(){return this.config.user&&this.config.user.role&&"anonymous"!=this.config.user.role}},{key:"render",value:function(){var e,t=this,n=(t.props&&t.props.data,t.state.choices);t.state.questionGroups&&(e=t.state.questionGroups.find((function(e){return e.id==t.config.questionGroupId})))&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=!(!t.state.choicesGuideConfig||!t.state.choicesGuideConfig.requiredUserRole),o=null;n&&(o=React.createElement(G,{config:Oe({},t.config.choices),scores:Oe({},t.state.scores),choices:be(n),firstAnswerGiven:!0,ref:function(e){t.choicesElement=e},key:"choices"}));var i=null;t.config.moreInfoUrl&&t.config.moreInfoLabel&&(i=React.createElement("div",{className:"osc-more-info-link"},React.createElement("a",{href:t.config.moreInfoUrl},t.config.moreInfoLabel)));var a=null,c=null,s=null;if("form"==t.config.submission.type){if(a=React.createElement(d.a.Form,{config:t.config.submission.form,ref:function(e){t.form=e}}),r)if(t.isUserLoggedIn()){var u="osc-success",l=t.config.submission.requireLoginSettings.buttonTextLoggedIn,f=t.config.submission.requireLoginSettings.loggedInMessage;t.state.submissionError&&(u="osc-error","alreadySubmitted"==t.state.submissionError.type?(l=t.config.submission.requireLoginSettings.buttonTextAlreadySubmitted,f=t.config.submission.requireLoginSettings.alreadySubmittedMessage):f=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-logged-in osc-logged-in ".concat(u)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},React.createElement("button",{onClick:function(e){return document.location.href=t.config.loginUrl},className:"osc-button osc-button-white"},l),React.createElement("div",{className:"change-login-link-text"},React.createElement("a",{href:"javascript: document.location.href = '".concat(t.config.loginUrl,"'")},t.config.submission.requireLoginSettings.changeLoginLinkText)),React.createElement("div",{className:"osc-message"},f)))}else c=React.createElement("div",{className:"osc-require-login osc-not-yet-logged-in"},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},t.config.submission.requireLoginSettings.description,React.createElement("br",null),React.createElement("br",null),React.createElement("button",{onClick:function(e){return document.location.href=t.config.loginUrl},className:"osc-button osc-button-white"},t.config.submission.requireLoginSettings.buttonTextLogin)));var p=null,h=null;t.config.beforeUrl&&(p=t.config.beforeUrl,h=t.config.beforeLabel||"Vorige");var m=t.config.afterLabel||"Opslaan",y="form"==t.config.submission.type&&t.form&&!t.form.validate({})||r&&!t.isUserLoggedIn();(h||m)&&(s=React.createElement(ne.default,{previousAction:null,previousUrl:p,previousLabel:h,nextAction:function(){t.submitResult()},nextUrl:null,nextLabel:m,nextIsDisabled:y}))}var g=null;return t.state.submissionError&&!r&&(g=React.createElement("div",{className:"osc-message osc-error"},t.state.submissionError.message,";")),React.createElement("div",{className:"osc-choices-guide"},React.createElement("div",{className:"osc-result"},React.createElement("div",{className:"osc-result-content"},React.createElement("div",{className:"osc-choices-container ".concat("osc-type-"+t.config.choices.type)},React.createElement("h3",{dangerouslySetInnerHTML:{__html:t.state.title}}),o),i,a,c,g)),s)}}])&&Se(t.prototype,n),r&&Se(t,r),i}(u.a);ye.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(ye,{attributes:n,config:t}),e)},Ie.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(Ie,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";(function(e){var r=n(44);function o(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function i(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function a(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])}function c(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]}function s(e,t){return[e[0]^t[0],e[1]^t[1]]}function u(e){return e=s(e,[0,e[0]>>>1]),e=s(e=i(e,[4283543511,3981806797]),[0,e[0]>>>1]),e=s(e=i(e,[3301882366,444984403]),[0,e[0]>>>1])}function l(e,t){t=t||0;var n,r=(e=e||"").length%16,l=e.length-r,f=[0,t],d=[0,t],p=[0,0],h=[0,0],m=[2277735313,289559509],y=[1291169091,658871167];for(n=0;n<l;n+=16)p=[255&e.charCodeAt(n+4)|(255&e.charCodeAt(n+5))<<8|(255&e.charCodeAt(n+6))<<16|(255&e.charCodeAt(n+7))<<24,255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24],h=[255&e.charCodeAt(n+12)|(255&e.charCodeAt(n+13))<<8|(255&e.charCodeAt(n+14))<<16|(255&e.charCodeAt(n+15))<<24,255&e.charCodeAt(n+8)|(255&e.charCodeAt(n+9))<<8|(255&e.charCodeAt(n+10))<<16|(255&e.charCodeAt(n+11))<<24],p=a(p=i(p,m),31),f=o(f=a(f=s(f,p=i(p,y)),27),d),f=o(i(f,[0,5]),[0,1390208809]),h=a(h=i(h,y),33),d=o(d=a(d=s(d,h=i(h,m)),31),f),d=o(i(d,[0,5]),[0,944331445]);switch(p=[0,0],h=[0,0],r){case 15:h=s(h,c([0,e.charCodeAt(n+14)],48));case 14:h=s(h,c([0,e.charCodeAt(n+13)],40));case 13:h=s(h,c([0,e.charCodeAt(n+12)],32));case 12:h=s(h,c([0,e.charCodeAt(n+11)],24));case 11:h=s(h,c([0,e.charCodeAt(n+10)],16));case 10:h=s(h,c([0,e.charCodeAt(n+9)],8));case 9:h=i(h=s(h,[0,e.charCodeAt(n+8)]),y),d=s(d,h=i(h=a(h,33),m));case 8:p=s(p,c([0,e.charCodeAt(n+7)],56));case 7:p=s(p,c([0,e.charCodeAt(n+6)],48));case 6:p=s(p,c([0,e.charCodeAt(n+5)],40));case 5:p=s(p,c([0,e.charCodeAt(n+4)],32));case 4:p=s(p,c([0,e.charCodeAt(n+3)],24));case 3:p=s(p,c([0,e.charCodeAt(n+2)],16));case 2:p=s(p,c([0,e.charCodeAt(n+1)],8));case 1:p=i(p=s(p,[0,e.charCodeAt(n)]),m),f=s(f,p=i(p=a(p,31),y))}return f=o(f=s(f,[0,e.length]),d=s(d,[0,e.length])),d=o(d,f),f=o(f=u(f),d=u(d)),d=o(d,f),("00000000"+(f[0]>>>0).toString(16)).slice(-8)+("00000000"+(f[1]>>>0).toString(16)).slice(-8)+("00000000"+(d[0]>>>0).toString(16)).slice(-8)+("00000000"+(d[1]>>>0).toString(16)).slice(-8)}var f=window;function d(e){return parseInt(e)}function p(e){return parseFloat(e)}function h(e){return e.reduce((function(e,t){return e+(t?1:0)}),0)}var m=window,y=navigator;document;function g(){return h(["MSCSSMatrix"in m,"msSetImmediate"in m,"msIndexedDB"in m,"msMaxTouchPoints"in y,"msPointerEnabled"in y])>=4}var v=window,b=document;function _(e,t,n){(function(e){return e&&"function"==typeof e.setValueAtTime})(t)&&t.setValueAtTime(n,e.currentTime)}function w(t){return new e((function(e,n){t.oncomplete=function(t){return e(t.renderedBuffer)};var r=3,o=function(){switch(t.startRendering(),t.state){case"running":setTimeout((function(){return n(E("timeout"))}),1e3);break;case"suspended":b.hidden||r--,r>0?setTimeout(o,500):n(E("suspended"))}};o()}))}function O(e){for(var t=0,n=4500;n<5e3;++n)t+=Math.abs(e[n]);return t}function E(e){var t=new Error(e);return t.name=e,t}var S=document,k=["monospace","sans-serif","serif"],R=["sans-serif-thin","ARNO PRO","Agency FB","Arabic Typesetting","Arial Unicode MS","AvantGarde Bk BT","BankGothic Md BT","Batang","Bitstream Vera Sans Mono","Calibri","Century","Century Gothic","Clarendon","EUROSTILE","Franklin Gothic","Futura Bk BT","Futura Md BT","GOTHAM","Gill Sans","HELV","Haettenschweiler","Helvetica Neue","Humanst521 BT","Leelawadee","Letter Gothic","Levenim MT","Lucida Bright","Lucida Sans","Menlo","MS Mincho","MS Outlook","MS Reference Specialty","MS UI Gothic","MT Extra","MYRIAD PRO","Marlett","Meiryo UI","Microsoft Uighur","Minion Pro","Monotype Corsiva","PMingLiU","Pristina","SCRIPTINA","Segoe UI Light","Serifa","SimHei","Small Fonts","Staccato222 BT","TRAJAN PRO","Univers CE 55 Medium","Vrinda","ZWAdobeF"],P={fontStyle:"normal",fontWeight:"normal",letterSpacing:"normal",lineBreak:"auto",lineHeight:"normal",textTransform:"none",textAlign:"left",textDecoration:"none",textShadow:"none",whiteSpace:"normal",wordBreak:"normal",wordSpacing:"normal",position:"absolute",left:"-9999px",fontSize:"48px"};function C(e){return e.toDataURL()}var I=navigator,j=window;var L=navigator;var T=window;var x=window;var M=window;var D=document;var N={osCpu:function(){return navigator.oscpu},languages:function(){var e=[],t=L.language||L.userLanguage||L.browserLanguage||L.systemLanguage;if(void 0!==t&&e.push([t]),Array.isArray(L.languages))h(["webkitPersistentStorage"in y,"webkitTemporaryStorage"in y,0===y.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in m,"BatteryManager"in m,"webkitMediaStream"in m,"webkitSpeechGrammar"in m])>=5&&h([!("MediaSettingsRange"in m),"RTCEncodedAudioFrame"in m,""+m.Intl=="[object Intl]",""+m.Reflect=="[object Reflect]"])>=3||e.push(L.languages);else if("string"==typeof L.languages){var n=L.languages;n&&e.push(n.split(","))}return e},colorDepth:function(){return window.screen.colorDepth},deviceMemory:function(){return e=p(navigator.deviceMemory),t=void 0,"number"==typeof e&&isNaN(e)?t:e;var e,t},screenResolution:function(){var e=[d(T.screen.width),d(T.screen.height)];return e.sort().reverse(),e},availableScreenResolution:function(){if(x.screen.availWidth&&x.screen.availHeight){var e=[d(x.screen.availWidth),d(x.screen.availHeight)];return e.sort().reverse(),e}},hardwareConcurrency:function(){try{var e=d(navigator.hardwareConcurrency);return isNaN(e)?1:e}catch(e){return 1}},timezoneOffset:function(){var e=(new Date).getFullYear();return Math.max(p(new Date(e,0,1).getTimezoneOffset()),p(new Date(e,6,1).getTimezoneOffset()))},timezone:function(){var e;if(null===(e=M.Intl)||void 0===e?void 0:e.DateTimeFormat)return(new M.Intl.DateTimeFormat).resolvedOptions().timeZone},sessionStorage:function(){try{return!!window.sessionStorage}catch(e){return!0}},localStorage:function(){try{return!!window.localStorage}catch(e){return!0}},indexedDB:function(){if(!(g()||h(["msWriteProfilerMark"in m,"MSStream"in m,"msLaunchUri"in y,"msSaveBlob"in y])>=3&&!g()))try{return!!window.indexedDB}catch(e){return!0}},openDatabase:function(){return!!window.openDatabase},cpuClass:function(){return navigator.cpuClass},platform:function(){return navigator.platform},plugins:function(){if(g())return[];if(navigator.plugins){for(var e=[],t=0;t<navigator.plugins.length;++t){var n=navigator.plugins[t];if(n){for(var r=[],o=0;o<n.length;++o){var i=n[o];r.push({type:i.type,suffixes:i.suffixes})}e.push({name:n.name,description:n.description,mimeTypes:r})}}return e}},canvas:function(){var e=function(){var e=document.createElement("canvas");return e.width=240,e.height=140,e.style.display="inline",[e,e.getContext("2d")]}(),t=e[0],n=e[1];if(!function(e,t){return!(!t||!e.toDataURL)}(t,n))return{winding:!1,data:""};n.rect(0,0,10,10),n.rect(2,2,6,6);var r=!n.isPointInPath(5,5,"evenodd");n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",n.font="11pt no-real-font-123";var o="Cwm fjordbank 😃 gly";return n.fillText(o,2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText(o,4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),{winding:r,data:C(t)}},touchSupport:function(){var e,t=0;void 0!==I.maxTouchPoints?t=d(I.maxTouchPoints):void 0!==I.msMaxTouchPoints&&(t=I.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return{maxTouchPoints:t,touchEvent:e,touchStart:"ontouchstart"in j}},fonts:function(){var e=S.body,t=S.createElement("div"),n=S.createElement("div"),r={},o={},i=function(){var e=S.createElement("span");e.textContent="mmMwWLliI0O&1";for(var t=0,n=Object.keys(P);t<n.length;t++){var r=n[t];e.style[r]=P[r]}return e},a=function(e){return k.some((function(t,n){return e[n].offsetWidth!==r[t]||e[n].offsetHeight!==o[t]}))},c=k.map((function(e){var n=i();return n.style.fontFamily=e,t.appendChild(n),n}));e.appendChild(t);for(var s=0,u=k.length;s<u;s++)r[k[s]]=c[s].offsetWidth,o[k[s]]=c[s].offsetHeight;var l=function(){for(var e={},t=function(t){e[t]=k.map((function(e){var r=function(e,t){var n=i();return n.style.fontFamily="'"+e+"',"+t,n}(t,e);return n.appendChild(r),r}))},r=0,o=R;r<o.length;r++){t(o[r])}return e}();e.appendChild(n);for(var f=[],d=0,p=R.length;d<p;d++)a(l[R[d]])&&f.push(R[d]);return e.removeChild(n),e.removeChild(t),f},audio:function(){return Object(r.b)(this,void 0,void 0,(function(){var e,t,n,o,i,a;return Object(r.c)(this,(function(r){switch(r.label){case 0:if(!(e=v.OfflineAudioContext||v.webkitOfflineAudioContext))return[2,-2];if(h(["ApplePayError"in m,"CSSPrimitiveValue"in m,"Counter"in m,0===y.vendor.indexOf("Apple"),"getStorageUpdates"in y,"WebKitMediaKeys"in m])>=4&&!(h(["safari"in m,!("DeviceMotionEvent"in m),!("ongestureend"in m),!("standalone"in y)])>=3)&&!(h(["DOMRectList"in m,"RTCPeerConnectionIceEvent"in m,"SVGGeometryElement"in m,"ontransitioncancel"in m])>=3))return[2,-1];t=new e(1,44100,44100),(n=t.createOscillator()).type="triangle",_(t,n.frequency,1e4),o=t.createDynamicsCompressor(),_(t,o.threshold,-50),_(t,o.knee,40),_(t,o.ratio,12),_(t,o.reduction,-20),_(t,o.attack,0),_(t,o.release,.25),n.connect(o),o.connect(t.destination),n.start(0),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,w(t)];case 2:return i=r.sent(),[3,5];case 3:if("timeout"===(a=r.sent()).name||"suspended"===a.name)return[2,-3];throw a;case 4:return n.disconnect(),o.disconnect(),[7];case 5:return[2,O(i.getChannelData(0))]}}))}))},pluginsSupport:function(){return void 0!==navigator.plugins},productSub:function(){return navigator.productSub},emptyEvalLength:function(){return eval.toString().length},errorFF:function(){try{throw"a"}catch(e){try{return e.toSource(),!0}catch(e){return!1}}},vendor:function(){return navigator.vendor},chrome:function(){return void 0!==window.chrome},cookiesEnabled:function(){try{D.cookie="cookietest=1; SameSite=Strict;";var e=-1!==D.cookie.indexOf("cookietest=");return D.cookie="cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT",e}catch(e){return!1}}};function A(){return function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,i,a,c,s,u,l,f,d;return Object(r.c)(this,(function(p){switch(p.label){case 0:o=Date.now(),i={},a=0,c=Object.keys(e),p.label=1;case 1:if(!(a<c.length))return[3,7];if(s=c[a],function(e,t){for(var n=0,r=e.length;n<r;++n)if(e[n]===t)return!0;return!1}(n,s))return[3,6];u=void 0,p.label=2;case 2:return p.trys.push([2,4,,5]),d={},[4,e[s](t)];case 3:return d.value=p.sent(),u=d,[3,5];case 4:return l=p.sent(),u=l&&"object"==typeof l&&"message"in l?{error:l}:{error:{message:l}},[3,5];case 5:f=Date.now(),i[s]=Object(r.a)(Object(r.a)({},u),{duration:f-o}),o=f,p.label=6;case 6:return a++,[3,1];case 7:return[2,i]}}))}))}(N,void 0,[])}function F(e){return JSON.stringify(e,(function(e,t){return t instanceof Error?(n=t,Object(r.a)({name:n.name,message:n.message,stack:null===(o=n.stack)||void 0===o?void 0:o.split("\n")},n)):t;var n,o}),2)}function B(e){return l(function(e){for(var t="",n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o],a=i.error?"error":JSON.stringify(i.value);t+=(t?"|":"")+o.replace(/([:|\\])/g,"\\$1")+":"+a}return t}(e))}var U=function(){function e(){}return e.prototype.get=function(e){return void 0===e&&(e={}),Object(r.b)(this,void 0,void 0,(function(){var t,n;return Object(r.c)(this,(function(r){switch(r.label){case 0:return[4,A()];case 1:return t=r.sent(),n=function(e){var t;return{components:e,get visitorId(){return void 0===t&&(t=B(this.components)),t},set visitorId(e){t=e}}}(t),e.debug&&console.log("Copy the text below to get the debug data:\n\n```\nversion: 3.0.5\nuserAgent: "+navigator.userAgent+"\ngetOptions: "+JSON.stringify(e,void 0,2)+"\nvisitorId: "+n.visitorId+"\ncomponents: "+F(t)+"\n```"),[2,n]}}))}))},e}();var q={load:function(t){var n=(void 0===t?{}:t).delayFallback,o=void 0===n?50:n;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.c)(this,(function(t){switch(t.label){case 0:return[4,(n=o,r=2*o,void 0===r&&(r=1/0),new e((function(e){f.requestIdleCallback?f.requestIdleCallback((function(){return e()}),{timeout:r}):setTimeout(e,Math.min(n,r))})))];case 1:return t.sent(),[2,new U]}var n,r}))}))},hashComponents:B,componentsToDebugString:F};t.a=q}).call(this,n(23))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasForm}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(6);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasForm=function(_OpenStadComponent){_inherits(IdeasForm,_OpenStadComponent);var _super=_createSuper(IdeasForm);function IdeasForm(props){var _this;_classCallCheck(this,IdeasForm),_this=_super.call(this,props,{user:{},ideaId:null,idea:{titleMinLength:10,titleMaxLength:20,summaryMinLength:20,summaryMaxLength:140,descriptionMinLength:140,descriptionMaxLength:5e3,fields:[]}});var self=_assertThisInitialized(_this),fields=self.config.idea.fields=_toConsumableArray(self.config.idea.fields);self.props.idea.extraData||(self.props.idea.extraData={});var state={formfields:{id:self.props.idea.id||"",user:self.props.idea.user||{}},showFormErrorsWarning:!1,isBusy:!1};fields.forEach((function(field){field.name&&(state.formfields[field.name]=eval("self.props.idea."+field.name),field.value=eval("self.props.idea."+field.name))}));var titleField=fields.find((function(e){return"title"==e.name}));titleField&&(titleField.minLength=self.config.idea.titleMinLength,titleField.maxLength=self.config.idea.titleMaxLength);var summaryField=fields.find((function(e){return"summary"==e.name}));summaryField&&(summaryField.minLength=self.config.idea.summaryMinLength,summaryField.maxLength=self.config.idea.summaryMaxLength);var descriptionField=fields.find((function(e){return"description"==e.name}));descriptionField&&(descriptionField.minLength=self.config.idea.descriptionMinLength,descriptionField.maxLength=self.config.idea.descriptionMaxLength);var imageField=fields.find((function(e){return"image-upload"==e.inputType}));if(imageField&&(imageField.imageserver=self.config.imageserver),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,"editor")){if(self.config.types&&"typeId"==self.config.typeField){var choices=[];self.config.types.forEach((function(e){var t=e;(!t.auth||t.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,t.auth.createableBy))&&choices.push({title:t.name,value:t.id||t.value})})),self.config.idea.fields.push({name:"typeId",title:"Type inzending",value:self.props.idea.typeId,inputType:"multiple-choice",choices:choices}),state.formfields.typeId=self.props.idea.typeId}self.config.idea.fields.push({name:"modBreak",title:"Moderator reactie",value:self.props.idea.modBreak,inputType:"textarea-with-counter",minLength:0,maxLength:2e3}),state.formfields.modBreak=self.props.idea.modBreak}else self.config.types&&"typeId"==self.config.typeField&&(self.config.idea.fields.push({name:"typeId",value:self.props.idea.typeId,inputType:"hidden"}),state.formfields.typeId=self.props.idea.typeId);return self.state=state,_this}return _createClass(IdeasForm,[{key:"componentDidMount",value:function(e,t){}},{key:"handleLocationChange",value:function(e){var t=e.location,n=e.address,r=_objectSpread({},this.state);r.formfields.location={coordinates:[t.lat,t.lng]},r.formfields.address=n,this.setState(r),this.dispatchUpdateEditIdea(r.formfields)}},{key:"dispatchUpdateEditIdea",value:function(e){var t=new window.CustomEvent("osc-update-edit-idea",{detail:{idea:e}});document.dispatchEvent(t)}},{key:"validateIdea",value:function(){var e=this,t=!0;return e.state.formfields.location?e["form-warning-location"].style.display="none":(console.log("xxx"),e["form-warning-location"].style.display="block",t=!1),t}},{key:"submitIdea",value:function(){var e=this,t=this;t.setState({isBusy:!0},(function(){var n=t.form.getValues(),r=t.form.validate({showErrors:!0,scrollTo:!0});if(t.validateIdea()&&r){if(t.setState({showFormErrorsWarning:!1}),!t.config.api.isUserLoggedIn)return alert("Je bent niet ingelogd");var o=t.config.api.url+"/api/site/"+t.config.siteId+"/idea",i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),a={location:JSON.stringify(_objectSpread({type:"Point"},t.state.formfields.location))};Object.keys(n).forEach((function(e){var t=e.match(/^extraData\.(.+)/);t?(a.extraData||(a.extraData={}),a.extraData[t[1]]=n[e]):a[e]=n[e]}));var c="POST";"number"==typeof e.state.formfields.id&&(c="PUT",o=o+"/"+e.state.formfields.id),fetch(o,{method:c,headers:i,body:JSON.stringify(a)}).then((function(e){if(!e.ok)throw e;return e.json()})).then((function(e){t.setState({isBusy:!1},(function(){var t=new window.CustomEvent("osc-idea-stored",{detail:{idea:e}});document.dispatchEvent(t)}))})).catch((function(e){console.log("Niet goed"),console.log(e),"function"==typeof e.json?e.json().then((function(e){return t.setState({isBusy:!1,showFormErrorsWarning:e.message})})):t.setState({isBusy:!1,showFormErrorsWarning:e.message||e})}))}else t.setState({isBusy:!1,showFormErrorsWarning:!0})}))}},{key:"render",value:function(){var e=this,t=this,n=null;if(t.state.showFormErrorsWarning){var r="Niet alle velden zijn correct ingevuld. Scroll naar boven om te zien wat er mis gaat.";"string"==typeof t.state.showFormErrorsWarning&&(r=t.state.showFormErrorsWarning),n=React.createElement("div",{className:"osc-form-errors-warning"},r)}var o;return o=React.createElement(_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__.a.Form,{config:{fields:t.config.idea.fields},values:{typeId:t.state.formfields.typeId},ref:function(e){t.form=e}}),React.createElement("div",{id:t.id,className:t.props.className||"osc-infobar-idea-form",ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("form",{className:"osc-form"},React.createElement("h1",null,"Nieuw punt toevoegen"),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Naam"),t.state.formfields.user&&t.state.formfields.user.fullName),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Een locatie vlakbij"),t.state.formfields.address||"Geen adres gevonden",React.createElement("div",{className:"osc-form-warning",style:{display:"none"},ref:function(t){return e["form-warning-location"]=t}},"Geen locatie geselecteerd")),o,React.createElement("br",null),n,React.createElement("br",null),React.createElement("a",{className:"osc-button osc-button-blue".concat(t.state.isBusy?" osc-disabled":""),onClick:function(){t.state.isBusy||t.submitIdea()},ref:function(e){return t.submitButton=e}},"Versturen"),React.createElement("br",null),React.createElement("br",null),React.createElement("br",null)))}}]),IdeasForm}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var _nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(96),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(99),redux__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(15),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(54),react_redux__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(85);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_superPropBase(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Map=function(_OpenStadComponentNLM){_inherits(Map,_OpenStadComponentNLM);var _super=_createSuper(Map);function Map(e){var t;return _classCallCheck(this,Map),(t=_super.call(this,e,{clustering:{maxClusterRadius:100,showCoverageOnHover:!1},types:[]})).config.polygon=t.config.polygon,t.config.autoZoomAndCenter=t.config.autoZoomAndCenter||"polygon",t.ideas=[],t.state={filters:{}},t}return _createClass(Map,[{key:"componentDidMount",value:function(e,t){_get(_getPrototypeOf(Map.prototype),"componentDidMount",this).call(this,e,t);var n=this;n.mapClusterAnimationEndListener=function(e){n.onMapClusterAnimationEnd(e.detail)},document.addEventListener("osc-map-cluster-animation-end",n.mapClusterAnimationEndListener),n.ideasFilterOnchangeListener=function(e){n.onChangeFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasFilterResetAllListener=function(e){n.onResetFilters(e.detail)},document.addEventListener("osc-ideas-filter-reset-all",n.ideasFilterResetAllListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-map-cluster-animation-end",this.mapClusterAnimationEndListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-filter-reset-all",this.ideasFilterResetAllListener)}},{key:"addIdea",value:function addIdea(idea){var self=this;self.ideas.push(idea);var typename=idea&&self.config.typeField?eval("idea.".concat(self.config.typeField)):"typeId",typeDef=self.config.types.find((function(e){return typename&&(e.id==typename||e.name==typename)}));typeDef||(typeDef={});var color=typeDef.color||typeDef.backgroundColor||"#164995",icondef=typeDef.mapicon||typeDef.icon||{html:'<svg viewBox="0 0 26 26"><circle cx="13" cy="13" r="13" fill="'.concat(color,'"/></svg>'),width:26,height:26,anchor:[13,13]},icon=L.divIcon({html:icondef.html,className:"osc-ideas-on-map-icon",iconSize:L.point(icondef.width,icondef.height),iconAnchor:icondef.anchor});self.addMarker({lat:idea.location.coordinates[0],lng:idea.location.coordinates[1],data:idea,icon:icon})}},{key:"getVisibleIdeas",value:function(){var e=this;console.log("??");var t=e.markers.filter((function(t){return t.visible&&t.data&&e.map.getBounds().contains(t.getLatLng())})).map((function(e){return e.data}));return e.setState({visibleIdeas:t}),t}},{key:"setSelectedLocation",value:function(e){if(this.selectedLocation=e,this.selectedLocation)if(this.selectedLocationMarker)this.updateMarker(this.selectedLocationMarker,{location:e});else{var t=L.divIcon({html:'<svg width="39" height="50" viewBox="0 0 39 50" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.1038 0C29.6577 0 38.2075 8.46671 38.2075 18.9181C38.2075 33.1786 21.7544 47.7273 21.0432 48.3035L19.1038 50L17.1643 48.3035C16.4532 47.7273 0 33.1786 0 18.9181C0 8.46831 8.54983 0 19.1038 0ZM32.3245 18.9181C32.3083 11.6837 26.4091 5.84187 19.1038 5.82586C11.7984 5.84187 5.89922 11.6837 5.88306 18.9181C5.88306 27.3367 14.1581 37.2439 19.0876 42.1095C23.1767 38.1242 32.3245 27.993 32.3245 18.9181Z" fill="#EC0000"/><path d="M19.104 5.82568C26.4093 5.84169 32.3086 11.6836 32.3247 18.9179C32.3247 27.9928 23.1769 38.124 19.0879 42.1093C14.1584 37.2437 5.8833 27.3366 5.8833 18.9179C5.89946 11.6836 11.7987 5.84169 19.104 5.82568ZM25.5689 18.9179C25.5689 15.3807 22.6759 12.5158 19.104 12.5158C15.5322 12.5158 12.6391 15.3807 12.6391 18.9179C12.6391 22.455 15.5322 25.3199 19.104 25.3199C22.6759 25.3199 25.5689 22.455 25.5689 18.9179Z" fill="white"/><path d="M19.1038 25.3202C22.6743 25.3202 25.5687 22.4539 25.5687 18.9182C25.5687 15.3824 22.6743 12.5161 19.1038 12.5161C15.5333 12.5161 12.6389 15.3824 12.6389 18.9182C12.6389 22.4539 15.5333 25.3202 19.1038 25.3202Z" fill="#EC0000"/></svg>',className:"osc-ideas-on-map-icon",iconSize:L.point(39,50),iconAnchor:[20,50]});this.selectedLocationMarker=this.addMarker(_objectSpread(_objectSpread({},e),{},{icon:t,doNotCluster:!0}))}else this.selectedLocationMarker&&this.removeMarker(this.selectedLocationMarker),this.selectedLocationMarker=null}},{key:"setBoundsAndCenter",value:function(e){_get(_getPrototypeOf(Map.prototype),"setBoundsAndCenter",this).call(this,e||"polygon"==this.config.autoZoomAndCenter&&this.config.polygon||this.markers)}},{key:"showMarkers",value:function(e){e.keepCenter;var t=this;t.markers.forEach((function(e){t.showMarker(e)}))}},{key:"hideMarkers",value:function(e){var t=e.exception,n=this;t&&t.location&&n.setBoundsAndCenter([t.location]),n.markers.forEach((function(e){t&&t.location&&t.location.lat==e._latlng.lat&&t.location.lng==e._latlng.lng||n.hideMarker(e)}))}},{key:"fadeMarkers",value:function(e){var t=e.exception,n=this;n.markers.forEach((function(e){if(t&&e.data&&e.data.id&&t.id==e.data.id)e.data&&(e.data.isFaded=!1);else{e.data&&(e.data.isFaded=!0);var r=n.markerClusterGroup&&n.markerClusterGroup.getVisibleParent(e);!(r&&r.getAllChildMarkers&&r.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded})))&&r&&r.setOpacity(.3)}}))}},{key:"updateFading",value:function(){var e=this;e.markers.forEach((function(t){var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);if(n&&t.visible){var r=n&&n.getAllChildMarkers&&n.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded}));n.setOpacity(!r&&t.data&&t.data.isFaded?.3:1)}}))}},{key:"unfadeAllMarkers",value:function(){var e=this;e.markers.forEach((function(t){t.data&&(t.data.isFaded=!1);var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);n&&n.setOpacity(1)}))}},{key:"onMapClusterAnimationEnd",value:function(){this.updateFading()}},{key:"onChangeFilter",value:function onChangeFilter(filter){var self=this,filters=self.state.filters;filters[filter.fieldName]=filter,self.setState({filters:filters},(function(){self.setFilter((function(marker){var result=!0;return Object.keys(self.state.filters).forEach((function(fieldName){var filter=self.state.filters[fieldName];filter.value&&"0"!==filter.value&&(marker.data&&!eval("marker.data.".concat(filter.fieldName))||eval("marker.data.".concat(filter.fieldName))!=filter.value)&&(result=!1)})),result}))}))}},{key:"onResetFilters",value:function(e){this.setBoundsAndCenter()}}]),Map}(_nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__.default),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_2__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_4__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(Map)},function(e,t,n){n(129);var r=n(43);e.exports=r("Array","find")},function(e,t,n){"use strict";n.r(t);n(11),n(111);var r=n(0),o=n.n(r),i=n(5),a=n.n(i),c=n(85),s=(n(135),n(107));n.d(t,"OpenstadStore",(function(){return s.default}));var u=n(91);n.d(t,"default",(function(){return u.a})),n.d(t,"IdeasOnMap",(function(){return u.a})),u.a.renderElement=function(e,t,n){var r=e.attributes;a.a.render(o.a.createElement(c.a,{store:n}," ",o.a.createElement(u.a,{attributes:r,config:t})," "),e)}},function(e,t,n){"use strict";var r=n(40),o=n(104).find,i=n(41),a=n(42),c="find",s=!0,u=a(c);c in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){e.exports=n(132)()},function(e,t,n){"use strict";var r=n(133);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,v=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,_=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case y:case u:return e;default:return t}}case i:return t}}}function E(e){return O(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=u,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=y,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||O(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===l},t.isContextProvider=function(e){return O(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===p},t.isFragment=function(e){return O(e)===a},t.isLazy=function(e){return O(e)===g},t.isMemo=function(e){return O(e)===y},t.isPortal=function(e){return O(e)===i},t.isProfiler=function(e){return O(e)===s},t.isStrictMode=function(e){return O(e)===c},t.isSuspense=function(e){return O(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===y||e.$$typeof===u||e.$$typeof===l||e.$$typeof===p||e.$$typeof===b||e.$$typeof===_||e.$$typeof===w||e.$$typeof===v)},t.typeOf=O},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(127),n(11),n(0),n(5),n(137);var r=n(1);n.d(t,"Component",(function(){return r.a}));var o=n(2);n.d(t,"Libs",(function(){return o.a}));var i=n(6);n.d(t,"Forms",(function(){return i.a}));var a=n(123);n.d(t,"ChoicesGuide",(function(){return a.ChoicesGuide})),n.d(t,"ChoicesGuideResult",(function(){return a.ChoicesGuideResult}));var c=n(96);n.d(t,"NLMap",(function(){return c.default}));var s=n(95);n.d(t,"Lightbox",(function(){return s.default}));var u=n(128);n.d(t,"IdeasOnMap",(function(){return u.default}));var l=n(97);n.d(t,"IdeaDetails",(function(){return l.default}));var f=n(76);n.d(t,"IdeasOverview",(function(){return f.default}));var d=n(22);n.d(t,"IdeasImage",(function(){return d.default}));var p=n(84);n.d(t,"PreviousNextButtonBlock",(function(){return p.default}));var h=n(87);n.d(t,"Poll",(function(){return h.default}));var m=n(86);n.d(t,"Reactions",(function(){return m.default}))},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,