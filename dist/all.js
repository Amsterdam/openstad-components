/*! For license information please see all.js.LICENSE.txt */
window.OpenStadComponents=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=144)}([function(e,t){e.exports=window.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(3),o=n.n(r),i=n(0),a=n.n(i);n(77);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return d(this,n)}}function d(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?p(e):t}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,i=f(a);function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};s(this,a);var c=p(t=i.call(this,e));if(e.attributes&&Object.keys(e.attributes).forEach((function(t){var n=e.attributes[t];c[n.name]=n.value})),"string"==typeof c.config)try{c.config=JSON.parse(c.config)}catch(e){}var u=e.config||{};return u=v(u),c.config=o.a.recursive({siteId:null,api:{url:null,headers:null,isUserLoggedIn:!1},user:{}},n,r,u),c.divId=c.divId||c.config&&c.config.divId||e.id||"openstad-component-".concat(parseInt(1e8*Math.random())),window[c.divId]=c,t}return t=a,(n=[{key:"componentDidMount",value:function(e,t){}}])&&u(t.prototype,n),r&&u(t,r),a}(a.a.Component);function v(e){return"object"!=c(e)||Object.keys(e).forEach((function(t){void 0!==e[t]&&null!=e[t]||delete e[t],"object"==c(e[t])&&(e[t]=v(e[t]))})),e}},function(e,t,n){"use strict";n(14),n(0),n(6),n(97);var r=n(3),o=n.n(r);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={get:function(e){var t=sessionStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==i(t))try{t=JSON.stringify(t)}catch(e){}sessionStorage.setItem(e,t)}},remove:function(e){sessionStorage.removeItem(e)}},c=a,s=function(e){var t,n=window.location.search.match(/(?:\?|&)jwt=([A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*)(?:&|$)/);if(n){t=n[1],c.set("osc-jwt",t);var r=document.location.search.replace("jwt="+t,"");"?"==r&&(r=""),document.location.search=r}return t=c.get("osc-jwt"),e&&e.jwt&&(t=e.jwt,c.set("osc-jwt",t)),t},u={admin:["admin","moderator","editor","member","anonymous","all"],moderator:["moderator","editor","member","anonymous","all"],editor:["editor","member","anonymous","all"],member:["member","anonymous","all"],anonymous:["anonymous","all"],all:["all"],owner:null};function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var f={get:function(e){var t=localStorage.getItem(e);try{t=JSON.parse(t)}catch(e){}return t},set:function(e,t){if("string"==typeof e){if(void 0===t&&(t=""),"object"==l(t))try{t=JSON.stringify(t)}catch(e){}localStorage.setItem(e,t)}},remove:function(e){localStorage.removeItem(e)}},d={api:{getHeaders:function(e){var t=o.a.recursive({"Content-type":"application/json"},e&&e.api&&e.api.headers),n=s();return n&&(t=o.a.recursive({"X-Authorization":"Bearer "+n},t)),t}},user:{getUser:function(e,t){t=t||function(e){console.log("getUser: next not defined."),console.log(e)};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o="".concat(e.api.url,"/oauth/site/").concat(e.siteId,"/me"),i={"X-Authorization":"Bearer ".concat(r),"Content-Type":"application/json"};fetch(o,{headers:i}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},getJWT:s,logout:function(e,t){t=t||function(e){console.log("logout: next not defined.")};var n=e.user||c.get("osc-user");if(n)return t(null,n);var r=s(e);if(!r)return t(null,{});var o=e.api.url+"/oauth/site/"+e.siteId+"/me";fetch(o,{headers:{"X-Authorization":"Bearer "+r,"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw new Error("Error on fetch");return e.json()})).then((function(e){c.set("osc-user",e),t(null,e)})).catch((function(e){t(e)}))},hasRole:function(e,t){var n=e.role;return Object.keys(u).includes(n)||(n="all"),u[n].includes(t)}},ideasSort:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;switch(n=n||"random"){case"title":t=t.sort((function(e,t){return e.title.toLowerCase()<t.title.toLowerCase()?-1:t.title.toLowerCase()<e.title.toLowerCase()?1:0}));break;case"ranking,asc":t=t.sort((function(e,t){return e.ranking-t.ranking}));break;case"likes,asc":t=t.sort((function(e,t){return e.yes-t.yes}));break;case"likes,desc":t=t.sort((function(e,t){return t.yes-e.yes}));break;case"createdtime,desc":t=t.sort((function(e,t){return new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()}));break;case"createdtime,asc":t=t.sort((function(e,t){return new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()}));break;case"distance":(r=r||{lat:52.37104644463586,lng:900402911007405}).coordinates&&(r.lat=r.coordinates[0],r.lng=r.coordinates[1]),t=t.map((function(e){return e._distance=Math.sqrt(Math.pow(e.location.coordinates[0]-r.lat,2)+Math.pow(e.location.coordinates[1]-r.lng,2)),e})).sort((function(e,t){return e._distance-t._distance}));break;case"args,desc":t=t.sort((function(e,t){return t.argCount-e.argCount}));break;case"args,asc":t=t.sort((function(e,t){return e.argCount-t.argCount}));break;case"random":default:t=t.sort((function(e,t){return Math.random()-.5}))}return t},localStorage:f,sessionStorage:c,reactTemplate:function(e){var t=e.html,n=void 0===t?"":t,r=arguments[0];delete r.html;var o=0;return Object.keys(r).forEach((function(e){var t=new RegExp("^((?:.|\n|\r)*)\\{".concat(e,"\\}((?:.|\n|\r)*)$"),"g").exec(n);t&&(o++,n=React.createElement("span",null,React.createElement("span",{dangerouslySetInnerHTML:{__html:t[1]}}),r[e],React.createElement("span",{dangerouslySetInnerHTML:{__html:t[2]}})))})),0==o&&(n=React.createElement("span",{dangerouslySetInnerHTML:{__html:n}})),n}};t.a=d},function(e,t,n){(function(e){!function(t){var n=function(e){return o(!0===e,!1,arguments)};function r(e,t){if("object"!==i(e))return t;for(var n in t)"object"===i(e[n])&&"object"===i(t[n])?e[n]=r(e[n],t[n]):e[n]=t[n];return e}function o(e,t,o){var a=o[0],c=o.length;(e||"object"!==i(a))&&(a={});for(var s=0;s<c;++s){var u=o[s];if("object"===i(u))for(var l in u)if("__proto__"!==l){var f=e?n.clone(u[l]):u[l];a[l]=t?r(a[l],f):f}}return a}function i(e){return{}.toString.call(e).slice(8,-1).toLowerCase()}n.recursive=function(e){return o(!0===e,!0,arguments)},n.clone=function(e){var t,r,o=e,a=i(e);if("array"===a)for(o=[],r=e.length,t=0;t<r;++t)o[t]=n.clone(e[t]);else if("object"===a)for(t in o={},e)o[t]=n.clone(e[t]);return o},t?e.exports=n:window.merge=n}(e&&"object"==typeof e.exports&&e.exports)}).call(this,n(76)(e))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(23))},function(e,t,n){"use strict";n(14),n(0),n(6),n(101);var r=n(1);n(2);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=f(e);if(t){var o=f(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(f,e);var t,n,r,u=s(f);function f(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i(this,f);var r=l(t=u.call(this,e,{choices:[],name:"",placeholder:"",disabled:!1,required:!1},n));return r.state={value:null!=o(e.value)?e.value:"",error:null},t.onChange=e.onChange,t}return t=f,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!this.config.required||!!this.state.value,r="";return!n&&t&&(r=!0),this.setState({isValid:n,error:r}),n}},{key:"handleOnChange",value:function(e){var t=this;e=e||{},t.setState(e,(function(){t.validate({})})),"function"==typeof t.onChange&&t.onChange({name:t.config.name,value:e.value})}}])&&a(t.prototype,n),r&&a(t,r),f}(r.a);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(i,e);var t,n,r,o=g(i);function i(){return h(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("input",{type:"hidden",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}})}}])&&m(t.prototype,n),r&&m(t,r),i}(d),E=n(57),w=n(83),O=n.n(w),I=n(84),R=n.n(I),T=n(85),S=n.n(T),P=n(86),C=n.n(P);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return A(this,n)}}function A(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}Object(E.registerPlugin)(O.a,R.a,S.a,C.a);var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(i,e);var t,n,r,o=M(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),t=o.call(this,e,{name:"image",allowMultiple:!1,imageserver:{process:"/image",fetch:"/image"}});var n=[],r=e.value||[];return Array.isArray(r)||(r=[r]),r.forEach((function(e){var t="object"==L(e)?e.src:e;n.push({source:{url:t},options:{type:"local",file:{name:t},metadata:{poster:t}}})})),t.state={uploadedFiles:n},t}return t=i,(n=[{key:"validate",value:function(){var e=!0;return this.imageuploader&&this.imageuploader.getFiles&&this.imageuploader.getFiles().forEach((function(t){t.serverId||(e=!1)})),e}},{key:"init",value:function(){}},{key:"updateUploadedFiles",value:function(e){e.addFile;var t=e.removeFile,n=e.next;if(this.imageuploader&&this.imageuploader.getFiles){var r=this.imageuploader.getFiles();t&&(r=r.filter((function(e){return e.serverId!=t.serverId}))),this.setState({uploadedFiles:r.map((function(e){return e.file}))},(function(){n&&n(r)}))}}},{key:"updateValue",value:function(e){var t=this,n=[],r=t.config.as&&"json"==t.config.as;e.forEach((function(e){try{var t="string"==typeof e.serverId?JSON.parse(e.serverId):e.serverId;n.push(r?{src:t.url}:t.url)}catch(e){console.log(e)}})),t.handleOnChange({name:t.config.name,value:n})}},{key:"render",value:function(){var e=this,t=this;return React.createElement(E.FilePond,{ref:function(t){return e.imageuploader=t},files:this.state.uploadedFiles,oninit:t.init,onprocessfile:function(e,n){return t.updateUploadedFiles({addFile:n,next:function(e){return t.updateValue(e)}})},onremovefile:function(e,n){return t.updateUploadedFiles({removeFile:n,next:function(e){return t.updateValue(e)}})},name:t.config.name,server:this.config.imageserver.process,allowMultiple:this.config.allowMultiple,acceptedFileTypes:["image/*"],allowFileSizeValidation:"true",allowReorder:!0,styleItemPanelAspectRatio:"1",maxFileSize:"8mb",maxFiles:"5",allowBrowse:"true",imageResizeTargetWidth:"80",imageResizeTargetHeight:"80",imageCropAspectRatio:"16:9",labelIdle:"Sleep afbeelding(en) naar deze plek of <span class='filepond--label-action'>KLIK HIER</span>",labelInvalidField:"Field contains invalid files",labelFileWaitingForSize:"Wachtend op grootte",labelFileSizeNotAvailable:"Grootte niet beschikbaar",labelFileCountSingular:"Bestand in lijst",labelFileCountPlural:"Bestanden in lijst",labelFileLoading:"Laden",labelFileAdded:"Toegevoegd",labelFileLoadError:"Fout bij het uploaden",labelFileRemoved:"Verwijderd",labelFileRemoveError:"Fout bij het verwijderen",labelFileProcessing:"Laden",labelFileProcessingComplete:"Afbeelding geladen",labelFileProcessingAborted:"Upload cancelled",labelFileProcessingError:"Error during upload",labelFileProcessingRevertError:"Error during revert",labelTapToCancel:"tap to cancel",labelTapToRetry:"tap to retry",labelTapToUndo:"tap to undo",labelButtonRemoveItem:"Verwijderen",labelButtonAbortItemLoad:"Abort",labelButtonRetryItemLoad:"Retry",labelButtonAbortItemProcessing:"Verwijder",labelButtonUndoItemProcessing:"Undo",labelButtonRetryItemProcessing:"Retry",labelButtonProcessItem:"Upload"})}}])&&D(t.prototype,n),r&&D(t,r),i}(d);function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=V(e);if(t){var o=V(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return q(this,n)}}function q(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?U(e):t}function U(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(i,e);var t,n,r,o=G(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value},t.onKeyUpx=t.onKeyUpx.bind(U(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this.props.value;n=this.filterHTML(n),this.input.innerHTML=n}},{key:"filterHTML",value:function(e){return e=(e=(e=e.replace(/<(\/?\s*(?:a [^>]+|a|b|i|strong|em|p|div|br|ul|li)\s*\/?)>/g,"[[[$1]]]")).replace(/<[^>]+>/g,"")).replace(/\[\[\[([^\]]+)\]\]\]/g,"<$1>")}},{key:"executeAction",value:function(e,t,n){e.preventDefault(),e.stopPropagation(),document.execCommand(t,!1,n),this.onKeyUp()}},{key:"onFocus",value:function(e){this.props.onFocus&&this.props.onFocus(e)}},{key:"onBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.props.onChange&&this.props.onChange({value:this.state.value})}},{key:"onKeyUpx",value:function(){var e=this.input.innerHTML;e=this.filterHTML(e),this.setState({value:e}),this.props.onKeyUp&&this.props.onKeyUp(e)}},{key:"render",value:function(){var e=this;return React.createElement("div",{className:"osc-html-editor"},React.createElement("div",{className:"osc-html-editor-buttons"},React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-bold",onMouseDown:function(t){return e.executeAction(t,"bold")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-italic",onMouseDown:function(t){return e.executeAction(t,"italic")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-insertunorderedlist",onMouseDown:function(t){return e.executeAction(t,"insertunorderedlist")}}," "),React.createElement("div",{className:"osc-html-editor-button osc-html-editor-button-createlink",onMouseDown:function(t){return e.executeAction(t,"createlink",prompt("Lank naar","http://"))}}," ")),React.createElement("div",{className:"osc-html-editor-content",contentEditable:!0,onFocus:function(t){return e.onFocus(t)},onBlur:function(t){return e.onBlur(t)},onKeyUp:function(t){return e.onKeyUpx()},ref:function(t){return e.input=t}}))}}])&&F(t.prototype,n),r&&F(t,r),i}(r.a);function W(e){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t){return(Y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function K(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=J(e);if(t){var o=J(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return X(this,n)}}function X(e,t){return!t||"object"!==W(t)&&"function"!=typeof t?Q(e):t}function Q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function J(e){return(J=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Y(e,t)}(i,e);var t,n,r,o=K(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Q(t=o.call(this,e,{name:"tekst",inputType:"input",minLength:5,maxLength:1024,placeholder:""}));return n.id=e.id||"osc-formfields-plaintext-with-counter-"+parseInt(1e6*Math.random()),n.state={focused:!1,value:e.value||"",valueLength:e.value&&e.value.length||0},n.key=e.useKey||(n.id||"osc-input-with-counter-")+parseInt(1e7*Math.random),t.onChange=e.onChange,n.handleOnChange=n.handleOnChange.bind(Q(t)),n.onInputFocus=n.onInputFocus.bind(Q(t)),n.onInputBlur=n.onInputBlur.bind(Q(t)),n.onInputKeyUp=n.onInputKeyUp.bind(Q(t)),t}return t=i,(n=[{key:"isValid",value:function(){var e={isValid:!0,warning:null};return this.state.valueLength<this.config.minLength&&(e.warning="De tekst is te kort",e.isValid=!1),this.state.valueLength>this.config.maxLength&&(e.warning="De tekst is te lang",e.isValid=!1),this.setState(e),e.isValid}},{key:"validate",value:function(){return this.setState({showWarning:!0}),this.isValid()}},{key:"handleOnChange",value:function(e){e=e||{},this.setState(e),"function"==typeof this.onChange&&this.onChange({name:this.config.name,value:e.value})}},{key:"onInputFocus",value:function(){var e={focused:!0,showWarning:!1};this.setState(e)}},{key:"onInputBlur",value:function(){var e={focused:!1};this.setState(e)}},{key:"onInputKeyUp",value:function(e){var t={};t.value=e||this.input.value;var n=t.value.length;t.valueLength=n,t.isValid=n>=this.config.minLength&&n<=this.config.maxLength,this.setState(t)}},{key:"render",value:function(){var e=this,t=this,n=null,r=null;if(t.state.focused)if(t.state.valueLength<t.config.minLength)n=React.createElement("div",{className:"osc-form-counter osc-form-error"},"Nog minimaal ",React.createElement("span",{className:""},t.config.minLength-t.state.valueLength)," tekens");else{var o=t.state.valueLength>t.config.maxLength?"osc-form-error":"";n=React.createElement("div",{className:"osc-form-counter "+o},"Je hebt nog ",React.createElement("span",{className:""},t.config.maxLength-t.state.valueLength)," tekens over.")}t.state.showWarning&&t.state.warning&&(r=React.createElement("div",{className:"osc-form-warning",ref:function(t){return e["form-warning"]=t}},t.state.warning));var i=null;switch(t.config.inputType){case"htmlarea":i=React.createElement(H,{value:this.state.value,onChange:t.handleOnChange,onFocus:t.onInputFocus,onBlur:t.onInputBlur,onKeyUp:t.onInputKeyUp});break;case"textarea":i=React.createElement("textarea",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}});break;case"input":default:i=React.createElement("input",{key:t.key,ref:function(e){return t.input=e},value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(e){return t.handleOnChange({value:t.input.value})},onKeyUp:function(e){return t.onInputKeyUp()},onFocus:function(e){return t.onInputFocus(e)},onBlur:function(e){return t.onInputBlur(e)}})}return React.createElement("div",{id:t.id,ref:function(e){return t.instance=e},className:"osc-input-with-counter"},React.createElement("div",{className:"osc-form-feedback"},i,n,r))}}])&&z(t.prototype,n),r&&z(t,r),i}(r.a);function Z(e){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function te(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ne(e,t){return(ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ie(e);if(t){var o=ie(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return oe(this,n)}}function oe(e,t){return!t||"object"!==Z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ie(e){return(ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ae=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ne(e,t)}(i,e);var t,n,r,o=re(i);function i(){return ee(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-radios"},e.config.choices.map((function(t){return t.dangerousDescription?React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text",dangerouslySetInnerHTML:{__html:t.dangerousDescription}})):React.createElement("div",{className:"osc-radio-container",key:t.value},React.createElement("div",{className:"osc-radio-input".concat(e.state.value==t.value?" osc-radio-input-checked":"")},React.createElement("input",{type:"radio",name:e.divId,value:t.value,onChange:function(n){return e.handleOnChange({value:t.value})}})),React.createElement("div",{className:"osc-radio-text"},t.dangerousDescription?null:t.description||t.title||t.value))})),t)}}])&&te(t.prototype,n),r&&te(t,r),i}(d);function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=pe(e);if(t){var o=pe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return de(this,n)}}function de(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function pe(e){return(pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var he=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(){return se(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors,n=!0,r="";return this.state.value&&this.state.value.match(/^\s*\d{4}\s*[a-zA-Z][a-zA-Z]\s*$/)||(n=!1,t&&(r="Dit is geen postcode")),this.config.required&&!this.state.value&&(n=!1,t&&(r="Je hebt nog niets ingevuld")),this.setState({isValid:n,error:r}),n}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},e.state.error)),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&ue(t.prototype,n),r&&ue(t,r),i}(d);function me(e){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ve(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ee(e);if(t){var o=Ee(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _e(this,n)}}function _e(e,t){return!t||"object"!==me(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ee(e){return(Ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=be(i);function i(){return ve(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this.state.value||this.config.choices[0]&&this.config.choices[0].value;this.handleOnChange({value:e})}},{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog geen keuze gemaakt")),React.createElement("div",{className:"osc-select"},React.createElement("select",{value:this.state.value||"",disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},e.config.choices.map((function(e,t){var n=e.description||e.title||e.value;return React.createElement("option",{value:e.value||"",key:"".concat(n,"-").concat(e.value,"-").concat(t)},n)}))),t)}}])&&ge(t.prototype,n),r&&ge(t,r),i}(d);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ie(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Re(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Te(e,t){return(Te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Se(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ce(e);if(t){var o=Ce(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Pe(this,n)}}function Pe(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Le=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Te(e,t)}(i,e);var t,n,r,o=Se(i);function i(){return Ie(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textinput"},React.createElement("input",{type:"text",value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}}),t)}}])&&Re(t.prototype,n),r&&Re(t,r),i}(d);function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ke(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=je(e);if(t){var o=je(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ne(this,n)}}function Ne(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function je(e){return(je=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Fe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(i,e);var t,n,r,o=xe(i);function i(){return ke(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return e.state.error&&(t=React.createElement("div",{className:"osc-form-error osc-form-field-error"},"Je hebt nog niets ingevuld")),React.createElement("div",{className:"osc-textarea"},React.createElement("textarea",{value:this.state.value,disabled:this.props.disabled,placeholder:this.config.placeholder,onChange:function(t){return e.handleOnChange({value:e.input.value})},ref:function(t){return e.input=t}},this.state.value),t)}}])&&Me(t.prototype,n),r&&Me(t,r),i}(d);function Be(e){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ge(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ge(Object(n),!0).forEach((function(t){Ue(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ge(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ue(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function We(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ke(e);if(t){var o=Ke(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ze(this,n)}}function ze(e,t){return!t||"object"!==Be(t)&&"function"!=typeof t?Ye(e):t}function Ye(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ke(e){return(Ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Xe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(i,e);var t,n,r,o=We(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=Ye(t=o.call(this,e,{inputType:null,validateAction:null,changeAction:null,required:!1,title:null,description:null,choices:[]}));return n.config.name=n.config.name||n.config.title.toLowerCase(),n.state={value:e.initValue||void 0},n.handleOnChange=n.handleOnChange.bind(n),n.onChange=e.onChange,t}return t=i,(n=[{key:"validate",value:function(e){var t=e.showErrors;return!this.input||this.input.validate({showErrors:t})}},{key:"handleOnChange",value:function(e){"function"==typeof this.onChange&&this.onChange(e)}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h3",{className:"osc-form-title"},e.config.title));var n=null;e.config.description&&(n=React.createElement("div",{className:"osc-form-description",dangerouslySetInnerHTML:{__html:e.config.description}}));var r=null;switch(e.config.inputType){case"hidden":r=React.createElement(_,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"html-with-counter":case"htmlarea-with-counter":r=React.createElement($,{config:qe(qe({},e.config),{},{inputType:"htmlarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"image-upload":r=React.createElement(N,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"input-with-counter":case"text-with-counter":r=React.createElement($,{config:qe({inputType:"input"},e.config),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"postcode":r=React.createElement(he,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"radios":r=React.createElement(ae,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"select":case"multiple-choice":r=React.createElement(we,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"text":r=React.createElement(Le,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea":r=React.createElement(Fe,{config:e.config,value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;case"textarea-with-counter":r=React.createElement($,{config:qe(qe({},e.config),{},{inputType:"textarea"}),value:this.state.value,onChange:e.handleOnChange,ref:function(t){return e.input=t}});break;default:console.log("Form field "+e.config.inputType+"not yet implemented")}return React.createElement("div",{id:e.id,ref:function(t){return e.instance=t},className:"osc-form-field"},t,n,r)}}])&&Ve(t.prototype,n),r&&Ve(t,r),i}(r.a);function Qe(e){return(Qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ze(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function et(e,t){return(et=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function tt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ot(e);if(t){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return nt(this,n)}}function nt(e,t){return!t||"object"!==Qe(t)&&"function"!=typeof t?rt(e):t}function rt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var it=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&et(e,t)}(i,e);var t,n,r,o=tt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=rt(t=o.call(this,e,{title:null,intro:null,fields:[]})),r=e.values;return!r&&n.config.fields&&n.config.fields.length&&(r={},n.config.fields.map((function(e,t){var n=e.name||e.title.toLowerCase();r[n]=e.value}))),n.state={values:r||{}},n.handleOnChange=n.handleOnChange.bind(rt(t)),n.fields=[],t}return t=i,(n=[{key:"getValues",value:function(){return this.state.values}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null;return this.fields.forEach((function(e){e.validate({showErrors:t})||(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"handleOnChange",value:function(e){var t=this,n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(Object(n),!0).forEach((function(t){$e(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state.values);n[e.name]=e.value,this.setState({values:n},(function(){"function"==typeof t.props.onChange&&t.props.onChange(e)}))}},{key:"render",value:function(){var e=this,t=null;e.config.title&&(t=React.createElement("h2",{className:"osc-form-title"},e.config.title));var n=null;e.config.intro&&(n=React.createElement("div",{className:"osc-form-intro",dangerouslySetInnerHTML:{__html:e.config.intro}}));var r=null;return e.config.fields&&e.config.fields.length&&(r=React.createElement("div",{className:"osc-form-fields"},e.config.fields.map((function(t,n){return React.createElement(Xe,$e({config:t,initValue:t.value,onChange:e.handleOnChange,ref:function(t){return e.input=t},key:"osc-form-field-".concat(n)},"ref",(function(t){e.fields[n]=t})))})))),React.createElement("div",{id:e.divId,className:"osc-form",ref:function(t){return e.instance=t}},t,n,r)}}])&&Ze(t.prototype,n),r&&Ze(t,r),i}(r.a);function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function st(e,t){return(st=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ut(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=dt(e);if(t){var o=dt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lt(this,n)}}function lt(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?ft(e):t}function ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function dt(e){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var pt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&st(e,t)}(i,e);var t,n,r,o=ut(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={value:t.props.value,touched:t.props.touched||!1},t.handleChange=t.handleChange.bind(ft(t)),t}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;"function"==typeof this.props.onChange&&this.props.onChange(t),this.setState({value:t,touched:!0})}},{key:"doTouch",value:function(){"function"==typeof this.props.onChange&&this.props.onChange(50),this.setState({touched:!0})}},{key:"calcProgress",value:function(e,t,n){return 2*(n-e)/(t-e)-1}},{key:"render",value:function(){var e=this,t=e.state,n=t.value,r=t.touched,o=e.props,i=o.min,a=o.max,c=o.step;return React.createElement("div",{className:"".concat(e.props.className," osc-slider")},React.createElement("div",{className:"osc-slider-track-container"},React.createElement("div",{className:"osc-slider-track"}),React.createElement("div",{className:"osc-slider-track-progress-container"},React.createElement("div",{className:"osc-slider-track-progress",style:{transform:"scaleX("+e.calcProgress(i,a,n)+")"}})),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-left"}),React.createElement("div",{className:"osc-slider-track-dot-start osc-slider-track-dot-center"}),React.createElement("div",{className:"osc-slider-track-dot-end osc-slider-track-dot-right"})),React.createElement("input",{type:"range",min:i,max:a,step:c,value:n,onClick:function(){r||e.doTouch()},onChange:e.handleChange,className:r?"osc-slider-input-range":"osc-slider-input-range osc-slider-untouched",ref:function(t){return e.input=t}}))}}])&&ct(t.prototype,n),r&&ct(t,r),i}(r.a);t.a={Form:it,FormField:Xe,Hidden:_,ImageUpload:N,InputWithCounter:$,Postcode:he,Radios:ae,Select:we,Text:Le,Textarea:Fe,Slider:pt}},function(e,t){e.exports=window.ReactDOM},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return v})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return u})),n.d(t,"d",(function(){return m})),n.d(t,"e",(function(){return c}));var r=n(81),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,u=t,l=[],f=l,d=!1;function p(){f===l&&(f=l.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function v(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,u=s(u,e)}finally{d=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,v({type:i.REPLACE})}function y(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return v({type:i.INIT}),(o={dispatch:v,subscribe:m,getState:h,replaceReducer:g})[r.a]=y,o}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function u(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,c=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<c.length;i++){var u=c[i],l=n[u],f=e[u],d=l(f,t);if(void 0===d){var p=s(u,t);throw new Error(p)}o[u]=d,r=r||d!==f}return(r=r||c.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=m.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){var r=n(10);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(54).Promise},function(e,t,n){"use strict";(function(e){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[Y]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[z]||!!e.constructor[z]||d(e)||p(e))}function a(e,t,n){void 0===n&&(n=!1),0===c(e)?(n?Object.keys:K)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function c(e){var t=e[Y];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:d(e)?2:p(e)?3:0}function s(e,t){return 2===c(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){return 2===c(e)?e.get(t):e[t]}function l(e,t,n){var r=c(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){return U&&e instanceof Map}function p(e){return V&&e instanceof Set}function h(e){return e.o||e.t}function m(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=X(e);delete t[Y];for(var n=K(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function v(e,t){return void 0===t&&(t=!1),y(e)||o(e)||!i(e)||(c(e)>1&&(e.set=e.add=e.clear=e.delete=g),Object.freeze(e),t&&a(e,(function(e,t){return v(t,!0)}),!0)),e}function g(){r(2)}function y(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function b(e){var t=Q[e];return t||r(18,e),t}function _(e,t){Q[e]||(Q[e]=t)}function E(){return G}function w(e,t){t&&(b("Patches"),e.u=[],e.s=[],e.v=t)}function O(e){I(e),e.p.forEach(T),e.p=null}function I(e){e===G&&(G=e.l)}function R(e){return G={p:[],l:G,h:e,m:!0,_:0}}function T(e){var t=e[Y];0===t.i||1===t.i?t.j():t.g=!0}function S(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||b("ES5").S(t,e,o),o?(n[Y].P&&(O(t),r(4)),i(e)&&(e=P(t,e),t.l||L(t,e)),t.u&&b("Patches").M(n[Y],e,t.u,t.s)):e=P(t,n,[]),O(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function P(e,t,n){if(y(t))return t;var r=t[Y];if(!r)return a(t,(function(o,i){return C(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return L(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=m(r.k):r.o;a(3===r.i?new Set(o):o,(function(t,i){return C(e,r,o,t,i,n)})),L(e,o,!1),n&&e.u&&b("Patches").R(r,n,e.u,e.s)}return r.o}function C(e,t,n,r,a,c){if(o(a)){var u=P(e,a,c&&t&&3!==t.i&&!s(t.D,r)?c.concat(r):void 0);if(l(n,r,u),!o(u))return;e.m=!1}if(i(a)&&!y(a)){if(!e.h.N&&e._<1)return;P(e,a),t&&t.A.l||L(e,a)}}function L(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&v(t,n)}function D(e,t){var n=e[Y];return(n?h(n):e)[t]}function k(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function M(e){e.P||(e.P=!0,e.l&&M(e.l))}function A(e){e.o||(e.o=m(e.t))}function x(e,t,n){var r=d(t)?b("MapSet").T(t,n):p(t)?b("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:E(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=J;n&&(o=[r],i=$);var a=Proxy.revocable(o,i),c=a.revoke,s=a.proxy;return r.k=s,r.j=c,s}(t,n):b("ES5").J(t,n);return(n?n.A:E()).p.push(r),r}function N(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[Y],o=c(t);if(r){if(!r.P&&(r.i<4||!b("ES5").K(r)))return r.t;r.I=!0,n=j(t,o),r.I=!1}else n=j(t,o);return a(n,(function(t,o){r&&u(r.t,t)===o||l(n,t,e(o))})),3===o?new Set(n):n}(e)}function j(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return m(e)}function F(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Y];return J.get(t,e)},set:function(t){var n=this[Y];J.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Y];if(!o.P)switch(o.i){case 5:r(o)&&M(o);break;case 4:n(o)&&M(o)}}}function n(e){for(var t=e.t,n=e.k,r=K(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Y){var a=t[i];if(void 0===a&&!s(t,i))return!0;var c=n[i],u=c&&c[Y];if(u?u.t!==a:!f(c,a))return!0}}var l=!!t[Y];return r.length!==K(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var i={};_("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=X(n);delete i[Y];for(var a=K(i),c=0;c<a.length;c++){var s=a[c];i[s]=e(s,t||!!i[s].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:E(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,Y,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[Y].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Y];if(n){var o=n.t,i=n.k,c=n.D,u=n.i;if(4===u)a(i,(function(t){t!==Y&&(void 0!==o[t]||s(o,t)?c[t]||e(i[t]):(c[t]=!0,M(n)))})),a(o,(function(e){void 0!==i[e]||s(i,e)||(c[e]=!1,M(n))}));else if(5===u){if(r(n)&&(M(n),c.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)c[l]=!1;else for(var f=o.length;f<i.length;f++)c[f]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===c[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}n.d(t,"a",(function(){return N})),n.d(t,"c",(function(){return F})),n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return i}));var B,G,q="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),U="undefined"!=typeof Map,V="undefined"!=typeof Set,H="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=q?Symbol.for("immer-nothing"):((B={})["immer-nothing"]=!0,B),z=q?Symbol.for("immer-draftable"):"__$immer_draftable",Y=q?Symbol.for("immer-state"):"__$immer_state",K=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),X=Object.getOwnPropertyDescriptors||function(e){var t={};return K(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Q={},J={get:function(e,t){if(t===Y)return e;var n=h(e);if(!s(n,t))return function(e,t,n){var r,o=k(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===D(e.t,t)?(A(e),e.o[t]=x(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=k(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=D(h(e),t),i=null==o?void 0:o[Y];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||s(e.t,t)))return!0;A(e),M(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==D(e.t,t)||t in e.t?(e.D[t]=!1,A(e),M(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},$={};a(J,(function(e,t){$[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),$.deleteProperty=function(e,t){return J.deleteProperty.call(this,e[0],t)},$.set=function(e,t,n){return J.set.call(this,e[0],t,n,e[0])};var Z=new(function(){function t(e){this.O=H,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var n=t.prototype;return n.produce=function(t,n,o){if("function"==typeof t&&"function"!=typeof n){var a=n;n=t;var c=this;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return c.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var s;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),i(t)){var u=R(this),l=x(this,t,void 0),f=!0;try{s=n(l),f=!1}finally{f?O(u):I(u)}return void 0!==e&&s instanceof e?s.then((function(e){return w(u,o),S(e,u)}),(function(e){throw O(u),e})):(w(u,o),S(s,u))}if(!t||"object"!=typeof t){if((s=n(t))===W)return;return void 0===s&&(s=t),this.N&&v(s,!0),s}r(21,t)},n.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},n.createDraft=function(e){i(e)||r(8),o(e)&&(e=N(e));var t=R(this),n=x(this,e,void 0);return n[Y].C=!0,I(t),n},n.finishDraft=function(e,t){var n=(e&&e[Y]).A;return w(n,t),S(void 0,n)},n.setAutoFreeze=function(e){this.N=e},n.setUseProxies=function(e){e&&!H&&r(20),this.O=e},n.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var i=b("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(n+1))}))},t}()),ee=Z.produce;Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z);t.b=ee}).call(this,n(11))},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";(function(e){var t="URLSearchParams"in self,n="Symbol"in self&&"iterator"in Symbol,r="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),o="FormData"in self,i="ArrayBuffer"in self;if(i)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&a.indexOf(Object.prototype.toString.call(e))>-1};function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return n&&(t[Symbol.iterator]=function(){return t}),t}function f(e){this.map={},e instanceof f?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function d(t){if(t.bodyUsed)return e.reject(new TypeError("Already read"));t.bodyUsed=!0}function p(t){return new e((function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function h(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var n;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:o&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:t&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&((n=e)&&DataView.prototype.isPrototypeOf(n))?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var t=d(this);if(t)return t;if(this._bodyBlob)return e.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return e.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return e.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||e.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t,n,r,o=d(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,n=new FileReader,r=p(n),n.readAsText(t),r;if(this._bodyArrayBuffer)return e.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return e.resolve(this._bodyText)},o&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(e,t){e=s(e),t=u(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},f.prototype.delete=function(e){delete this.map[s(e)]},f.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},f.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},f.prototype.set=function(e,t){this.map[s(e)]=u(t)},f.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},f.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),l(e)},f.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),l(e)},f.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),l(e)},n&&(f.prototype[Symbol.iterator]=f.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(e,t){var n,r,o=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new f(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new f(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),g.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}})),t}function _(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new f(t.headers),this.url=t.url||"",this._initBody(e)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},v.call(y.prototype),v.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var e=new _(null,{status:0,statusText:""});return e.type="error",e};var E=[301,302,303,307,308];_.redirect=function(e,t){if(-1===E.indexOf(t))throw new RangeError("Invalid status code");return new _(null,{status:t,headers:{location:e}})};var w=self.DOMException;try{new w}catch(e){(w=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function O(t,n){return new e((function(e,o){var i=new y(t,n);if(i.signal&&i.signal.aborted)return o(new w("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t,n,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",n=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var t=e.split(":"),r=t.shift().trim();if(r){var o=t.join(":").trim();n.append(r,o)}})),n)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;e(new _(o,r))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new w("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&r&&(a.responseType="blob"),i.headers.forEach((function(e,t){a.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send(void 0===i._bodyInit?null:i._bodyInit)}))}O.polyfill=!0,self.fetch||(self.fetch=O,self.Headers=f,self.Request=y,self.Response=_)}).call(this,n(11))},function(e,t,n){var r=n(9),o=n(16),i=n(28);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9),o=n(30),i=n(17),a=n(29),c=Object.defineProperty;t.f=r?c:function(e,t,n){if(i(e),t=a(t,!0),i(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(13);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return v})),n.d(t,"b",(function(){return O})),n.d(t,"c",(function(){return b}));var r=n(12),o=n(8),i=(n(26),n(80));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function l(e,t,n){return(l=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&s(o,n.prototype),o}).apply(null,arguments)}function f(e){var t="function"==typeof Map?new Map:void 0;return(f=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return l(e,arguments,c(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,e)})(e)}var d="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?o.d:o.d.apply(null,arguments)};function p(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var h=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return l(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?l(r,t[0].concat(this)):l(r,t.concat(this))},r}(f(Array));function m(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new h);r&&("boolean"==typeof r?o.push(i.a):o.push(i.a.withExtraArgument(r.extraArgument)));0;return o}(e)}}function v(e){var t,n=m(),r=e||{},i=r.reducer,c=void 0===i?void 0:i,s=r.middleware,u=void 0===s?n():s,l=r.devTools,f=void 0===l||l,h=r.preloadedState,v=void 0===h?void 0:h,g=r.enhancers,y=void 0===g?void 0:g;if("function"==typeof c)t=c;else{if(!p(c))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Object(o.c)(c)}var b=o.a.apply(void 0,"function"==typeof u?u(n):u),_=o.d;f&&(_=d(a({trace:!1},"object"==typeof f&&f)));var E=[b];Array.isArray(y)?E=[b].concat(y):"function"==typeof y&&(E=y(E));var w=_.apply(void 0,E);return Object(o.e)(t,v,w)}function g(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return a({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function y(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function b(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var o=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?y(e.extraReducers):[e.extraReducers],c=i[0],s=void 0===c?{}:c,u=i[1],l=void 0===u?[]:u,f=i[2],d=void 0===f?void 0:f,p=Object.keys(o),h={},m={},v={};p.forEach((function(e){var n,r,i=o[e],a=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,h[e]=n,m[a]=n,v[e]=r?g(a,r):g(a)}));var b=function(e,t,n,o){void 0===n&&(n=[]);var i="function"==typeof t?y(t):[t,n,o],a=i[0],c=i[1],s=i[2];return function(t,n){void 0===t&&(t=e);var o=[a[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===o.filter((function(e){return!!e})).length&&(o=[s]),o.reduce((function(e,t){if(t){if(Object(r.d)(e)){var o=t(e,n);return void 0===o?e:o}if(Object(r.e)(e))return Object(r.b)(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return i}return e}),t)}}(n,a({},s,{},m),l,d);return{name:t,reducer:b,actions:v,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var _=["name","message","stack","code"],E=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},w=function(e){if("object"==typeof e&&null!==e){var t={},n=_,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(o>=n.length)break;i=n[o++]}else{if((o=n.next()).done)break;i=o.value}var a=i;"string"==typeof e[a]&&(t[a]=e[a])}return t}return{message:String(e)}};function O(t,n,r){var o=g(t+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t,requestStatus:"fulfilled"}}})),i=g(t+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),a=g(t+"/rejected",(function(e,t,n){var o=e instanceof E,i=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:e instanceof E?e.payload:void 0,error:(r&&r.serializeError||w)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:a}}})),c="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){0},e}();return Object.assign((function(t){return function(s,u,l){var f,d=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),p=new c,h=new e((function(e,t){return p.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:f||"Aborted"})}))})),m=!1;var v=function(){try{var c,f=function(e){return v?e:(r&&!r.dispatchConditionRejection&&a.match(c)&&c.meta.condition||s(c),c)},v=!1,g=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){if(r&&r.condition&&!1===r.condition(t,{getState:u,extra:l}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return m=!0,s(i(d,t)),e.resolve(e.race([h,e.resolve(n(t,{dispatch:s,getState:u,extra:l,requestId:d,signal:p.signal,rejectWithValue:function(e){return new E(e)}})).then((function(e){return e instanceof E?a(e,d,t):o(e,d,t)}))])).then((function(e){c=e}))}),(function(e){c=a(e,d,t)}));return e.resolve(g&&g.then?g.then(f):f(g))}catch(t){return e.reject(t)}}();return Object.assign(v,{abort:function(e){m&&(f=e,p.abort())},requestId:d,arg:t})}}),{pending:i,rejected:a,fulfilled:o,typePrefix:t})}Object(r.c)()}).call(this,n(11))},function(e,t,n){var r=n(48),o=n(50);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(4),o=n(15);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r,o=n(18),i=n(96),a=Object(o.c)({name:"ideas",initialState:{ideas:[]},reducers:{setIdeas:function(e,t){e.ideas=t.payload},addIdea:function(e,t){var n=t.payload;e.ideas.push(n)},removeIdea:function(e,t){e.ideas.splice(e.ideas.findIndex((function(e){return e.id===t.payload})),1)}},extraReducers:function(e){e.addCase(i.a.fulfilled,(function(e,t){e.ideas=t.payload}))}}),c=((r=a.actions).setIdeas,r.addIdea);t.b=a.reducer},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return g})),n.d(t,"Image",(function(){return g})),n.d(t,"IdeaImage",(function(){return R}));n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(103),n(3)),s=n.n(c);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return m(this,n)}}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(a,e);var t,n,r,i=h(a);function a(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);return(t=i.call(this,e)).config=s.a.recursive({aspectRatio:"16x9",allowMultipleImages:!1},t.config,t.props.config||{}),t.state={currentImageIndex:0,width:0},t}return t=a,(n=[{key:"componentDidMount",value:function(){var e=document.querySelector("#".concat(this.divId)).parentNode;this.setState({width:e.offsetWidth})}},{key:"setCurrentImageIndex",value:function(e){this.setState({currentImageIndex:e})}},{key:"getImagesFromProps",value:function(){var e=this.props.images||[];return this.props.image||e[this.state.currentImageIndex],[this.props.image,e]}},{key:"getImageSrc",value:function(e){var t=e;return"object"==f(e)&&e.src&&(t=e.src),t}},{key:"getAspectRatioFactor",value:function(){if(this.props.width&&this.props.height)return this.props.width/this.props.height;var e=this.config.aspectRatio.match(/(\d+)x(\d+)/);return e?e[1]/e[2]:16/9}},{key:"getWidthHeight",value:function(){var e=this.props.width||this.state.width;return[e,this.props.height||e*(1/this.getAspectRatioFactor())||void 0]}},{key:"render",value:function(){var e,t,n,r,i=this,a=u(i.getImagesFromProps(),2);t=a[0],e=a[1];var c=u(i.getWidthHeight(),2);return n=c[0],r=c[1],i.config.allowMultipleImages&&e.length>1?o.a.createElement("div",{id:i.divId,className:"osc-multiple-images ".concat(i.props.className||"")},o.a.createElement("div",{className:"osc-image-spacer",style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},key:"image-"+i.divId})),o.a.createElement("div",{className:"osc-multiple-images-thumbs",style:{height:.1*i.state.width}},e.map((function(e,t){var r=.1*n,a=r*i.getAspectRatioFactor(),c=1.05*a*t;return o.a.createElement("div",{className:"osc-image-thumb-spacer",key:"osc-image-thumb-".concat(t),style:{left:c,width:a,height:r}},o.a.createElement("div",{className:"osc-image-thumb",style:e?{backgroundImage:"url(".concat(i.getImageSrc(e),")"),zIndex:10-t}:{},onClick:function(e){return i.setCurrentImageIndex(t)}}))})))):o.a.createElement("div",{id:i.divId,className:"osc-image-spacer ".concat(i.props.className||""),style:{width:n,height:r}},o.a.createElement("div",{className:"osc-image",style:t?{backgroundImage:"url(".concat(i.getImageSrc(t),")")}:{},onClick:this.props.onClick,key:"image-"+i.divId}))}}])&&d(t.prototype,n),r&&d(t,r),a}(n(1).a);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function w(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=I(e);if(t){var o=I(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=w(i);function i(){return b(this,i),o.apply(this,arguments)}return t=i,(n=[{key:"getImagesFromProps",value:function(){var e=this.props.idea;if(!e)return["",[""]];var t=e.extraData&&e.extraData.images||[];return[e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[this.state.currentImageIndex],t]}}])&&_(t.prototype,n),r&&_(t,r),i}(g);R.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(R,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";function r(e,t){return e===t}function o(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function i(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}n.d(t,"a",(function(){return a}));var a=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=0,c=r.pop(),s=i(r),u=e.apply(void 0,[function(){return a++,c.apply(null,arguments)}].concat(n)),l=e((function(){for(var e=[],t=s.length,n=0;n<t;n++)e.push(s[n].apply(null,arguments));return u.apply(null,e)}));return l.resultFunc=c,l.dependencies=s,l.recomputations=function(){return a},l.resetRecomputations=function(){return a=0},l}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,i=null;return function(){return o(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}))},function(e,t,n){var r=n(9),o=n(58),i=n(28),a=n(19),c=n(29),s=n(7),u=n(30),l=Object.getOwnPropertyDescriptor;t.f=r?l:function(e,t){if(e=a(e),t=c(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return i(!o.f.call(e,t),e[t])}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(13);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(9),o=n(10),i=n(31);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),o=n(13),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},function(e,t,n){var r=n(33),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(4),o=n(20),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},function(e,t,n){var r=n(35),o=n(36),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},function(e,t,n){var r=n(62),o=n(33);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(65),o=n(4),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e])||i(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},function(e,t,n){var r=n(7),o=n(19),i=n(39).indexOf,a=n(21);e.exports=function(e,t){var n,c=o(e),s=0,u=[];for(n in c)!r(a,n)&&r(c,n)&&u.push(n);for(;t.length>s;)r(c,n=t[s++])&&(~i(u,n)||u.push(n));return u}},function(e,t,n){var r=n(19),o=n(51),i=n(67),a=function(e){return function(t,n,a){var c,s=r(t),u=o(s.length),l=i(a,u);if(e&&n!=n){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===n)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(10);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return q}));var r=n(0),o=n.n(r),i=(n(117),o.a.createContext(null));var a=function(e){e()},c={notify:function(){}};function s(){var e=a,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var u=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var l=function(e){var t=e.store,n=e.context,a=e.children,c=Object(r.useMemo)((function(){var e=new u(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=c.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[c,s]);var l=n||i;return o.a.createElement(l.Provider,{value:c},a)};function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var p=n(92),h=n.n(p),m=n(91),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,g=[],y=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function E(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function w(e,t,n,r,o,i,a,c,s,u){if(e){var l=!1,f=null,d=function(){if(!l){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||s():(i.current=e,c.current=e,a.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(l=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var O=function(){return[null,0]};function I(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,c=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=n.methodName,l=void 0===s?"connectAdvanced":s,p=n.renderCountProp,v=void 0===p?void 0:p,I=n.shouldHandleStateChanges,R=void 0===I||I,T=n.storeKey,S=void 0===T?"store":T,P=(n.withRef,n.forwardRef),C=void 0!==P&&P,L=n.context,D=void 0===L?i:L,k=d(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),M=D;return function(t){var n=t.displayName||t.name||"Component",i=c(n),a=f({},k,{getDisplayName:c,methodName:l,renderCountProp:v,shouldHandleStateChanges:R,storeKey:S,displayName:i,wrappedComponentName:n,WrappedComponent:t}),s=k.pure;var p=s?r.useMemo:function(e){return e()};function I(n){var i=Object(r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=d(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),c=i[0],s=i[1],l=i[2],h=Object(r.useMemo)((function(){return c&&c.Consumer&&Object(m.isContextConsumer)(o.a.createElement(c.Consumer,null))?c:M}),[c,M]),v=Object(r.useContext)(h),I=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var T=I?n.store:v.store,S=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(T)}),[T]),P=Object(r.useMemo)((function(){if(!R)return y;var e=new u(T,I?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[T,I,v]),C=P[0],L=P[1],D=Object(r.useMemo)((function(){return I?v:f({},v,{subscription:C})}),[I,v,C]),k=Object(r.useReducer)(b,g,O),A=k[0][0],x=k[1];if(A&&A.error)throw A.error;var N=Object(r.useRef)(),j=Object(r.useRef)(l),F=Object(r.useRef)(),B=Object(r.useRef)(!1),G=p((function(){return F.current&&l===j.current?F.current:S(T.getState(),l)}),[T,A,l]);_(E,[j,N,B,l,G,F,L]),_(w,[R,T,C,S,j,N,B,F,L,x],[T,C,S]);var q=Object(r.useMemo)((function(){return o.a.createElement(t,f({},G,{ref:s}))}),[s,t,G]);return Object(r.useMemo)((function(){return R?o.a.createElement(h.Provider,{value:D},q):q}),[h,q,D])}var T=s?o.a.memo(I):I;if(T.WrappedComponent=t,T.displayName=i,C){var P=o.a.forwardRef((function(e,t){return o.a.createElement(T,f({},e,{reactReduxForwardedRef:t}))}));return P.displayName=i,P.WrappedComponent=t,h()(P,t)}return h()(T,t)}}function R(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function T(e,t){if(R(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!R(e[n[o]],t[n[o]]))return!1;return!0}var S=n(8);function P(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function C(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function L(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=C(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=C(o),o=r(t,n)),o},r}}var D=[function(e){return"function"==typeof e?L(e):void 0},function(e){return e?void 0:P((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?P((function(t){return Object(S.b)(e,t)})):void 0}];var k=[function(e){return"function"==typeof e?L(e):void 0},function(e){return e?void 0:P((function(){return{}}))}];function M(e,t,n){return f({},n,e,t)}var A=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,c){var s=e(t,n,c);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return M}}];function x(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function N(e,t,n,r,o){var i,a,c,s,u,l=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,m,v=!f(p,a),g=!l(o,i);return i=o,a=p,v&&g?(c=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):v?(e.dependsOnOwnProps&&(c=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),u=n(c,s,a)):g?(h=e(i,a),m=!d(h,c),c=h,m&&(u=n(c,s,a)),u):u}return function(o,l){return p?h(o,l):(c=e(i=o,a=l),s=t(r,a),u=n(c,s,a),p=!0,u)}}function j(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=d(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),c=r(e,i),s=o(e,i);return(i.pure?N:x)(a,c,s,e,i)}function F(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function B(e,t){return e===t}function G(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?I:n,o=t.mapStateToPropsFactories,i=void 0===o?k:o,a=t.mapDispatchToPropsFactories,c=void 0===a?D:a,s=t.mergePropsFactories,u=void 0===s?A:s,l=t.selectorFactory,p=void 0===l?j:l;return function(e,t,n,o){void 0===o&&(o={});var a=o,s=a.pure,l=void 0===s||s,h=a.areStatesEqual,m=void 0===h?B:h,v=a.areOwnPropsEqual,g=void 0===v?T:v,y=a.areStatePropsEqual,b=void 0===y?T:y,_=a.areMergedPropsEqual,E=void 0===_?T:_,w=d(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),O=F(e,i,"mapStateToProps"),I=F(t,c,"mapDispatchToProps"),R=F(n,u,"mergeProps");return r(p,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:O,initMapDispatchToProps:I,initMergeProps:R,pure:l,areStatesEqual:m,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:E},w))}}var q=G();var U,V=n(6);U=V.unstable_batchedUpdates,a=U},function(e,t,n){var r=n(4),o=n(27).f,i=n(15),a=n(59),c=n(20),s=n(63),u=n(69);e.exports=function(e,t){var n,l,f,d,p,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||c(h,{}):(r[h]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(p=o(n,l))&&p.value:n[l],!u(m?l:h+(v?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;s(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,l,d,e)}}},function(e,t,n){var r=n(53),o=n(72),i=n(16),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},function(e,t,n){var r=n(9),o=n(10),i=n(7),a=Object.defineProperty,c={},s=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var n=[][e],u=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:s,f=i(t,1)?t[1]:void 0;return c[e]=!!n&&!o((function(){if(u&&!r)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:s}):e[1]=1,n.call(e,l,f)}))}},function(e,t,n){var r=n(4),o=n(52),i=Function.call;e.exports=function(e,t,n){return o(i,r[e].prototype[t],n)}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o})),n.d(t,"c",(function(){return i}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function o(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}s((o=o.apply(t,n||[])).next())}))}function i(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;Object.create}).call(this,n(11))},function(e,t,n){var r=n(10),o=n(49),i="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(40),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(70);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4),o=n(35),i=n(7),a=n(36),c=n(41),s=n(71),u=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(c&&i(l,e)?u[e]=l[e]:u[e]=f("Symbol."+e)),u[e]}},function(e,t,n){(function(t,r){var o;o=function(){"use strict";function e(e){return"function"==typeof e}var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},i=0,a=void 0,c=void 0,s=function(e,t){m[i]=e,m[i+1]=t,2===(i+=2)&&(c?c(v):E())},u="undefined"!=typeof window?window:void 0,l=u||{},f=l.MutationObserver||l.WebKitMutationObserver,d="undefined"==typeof self&&void 0!==t&&"[object process]"==={}.toString.call(t),p="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var e=setTimeout;return function(){return e(v,1)}}var m=new Array(1e3);function v(){for(var e=0;e<i;e+=2)(0,m[e])(m[e+1]),m[e]=void 0,m[e+1]=void 0;i=0}var g,y,b,_,E=void 0;function w(e,t){var n=arguments,r=this,o=new this.constructor(R);void 0===o[I]&&G(o);var i,a=r._state;return a?(i=n[a-1],s((function(){return F(a,o,i,r._result)}))):A(r,o,e,t),o}function O(e){if(e&&"object"==typeof e&&e.constructor===this)return e;var t=new this(R);return L(t,e),t}d?E=function(){return t.nextTick(v)}:f?(y=0,b=new f(v),_=document.createTextNode(""),b.observe(_,{characterData:!0}),E=function(){_.data=y=++y%2}):p?((g=new MessageChannel).port1.onmessage=v,E=function(){return g.port2.postMessage(0)}):E=void 0===u?function(){try{var e=n(56);return a=e.runOnLoop||e.runOnContext,function(){a(v)}}catch(e){return h()}}():h();var I=Math.random().toString(36).substring(16);function R(){}var T=void 0,S=new N;function P(e){try{return e.then}catch(e){return S.error=e,S}}function C(t,n,r){n.constructor===t.constructor&&r===w&&n.constructor.resolve===O?function(e,t){1===t._state?k(e,t._result):2===t._state?M(e,t._result):A(t,void 0,(function(t){return L(e,t)}),(function(t){return M(e,t)}))}(t,n):r===S?M(t,S.error):void 0===r?k(t,n):e(r)?function(e,t,n){s((function(e){var r=!1,o=function(e,t,n,r){try{e.call(t,n,r)}catch(e){return e}}(n,t,(function(n){r||(r=!0,t!==n?L(e,n):k(e,n))}),(function(t){r||(r=!0,M(e,t))}),e._label);!r&&o&&(r=!0,M(e,o))}),e)}(t,n,r):k(t,n)}function L(e,t){var n;e===t?M(e,new TypeError("You cannot resolve a promise with itself")):"function"==typeof(n=t)||"object"==typeof n&&null!==n?C(e,t,P(t)):k(e,t)}function D(e){e._onerror&&e._onerror(e._result),x(e)}function k(e,t){e._state===T&&(e._result=t,e._state=1,0!==e._subscribers.length&&s(x,e))}function M(e,t){e._state===T&&(e._state=2,e._result=t,s(D,e))}function A(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+1]=n,o[i+2]=r,0===i&&e._state&&s(x,e)}function x(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r=void 0,o=void 0,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?F(n,r,o,i):o(i);e._subscribers.length=0}}function N(){this.error=null}var j=new N;function F(t,n,r,o){var i=e(r),a=void 0,c=void 0,s=void 0,u=void 0;if(i){if((a=function(e,t){try{return e(t)}catch(e){return j.error=e,j}}(r,o))===j?(u=!0,c=a.error,a=null):s=!0,n===a)return void M(n,new TypeError("A promises callback cannot return that same promise."))}else a=o,s=!0;n._state!==T||(i&&s?L(n,a):u?M(n,c):1===t?k(n,a):2===t&&M(n,a))}var B=0;function G(e){e[I]=B++,e._state=void 0,e._result=void 0,e._subscribers=[]}function q(e,t){this._instanceConstructor=e,this.promise=new e(R),this.promise[I]||G(this.promise),o(t)?(this._input=t,this.length=t.length,this._remaining=t.length,this._result=new Array(this.length),0===this.length?k(this.promise,this._result):(this.length=this.length||0,this._enumerate(),0===this._remaining&&k(this.promise,this._result))):M(this.promise,new Error("Array Methods must be provided an Array"))}function U(e){this[I]=B++,this._result=this._state=void 0,this._subscribers=[],R!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof U?function(e,t){try{t((function(t){L(e,t)}),(function(t){M(e,t)}))}catch(t){M(e,t)}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}function V(){var e=void 0;if(void 0!==r)e=r;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var t=e.Promise;if(t){var n=null;try{n=Object.prototype.toString.call(t.resolve())}catch(e){}if("[object Promise]"===n&&!t.cast)return}e.Promise=U}return q.prototype._enumerate=function(){for(var e=this.length,t=this._input,n=0;this._state===T&&n<e;n++)this._eachEntry(t[n],n)},q.prototype._eachEntry=function(e,t){var n=this._instanceConstructor,r=n.resolve;if(r===O){var o=P(e);if(o===w&&e._state!==T)this._settledAt(e._state,t,e._result);else if("function"!=typeof o)this._remaining--,this._result[t]=e;else if(n===U){var i=new n(R);C(i,e,o),this._willSettleAt(i,t)}else this._willSettleAt(new n((function(t){return t(e)})),t)}else this._willSettleAt(r(e),t)},q.prototype._settledAt=function(e,t,n){var r=this.promise;r._state===T&&(this._remaining--,2===e?M(r,n):this._result[t]=n),0===this._remaining&&k(r,this._result)},q.prototype._willSettleAt=function(e,t){var n=this;A(e,void 0,(function(e){return n._settledAt(1,t,e)}),(function(e){return n._settledAt(2,t,e)}))},U.all=function(e){return new q(this,e).promise},U.race=function(e){var t=this;return o(e)?new t((function(n,r){for(var o=e.length,i=0;i<o;i++)t.resolve(e[i]).then(n,r)})):new t((function(e,t){return t(new TypeError("You must pass an array to race."))}))},U.resolve=O,U.reject=function(e){var t=new this(R);return M(t,e),t},U._setScheduler=function(e){c=e},U._setAsap=function(e){s=e},U._asap=s,U.prototype={constructor:U,then:w,catch:function(e){return this.then(null,e)}},V(),U.polyfill=V,U.Promise=U,U},e.exports=o()}).call(this,n(55),n(23))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,u=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?u=s.concat(u):f=-1,u.length&&p())}function p(){if(!l){var e=c(d);l=!0;for(var t=u.length;t;){for(s=u,u=[];++f<t;)s&&s[f].run();f=-1,t=u.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||c(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FilePond=t.FileStatus=t.registerPlugin=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r},c=n(102);t.registerPlugin=c.registerPlugin,t.FileStatus=c.FileStatus;var s=(0,c.supported)(),u=["setOptions","on","off","onOnce","appendTo","insertAfter","insertBefore","isAttachedTo","replaceElement","restoreElement","destroy"];t.FilePond=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.allowFilesSync=!0,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){var e=this;if(s){var t=Object.assign({},this.props);if(t.onupdatefiles){var n=t.onupdatefiles;t.onupdatefiles=function(t){e.allowFilesSync=!1,n(t)}}this._pond=(0,c.create)(this._element,t),Object.keys(this._pond).filter((function(e){return!u.includes(e)})).forEach((function(t){e[t]=e._pond[t]}))}}},{key:"componentWillUnmount",value:function(){this._pond&&(this._pond.destroy(),this.allowFilesSync=!0)}},{key:"shouldComponentUpdate",value:function(){return!!this.allowFilesSync||(this.allowFilesSync=!0,!1)}},{key:"componentDidUpdate",value:function(){if(this._pond){var e=Object.assign({},this.props);delete e.onupdatefiles,this._pond.setOptions(e)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.id,r=t.name,o=t.className,a=t.allowMultiple,c=t.required,s=t.captureMethod,u=t.acceptedFileTypes;return(0,i.createElement)("div",{className:"filepond--wrapper"},(0,i.createElement)("input",{type:"file",name:r,id:n,accept:u,multiple:a,required:c,className:o,capture:s,ref:function(t){return e._element=t}}))}}]),t}(a.default.Component)},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var t=o(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(4),o=n(15),i=n(7),a=n(20),c=n(32),s=n(60),u=s.get,l=s.enforce,f=String(String).split("String");(e.exports=function(e,t,n,c){var s=!!c&&!!c.unsafe,u=!!c&&!!c.enumerable,d=!!c&&!!c.noTargetGet;"function"==typeof n&&("string"!=typeof t||i(n,"name")||o(n,"name",t),l(n).source=f.join("string"==typeof t?t:"")),e!==r?(s?!d&&e[t]&&(u=!0):delete e[t],u?e[t]=n:o(e,t,n)):u?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},function(e,t,n){var r,o,i,a=n(61),c=n(4),s=n(13),u=n(15),l=n(7),f=n(34),d=n(21),p=c.WeakMap;if(a){var h=new p,m=h.get,v=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},o=function(e){return m.call(h,e)||{}},i=function(e){return v.call(h,e)}}else{var y=f("state");d[y]=!0,r=function(e,t){return u(e,y,t),t},o=function(e){return l(e,y)?e[y]:{}},i=function(e){return l(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(4),o=n(32),i=r.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},function(e,t){e.exports=!1},function(e,t,n){var r=n(7),o=n(64),i=n(27),a=n(16);e.exports=function(e,t){for(var n=o(t),c=a.f,s=i.f,u=0;u<n.length;u++){var l=n[u];r(e,l)||c(e,l,s(t,l))}}},function(e,t,n){var r=n(37),o=n(66),i=n(68),a=n(17);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(a(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(38),o=n(22).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(40),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(10),o=/#|\.prototype\./,i=function(e,t){var n=c[a(e)];return n==u||n!=s&&("function"==typeof t?r(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(41);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r,o=n(17),i=n(73),a=n(22),c=n(21),s=n(75),u=n(31),l=n(34),f=l("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=u("iframe")).style.display="none",s.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=o(e),n=new d,d.prototype=null,n[f]=e):n=h(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(9),o=n(16),i=n(17),a=n(74);e.exports=r?Object.defineProperties:function(e,t){i(e);for(var n,r=a(t),c=r.length,s=0;c>s;)o.f(e,n=r[s++],t[n]);return e}},function(e,t,n){var r=n(38),o=n(22);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(37);e.exports=r("document","documentElement")},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){n(78);var r=n(46);e.exports=r("Array","includes")},function(e,t,n){"use strict";var r=n(43),o=n(39).includes,i=n(44);r({target:"Array",proto:!0,forced:!n(45)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return V})),n.d(t,"IdeasList",(function(){return v})),n.d(t,"IdeasOverview",(function(){return V})),n.d(t,"IdeasFilterbar",(function(){return T})),n.d(t,"IdeasFilter",(function(){return g.a})),n.d(t,"IdeasSort",(function(){return M})),n.d(t,"IdeasSearch",(function(){return y.a}));n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(132),n(1)),s=n(2),u=n(104);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{title:"Inzendingen",type:"tiles",columns:3,onMouseOverTileFadeOthers:!1},idea:{titleField:"title",summaryField:"summary"},sort:{sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"}],showSort:!0,defaultValue:"createdtime,desc"},types:[]})).state={highLightIdeaId:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideaTileMouseOverListener=function(e){n.onTileMouseOver(e.detail)},document.addEventListener("osc-idea-tile-mouse-over",n.ideaTileMouseOverListener),n.ideaTileMouseOutListener=function(e){n.onTileMouseOut(e.detail)},document.addEventListener("osc-idea-tile-mouse-out",n.ideaTileMouseOutListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-idea-tile-mouse-over",this.ideaTileMouseOverListener),document.removeEventListener("osc-idea-tile-mouse-out",this.ideaTileMouseOutListener)}},{key:"onTileMouseOver",value:function(e){var t=e.idea;this.setState({highLightIdeaId:t.id})}},{key:"onTileMouseOut",value:function(e){e.idea,this.setState({highLightIdeaId:null})}},{key:"render",value:function(){var e=this,t=this,n=t.props.ideas||[];return React.createElement("div",{className:"osc-tile-list-container ".concat(t.props.className||"")},React.createElement("div",{className:"osc-tile-list"},n.map((function(n,r){return React.createElement(u.a,{config:t.config,idea:n,className:"osc-".concat(t.config.display.columns,"-columns").concat(e.config.display.onMouseOverTileFadeOthers&&t.state.highLightIdeaId&&t.state.highLightIdeaId!=n.id?" osc-opacity-65":""),key:"osc-idea-tile-".concat(n.id)})}))))}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a),g=n(93),y=n(94);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function w(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return O(this,n)}}function O(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?I(e):t}function I(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(i,e);var t,n,r,o=w(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{display:{}})).doNextPendingResetAction=t.doNextPendingResetAction.bind(I(t)),t.state={pendingResetActions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasSearchOnchangeListener=function(e){n.doNextPendingResetAction()},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasFilterOnchangeListener=function(e){n.hideMobileActiveSelector(),n.doNextPendingResetAction()},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener)}},{key:"toggleMobileActiveSelector",value:function(e){this.state.mobileActiveSelector!=e?this.showMobileActiveSelector(e):this.hideMobileActiveSelector()}},{key:"showMobileActiveSelector",value:function(e){this.setState({mobileActiveSelector:e})}},{key:"hideMobileActiveSelector",value:function(){this.setState({mobileActiveSelector:null})}},{key:"resetAll",value:function(){var e=this;e.search&&e.state.pendingResetActions.push(e.search.setSearch),e.filters&&e.filters.forEach((function(t){e.state.pendingResetActions.push(t.setFilter)}));var t=new window.CustomEvent("osc-ideas-filter-reset-all",{detail:{}});document.dispatchEvent(t),e.doNextPendingResetAction()}},{key:"doNextPendingResetAction",value:function(){var e=this.state.pendingResetActions.shift();e&&e({value:""})}},{key:"render",value:function(){var e=this;if(!(void 0!==e.props.showFilterbar?e.props.showFilterbar:e.config.display.showFilterbar))return null;var t,n=null;e.config.search&&(n=React.createElement("div",{className:"osc-ideas-search-container"},React.createElement("div",{className:"osc-ideas-search-button",onClick:function(){return e.toggleMobileActiveSelector("search")}}),React.createElement(y.a,{config:e.config.search,className:"".concat("search"==e.state.mobileActiveSelector?" osc-is-active":""),ref:function(t){return e.search=t}}))),t=React.createElement("button",{value:"reset",onClick:function(){return e.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,o=null;if(e.config.filter.length){var i=e.filters&&e.filters.find((function(e){return e.state.currentValue}));e.filters=[],o=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(i?" osc-active":""),onClick:function(){return e.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==e.state.mobileActiveSelector?" osc-is-active":"")},e.config.filter.map((function(t,n){return React.createElement(g.a,{config:t,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(t){return e.filters[n]=t}})}))),t)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},o),React.createElement("div",{className:"osc-ideas-filterbar ".concat(e.props.className||"")},n,r)}}])&&_(t.prototype,n),r&&_(t,r),i}(c.a);function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=k(e);if(t){var o=k(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return D(this,n)}}function D(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(i,e);var t,n,r,o=L(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{label:null,sortOptions:[{value:"createdtime,desc",label:"Nieuwste eerst"},{value:"createdtime,asc",label:"Oudste eerst"},{value:"title",label:"Titel"},{value:"random",label:"Willekeurig"},{value:"likes,desc",label:"Meeste likes"},{value:"likes,asc",label:"Minste likes"},{value:"args,desc",label:"Meeste reacties"},{value:"args,asc",label:"Minste reacties"},{value:"ranking,asc",label:"Ranglijst"}],defaultValue:"createdtime,desc",showSort:!0,center:{latitude:52.37104644463586,longitude:4.900402911007405}})).state={currentValue:t.config.defaultValue},t}return t=i,(n=[{key:"doSort",value:function(e){var t=e.ideas,n=e.sortOrder,r=e.center;return n=n||this.state.currentValue,r=r||this.config.center,s.a.ideasSort({ideas:t,sortOrder:n,center:r})}},{key:"setSortOrder",value:function(e){var t=e.sortOrder,n=this.props.ideas||[];n=this.doSort({ideas:n,sortOrder:t}),this.setState({ideas:n,currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-sort-onchange",{detail:n});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(e.props.ideas,!(void 0!==e.props.showSort?e.props.showSort:e.config.showSort))return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-sort-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-sort ".concat(e.props.className||"")},t,React.createElement("select",{defaultValue:e.state.currentValue,onChange:function(){return e.setSortOrder({sortOrder:e.sortSelector.value})},className:"osc-default-select",ref:function(t){return e.sortSelector=t}},e.config.sortOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"sort-option-"+t},e.label)}))))}}])&&P(t.prototype,n),r&&P(t,r),i}(c.a);function A(e){return(A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){j(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=U(e);if(t){var o=U(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return q(this,n)}}function q(e,t){return!t||"object"!==A(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var V=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(i,e);var t,n,r,o=G(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,title:"Inzendingen",display:{showFilterbar:!0},idea:{titleField:"title",summaryField:"summary"},sort:{showSort:!0,defaultValue:"createdtime,desc"},filter:[],types:[],typeLabel:"Thema"})).state={ideas:t.props.ideas||[],filters:{},search:null},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.ideasFilterOnchangeListener=function(e){n.updateFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasSearchOnchangeListener=function(e){n.updateSearch(e.detail)},document.addEventListener("osc-ideas-search-onchange",n.ideasSearchOnchangeListener),n.ideasSortOnchangeListener=function(e){n.updateSort(e.detail)},document.addEventListener("osc-ideas-sort-onchange",n.ideasSortOnchangeListener),void 0===n.props.ideas&&n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-search-onchange",this.ideasSearchOnchangeListener),document.removeEventListener("osc-ideas-sort-onchange",this.ideasSortOnchangeListener)}},{key:"fetchData",value:function(){var e=this,t="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea?summary=1&includeVoteCount=1&includeArgsCount=1"),n=s.a.api.getHeaders(e.config);fetch(t,{headers:n}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;n=e.sorter.doSort({ideas:n}),e.setState({ideas:n},(function(){}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"updateFilter",value:function(e){var t=N({},this.state.filters);e.value?t[e.fieldName]={value:e.value,doFilter:e.doFilter}:delete t[e.fieldName],this.setState({filters:t})}},{key:"updateSearch",value:function(e){e=e.value?{value:e.value,doSearch:e.doSearch}:null,this.setState({search:e})}},{key:"updateSort",value:function(e){this.setState({ideas:e})}},{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=t;Object.keys(e.state.filters).forEach((function(t){var r=e.state.filters[t];n=r.doFilter(n)})),e.state.search&&(n=e.state.search.doSearch(n)),this.props.maxLength&&(n=t.slice(0,this.props.maxLength));var r=React.createElement("h3",{className:"osc-title"},e.config.title," (",n.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(T,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(M,{config:N({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),r,React.createElement(v,{config:e.config,ideas:n,className:""}))}}])&&F(t.prototype,n),r&&F(t,r),i}(c.a);V.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(V,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";(function(e,r){var o,i=n(95);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(23),n(108)(e))},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s})),n.d(t,"OpenstadStore",(function(){return s}));var r=n(18),o=n(8),i=Object(r.c)({name:"config",initialState:{api:{}},reducers:{}}).reducer,a=n(24),c=Object(o.c)({config:i,ideas:a.b}),s=function(e){return Object(r.a)({reducer:c,preloadedState:e})}},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){return/^image/.test(e.type)};function n(e){this.wrapped=e}function r(e){var r,o;function i(e,n){return new t((function(t,i){var c={key:e,arg:n,resolve:t,reject:i,next:null};o?o=o.next=c:(r=o=c,a(e,n))}))}function a(r,o){try{var i=e[r](o),s=i.value,u=s instanceof n;t.resolve(u?s.wrapped:s).then((function(e){u?a("next",e):c(i.done?"return":"normal",e)}),(function(e){a("throw",e)}))}catch(e){c("throw",e)}}function c(e,t){switch(e){case"return":r.resolve({value:t,done:!0});break;case"throw":r.reject(t);break;default:r.resolve({value:t,done:!1})}(r=r.next)?a(r.key,r.arg):o=null}this._invoke=i,"function"!=typeof e.return&&(this.return=void 0)}function o(e,t){return i(e)||a(e,t)||c()}function i(e){if(Array.isArray(e))return e}function a(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(r.prototype[Symbol.asyncIterator]=function(){return this}),r.prototype.next=function(e){return this._invoke("next",e)},r.prototype.throw=function(e){return this._invoke("throw",e)},r.prototype.return=function(e){return this._invoke("return",e)};var s=function(e,t){return d(e.x*t,e.y*t)},u=function(e,t){return d(e.x+t.x,e.y+t.y)},l=function(e){var t=Math.sqrt(e.x*e.x+e.y*e.y);return 0===t?{x:0,y:0}:d(e.x/t,e.y/t)},f=function(e,t,n){var r=Math.cos(t),o=Math.sin(t),i=d(e.x-n.x,e.y-n.y);return d(n.x+r*i.x-o*i.y,n.y+o*i.x+r*i.y)},d=function(){return{x:arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,y:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0}},p=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0;return"string"==typeof e?parseFloat(e)*n:"number"==typeof e?e*(r?t[r]:Math.min(t.width,t.height)):void 0},h=function(e,t,n){var r=e.borderStyle||e.lineStyle||"solid",o=e.backgroundColor||e.fontColor||"transparent",i=e.borderColor||e.lineColor||"transparent",a=p(e.borderWidth||e.lineWidth,t,n);return{"stroke-linecap":e.lineCap||"round","stroke-linejoin":e.lineJoin||"round","stroke-width":a||0,"stroke-dasharray":"string"==typeof r?"":r.map((function(e){return p(e,t,n)})).join(","),stroke:i,fill:o,opacity:e.opacity||1}},m=function(e){return null!=e},v=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=p(e.x,t,n,"width")||p(e.left,t,n,"width"),o=p(e.y,t,n,"height")||p(e.top,t,n,"height"),i=p(e.width,t,n,"width"),a=p(e.height,t,n,"height"),c=p(e.right,t,n,"width"),s=p(e.bottom,t,n,"height");return m(o)||(o=m(a)&&m(s)?t.height-a-s:s),m(r)||(r=m(i)&&m(c)?t.width-i-c:c),m(i)||(i=m(r)&&m(c)?t.width-r-c:0),m(a)||(a=m(o)&&m(s)?t.height-o-s:0),{x:r||0,y:o||0,width:i||0,height:a||0}},g=function(e){return e.map((function(e,t){return"".concat(0===t?"M":"L"," ").concat(e.x," ").concat(e.y)})).join(" ")},y=function(e,t){return Object.keys(t).forEach((function(n){return e.setAttribute(n,t[n])}))},b="http://www.w3.org/2000/svg",_=function(e,t){var n=document.createElementNS(b,e);return t&&y(n,t),n},E=function(e){return y(e,Object.assign({},e.rect,e.styles))},w=function(e){var t=e.rect.x+.5*e.rect.width,n=e.rect.y+.5*e.rect.height,r=.5*e.rect.width,o=.5*e.rect.height;return y(e,Object.assign({cx:t,cy:n,rx:r,ry:o},e.styles))},O={contain:"xMidYMid meet",cover:"xMidYMid slice"},I=function(e,t){y(e,Object.assign({},e.rect,e.styles,{preserveAspectRatio:O[t.fit]||"none"}))},R={left:"start",center:"middle",right:"end"},T=function(e,t,n,r){var o=p(t.fontSize,n,r),i=t.fontFamily||"sans-serif",a=t.fontWeight||"normal",c=R[t.textAlign]||"start";y(e,Object.assign({},e.rect,e.styles,{"stroke-width":0,"font-weight":a,"font-size":o,"font-family":i,"text-anchor":c})),e.text!==t.text&&(e.text=t.text,e.textContent=t.text.length?t.text:" ")},S=function(e,t,n,r){y(e,Object.assign({},e.rect,e.styles,{fill:"none"}));var o=e.childNodes[0],i=e.childNodes[1],a=e.childNodes[2],c=e.rect,d={x:e.rect.x+e.rect.width,y:e.rect.y+e.rect.height};if(y(o,{x1:c.x,y1:c.y,x2:d.x,y2:d.y}),t.lineDecoration){i.style.display="none",a.style.display="none";var h=l({x:d.x-c.x,y:d.y-c.y}),m=p(.05,n,r);if(-1!==t.lineDecoration.indexOf("arrow-begin")){var v=s(h,m),g=u(c,v),b=f(c,2,g),_=f(c,-2,g);y(i,{style:"display:block;",d:"M".concat(b.x,",").concat(b.y," L").concat(c.x,",").concat(c.y," L").concat(_.x,",").concat(_.y)})}if(-1!==t.lineDecoration.indexOf("arrow-end")){var E=s(h,-m),w=u(d,E),O=f(d,2,w),I=f(d,-2,w);y(a,{style:"display:block;",d:"M".concat(O.x,",").concat(O.y," L").concat(d.x,",").concat(d.y," L").concat(I.x,",").concat(I.y)})}}},P=function(e,t,n,r){y(e,Object.assign({},e.styles,{fill:"none",d:g(t.points.map((function(e){return{x:p(e.x,n,r,"width"),y:p(e.y,n,r,"height")}})))}))},C=function(e){return function(t){return _(e,{id:t.id})}},L=function(e){var t=_("g",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round"}),n=_("line");t.appendChild(n);var r=_("path");t.appendChild(r);var o=_("path");return t.appendChild(o),t},D={image:function(e){var t=_("image",{id:e.id,"stroke-linecap":"round","stroke-linejoin":"round",opacity:"0"});return t.onload=function(){t.setAttribute("opacity",e.opacity||1)},t.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",e.src),t},rect:C("rect"),ellipse:C("ellipse"),text:C("text"),path:C("path"),line:L},k={rect:E,ellipse:w,image:I,text:T,path:P,line:S},M=function(e,t){return D[e](t)},A=function(e,t,n,r,o){"path"!==t&&(e.rect=v(n,r,o)),e.styles=h(n,r,o),k[t](e,n,r,o)},x=["x","y","left","top","right","bottom","width","height"],N=function(e){return"string"==typeof e&&/%/.test(e)?parseFloat(e)/100:e},j=function(e){var t=o(e,2),n=t[0],r=t[1],i=r.points?{}:x.reduce((function(e,t){return e[t]=N(r[t]),e}),{});return[n,Object.assign({zIndex:0},r,i)]},F=function(e,t){return e[1].zIndex>t[1].zIndex?1:e[1].zIndex<t[1].zIndex?-1:0},B=function(e){return e.utils.createView({name:"image-preview-markup",tag:"svg",ignoreRect:!0,mixins:{apis:["width","height","crop","markup","resize","dirty"]},write:function(e){var t=e.root,n=e.props;if(n.dirty){var r=n.crop,i=n.resize,a=n.markup,c=n.width,s=n.height,u=r.width,l=r.height;if(i){var f=i.size,d=f&&f.width,p=f&&f.height,h=i.mode,m=i.upscale;d&&!p&&(p=d),p&&!d&&(d=p);var v=u<d&&l<p;if(!v||v&&m){var g,y=d/u,b=p/l;"force"===h?(u=d,l=p):("cover"===h?g=Math.max(y,b):"contain"===h&&(g=Math.min(y,b)),u*=g,l*=g)}}var _={width:c,height:s};t.element.setAttribute("width",_.width),t.element.setAttribute("height",_.height);var E=Math.min(c/u,s/l);t.element.innerHTML="";var w=t.query("GET_IMAGE_PREVIEW_MARKUP_FILTER");a.filter(w).map(j).sort(F).forEach((function(e){var n=o(e,2),r=n[0],i=n[1],a=M(r,i);A(a,r,i,_,E),t.element.appendChild(a)}))}}})},G=function(e,t){return{x:e,y:t}},q=function(e,t){return e.x*t.x+e.y*t.y},U=function(e,t){return G(e.x-t.x,e.y-t.y)},V=function(e,t){return q(U(e,t),U(e,t))},H=function(e,t){return Math.sqrt(V(e,t))},W=function(e,t){var n=e,r=1.5707963267948966,o=t,i=1.5707963267948966-t,a=Math.sin(r),c=Math.sin(o),s=Math.sin(i),u=Math.cos(i),l=n/a;return G(u*(l*c),u*(l*s))},z=function(e,t){var n=e.width,r=e.height,o=W(n,t),i=W(r,t),a=G(e.x+Math.abs(o.x),e.y-Math.abs(o.y)),c=G(e.x+e.width+Math.abs(i.y),e.y+Math.abs(i.x)),s=G(e.x-Math.abs(i.y),e.y+e.height-Math.abs(i.x));return{width:H(a,c),height:H(a,s)}},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=e.height/e.width,o=1,i=t,a=1,c=r;c>i&&(a=(c=i)/r);var s=Math.max(o/a,i/c),u=e.width/(n*s*a);return{width:u,height:u*t}},K=function(e,t,n,r){var o=r.x>.5?1-r.x:r.x,i=r.y>.5?1-r.y:r.y,a=2*o*e.width,c=2*i*e.height,s=z(t,n);return Math.max(s.width/a,s.height/c)},X=function(e,t){var n=e.width,r=n*t;return r>e.height&&(n=(r=e.height)/t),{x:.5*(e.width-n),y:.5*(e.height-r),width:n,height:r}},Q=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.zoom,r=t.rotation,o=t.center,i=t.aspectRatio;i||(i=e.height/e.width);var a=Y(e,i,n),c={x:.5*a.width,y:.5*a.height},s={x:0,y:0,width:a.width,height:a.height,center:c},u=void 0===t.scaleToFit||t.scaleToFit,l=n*K(e,X(s,i),r,u?o:{x:.5,y:.5});return{widthFloat:a.width/l,heightFloat:a.height/l,width:Math.round(a.width/l),height:Math.round(a.height/l)}},J={type:"spring",stiffness:.5,damping:.45,mass:10},$=function(e){return e.utils.createView({name:"image-bitmap",ignoreRect:!0,mixins:{styles:["scaleX","scaleY"]},create:function(e){var t=e.root,n=e.props;t.appendChild(n.image)}})},Z=function(e){return e.utils.createView({name:"image-canvas-wrapper",tag:"div",ignoreRect:!0,mixins:{apis:["crop","width","height"],styles:["originX","originY","translateX","translateY","scaleX","scaleY","rotateZ"],animations:{originX:J,originY:J,scaleX:J,scaleY:J,translateX:J,translateY:J,rotateZ:J}},create:function(t){var n=t.root,r=t.props;r.width=r.image.width,r.height=r.image.height,n.ref.bitmap=n.appendChildView(n.createChildView($(e),{image:r.image}))},write:function(e){var t=e.root,n=e.props.crop.flip,r=t.ref.bitmap;r.scaleX=n.horizontal?-1:1,r.scaleY=n.vertical?-1:1}})},ee=function(e){return e.utils.createView({name:"image-clip",tag:"div",ignoreRect:!0,mixins:{apis:["crop","markup","resize","width","height","dirty","background"],styles:["width","height","opacity"],animations:{opacity:{type:"tween",duration:250}}},didWriteView:function(e){var t=e.root,n=e.props;n.background&&(t.element.style.backgroundColor=n.background)},create:function(t){var n=t.root,r=t.props;n.ref.image=n.appendChildView(n.createChildView(Z(e),Object.assign({},r))),n.ref.createMarkup=function(){n.ref.markup||(n.ref.markup=n.appendChildView(n.createChildView(B(e),Object.assign({},r))))},n.ref.destroyMarkup=function(){n.ref.markup&&(n.removeChildView(n.ref.markup),n.ref.markup=null)};var o=n.query("GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR");null!==o&&(n.element.dataset.transparencyIndicator="grid"===o?o:"color")},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=n.crop,i=n.markup,a=n.resize,c=n.dirty,s=n.width,u=n.height;t.ref.image.crop=o;var l={x:0,y:0,width:s,height:u,center:{x:.5*s,y:.5*u}},f={width:t.ref.image.width,height:t.ref.image.height},d={x:o.center.x*f.width,y:o.center.y*f.height},p={x:l.center.x-f.width*o.center.x,y:l.center.y-f.height*o.center.y},h=2*Math.PI+o.rotation%(2*Math.PI),m=o.aspectRatio||f.height/f.width,v=void 0===o.scaleToFit||o.scaleToFit,g=K(f,X(l,m),h,v?o.center:{x:.5,y:.5}),y=o.zoom*g;i&&i.length?(t.ref.createMarkup(),t.ref.markup.width=s,t.ref.markup.height=u,t.ref.markup.resize=a,t.ref.markup.dirty=c,t.ref.markup.markup=i,t.ref.markup.crop=Q(f,o)):t.ref.markup&&t.ref.destroyMarkup();var b=t.ref.image;if(r)return b.originX=null,b.originY=null,b.translateX=null,b.translateY=null,b.rotateZ=null,b.scaleX=null,void(b.scaleY=null);b.originX=d.x,b.originY=d.y,b.translateX=p.x,b.translateY=p.y,b.rotateZ=h,b.scaleX=y,b.scaleY=y}})},te=function(e){return e.utils.createView({name:"image-preview",tag:"div",ignoreRect:!0,mixins:{apis:["image","crop","markup","resize","dirty","background"],styles:["translateY","scaleX","scaleY","opacity"],animations:{scaleX:J,scaleY:J,translateY:J,opacity:{type:"tween",duration:400}}},create:function(t){var n=t.root,r=t.props;n.ref.clip=n.appendChildView(n.createChildView(ee(e),{id:r.id,image:r.image,crop:r.crop,markup:r.markup,resize:r.resize,dirty:r.dirty,background:r.background}))},write:function(e){var t=e.root,n=e.props,r=e.shouldOptimize,o=t.ref.clip,i=n.image,a=n.crop,c=n.markup,s=n.resize,u=n.dirty;if(o.crop=a,o.markup=c,o.resize=s,o.dirty=u,o.opacity=r?0:1,!r&&!t.rect.element.hidden){var l=i.height/i.width,f=a.aspectRatio||l,d=t.rect.inner.width,p=t.rect.inner.height,h=t.query("GET_IMAGE_PREVIEW_HEIGHT"),m=t.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),v=t.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),g=t.query("GET_PANEL_ASPECT_RATIO"),y=t.query("GET_ALLOW_MULTIPLE");g&&!y&&(h=d*g,f=g);var b=null!==h?h:Math.max(m,Math.min(d*f,v)),_=b/f;_>d&&(b=(_=d)*f),b>p&&(b=p,_=p/f),o.width=_,o.height=b}}})},ne='<svg width="500" height="200" viewBox="0 0 500 200" preserveAspectRatio="none">\n    <defs>\n        <radialGradient id="gradient-__UID__" cx=".5" cy="1.25" r="1.15">\n            <stop offset=\'50%\' stop-color=\'#000000\'/>\n            <stop offset=\'56%\' stop-color=\'#0a0a0a\'/>\n            <stop offset=\'63%\' stop-color=\'#262626\'/>\n            <stop offset=\'69%\' stop-color=\'#4f4f4f\'/>\n            <stop offset=\'75%\' stop-color=\'#808080\'/>\n            <stop offset=\'81%\' stop-color=\'#b1b1b1\'/>\n            <stop offset=\'88%\' stop-color=\'#dadada\'/>\n            <stop offset=\'94%\' stop-color=\'#f6f6f6\'/>\n            <stop offset=\'100%\' stop-color=\'#ffffff\'/>\n        </radialGradient>\n        <mask id="mask-__UID__">\n            <rect x="0" y="0" width="500" height="200" fill="url(#gradient-__UID__)"></rect>\n        </mask>\n    </defs>\n    <rect x="0" width="500" height="200" fill="currentColor" mask="url(#mask-__UID__)"></rect>\n</svg>',re=!1,oe=0,ie=function(e){return e.utils.createView({name:"image-preview-overlay",tag:"div",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;!re&&document.querySelector("base")&&(ne=ne.replace(/url\(\#/g,"url("+window.location.href.replace(window.location.hash,"")+"#"),re=!0),oe++,t.element.classList.add("filepond--image-preview-overlay-".concat(n.status)),t.element.innerHTML=ne.replace(/__UID__/g,oe)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},ae=function(){self.onmessage=function(e){createImageBitmap(e.data.message.file).then((function(t){self.postMessage({id:e.data.id,message:t},[t])}))}},ce=function(){self.onmessage=function(e){for(var t=e.data.message.imageData,n=e.data.message.colorMatrix,r=t.data,o=r.length,i=n[0],a=n[1],c=n[2],s=n[3],u=n[4],l=n[5],f=n[6],d=n[7],p=n[8],h=n[9],m=n[10],v=n[11],g=n[12],y=n[13],b=n[14],_=n[15],E=n[16],w=n[17],O=n[18],I=n[19],R=0,T=0,S=0,P=0,C=0;R<o;R+=4)T=r[R]/255,S=r[R+1]/255,P=r[R+2]/255,C=r[R+3]/255,r[R]=Math.max(0,Math.min(255*(T*i+S*a+P*c+C*s+u),255)),r[R+1]=Math.max(0,Math.min(255*(T*l+S*f+P*d+C*p+h),255)),r[R+2]=Math.max(0,Math.min(255*(T*m+S*v+P*g+C*y+b),255)),r[R+3]=Math.max(0,Math.min(255*(T*_+S*E+P*w+C*O+I),255));self.postMessage({id:e.data.id,message:t},[t.data.buffer])}},se=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},ue={1:function(){return[1,0,0,1,0,0]},2:function(e){return[-1,0,0,1,e,0]},3:function(e,t){return[-1,0,0,-1,e,t]},4:function(e,t){return[1,0,0,-1,0,t]},5:function(){return[0,1,1,0,0,0]},6:function(e,t){return[0,1,-1,0,t,0]},7:function(e,t){return[0,-1,-1,0,t,e]},8:function(e){return[0,-1,1,0,0,e]}},le=function(e,t,n,r){-1!==r&&e.transform.apply(e,ue[r](t,n))},fe=function(e,t,n,r){t=Math.round(t),n=Math.round(n);var o=document.createElement("canvas");o.width=t,o.height=n;var i=o.getContext("2d");if(r>=5&&r<=8){var a=[n,t];t=a[0],n=a[1]}return le(i,t,n,r),i.drawImage(e,0,0,t,n),o},de=function(e){return/^image/.test(e.type)&&!/svg/.test(e.type)},pe=10,he=10,me=function(e){var t=Math.min(pe/e.width,he/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,s=0,u=0,l=0,f=0;f<c;f+=4)s+=a[f]*a[f],u+=a[f+1]*a[f+1],l+=a[f+2]*a[f+2];return{r:s=ve(s,c),g:u=ve(u,c),b:l=ve(l,c)}},ve=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},ge=function(e,t){return(t=t||document.createElement("canvas")).width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0),t},ye=function(e){var t;try{t=new ImageData(e.width,e.height)}catch(n){t=document.createElement("canvas").getContext("2d").createImageData(e.width,e.height)}return t.data.set(new Uint8ClampedArray(e.data)),t},be=function(e){return new t((function(t,n){var r=new Image;r.crossOrigin="Anonymous",r.onload=function(){t(r)},r.onerror=function(e){n(e)},r.src=e}))},_e=function(e){var n=ie(e),r=te(e),o=e.utils.createWorker,i=function(e,n,r){return new t((function(t){e.ref.imageData||(e.ref.imageData=r.getContext("2d").getImageData(0,0,r.width,r.height));var i=ye(e.ref.imageData);if(!n||20!==n.length)return r.getContext("2d").putImageData(i,0,0),t();var a=o(ce);a.post({imageData:i,colorMatrix:n},(function(e){r.getContext("2d").putImageData(e,0,0),a.terminate(),t()}),[i.data.buffer])}))},a=function(e,t){e.removeChildView(t),t.image.width=1,t.image.height=1,t._destroy()},c=function(e){var t=e.root,n=t.ref.images.shift();return n.opacity=0,n.translateY=-15,t.ref.imageViewBin.push(n),n},s=function(e){var t=e.root,n=e.props,o=e.image,i=n.id,a=t.query("GET_ITEM",{id:i});if(a){var c,s,u=a.getMetadata("crop")||{center:{x:.5,y:.5},flip:{horizontal:!1,vertical:!1},zoom:1,rotation:0,aspectRatio:null},l=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),f=!1;t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(c=a.getMetadata("markup")||[],s=a.getMetadata("resize"),f=!0);var d=t.appendChildView(t.createChildView(r,{id:i,image:o,crop:u,resize:s,markup:c,dirty:f,background:l,opacity:0,scaleX:1.15,scaleY:1.15,translateY:15}),t.childViews.length);t.ref.images.push(d),d.opacity=1,d.scaleX=1,d.scaleY=1,d.translateY=0,setTimeout((function(){t.dispatch("DID_IMAGE_PREVIEW_SHOW",{id:i})}),250)}},u=function(e){var t=e.root,n=e.props,r=t.query("GET_ITEM",{id:n.id});if(r){var o=t.ref.images[t.ref.images.length-1];o.crop=r.getMetadata("crop"),o.background=t.query("GET_IMAGE_TRANSFORM_CANVAS_BACKGROUND_COLOR"),t.query("GET_IMAGE_PREVIEW_MARKUP_SHOW")&&(o.dirty=!0,o.resize=r.getMetadata("resize"),o.markup=r.getMetadata("markup"))}},l=function(e){var t=e.root,n=e.props,r=e.action;if(/crop|filter|markup|resize/.test(r.change.key)&&t.ref.images.length){var o=t.query("GET_ITEM",{id:n.id});if(o)if(/filter/.test(r.change.key)){var a=t.ref.images[t.ref.images.length-1];i(t,r.change.value,a.image)}else if(/crop|markup|resize/.test(r.change.key)){var l=o.getMetadata("crop"),f=t.ref.images[t.ref.images.length-1];if(Math.abs(l.aspectRatio-f.crop.aspectRatio)>1e-5){var d=c({root:t});s({root:t,props:n,image:ge(d.image)})}else u({root:t,props:n})}}},f=function(e){var t=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);return!((t?parseInt(t[1]):null)<=58)&&"createImageBitmap"in window&&de(e)},d=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=URL.createObjectURL(r.file);se(o,(function(e,r){t.dispatch("DID_IMAGE_PREVIEW_CALCULATE_SIZE",{id:n,width:e,height:r})}))}},p=function(e){var t=e.root,n=e.props,r=n.id,a=t.query("GET_ITEM",r);if(a){var c=URL.createObjectURL(a.file),u=function(){be(c).then(l)},l=function(e){URL.revokeObjectURL(c);var r=(a.getMetadata("exif")||{}).orientation||-1,o=e.width,u=e.height;if(o&&u){if(r>=5&&r<=8){var l=[u,o];o=l[0],u=l[1]}var f=Math.max(1,.75*window.devicePixelRatio),d=t.query("GET_IMAGE_PREVIEW_ZOOM_FACTOR")*f,p=u/o,h=t.rect.element.width,m=t.rect.element.height,v=h,g=v*p;p>1?g=(v=Math.min(o,h*d))*p:v=(g=Math.min(u,m*d))/p;var y=fe(e,v,g,r),b=function(){var r=t.query("GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR")?me(data):null;a.setMetadata("color",r,!0),"close"in e&&e.close(),t.ref.overlayShadow.opacity=1,s({root:t,props:n,image:y})},_=a.getMetadata("filter");_?i(t,_,y).then(b):b()}};if(f(a.file)){var d=o(ae);d.post({file:a.file},(function(e){d.terminate(),e?l(e):u()}))}else u()}},h=function(e){var t=e.root,n=t.ref.images[t.ref.images.length-1];n.translateY=0,n.scaleX=1,n.scaleY=1,n.opacity=1},m=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},v=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},g=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},y=function(e){var t=e.root;t.ref.images=[],t.ref.imageData=null,t.ref.imageViewBin=[],t.ref.overlayShadow=t.appendChildView(t.createChildView(n,{opacity:0,status:"idle"})),t.ref.overlaySuccess=t.appendChildView(t.createChildView(n,{opacity:0,status:"success"})),t.ref.overlayError=t.appendChildView(t.createChildView(n,{opacity:0,status:"failure"}))};return e.utils.createView({name:"image-preview-wrapper",create:y,styles:["height"],apis:["height"],destroy:function(e){e.root.ref.images.forEach((function(e){e.image.width=1,e.image.height=1}))},didWriteView:function(e){e.root.ref.images.forEach((function(e){e.dirty=!1}))},write:e.utils.createRoute({DID_IMAGE_PREVIEW_DRAW:h,DID_IMAGE_PREVIEW_CONTAINER_CREATE:d,DID_FINISH_CALCULATE_PREVIEWSIZE:p,DID_UPDATE_ITEM_METADATA:l,DID_THROW_ITEM_LOAD_ERROR:v,DID_THROW_ITEM_PROCESSING_ERROR:v,DID_THROW_ITEM_INVALID:v,DID_COMPLETE_ITEM_PROCESSING:g,DID_START_ITEM_PROCESSING:m,DID_REVERT_ITEM_PROCESSING:m},(function(e){var t=e.root,n=t.ref.imageViewBin.filter((function(e){return 0===e.opacity}));t.ref.imageViewBin=t.ref.imageViewBin.filter((function(e){return e.opacity>0})),n.forEach((function(e){return a(t,e)})),n.length=0}))})},Ee=function(t){var n=t.addFilter,r=t.utils,o=r.Type,i=r.createRoute,a=r.isFile,c=_e(t);return n("CREATE_VIEW",(function(t){var n=t.is,r=t.view,o=t.query;if(n("file")&&o("GET_ALLOW_IMAGE_PREVIEW")){var s=function(t){var n=t.root,i=t.props.id,s=o("GET_ITEM",i);if(s&&a(s.file)&&!s.archived){var u=s.file;if(e(u)&&o("GET_IMAGE_PREVIEW_FILTER_ITEM")(s)){var l="createImageBitmap"in(window||{}),f=o("GET_IMAGE_PREVIEW_MAX_FILE_SIZE");if(!(!l&&f&&u.size>f)){n.ref.imagePreview=r.appendChildView(r.createChildView(c,{id:i}));var d=n.query("GET_IMAGE_PREVIEW_HEIGHT");d&&n.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:s.id,height:d});var p=!l&&u.size>o("GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE");n.dispatch("DID_IMAGE_PREVIEW_CONTAINER_CREATE",{id:i},p)}}}},u=function(e,t){if(e.ref.imagePreview){var n=t.id,r=e.query("GET_ITEM",{id:n});if(r){var o=e.query("GET_PANEL_ASPECT_RATIO"),i=e.query("GET_ITEM_PANEL_ASPECT_RATIO"),a=e.query("GET_IMAGE_PREVIEW_HEIGHT");if(!(o||i||a)){var c=e.ref,s=c.imageWidth,u=c.imageHeight;if(s&&u){var l=e.query("GET_IMAGE_PREVIEW_MIN_HEIGHT"),f=e.query("GET_IMAGE_PREVIEW_MAX_HEIGHT"),d=(r.getMetadata("exif")||{}).orientation||-1;if(d>=5&&d<=8){var p=[u,s];s=p[0],u=p[1]}if(!de(r.file)||e.query("GET_IMAGE_PREVIEW_UPSCALE")){var h=2048/s;s*=h,u*=h}var m=u/s,v=(r.getMetadata("crop")||{}).aspectRatio||m,g=Math.max(l,Math.min(u,f)),y=e.rect.element.width,b=Math.min(y*v,g);e.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:r.id,height:b})}}}}},l=function(e){e.root.ref.shouldRescale=!0},f=function(e){var t=e.root;"crop"===e.action.change.key&&(t.ref.shouldRescale=!0)},d=function(e){var t=e.root,n=e.action;t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldRescale=!0,t.ref.shouldDrawPreview=!0,t.dispatch("KICK")};r.registerWriter(i({DID_RESIZE_ROOT:l,DID_STOP_RESIZE:l,DID_LOAD_ITEM:s,DID_IMAGE_PREVIEW_CALCULATE_SIZE:d,DID_UPDATE_ITEM_METADATA:f},(function(e){var t=e.root,n=e.props;t.ref.imagePreview&&(t.rect.element.hidden||(t.ref.shouldRescale&&(u(t,n),t.ref.shouldRescale=!1),t.ref.shouldDrawPreview&&(requestAnimationFrame((function(){t.dispatch("DID_FINISH_CALCULATE_PREVIEWSIZE",{id:n.id})})),t.ref.shouldDrawPreview=!1)))})))}})),{options:{allowImagePreview:[!0,o.BOOLEAN],imagePreviewFilterItem:[function(){return!0},o.FUNCTION],imagePreviewHeight:[null,o.INT],imagePreviewMinHeight:[44,o.INT],imagePreviewMaxHeight:[256,o.INT],imagePreviewMaxFileSize:[null,o.INT],imagePreviewZoomFactor:[2,o.INT],imagePreviewUpscale:[!1,o.BOOLEAN],imagePreviewMaxInstantPreviewFileSize:[1e6,o.INT],imagePreviewTransparencyIndicator:[null,o.STRING],imagePreviewCalculateAverageImageColor:[!1,o.BOOLEAN],imagePreviewMarkupShow:[!0,o.BOOLEAN],imagePreviewMarkupFilter:[function(){return!0},o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:Ee})),Ee}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.isString,a=r.replaceInString,c=r.guesstimateMimeType,s=r.getExtensionFromFilename,u=r.getFilenameFromURL,l=function(e,t){return(/^[^/]+/.exec(e)||[]).pop()===t.slice(0,-2)},f=function(e,t){return e.some((function(e){return/\*$/.test(e)?l(t,e):e===t}))},d=function(e){var t="";if(i(e)){var n=u(e),r=s(n);r&&(t=c(r))}else t=e.type;return t},p=function(e,n,r){if(0===n.length)return!0;var o=d(e);return r?new t((function(t,i){r(e,o).then((function(e){f(n,e)?t():i()})).catch(i)})):f(n,o)},h=function(e){return function(t){return null!==e[t]&&(e[t]||t)}};return n("SET_ATTRIBUTE_TO_OPTION_MAP",(function(e){return Object.assign(e,{accept:"acceptedFileTypes"})})),n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;return!n("GET_ALLOW_FILE_TYPE_VALIDATION")||p(e,n("GET_ACCEPTED_FILE_TYPES"))})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(r("GET_ALLOW_FILE_TYPE_VALIDATION")){var o=r("GET_ACCEPTED_FILE_TYPES"),i=r("GET_FILE_VALIDATE_TYPE_DETECT_TYPE"),c=p(e,o,i),s=function(){var e=o.map(h(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP"))).filter((function(e){return!1!==e}));n({status:{main:r("GET_LABEL_FILE_TYPE_NOT_ALLOWED"),sub:a(r("GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES"),{allTypes:e.join(", "),allButLastType:e.slice(0,-1).join(", "),lastType:e[e.length-1]})}})};if("boolean"==typeof c)return c?t(e):s();c.then((function(){t(e)})).catch(s)}else t(e)}))})),{options:{allowFileTypeValidation:[!0,o.BOOLEAN],acceptedFileTypes:[[],o.ARRAY],labelFileTypeNotAllowed:["File is of invalid type",o.STRING],fileValidateTypeLabelExpectedTypes:["Expects {allButLastType} or {lastType}",o.STRING],fileValidateTypeLabelExpectedTypesMap:[{},o.OBJECT],fileValidateTypeDetectType:[null,o.FUNCTION]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e=function(e){var n=e.addFilter,r=e.utils,o=r.Type,i=r.replaceInString,a=r.toNaturalFileSize;return n("ALLOW_HOPPER_ITEM",(function(e,t){var n=t.query;if(!n("GET_ALLOW_FILE_SIZE_VALIDATION"))return!0;var r=n("GET_MAX_FILE_SIZE");if(null!==r&&e.size>=r)return!1;var o=n("GET_MIN_FILE_SIZE");return!(null!==o&&e.size<=o)})),n("LOAD_FILE",(function(e,n){var r=n.query;return new t((function(t,n){if(!r("GET_ALLOW_FILE_SIZE_VALIDATION"))return t(e);var o=r("GET_FILE_VALIDATE_SIZE_FILTER");if(o&&!o(e))return t(e);var c=r("GET_MAX_FILE_SIZE");if(null!==c&&e.size>=c)n({status:{main:r("GET_LABEL_MAX_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_FILE_SIZE"),{filesize:a(c)})}});else{var s=r("GET_MIN_FILE_SIZE");if(null!==s&&e.size<=s)n({status:{main:r("GET_LABEL_MIN_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MIN_FILE_SIZE"),{filesize:a(s)})}});else{var u=r("GET_MAX_TOTAL_FILE_SIZE");if(null!==u&&r("GET_ACTIVE_ITEMS").reduce((function(e,t){return e+t.fileSize}),0)>u)return void n({status:{main:r("GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED"),sub:i(r("GET_LABEL_MAX_TOTAL_FILE_SIZE"),{filesize:a(u)})}});t(e)}}}))})),{options:{allowFileSizeValidation:[!0,o.BOOLEAN],maxFileSize:[null,o.INT],minFileSize:[null,o.INT],maxTotalFileSize:[null,o.INT],fileValidateSizeFilter:[null,o.FUNCTION],labelMinFileSizeExceeded:["File is too small",o.STRING],labelMinFileSize:["Minimum file size is {filesize}",o.STRING],labelMaxFileSizeExceeded:["File is too large",o.STRING],labelMaxFileSize:["Maximum file size is {filesize}",o.STRING],labelMaxTotalFileSizeExceeded:["Maximum total size exceeded",o.STRING],labelMaxTotalFileSize:["Maximum total file size is {filesize}",o.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:e})),e}()}).call(this,n(11))},function(e,t,n){(function(t){e.exports=function(){"use strict";var e={type:"spring",stiffness:.5,damping:.45,mass:10},n=function(t){return t.utils.createView({name:"file-poster",tag:"div",ignoreRect:!0,create:function(e){var t=e.root;t.ref.image=document.createElement("img"),t.element.appendChild(t.ref.image)},write:t.utils.createRoute({DID_FILE_POSTER_LOAD:function(e){var t=e.root,n=e.props,r=n.id,o=t.query("GET_ITEM",{id:n.id});if(o){var i=o.getMetadata("poster");t.ref.image.src=i,t.dispatch("DID_FILE_POSTER_DRAW",{id:r})}}}),mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:e,scaleY:e,opacity:{type:"tween",duration:750}}}})},r=function(e,t){t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0)},o=function(e){return e.utils.createView({name:"file-poster-overlay",tag:"canvas",ignoreRect:!0,create:function(e){var t=e.root,n=e.props;r(n.template,t.element)},mixins:{styles:["opacity"],animations:{opacity:{type:"spring",mass:25}}}})},i=function(e,t){var n=new Image;n.onload=function(){var e=n.naturalWidth,r=n.naturalHeight;n=null,t(e,r)},n.src=e},a=function(e){return-.5*(Math.cos(Math.PI*e)-1)},c=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:a,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:10,i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,c=1-i,s=t.join(","),u=0;u<=o;u++){var l=u/o,f=i+c*l;e.addColorStop(f,"rgba(".concat(s,", ").concat(r(l)*n,")"))}},s=10,u=10,l=function(e){var t=Math.min(s/e.width,u/e.height),n=document.createElement("canvas"),r=n.getContext("2d"),o=n.width=Math.ceil(e.width*t),i=n.height=Math.ceil(e.height*t);r.drawImage(e,0,0,o,i);var a=null;try{a=r.getImageData(0,0,o,i).data}catch(e){return null}for(var c=a.length,l=0,d=0,p=0,h=0;h<c;h+=4)l+=a[h]*a[h],d+=a[h+1]*a[h+1],p+=a[h+2]*a[h+2];return{r:l=f(l,c),g:d=f(d,c),b:p=f(p,c)}},f=function(e,t){return Math.floor(Math.sqrt(e/(t/4)))},d=function(e,t,n,r,o){e.width=t,e.height=n;var i=e.getContext("2d"),a=.5*t,s=i.createRadialGradient(a,n+110,n-100,a,n+110,n+100);c(s,r,o,void 0,8,.4),i.save(),i.translate(.5*-t,0),i.scale(2,1),i.fillStyle=s,i.fillRect(0,0,t,n),i.restore()},p="undefined"!=typeof navigator,h=500,m=200,v=p&&document.createElement("canvas"),g=p&&document.createElement("canvas"),y=p&&document.createElement("canvas");p&&(d(v,h,m,[40,40,40],.85),d(g,h,m,[196,78,71],1),d(y,h,m,[54,151,99],1));var b=function(e,n){return new t((function(t,r){var o=new Image;"string"==typeof crossOrigin&&(o.crossOrigin=n),o.onload=function(){t(o)},o.onerror=function(e){r(e)},o.src=e}))},_=function(e){var t=o(e),r=function(e){var t=e.root,n=e.props.id,r=t.query("GET_ITEM",n);if(r){var o=r.getMetadata("poster"),a=function(e){var o=t.query("GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR")?l(e):null;r.setMetadata("color",o,!0),t.dispatch("DID_FILE_POSTER_LOAD",{id:n,data:e})};i(o,(function(e,r){t.dispatch("DID_FILE_POSTER_CALCULATE_SIZE",{id:n,width:e,height:r}),b(o,t.query("GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE")).then(a)}))}},a=function(e){e.root.ref.overlayShadow.opacity=1},c=function(e){var t=e.root.ref.image;t.scaleX=1,t.scaleY=1,t.opacity=1},s=function(e){var t=e.root;t.ref.overlayShadow.opacity=1,t.ref.overlayError.opacity=0,t.ref.overlaySuccess.opacity=0},u=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlayError.opacity=1},f=function(e){var t=e.root;t.ref.overlayShadow.opacity=.25,t.ref.overlaySuccess.opacity=1},d=function(r){var o=r.root,i=r.props,a=n(e);o.ref.image=o.appendChildView(o.createChildView(a,{id:i.id,scaleX:1.25,scaleY:1.25,opacity:0})),o.ref.overlayShadow=o.appendChildView(o.createChildView(t,{template:v,opacity:0})),o.ref.overlaySuccess=o.appendChildView(o.createChildView(t,{template:y,opacity:0})),o.ref.overlayError=o.appendChildView(o.createChildView(t,{template:g,opacity:0}))};return e.utils.createView({name:"file-poster-wrapper",create:d,write:e.utils.createRoute({DID_FILE_POSTER_LOAD:a,DID_FILE_POSTER_DRAW:c,DID_FILE_POSTER_CONTAINER_CREATE:r,DID_THROW_ITEM_LOAD_ERROR:u,DID_THROW_ITEM_PROCESSING_ERROR:u,DID_THROW_ITEM_INVALID:u,DID_COMPLETE_ITEM_PROCESSING:f,DID_START_ITEM_PROCESSING:s,DID_REVERT_ITEM_PROCESSING:s})})},E=function(e){var t=e.addFilter,n=e.utils,r=n.Type,o=n.createRoute,i=_(e);return t("CREATE_VIEW",(function(e){var t=e.is,n=e.view,r=e.query;if(t("file")&&r("GET_ALLOW_FILE_POSTER")){var a=function(e){var t=e.root,n=e.props;s(t,n)},c=function(e){var t=e.root,n=e.props,r=e.action;/poster/.test(r.change.key)&&s(t,n)},s=function(e,t){var o=t.id,a=r("GET_ITEM",o);a&&a.getMetadata("poster")&&!a.archived&&r("GET_FILE_POSTER_FILTER_ITEM")(a)&&(e.ref.filePoster&&n.removeChildView(e.ref.filePoster),e.ref.filePoster=n.appendChildView(n.createChildView(i,{id:o})),e.dispatch("DID_FILE_POSTER_CONTAINER_CREATE",{id:o}))},u=function(e){var t=e.root,n=e.action;t.ref.filePoster&&(t.ref.imageWidth=n.width,t.ref.imageHeight=n.height,t.ref.shouldUpdatePanelHeight=!0,t.dispatch("KICK"))},l=function(e){var t=e.root,n=t.query("GET_FILE_POSTER_HEIGHT");if(n)return n;var r=t.query("GET_FILE_POSTER_MIN_HEIGHT"),o=t.query("GET_FILE_POSTER_MAX_HEIGHT");if(r&&t.ref.imageHeight<r)return r;var i=t.rect.element.width*(t.ref.imageHeight/t.ref.imageWidth);return r&&i<r?r:o&&i>o?o:i};n.registerWriter(o({DID_LOAD_ITEM:a,DID_FILE_POSTER_CALCULATE_SIZE:u,DID_UPDATE_ITEM_METADATA:c},(function(e){var t=e.root,n=e.props;t.ref.filePoster&&(t.rect.element.hidden||t.ref.shouldUpdatePanelHeight&&(t.dispatch("DID_UPDATE_PANEL_HEIGHT",{id:n.id,height:l({root:t})}),t.ref.shouldUpdatePanelHeight=!1))})))}})),{options:{allowFilePoster:[!0,r.BOOLEAN],filePosterHeight:[null,r.INT],filePosterMinHeight:[null,r.INT],filePosterMaxHeight:[null,r.INT],filePosterFilterItem:[function(){return!0},r.FUNCTION],filePosterCalculateAverageImageColor:[!1,r.BOOLEAN],filePosterCrossOriginAttributeValue:["Anonymous",r.STRING]}}};return"undefined"!=typeof window&&void 0!==window.document&&document.dispatchEvent(new CustomEvent("FilePond:pluginloaded",{detail:E})),E}()}).call(this,n(11))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentLightbox}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentLightbox=function(_OpenStadComponent){_inherits(OpenStadComponentLightbox,_OpenStadComponent);var _super=_createSuper(OpenStadComponentLightbox);function OpenStadComponentLightbox(e){var t;return _classCallCheck(this,OpenStadComponentLightbox),(t=_super.call(this,e)).state={images:[],startIndex:0},t.recalcSizes=t.recalcSizes.bind(_assertThisInitialized(t)),t}return _createClass(OpenStadComponentLightbox,[{key:"componentDidMount",value:function(e,t){var n=this;n.showLightBoxListener=function(e){n.showLightbox(e.detail)},document.addEventListener("osc-show-light-box",n.showLightBoxListener),document.body.appendChild(this.instance)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-show-light-box",this.showLightBoxListener)}},{key:"showLightbox",value:function showLightbox(data){var self=this,aspectRatio;try{aspectRatio=eval(data.aspectRatio.replace&&data.aspectRatio.replace("x","/"))}catch(e){}"number"!=typeof aspectRatio&&(aspectRatio=16/9),self.setState({images:data.images,startIndex:data.startIndex,aspectRatio:aspectRatio},(function(){self.instance.style.display="block",self.recalcSizes()})),window.addEventListener("resize",self.recalcSizes)}},{key:"hideLightbox",value:function(){this.instance.style.display="none",window.removeEventListener("resize",this.recalcSizes)}},{key:"showImage",value:function(e,t){e.stopPropagation(),this.mainImage.src=t}},{key:"recalcSizes",value:function(){var e=this;if(e.mainContainer){var t=e.mainContainer.offsetWidth,n=e.mainContainer.offsetHeight;if(t/n>e.state.aspectRatio){var r=.8*n;e.mainImageContainer.style.height=r+"px",e.mainImageContainer.style.width=e.state.aspectRatio*r+"px",e.mainImageContainer.style.top=(n-r)/2+"px",e.mainImageContainer.style.left=(t-e.state.aspectRatio*r)/2+"px"}else{var o=t;e.mainImageContainer.style.width=o+"px",e.mainImageContainer.style.height=1/e.state.aspectRatio*o+"px",e.mainImageContainer.style.top=(n-1/e.state.aspectRatio*o)/2+"px",e.mainImageContainer.style.left=0}e.mainImage.style.width=e.mainImageContainer.style.width,e.mainImage.style.height=e.mainImageContainer.style.height;var i=e.state.aspectRatio*e.navigationContainer.offsetHeight,a=e.state.images.length*i+20*e.state.images.length;a>e.navigationContainer.offsetWidth&&(a=e.navigationContainer.offsetWidth,i=a/e.state.images.length-20),e.navigationContainer.style.width=a+"px",e.state.images.map((function(t,n){var r=parseInt(i);e["lighbox-image-container-".concat(n)].style.width=r+"px",e["lighbox-image-container-".concat(n)].style.height=parseInt(1/e.state.aspectRatio*r)+"px",e["lighbox-image-".concat(n)].style.width=e["lighbox-image-container-".concat(n)].style.width,e["lighbox-image-".concat(n)].style.height=e["lighbox-image-container-".concat(n)].style.height}))}}},{key:"getImageSrc",value:function(e){var t=e;return"object"==_typeof(e)&&e.src&&(t=e.src),t}},{key:"render",value:function(){var e=this,t=this;return React.createElement("div",{className:"osc-lightbox",onClick:function(){e.hideLightbox()},ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-close-button",onClick:function(e){return t.hideLightbox(e)}}),React.createElement("div",{className:"osc-lightbox-main-container",ref:function(e){return t.mainContainer=e}},React.createElement("div",{className:"osc-image-container",ref:function(e){return t.mainImageContainer=e}},React.createElement("img",{src:t.state.images[t.state.startIndex]&&t.getImageSrc(t.state.images[t.state.startIndex]),ref:function(e){return t.mainImage=e}}))),React.createElement("div",{className:"osc-lightbox-navigation-container"},React.createElement("div",{className:"osc-lightbox-navigation",ref:function(e){return t.navigationContainer=e}},t.state.images.map((function(e,n){return React.createElement("div",{className:"osc-image-container",style:{backgroundImage:"url(".concat(t.getImageSrc(e),")")},onClick:function(n){return t.showImage(n,t.getImageSrc(e))},key:"lighbox-image-container-".concat(n),ref:function(e){return t["lighbox-image-container-".concat(n)]=e}},React.createElement("img",{src:t.getImageSrc(e),ref:function(e){return t["lighbox-image-".concat(n)]=e}}))})))))}}]),OpenStadComponentLightbox}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return OpenStadComponentNLMap}));var merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(3),merge__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(merge__WEBPACK_IMPORTED_MODULE_0__),_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(114);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var OpenStadComponentNLMap=function(_OpenStadComponent){_inherits(OpenStadComponentNLMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentNLMap);function OpenStadComponentNLMap(e,t){var n;_classCallCheck(this,OpenStadComponentNLMap);var r=_assertThisInitialized(n=_super.call(this,e,t,{style:"standaard",marker:!1,search:!1,center:{latitude:52.37104644463586,longitude:4.900402911007405},zoom:14,zoomposition:"bottomleft",disableDefaultUI:!0,polygon:null,autoZoomAndCenter:!1}));switch(r.config.target=r.divId,r._loadedFiles=0,r.files=[{type:"css",href:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"},{type:"script",src:"https://unpkg.com/leaflet@1.0.3/dist/leaflet.js"}],r.config.variant){case"amaps":r.files.push({type:"script",src:"https://map.data.amsterdam.nl/dist/amaps.iife.js"});break;default:r.files.push({type:"css",href:"https://nlmaps.nl/dist/assets/css/nlmaps.css"}),r.files.push({type:"script",src:"https://nlmaps.nl/dist/nlmaps.iife.js"})}return r.files.push({type:"css",href:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css"}),r.files.push({type:"script",src:"https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"}),r.markers=r.config.markers||[],n}return _createClass(OpenStadComponentNLMap,[{key:"componentDidMount",value:function(e,t){var n=this;n.loadNextFile((function(){n.createMap(),n.mapIsReady=!0;var e=new CustomEvent("osc-map-is-ready",{detail:{id:n.divId}});document.dispatchEvent(e)}))}},{key:"loadNextFile",value:function(e){var t,n=this,r=n.files[n._loadedFiles];r&&("script"===r.type&&((t=document.createElement("script")).src=r.src,t.async=!0),"css"===r.type&&((t=document.createElement("link")).href=r.href,t.rel="stylesheet"),t&&(t.onload=function(){n.loadNextFile(e)},this.instance.appendChild(t)));n._loadedFiles==n.files.length&&e(),n._loadedFiles++}},{key:"createMap",value:function createMap(){var self=this;switch(self.config.variant){case"amaps":self.map=amaps.createMap(_objectSpread({},self.config));break;default:self.map=nlmaps.createMap(self.config)}if(0==self.config.zoomControl&&self.map.removeControl(self.map.zoomControl),self.config.clustering&&self.config.clustering.isActive&&L.markerClusterGroup){var iconCreateFunction=self.config.clustering.iconCreateFunction||_lib_amaps_cluster_icon_js__WEBPACK_IMPORTED_MODULE_2__.a.bind(self);iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction)),self.markerClusterGroup=L.markerClusterGroup({iconCreateFunction:iconCreateFunction,showCoverageOnHover:self.config.clustering.showCoverageOnHover,maxClusterRadius:self.config.clustering.maxClusterRadius||80}),self.markerClusterGroup.on("clusterclick",self.onClusterClick),self.markerClusterGroup.on("animationend",self.onClusterAnimationEnd),self.map.addLayer(self.markerClusterGroup)}if(self.map.on("click",self.onMapClick),self.config.polygon&&self.createCutoutPolygon(self.config.polygon),self.markers.length&&self.markers.forEach((function(e){self.addMarker(e)})),self.config.autoZoomAndCenter){var centerOn="polygon"==self.config.autoZoomAndCenter&&self.config.polygon||self.markers&&self.markers.length&&self.markers;self.editorMarker&&(centerOn=self.editorMarker.position?[self.editorMarker]:self.config.polygon),centerOn&&self.setBoundsAndCenter(centerOn)}}},{key:"addMarkers",value:function(e){var t=this;e.forEach((function(e){t.addMarker(e)}))}},{key:"addMarker",value:function addMarker(markerData){var self=this,icon=markerData.icon,marker;if(!icon){var iconCreateFunction=self.config.iconCreateFunction;iconCreateFunction&&"string"==typeof iconCreateFunction&&(iconCreateFunction=eval(iconCreateFunction),icon=iconCreateFunction())}marker=icon?L.marker([markerData.lat,markerData.lng],{icon:icon}):L.marker([markerData.lat,markerData.lng]),marker.visible=!0,marker.data=markerData.data,marker.doNotCluster=markerData.doNotCluster,markerData.href&&(markerData.onClick=function(){document.location.href=markerData.href});var onClick=self.onMarkerClick;return onClick&&("string"==typeof onClick&&(onClick=eval(onClick)),marker.on("click",onClick)),self.markerClusterGroup&&!markerData.doNotCluster?self.markerClusterGroup.addLayer(marker):self.map.addLayer(marker),self.markers.push(marker),marker}},{key:"removeMarker",value:function(e){if(e){var t=this.markers.indexOf(e);t>-1&&(this.markers.splice(t,1),this.map.removeLayer(e),this.markerClusterGroup.removeLayer(e))}}},{key:"updateMarker",value:function(e,t){if(t.location){var n=new L.LatLng(t.location.lat,t.location.lng);e.setLatLng(n)}}},{key:"createClusterIcon",value:function(e){var t=e.getChildCount();return L.divIcon({html:t,className:"osc-nlmap-icon-cluster",iconSize:L.point(20,20),iconAnchor:[20,10]})}},{key:"createCutoutPolygon",value:function(e){var t=L.polygon(e).getBounds().getCenter(),n=0,r=0;e.forEach((function(e,o){var i=Math.sin(e.lng-t.lng)*Math.cos(e.lat),a=Math.cos(t.lat)*Math.sin(e.lat)-Math.sin(t.lat)*Math.cos(e.lat)*Math.cos(e.lng-t.lng),c=180*Math.atan2(i,a)/Math.PI;45-c<n&&(n=45-c,r=o)}));var o=e.slice(0,r),i=e.slice(r,e.length);e=i.concat(o);var a=[{lat:-85,lng:-179.99},{lat:-85,lng:0},{lat:-85,lng:179.99},{lat:0,lng:179.99},{lat:85,lng:179.99},{lat:85,lng:0},{lat:85,lng:-179.99},{lat:85,lng:-179.99},{lat:0,lng:-179.99}],c=merge__WEBPACK_IMPORTED_MODULE_0___default()({color:"#d00",fillColor:"#000",fillOpacity:.15},this.config.polygonStyle),s=L.polygon([a,e],c);return this.map.addLayer(s),s}},{key:"removePolygon",value:function(e){e&&this.map.removeLayer(e)}},{key:"setBoundsAndCenter",value:function(e){var t=this;if(Array.isArray(e)){var n=[];if(e.forEach((function(e){e._latlng?e=e._latlng:e.position&&(e=e.position.coordinates?{lat:e.position.coordinates[0],lng:e.position.coordinates[1]}:e.position),n.push(e)})),1==n.length)t.map.panTo(new L.LatLng(n[0].lat,n[0].lng));else{var r=L.latLngBounds(n);t.map.fitBounds(r)}}else t.map.panTo(new L.LatLng(t.config.center.latitude,t.config.center.longitude))}},{key:"showMarkers",value:function(e){var t=this;e.forEach((function(e){t.showMarker(e)}))}},{key:"showMarker",value:function(e){var t=this;e.visible=!0,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.addLayer(e):e.addTo(t.map)}},{key:"hideMarkers",value:function(e){var t=this;e.forEach((function(e){t.hideMarker(e)}))}},{key:"hideMarker",value:function(e){var t=this;e.visible=!1,t.markerClusterGroup&&!e.doNotCluster?t.markerClusterGroup.removeLayer(e):e.remove(t.map)}},{key:"setFilter",value:function(e){this.filterFunction=e,this.applyFilter()}},{key:"applyFilter",value:function(){var e=this;e.filterFunction?e.markers.forEach((function(t){e.filterFunction(t)?e.showMarker(t):e.hideMarker(t)})):e.markers.forEach((function(t){e.showMarker(t)}))}},{key:"isPointInPolygon",value:function(e,t){if(!e)return!1;if(!t)return!0;for(var n=e.lat,r=e.lng,o=!1,i=0,a=t.length-1;i<t.length;a=i++){var c=t[i].lat,s=t[i].lng,u=t[a].lat,l=t[a].lng;s>r!=l>r&&n<(u-c)*(r-s)/(l-s)+c&&(o=!o)}return o}},{key:"getPointInfo",value:function(e,t,n){var r="https://geodata.nationaalgeoregister.nl/locatieserver/v3/free?lat=[[lat]]5&lon=[[lng]]&fq=type:adres&rows=1".replace(/\[\[lat\]\]/,(e=e||{}).lat).replace(/\[\[lng\]\]/,e.lng);fetch(r).then((function(e){if(!e.ok)throw Error(e);return e.json()})).then((function(r){var o=r.response&&r.response.docs&&r.response.docs[0];if(!o)throw new Error("Niets gevonden");var i={_display:"".concat(o.straatnaam," ").concat(o.huisnummer)};return i.lat=e.lat,i.lng=e.lng,n?n(i,t):i})).catch((function(e){console.log("Zoek adres: niet goed"),console.log(e),n&&n({},t)}))}},{key:"onMapClick",value:function(e){var t=new CustomEvent("osc-map-click",{detail:e});document.dispatchEvent(t)}},{key:"onMarkerClick",value:function(e){var t=new CustomEvent("osc-map-marker-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterClick",value:function(e){var t=new CustomEvent("osc-map-cluster-click",{detail:e});document.dispatchEvent(t)}},{key:"onClusterAnimationEnd",value:function(e){var t=new CustomEvent("osc-map-cluster-animation-end",{detail:e});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this;return React.createElement("div",{id:this.divId,className:this.props.className||"osc-nlmap",ref:function(t){return e.instance=t}},React.createElement("div",{id:this.divId+"-map"}))}}]),OpenStadComponentNLMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasDetails}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(100),_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(99),_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(115),_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(25);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasDetails=function(_OpenStadComponent){_inherits(IdeasDetails,_OpenStadComponent);var _super=_createSuper(IdeasDetails);function IdeasDetails(e){var t;return _classCallCheck(this,IdeasDetails),(t=_super.call(this,e,{siteId:null,ideaId:null,idea:{showVoteButtons:!0,showLabels:!1,allowMultipleImages:!1,shareChannelsSelection:["facebook","twitter","mail","whatsapp"],metaDataTemplate:null},argument:{isActive:!0,formIntro:"Mijn reactie op deze inzending is ...",ignoreReactionsForIdeaIds:"",closeReactionsForIdeaIds:""},poll:{canAddPolls:!1},labels:{},types:null,typeField:"typeId",typeLabel:"Thema"})).state={idea:t.props.idea,ideaId:e.idea&&e.idea.id||t.config.ideaId,showPollForm:!1},t}return _createClass(IdeasDetails,[{key:"componentDidMount",value:function(e,t){var n=this;n.reactionAddedListener=function(e){n.onReactionStored(e.detail,!0)},document.addEventListener("osc-new-reaction-stored",n.reactionAddedListener),n.reactionEditedListener=function(e){n.onReactionStored(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener),n.pollCreatedListener=function(e){n.onPollCreated(e.detail)},document.addEventListener("osc-new-poll-stored",n.pollCreatedListener),n.pollDeletedListener=function(e){n.onPollDeleted(e.detail)},document.addEventListener("osc-poll-deleted",n.pollDeletedListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.reactionAddedListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener),document.removeEventListener("osc-new-poll-stored",this.pollCreatedListener),document.removeEventListener("osc-poll-deleted",this.pollDeletedListener)}},{key:"dispatchEditIdeaButtonClick",value:function(e){if(e.stopPropagation(),this.config.editIdeaLink)document.location.href=this.config.editIdeaLink;else{var t=new window.CustomEvent("osc-edit-idea-button-click",{detail:this.state.idea});document.dispatchEvent(t)}}},{key:"showPollForm",value:function(){this.setState({showPollForm:!0})}},{key:"hidePollForm",value:function(){this.setState({showPollForm:!1})}},{key:"dispatchAddPollClick",value:function(e){e.stopPropagation(),this.showPollForm()}},{key:"onReactionStored",value:function(e,t){t&&this.state.idea.argCount++,this.setState({idea:this.state.idea})}},{key:"onReactionDeleted",value:function(e){this.state.idea.argCount--,this.setState({idea:this.state.idea})}},{key:"onPollCreated",value:function(){this.hidePollForm(),this.fetchData()}},{key:"onPollDeleted",value:function(){this.fetchData()}},{key:"fetchData",value:function(){var e=this,t=e.state.ideaId||this.state.idea&&this.state.idea.id;if(t){var n="".concat(e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(t,"?includeVoteCount=1&includeArguments=1&includeArgsCount=1&includeUser=1&includeUserVote=1");e.config.poll.canAddPolls&&(n+="&includePoll=1");var r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(e.config);fetch(n,{headers:r}).then((function(e){if(!e.ok)throw Error("Error fechting detail");return e.json()})).then((function(t){var n=t;e.setState({idea:n},(function(){_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.get("osc-reactions-login-pending")&&(window.location.hash="#reactions",_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.localStorage.set("osc-reactions-login-pending",!1))}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"deleteIdea",value:function(){var e=this,t=this;if(t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(this.state.idea||this.state.idea.id)){var n="".concat(t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(this.state.idea.id),r=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),o=this.state.idea.id;fetch(n,{method:"DELETE",headers:r}).then((function(e){if(!e.ok)throw Error("Error deleting idea");return e.json()})).then((function(t){if(e.config.afterDeleteIdeaLink)document.location.href=e.config.afterDeleteIdeaLink;else{var n=new window.CustomEvent("osc-idea-deleted",{detail:{ideaId:o}});document.dispatchEvent(n)}})).catch((function(e){console.log("Niet goed"),console.log(e)}))}}},{key:"render",value:function render(){var self=this,idea=self.state.idea;if(!idea)return null;var labelHTML=null;if(self.config.idea.showLabels){var typeId=eval("idea.".concat(self.config.typeField)),typeDef=self.config.types&&self.config.types.find((function(e){return e.id==typeId||e.value==typeId}));if(typeDef){var labelText=typeDef.label,backgroundColor=typeDef.backgroundColor,textColor=typeDef.textColor;labelHTML=React.createElement("div",{className:"osc-idea-label",style:{color:textColor,backgroundColor:backgroundColor}},labelText)}}var pollHTML=null,addPollButtonHTML=null;self.config.poll.canAddPolls&&(idea.poll||self.state.showPollForm?pollHTML=React.createElement("div",null,React.createElement("div",{id:"poll",className:"osc-poll-header"},React.createElement("h3",null,self.config.poll.title||"Poll")),React.createElement(_poll_index_jsx__WEBPACK_IMPORTED_MODULE_2__.default,{config:_objectSpread(_objectSpread(_objectSpread({},self.config),self.config.poll),{},{ideaId:self.state.ideaId}),poll:idea.poll})):idea.can&&idea.can.edit&&(addPollButtonHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchAddPollClick(e)}},"Poll toevoegen"))));var voteButtonsHTML=null;self.config.idea.showVoteButtons&&(voteButtonsHTML=React.createElement("div",{className:"osc-details-vote-buttons-container"},React.createElement("h3",null,"Likes"),React.createElement(_vote_button_jsx__WEBPACK_IMPORTED_MODULE_4__.a,{config:{text:"eens",opinion:"yes",api:this.config.api,user:this.config.user,siteId:this.config.siteId},idea:this.state.idea,name:"likebutton",value:idea.yes})));var editButtonsHTML=null;idea.can&&idea.can.edit&&(editButtonsHTML=React.createElement("div",{className:"osc-editbuttons-container"},React.createElement("button",{className:"osc-idea-details-editbutton osc-edit",onClick:function(e){return self.dispatchEditIdeaButtonClick(e)}},"Bewerk idee"),React.createElement("button",{className:"osc-idea-details-editbutton osc-delete",onClick:function(e){confirm("Weet je het zeker")&&self.deleteIdea(e)}},"Verwijder idee")));var modBreakHTML=null;idea&&idea.modBreak&&(modBreakHTML=React.createElement("div",{className:"osc-modbreak"},idea.modBreakDateHumanized,React.createElement("br",null),React.createElement("br",null),idea.modBreak));var reactionsCountHTML=null;self.config.argument.isActive&&(reactionsCountHTML=React.createElement("div",null,React.createElement("h3",null,"Reacties"),React.createElement("a",{href:"#reactions",className:"osc-no-of-reactions"},idea.argCount||0," reacties")));var reactionsHTML=null;if(self.config.argument.isActive){var config=_objectSpread({},self.config);config.argument.isActive=this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),config.argument.isClosed=this.config.argument.isClosed||this.config.argument.closeReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)"))),reactionsHTML=React.createElement("div",null,React.createElement("div",{id:"reactions",className:"osc-reactions-header"},React.createElement("h3",null,self.config.argument.title||"Reacties")),React.createElement(_reactions_index_jsx__WEBPACK_IMPORTED_MODULE_3__.default,{config:_objectSpread(_objectSpread({},self.config.argument),{},{title:void 0,api:self.config.api,user:self.config.user,siteId:self.config.siteId,ideaId:idea.id,loginUrl:self.config.loginUrl})}))}var shareButtonsHTML=null;if(self.config.idea.shareChannelsSelection.length){var facebookButtonHTML=self.config.idea.shareChannelsSelection.includes("facebook")?React.createElement("li",null,React.createElement("a",{className:"osc-share-facebook",target:"_blank",href:"https://www.facebook.com/sharer/sharer.php?u="+encodeURIComponent(document.location.href)},"Facebook")):null,twitterButtonHTML=self.config.idea.shareChannelsSelection.includes("twitter")?React.createElement("li",null,React.createElement("a",{className:"osc-share-twitter",target:"_blank",href:"https://twitter.com/intent/tweet?text="+encodeURIComponent(document.location.href)},"Twitter")):null,mailButtonHTML=self.config.idea.shareChannelsSelection.includes("mail")?React.createElement("li",null,React.createElement("a",{className:"osc-share-email",target:"_blank",href:"mailto:?subject="+encodeURIComponent(eval("idea.".concat(self.config.titleField)))+"&body="+encodeURIComponent(document.location.href)},"Email")):null,whatsappButtonHTML=self.config.idea.shareChannelsSelection.includes("whatsapp")?React.createElement("li",null,React.createElement("a",{className:"osc-share-whatsapp",target:"_blank",href:"https://wa.me/?text="+encodeURIComponent(document.location.href)},"WhatsApp")):null;shareButtonsHTML=React.createElement("div",{className:"osc-details-sharebuttons"},React.createElement("ul",null,facebookButtonHTML,twitterButtonHTML,mailButtonHTML,whatsappButtonHTML))}var authorHTML=idea.user.nickName||idea.user.fullName||idea.user.firstName+" "+idea.user.lastName;this.config.linkToUserPageUrl&&(authorHTML=React.createElement("a",{href:this.config.linkToUserPageUrl+"/"+idea.user.id,className:"osc-author-link"},authorHTML));var metaDataHTML=self.config.idea.metaDataTemplate;return metaDataHTML&&(metaDataHTML=metaDataHTML.replace(/\{createDate\}/,idea.createDateHumanized),metaDataHTML=metaDataHTML.replace(/\{theme\}/,idea.extraData.theme),metaDataHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:metaDataHTML,username:authorHTML})),React.createElement("div",{id:self.id,className:self.props.className||"osc-info-block-idea-details",ref:function(e){return self.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("div",{className:"osc-idea-details-container"},React.createElement("div",{className:"osc-idea-details"},React.createElement("h2",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-details-image-and-stats"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_5__.IdeaImage,{config:{allowMultipleImages:self.config.idea.allowMultipleImages},idea:idea})),labelHTML,shareButtonsHTML,React.createElement("div",{className:"osc-details-stats"},voteButtonsHTML,reactionsCountHTML,editButtonsHTML)),React.createElement("p",{className:""},metaDataHTML),modBreakHTML,React.createElement("p",{className:"osc-details-summary"},idea.summary),React.createElement("p",{className:"osc-details-description",dangerouslySetInnerHTML:{__html:idea.description}}),addPollButtonHTML),pollHTML,reactionsHTML,React.createElement("div",{className:"osc-bottom-spacer"})))}}]),IdeasDetails}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(26),o=function(e){return e.ideas},i=Object(r.a)([o],(function(e){return e}));Object(r.a)([o],(function(e){return e})),Object(r.a)([o],(function(e){return e}))},function(e,t,n){"use strict";e.exports=n(120)},function(e,t,n){"use strict";var r=n(91),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function s(e){return r.isMemo(e)?a:c[e.$$typeof]||o}c[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[r.Memo]=a;var u=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var c=s(t),m=s(n),v=0;v<a.length;++v){var g=a[v];if(!(i[g]||r&&r[g]||m&&m[g]||c&&c[g])){var y=d(n,g);try{u(t,g,y)}catch(e){}}}}return t}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasFilter}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasFilter=function(_OpenStadComponent){_inherits(IdeasFilter,_OpenStadComponent);var _super=_createSuper(IdeasFilter);function IdeasFilter(e){var t;return _classCallCheck(this,IdeasFilter),(t=_super.call(this,e)).doFilter=t.doFilter.bind(_assertThisInitialized(t)),t.setFilter=t.setFilter.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasFilter,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doFilter",value:function doFilter(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var fieldName=self.config.fieldName,fieldValue=eval("idea.".concat(fieldName));return fieldValue==value})),ideas}},{key:"setFilter",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-filter-onchange",{detail:{fieldName:n.config.fieldName,value:t,doFilter:n.doFilter}});document.dispatchEvent(e)}))}},{key:"render",value:function(){var e=this;if(0==e.config.showFilter)return null;var t=null;return e.config.label&&(t=React.createElement("div",{className:"osc-filter-label"},e.config.label,":")),React.createElement("div",{className:"osc-ideas-filter ".concat(e.props.className||"")},t,React.createElement("select",{value:e.state.currentValue,onChange:function(){return e.setFilter({value:e.filterSelector.value})},className:"osc-default-select",ref:function(t){return e.filterSelector=t}},e.config.filterOptions.map((function(e,t){return React.createElement("option",{value:e.value,key:"filter-option-"+t},e.label)}))))}}]),IdeasFilter}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasSearch}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasSearch=function(_OpenStadComponent){_inherits(IdeasSearch,_OpenStadComponent);var _super=_createSuper(IdeasSearch);function IdeasSearch(e){var t;return _classCallCheck(this,IdeasSearch),(t=_super.call(this,e,{placeholder:"Zoeken",fieldNames:["title","summary"],showSearch:!0,showButton:!1,showSuggestions:!1,defaultValue:""})).doSearch=t.doSearch.bind(_assertThisInitialized(t)),t.setSearch=t.setSearch.bind(_assertThisInitialized(t)),t.state={currentValue:t.config.defaultValue},t}return _createClass(IdeasSearch,[{key:"componentDidMount",value:function(e,t){this.state.currentValue&&this.setFilter({value:this.state.currentValue})}},{key:"doSearch",value:function doSearch(ideas,value){var self=this;return value=value||this.state.currentValue,ideas=ideas.filter((function(idea){var found=!1;return self.config.fieldNames.forEach((function(fieldName){var fieldValue=eval("idea.".concat(fieldName));fieldValue.match(new RegExp(value,"i"))&&(found=!0)})),found})),ideas}},{key:"setSearch",value:function(e){var t=e.value,n=this;this.setState({currentValue:t},(function(){var e=new window.CustomEvent("osc-ideas-search-onchange",{detail:{value:t,doSearch:n.doSearch}});document.dispatchEvent(e)}))}},{key:"showSuggestions",value:function(){}},{key:"hideSuggestions",value:function(){}},{key:"render",value:function(){var e=this;if(0==e.config.showSearch)return null;var t=null;e.config.label&&(t=React.createElement("div",{className:"osc-search-label"},e.config.label,":"));return React.createElement("div",{className:"osc-ideas-search ".concat(e.props.className||"")},t,null,React.createElement("input",{type:"text",value:this.state.currentValue,placeholder:e.config.placeholder,onChange:function(){return e.setSearch({value:e.searchInput.value})},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-ideas-search-input",ref:function(t){return e.searchInput=t}}),React.createElement("button",{className:"osc-ideas-search-button".concat(this.state.currentValue?" osc-active":""),onClick:function(t){return e.setSearch({value:""})},ref:function(t){return e.resetButton=t}}))}}]),IdeasSearch}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(18),o=function(t,n,r,o){return new(r||(r=e))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,c)}s((o=o.apply(t,n||[])).next())}))},i=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},a=Object(r.b)("ideas/fetchIdeas",(function(e,t){var n=t.getState;return o(void 0,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return console.log("fetch ideas async"),e=n(),[4,fetch(e.config.api+"/site/"+e.config.siteId+"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1")];case 1:return[2,t.sent().json()]}}))}))}))}).call(this,n(11))},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return E})),n.d(t,"PreviousNextButtonBlock",(function(){return E})),n.d(t,"OpenstadStore",(function(){return s.default}));n(14),n(107);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=n(42),s=(n(130),n(82)),u=n(1),l=n(90),f=n(8),d=n(24);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=v(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{})).nextAction=t.nextAction.bind(y(t)),t}return t=i,(n=[{key:"doeIets",value:function(){this.props.addIdea({id:2,name:"one more plan",images:{heading:"https://maps.googleapis.com/maps/api/streetview?size=500x500&location=52.3779893,4.8460973&heading=151.78&key=AIzaSyAU1BrnBc0QW9PDai7hpRU2yYpoGXNDnU4"},position:{lat:52.3631163,lng:4.9038573},link:"https://google.nl",status:"ACCEPTED",theme:"Lazyness",budget:15e3})}},{key:"nextAction",value:function(e){"doeIets"==e?this.doeIets():e()}},{key:"render",value:function(){var e,t,n=this,r=this.props.previousAction||this.config.previousAction,o=this.props.previousUrl||this.config.previousUrl,i=this.props.previousIsDisabled||this.config.previousIsDisabled,a=this.props.previousLabel||this.config.previousLabel;o&&(r=function(){document.location.href="".concat(o)}),r&&(e=React.createElement("div",{className:"osc-previous-button".concat(i?" osc-disabled":""),onClick:function(e){return r(e)}},a));var c=this.props.nextAction||this.config.nextAction,s=this.props.nextUrl||this.config.nextUrl,u=this.props.nextIsDisabled||this.config.nextIsDisabled,l=this.props.nextLabel||this.config.nextLabel;return s&&(c=function(){document.location.href="".concat(s)}),c&&(t=React.createElement("div",{className:"osc-next-button".concat(u?" osc-disabled":""),onClick:function(e){return n.nextAction(c)}},l)),React.createElement("div",{className:"osc-previous-next-button-block",ref:function(e){return n.instance=e}},e,"Aantal ideeen: ",n.props.ideas.length,t)}}])&&h(t.prototype,n),r&&h(t,r),i}(u.a),E=Object(c.b)((function(e){return{ideas:Object(l.a)(e)}}),(function(e){return Object(f.b)({addIdea:d.a,fetchIdeas:d.fetchIdeas},e)}),null,{forwardRef:!0})(_);E.renderElement=function(e,t,n){var r=e.attributes;a.a.render(o.a.createElement(c.a,{store:n}," ",o.a.createElement(E,{attributes:r,config:t})," "),e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return N})),n.d(t,"Reactions",(function(){return N}));n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(122),n(1)),s=n(2),u=n(5);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m(e);if(t){var o=m(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{argumentId:null,api:{url:null,headers:null},user:{},descriptionMinLength:30,descriptionMaxLength:500,requiredUserRole:"member",formIntro:"",placeholder:""})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.state={description:t.config.description||"",isValid:!1,isBusy:!1},t}return t=i,(n=[{key:"handleOnChange",value:function(e){(e=e||{}).description&&(e.isValid=this.description.isValid()),this.setState(e)}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.props.user||{};return s.a.user.hasRole(t,e)}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.description.validate({showWarning:!0})){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument").concat(e.config.argumentId?"/".concat(e.config.argumentId):""),n=s.a.api.getHeaders(e.config),r=e.config.argumentId?"PUT":"POST",o={parentId:e.config.parentId,sentiment:e.config.sentiment,description:e.state.description};fetch(t,{method:r,headers:n,body:JSON.stringify(o)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description}),e.setState({description:"",isBusy:!1,isValid:!1},(function(){if(e.description.handleOnChange({value:""}),e.config.argumentId){var n=new CustomEvent("osc-reaction-edited",{detail:t});document.dispatchEvent(n)}else{var r=new CustomEvent("osc-new-reaction-stored",{detail:t});document.dispatchEvent(r)}}))})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"render",value:function(){var e=this,t={descriptionMinLength:e.config.descriptionMinLength||30,descriptionMaxLength:e.config.descriptionMaxLength||500},n=null;e.config.formIntro&&(n=React.createElement("div",{className:"osc-intro"},e.config.formIntro));var r=null;return r=e.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(t){e.state.isBusy||e.submitForm()},className:"osc-button-blue".concat(!e.state.isValid||e.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=e.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen")),React.createElement("div",{id:e.divId,className:"",ref:function(t){return e.instance=t}},n,React.createElement(u.a.InputWithCounter,{disabled:!this.canSubmit()||null,config:{inputType:"textarea",minLength:t.descriptionMinLength,maxLength:t.descriptionMaxLength,placeholder:e.config.placeholder},value:e.state.description,onChange:function(t){return e.handleOnChange({description:t.value})},ref:function(t){return e.description=t}}),r)}}])&&f(t.prototype,n),r&&f(t,r),i}(c.a);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){_(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=R(e);if(t){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return I(this,n)}}function I(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(i,e);var t,n,r,o=O(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,ideaId:null,title:null,descriptionMinLength:30,descriptionMaxLength:500,api:{url:null,headers:null},requiredUserRole:"member"})).state={user:e.user,isMenuActive:!1,isReplyFromActive:!1,editMode:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener)}},{key:"showMenu",value:function(){this.setState({isMenuActive:!0})}},{key:"toggleReplyForm",value:function(){this.setState({isReplyFromActive:!this.state.isReplyFromActive})}},{key:"toggleEditForm",value:function(e){this.setState({editMode:!this.state.editMode})}},{key:"canEdit",value:function(){return this.props.data.can.edit}},{key:"canDelete",value:function(){return this.props.data.can.delete}},{key:"canLike",value:function(){if(this.config.isClosed)return!1;var e=this.config.requiredUserRole,t=this.props.user&&this.props.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"editor"==t||"moderator"==t||"admin"==t)||"editor"==e&&("editor"==t||"moderator"==t||"admin"==t)||"moderator"==e&&("moderator"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"canReply",value:function(){return this.props.data.can.reply}},{key:"submitDelete",value:function(){var e=this;if(!e.canDelete())return alert("U kunt deze reactie niet verwijderen");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id),n=s.a.api.getHeaders(e.config);fetch(t,{method:"DELETE",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({isDeleted:!0});var n=new CustomEvent("osc-reaction-deleted",{detail:{ideaId:e.config.ideaId}});document.dispatchEvent(n)})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"submitLike",value:function(){var e=this;if(!e.canLike())return alert("U kunt deze reactie niet liken");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/argument/").concat(e.props.data.id,"/vote"),n=s.a.api.getHeaders(e.config);fetch(t,{method:"POST",headers:n,body:JSON.stringify({})}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.setState({yes:t.yes,hasUserVoted:t.hasUserVoted})})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){this.setState({isMenuActive:!1,isReplyFromActive:!1})}},{key:"onReactionEdited",value:function(e){e.id==this.props.data.id&&this.setState({editMode:!1,isMenuActive:!1})}},{key:"render",value:function(){var e=this,t=e.props.data||{can:{}};if(t.isDeleted)return null;var n=s.a.user.hasRole(t.user,"editor")?"osc-is-admin":"",r=React.createElement("div",{className:"osc-reaction-user ".concat(n)},t.user.nickName||t.user.fullName||"".concat(t.user.firstName," ").concat(t.user.lastName)),o=null;e.canEdit()&&e.canDelete()&&(o=React.createElement("div",{className:"osc-reaction-menu".concat(e.state.isMenuActive?" osc-reaction-hamburger-active":""),onClick:function(){e.showMenu()}},React.createElement("a",{className:"osc-reaction-delete",title:"Argument verwijderen",onClick:function(){confirm("Weet je het zeker?")&&e.submitDelete()}}),React.createElement("a",{className:"osc-reaction-edit",title:"Argument bewerken",onClick:function(){return e.toggleEditForm()}})));var a=React.createElement("div",{className:"osc-reaction-description"},t.description);e.state.editMode&&(a=React.createElement("div",{className:"osc-reaction-description"},React.createElement(v,{config:b(b({},e.config),{},{description:t.description,argumentId:t.id}),user:e.state.user,ref:function(t){return e.editForm=t}})));var c=null;t.parentId||(c=React.createElement("a",{className:"osc-reaction-like-button".concat((void 0!==e.state.hasUserVoted?e.state.hasUserVoted:t.hasUserVoted)?" osc-reaction-like-button-hasvoted":""),onClick:function(){return e.submitLike()}},"Mee eens (",React.createElement("span",null,0|(void 0!==e.state.yes?e.state.yes:t.yes)),")"));var u=null,l=null;if(e.canReply()&&!e.config.isClosed&&(u=React.createElement("a",{onClick:function(){return e.toggleReplyForm()},className:"osc-reply-button"},"Reageren"),e.state.isReplyFromActive)){var f=b(b({},e.config),{},{parentId:t.id});f.formIntro="",l=React.createElement("div",{id:"osc-reaction-".concat(t.id),className:"osc-reply"},React.createElement(v,{config:f,user:e.state.user,ref:function(t){return e.editForm=t}}))}var d=null;return t.reactions&&t.reactions.length&&(d=React.createElement("ul",{className:"osc-reactions-list"},t.reactions.map((function(t){var n="osc-reaction-key-".concat(t.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(i,{config:e.config,className:"osc-reply",user:e.state.user,data:t}))})))),React.createElement("div",null,React.createElement("div",{id:"osc-reaction-".concat(t.id),className:e.props.className||"osc-reaction"},o,r,React.createElement("div",{className:"osc-reaction-date"},t.createDateHumanized),a,c,u),l,d)}}])&&E(t.prototype,n),r&&E(t,r),i}(c.a);function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){L(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function M(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=x(e);if(t){var o=x(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return A(this,n)}}function A(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var N=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(i,e);var t,n,r,o=M(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{scrollToNewReaction:!0,isClosed:!1,closedText:"De reactiemogelijkheid is gesloten",sentiment:void 0,siteId:null,ideaId:null,title:null,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",placeholder:"",formIntro:""})).state={user:t.config.user,reactions:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.fetchData()}))})),n.newReactionStoredListener=function(e){n.onNewReactionStored(e.detail)},document.addEventListener("osc-new-reaction-stored",n.newReactionStoredListener),n.reactionEditedListener=function(e){n.onReactionEdited(e.detail)},document.addEventListener("osc-reaction-edited",n.reactionEditedListener),n.reactionDeletedListener=function(e){n.onReactionDeleted(e.detail)},document.addEventListener("osc-reaction-deleted",n.reactionDeletedListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-new-reaction-stored",this.newReactionStoredListener),document.removeEventListener("osc-reaction-edited",this.reactionEditedListener),document.removeEventListener("osc-reaction-deleted",this.reactionDeletedListener)}},{key:"fetchData",value:function(e){var t=this,n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/argument?sentiment=").concat(t.config.sentiment,"&withUser=1&withUserVote=1&withVoteCount=1&includeReactionsOnReactions=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=C({},t.state);r.reactions=n,r.reactions.sort((function(e,t){return e.createdAt<t.createdAt})),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"onNewReactionStored",value:function(e){var t=this;this.fetchData((function(){t.config.scrollToNewReaction&&document.getElementById("osc-reaction-".concat(e.id))&&document.getElementById("osc-reaction-".concat(e.id)).scrollIntoView()}))}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"onReactionDeleted",value:function(e){this.fetchData()}},{key:"render",value:function(){var e=this,t=this,n=React.createElement("ul",{className:"osc-reactions-list"},t.state.reactions.map((function(e){var n="osc-reaction-key-".concat(e.id||parseInt(1e6*Math.random()));return React.createElement("li",{key:n},React.createElement(T,{config:t.config,user:t.state.user,data:C({},e)}))}))),r=t.config.title?React.createElement("h3",null,t.config.title):null,o=React.createElement(v,{config:t.config,user:t.state.user});return t.config.isClosed&&(o=t.config.closedText?React.createElement("div",{className:"osc-closed-text"},t.config.closedText):null),React.createElement("div",{id:this.id,className:t.props.className||"osc-reactions",ref:function(t){e.instance=t}},r,o,n,React.createElement("br",null),React.createElement("br",null))}}])&&D(t.prototype,n),r&&D(t,r),i}(c.a);N.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(N,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return L})),n.d(t,"Poll",(function(){return L}));n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(121),n(1)),s=n(2),u=n(5);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y(e);if(t){var o=y(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=v(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{user:{},questionMinLength:30,questionMaxLength:500,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,allowChoiceTitles:!0})).state={user:e.user,pollId:e.pollId,poll:e.poll,isBusy:!1},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?n.state.poll||n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){n.state.poll||n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({poll:{question:"",choices:{1:{},2:{}}}});var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.config.pollId,"?withUser=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=d({},t.state);r.poll=n,t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"validatedResult",value:function(){var e=this,t=e.state.poll,n=e["question-input"],r=n.validate(),o={question:n.state.value,choices:{}};return Object.keys(t.choices).forEach((function(t){var n=e["title-input-".concat(t)],i=e["description-input-".concat(t)];(n&&n.state.value||i.state.value)&&(o.choices[t]={},e.config.allowChoiceTitles&&n.state.value&&(o.choices[t].title=n.state.value,n.validate()||(r=!1)),i.state.value&&(o.choices[t].description=i.state.value,i.validate()||(r=!1)))})),r?Object.keys(o.choices).length<2?null:o:null}},{key:"handleOnChange",value:function(e){var t=d({},this.state.poll);e.choice&&(t.choices[e.choice.id]={title:this.config.allowChoiceTitles&&e.choice.title,description:e.choice.description}),e.question&&(t.question=e.question),this.setState({poll:t},(function(){}))}},{key:"addChoice",value:function(){var e=d({},this.state.poll),t=Object.keys(e.choices).sort(),n=parseInt(t[t.length-1])+1;e.choices[n]={},this.setState({poll:e})}},{key:"canSubmit",value:function(){if(this.state.poll&&this.state.poll.can)return this.state.poll.can.edit;var e=this.config.requiredUserRole,t="moderator";return("anonymous"==e?t:"member"==e&&!0)||"editor"==e&&!0||"moderator"==e&&!0||"admin"==e&&!1}},{key:"submitForm",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.validatedResult();if(t){if(!e.canSubmit())return alert("Je bent niet ingelogd");var n=!0,r="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll"),o="POST";e.state.poll&&e.state.poll.id&&(r+="/".concat(e.state.poll.id),o="PUT",n=!1);var i=s.a.api.getHeaders(e.config),a=t;fetch(r,{method:o,headers:i,body:JSON.stringify(a)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(r){var o=new CustomEvent("osc-new-poll-stored",{detail:r});n||(o=new CustomEvent("osc-poll-edited",{detail:r})),document.dispatchEvent(o),"function"==typeof e.config.onFinished&&e.config.onFinished(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}else e.setState({isBusy:!1})}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{},r=null;t.config.formIntro&&(r=React.createElement("div",{className:"osc-intro"},t.config.formIntro));var o=null;return o=t.canSubmit()?React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitForm()},className:"osc-button-blue osc-margin-left".concat(t.state.isBusy?" osc-disabled":"")},"Verzenden")):React.createElement("div",{className:"osc-align-right-container"},React.createElement("button",{className:"osc-button-blue",onClick:function(){t.config.onFinished&&t.config.onFinished()}},"Terug"),React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-reactions-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button osc-margin-left"},"Inloggen")),React.createElement("div",{id:t.divId,className:"osc-form",ref:function(e){return t.instance=e}},r,React.createElement("h4",null,"Vraag"),React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.questionMinLength,maxLength:t.config.questionMaxLength,placeholder:"Vraag"},value:n.question,onChange:function(e){return t.handleOnChange({question:e.value})},ref:function(e){return t["question-input"]=e}}),React.createElement("h4",null,"Keuzemogelijkheden"),React.createElement("ol",{className:"osc-poll-form-choices"},n&&n.choices&&Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;return t.config.allowChoiceTitles&&(o=React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.titleMinLength,maxLength:t.config.titleMaxLength,placeholder:"Titel"},value:r.title,onChange:function(n){return t.handleOnChange({choice:{id:e,title:n.value}})},ref:function(n){return t["title-input-".concat(e)]=n}})),React.createElement("li",{className:"osc-poll-form-choice",key:"osc-key-".concat(e)},o,React.createElement(u.a.InputWithCounter,{config:{inputType:"text",minLength:t.config.descriptionMinLength,maxLength:t.config.descriptionMaxLength,placeholder:"Beschrijving"},value:r.description,onChange:function(n){return t.handleOnChange({choice:{id:e,description:n.value}})},ref:function(n){return t["description-input-".concat(e)]=n}}))}))),React.createElement("a",{className:"osc-add-choice-button",onClick:function(t){return e.addChoice()}},"Nog een keuzemogelijkheid toevoegen"),o)}}])&&h(t.prototype,n),r&&h(t,r),i}(c.a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(Object(n),!0).forEach((function(t){O(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?P(e):t}function P(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(i,e);var t,n,r,o=T(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=P(t=o.call(this,e,{siteId:null,ideaId:null,title:null,titleMinLength:30,titleMaxLength:500,descriptionMinLength:30,descriptionMaxLength:500,user:null,loginUrl:"",api:{url:null,headers:null},requiredUserRole:"member",withPercentage:!0,allowChoiceTitles:!0,allowShowResultsIfNotVoted:!1}));return n.config.loginUrl=n.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),n.hideEditForm=n.hideEditForm.bind(n),n.state={user:n.config.user,poll:e.poll,pollId:e.poll&&e.poll.id||n.config.pollId,selectedChoice:null,showResult:!1,showQuestion:!1,editMode:!1,showVoteSucceeded:!1},n.state.poll&&(n.parseVoteCount(n.state.poll),n.state.poll.userVote&&(n.state.selectedChoice=n.state.poll.userVote)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.state.user&&n.state.user.role?!n.state.poll&&n.config.ideaId&&n.fetchData():s.a.user.getUser({user:n.config.user,jwt:n.config.jwt,siteId:n.config.siteId,api:n.config.api},(function(e,t){n.setState({user:t},(function(){!n.state.poll&&n.config.ideaId&&n.fetchData()}))}))}},{key:"fetchData",value:function(e){var t=this;if(!t.state.pollId)return t.setState({editMode:!0},(function(){}));var n="".concat(t.config.api&&t.config.api.url,"/api/site/").concat(t.config.siteId,"/idea/").concat(t.config.ideaId,"/poll/").concat(t.state.pollId,"?withUser=1&withUserVote=1&withVoteCount=1&withVotes=1"),r=s.a.api.getHeaders(t.config);fetch(n,{headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(n){var r=w(w({},t.state),{},{showResult:!1,showQuestion:!1});r.poll=n,r.pollId=n.id,t.parseVoteCount(r.poll),r.poll.userVote&&(r.selectedChoice=r.poll.userVote),t.setState(r,(function(){if(e)return e()}))})).catch((function(e){console.log(e),e.then((function(e){return console.log(e)}))}))}},{key:"parseVoteCount",value:function(e){e.voteCount&&Object.keys(e.choices).sort().forEach((function(t){var n=e.choices[t];n.votesAbs=e.voteCount[t],n.votesPrc=parseInt(e.voteCount[t]/e.voteCount.total*100),n.votesPrc=n.votesPrc||0}))}},{key:"showEditForm",value:function(){this.setState({editMode:!0})}},{key:"hideEditForm",value:function(){this.setState({editMode:!1},(function(){this.fetchData()}))}},{key:"setShowResult",value:function(){this.setState({showResult:!0})}},{key:"setShowQuestion",value:function(){this.setState({showQuestion:!0})}},{key:"selectChoice",value:function(e){this.setState({selectedChoice:e.choice})}},{key:"onReactionEdited",value:function(e){this.fetchData()}},{key:"isValid",value:function(){return!!this.state.selectedChoice}},{key:"canSubmit",value:function(){var e=this.config.requiredUserRole,t=this.state.user&&this.state.user.role;return"anonymous"==e&&t||"member"==e&&("member"==t||"admin"==t)||"admin"==e&&"admin"==t}},{key:"submitVote",value:function(){var e=this;e.setState({isBusy:!0},(function(){if(e.isValid()){if(!e.canSubmit())return alert("Je bent niet ingelogd");var t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id,"/vote"),n=s.a.api.getHeaders(e.config),r={choice:e.state.selectedChoice};fetch(t,{method:"POST",headers:n,body:JSON.stringify(r)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){e.fetchData((function(){e.setState({isBusy:!1,showVoteSucceeded:!0},(function(){var e=new CustomEvent("osc-poll-voted",{detail:t});document.dispatchEvent(e)}))})),"function"==typeof e.config.onSubmit&&e.config.onSubmit({description:e.state.description})})).catch((function(t){t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1,isValid:!1})}))}else e.setState({isBusy:!1,isValid:!1})}))}},{key:"deletePoll",value:function(){var e=this;e.setState({isBusy:!0},(function(){var t=e.state.poll;if(!(t&&t.can&&t.can.delete))return alert("U kunt deze poll niet verwijderen");if(!t||!t.id)return alert("U kunt deze poll niet verwijderen");var n="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/idea/").concat(e.config.ideaId,"/poll/").concat(e.state.poll.id),r=s.a.api.getHeaders(e.config);fetch(n,{method:"DELETE",headers:r}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){var t=new CustomEvent("osc-poll-deleted",{detail:e});document.dispatchEvent(t)})).catch((function(t){console.log(t),t.then((function(e){return alert(e),console.log(e)})),e.setState({isBusy:!1})}))}))}},{key:"render",value:function(){var e=this,t=this,n=t.state.poll||{};if(t.state.editMode)return React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},React.createElement(b,{config:w(w({},t.config),{},{onFinished:t.hideEditForm}),pollId:t.state.poll&&t.state.poll.id,poll:t.state.poll,user:t.state.user}));var r=null;if(n&&n.choices&&!n.userVote||t.state.showQuestion){var o={name:"pollChoice",choices:[]};Object.keys(n.choices).sort().map((function(e){var r=t.config.allowChoiceTitles&&n.choices[e].title?"<h4>".concat(n.choices[e].title,"</h4>"):"";r+=n.choices[e].description||"",o.choices.push({dangerousDescription:r,value:e})}));var i=null;i=t.canSubmit()?React.createElement("button",{onClick:function(e){t.state.isBusy||t.submitVote()},className:"osc-button-blue".concat(t.isValid()?"":" osc-disabled")},"Stemmen"):React.createElement("button",{onClick:function(){s.a.localStorage.set("osc-poll-login-pending",!0),document.location.href=t.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen");var a=null;!t.config.allowShowResultsIfNotVoted||n.userVote||t.state.showResult||(a=React.createElement("a",{className:"osc-show-result-button",onClick:function(t){return e.setShowResult()}},"Resultaat bekijken")),r=React.createElement("div",{className:"osc-poll-question osc-form"},React.createElement(u.a.Radios,{config:o,value:t.state.selectedChoice,onChange:function(e){return t.selectChoice({choice:e.value})},ref:function(e){return t.description=e}}),React.createElement("div",{className:"osc-poll-question-buttons"},i,a))}var c=null;if(n&&(n.userVote||t.state.showResult)){var l=null;t.state.showQuestion||n&&n.choices&&!n.userVote||(l=React.createElement("a",{className:"osc-show-question-button",onClick:function(t){return e.setShowQuestion()}},"Stem aanpassen"));var f=null;if(n.voteCount&&n.voteCount.total){var d=1==n.voteCount.total?"stem":"stemmen";f=React.createElement("div",null,"Totaal ",n.voteCount.total," ",d,React.createElement("br",null),React.createElement("br",null))}c=React.createElement("ul",{className:"osc-choices"},Object.keys(n.choices).sort().map((function(e){var r=n.choices[e],o=null;t.config.allowChoiceTitles&&r.title&&(o=React.createElement("h4",null,r.title));var i=null;r.description&&(i=React.createElement("div",null,r.description));var a=null;t.config.withPercentage&&(a=React.createElement("div",{className:"osc-percentage"},r.votesPrc,"%"));var c=React.createElement("div",{className:"osc-choice-default"},o,i,React.createElement("div",{className:"osc-choice-bar".concat(t.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:{width:(r.votesPrc||0)+"%"}})),a);return React.createElement("li",{className:"osc-choice",key:"osc-key-".concat(e)},c)})),f,l)}var p=null;t.state.poll&&t.state.poll.can&&t.state.poll.can.edit&&(p=React.createElement("div",{className:"osc-editbuttons"},React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk poll"),React.createElement("button",{className:"osc-editbutton osc-delete",onClick:function(e){confirm("Weet u het zeker")&&t.deletePoll()}},"Verwijder poll")));var h=null;return t.state.showVoteSucceeded&&(h=React.createElement("div",{className:"osc-vote-succeeded"},"Uw stem is opgeslagen")),React.createElement("div",{id:this.id,className:t.props.className||"osc-poll",ref:function(t){e.instance=t}},p,h,React.createElement("h4",null,n.question),r,c,React.createElement("br",null),React.createElement("br",null))}}])&&I(t.prototype,n),r&&I(t,r),i}(c.a);L.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(L,{attributes:n,config:t}),e)}},function(e,t,n){},function(e,t,n){(function(e){!function(t){"use strict";var n=function(e){return e instanceof HTMLElement},r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=Object.assign({},e),o=[],i=[],a=function(){var e=[].concat(i);i.length=0,e.forEach((function(e){var t=e.type,n=e.data;c(t,n)}))},c=function(e,t,n){!n||document.hidden?(f[e]&&f[e](t),o.push({type:e,data:t})):i.push({type:e,data:t})},s=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return l[e]?(t=l)[e].apply(t,r):null},u={getState:function(){return Object.assign({},r)},processActionQueue:function(){var e=[].concat(o);return o.length=0,e},processDispatchQueue:a,dispatch:c,query:s},l={};t.forEach((function(e){l=Object.assign({},e(r),{},l)}));var f={};return n.forEach((function(e){f=Object.assign({},e(c,s,r),{},f)})),u},o=function(e,t,n){"function"!=typeof n?Object.defineProperty(e,t,Object.assign({},n)):e[t]=n},i=function(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])},a=function(e){var t={};return i(e,(function(n){o(t,n,e[n])})),t},c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(null===n)return e.getAttribute(t)||e.hasAttribute(t);e.setAttribute(t,n)},s="http://www.w3.org/2000/svg",u=["svg","path"],l=function(e){return u.includes(e)},f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"==typeof t&&(n=t,t=null);var r=l(e)?document.createElementNS(s,e):document.createElement(e);return t&&(l(e)?c(r,"class",t):r.className=t),i(n,(function(e,t){c(r,e,t)})),r},d=function(e){return function(t,n){void 0!==n&&e.children[n]?e.insertBefore(t,e.children[n]):e.appendChild(t)}},p=function(e,t){return function(e,n){return void 0!==n?t.splice(n,0,e):t.push(e),e}},h=function(e,t){return function(n){return t.splice(t.indexOf(n),1),n.element.parentNode&&e.removeChild(n.element),n}},m="undefined"!=typeof window&&void 0!==window.document,v=function(){return m},g="children"in(v()?f("svg"):{})?function(e){return e.children.length}:function(e){return e.childNodes.length},y=function(e,t,n,r){var o=n[0]||e.left,i=n[1]||e.top,a=o+e.width,c=i+e.height*(r[1]||1),s={element:Object.assign({},e),inner:{left:e.left,top:e.top,right:e.right,bottom:e.bottom},outer:{left:o,top:i,right:a,bottom:c}};return t.filter((function(e){return!e.isRectIgnored()})).map((function(e){return e.rect})).forEach((function(e){b(s.inner,Object.assign({},e.inner)),b(s.outer,Object.assign({},e.outer))})),_(s.inner),s.outer.bottom+=s.element.marginBottom,s.outer.right+=s.element.marginRight,_(s.outer),s},b=function(e,t){t.top+=e.top,t.right+=e.left,t.bottom+=e.top,t.left+=e.left,t.bottom>e.bottom&&(e.bottom=t.bottom),t.right>e.right&&(e.right=t.right)},_=function(e){e.width=e.right-e.left,e.height=e.bottom-e.top},E=function(e){return"number"==typeof e},w=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.001;return Math.abs(e-t)<r&&Math.abs(n)<r},O=function(e){return e<.5?2*e*e:(4-2*e)*e-1},I={spring:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiffness,n=void 0===t?.5:t,r=e.damping,o=void 0===r?.75:r,i=e.mass,c=void 0===i?10:i,s=null,u=null,l=0,f=!1,d=a({interpolate:function(e,t){if(!f){if(!E(s)||!E(u))return f=!0,void(l=0);w(u+=l+=-(u-s)*n/c,s,l*=o)||t?(u=s,l=0,f=!0,d.onupdate(u),d.oncomplete(u)):d.onupdate(u)}},target:{set:function(e){if(E(e)&&!E(u)&&(u=e),null===s&&(s=e,u=e),u===(s=e)||void 0===s)return f=!0,l=0,d.onupdate(u),void d.oncomplete(u);f=!1},get:function(){return s}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return d},tween:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.duration,o=void 0===r?500:r,i=n.easing,c=void 0===i?O:i,s=n.delay,u=void 0===s?0:s,l=null,f=!0,d=!1,p=null,h=a({interpolate:function(n,r){f||null===p||(null===l&&(l=n),n-l<u||((e=n-l-u)>=o||r?(e=1,t=d?0:1,h.onupdate(t*p),h.oncomplete(t*p),f=!0):(t=e/o,h.onupdate((e>=0?c(d?1-t:t):0)*p))))},target:{get:function(){return d?0:p},set:function(e){if(null===p)return p=e,h.onupdate(e),void h.oncomplete(e);e<p?(p=1,d=!0):(d=!1,p=e),f=!1,l=null}},resting:{get:function(){return f}},onupdate:function(e){},oncomplete:function(e){}});return h}},R=function(e,t,n){var r=e[t]&&"object"==typeof e[t][n]?e[t][n]:e[t]||e,o="string"==typeof r?r:r.type,i="object"==typeof r?Object.assign({},r):{};return I[o]?I[o](i):null},T=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];(t=Array.isArray(t)?t:[t]).forEach((function(t){e.forEach((function(e){var o=e,i=function(){return n[e]},a=function(t){return n[e]=t};"object"==typeof e&&(o=e.key,i=e.getter||i,a=e.setter||a),t[o]&&!r||(t[o]={get:i,set:a})}))}))},S=function(e){return function(t,n){e.addEventListener(t,n)}},P=function(e){return function(t,n){e.removeEventListener(t,n)}},C=function(e){return null!=e},L={opacity:1,scaleX:1,scaleY:1,translateX:0,translateY:0,rotateX:0,rotateY:0,rotateZ:0,originX:0,originY:0},D=function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,i=e.view,a=Object.assign({},n),c={};T(t,[r,o],n);var s=function(){return[n.translateX||0,n.translateY||0]},u=function(){return[n.scaleX||0,n.scaleY||0]},l=function(){return i.rect?y(i.rect,i.childViews,s(),u()):null};return r.rect={get:l},o.rect={get:l},t.forEach((function(e){n[e]=void 0===a[e]?L[e]:a[e]})),{write:function(){if(k(c,n))return M(i.element,n),Object.assign(c,Object.assign({},n)),!0},destroy:function(){}}},k=function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!0;for(var n in t)if(t[n]!==e[n])return!0;return!1},M=function(e,t){var n=t.opacity,r=t.perspective,o=t.translateX,i=t.translateY,a=t.scaleX,c=t.scaleY,s=t.rotateX,u=t.rotateY,l=t.rotateZ,f=t.originX,d=t.originY,p=t.width,h=t.height,m="",v="";(C(f)||C(d))&&(v+="transform-origin: "+(f||0)+"px "+(d||0)+"px;"),C(r)&&(m+="perspective("+r+"px) "),(C(o)||C(i))&&(m+="translate3d("+(o||0)+"px, "+(i||0)+"px, 0) "),(C(a)||C(c))&&(m+="scale3d("+(C(a)?a:1)+", "+(C(c)?c:1)+", 1) "),C(l)&&(m+="rotateZ("+l+"rad) "),C(s)&&(m+="rotateX("+s+"rad) "),C(u)&&(m+="rotateY("+u+"rad) "),m.length&&(v+="transform:"+m+";"),C(n)&&(v+="opacity:"+n+";",0===n&&(v+="visibility:hidden;"),n<1&&(v+="pointer-events:none;")),C(h)&&(v+="height:"+h+"px;"),C(p)&&(v+="width:"+p+"px;");var g=e.elementCurrentStyle||"";v.length===g.length&&v===g||(e.style.cssText=v,e.elementCurrentStyle=v)},A={styles:D,listeners:function(e){e.mixinConfig,e.viewProps,e.viewInternalAPI;var t=e.viewExternalAPI,n=(e.viewState,e.view),r=[],o=S(n.element),i=P(n.element);return t.on=function(e,t){r.push({type:e,fn:t}),o(e,t)},t.off=function(e,t){r.splice(r.findIndex((function(n){return n.type===e&&n.fn===t})),1),i(e,t)},{write:function(){return!0},destroy:function(){r.forEach((function(e){i(e.type,e.fn)}))}}},animations:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewInternalAPI,o=e.viewExternalAPI,a=Object.assign({},n),c=[];return i(t,(function(e,t){var i=R(t);i&&(i.onupdate=function(t){n[e]=t},i.target=a[e],T([{key:e,setter:function(e){i.target!==e&&(i.target=e)},getter:function(){return n[e]}}],[r,o],n,!0),c.push(i))})),{write:function(e){var t=document.hidden,n=!0;return c.forEach((function(r){r.resting||(n=!1),r.interpolate(e,t)})),n},destroy:function(){}}},apis:function(e){var t=e.mixinConfig,n=e.viewProps,r=e.viewExternalAPI;T(t,r,n)}},x=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.layoutCalculated||(e.paddingTop=parseInt(n.paddingTop,10)||0,e.marginTop=parseInt(n.marginTop,10)||0,e.marginRight=parseInt(n.marginRight,10)||0,e.marginBottom=parseInt(n.marginBottom,10)||0,e.marginLeft=parseInt(n.marginLeft,10)||0,t.layoutCalculated=!0),e.left=t.offsetLeft||0,e.top=t.offsetTop||0,e.width=t.offsetWidth||0,e.height=t.offsetHeight||0,e.right=e.left+e.width,e.bottom=e.top+e.height,e.scrollTop=t.scrollTop,e.hidden=null===t.offsetParent,e},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.tag,n=void 0===t?"div":t,r=e.name,o=void 0===r?null:r,i=e.attributes,c=void 0===i?{}:i,s=e.read,u=void 0===s?function(){}:s,l=e.write,m=void 0===l?function(){}:l,v=e.create,b=void 0===v?function(){}:v,_=e.destroy,E=void 0===_?function(){}:_,w=e.filterFrameActionsForChild,O=void 0===w?function(e,t){return t}:w,I=e.didCreateView,R=void 0===I?function(){}:I,T=e.didWriteView,S=void 0===T?function(){}:T,P=e.ignoreRect,C=void 0!==P&&P,L=e.ignoreRectUpdate,D=void 0!==L&&L,k=e.mixins,M=void 0===k?[]:k;return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=f(n,"filepond--"+o,c),i=window.getComputedStyle(r,null),s=x(),l=null,v=!1,_=[],w=[],I={},T={},P=[m],L=[u],k=[E],N=function(){return r},j=function(){return _.concat()},F=function(){return I},B=function(e){return function(t,n){return t(e,n)}},G=function(){return l||(l=y(s,_,[0,0],[1,1]))},q=function(){l=null,_.forEach((function(e){return e._read()})),!(D&&s.width&&s.height)&&x(s,r,i);var e={root:K,props:t,rect:s};L.forEach((function(t){return t(e)}))},U=function(e,n,r){var o=0===n.length;return P.forEach((function(i){!1===i({props:t,root:K,actions:n,timestamp:e,shouldOptimize:r})&&(o=!1)})),w.forEach((function(t){!1===t.write(e)&&(o=!1)})),_.filter((function(e){return!!e.element.parentNode})).forEach((function(t){t._write(e,O(t,n),r)||(o=!1)})),_.forEach((function(t,i){t.element.parentNode||(K.appendChild(t.element,i),t._read(),t._write(e,O(t,n),r),o=!1)})),v=o,S({props:t,root:K,actions:n,timestamp:e}),o},V=function(){w.forEach((function(e){return e.destroy()})),k.forEach((function(e){e({root:K,props:t})})),_.forEach((function(e){return e._destroy()}))},H={element:{get:N},style:{get:function(){return i}},childViews:{get:j}},W=Object.assign({},H,{rect:{get:G},ref:{get:F},is:function(e){return o===e},appendChild:d(r),createChildView:B(e),linkView:function(e){return _.push(e),e},unlinkView:function(e){_.splice(_.indexOf(e),1)},appendChildView:p(r,_),removeChildView:h(r,_),registerWriter:function(e){return P.push(e)},registerReader:function(e){return L.push(e)},registerDestroyer:function(e){return k.push(e)},invalidateLayout:function(){return r.layoutCalculated=!1},dispatch:e.dispatch,query:e.query}),z={element:{get:N},childViews:{get:j},rect:{get:G},resting:{get:function(){return v}},isRectIgnored:function(){return C},_read:q,_write:U,_destroy:V},Y=Object.assign({},H,{rect:{get:function(){return s}}});Object.keys(M).sort((function(e,t){return"styles"===e?1:"styles"===t?-1:0})).forEach((function(e){var n=A[e]({mixinConfig:M[e],viewProps:t,viewState:T,viewInternalAPI:W,viewExternalAPI:z,view:a(Y)});n&&w.push(n)}));var K=a(W);b({root:K,props:t});var X=g(r);return _.forEach((function(e,t){K.appendChild(e.element,X+t)})),R(K),a(z)}},j=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:60,r="__framePainter";if(window[r])return window[r].readers.push(e),void window[r].writers.push(t);window[r]={readers:[e],writers:[t]};var o=window[r],i=1e3/n,a=null,c=null,s=null,u=null,l=function(){document.hidden?(s=function(){return window.setTimeout((function(){return f(performance.now())}),i)},u=function(){return window.clearTimeout(c)}):(s=function(){return window.requestAnimationFrame(f)},u=function(){return window.cancelAnimationFrame(c)})};document.addEventListener("visibilitychange",(function(){u&&u(),l(),f(performance.now())}));var f=function e(t){c=s(e),a||(a=t);var n=t-a;n<=i||(a=t-n%i,o.readers.forEach((function(e){return e()})),o.writers.forEach((function(e){return e(t)})))};return l(),f(performance.now()),{pause:function(){u(c)}}},F=function(e,t){return function(n){var r=n.root,o=n.props,i=n.actions,a=void 0===i?[]:i,c=n.timestamp,s=n.shouldOptimize;a.filter((function(t){return e[t.type]})).forEach((function(t){return e[t.type]({root:r,props:o,action:t.data,timestamp:c,shouldOptimize:s})})),t&&t({root:r,props:o,actions:a,timestamp:c,shouldOptimize:s})}},B=function(e,t){return t.parentNode.insertBefore(e,t)},G=function(e,t){return t.parentNode.insertBefore(e,t.nextSibling)},q=function(e){return Array.isArray(e)},U=function(e){return null==e},V=function(e){return e.trim()},H=function(e){return""+e},W=function(e){return"boolean"==typeof e},z=function(e){return W(e)?e:"true"===e},Y=function(e){return"string"==typeof e},K=function(e){return E(e)?e:Y(e)?H(e).replace(/[a-z]+/gi,""):0},X=function(e){return parseInt(K(e),10)},Q=function(e){return parseFloat(K(e))},J=function(e){return E(e)&&isFinite(e)&&Math.floor(e)===e},$=function(e){if(J(e))return e;var t=H(e).trim();return/MB$/i.test(t)?(t=t.replace(/MB$i/,"").trim(),1e3*X(t)*1e3):/KB/i.test(t)?(t=t.replace(/KB$i/,"").trim(),1e3*X(t)):X(t)},Z=function(e){return"function"==typeof e},ee=function(e){for(var t=self,n=e.split("."),r=null;r=n.shift();)if(!(t=t[r]))return null;return t},te={process:"POST",patch:"PATCH",revert:"DELETE",fetch:"GET",restore:"GET",load:"GET"},ne=function(e){var t={};return t.url=Y(e)?e:e.url||"",t.timeout=e.timeout?parseInt(e.timeout,10):0,t.headers=e.headers?e.headers:{},i(te,(function(n){t[n]=re(n,e[n],te[n],t.timeout,t.headers)})),t.remove=e.remove||null,delete t.headers,t},re=function(e,t,n,r,o){if(null===t)return null;if("function"==typeof t)return t;var i={url:"GET"===n||"PATCH"===n?"?"+e+"=":"",method:n,headers:o,withCredentials:!1,timeout:r,onload:null,ondata:null,onerror:null};if(Y(t))return i.url=t,i;if(Object.assign(i,t),Y(i.headers)){var a=i.headers.split(/:(.+)/);i.headers={header:a[0],value:a[1]}}return i.withCredentials=z(i.withCredentials),i},oe=function(e){return null===e},ie=function(e){return"object"==typeof e&&null!==e},ae=function(e){return ie(e)&&Y(e.url)&&ie(e.process)&&ie(e.revert)&&ie(e.restore)&&ie(e.fetch)},ce=function(e){return q(e)?"array":oe(e)?"null":J(e)?"int":/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(e)?"bytes":ae(e)?"api":typeof e},se=function(e){return e.replace(/{\s*'/g,'{"').replace(/'\s*}/g,'"}').replace(/'\s*:/g,'":').replace(/:\s*'/g,':"').replace(/,\s*'/g,',"').replace(/'\s*,/g,'",')},ue={array:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:",";return U(e)?[]:q(e)?e:H(e).split(t).map(V).filter((function(e){return e.length}))},boolean:z,int:function(e){return"bytes"===ce(e)?$(e):X(e)},number:Q,float:Q,bytes:$,string:function(e){return Z(e)?e:H(e)},function:function(e){return ee(e)},serverapi:function(e){return ne(e)},object:function(e){try{return JSON.parse(se(e))}catch(e){return null}}},le=function(e,t){return ue[t](e)},fe=function(e,t,n){if(e===t)return e;var r=ce(e);if(r!==n){var o=le(e,n);if(r=ce(o),null===o)throw'Trying to assign value with incorrect type to "'+option+'", allowed type: "'+n+'"';e=o}return e},de=function(e,t){var n=e;return{enumerable:!0,get:function(){return n},set:function(r){n=fe(r,e,t)}}},pe=function(e){var t={};return i(e,(function(n){var r=e[n];t[n]=de(r[0],r[1])})),a(t)},he=function(e){return{items:[],listUpdateTimeout:null,itemUpdateTimeout:null,processingQueue:[],options:pe(e)}},me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.split(/(?=[A-Z])/).map((function(e){return e.toLowerCase()})).join(t)},ve=function(e,t){var n={};return i(t,(function(t){n[t]={get:function(){return e.getState().options[t]},set:function(n){e.dispatch("SET_"+me(t,"_").toUpperCase(),{value:n})}}})),n},ge=function(e){return function(t,n,r){var o={};return i(e,(function(e){var n=me(e,"_").toUpperCase();o["SET_"+n]=function(o){try{r.options[e]=o.value}catch(e){}t("DID_SET_"+n,{value:r.options[e]})}})),o}},ye=function(e){return function(t){var n={};return i(e,(function(e){n["GET_"+me(e,"_").toUpperCase()]=function(n){return t.options[e]}})),n}},be={API:1,DROP:2,BROWSE:3,PASTE:4,NONE:5},_e=function(){return Math.random().toString(36).substr(2,9)};function Ee(e){this.wrapped=e}function we(t){var n,r;function o(t,o){return new e((function(e,a){var c={key:t,arg:o,resolve:e,reject:a,next:null};r?r=r.next=c:(n=r=c,i(t,o))}))}function i(n,r){try{var o=t[n](r),c=o.value,s=c instanceof Ee;e.resolve(s?c.wrapped:c).then((function(e){s?i("next",e):a(o.done?"return":"normal",e)}),(function(e){i("throw",e)}))}catch(e){a("throw",e)}}function a(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=o,"function"!=typeof t.return&&(this.return=void 0)}function Oe(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Ie(e,t){if(null==e)return{};var n,r,o=Oe(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Re(e){return Te(e)||Se(e)||Pe()}function Te(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}function Se(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function Pe(){throw new TypeError("Invalid attempt to spread non-iterable instance")}"function"==typeof Symbol&&Symbol.asyncIterator&&(we.prototype[Symbol.asyncIterator]=function(){return this}),we.prototype.next=function(e){return this._invoke("next",e)},we.prototype.throw=function(e){return this._invoke("throw",e)},we.prototype.return=function(e){return this._invoke("return",e)};var Ce=function(e,t){return e.splice(t,1)},Le=function(t,n){n?t():document.hidden?e.resolve(1).then(t):setTimeout(t,0)},De=function(){var e=[],t=function(t,n){Ce(e,e.findIndex((function(e){return e.event===t&&(e.cb===n||!n)})))},n=function(t,n,r){e.filter((function(e){return e.event===t})).map((function(e){return e.cb})).forEach((function(e){return Le((function(){return e.apply(void 0,Re(n))}),r)}))};return{fireSync:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!0)},fire:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n(e,r,!1)},on:function(t,n){e.push({event:t,cb:n})},onOnce:function(n,r){e.push({event:n,cb:function(){t(n,r),r.apply(void 0,arguments)}})},off:t}},ke=function(e,t,n){Object.getOwnPropertyNames(e).filter((function(e){return!n.includes(e)})).forEach((function(n){return Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))},Me=["fire","process","revert","load","on","off","onOnce","retryLoad","extend","archive","archived","release","released","requestProcessing","freeze"],Ae=function(e){var t={};return ke(e,t,Me),t},xe=function(e){e.forEach((function(t,n){t.released&&Ce(e,n)}))},Ne={INIT:1,IDLE:2,PROCESSING_QUEUED:9,PROCESSING:3,PROCESSING_COMPLETE:5,PROCESSING_ERROR:6,PROCESSING_REVERT_ERROR:10,LOADING:7,LOAD_ERROR:8},je={INPUT:1,LIMBO:2,LOCAL:3},Fe=function(e){return/[^0-9]+/.exec(e)},Be=function(){return Fe(1.1.toLocaleString())[0]},Ge=function(){var e=Be(),t=1e3.toLocaleString();return t!==1e3.toString()?Fe(t)[0]:"."===e?",":"."},qe={BOOLEAN:"boolean",INT:"int",NUMBER:"number",STRING:"string",ARRAY:"array",OBJECT:"object",FUNCTION:"function",ACTION:"action",SERVER_API:"serverapi",REGEX:"regex"},Ue=[],Ve=function(t,n,r){return new e((function(e,o){var i=Ue.filter((function(e){return e.key===t})).map((function(e){return e.cb}));if(0!==i.length){var a=i.shift();i.reduce((function(e,t){return e.then((function(e){return t(e,r)}))}),a(n,r)).then((function(t){return e(t)})).catch((function(e){return o(e)}))}else e(n)}))},He=function(e,t,n){return Ue.filter((function(t){return t.key===e})).map((function(e){return e.cb(t,n)}))},We=function(e,t){return Ue.push({key:e,cb:t})},ze=function(e){return Object.assign(Xe,e)},Ye=function(){return Object.assign({},Xe)},Ke=function(e){i(e,(function(e,t){Xe[e]&&(Xe[e][0]=fe(t,Xe[e][0],Xe[e][1]))}))},Xe={id:[null,qe.STRING],name:["filepond",qe.STRING],disabled:[!1,qe.BOOLEAN],className:[null,qe.STRING],required:[!1,qe.BOOLEAN],captureMethod:[null,qe.STRING],allowSyncAcceptAttribute:[!0,qe.BOOLEAN],allowDrop:[!0,qe.BOOLEAN],allowBrowse:[!0,qe.BOOLEAN],allowPaste:[!0,qe.BOOLEAN],allowMultiple:[!1,qe.BOOLEAN],allowReplace:[!0,qe.BOOLEAN],allowRevert:[!0,qe.BOOLEAN],allowRemove:[!0,qe.BOOLEAN],allowProcess:[!0,qe.BOOLEAN],allowReorder:[!1,qe.BOOLEAN],allowDirectoriesOnly:[!1,qe.BOOLEAN],forceRevert:[!1,qe.BOOLEAN],maxFiles:[null,qe.INT],checkValidity:[!1,qe.BOOLEAN],itemInsertLocationFreedom:[!0,qe.BOOLEAN],itemInsertLocation:["before",qe.STRING],itemInsertInterval:[75,qe.INT],dropOnPage:[!1,qe.BOOLEAN],dropOnElement:[!0,qe.BOOLEAN],dropValidation:[!1,qe.BOOLEAN],ignoredFiles:[[".ds_store","thumbs.db","desktop.ini"],qe.ARRAY],instantUpload:[!0,qe.BOOLEAN],maxParallelUploads:[2,qe.INT],chunkUploads:[!1,qe.BOOLEAN],chunkForce:[!1,qe.BOOLEAN],chunkSize:[5e6,qe.INT],chunkRetryDelays:[[500,1e3,3e3],qe.Array],server:[null,qe.SERVER_API],labelDecimalSeparator:[Be(),qe.STRING],labelThousandsSeparator:[Ge(),qe.STRING],labelIdle:['Drag & Drop your files or <span class="filepond--label-action">Browse</span>',qe.STRING],labelInvalidField:["Field contains invalid files",qe.STRING],labelFileWaitingForSize:["Waiting for size",qe.STRING],labelFileSizeNotAvailable:["Size not available",qe.STRING],labelFileCountSingular:["file in list",qe.STRING],labelFileCountPlural:["files in list",qe.STRING],labelFileLoading:["Loading",qe.STRING],labelFileAdded:["Added",qe.STRING],labelFileLoadError:["Error during load",qe.STRING],labelFileRemoved:["Removed",qe.STRING],labelFileRemoveError:["Error during remove",qe.STRING],labelFileProcessing:["Uploading",qe.STRING],labelFileProcessingComplete:["Upload complete",qe.STRING],labelFileProcessingAborted:["Upload cancelled",qe.STRING],labelFileProcessingError:["Error during upload",qe.STRING],labelFileProcessingRevertError:["Error during revert",qe.STRING],labelTapToCancel:["tap to cancel",qe.STRING],labelTapToRetry:["tap to retry",qe.STRING],labelTapToUndo:["tap to undo",qe.STRING],labelButtonRemoveItem:["Remove",qe.STRING],labelButtonAbortItemLoad:["Abort",qe.STRING],labelButtonRetryItemLoad:["Retry",qe.STRING],labelButtonAbortItemProcessing:["Cancel",qe.STRING],labelButtonUndoItemProcessing:["Undo",qe.STRING],labelButtonRetryItemProcessing:["Retry",qe.STRING],labelButtonProcessItem:["Upload",qe.STRING],iconRemove:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z" fill="currentColor" fill-rule="nonzero"/></svg>',qe.STRING],iconProcess:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z" fill="currentColor" fill-rule="evenodd"/></svg>',qe.STRING],iconRetry:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z" fill="currentColor" fill-rule="nonzero"/></svg>',qe.STRING],iconUndo:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z" fill="currentColor" fill-rule="nonzero"/></svg>',qe.STRING],iconDone:['<svg width="26" height="26" viewBox="0 0 26 26" xmlns="http://www.w3.org/2000/svg"><path d="M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z" fill="currentColor" fill-rule="nonzero"/></svg>',qe.STRING],oninit:[null,qe.FUNCTION],onwarning:[null,qe.FUNCTION],onerror:[null,qe.FUNCTION],onactivatefile:[null,qe.FUNCTION],oninitfile:[null,qe.FUNCTION],onaddfilestart:[null,qe.FUNCTION],onaddfileprogress:[null,qe.FUNCTION],onaddfile:[null,qe.FUNCTION],onprocessfilestart:[null,qe.FUNCTION],onprocessfileprogress:[null,qe.FUNCTION],onprocessfileabort:[null,qe.FUNCTION],onprocessfilerevert:[null,qe.FUNCTION],onprocessfile:[null,qe.FUNCTION],onprocessfiles:[null,qe.FUNCTION],onremovefile:[null,qe.FUNCTION],onpreparefile:[null,qe.FUNCTION],onupdatefiles:[null,qe.FUNCTION],onreorderfiles:[null,qe.FUNCTION],beforeDropFile:[null,qe.FUNCTION],beforeAddFile:[null,qe.FUNCTION],beforeRemoveFile:[null,qe.FUNCTION],stylePanelLayout:[null,qe.STRING],stylePanelAspectRatio:[null,qe.STRING],styleItemPanelAspectRatio:[null,qe.STRING],styleButtonRemoveItemPosition:["left",qe.STRING],styleButtonProcessItemPosition:["right",qe.STRING],styleLoadIndicatorPosition:["right",qe.STRING],styleProgressIndicatorPosition:["right",qe.STRING],styleButtonRemoveItemAlign:[!1,qe.BOOLEAN],files:[[],qe.ARRAY]},Qe=function(e,t){return U(t)?e[0]||null:J(t)?e[t]||null:("object"==typeof t&&(t=t.id),e.find((function(e){return e.id===t}))||null)},Je=function(e){if(U(e))return e;if(/:/.test(e)){var t=e.split(":");return t[1]/t[0]}return parseFloat(e)},$e=function(e){return e.filter((function(e){return!e.archived}))},Ze={EMPTY:0,IDLE:1,ERROR:2,BUSY:3,READY:4},et=[Ne.LOAD_ERROR,Ne.PROCESSING_ERROR,Ne.PROCESSING_REVERT_ERROR],tt=[Ne.LOADING,Ne.PROCESSING,Ne.PROCESSING_QUEUED,Ne.INIT],nt=[Ne.PROCESSING_COMPLETE],rt=function(e){return et.includes(e.status)},ot=function(e){return tt.includes(e.status)},it=function(e){return nt.includes(e.status)},at=function(e){return{GET_STATUS:function(){var t=$e(e.items),n=Ze.EMPTY,r=Ze.ERROR,o=Ze.BUSY,i=Ze.IDLE,a=Ze.READY;return 0===t.length?n:t.some(rt)?r:t.some(ot)?o:t.some(it)?a:i},GET_ITEM:function(t){return Qe(e.items,t)},GET_ACTIVE_ITEM:function(t){return Qe($e(e.items),t)},GET_ACTIVE_ITEMS:function(){return $e(e.items)},GET_ITEMS:function(){return e.items},GET_ITEM_NAME:function(t){var n=Qe(e.items,t);return n?n.filename:null},GET_ITEM_SIZE:function(t){var n=Qe(e.items,t);return n?n.fileSize:null},GET_STYLES:function(){return Object.keys(e.options).filter((function(e){return/^style/.test(e)})).map((function(t){return{name:t,value:e.options[t]}}))},GET_PANEL_ASPECT_RATIO:function(){return/circle/.test(e.options.stylePanelLayout)?1:Je(e.options.stylePanelAspectRatio)},GET_ITEM_PANEL_ASPECT_RATIO:function(){return e.options.styleItemPanelAspectRatio},GET_ITEMS_BY_STATUS:function(t){return $e(e.items).filter((function(e){return e.status===t}))},GET_TOTAL_ITEMS:function(){return $e(e.items).length},IS_ASYNC:function(){return ie(e.options.server)&&(ie(e.options.server.process)||Z(e.options.server.process))}}},ct=function(e){var t=$e(e.items).length;if(!e.options.allowMultiple)return 0===t;var n=e.options.maxFiles;return null===n||t<n},st=function(e,t,n){return Math.max(Math.min(n,e),t)},ut=function(e,t,n){return e.splice(t,0,n)},lt=function(e,t,n){return U(t)?null:void 0===n?(e.push(t),t):(n=st(n,0,e.length),ut(e,n,t),t)},ft=function(e){return/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i.test(e)},dt=function(e){return e.split("/").pop().split("?").shift()},pt=function(e){return e.split(".").pop()},ht=function(e){if("string"!=typeof e)return"";var t=e.split("/").pop();return/svg/.test(t)?"svg":/zip|compressed/.test(t)?"zip":/plain/.test(t)?"txt":/msword/.test(t)?"doc":/[a-z]+/.test(t)?"jpeg"===t?"jpg":t:""},mt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return(t+e).slice(-t.length)},vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Date;return e.getFullYear()+"-"+mt(e.getMonth()+1,"00")+"-"+mt(e.getDate(),"00")+"_"+mt(e.getHours(),"00")+"-"+mt(e.getMinutes(),"00")+"-"+mt(e.getSeconds(),"00")},gt=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o="string"==typeof n?e.slice(0,e.size,n):e.slice(0,e.size,e.type);return o.lastModifiedDate=new Date,e._relativePath&&(o._relativePath=e._relativePath),Y(t)||(t=vt()),t&&null===r&&pt(t)?o.name=t:(r=r||ht(o.type),o.name=t+(r?"."+r:"")),o},yt=function(){return window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder},bt=function(e,t){var n=yt();if(n){var r=new n;return r.append(e),r.getBlob(t)}return new Blob([e],{type:t})},_t=function(e,t){for(var n=new ArrayBuffer(e.length),r=new Uint8Array(n),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);return bt(n,t)},Et=function(e){return(/^data:(.+);/.exec(e)||[])[1]||null},wt=function(e){return e.split(",")[1].replace(/\s/g,"")},Ot=function(e){return atob(wt(e))},It=function(e){var t=Et(e),n=Ot(e);return _t(n,t)},Rt=function(e,t,n){return gt(It(e),t,null,n)},Tt=function(e){if(!/^content-disposition:/i.test(e))return null;var t=e.split(/filename=|filename\*=.+''/).splice(1).map((function(e){return e.trim().replace(/^["']|[;"']{0,2}$/g,"")})).filter((function(e){return e.length}));return t.length?decodeURI(t[t.length-1]):null},St=function(e){if(/content-length:/i.test(e)){var t=e.match(/[0-9]+/)[0];return t?parseInt(t,10):null}return null},Pt=function(e){return/x-content-transfer-id:/i.test(e)&&(e.split(":")[1]||"").trim()||null},Ct=function(e){var t={source:null,name:null,size:null},n=e.split("\n"),r=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(r=(a=c.next()).done);r=!0){var s=a.value,u=Tt(s);if(u)t.name=u;else{var l=St(s);if(l)t.size=l;else{var f=Pt(s);f&&(t.source=f)}}}}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return t},Lt=function(e){var t={source:null,complete:!1,progress:0,size:null,timestamp:null,duration:0,request:null},n=function(){return t.progress},r=function(){t.request&&t.request.abort&&t.request.abort()},o=function(){var e=t.source;a.fire("init",e),e instanceof File?a.fire("load",e):e instanceof Blob?a.fire("load",gt(e,e.name)):ft(e)?a.fire("load",Rt(e)):i(e)},i=function(n){e?(t.timestamp=Date.now(),t.request=e(n,(function(e){t.duration=Date.now()-t.timestamp,t.complete=!0,e instanceof Blob&&(e=gt(e,e.name||dt(n))),a.fire("load",e instanceof Blob?e:e?e.body:null)}),(function(e){a.fire("error","string"==typeof e?{type:"error",code:0,body:e}:e)}),(function(e,n,r){r&&(t.size=r),t.duration=Date.now()-t.timestamp,e?(t.progress=n/r,a.fire("progress",t.progress)):t.progress=null}),(function(){a.fire("abort")}),(function(e){var n=Ct("string"==typeof e?e:e.headers);a.fire("meta",{size:t.size||n.size,filename:n.name,source:n.source})}))):a.fire("error",{type:"error",body:"Can't load URL",code:400})},a=Object.assign({},De(),{setSource:function(e){return t.source=e},getProgress:n,abort:r,load:o});return a},Dt=function(e){return/GET|HEAD/.test(e)},kt=function(e,t,n){var r={onheaders:function(){},onprogress:function(){},onload:function(){},ontimeout:function(){},onerror:function(){},onabort:function(){},abort:function(){o=!0,a.abort()}},o=!1,i=!1;n=Object.assign({method:"POST",headers:{},withCredentials:!1},n),t=encodeURI(t),Dt(n.method)&&e&&(t=""+t+encodeURIComponent("string"==typeof e?e:JSON.stringify(e)));var a=new XMLHttpRequest;return(Dt(n.method)?a:a.upload).onprogress=function(e){o||r.onprogress(e.lengthComputable,e.loaded,e.total)},a.onreadystatechange=function(){a.readyState<2||4===a.readyState&&0===a.status||i||(i=!0,r.onheaders(a))},a.onload=function(){a.status>=200&&a.status<300?r.onload(a):r.onerror(a)},a.onerror=function(){return r.onerror(a)},a.onabort=function(){o=!0,r.onabort()},a.ontimeout=function(){return r.ontimeout(a)},a.open(n.method,t,!0),J(n.timeout)&&(a.timeout=n.timeout),Object.keys(n.headers).forEach((function(e){var t=unescape(encodeURIComponent(n.headers[e]));a.setRequestHeader(e,t)})),n.responseType&&(a.responseType=n.responseType),n.withCredentials&&(a.withCredentials=!0),a.send(e),r},Mt=function(e,t,n,r){return{type:e,code:t,body:n,headers:r}},At=function(e){return function(t){e(Mt("error",0,"Timeout",t.getAllResponseHeaders()))}},xt=function(e){return/\?/.test(e)},Nt=function(){for(var e="",t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e+=xt(e)&&xt(t)?t.replace(/\?/,"&"):t})),e},jt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return null;var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a,c,s,u){var l=kt(o,Nt(e,t.url),Object.assign({},t,{responseType:"blob"}));return l.onload=function(e){var r=e.getAllResponseHeaders(),a=Ct(r).name||dt(o);i(Mt("load",e.status,"HEAD"===t.method?null:gt(n(e.response),a),r))},l.onerror=function(e){a(Mt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},l.onheaders=function(e){u(Mt("headers",e.status,null,e.getAllResponseHeaders()))},l.ontimeout=At(a),l.onprogress=c,l.onabort=s,l}},Ft={QUEUED:0,COMPLETE:1,PROCESSING:2,ERROR:3,WAITING:4},Bt=function(e,t,n,r,o,i,a,c,s,u,l){for(var f=[],d=l.chunkTransferId,p=l.chunkServer,h=l.chunkSize,m=l.chunkRetryDelays,v={serverId:d,aborted:!1},g=t.ondata||function(e){return e},y=t.onload||function(e,t){return"HEAD"===t?e.getResponseHeader("Upload-Offset"):e.response},b=t.onerror||function(e){return null},_=function(i){var c=new FormData;ie(o)&&c.append(n,JSON.stringify(o));var s="function"==typeof t.headers?t.headers(r,o):Object.assign({},t.headers,{"Upload-Length":r.size}),u=Object.assign({},t,{headers:s}),l=kt(g(c),Nt(e,t.url),u);l.onload=function(e){return i(y(e,u.method))},l.onerror=function(e){return a(Mt("error",e.status,b(e.response)||e.statusText,e.getAllResponseHeaders()))},l.ontimeout=At(a)},E=function(n){var r=Nt(e,p.url,v.serverId),o={headers:"function"==typeof t.headers?t.headers(v.serverId):Object.assign({},t.headers),method:"HEAD"},i=kt(null,r,o);i.onload=function(e){return n(y(e,o.method))},i.onerror=function(e){return a(Mt("error",e.status,b(e.response)||e.statusText,e.getAllResponseHeaders()))},i.ontimeout=At(a)},w=Math.floor(r.size/h),O=0;O<=w;O++){var I=O*h,R=r.slice(I,I+h,"application/offset+octet-stream");f[O]={index:O,size:R.size,offset:I,data:R,file:r,progress:0,retries:Re(m),status:Ft.QUEUED,error:null,request:null,timeout:null}}var T=function(){return i(v.serverId)},S=function(e){return e.status===Ft.QUEUED||e.status===Ft.ERROR},P=function(t){if(!v.aborted)if(t=t||f.find(S)){t.status=Ft.PROCESSING,t.progress=null;var n=p.ondata||function(e){return e},o=p.onerror||function(e){return null},i=Nt(e,p.url,v.serverId),c="function"==typeof p.headers?p.headers(t):Object.assign({},p.headers,{"Content-Type":"application/offset+octet-stream","Upload-Offset":t.offset,"Upload-Length":r.size,"Upload-Name":r.name}),u=t.request=kt(n(t.data),i,Object.assign({},p,{headers:c}));u.onload=function(){t.status=Ft.COMPLETE,t.request=null,D()},u.onprogress=function(e,n,r){t.progress=e?n:null,L()},u.onerror=function(e){t.status=Ft.ERROR,t.request=null,t.error=o(e.response)||e.statusText,C(t)||a(Mt("error",e.status,o(e.response)||e.statusText,e.getAllResponseHeaders()))},u.ontimeout=function(e){t.status=Ft.ERROR,t.request=null,C(t)||At(a)(e)},u.onabort=function(){t.status=Ft.QUEUED,t.request=null,s()}}else f.every((function(e){return e.status===Ft.COMPLETE}))&&T()},C=function(e){return 0!==e.retries.length&&(e.status=Ft.WAITING,clearTimeout(e.timeout),e.timeout=setTimeout((function(){P(e)}),e.retries.shift()),!0)},L=function(){var e=f.reduce((function(e,t){return null===e||null===t.progress?null:e+t.progress}),0);if(null===e)return c(!1,0,0);var t=f.reduce((function(e,t){return e+t.size}),0);c(!0,e,t)},D=function(){f.filter((function(e){return e.status===Ft.PROCESSING})).length>=1||P()},k=function(){f.forEach((function(e){clearTimeout(e.timeout),e.request&&e.request.abort()}))};return v.serverId?E((function(e){v.aborted||(f.filter((function(t){return t.offset<e})).forEach((function(e){e.status=Ft.COMPLETE,e.progress=e.size})),D())})):_((function(e){v.aborted||(u(e),v.serverId=e,D())})),{abort:function(){v.aborted=!0,k()}}},Gt=function(e,t,n,r){return function(o,i,a,c,s,u,l){if(o){var f=r.chunkUploads,d=f&&o.size>r.chunkSize,p=f&&(d||r.chunkForce);if(o instanceof Blob&&p)return Bt(e,t,n,o,i,a,c,s,u,l,r);var h=t.ondata||function(e){return e},m=t.onload||function(e){return e},v=t.onerror||function(e){return null},g=new FormData;ie(i)&&g.append(n,JSON.stringify(i)),(o instanceof Blob?[{name:null,file:o}]:o).forEach((function(e){g.append(n,e.file,null===e.name?e.file.name:""+e.name+e.file.name)}));var y=kt(h(g),Nt(e,t.url),t);return y.onload=function(e){a(Mt("load",e.status,m(e.response),e.getAllResponseHeaders()))},y.onerror=function(e){c(Mt("error",e.status,v(e.response)||e.statusText,e.getAllResponseHeaders()))},y.ontimeout=At(c),y.onprogress=s,y.onabort=u,y}}},qt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return"function"==typeof t?function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return t.apply(void 0,[n].concat(o,[r]))}:t&&Y(t.url)?Gt(e,t,n,r):null},Ut=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if("function"==typeof t)return t;if(!t||!Y(t.url))return function(e,t){return t()};var n=t.onload||function(e){return e},r=t.onerror||function(e){return null};return function(o,i,a){var c=kt(o,e+t.url,t);return c.onload=function(e){i(Mt("load",e.status,n(e.response),e.getAllResponseHeaders()))},c.onerror=function(e){a(Mt("error",e.status,r(e.response)||e.statusText,e.getAllResponseHeaders()))},c.ontimeout=At(a),c}},Vt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e+Math.random()*(t-e)},Ht=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,o=null,i=Date.now();return function a(){var c=Date.now()-i,s=Vt(n,r);c+s>t&&(s=c+s-t);var u=c/t;u>=1||document.hidden?e(1):(e(u),o=setTimeout(a,s))}(),{clear:function(){clearTimeout(o)}}},Wt=function(e){var t={complete:!1,perceivedProgress:0,perceivedPerformanceUpdater:null,progress:null,timestamp:null,perceivedDuration:0,duration:0,request:null,response:null},n=function(n,r){var o=function(){0!==t.duration&&null!==t.progress&&c.fire("progress",c.getProgress())},i=function(){t.complete=!0,c.fire("load-perceived",t.response.body)};c.fire("start"),t.timestamp=Date.now(),t.perceivedPerformanceUpdater=Ht((function(e){t.perceivedProgress=e,t.perceivedDuration=Date.now()-t.timestamp,o(),t.response&&1===t.perceivedProgress&&!t.complete&&i()}),Vt(750,1500)),t.request=e(n,r,(function(e){t.response=ie(e)?e:{type:"load",code:200,body:""+e,headers:{}},t.duration=Date.now()-t.timestamp,t.progress=1,c.fire("load",t.response.body),1===t.perceivedProgress&&i()}),(function(e){t.perceivedPerformanceUpdater.clear(),c.fire("error",ie(e)?e:{type:"error",code:0,body:""+e})}),(function(e,n,r){t.duration=Date.now()-t.timestamp,t.progress=e?n/r:null,o()}),(function(){t.perceivedPerformanceUpdater.clear(),c.fire("abort",t.response?t.response.body:null)}),(function(e){c.fire("transfer",e)}))},r=function(){t.request&&(t.perceivedPerformanceUpdater.clear(),t.request.abort&&t.request.abort(),t.complete=!0)},o=function(){r(),t.complete=!1,t.perceivedProgress=0,t.progress=0,t.timestamp=null,t.perceivedDuration=0,t.duration=0,t.request=null,t.response=null},i=function(){return t.progress?Math.min(t.progress,t.perceivedProgress):null},a=function(){return Math.min(t.duration,t.perceivedDuration)},c=Object.assign({},De(),{process:n,abort:r,getProgress:i,getDuration:a,reset:o});return c},zt=function(e){return e.substr(0,e.lastIndexOf("."))||e},Yt=function(e){var t=[e.name,e.size,e.type];return e instanceof Blob||ft(e)?t[0]=e.name||vt():ft(e)?(t[1]=e.length,t[2]=Et(e)):Y(e)&&(t[0]=dt(e),t[1]=0,t[2]="application/octet-stream"),{name:t[0],size:t[1],type:t[2]}},Kt=function(e){return!!(e instanceof File||e instanceof Blob&&e.name)},Xt=function e(t){if(!ie(t))return t;var n=q(t)?[]:{};for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];n[r]=o&&ie(o)?e(o):o}return n},Qt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=_e(),i={archived:!1,frozen:!1,released:!1,source:null,file:r,serverFileReference:n,transferId:null,processingAborted:!1,status:n?Ne.PROCESSING_COMPLETE:Ne.INIT,activeLoader:null,activeProcessor:null},c=null,s={},u=function(e){return i.status=e},l=function(e){if(!i.released&&!i.frozen){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];I.fire.apply(I,[e].concat(n))}},f=function(){return pt(i.file.name)},d=function(){return i.file.type},p=function(){return i.file.size},h=function(){return i.file},m=function(e,n,r){i.source=e,I.fireSync("init"),i.file?I.fireSync("load-skip"):(i.file=Yt(e),n.on("init",(function(){l("load-init")})),n.on("meta",(function(e){i.file.size=e.size,i.file.filename=e.filename,e.source&&(t=je.LIMBO,i.serverFileReference=e.source,i.status=Ne.PROCESSING_COMPLETE),l("load-meta")})),n.on("progress",(function(e){u(Ne.LOADING),l("load-progress",e)})),n.on("error",(function(e){u(Ne.LOAD_ERROR),l("load-request-error",e)})),n.on("abort",(function(){u(Ne.INIT),l("load-abort")})),n.on("load",(function(e){i.activeLoader=null;var n=function(e){i.file=Kt(e)?e:i.file,t===je.LIMBO&&i.serverFileReference?u(Ne.PROCESSING_COMPLETE):u(Ne.IDLE),l("load")},o=function(t){i.file=e,l("load-meta"),u(Ne.LOAD_ERROR),l("load-file-error",t)};i.serverFileReference?n(e):r(e,n,o)})),n.setSource(e),i.activeLoader=n,n.load())},v=function(){i.activeLoader&&i.activeLoader.load()},g=function(){i.activeLoader?i.activeLoader.abort():(u(Ne.INIT),l("load-abort"))},y=function e(t,n){if(i.processingAborted)i.processingAborted=!1;else if(u(Ne.PROCESSING),c=null,i.file instanceof Blob){t.on("load",(function(e){i.transferId=null,i.serverFileReference=e})),t.on("transfer",(function(e){i.transferId=e})),t.on("load-perceived",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,u(Ne.PROCESSING_COMPLETE),l("process-complete",e)})),t.on("start",(function(){l("process-start")})),t.on("error",(function(e){i.activeProcessor=null,u(Ne.PROCESSING_ERROR),l("process-error",e)})),t.on("abort",(function(e){i.activeProcessor=null,i.transferId=null,i.serverFileReference=e,u(Ne.IDLE),l("process-abort"),c&&c()})),t.on("progress",(function(e){l("process-progress",e)}));var r=function(e){i.archived||t.process(e,Object.assign({},s))},o=console.error;n(i.file,r,o),i.activeProcessor=t}else I.on("load",(function(){e(t,n)}))},b=function(){i.processingAborted=!1,u(Ne.PROCESSING_QUEUED)},_=function(){return new e((function(e){if(!i.activeProcessor)return i.processingAborted=!0,u(Ne.IDLE),l("process-abort"),void e();c=function(){e()},i.activeProcessor.abort()}))},E=function(t,n){return new e((function(e,r){null!==i.serverFileReference?(t(i.serverFileReference,(function(){i.serverFileReference=null,e()}),(function(t){n?(u(Ne.PROCESSING_REVERT_ERROR),l("process-revert-error"),r(t)):e()})),u(Ne.IDLE),l("process-revert")):e()}))},w=function(e,t,n){var r=e.split("."),o=r[0],i=r.pop(),a=s;r.forEach((function(e){return a=a[e]})),JSON.stringify(a[i])!==JSON.stringify(t)&&(a[i]=t,n||l("metadata-update",{key:o,value:s[o]}))},O=function(e){return Xt(e?s[e]:s)},I=Object.assign({id:{get:function(){return o}},origin:{get:function(){return t}},serverId:{get:function(){return i.serverFileReference}},transferId:{get:function(){return i.transferId}},status:{get:function(){return i.status}},filename:{get:function(){return i.file.name}},filenameWithoutExtension:{get:function(){return zt(i.file.name)}},fileExtension:{get:f},fileType:{get:d},fileSize:{get:p},file:{get:h},relativePath:{get:function(){return i.file._relativePath}},source:{get:function(){return i.source}},getMetadata:O,setMetadata:function(e,t,n){if(ie(e)){var r=e;return Object.keys(r).forEach((function(e){w(e,r[e],t)})),e}return w(e,t,n),t},extend:function(e,t){return R[e]=t},abortLoad:g,retryLoad:v,requestProcessing:b,abortProcessing:_,load:m,process:y,revert:E},De(),{freeze:function(){return i.frozen=!0},release:function(){return i.released=!0},released:{get:function(){return i.released}},archive:function(){return i.archived=!0},archived:{get:function(){return i.archived}}}),R=a(I);return R},Jt=function(e,t){return U(t)?0:Y(t)?e.findIndex((function(e){return e.id===t})):-1},$t=function(e,t){var n=Jt(e,t);if(!(n<0))return e[n]||null},Zt=function(e,t,n,r,o,i){var a=kt(null,e,{method:"GET",responseType:"blob"});return a.onload=function(n){var r=n.getAllResponseHeaders(),o=Ct(r).name||dt(e);t(Mt("load",n.status,gt(n.response,o),r))},a.onerror=function(e){n(Mt("error",e.status,e.statusText,e.getAllResponseHeaders()))},a.onheaders=function(e){i(Mt("headers",e.status,null,e.getAllResponseHeaders()))},a.ontimeout=At(n),a.onprogress=r,a.onabort=o,a},en=function(e){return 0===e.indexOf("//")&&(e=location.protocol+e),e.toLowerCase().replace("blob:","").replace(/([a-z])?:\/\//,"$1").split("/")[0]},tn=function(e){return(e.indexOf(":")>-1||e.indexOf("//")>-1)&&en(location.href)!==en(e)},nn=function(e){return function(){return Z(e)?e.apply(void 0,arguments):e}},rn=function(e){return!Kt(e.file)},on=function(e,t){clearTimeout(t.listUpdateTimeout),t.listUpdateTimeout=setTimeout((function(){e("DID_UPDATE_ITEMS",{items:$e(t.items)})}),0)},an=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return new e((function(e){if(!t)return e(!0);var n=t.apply(void 0,r);return null==n?e(!0):"boolean"==typeof n?e(n):void("function"==typeof n.then&&n.then(e))}))},cn=function(e,t){e.items.sort((function(e,n){return t(Ae(e),Ae(n))}))},sn=function(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.query,o=n.success,i=void 0===o?function(){}:o,a=n.failure,c=void 0===a?function(){}:a,s=Ie(n,["query","success","failure"]),u=Qe(e.items,r);u?t(u,i,c,s||{}):c({error:Mt("error",0,"Item not found"),file:null})}},un=function(t,n,r){return{ABORT_ALL:function(){$e(r.items).forEach((function(e){e.freeze(),e.abortLoad(),e.abortProcessing()}))},DID_SET_FILES:function(e){var n=e.value,o=(void 0===n?[]:n).map((function(e){return{source:e.source?e.source:e,options:e.options}})),i=$e(r.items);i.forEach((function(e){o.find((function(t){return t.source===e.source||t.source===e.file}))||t("REMOVE_ITEM",{query:e,remove:!1})})),i=$e(r.items),o.forEach((function(e,n){i.find((function(t){return t.source===e.source||t.file===e.source}))||t("ADD_ITEM",Object.assign({},e,{interactionMethod:be.NONE,index:n}))}))},DID_UPDATE_ITEM_METADATA:function(e){var o=e.id;clearTimeout(r.itemUpdateTimeout),r.itemUpdateTimeout=setTimeout((function(){var e=$t(r.items,o);if(n("IS_ASYNC")){var i=function(){setTimeout((function(){t("REQUEST_ITEM_PROCESSING",{query:o})}),32)},a=function(t){e.revert(Ut(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(t?i:function(){}).catch((function(){}))},c=function(t){e.abortProcessing().then(t?i:function(){})};return e.status===Ne.PROCESSING_COMPLETE?a(r.options.instantUpload):e.status===Ne.PROCESSING?c(r.options.instantUpload):void(r.options.instantUpload&&i())}Ve("SHOULD_PREPARE_OUTPUT",!1,{item:e,query:n}).then((function(n){n&&t("REQUEST_PREPARE_OUTPUT",{query:o,item:e,success:function(e){t("DID_PREPARE_OUTPUT",{id:o,file:e})}},!0)}))}),0)},MOVE_ITEM:function(e){var t=e.query,n=e.index,o=Qe(r.items,t);if(o){var i=r.items.indexOf(o);i!==(n=st(n,0,r.items.length-1))&&r.items.splice(n,0,r.items.splice(i,1)[0])}},SORT:function(e){var o=e.compare;cn(r,o),t("DID_SORT_ITEMS",{items:n("GET_ACTIVE_ITEMS")})},ADD_ITEMS:function(r){var o=r.items,i=r.index,a=r.interactionMethod,c=r.success,s=void 0===c?function(){}:c,u=r.failure,l=void 0===u?function(){}:u,f=i;if(-1===i||void 0===i){var d=n("GET_ITEM_INSERT_LOCATION"),p=n("GET_TOTAL_ITEMS");f="before"===d?0:p}var h=n("GET_IGNORED_FILES"),m=function(e){return Kt(e)?!h.includes(e.name.toLowerCase()):!U(e)},v=o.filter(m).map((function(n){return new e((function(e,r){t("ADD_ITEM",{interactionMethod:a,source:n.source||n,success:e,failure:r,index:f++,options:n.options||{}})}))}));e.all(v).then(s).catch(l)},ADD_ITEM:function(e){var o=e.source,i=e.index,a=void 0===i?-1:i,c=e.interactionMethod,s=e.success,u=void 0===s?function(){}:s,l=e.failure,f=void 0===l?function(){}:l,d=e.options,p=void 0===d?{}:d;if(U(o))f({error:Mt("error",0,"No source"),file:null});else if(!Kt(o)||!r.options.ignoredFiles.includes(o.name.toLowerCase())){if(!ct(r)){if(r.options.allowMultiple||!r.options.allowMultiple&&!r.options.allowReplace){var h=Mt("warning",0,"Max files");return t("DID_THROW_MAX_FILES",{source:o,error:h}),void f({error:h,file:null})}var m=$e(r.items)[0];if(m.status===Ne.PROCESSING_COMPLETE||m.status===Ne.PROCESSING_REVERT_ERROR){var v=n("GET_FORCE_REVERT");if(m.revert(Ut(r.options.server.url,r.options.server.revert),v).then((function(){v&&t("ADD_ITEM",{source:o,index:a,interactionMethod:c,success:u,failure:f,options:p})})).catch((function(){})),v)return}t("REMOVE_ITEM",{query:m.id})}var g="local"===p.type?je.LOCAL:"limbo"===p.type?je.LIMBO:je.INPUT,y=Qt(g,g===je.INPUT?null:o,p.file);Object.keys(p.metadata||{}).forEach((function(e){y.setMetadata(e,p.metadata[e])})),He("DID_CREATE_ITEM",y,{query:n,dispatch:t});var b=n("GET_ITEM_INSERT_LOCATION");r.options.itemInsertLocationFreedom||(a="before"===b?-1:r.items.length),lt(r.items,y,a),Z(b)&&o&&cn(r,b);var _=y.id;y.on("init",(function(){t("DID_INIT_ITEM",{id:_})})),y.on("load-init",(function(){t("DID_START_ITEM_LOAD",{id:_})})),y.on("load-meta",(function(){t("DID_UPDATE_ITEM_META",{id:_})})),y.on("load-progress",(function(e){t("DID_UPDATE_ITEM_LOAD_PROGRESS",{id:_,progress:e})})),y.on("load-request-error",(function(e){var n=nn(r.options.labelFileLoadError)(e);if(e.code>=400&&e.code<500)return t("DID_THROW_ITEM_INVALID",{id:_,error:e,status:{main:n,sub:e.code+" ("+e.body+")"}}),void f({error:e,file:Ae(y)});t("DID_THROW_ITEM_LOAD_ERROR",{id:_,error:e,status:{main:n,sub:r.options.labelTapToRetry}})})),y.on("load-file-error",(function(e){t("DID_THROW_ITEM_INVALID",{id:_,error:e.status,status:e.status}),f({error:e.status,file:Ae(y)})})),y.on("load-abort",(function(){t("REMOVE_ITEM",{query:_})})),y.on("load-skip",(function(){t("COMPLETE_LOAD_ITEM",{query:_,item:y,data:{source:o,success:u}})})),y.on("load",(function(){var e=function(e){e?(y.on("metadata-update",(function(e){t("DID_UPDATE_ITEM_METADATA",{id:_,change:e})})),Ve("SHOULD_PREPARE_OUTPUT",!1,{item:y,query:n}).then((function(e){var n=function(){t("COMPLETE_LOAD_ITEM",{query:_,item:y,data:{source:o,success:u}}),on(t,r)};e?t("REQUEST_PREPARE_OUTPUT",{query:_,item:y,success:function(e){t("DID_PREPARE_OUTPUT",{id:_,file:e}),n()}},!0):n()}))):t("REMOVE_ITEM",{query:_})};Ve("DID_LOAD_ITEM",y,{query:n,dispatch:t}).then((function(){an(n("GET_BEFORE_ADD_FILE"),Ae(y)).then(e)})).catch((function(){e(!1)}))})),y.on("process-start",(function(){t("DID_START_ITEM_PROCESSING",{id:_})})),y.on("process-progress",(function(e){t("DID_UPDATE_ITEM_PROCESS_PROGRESS",{id:_,progress:e})})),y.on("process-error",(function(e){t("DID_THROW_ITEM_PROCESSING_ERROR",{id:_,error:e,status:{main:nn(r.options.labelFileProcessingError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-revert-error",(function(e){t("DID_THROW_ITEM_PROCESSING_REVERT_ERROR",{id:_,error:e,status:{main:nn(r.options.labelFileProcessingRevertError)(e),sub:r.options.labelTapToRetry}})})),y.on("process-complete",(function(e){t("DID_COMPLETE_ITEM_PROCESSING",{id:_,error:null,serverFileReference:e}),t("DID_DEFINE_VALUE",{id:_,value:e})})),y.on("process-abort",(function(){t("DID_ABORT_ITEM_PROCESSING",{id:_})})),y.on("process-revert",(function(){t("DID_REVERT_ITEM_PROCESSING",{id:_}),t("DID_DEFINE_VALUE",{id:_,value:null})})),t("DID_ADD_ITEM",{id:_,index:a,interactionMethod:c}),on(t,r);var E=r.options.server||{},w=E.url,O=E.load,I=E.restore,R=E.fetch;y.load(o,Lt(g===je.INPUT?Y(o)&&tn(o)&&R?jt(w,R):Zt:g===je.LIMBO?jt(w,I):jt(w,O)),(function(e,t,r){Ve("LOAD_FILE",e,{query:n}).then(t).catch(r)}))}},REQUEST_PREPARE_OUTPUT:function(e){var t=e.item,r=e.success,o=e.failure,i=void 0===o?function(){}:o,a={error:Mt("error",0,"Item not found"),file:null};if(t.archived)return i(a);Ve("PREPARE_OUTPUT",t.file,{query:n,item:t}).then((function(e){Ve("COMPLETE_PREPARE_OUTPUT",e,{query:n,item:t}).then((function(e){if(t.archived)return i(a);r(e)}))}))},COMPLETE_LOAD_ITEM:function(e){var o=e.item,i=e.data,a=i.success,c=i.source,s=n("GET_ITEM_INSERT_LOCATION");if(Z(s)&&c&&cn(r,s),t("DID_LOAD_ITEM",{id:o.id,error:null,serverFileReference:o.origin===je.INPUT?null:c}),a(Ae(o)),o.origin!==je.LOCAL)return o.origin===je.LIMBO?(t("DID_COMPLETE_ITEM_PROCESSING",{id:o.id,error:null,serverFileReference:c}),void t("DID_DEFINE_VALUE",{id:o.id,value:c})):void(n("IS_ASYNC")&&r.options.instantUpload&&t("REQUEST_ITEM_PROCESSING",{query:o.id}));t("DID_LOAD_LOCAL_ITEM",{id:o.id})},RETRY_ITEM_LOAD:sn(r,(function(e){e.retryLoad()})),REQUEST_ITEM_PREPARE:sn(r,(function(e,n,r){t("REQUEST_PREPARE_OUTPUT",{query:e.id,item:e,success:function(r){t("DID_PREPARE_OUTPUT",{id:e.id,file:r}),n({file:e,output:r})},failure:r},!0)})),REQUEST_ITEM_PROCESSING:sn(r,(function(e,o,i){if(e.status===Ne.IDLE||e.status===Ne.PROCESSING_ERROR)e.status!==Ne.PROCESSING_QUEUED&&(e.requestProcessing(),t("DID_REQUEST_ITEM_PROCESSING",{id:e.id}),t("PROCESS_ITEM",{query:e,success:o,failure:i},!0));else{var a=function(){return t("REQUEST_ITEM_PROCESSING",{query:e,success:o,failure:i})},c=function(){return document.hidden?a():setTimeout(a,32)};e.status===Ne.PROCESSING_COMPLETE||e.status===Ne.PROCESSING_REVERT_ERROR?e.revert(Ut(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then(c).catch((function(){})):e.status===Ne.PROCESSING&&e.abortProcessing().then(c)}})),PROCESS_ITEM:sn(r,(function(e,o,i){var a=n("GET_MAX_PARALLEL_UPLOADS");if(n("GET_ITEMS_BY_STATUS",Ne.PROCESSING).length!==a){if(e.status!==Ne.PROCESSING){var c=function e(){var n=r.processingQueue.shift();if(n){var o=n.id,i=n.success,a=n.failure,c=Qe(r.items,o);c&&!c.archived?t("PROCESS_ITEM",{query:o,success:i,failure:a},!0):e()}};e.onOnce("process-complete",(function(){o(Ae(e)),c(),n("GET_ITEMS_BY_STATUS",Ne.PROCESSING_COMPLETE).length===r.items.length&&t("DID_COMPLETE_ITEM_PROCESSING_ALL")})),e.onOnce("process-error",(function(t){i({error:t,file:Ae(e)}),c()}));var s=r.options;e.process(Wt(qt(s.server.url,s.server.process,s.name,{chunkTransferId:e.transferId,chunkServer:s.server.patch,chunkUploads:s.chunkUploads,chunkForce:s.chunkForce,chunkSize:s.chunkSize,chunkRetryDelays:s.chunkRetryDelays})),(function(r,o,i){Ve("PREPARE_OUTPUT",r,{query:n,item:e}).then((function(n){t("DID_PREPARE_OUTPUT",{id:e.id,file:n}),o(n)})).catch(i)}))}}else r.processingQueue.push({id:e.id,success:o,failure:i})})),RETRY_ITEM_PROCESSING:sn(r,(function(e){t("REQUEST_ITEM_PROCESSING",{query:e})})),REQUEST_REMOVE_ITEM:sn(r,(function(e){an(n("GET_BEFORE_REMOVE_FILE"),Ae(e)).then((function(n){n&&t("REMOVE_ITEM",{query:e})}))})),RELEASE_ITEM:sn(r,(function(e){e.release()})),REMOVE_ITEM:sn(r,(function(e,o,i,a){var c=function(){var n=e.id;$t(r.items,n).archive(),t("DID_REMOVE_ITEM",{error:null,id:n,item:e}),on(t,r),o(Ae(e))},s=r.options.server;e.origin===je.LOCAL&&s&&Z(s.remove)&&!1!==a.remove?(t("DID_START_ITEM_REMOVE",{id:e.id}),s.remove(e.source,(function(){return c()}),(function(n){t("DID_THROW_ITEM_REMOVE_ERROR",{id:e.id,error:Mt("error",0,n,null),status:{main:nn(r.options.labelFileRemoveError)(n),sub:r.options.labelTapToRetry}})}))):(a.revert&&e.origin!==je.LOCAL&&null!==e.serverId&&e.revert(Ut(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")),c())})),ABORT_ITEM_LOAD:sn(r,(function(e){e.abortLoad()})),ABORT_ITEM_PROCESSING:sn(r,(function(e){e.serverId?t("REVERT_ITEM_PROCESSING",{id:e.id}):e.abortProcessing().then((function(){r.options.instantUpload&&t("REMOVE_ITEM",{query:e.id})}))})),REQUEST_REVERT_ITEM_PROCESSING:sn(r,(function(e){if(r.options.instantUpload){var o=function(n){n&&t("REVERT_ITEM_PROCESSING",{query:e})},i=n("GET_BEFORE_REMOVE_FILE");if(!i)return o(!0);var a=i(Ae(e));return null==a?o(!0):"boolean"==typeof a?o(a):void("function"==typeof a.then&&a.then(o))}t("REVERT_ITEM_PROCESSING",{query:e})})),REVERT_ITEM_PROCESSING:sn(r,(function(e){e.revert(Ut(r.options.server.url,r.options.server.revert),n("GET_FORCE_REVERT")).then((function(){(r.options.instantUpload||rn(e))&&t("REMOVE_ITEM",{query:e.id})})).catch((function(){}))})),SET_OPTIONS:function(e){var n=e.options;i(n,(function(e,n){t("SET_"+me(e,"_").toUpperCase(),{value:n})}))}}},ln=function(e){return e},fn=function(e){return document.createElement(e)},dn=function(e,t){var n=e.childNodes[0];n?t!==n.nodeValue&&(n.nodeValue=t):(n=document.createTextNode(t),e.appendChild(n))},pn=function(e,t,n,r){var o=(r%360-90)*Math.PI/180;return{x:e+n*Math.cos(o),y:t+n*Math.sin(o)}},hn=function(e,t,n,r,o,i){var a=pn(e,t,n,o),c=pn(e,t,n,r);return["M",a.x,a.y,"A",n,n,0,i,0,c.x,c.y].join(" ")},mn=function(e,t,n,r,o){var i=1;return o>r&&o-r<=.5&&(i=0),r>o&&r-o>=.5&&(i=0),hn(e,t,n,360*Math.min(.9999,r),360*Math.min(.9999,o),i)},vn=N({tag:"div",name:"progress-indicator",ignoreRectUpdate:!0,ignoreRect:!0,create:function(e){var t=e.root,n=e.props;n.spin=!1,n.progress=0,n.opacity=0;var r=f("svg");t.ref.path=f("path",{"stroke-width":2,"stroke-linecap":"round"}),r.appendChild(t.ref.path),t.ref.svg=r,t.appendChild(r)},write:function(e){var t=e.root,n=e.props;if(0!==n.opacity){n.align&&(t.element.dataset.align=n.align);var r=parseInt(c(t.ref.path,"stroke-width"),10),o=.5*t.rect.element.width,i=0,a=0;n.spin?(i=0,a=.5):(i=0,a=n.progress);var s=mn(o,o,o-r,i,a);c(t.ref.path,"d",s),c(t.ref.path,"stroke-opacity",n.spin||n.progress>0?1:0)}},mixins:{apis:["progress","spin","align"],styles:["opacity"],animations:{opacity:{type:"tween",duration:500},progress:{type:"spring",stiffness:.95,damping:.65,mass:10}}}}),gn=N({tag:"button",attributes:{type:"button"},ignoreRect:!0,ignoreRectUpdate:!0,name:"file-action-button",mixins:{apis:["label"],styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}},listeners:!0},create:function(e){var t=e.root,n=e.props;t.element.innerHTML=(n.icon||"")+"<span>"+n.label+"</span>",n.isDisabled=!1},write:function(e){var t=e.root,n=e.props,r=n.isDisabled,o=t.query("GET_DISABLED")||0===n.opacity;o&&!r?(n.isDisabled=!0,c(t.element,"disabled","disabled")):!o&&r&&(n.isDisabled=!1,t.element.removeAttribute("disabled"))}}),yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".";return(e=Math.round(Math.abs(e)))<1e3?e+" bytes":e<_n?Math.floor(e/bn)+" KB":e<En?wn(e/_n,1,t)+" MB":wn(e/En,2,t)+" GB"},bn=1e3,_n=1e6,En=1e9,wn=function(e,t,n){return e.toFixed(t).split(".").filter((function(e){return"0"!==e})).join(n)},On=function(e){var t=e.root,n=e.props,r=fn("span");r.className="filepond--file-info-main",c(r,"aria-hidden","true"),t.appendChild(r),t.ref.fileName=r;var o=fn("span");o.className="filepond--file-info-sub",t.appendChild(o),t.ref.fileSize=o,dn(o,t.query("GET_LABEL_FILE_WAITING_FOR_SIZE")),dn(r,ln(t.query("GET_ITEM_NAME",n.id)))},In=function(e){var t=e.root,n=e.props;dn(t.ref.fileSize,yn(t.query("GET_ITEM_SIZE",n.id))),dn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))},Rn=function(e){var t=e.root,n=e.props;J(t.query("GET_ITEM_SIZE",n.id))||dn(t.ref.fileSize,t.query("GET_LABEL_FILE_SIZE_NOT_AVAILABLE"))},Tn=N({name:"file-info",ignoreRect:!0,ignoreRectUpdate:!0,write:F({DID_LOAD_ITEM:In,DID_UPDATE_ITEM_META:In,DID_THROW_ITEM_LOAD_ERROR:Rn,DID_THROW_ITEM_INVALID:Rn}),didCreateView:function(e){He("CREATE_VIEW",Object.assign({},e,{view:e}))},create:On,mixins:{styles:["translateX","translateY"],animations:{translateX:"spring",translateY:"spring"}}}),Sn=function(e){return Math.round(100*e)},Pn=function(e){var t=e.root,n=fn("span");n.className="filepond--file-status-main",t.appendChild(n),t.ref.main=n;var r=fn("span");r.className="filepond--file-status-sub",t.appendChild(r),t.ref.sub=r,Cn({root:t,action:{progress:null}})},Cn=function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_LOADING"):t.query("GET_LABEL_FILE_LOADING")+" "+Sn(n.progress)+"%";dn(t.ref.main,r),dn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},Ln=function(e){var t=e.root;dn(t.ref.main,""),dn(t.ref.sub,"")},Dn=function(e){var t=e.root,n=e.action;dn(t.ref.main,n.status.main),dn(t.ref.sub,n.status.sub)},kn=N({name:"file-status",ignoreRect:!0,ignoreRectUpdate:!0,write:F({DID_LOAD_ITEM:Ln,DID_REVERT_ITEM_PROCESSING:Ln,DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;dn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING")),dn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_ABORT_ITEM_PROCESSING:function(e){var t=e.root;dn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_ABORTED")),dn(t.ref.sub,t.query("GET_LABEL_TAP_TO_RETRY"))},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root;dn(t.ref.main,t.query("GET_LABEL_FILE_PROCESSING_COMPLETE")),dn(t.ref.sub,t.query("GET_LABEL_TAP_TO_UNDO"))},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action,r=null===n.progress?t.query("GET_LABEL_FILE_PROCESSING"):t.query("GET_LABEL_FILE_PROCESSING")+" "+Sn(n.progress)+"%";dn(t.ref.main,r),dn(t.ref.sub,t.query("GET_LABEL_TAP_TO_CANCEL"))},DID_UPDATE_ITEM_LOAD_PROGRESS:Cn,DID_THROW_ITEM_LOAD_ERROR:Dn,DID_THROW_ITEM_INVALID:Dn,DID_THROW_ITEM_PROCESSING_ERROR:Dn,DID_THROW_ITEM_PROCESSING_REVERT_ERROR:Dn,DID_THROW_ITEM_REMOVE_ERROR:Dn}),didCreateView:function(e){He("CREATE_VIEW",Object.assign({},e,{view:e}))},create:Pn,mixins:{styles:["translateX","translateY","opacity"],animations:{opacity:{type:"tween",duration:250},translateX:"spring",translateY:"spring"}}}),Mn={AbortItemLoad:{label:"GET_LABEL_BUTTON_ABORT_ITEM_LOAD",action:"ABORT_ITEM_LOAD",className:"filepond--action-abort-item-load",align:"LOAD_INDICATOR_POSITION"},RetryItemLoad:{label:"GET_LABEL_BUTTON_RETRY_ITEM_LOAD",action:"RETRY_ITEM_LOAD",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-load",align:"BUTTON_PROCESS_ITEM_POSITION"},RemoveItem:{label:"GET_LABEL_BUTTON_REMOVE_ITEM",action:"REQUEST_REMOVE_ITEM",icon:"GET_ICON_REMOVE",className:"filepond--action-remove-item",align:"BUTTON_REMOVE_ITEM_POSITION"},ProcessItem:{label:"GET_LABEL_BUTTON_PROCESS_ITEM",action:"REQUEST_ITEM_PROCESSING",icon:"GET_ICON_PROCESS",className:"filepond--action-process-item",align:"BUTTON_PROCESS_ITEM_POSITION"},AbortItemProcessing:{label:"GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING",action:"ABORT_ITEM_PROCESSING",className:"filepond--action-abort-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RetryItemProcessing:{label:"GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING",action:"RETRY_ITEM_PROCESSING",icon:"GET_ICON_RETRY",className:"filepond--action-retry-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"},RevertItemProcessing:{label:"GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING",action:"REQUEST_REVERT_ITEM_PROCESSING",icon:"GET_ICON_UNDO",className:"filepond--action-revert-item-processing",align:"BUTTON_PROCESS_ITEM_POSITION"}},An=[];i(Mn,(function(e){An.push(e)}));var xn,Nn=function(e){var t=e.ref.buttonRemoveItem.rect.element;return t.hidden?null:t.width+t.left},jn=function(e){return e.ref.buttonAbortItemLoad.rect.element.width},Fn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.height/4)},Bn=function(e){return Math.floor(e.ref.buttonRemoveItem.rect.element.left/2)},Gn=function(e){return e.query("GET_STYLE_BUTTON_REMOVE_ITEM_POSITION")},qn={buttonAbortItemLoad:{opacity:0},buttonRetryItemLoad:{opacity:0},buttonRemoveItem:{opacity:0},buttonProcessItem:{opacity:0},buttonAbortItemProcessing:{opacity:0},buttonRetryItemProcessing:{opacity:0},buttonRevertItemProcessing:{opacity:0},loadProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_LOAD_INDICATOR_POSITION")}},processProgressIndicator:{opacity:0,align:function(e){return e.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}},processingCompleteIndicator:{opacity:0,scaleX:.75,scaleY:.75},info:{translateX:0,translateY:0,opacity:0},status:{translateX:0,translateY:0,opacity:0}},Un={buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Nn},status:{translateX:Nn}},Vn={buttonAbortItemProcessing:{opacity:1},processProgressIndicator:{opacity:1},status:{opacity:1}},Hn={DID_THROW_ITEM_INVALID:{buttonRemoveItem:{opacity:1},info:{translateX:Nn},status:{translateX:Nn,opacity:1}},DID_START_ITEM_LOAD:{buttonAbortItemLoad:{opacity:1},loadProgressIndicator:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_LOAD_ERROR:{buttonRetryItemLoad:{opacity:1},buttonRemoveItem:{opacity:1},info:{translateX:Nn},status:{opacity:1}},DID_START_ITEM_REMOVE:{processProgressIndicator:{opacity:1,align:Gn},info:{translateX:Nn},status:{opacity:0}},DID_THROW_ITEM_REMOVE_ERROR:{processProgressIndicator:{opacity:0,align:Gn},buttonRemoveItem:{opacity:1},info:{translateX:Nn},status:{opacity:1,translateX:Nn}},DID_LOAD_ITEM:Un,DID_LOAD_LOCAL_ITEM:{buttonRemoveItem:{opacity:1},info:{translateX:Nn},status:{translateX:Nn}},DID_START_ITEM_PROCESSING:Vn,DID_REQUEST_ITEM_PROCESSING:Vn,DID_UPDATE_ITEM_PROCESS_PROGRESS:Vn,DID_COMPLETE_ITEM_PROCESSING:{buttonRevertItemProcessing:{opacity:1},info:{opacity:1},status:{opacity:1}},DID_THROW_ITEM_PROCESSING_ERROR:{buttonRemoveItem:{opacity:1},buttonRetryItemProcessing:{opacity:1},status:{opacity:1},info:{translateX:Nn}},DID_THROW_ITEM_PROCESSING_REVERT_ERROR:{buttonRevertItemProcessing:{opacity:1},status:{opacity:1},info:{opacity:1}},DID_ABORT_ITEM_PROCESSING:{buttonRemoveItem:{opacity:1},buttonProcessItem:{opacity:1},info:{translateX:Nn},status:{opacity:1}},DID_REVERT_ITEM_PROCESSING:Un},Wn=N({create:function(e){var t=e.root;t.element.innerHTML=t.query("GET_ICON_DONE")},name:"processing-complete-indicator",ignoreRect:!0,mixins:{styles:["scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",opacity:{type:"tween",duration:250}}}}),zn=function(e){var t,n=e.root,r=e.props.id,o=n.query("GET_ALLOW_REVERT"),a=n.query("GET_ALLOW_REMOVE"),c=n.query("GET_ALLOW_PROCESS"),s=n.query("GET_INSTANT_UPLOAD"),u=n.query("IS_ASYNC"),l=n.query("GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN");u?c&&!o?t=function(e){return!/RevertItemProcessing/.test(e)}:!c&&o?t=function(e){return!/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(e)}:c||o||(t=function(e){return!/Process/.test(e)}):t=function(e){return!/Process/.test(e)};var f=t?An.filter(t):An.concat();if(s&&o&&(Mn.RevertItemProcessing.label="GET_LABEL_BUTTON_REMOVE_ITEM",Mn.RevertItemProcessing.icon="GET_ICON_REMOVE"),u&&!o){var d=Hn.DID_COMPLETE_ITEM_PROCESSING;d.info.translateX=Bn,d.info.translateY=Fn,d.status.translateY=Fn,d.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}if(u&&!c&&(["DID_START_ITEM_PROCESSING","DID_REQUEST_ITEM_PROCESSING","DID_UPDATE_ITEM_PROCESS_PROGRESS","DID_THROW_ITEM_PROCESSING_ERROR"].forEach((function(e){Hn[e].status.translateY=Fn})),Hn.DID_THROW_ITEM_PROCESSING_ERROR.status.translateX=jn),l&&o){Mn.RevertItemProcessing.align="BUTTON_REMOVE_ITEM_POSITION";var p=Hn.DID_COMPLETE_ITEM_PROCESSING;p.info.translateX=Nn,p.status.translateY=Fn,p.processingCompleteIndicator={opacity:1,scaleX:1,scaleY:1}}a||(Mn.RemoveItem.disabled=!0),i(Mn,(function(e,t){var o=n.createChildView(gn,{label:n.query(t.label),icon:n.query(t.icon),opacity:0});f.includes(e)&&n.appendChildView(o),t.disabled&&(o.element.setAttribute("disabled","disabled"),o.element.setAttribute("hidden","hidden")),o.element.dataset.align=n.query("GET_STYLE_"+t.align),o.element.classList.add(t.className),o.on("click",(function(e){e.stopPropagation(),t.disabled||n.dispatch(t.action,{query:r})})),n.ref["button"+e]=o})),n.ref.processingCompleteIndicator=n.appendChildView(n.createChildView(Wn)),n.ref.processingCompleteIndicator.element.dataset.align=n.query("GET_STYLE_BUTTON_PROCESS_ITEM_POSITION"),n.ref.info=n.appendChildView(n.createChildView(Tn,{id:r})),n.ref.status=n.appendChildView(n.createChildView(kn,{id:r}));var h=n.appendChildView(n.createChildView(vn,{opacity:0,align:n.query("GET_STYLE_LOAD_INDICATOR_POSITION")}));h.element.classList.add("filepond--load-indicator"),n.ref.loadProgressIndicator=h;var m=n.appendChildView(n.createChildView(vn,{opacity:0,align:n.query("GET_STYLE_PROGRESS_INDICATOR_POSITION")}));m.element.classList.add("filepond--process-indicator"),n.ref.processProgressIndicator=m,n.ref.activeStyles=[]},Yn=function(e){var t=e.root,n=e.actions,r=e.props;Kn({root:t,actions:n,props:r});var o=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return Hn[e.type]}));if(o){t.ref.activeStyles=[];var a=Hn[o.type];i(qn,(function(e,n){var r=t.ref[e];i(n,(function(n,o){var i=a[e]&&void 0!==a[e][n]?a[e][n]:o;t.ref.activeStyles.push({control:r,key:n,value:i})}))}))}t.ref.activeStyles.forEach((function(e){var n=e.control,r=e.key,o=e.value;n[r]="function"==typeof o?o(t):o}))},Kn=F({DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemProcessing.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemLoad.label=n.value},DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL:function(e){var t=e.root,n=e.action;t.ref.buttonAbortItemRemoval.label=n.value},DID_REQUEST_ITEM_PROCESSING:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_START_ITEM_LOAD:function(e){var t=e.root;t.ref.loadProgressIndicator.spin=!0,t.ref.loadProgressIndicator.progress=0},DID_START_ITEM_REMOVE:function(e){var t=e.root;t.ref.processProgressIndicator.spin=!0,t.ref.processProgressIndicator.progress=0},DID_UPDATE_ITEM_LOAD_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.loadProgressIndicator.spin=!1,t.ref.loadProgressIndicator.progress=n.progress},DID_UPDATE_ITEM_PROCESS_PROGRESS:function(e){var t=e.root,n=e.action;t.ref.processProgressIndicator.spin=!1,t.ref.processProgressIndicator.progress=n.progress}}),Xn=N({create:zn,write:Yn,didCreateView:function(e){He("CREATE_VIEW",Object.assign({},e,{view:e}))},name:"file"}),Qn=N({create:function(e){var t=e.root,n=e.props;t.ref.fileName=fn("legend"),t.appendChild(t.ref.fileName),t.ref.file=t.appendChildView(t.createChildView(Xn,{id:n.id})),t.ref.data=!1},ignoreRect:!0,write:F({DID_LOAD_ITEM:function(e){var t=e.root,n=e.props;dn(t.ref.fileName,ln(t.query("GET_ITEM_NAME",n.id)))}}),didCreateView:function(e){He("CREATE_VIEW",Object.assign({},e,{view:e}))},tag:"fieldset",name:"file-wrapper"}),Jn={type:"spring",damping:.6,mass:7},$n=function(e){var t=e.root,n=e.props;[{name:"top"},{name:"center",props:{translateY:null,scaleY:null},mixins:{animations:{scaleY:Jn},styles:["translateY","scaleY"]}},{name:"bottom",props:{translateY:null},mixins:{animations:{translateY:Jn},styles:["translateY"]}}].forEach((function(e){Zn(t,e,n.name)})),t.element.classList.add("filepond--"+n.name),t.ref.scalable=null},Zn=function(e,t,n){var r=N({name:"panel-"+t.name+" filepond--"+n,mixins:t.mixins,ignoreRectUpdate:!0}),o=e.createChildView(r,t.props);e.ref[t.name]=e.appendChildView(o)},er=N({name:"panel",write:function(e){var t=e.root,n=e.props;if(null!==t.ref.scalable&&n.scalable===t.ref.scalable||(t.ref.scalable=!W(n.scalable)||n.scalable,t.element.dataset.scalable=t.ref.scalable),n.height){var r=t.ref.top.rect.element,o=t.ref.bottom.rect.element,i=Math.max(r.height+o.height,n.height);t.ref.center.translateY=r.height,t.ref.center.scaleY=(i-r.height-o.height)/100,t.ref.bottom.translateY=i-o.height}},create:$n,ignoreRect:!0,mixins:{apis:["height","scalable"]}}),tr=function(e){var t=e.map((function(e){return e.id})),n=void 0;return{setIndex:function(e){n=e},getIndex:function(){return n},getItemIndex:function(e){return t.indexOf(e.id)}}},nr={type:"spring",stiffness:.75,damping:.45,mass:10},rr="spring",or={DID_START_ITEM_LOAD:"busy",DID_UPDATE_ITEM_LOAD_PROGRESS:"loading",DID_THROW_ITEM_INVALID:"load-invalid",DID_THROW_ITEM_LOAD_ERROR:"load-error",DID_LOAD_ITEM:"idle",DID_THROW_ITEM_REMOVE_ERROR:"remove-error",DID_START_ITEM_REMOVE:"busy",DID_START_ITEM_PROCESSING:"busy processing",DID_REQUEST_ITEM_PROCESSING:"busy processing",DID_UPDATE_ITEM_PROCESS_PROGRESS:"processing",DID_COMPLETE_ITEM_PROCESSING:"processing-complete",DID_THROW_ITEM_PROCESSING_ERROR:"processing-error",DID_THROW_ITEM_PROCESSING_REVERT_ERROR:"processing-revert-error",DID_ABORT_ITEM_PROCESSING:"cancelled",DID_REVERT_ITEM_PROCESSING:"idle"},ir=function(e){var t=e.root,n=e.props;if(t.ref.handleClick=function(e){return t.dispatch("DID_ACTIVATE_ITEM",{id:n.id})},t.element.id="filepond--item-"+n.id,t.element.addEventListener("click",t.ref.handleClick),t.ref.container=t.appendChildView(t.createChildView(Qn,{id:n.id})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"item-panel"})),t.ref.panel.height=null,n.markedForRemoval=!1,t.query("GET_ALLOW_REORDER")){t.element.dataset.dragState="idle";var r=function(e){if(e.isPrimary){var r=!1,o={x:e.pageX,y:e.pageY};n.dragOrigin={x:t.translateX,y:t.translateY},n.dragCenter={x:e.offsetX,y:e.offsetY};var i=tr(t.query("GET_ACTIVE_ITEMS"));t.dispatch("DID_GRAB_ITEM",{id:n.id,dragState:i});var a=function(e){e.isPrimary&&(e.stopPropagation(),e.preventDefault(),n.dragOffset={x:e.pageX-o.x,y:e.pageY-o.y},n.dragOffset.x*n.dragOffset.x+n.dragOffset.y*n.dragOffset.y>16&&!r&&(r=!0,t.element.removeEventListener("click",t.ref.handleClick)),t.dispatch("DID_DRAG_ITEM",{id:n.id,dragState:i}))},c=function e(c){c.isPrimary&&(document.removeEventListener("pointermove",a),document.removeEventListener("pointerup",e),n.dragOffset={x:c.pageX-o.x,y:c.pageY-o.y},t.dispatch("DID_DROP_ITEM",{id:n.id,dragState:i}),r&&setTimeout((function(){return t.element.addEventListener("click",t.ref.handleClick)}),0))};document.addEventListener("pointermove",a),document.addEventListener("pointerup",c)}};t.element.addEventListener("pointerdown",r)}},ar=F({DID_UPDATE_PANEL_HEIGHT:function(e){var t=e.root,n=e.action;t.height=n.height}}),cr=F({DID_GRAB_ITEM:function(e){var t=e.root;e.props.dragOrigin={x:t.translateX,y:t.translateY}},DID_DRAG_ITEM:function(e){e.root.element.dataset.dragState="drag"},DID_DROP_ITEM:function(e){var t=e.root,n=e.props;n.dragOffset=null,n.dragOrigin=null,t.element.dataset.dragState="drop"}},(function(e){var t=e.root,n=e.actions,r=e.props,o=e.shouldOptimize;"drop"===t.element.dataset.dragState&&t.scaleX<=1&&(t.element.dataset.dragState="idle");var i=n.concat().filter((function(e){return/^DID_/.test(e.type)})).reverse().find((function(e){return or[e.type]}));i&&i.type!==r.currentState&&(r.currentState=i.type,t.element.dataset.filepondItemState=or[r.currentState]||"");var a=t.query("GET_ITEM_PANEL_ASPECT_RATIO")||t.query("GET_PANEL_ASPECT_RATIO");a?o||(t.height=t.rect.element.width*a):(ar({root:t,actions:n,props:r}),!t.height&&t.ref.container.rect.element.height>0&&(t.height=t.ref.container.rect.element.height)),o&&(t.ref.panel.height=null),t.ref.panel.height=t.height})),sr=N({create:ir,write:cr,destroy:function(e){var t=e.root,n=e.props;t.element.removeEventListener("click",t.ref.handleClick),t.dispatch("RELEASE_ITEM",{query:n.id})},tag:"li",name:"item",mixins:{apis:["id","interactionMethod","markedForRemoval","spawnDate","dragCenter","dragOrigin","dragOffset"],styles:["translateX","translateY","scaleX","scaleY","opacity","height"],animations:{scaleX:rr,scaleY:rr,translateX:nr,translateY:nr,opacity:{type:"tween",duration:150}}}}),ur=function(e,t,n){if(n){var r=e.rect.element.width,o=t.length,i=null;if(0===o||n.top<t[0].rect.element.top)return-1;var a=t[0].rect.element,c=a.marginLeft+a.marginRight,s=a.width+c,u=Math.round(r/s);if(1===u){for(var l=0;l<o;l++){var f=t[l],d=f.rect.outer.top+.5*f.rect.element.height;if(n.top<d)return l}return o}for(var p=a.marginTop+a.marginBottom,h=a.height+p,m=0;m<o;m++){var v=m%u*s,g=Math.floor(m/u)*h,y=g-a.marginTop,b=v+s,_=g+h+a.marginBottom;if(n.top<_&&n.top>y){if(n.left<b)return m;i=m!==o-1?m:null}}return null!==i?i:o}},lr={height:0,width:0,get getHeight(){return this.height},set setHeight(e){0!==this.height&&0!==e||(this.height=e)},get getWidth(){return this.width},set setWidth(e){0!==this.width&&0!==e||(this.width=e)},setDimensions:function(e,t){0!==this.height&&0!==e||(this.height=e),0!==this.width&&0!==t||(this.width=t)}},fr=function(e){var t=e.root;c(t.element,"role","list"),t.ref.lastItemSpanwDate=Date.now()},dr=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;e.dragOffset?(e.translateX=null,e.translateY=null,e.translateX=e.dragOrigin.x+e.dragOffset.x,e.translateY=e.dragOrigin.y+e.dragOffset.y,e.scaleX=1.025,e.scaleY=1.025):(e.translateX=t,e.translateY=n,Date.now()>e.spawnDate&&(0===e.opacity&&pr(e,t,n,r,o),e.scaleX=1,e.scaleY=1,e.opacity=1))},pr=function(e,t,n,r,o){e.interactionMethod===be.NONE?(e.translateX=null,e.translateX=t,e.translateY=null,e.translateY=n):e.interactionMethod===be.DROP?(e.translateX=null,e.translateX=t-20*r,e.translateY=null,e.translateY=n-10*o,e.scaleX=.8,e.scaleY=.8):e.interactionMethod===be.BROWSE?(e.translateY=null,e.translateY=n-30):e.interactionMethod===be.API&&(e.translateX=null,e.translateX=t-30,e.translateY=null)},hr=function(e){return e.rect.element.height+.5*e.rect.element.marginBottom+.5*e.rect.element.marginTop},mr=function(e){return e.rect.element.width+.5*e.rect.element.marginLeft+.5*e.rect.element.marginRight},vr=F({DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.index,i=n.interactionMethod;t.ref.addIndex=o;var a=Date.now(),c=a,s=1;if(i!==be.NONE){s=0;var u=t.query("GET_ITEM_INSERT_INTERVAL"),l=a-t.ref.lastItemSpanwDate;c=l<u?a+(u-l):a}t.ref.lastItemSpanwDate=c,t.appendChildView(t.createChildView(sr,{spawnDate:c,id:r,opacity:s,interactionMethod:i}),o)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action.id,r=t.childViews.find((function(e){return e.id===n}));r&&(r.scaleX=.9,r.scaleY=.9,r.opacity=0,r.markedForRemoval=!0)},DID_DRAG_ITEM:function(e){var t=e.root,n=e.action,r=n.id,o=n.dragState,i=t.query("GET_ITEM",{id:r}),a=t.childViews.find((function(e){return e.id===r})),c=t.childViews.length,s=o.getItemIndex(i);if(a){var u={x:a.dragOrigin.x+a.dragOffset.x+a.dragCenter.x,y:a.dragOrigin.y+a.dragOffset.y+a.dragCenter.y},l=hr(a),f=mr(a),d=Math.floor(t.rect.outer.width/f);d>c&&(d=c);var p=Math.floor(c/d+1);lr.setHeight=l*p,lr.setWidth=f*d;var h={y:Math.floor(u.y/l),x:Math.floor(u.x/f),getGridIndex:function(){return u.y>lr.getHeight||u.y<0||u.x>lr.getWidth||u.x<0?s:this.y*d+this.x},getColIndex:function(){for(var e=t.query("GET_ACTIVE_ITEMS"),n=t.childViews.filter((function(e){return e.rect.element.height})),r=e.map((function(e){return n.find((function(t){return t.id===e.id}))})),o=r.findIndex((function(e){return e===a})),i=hr(a),c=r.length,s=c,l=0,f=0,d=0;d<c;d++)if(l=(f=l)+hr(r[d]),u.y<l){if(o>d){if(u.y<f+i){s=d;break}continue}s=d;break}return s}},m=d>1?h.getGridIndex():h.getColIndex();t.dispatch("MOVE_ITEM",{query:a,index:m});var v=o.getIndex();if(void 0===v||v!==m){if(o.setIndex(m),void 0===v)return;t.dispatch("DID_REORDER_ITEMS",{items:t.query("GET_ACTIVE_ITEMS"),origin:s,target:m})}}}}),gr=N({create:fr,write:function(e){var t=e.root,n=e.props,r=e.actions,o=e.shouldOptimize;vr({root:t,props:n,actions:r});var i=n.dragCoordinates,a=t.rect.element.width,c=t.childViews.filter((function(e){return e.rect.element.height})),s=t.query("GET_ACTIVE_ITEMS").map((function(e){return c.find((function(t){return t.id===e.id}))})).filter((function(e){return e})),u=i?ur(t,s,i):null,l=t.ref.addIndex||null;t.ref.addIndex=null;var f=0,d=0,p=0;if(0!==s.length){var h=s[0].rect.element,m=h.marginTop+h.marginBottom,v=h.marginLeft+h.marginRight,g=h.width+v,y=h.height+m,b=Math.round(a/g);if(1===b){var _=0,E=0;s.forEach((function(e,t){if(u){var n=t-u;E=-2===n?.25*-m:-1===n?.75*-m:0===n?.75*m:1===n?.25*m:0}o&&(e.translateX=null,e.translateY=null),e.markedForRemoval||dr(e,0,_+E);var r=(e.rect.element.height+m)*(e.markedForRemoval?e.opacity:1);_+=r}))}else{var w=0,O=0;s.forEach((function(e,t){t===u&&(f=1),t===l&&(p+=1),e.markedForRemoval&&e.opacity<.5&&(d-=1);var n=t+p+f+d,r=n%b,i=Math.floor(n/b),a=r*g,c=i*y,s=Math.sign(a-w),h=Math.sign(c-O);w=a,O=c,e.markedForRemoval||(o&&(e.translateX=null,e.translateY=null),dr(e,a,c,s,h))}))}}},tag:"ul",name:"list",didWriteView:function(e){var t=e.root;t.childViews.filter((function(e){return e.markedForRemoval&&0===e.opacity&&e.resting})).forEach((function(e){e._destroy(),t.removeChildView(e)}))},filterFrameActionsForChild:function(e,t){return t.filter((function(t){return!t.data||!t.data.id||e.id===t.data.id}))},mixins:{apis:["dragCoordinates"]}}),yr=function(e){var t=e.root,n=e.props;t.ref.list=t.appendChildView(t.createChildView(gr)),n.dragCoordinates=null,n.overflowing=!1},br=F({DID_DRAG:function(e){var t=e.root,n=e.props,r=e.action;t.query("GET_ITEM_INSERT_LOCATION_FREEDOM")&&(n.dragCoordinates={left:r.position.scopeLeft-t.ref.list.rect.element.left,top:r.position.scopeTop-(t.rect.outer.top+t.rect.element.marginTop+t.rect.element.scrollTop)})},DID_END_DRAG:function(e){e.props.dragCoordinates=null}}),_r=N({create:yr,write:function(e){var t=e.root,n=e.props,r=e.actions;if(br({root:t,props:n,actions:r}),t.ref.list.dragCoordinates=n.dragCoordinates,n.overflowing&&!n.overflow&&(n.overflowing=!1,t.element.dataset.state="",t.height=null),n.overflow){var o=Math.round(n.overflow);o!==t.height&&(n.overflowing=!0,t.element.dataset.state="overflow",t.height=o)}},name:"list-scroller",mixins:{apis:["overflow","dragCoordinates"],styles:["height","translateY"],animations:{translateY:"spring"}}}),Er=function(e,t,n){n?c(e,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:""):e.removeAttribute(t)},wr=function(e){if(e&&""!==e.value){try{e.value=""}catch(e){}if(e.value){var t=fn("form"),n=e.parentNode,r=e.nextSibling;t.appendChild(e),t.reset(),r?n.insertBefore(e,r):n.appendChild(e)}}},Or=function(e){var t=e.root,n=e.props;t.element.id="filepond--browser-"+n.id,c(t.element,"name",t.query("GET_NAME")),c(t.element,"aria-controls","filepond--assistant-"+n.id),c(t.element,"aria-labelledby","filepond--drop-label-"+n.id),Ir({root:t,action:{value:t.query("GET_ACCEPTED_FILE_TYPES")}}),Rr({root:t,action:{value:t.query("GET_ALLOW_MULTIPLE")}}),Tr({root:t,action:{value:t.query("GET_ALLOW_DIRECTORIES_ONLY")}}),Sr({root:t}),Pr({root:t,action:{value:t.query("GET_REQUIRED")}}),Cr({root:t,action:{value:t.query("GET_CAPTURE_METHOD")}}),t.ref.handleChange=function(e){if(t.element.value){var r=Array.from(t.element.files).map((function(e){return e._relativePath=e.webkitRelativePath,e}));setTimeout((function(){n.onload(r),wr(t.element)}),250)}},t.element.addEventListener("change",t.ref.handleChange)},Ir=function(e){var t=e.root,n=e.action;t.query("GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE")&&Er(t.element,"accept",!!n.value,n.value?n.value.join(","):"")},Rr=function(e){var t=e.root,n=e.action;Er(t.element,"multiple",n.value)},Tr=function(e){var t=e.root,n=e.action;Er(t.element,"webkitdirectory",n.value)},Sr=function(e){var t=e.root,n=t.query("GET_DISABLED"),r=t.query("GET_ALLOW_BROWSE"),o=n||!r;Er(t.element,"disabled",o)},Pr=function(e){var t=e.root;e.action.value?0===t.query("GET_TOTAL_ITEMS")&&Er(t.element,"required",!0):Er(t.element,"required",!1)},Cr=function(e){var t=e.root,n=e.action;Er(t.element,"capture",!!n.value,!0===n.value?"":n.value)},Lr=function(e){var t=e.root,n=t.element;t.query("GET_TOTAL_ITEMS")>0?(Er(n,"required",!1),Er(n,"name",!1)):(Er(n,"name",!0,t.query("GET_NAME")),t.query("GET_CHECK_VALIDITY")&&n.setCustomValidity(""),t.query("GET_REQUIRED")&&Er(n,"required",!0))},Dr=N({tag:"input",name:"browser",ignoreRect:!0,ignoreRectUpdate:!0,attributes:{type:"file"},create:Or,destroy:function(e){var t=e.root;t.element.removeEventListener("change",t.ref.handleChange)},write:F({DID_LOAD_ITEM:Lr,DID_REMOVE_ITEM:Lr,DID_THROW_ITEM_INVALID:function(e){var t=e.root;t.query("GET_CHECK_VALIDITY")&&t.element.setCustomValidity(t.query("GET_LABEL_INVALID_FIELD"))},DID_SET_DISABLED:Sr,DID_SET_ALLOW_BROWSE:Sr,DID_SET_ALLOW_DIRECTORIES_ONLY:Tr,DID_SET_ALLOW_MULTIPLE:Rr,DID_SET_ACCEPTED_FILE_TYPES:Ir,DID_SET_CAPTURE_METHOD:Cr,DID_SET_REQUIRED:Pr})}),kr={ENTER:13,SPACE:32},Mr=function(e){var t=e.root,n=e.props,r=fn("label");c(r,"for","filepond--browser-"+n.id),c(r,"id","filepond--drop-label-"+n.id),c(r,"aria-hidden","true"),t.ref.handleKeyDown=function(e){(e.keyCode===kr.ENTER||e.keyCode===kr.SPACE)&&(e.preventDefault(),t.ref.label.click())},t.ref.handleClick=function(e){e.target===r||r.contains(e.target)||t.ref.label.click()},r.addEventListener("keydown",t.ref.handleKeyDown),t.element.addEventListener("click",t.ref.handleClick),Ar(r,n.caption),t.appendChild(r),t.ref.label=r},Ar=function(e,t){e.innerHTML=t;var n=e.querySelector(".filepond--label-action");return n&&c(n,"tabindex","0"),t},xr=N({name:"drop-label",ignoreRect:!0,create:Mr,destroy:function(e){var t=e.root;t.ref.label.addEventListener("keydown",t.ref.handleKeyDown),t.element.removeEventListener("click",t.ref.handleClick)},write:F({DID_SET_LABEL_IDLE:function(e){var t=e.root,n=e.action;Ar(t.ref.label,n.value)}}),mixins:{styles:["opacity","translateX","translateY"],animations:{opacity:{type:"tween",duration:150},translateX:"spring",translateY:"spring"}}}),Nr=N({name:"drip-blob",ignoreRect:!0,mixins:{styles:["translateX","translateY","scaleX","scaleY","opacity"],animations:{scaleX:"spring",scaleY:"spring",translateX:"spring",translateY:"spring",opacity:{type:"tween",duration:250}}}}),jr=function(e){var t=e.root,n=.5*t.rect.element.width,r=.5*t.rect.element.height;t.ref.blob=t.appendChildView(t.createChildView(Nr,{opacity:0,scaleX:2.5,scaleY:2.5,translateX:n,translateY:r}))},Fr=function(e){var t=e.root,n=e.props,r=e.actions;Br({root:t,props:n,actions:r});var o=t.ref.blob;0===r.length&&o&&0===o.opacity&&(t.removeChildView(o),t.ref.blob=null)},Br=F({DID_DRAG:function(e){var t=e.root,n=e.action;t.ref.blob?(t.ref.blob.translateX=n.position.scopeLeft,t.ref.blob.translateY=n.position.scopeTop,t.ref.blob.scaleX=1,t.ref.blob.scaleY=1,t.ref.blob.opacity=1):jr({root:t})},DID_DROP:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.scaleX=2.5,t.ref.blob.scaleY=2.5,t.ref.blob.opacity=0)},DID_END_DRAG:function(e){var t=e.root;t.ref.blob&&(t.ref.blob.opacity=0)}}),Gr=N({ignoreRect:!0,ignoreRectUpdate:!0,name:"drip",write:Fr}),qr=function(e){return e.root.ref.fields={}},Ur=function(e,t){return e.ref.fields[t]},Vr=function(e){e.query("GET_ACTIVE_ITEMS").forEach((function(t){e.ref.fields[t.id]&&e.element.appendChild(e.ref.fields[t.id])}))},Hr=function(e){var t=e.root;return Vr(t)},Wr=F({DID_SET_DISABLED:function(e){var t=e.root;t.element.disabled=t.query("GET_DISABLED")},DID_ADD_ITEM:function(e){var t=e.root,n=e.action,r=fn("input");r.type="hidden",r.name=t.query("GET_NAME"),r.disabled=t.query("GET_DISABLED"),t.ref.fields[n.id]=r,Vr(t)},DID_LOAD_ITEM:function(e){var t=e.root,n=e.action,r=Ur(t,n.id);r&&null!==n.serverFileReference&&(r.value=n.serverFileReference)},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action,r=Ur(t,n.id);r&&(r.parentNode.removeChild(r),delete t.ref.fields[n.id])},DID_DEFINE_VALUE:function(e){var t=e.root,n=e.action,r=Ur(t,n.id);r&&(null===n.value?r.removeAttribute("value"):r.value=n.value,Vr(t))},DID_REORDER_ITEMS:Hr,DID_SORT_ITEMS:Hr}),zr=N({tag:"fieldset",name:"data",create:qr,write:Wr,ignoreRect:!0}),Yr=function(e){return"getRootNode"in e?e.getRootNode():document},Kr=["jpg","jpeg","png","gif","bmp","webp","svg","tiff"],Xr=["css","csv","html","txt"],Qr={zip:"zip|compressed",epub:"application/epub+zip"},Jr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e=e.toLowerCase(),Kr.includes(e)?"image/"+("jpg"===e?"jpeg":"svg"===e?"svg+xml":e):Xr.includes(e)?"text/"+e:Qr[e]||""},$r=function(t){return new e((function(e,n){var r=so(t);if(r.length&&!Zr(t))return e(r);eo(t).then(e)}))},Zr=function(e){return!!e.files&&e.files.length>0},eo=function(t){return new e((function(n,r){var o=(t.items?Array.from(t.items):[]).filter((function(e){return to(e)})).map((function(e){return no(e)}));o.length?e.all(o).then((function(e){var t=[];e.forEach((function(e){t.push.apply(t,e)})),n(t.filter((function(e){return e})).map((function(e){return e._relativePath||(e._relativePath=e.webkitRelativePath),e})))})).catch(console.error):n(t.files?Array.from(t.files):[])}))},to=function(e){if(ao(e)){var t=co(e);if(t)return t.isFile||t.isDirectory}return"file"===e.kind},no=function(t){return new e((function(e,n){io(t)?ro(co(t)).then(e).catch(n):e([t.getAsFile()])}))},ro=function(t){return new e((function(e,n){var r=[],o=0,i=0,a=function(){0===i&&0===o&&e(r)};!function e(t){o++;var c=t.createReader();!function t(){c.readEntries((function(n){if(0===n.length)return o--,void a();n.forEach((function(t){t.isDirectory?e(t):(i++,t.file((function(e){var n=oo(e);t.fullPath&&(n._relativePath=t.fullPath),r.push(n),i--,a()})))})),t()}),n)}()}(t)}))},oo=function(e){if(e.type.length)return e;var t=e.lastModifiedDate,n=e.name;return(e=e.slice(0,e.size,Jr(pt(e.name)))).name=n,e.lastModifiedDate=t,e},io=function(e){return ao(e)&&(co(e)||{}).isDirectory},ao=function(e){return"webkitGetAsEntry"in e},co=function(e){return e.webkitGetAsEntry()},so=function(e){var t=[];try{if((t=lo(e)).length)return t;t=uo(e)}catch(e){}return t},uo=function(e){var t=e.getData("url");return"string"==typeof t&&t.length?[t]:[]},lo=function(e){var t=e.getData("text/html");if("string"==typeof t&&t.length){var n=t.match(/src\s*=\s*"(.+?)"/);if(n)return[n[1]]}return[]},fo=[],po=function(e){return{pageLeft:e.pageX,pageTop:e.pageY,scopeLeft:e.offsetX||e.layerX,scopeTop:e.offsetY||e.layerY}},ho=function(e,t,n){var r=mo(t),o={element:e,filterElement:n,state:null,ondrop:function(){},onenter:function(){},ondrag:function(){},onexit:function(){},onload:function(){},allowdrop:function(){}};return o.destroy=r.addListener(o),o},mo=function(e){var t=fo.find((function(t){return t.element===e}));if(t)return t;var n=vo(e);return fo.push(n),n},vo=function(e){var t=[],n={dragenter:Eo,dragover:wo,dragleave:Io,drop:Oo},r={};i(n,(function(n,o){r[n]=o(e,t),e.addEventListener(n,r[n],!1)}));var o={element:e,addListener:function(a){return t.push(a),function(){t.splice(t.indexOf(a),1),0===t.length&&(fo.splice(fo.indexOf(o),1),i(n,(function(t){e.removeEventListener(t,r[t],!1)})))}}};return o},go=function(e,t){return"elementFromPoint"in e||(e=document),e.elementFromPoint(t.x,t.y)},yo=function(e,t){var n=Yr(t),r=go(n,{x:e.pageX-window.pageXOffset,y:e.pageY-window.pageYOffset});return r===t||t.contains(r)},bo=null,_o=function(e,t){try{e.dropEffect=t}catch(e){}},Eo=function(e,t){return function(e){e.preventDefault(),bo=e.target,t.forEach((function(t){var n=t.element,r=t.onenter;yo(e,n)&&(t.state="enter",r(po(e)))}))}},wo=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;$r(n).then((function(r){var o=!1;t.some((function(t){var i=t.filterElement,a=t.element,c=t.onenter,s=t.onexit,u=t.ondrag,l=t.allowdrop;_o(n,"copy");var f=l(r);if(f)if(yo(e,a)){if(o=!0,null===t.state)return t.state="enter",void c(po(e));if(t.state="over",i&&!f)return void _o(n,"none");u(po(e))}else i&&!o&&_o(n,"none"),t.state&&(t.state=null,s(po(e)));else _o(n,"none")}))}))}},Oo=function(e,t){return function(e){e.preventDefault();var n=e.dataTransfer;$r(n).then((function(n){t.forEach((function(t){var r=t.filterElement,o=t.element,i=t.ondrop,a=t.onexit,c=t.allowdrop;if(t.state=null,!r||yo(e,o))return c(n)?void i(po(e),n):a(po(e))}))}))}},Io=function(e,t){return function(e){bo===e.target&&t.forEach((function(t){var n=t.onexit;t.state=null,n(po(e))}))}},Ro=function(e,t,n){e.classList.add("filepond--hopper");var r=n.catchesDropsOnPage,o=n.requiresDropOnElement,i=n.filterItems,a=void 0===i?function(e){return e}:i,c=ho(e,r?document.documentElement:e,o),s="",u="";c.allowdrop=function(e){return t(a(e))},c.ondrop=function(e,n){var r=a(n);t(r)?(u="drag-drop",l.onload(r,e)):l.ondragend(e)},c.ondrag=function(e){l.ondrag(e)},c.onenter=function(e){u="drag-over",l.ondragstart(e)},c.onexit=function(e){u="drag-exit",l.ondragend(e)};var l={updateHopperState:function(){s!==u&&(e.dataset.hopperState=u,s=u)},onload:function(){},ondragstart:function(){},ondrag:function(){},ondragend:function(){},destroy:function(){c.destroy()}};return l},To=!1,So=[],Po=function(e){var t=document.activeElement;if(t&&/textarea|input/i.test(t.nodeName)){for(var n=!1,r=t;r!==document.body;){if(r.classList.contains("filepond--root")){n=!0;break}r=r.parentNode}if(!n)return}$r(e.clipboardData).then((function(e){e.length&&So.forEach((function(t){return t(e)}))}))},Co=function(e){So.includes(e)||(So.push(e),To||(To=!0,document.addEventListener("paste",Po)))},Lo=function(e){Ce(So,So.indexOf(e)),0===So.length&&(document.removeEventListener("paste",Po),To=!1)},Do=function(){var e=function(e){t.onload(e)},t={destroy:function(){Lo(e)},onload:function(){}};return Co(e),t},ko=null,Mo=null,Ao=[],xo=function(e,t){e.element.textContent=t},No=function(e){e.element.textContent=""},jo=function(e,t,n){var r=e.query("GET_TOTAL_ITEMS");xo(e,n+" "+t+", "+r+" "+(1===r?e.query("GET_LABEL_FILE_COUNT_SINGULAR"):e.query("GET_LABEL_FILE_COUNT_PLURAL"))),clearTimeout(Mo),Mo=setTimeout((function(){No(e)}),1500)},Fo=function(e){return e.element.parentNode.contains(document.activeElement)},Bo=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_ABORTED");xo(t,r+" "+o)},Go=function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename;xo(t,n.status.main+" "+r+" "+n.status.sub)},qo=N({create:function(e){var t=e.root,n=e.props;t.element.id="filepond--assistant-"+n.id,c(t.element,"role","status"),c(t.element,"aria-live","polite"),c(t.element,"aria-relevant","additions")},ignoreRect:!0,ignoreRectUpdate:!0,write:F({DID_LOAD_ITEM:function(e){var t=e.root,n=e.action;if(Fo(t)){t.element.textContent="";var r=t.query("GET_ITEM",n.id);Ao.push(r.filename),clearTimeout(ko),ko=setTimeout((function(){jo(t,Ao.join(", "),t.query("GET_LABEL_FILE_ADDED")),Ao.length=0}),750)}},DID_REMOVE_ITEM:function(e){var t=e.root,n=e.action;if(Fo(t)){var r=n.item;jo(t,r.filename,t.query("GET_LABEL_FILE_REMOVED"))}},DID_COMPLETE_ITEM_PROCESSING:function(e){var t=e.root,n=e.action,r=t.query("GET_ITEM",n.id).filename,o=t.query("GET_LABEL_FILE_PROCESSING_COMPLETE");xo(t,r+" "+o)},DID_ABORT_ITEM_PROCESSING:Bo,DID_REVERT_ITEM_PROCESSING:Bo,DID_THROW_ITEM_REMOVE_ERROR:Go,DID_THROW_ITEM_LOAD_ERROR:Go,DID_THROW_ITEM_INVALID:Go,DID_THROW_ITEM_PROCESSING_ERROR:Go}),tag:"span",name:"assistant"}),Uo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"-";return e.replace(new RegExp(t+".","g"),(function(e){return e.charAt(1).toUpperCase()}))},Vo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=Date.now(),o=null;return function(){for(var i=arguments.length,a=new Array(i),c=0;c<i;c++)a[c]=arguments[c];clearTimeout(o);var s=Date.now()-r,u=function(){r=Date.now(),e.apply(void 0,a)};s<t?n||(o=setTimeout(u,t-s)):u()}},Ho=1e6,Wo=function(e){return e.preventDefault()},zo=function(e){var t=e.root,n=e.props,r=t.query("GET_ID");r&&(t.element.id=r);var o=t.query("GET_CLASS_NAME");o&&o.split(" ").filter((function(e){return e.length})).forEach((function(e){t.element.classList.add(e)})),t.ref.label=t.appendChildView(t.createChildView(xr,Object.assign({},n,{translateY:null,caption:t.query("GET_LABEL_IDLE")}))),t.ref.list=t.appendChildView(t.createChildView(_r,{translateY:null})),t.ref.panel=t.appendChildView(t.createChildView(er,{name:"panel-root"})),t.ref.assistant=t.appendChildView(t.createChildView(qo,Object.assign({},n))),t.ref.data=t.appendChildView(t.createChildView(zr,Object.assign({},n))),t.ref.measure=fn("div"),t.ref.measure.style.height="100%",t.element.appendChild(t.ref.measure),t.ref.bounds=null,t.query("GET_STYLES").filter((function(e){return!U(e.value)})).map((function(e){var n=e.name,r=e.value;t.element.dataset[n]=r})),t.ref.widthPrevious=null,t.ref.widthUpdated=Vo((function(){t.ref.updateHistory=[],t.dispatch("DID_RESIZE_ROOT")}),250),t.ref.previousAspectRatio=null,t.ref.updateHistory=[];var i=window.matchMedia("(pointer: fine) and (hover: hover)").matches,a="PointerEvent"in window;t.query("GET_ALLOW_REORDER")&&a&&!i&&(t.element.addEventListener("touchmove",Wo,{passive:!1}),t.element.addEventListener("gesturestart",Wo))},Yo=function(e){var t=e.root,n=e.props,r=e.actions;if(ni({root:t,props:n,actions:r}),r.filter((function(e){return/^DID_SET_STYLE_/.test(e.type)})).filter((function(e){return!U(e.data.value)})).map((function(e){var n=e.type,r=e.data,o=Uo(n.substr(8).toLowerCase(),"_");t.element.dataset[o]=r.value,t.invalidateLayout()})),!t.rect.element.hidden){t.rect.element.width!==t.ref.widthPrevious&&(t.ref.widthPrevious=t.rect.element.width,t.ref.widthUpdated());var o=t.ref.bounds;o||(o=t.ref.bounds=Qo(t),t.element.removeChild(t.ref.measure),t.ref.measure=null);var i=t.ref,a=i.hopper,c=i.label,s=i.list,u=i.panel;a&&a.updateHopperState();var l=t.query("GET_PANEL_ASPECT_RATIO"),f=t.query("GET_ALLOW_MULTIPLE"),d=t.query("GET_TOTAL_ITEMS"),p=d===(f?t.query("GET_MAX_FILES")||Ho:1),h=r.find((function(e){return"DID_ADD_ITEM"===e.type}));if(p&&h){var m=h.data.interactionMethod;c.opacity=0,f?c.translateY=-40:m===be.API?c.translateX=40:m===be.BROWSE?c.translateY=40:c.translateY=30}else p||(c.opacity=1,c.translateX=0,c.translateY=0);var v=Ko(t),g=Xo(t),y=c.rect.element.height,b=!f||p?0:y,_=p?s.rect.element.marginTop:0,E=0===d?0:s.rect.element.marginBottom,w=b+_+g.visual+E,O=b+_+g.bounds+E;if(s.translateY=Math.max(0,b-s.rect.element.marginTop)-v.top,l){var I=t.rect.element.width,R=I*l;l!==t.ref.previousAspectRatio&&(t.ref.previousAspectRatio=l,t.ref.updateHistory=[]);var T=t.ref.updateHistory;T.push(I);var S=2;if(T.length>2*S)for(var P=T.length,C=P-10,L=0,D=P;D>=C;D--)if(T[D]===T[D-2]&&L++,L>=S)return;u.scalable=!1,u.height=R;var k=R-b-(E-v.bottom)-(p?_:0);g.visual>k?s.overflow=k:s.overflow=null,t.height=R}else if(o.fixedHeight){u.scalable=!1;var M=o.fixedHeight-b-(E-v.bottom)-(p?_:0);g.visual>M?s.overflow=M:s.overflow=null}else if(o.cappedHeight){var A=w>=o.cappedHeight,x=Math.min(o.cappedHeight,w);u.scalable=!0,u.height=A?x:x-v.top-v.bottom;var N=x-b-(E-v.bottom)-(p?_:0);w>o.cappedHeight&&g.visual>N?s.overflow=N:s.overflow=null,t.height=Math.min(o.cappedHeight,O-v.top-v.bottom)}else{var j=d>0?v.top+v.bottom:0;u.scalable=!0,u.height=Math.max(y,w-j),t.height=Math.max(y,O-j)}}},Ko=function(e){var t=e.ref.list.childViews[0].childViews[0];return t?{top:t.rect.element.marginTop,bottom:t.rect.element.marginBottom}:{top:0,bottom:0}},Xo=function(e){var t=0,n=0,r=e.ref.list,o=r.childViews[0],i=o.childViews.filter((function(e){return e.rect.element.height})),a=e.query("GET_ACTIVE_ITEMS").map((function(e){return i.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));if(0===a.length)return{visual:t,bounds:n};var c=o.rect.element.width,s=ur(o,a,r.dragCoordinates),u=a[0].rect.element,l=u.marginTop+u.marginBottom,f=u.marginLeft+u.marginRight,d=u.width+f,p=u.height+l,h=void 0!==s&&s>=0?1:0,m=a.find((function(e){return e.markedForRemoval&&e.opacity<.45}))?-1:0,v=a.length+h+m,g=Math.round(c/d);return 1===g?a.forEach((function(e){var r=e.rect.element.height+l;n+=r,t+=r*e.opacity})):(n=Math.ceil(v/g)*p,t=n),{visual:t,bounds:n}},Qo=function(e){var t=e.ref.measureHeight||null;return{cappedHeight:parseInt(e.style.maxHeight,10)||null,fixedHeight:0===t?null:t}},Jo=function(e,t){var n=e.query("GET_ALLOW_REPLACE"),r=e.query("GET_ALLOW_MULTIPLE"),o=e.query("GET_TOTAL_ITEMS"),i=e.query("GET_MAX_FILES"),a=t.length;return!r&&a>1||!!(J(i=r||n?i:1)&&o+a>i)&&(e.dispatch("DID_THROW_MAX_FILES",{source:t,error:Mt("warning",0,"Max files")}),!0)},$o=function(e,t,n){var r=e.childViews[0];return ur(r,t,{left:n.scopeLeft-r.rect.element.left,top:n.scopeTop-(e.rect.outer.top+e.rect.element.marginTop+e.rect.element.scrollTop)})},Zo=function(e){var t=e.query("GET_ALLOW_DROP"),n=e.query("GET_DISABLED"),r=t&&!n;if(r&&!e.ref.hopper){var o=Ro(e.element,(function(t){if(Jo(e,t))return!1;var n=e.query("GET_BEFORE_DROP_FILE")||function(){return!0};return!e.query("GET_DROP_VALIDATION")||t.every((function(t){return He("ALLOW_HOPPER_ITEM",t,{query:e.query}).every((function(e){return!0===e}))&&n(t)}))}),{filterItems:function(t){var n=e.query("GET_IGNORED_FILES");return t.filter((function(e){return!Kt(e)||!n.includes(e.name.toLowerCase())}))},catchesDropsOnPage:e.query("GET_DROP_ON_PAGE"),requiresDropOnElement:e.query("GET_DROP_ON_ELEMENT")});o.onload=function(t,n){var r=e.ref.list.childViews[0].childViews.filter((function(e){return e.rect.element.height})),o=e.query("GET_ACTIVE_ITEMS").map((function(e){return r.find((function(t){return t.id===e.id}))})).filter((function(e){return e}));e.dispatch("ADD_ITEMS",{items:t,index:$o(e.ref.list,o,n),interactionMethod:be.DROP}),e.dispatch("DID_DROP",{position:n}),e.dispatch("DID_END_DRAG",{position:n})},o.ondragstart=function(t){e.dispatch("DID_START_DRAG",{position:t})},o.ondrag=Vo((function(t){e.dispatch("DID_DRAG",{position:t})})),o.ondragend=function(t){e.dispatch("DID_END_DRAG",{position:t})},e.ref.hopper=o,e.ref.drip=e.appendChildView(e.createChildView(Gr))}else!r&&e.ref.hopper&&(e.ref.hopper.destroy(),e.ref.hopper=null,e.removeChildView(e.ref.drip))},ei=function(e,t){var n=e.query("GET_ALLOW_BROWSE"),r=e.query("GET_DISABLED"),o=n&&!r;o&&!e.ref.browser?e.ref.browser=e.appendChildView(e.createChildView(Dr,Object.assign({},t,{onload:function(t){if(Jo(e,t))return!1;e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:be.BROWSE})}})),0):!o&&e.ref.browser&&(e.removeChildView(e.ref.browser),e.ref.browser=null)},ti=function(e){var t=e.query("GET_ALLOW_PASTE"),n=e.query("GET_DISABLED"),r=t&&!n;r&&!e.ref.paster?(e.ref.paster=Do(),e.ref.paster.onload=function(t){e.dispatch("ADD_ITEMS",{items:t,index:-1,interactionMethod:be.PASTE})}):!r&&e.ref.paster&&(e.ref.paster.destroy(),e.ref.paster=null)},ni=F({DID_SET_ALLOW_BROWSE:function(e){var t=e.root,n=e.props;ei(t,n)},DID_SET_ALLOW_DROP:function(e){var t=e.root;Zo(t)},DID_SET_ALLOW_PASTE:function(e){var t=e.root;ti(t)},DID_SET_DISABLED:function(e){var t=e.root,n=e.props;Zo(t),ti(t),ei(t,n),t.query("GET_DISABLED")?t.element.dataset.disabled="disabled":t.element.removeAttribute("data-disabled")}}),ri=N({name:"root",read:function(e){var t=e.root;t.ref.measure&&(t.ref.measureHeight=t.ref.measure.offsetHeight)},create:zo,write:Yo,destroy:function(e){var t=e.root;t.ref.paster&&t.ref.paster.destroy(),t.ref.hopper&&t.ref.hopper.destroy(),t.element.removeEventListener("touchmove",Wo),t.element.removeEventListener("gesturestart",Wo)},mixins:{styles:["height"]}}),oi=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=null,o=Ye(),i=r(he(o),[at,ye(o)],[un,ge(o)]);i.dispatch("SET_OPTIONS",{options:t});var c=function(){document.hidden||i.dispatch("KICK")};document.addEventListener("visibilitychange",c);var s=null,u=!1,l=!1,f=null,d=null,p=function(){u||(u=!0),clearTimeout(s),s=setTimeout((function(){u=!1,f=null,d=null,l&&(l=!1,i.dispatch("DID_STOP_RESIZE"))}),500)};window.addEventListener("resize",p);var h=ri(i,{id:_e()}),m=!1,v=!1,g={_read:function(){u&&(d=window.innerWidth,f||(f=d),l||d===f||(i.dispatch("DID_START_RESIZE"),l=!0)),v&&m&&(m=null===h.element.offsetParent),m||(h._read(),v=h.rect.element.hidden)},_write:function(e){var t=i.processActionQueue().filter((function(e){return!/^SET_/.test(e.type)}));m&&!t.length||(w(t),m=h._write(e,t,l),xe(i.query("GET_ITEMS")),m&&i.processDispatchQueue())}},y=function(e){return function(t){var n={type:e};if(!t)return n;if(t.hasOwnProperty("error")&&(n.error=t.error?Object.assign({},t.error):null),t.status&&(n.status=Object.assign({},t.status)),t.file&&(n.output=t.file),t.source)n.file=t.source;else if(t.item||t.id){var r=t.item?t.item:i.query("GET_ITEM",t.id);n.file=r?Ae(r):null}return t.items&&(n.items=t.items.map(Ae)),/progress/.test(e)&&(n.progress=t.progress),t.hasOwnProperty("origin")&&t.hasOwnProperty("target")&&(n.origin=t.origin,n.target=t.target),n}},b={DID_DESTROY:y("destroy"),DID_INIT:y("init"),DID_THROW_MAX_FILES:y("warning"),DID_INIT_ITEM:y("initfile"),DID_START_ITEM_LOAD:y("addfilestart"),DID_UPDATE_ITEM_LOAD_PROGRESS:y("addfileprogress"),DID_LOAD_ITEM:y("addfile"),DID_THROW_ITEM_INVALID:[y("error"),y("addfile")],DID_THROW_ITEM_LOAD_ERROR:[y("error"),y("addfile")],DID_THROW_ITEM_REMOVE_ERROR:[y("error"),y("removefile")],DID_PREPARE_OUTPUT:y("preparefile"),DID_START_ITEM_PROCESSING:y("processfilestart"),DID_UPDATE_ITEM_PROCESS_PROGRESS:y("processfileprogress"),DID_ABORT_ITEM_PROCESSING:y("processfileabort"),DID_COMPLETE_ITEM_PROCESSING:y("processfile"),DID_COMPLETE_ITEM_PROCESSING_ALL:y("processfiles"),DID_REVERT_ITEM_PROCESSING:y("processfilerevert"),DID_THROW_ITEM_PROCESSING_ERROR:[y("error"),y("processfile")],DID_REMOVE_ITEM:y("removefile"),DID_UPDATE_ITEMS:y("updatefiles"),DID_ACTIVATE_ITEM:y("activatefile"),DID_REORDER_ITEMS:y("reorderfiles")},_=function(e){var t=Object.assign({pond:x},e);delete t.type,h.element.dispatchEvent(new CustomEvent("FilePond:"+e.type,{detail:t,bubbles:!0,cancelable:!0,composed:!0}));var n=[];e.hasOwnProperty("error")&&n.push(e.error),e.hasOwnProperty("file")&&n.push(e.file);var r=["type","error","file"];Object.keys(e).filter((function(e){return!r.includes(e)})).forEach((function(t){return n.push(e[t])})),x.fire.apply(x,[e.type].concat(n));var o=i.query("GET_ON"+e.type.toUpperCase());o&&o.apply(void 0,n)},w=function(e){e.length&&e.filter((function(e){return b[e.type]})).forEach((function(e){var t=b[e.type];(Array.isArray(t)?t:[t]).forEach((function(t){"DID_INIT_ITEM"===e.type?_(t(e.data)):setTimeout((function(){_(t(e.data))}),0)}))}))},O=function(e){return i.dispatch("SET_OPTIONS",{options:e})},I=function(e){return i.query("GET_ACTIVE_ITEM",e)},R=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PREPARE",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},T=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new e((function(e,r){C([{source:t,options:n}],{index:n.index}).then((function(t){return e(t&&t[0])})).catch(r)}))},S=function(e){return e.file&&e.id},P=function(e,t){return"object"!=typeof e||S(e)||t||(t=e,e=void 0),i.dispatch("REMOVE_ITEM",Object.assign({},t,{query:e})),null===i.query("GET_ACTIVE_ITEM",e)},C=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return new e((function(e,t){var r=[],o={};if(q(n[0]))r.push.apply(r,n[0]),Object.assign(o,n[1]||{});else{var a=n[n.length-1];"object"!=typeof a||a instanceof Blob||Object.assign(o,n.pop()),r.push.apply(r,n)}i.dispatch("ADD_ITEMS",{items:r,index:o.index,interactionMethod:be.API,success:e,failure:t})}))},L=function(){return i.query("GET_ACTIVE_ITEMS")},D=function(t){return new e((function(e,n){i.dispatch("REQUEST_ITEM_PROCESSING",{query:t,success:function(t){e(t)},failure:function(e){n(e)}})}))},k=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n,i=o.length?o:L();return e.all(i.map(R))},M=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=Array.isArray(n[0])?n[0]:n;if(!o.length){var i=L().filter((function(e){return!(e.status===Ne.IDLE&&e.origin===je.LOCAL)&&e.status!==Ne.PROCESSING&&e.status!==Ne.PROCESSING_COMPLETE&&e.status!==Ne.PROCESSING_REVERT_ERROR}));return e.all(i.map(D))}return e.all(o.map(D))},A=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var o,i=Array.isArray(n[0])?n[0]:n;"object"==typeof i[i.length-1]?o=i.pop():Array.isArray(n[0])&&(o=n[1]);var a=L();return i.length?i.map((function(e){return E(e)?a[e]?a[e].id:null:e})).filter((function(e){return e})).map((function(e){return P(e,o)})):e.all(a.map((function(e){return P(e,o)})))},x=Object.assign({},De(),{},g,{},ve(i,o),{setOptions:O,addFile:T,addFiles:C,getFile:I,processFile:D,prepareFile:R,removeFile:P,moveFile:function(e,t){return i.dispatch("MOVE_ITEM",{query:e,index:t})},getFiles:L,processFiles:M,removeFiles:A,prepareFiles:k,sort:function(e){return i.dispatch("SORT",{compare:e})},browse:function(){var e=h.element.querySelector("input[type=file]");e&&e.click()},destroy:function(){x.fire("destroy",h.element),i.dispatch("ABORT_ALL"),h._destroy(),window.removeEventListener("resize",p),document.removeEventListener("visibilitychange",c),i.dispatch("DID_DESTROY")},insertBefore:function(e){return B(h.element,e)},insertAfter:function(e){return G(h.element,e)},appendTo:function(e){return e.appendChild(h.element)},replaceElement:function(e){B(h.element,e),e.parentNode.removeChild(e),n=e},restoreElement:function(){n&&(G(n,h.element),h.element.parentNode.removeChild(h.element),n=null)},isAttachedTo:function(e){return h.element===e||n===e},element:{get:function(){return h.element}},status:{get:function(){return i.query("GET_STATUS")}}});return i.dispatch("DID_INIT"),a(x)},ii=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return i(Ye(),(function(e,n){t[e]=n[0]})),oi(Object.assign({},t,{},e))},ai=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},ci=function(e){return Uo(e.replace(/^data-/,""))},si=function e(t,n){i(n,(function(n,r){i(t,(function(e,o){var i=new RegExp(n);if(i.test(e)&&(delete t[e],!1!==r))if(Y(r))t[r]=o;else{var a=r.group;ie(r)&&!t[a]&&(t[a]={}),t[a][ai(e.replace(i,""))]=o}})),r.mapping&&e(t[r.group],r.mapping)}))},ui=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];i(e.attributes,(function(t){n.push(e.attributes[t])}));var r=n.filter((function(e){return e.name})).reduce((function(t,n){var r=c(e,n.name);return t[ci(n.name)]=r===n.name||r,t}),{});return si(r,t),r},li=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={"^class$":"className","^multiple$":"allowMultiple","^capture$":"captureMethod","^webkitdirectory$":"allowDirectoriesOnly","^server":{group:"server",mapping:{"^process":{group:"process"},"^revert":{group:"revert"},"^fetch":{group:"fetch"},"^restore":{group:"restore"},"^load":{group:"load"}}},"^type$":!1,"^files$":!1};He("SET_ATTRIBUTE_TO_OPTION_MAP",n);var r=Object.assign({},t),o=ui("FIELDSET"===e.nodeName?e.querySelector("input[type=file]"):e,n);Object.keys(o).forEach((function(e){ie(o[e])?(ie(r[e])||(r[e]={}),Object.assign(r[e],o[e])):r[e]=o[e]})),r.files=(t.files||[]).concat(Array.from(e.querySelectorAll("input:not([type=file])")).map((function(e){return{source:e.value,options:{type:e.dataset.type}}})));var i=ii(r);return e.files&&Array.from(e.files).forEach((function(e){i.addFile(e)})),i.replaceElement(e),i},fi=function(){return n(arguments.length<=0?void 0:arguments[0])?li.apply(void 0,arguments):ii.apply(void 0,arguments)},di=["fire","_read","_write"],pi=function(e){var t={};return ke(e,t,di),t},hi=function(e,t){return e.replace(/(?:{([a-zA-Z]+)})/g,(function(e,n){return t[n]}))},mi=function(e){var t=new Blob(["(",e.toString(),")()"],{type:"application/javascript"}),n=URL.createObjectURL(t),r=new Worker(n);return{transfer:function(e,t){},post:function(e,t,n){var o=_e();r.onmessage=function(e){e.data.id===o&&t(e.data.message)},r.postMessage({id:o,message:e},n)},terminate:function(){r.terminate(),URL.revokeObjectURL(n)}}},vi=function(t){return new e((function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(e){n(e)},r.src=t}))},gi=function(e,t){var n=e.slice(0,e.size,e.type);return n.lastModifiedDate=e.lastModifiedDate,n.name=t,n},yi=function(e){return gi(e,e.name)},bi=[],_i=function(e){if(!bi.includes(e)){bi.push(e);var t=e({addFilter:We,utils:{Type:qe,forin:i,isString:Y,isFile:Kt,toNaturalFileSize:yn,replaceInString:hi,getExtensionFromFilename:pt,getFilenameWithoutExtension:zt,guesstimateMimeType:Jr,getFileFromBlob:gt,getFilenameFromURL:dt,createRoute:F,createWorker:mi,createView:N,createItemAPI:Ae,loadImage:vi,copyFile:yi,renameFile:gi,createBlob:bt,applyFilterChain:Ve,text:dn,getNumericAspectRatioFromString:Je},views:{fileActionButton:gn}});ze(t.options)}},Ei=function(){return"[object OperaMini]"===Object.prototype.toString.call(window.operamini)},wi=function(){return"Promise"in window},Oi=function(){return"slice"in Blob.prototype},Ii=function(){return"URL"in window&&"createObjectURL"in window.URL},Ri=function(){return"visibilityState"in document},Ti=function(){return"performance"in window},Si=function(){return"supports"in(window.CSS||{})},Pi=function(){return/MSIE|Trident/.test(window.navigator.userAgent)},Ci=(xn=v()&&!Ei()&&Ri()&&wi()&&Oi()&&Ii()&&Ti()&&(Si()||Pi()),function(){return xn}),Li={apps:[]},Di="filepond",ki=function(){};if(t.Status={},t.FileStatus={},t.FileOrigin={},t.OptionTypes={},t.create=ki,t.destroy=ki,t.parse=ki,t.find=ki,t.registerPlugin=ki,t.getOptions=ki,t.setOptions=ki,Ci()){j((function(){Li.apps.forEach((function(e){return e._read()}))}),(function(e){Li.apps.forEach((function(t){return t._write(e)}))}));var Mi=function e(){document.dispatchEvent(new CustomEvent("FilePond:loaded",{detail:{supported:Ci,create:t.create,destroy:t.destroy,parse:t.parse,find:t.find,registerPlugin:t.registerPlugin,setOptions:t.setOptions}})),document.removeEventListener("DOMContentLoaded",e)};"loading"!==document.readyState?setTimeout((function(){return Mi()}),0):document.addEventListener("DOMContentLoaded",Mi);var Ai=function(){return i(Ye(),(function(e,n){t.OptionTypes[e]=n[1]}))};t.Status=Object.assign({},Ze),t.FileOrigin=Object.assign({},je),t.FileStatus=Object.assign({},Ne),t.OptionTypes={},Ai(),t.create=function(){var e=fi.apply(void 0,arguments);return e.on("destroy",t.destroy),Li.apps.push(e),pi(e)},t.destroy=function(e){var t=Li.apps.findIndex((function(t){return t.isAttachedTo(e)}));return t>=0&&(Li.apps.splice(t,1)[0].restoreElement(),!0)},t.parse=function(e){return Array.from(e.querySelectorAll("."+Di)).filter((function(e){return!Li.apps.find((function(t){return t.isAttachedTo(e)}))})).map((function(e){return t.create(e)}))},t.find=function(e){var t=Li.apps.find((function(t){return t.isAttachedTo(e)}));return t?pi(t):null},t.registerPlugin=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(_i),Ai()},t.getOptions=function(){var e={};return i(Ye(),(function(t,n){e[t]=n[0]})),e},t.setOptions=function(e){return ie(e)&&(Li.apps.forEach((function(t){t.setOptions(e)})),Ke(e)),t.getOptions()}}t.supported=Ci,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(11))},function(e,t,n){},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasOverview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(25);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasOverview=function(_OpenStadComponent){_inherits(IdeasOverview,_OpenStadComponent);var _super=_createSuper(IdeasOverview);function IdeasOverview(e){var t;_classCallCheck(this,IdeasOverview);var n={idea:{showVoteButtons:!0,titleField:"title",summaryField:"summary"},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},vote:{isViewable:!0,voteValues:[{value:"yes"},{value:"no"}]},types:[],typeField:"typeId"};switch(e.config.display&&e.config.display.type){case"list":n.display={columns:1,showStatusLabel:!1,showTheme:!1,showArea:!1,showVoteProgressbar:!1,showStats:!0,showTypeIcon:!0};break;case"grid":n.display={columns:3,showStatusLabel:!1,showTheme:!0,showArea:!0,showVoteProgressbar:!1,showStats:!1,showTypeIcon:!1};break;default:n.display={type:"tiles",columns:4,showStatusLabel:!0,showTheme:!1,showArea:!1,showVoteProgressbar:!0,showStats:!0,showTypeIcon:!1}}return(t=_super.call(this,e,n)).state={idea:t.props.idea||{}},t}return _createClass(IdeasOverview,[{key:"dispatchIdeaTileClick",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOver",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-over",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchIdeaTileMouseOut",value:function(e,t){e.stopPropagation();var n=new window.CustomEvent("osc-idea-tile-mouse-out",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"render",value:function render(){var self=this,idea=self.state.idea,statusLabelHTML=null;self.config.display.showStatusLabel;var themeAndAreaHTML=null;if(self.config.display.showTheme||self.config.display.showArea){var areaHTML=null;self.config.display.showArea&&idea.extraData.area&&(areaHTML=React.createElement("div",{className:"osc-area"},idea.extraData.area)),themeAndAreaHTML=React.createElement("div",{className:"osc-theme-and-area"},self.config.display.showTheme&&idea.extraData.theme&&React.createElement("div",{className:"osc-theme"},idea.extraData.theme),self.config.display.showTheme&&idea.extraData.theme&&self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-divider"}),self.config.display.showArea&&idea.extraData.area&&React.createElement("div",{className:"osc-area"},idea.extraData.area))}var statsHTML=null;if(self.config.display.showStats){var stats=[];this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"yes"===e.value}))&&stats.push(React.createElement("div",{className:"osc-yes-votes"},idea.yes||0)),this.config.idea.showVoteButtons&&1==this.config.vote.isViewable&&this.config.vote.voteValues.find((function(e){return"no"===e.value}))&&stats.push(React.createElement("div",{className:"osc-no-votes"},idea.no||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&stats.push(React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),statsHTML=React.createElement("div",{className:"osc-idea-stats-container"},stats.map((function(e,t){return React.createElement("div",{className:"osc-stat",key:"osc-stat-".concat(idea.id,"-").concat(t)},e)})))}var voteProgressHTML=null;self.config.display.showVoteProgressbar&&(voteProgressHTML=React.createElement("div",null,"GENOEGSTEMMNBALK"));var typeIconHTML=null;if(self.config.display.showTypeIcon){var ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return ideaTypeValue&&(e.id==ideaTypeValue||e.name==ideaTypeValue)}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});try{"string"==typeof typeDef.listicon&&(typeDef.listicon=JSON.parse(typeDef.listicon))}catch(e){}typeDef.listicon.html&&(typeIconHTML=React.createElement("div",{className:"osc-typeicon"},React.createElement("div",{className:"osc-typeicon-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))}return React.createElement("div",{id:self.divId,className:"osc-idea-tile osc-displaytype-".concat(self.config.display.type," ").concat(self.props.className||""),onClick:function(e){return self.dispatchIdeaTileClick(e,idea)},onMouseOver:function(e){return self.dispatchIdeaTileMouseOver(e,idea)},onMouseOut:function(e){return self.dispatchIdeaTileMouseOut(e,idea)}},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-idea-tile-content"},statusLabelHTML,React.createElement("h4",{className:"osc-title"},eval("idea.".concat(self.config.idea.titleField))),themeAndAreaHTML,React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.idea.summaryField))),voteProgressHTML,statsHTML),typeIconHTML)}}]),IdeasOverview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(3),merge__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(merge__WEBPACK_IMPORTED_MODULE_0__),react_device_detect__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(113),react_device_detect__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react_device_detect__WEBPACK_IMPORTED_MODULE_1__),_filterbar_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(123),_infobar_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(106),_preview_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(112),_map_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(137),_component_index_jsx__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(2),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(24),react_redux__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(42),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(90),redux__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(8);function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var mapDispatch={addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_8__.a},OpenStadComponentIdeasOnMap=function(_OpenStadComponent){_inherits(OpenStadComponentIdeasOnMap,_OpenStadComponent);var _super=_createSuper(OpenStadComponentIdeasOnMap);function OpenStadComponentIdeasOnMap(e){var t;_classCallCheck(this,OpenStadComponentIdeasOnMap);var n=_assertThisInitialized(t=_super.call(this,e,{display:{type:"complete",width:null,height:null},canSelectLocation:!0,types:[],typeField:null,titleField:"title",summaryField:"summary",user:{},sort:{},api:{url:null,headers:null,isUserLoggedIn:!1},idea:{canAddNewIdeas:!0},content:{},search:{addresssesMunicipality:"amsterdam"}}));return n.config.ideaName=n.config.ideaName||"Inzendingen",n.config.doSearchFunction=n.config.doSearchFunction||n.doSearch.bind(n),n.config.typeField=n.config.typeField||"extraData.theme",n.config.types&&n.config.types.length&&n.config.types.forEach((function(e){if(e.value&&!e.name&&(e.name=e.value),e.mapicon&&"string"==typeof e.mapicon)try{e.mapicon=JSON.parse(e.mapicon)}catch(t){console.log(e),console.log(t)}if(e.listicon&&"string"==typeof e.listicon)try{e.listicon=JSON.parse(e.listicon)}catch(t){console.log(e),console.log(t)}if(e.buttonicon&&"string"==typeof e.buttonicon)try{e.buttonicon=JSON.parse(e.buttonicon)}catch(t){console.log(e),console.log(t)}})),n.state={status:"default",infobarOnMobileIsOpen:!1,ideas:[],visibleIdeas:[],listedIdeas:[],selectedIdea:null,selectedLocation:null,currentEditIdea:null},t}return _createClass(OpenStadComponentIdeasOnMap,[{key:"componentDidMount",value:function(){var e=this;window.addEventListener("hashchange",(function(t){var n=window.location.hash.match(/(\w)(\d+)/);if(n){var r=n[2],o=e.state.ideas&&e.state.ideas.find((function(e){return e.id==r}));"D"==n[1]&&e.showIdeaDetails(o),n[1]}}),!1),document.addEventListener("osc-map-is-ready",(function(t){e.fetchData({}),e.map.map.on("zoomend",(function(){e.onChangeMapBoundaries()})),e.map.map.on("moveend",(function(){e.onChangeMapBoundaries()}))})),document.addEventListener("osc-map-click",(function(t){e.onMapClick(t.detail)})),document.addEventListener("osc-map-marker-click",(function(t){e.onMarkerClick(t.detail)})),document.addEventListener("osc-map-cluster-click",(function(t){e.onClusterClick(t.detail)})),document.addEventListener("osc-ideas-filter-onchange",(function(t){e.onChangeFilter(t.detail)})),document.addEventListener("osc-set-selected-idea",(function(t){e.onUpdateSelectedIdea(t.detail)})),document.addEventListener("osc-set-selected-location",(function(t){e.setSelectedLocation(null)})),document.addEventListener("osc-new-idea-click",(function(t){e.onNewIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-selected-idea-click",(function(t){e.onSelectedIdeaClick({idea:t.detail.idea})})),document.addEventListener("osc-click-mobile-switcher",(function(t){e.onClickMobileSwitcher()})),document.addEventListener("osc-idea-tile-click",(function(t){e.onIdeaClick(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-over",(function(t){e.onTileMouseOver(t.detail.idea)})),document.addEventListener("osc-idea-tile-mouse-out",(function(t){e.onTileMouseOut(t.detail.idea)})),document.addEventListener("osc-idea-liked",(function(t){e.onIdeaLiked(t.detail)})),document.addEventListener("osc-new-reaction-stored",(function(t){e.onReactionStored(t.detail,!0)})),document.addEventListener("osc-reaction-edited",(function(t){e.onReactionStored(t.detail)})),document.addEventListener("osc-reaction-deleted",(function(t){e.onReactionDeleted(t.detail)})),document.addEventListener("osc-edit-idea-button-click",(function(t){e.onEditIdeaClick(t.detail)})),document.addEventListener("osc-idea-deleted",(function(t){e.onIdeaDeleted(t.detail)})),document.addEventListener("osc-idea-stored",(function(t){document.location.href="#",e.onIdeaStored(t.detail.idea)}))}},{key:"fetchData",value:function(e){for(var t=e.showIdeaDetails,n=e.showIdeaSelected,r=this,o="".concat(r.config.api.url,"/api/site/").concat(r.config.siteId,"/idea?includeVoteCount=1&includeArgsCount=1&includeUser=1"),i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_7__.a.api.getHeaders(r.config);r.map.markers.length>0;){var a=r.map.markers[0];r.map.removeMarker(a)}r.map.markers=[],fetch(o,{headers:i}).then((function(e){return e.json()})).then((function(e){t=t||window.location.hash.match(/^#D(\d+)/)&&window.location.hash.match(/^#D(\d+)/)[1],n=n||window.location.hash.match(/^#S(\d+)/)&&window.location.hash.match(/^#S(\d+)/)[1];var o=e.filter((function(e){return e.location}));r.updateListedIdeas({ideas:o,sortOrder:r.config.sort.defaultValue}),o.map((function(e){e.id==t&&(t=e),e.id==n&&(n=e),e.image=e.posterImage&&e.posterImage.key||e.extraData&&e.extraData.images&&e.extraData.images[0]||"https://stemvanwest.amsterdam.nl/img/placeholders/idea.jpg",r.map.addIdea(e)})),r.map.setBoundsAndCenter(),r.setState({ideas:o},(function(){if(r.setInfobarOnMobileIsOpen(r.config.startWithListOpenOnMobile),"object"==_typeof(n)&&null!=n&&(r.setCurrentEditIdea(null),r.setSelectedIdea(n,(function(){}))),"object"==_typeof(t)&&null!=t&&r.showIdeaDetails(t),window.location.hash.match(/^#newidea/)){var e=window.location.hash.match(/&([^&]+)=([^&]+)/g),o={};e&&e.forEach((function(e){var t=_slicedToArray(e.split("="),2),n=t[0],r=t[1];n=n.substring(1,n.length),o[n]=decodeURIComponent(r);try{o[n]=JSON.parse(o[n])}catch(e){}})),r.setCurrentEditIdea(o,(function(e){e.location&&r.setSelectedLocation(e.location),r.showIdeaForm()}))}r.onChangeMapBoundaries()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"updateListedIdeas",value:function(e){var t=e.ideas,n=void 0===t?this.getVisibleIdeas():t,r=e.sortOrder,o=void 0===r?this.state.currentSortOrder:r,i=e.center,a=void 0===i?{lat:52.37104644463586,lng:4.900402911007405}:i,c=e.maxLength;o&&(n=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_7__.a.ideasSort({ideas:n,sortOrder:o,center:a})),c&&(n=n.splice(0,c)),this.setState({listedIdeas:n})}},{key:"setSelectedIdea",value:function(e,t){var n=this;n.setCurrentEditIdea(null),n.setSelectedLocation(null);var r=e?"idea-selected":n.state.status;n.setState({selectedIdea:e,status:r},(function(){if(e?(n.map.fadeMarkers({exception:e}),n.updateListedIdeas({ideas:n.state.ideas.filter((function(t){return t.id!=e.id})),sortOrder:"distance",center:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]},maxLength:5})):(n.map&&n.map.unfadeAllMarkers(),n.updateListedIdeas({ideas:n.getVisibleIdeas()})),t)return t(e)}))}},{key:"setSelectedLocation",value:function(e,t){var n=this;if(e&&e.coordinates&&(e.lat=e.coordinates[0],e.lng=e.coordinates[1]),n.map&&n.map.setSelectedLocation(e),e){e.isPointInPolygon=n.map.isPointInPolygon(e,n.config.map.polygon),n.map.fadeMarkers({});var r=n.state.selectedIdea&&n.state.selectedIdea.id;n.updateListedIdeas({ideas:n.state.ideas.filter((function(e){return e.id!=r})),sortOrder:"distance",center:e,maxLength:5}),n.setState({selectedLocation:e},(function(){n.state.currentEditIdea&&n.updateCurrentEditIdea({location:e},(function(e){n.updateLocationAddress(e.location)})),t&&t(n.state.selectedLocation)}));var o=new window.CustomEvent("osc-update-location",{detail:{location:e}});document.dispatchEvent(o)}else n.setState({selectedLocation:null},(function(){n.map.unfadeAllMarkers(),n.updateListedIdeas({ideas:n.getVisibleIdeas()});var r=new window.CustomEvent("osc-update-location",{detail:{location:e}});document.dispatchEvent(r),t&&t(n.state.selectedLocation)}))}},{key:"updateLocationAddress",value:function(e){e&&(e.coordinates&&(e.lat=e.coordinates[0],e.lng=e.coordinates[1]),this.map.getPointInfo(e,null,(function(t,n){e.address=t&&t._display||"Geen adres gevonden";var r=new window.CustomEvent("osc-update-location",{detail:{location:e}});document.dispatchEvent(r)})))}},{key:"showIdeaDetails",value:function(e){var t=this;t.setSelectedIdea(e),t.openInfobarOnMobile(),t.setState({status:"idea-details"},(function(){t.map.hideMarkers({exception:{location:{lat:e.location.coordinates[0],lng:e.location.coordinates[1]}}})}))}},{key:"hideIdeaDetails",value:function(){var e=this;e.setState({status:"idea-selected"},(function(){var t=e.state.selectedIdea;t&&e.updateListedIdeas({ideas:e.state.ideas.filter((function(e){return e.id!=t.id})),sortOrder:"distance",center:{lat:t.location.coordinates[0],lng:t.location.coordinates[1]},maxLength:5}),e.map.showMarkers({})}))}},{key:"setCurrentEditIdea",value:function(e,t){var n=e;return this.setState({currentEditIdea:n},(function(){if(t)return t(n)}))}},{key:"updateCurrentEditIdea",value:function(e,t){var n=this.state.currentEditIdea;return n=merge__WEBPACK_IMPORTED_MODULE_0___default.a.recursive(n,e),this.setCurrentEditIdea(n,t)}},{key:"showIdeaForm",value:function(){var e=this,t=e.state.currentEditIdea;if(e.config.idea.formUrl){var n=e.config.idea.formUrl;n=(n=(n=(n=n.replace(/:ideaId/,"number"==typeof t.id?t.id:"")).replace(/:location/,t.location?JSON.stringify({lat:t.location.coordinates[0],lng:t.location.coordinates[1]}):"")).replace(/:typeId/,t.typeId)).replace(/:address/,t.address),document.location.href=n}else e.setState({status:"idea-form"},(function(){e.map.map.invalidateSize(),e.map.hideMarkers({exception:{location:t&&t.location&&{lat:t.location.coordinates[0],lng:t.location.coordinates[1]}||e.map.selectedLocation}});var n=t.location||e.state.selectedLocation;e.updateLocationAddress(n)}))}},{key:"hideIdeaForm",value:function(){var e=this;if(this.state.currentEditIdea&&"number"==typeof this.state.currentEditIdea.id){var t=e.state.ideas.find((function(t){return t.id==e.state.currentEditIdea.id}));e.showIdeaDetails(t),document.location.href="#D"+t.id}else{var n=e.state.currentEditIdea&&e.state.currentEditIdea.location||e.state.selectedLocation;n?(n.isPointInPolygon=this.map.isPointInPolygon(n,this.config.map.polygon),e.setState({status:"location-selected"},(function(){e.map.showMarkers({})}))):e.setState({status:"default"},(function(){e.map.showMarkers({}),e.setCurrentEditIdea(null)}))}}},{key:"setInfobarOnMobileIsOpen",value:function(e,t){this.setState({infobarOnMobileIsOpen:e}),t&&t()}},{key:"openInfobarOnMobile",value:function(e){this.setState({infobarOnMobileIsOpen:!0}),e&&e()}},{key:"closeInfobarOnMobile",value:function(e){this.setState({infobarOnMobileIsOpen:!1}),e&&e()}},{key:"doSearch",value:function doSearch(searchValue,callback){var self=this,searchValueLc=searchValue.toLowerCase(),searchResult={ideas:[],locations:[]};function onClickAddress(e){fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/lookup?fq=gemeentenaam:".concat(self.config.search.addresssesMunicipality,"&&id=").concat(e),{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){if(e&&e.response&&e.response.docs&&e.response.docs[0]){var t=e.response.docs[0].centroide_ll.match(/POINT\((\d+\.\d+) (\d+\.\d+)\)/);self.map.map.panTo(new L.LatLng(t[2],t[1])),self.onMapClick({latlng:{lat:t[2],lng:t[1]}},!0)}})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}this.state.ideas.forEach((function(idea){var title=eval("idea.".concat(self.config.titleField))||"",titlelLc=title.toLowerCase(),summary=eval("idea.".concat(self.config.summaryField))||"",summaryLc=summary.toLowerCase();(titlelLc.match(searchValueLc)||summaryLc.match(searchValueLc))&&searchResult.ideas.push({text:title,onClick:function(){self.onUpdateSelectedIdea(idea)}})})),fetch("https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?rows=5&fq=gemeentenaam:".concat(self.config.search.addresssesMunicipality,"&fq=*:*&q=").concat(searchValueLc),{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){e&&e.response&&e.response.docs&&e.response.docs.length&&(searchResult.locations=e.response.docs.map((function(e){return{text:e.weergavenaam,onClick:function(){onClickAddress(e.id)}}}))),callback(searchValue,searchResult)})).catch((function(e){console.log("Search failed:",e),callback(searchValue,searchResult)}))}},{key:"getVisibleIdeas",value:function(){var e=this.map.getVisibleIdeas();return this.setState({visibleIdeas:e}),e}},{key:"onMapClick",value:function(e,t){var n=this;if(1==this.state.infobarOnMobileIsOpen&&react_device_detect__WEBPACK_IMPORTED_MODULE_1__.isMobile)this.closeInfobarOnMobile();else switch(this.state.status){case"idea-details":break;case"idea-form":this.map.isPointInPolygon(e.latlng,this.config.map.polygon)&&this.setSelectedLocation(e.latlng);break;default:if(!this.state.selectedIdea&&!this.state.selectedLocation||t){if(!this.config.canSelectLocation)break;this.setSelectedLocation(e.latlng,(function(e){n.setState({status:"location-selected"}),n.updateLocationAddress(e)}))}else this.setState({status:"default"}),document.location.href="#",this.setSelectedIdea(null),this.updateListedIdeas({ideas:this.getVisibleIdeas()});this.map.updateFading(),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onMarkerClick",value:function(e){if(1==this.state.infobarOnMobileIsOpen&&react_device_detect__WEBPACK_IMPORTED_MODULE_1__.isMobile)this.closeInfobarOnMobile();else switch(this.state.status){case"idea-details":case"idea-form":break;default:this.state.currentEditIdea||this.state.selectedLocation?(this.setSelectedIdea(null),this.setState({status:"default"}),this.setCurrentEditIdea(null),this.onUpdateSelectedIdea(null)):this.onUpdateSelectedIdea(e.target.data),document.querySelector("#osc-ideas-on-map-info").scrollTo(0,0)}}},{key:"onClusterClick",value:function(e){1==this.state.infobarOnMobileIsOpen&&react_device_detect__WEBPACK_IMPORTED_MODULE_1__.isMobile?this.closeInfobarOnMobile():(this.setState({status:"default"}),this.setCurrentEditIdea(null),this.setSelectedIdea(null))}},{key:"onChangeMapBoundaries",value:function(){var e=this;if(e.map)switch(e.map.updateFading(),e.state.status){case"idea-details":case"idea-form":break;case"idea-selected":case"location-selected":if(e.infobar){var t=e.state.selectedIdea||e.state.currentEditIdea;t&&e.updateListedIdeas({ideas:e.state.ideas.filter((function(e){return e.id!=t.id})),sortOrder:"distance",center:{lat:t.location.coordinates[0],lng:t.location.coordinates[1]},maxLength:5})}break;default:e.infobar&&e.updateListedIdeas({ideas:e.getVisibleIdeas()})}}},{key:"onUpdateSelectedIdea",value:function(e){var t=this,n=e?"idea-selected":"default";document.location.href=e?"#S"+e.id:"#",this.setState({status:n},(function(){t.setSelectedIdea(e)}))}},{key:"onIdeaClick",value:function(e){document.location.href="#D"+e.id}},{key:"onEditIdeaClick",value:function(e){var t=this;t.setCurrentEditIdea(e,(function(e){t.showIdeaForm()}))}},{key:"onIdeaDeleted",value:function(e){var t=this;t.setCurrentEditIdea(null),t.setSelectedIdea(null),t.setSelectedLocation(null),t.setState({status:"default"},(function(){t.map.setBoundsAndCenter(),t.fetchData({})}))}},{key:"onDeleteIdeaClick",value:function(e){console.log("Delete idea",e.id)}},{key:"onSelectedIdeaClick",value:function(e){var t=e.idea;document.location.href="#D"+t.id}},{key:"onNewIdeaClick",value:function(e){var t=e.idea,n=this,r=merge__WEBPACK_IMPORTED_MODULE_0___default.a.recursive(this.state.currentEditIdea||{},this.state.selectedLocation);r.typeId=t&&t.typeId,n.setCurrentEditIdea(r,(function(e){n.showIdeaForm()}))}},{key:"onIdeaStored",value:function(e){this.setCurrentEditIdea(null),this.fetchData({showIdeaDetails:e.id})}},{key:"onIdeaLiked",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).yes+=e.change}},{key:"onReactionStored",value:function(e,t){t&&this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount++}},{key:"onReactionDeleted",value:function(e){this.state.ideas.find((function(t){return t.id==e.ideaId})).argCount--}},{key:"onChangeFilter",value:function(e){this.setSelectedIdea(null),this.setCurrentEditIdea(null),this.setSelectedLocation(null),this.setState({status:"default"}),this.onChangeMapBoundaries()}},{key:"onTileMouseOver",value:function(e){this.map.fadeMarkers({exception:e}),this.map.updateFading()}},{key:"onTileMouseOut",value:function(e){this.map.unfadeAllMarkers(),this.state.selectedIdea&&this.map.fadeMarkers({exception:this.state.selectedIdea}),this.map.selectedLocation&&this.map.fadeMarkers({}),this.map.updateFading()}},{key:"onClickBackToOverview",value:function(e){this.hideIdeaDetails(),document.location.href="#S"+this.state.selectedIdea.id}},{key:"onClickMobileSwitcher",value:function(){var e=this,t=this;t.setInfobarOnMobileIsOpen(!this.state.infobarOnMobileIsOpen,(function(n){if("location-selected"==t.state.status||"idea-selected"==e.state.status){t.state.selectedIdea||t.state.currentEditIdea;t.map.setBoundsAndCenter()}}))}},{key:"render",value:function render(){var _this5=this,infoHTML=null,filterHTML=null,mobilePopupHTML=null;switch(this.state.status){case"idea-details":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{config:this.config,displayType:"details",selectedIdea:this.state.selectedIdea,idea:this.state.selectedIdea,className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.onClickBackToOverview()}},"Terug naar overzicht"));break;case"idea-form":infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{config:this.config,displayType:"form",selectedIdea:this.state.selectedIdea,idea:_objectSpread(_objectSpread({},this.state.currentEditIdea),{},{user:this.state.currentEditIdea&&this.state.currentEditIdea.user||this.config.user}),className:"osc-ideas-on-map-info",ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement("div",{className:"osc-ideas-filterbar"},React.createElement("div",{className:"osc-backbutton",onClick:function(){return _this5.hideIdeaForm()}},"Terug naar ",this.state.currentEditIdea&&"number"==typeof this.state.currentEditIdea.id?"idee":"overzicht"));break;case"location-selected":case"idea-selected":if("location-selected"==this.state.status){var location=this.state.selectedLocation||this.state.currentEditIdea&&this.state.currentEditIdea.location||{};location.isPointInPolygon=this.map.isPointInPolygon(location,this.config.map.polygon),location.isPointInPolygon&&(mobilePopupHTML=React.createElement(_preview_jsx__WEBPACK_IMPORTED_MODULE_4__.a,{config:_objectSpread(_objectSpread({},this.config),{},{display:{type:"mobilePreview"}}),selectedLocation:location}))}else mobilePopupHTML=React.createElement("div",{className:"osc-mobile-popup osc-clickable",onClick:function(){_this5.openInfobarOnMobile(),document.location.href="#D"+_this5.state.selectedIdea.id}},React.createElement("div",{className:"osc-image",style:{backgroundImage:"url(".concat(this.state.selectedIdea&&this.state.selectedIdea.image,")")}}),eval(this.state.selectedIdea&&"this.state.selectedIdea.".concat(this.config.titleField)));infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{config:this.config,selectedIdea:this.state.selectedIdea,selectedLocation:this.state.selectedLocation,currentEditIdea:this.state.currentEditIdea,ideas:this.state.listedIdeas,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",infobarOnMobileIsOpen:this.state.infobarOnMobileIsOpen,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_2__.a,{config:this.config,className:"osc-ideas-filterbar"});break;default:infoHTML=React.createElement(_infobar_jsx__WEBPACK_IMPORTED_MODULE_3__.a,{config:this.config,selectedIdea:this.state.selectedIdea,ideas:this.state.listedIdeas,id:"osc-ideas-on-map-info",className:"osc-ideas-on-map-info",infobarOnMobileIsOpen:this.state.infobarOnMobileIsOpen,ref:function(e){return _this5.infobar=e}}),filterHTML=React.createElement(_filterbar_jsx__WEBPACK_IMPORTED_MODULE_2__.a,{config:this.config,className:"osc-ideas-filterbar"}),mobilePopupHTML=null}var divStyle={},simpleHTML=null;if("simple"==this.config.display.type){filterHTML=null,infoHTML=null,mobilePopupHTML=null;var buttonHTML=null;this.config.linkToCompleteUrl&&(buttonHTML=React.createElement("button",{onClick:function(){document.location.href=_this5.config.linkToCompleteUrl},className:"osc-button-blue",style:{position:"absolute",top:20,right:20}},"Bekijk de volledige kaart")),simpleHTML=React.createElement("div",{style:{position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1e3}},buttonHTML),this.config.display.width&&(divStyle.width=this.config.display.width),this.config.display.height&&(divStyle.height=this.config.display.height)}return React.createElement("div",{id:this.divId,className:"osc-ideas-on-map osc-ideas-on-map-".concat(this.state.status," osc-mobile-").concat(this.state.infobarOnMobileIsOpen?"opened":"closed"),style:divStyle,ref:function(e){return _this5.instance=e}},filterHTML,infoHTML,React.createElement("div",{className:"osc-ideas-on-map-map osc-ideas-on-map-map-".concat(this.config.display.type)},React.createElement(_map_jsx__WEBPACK_IMPORTED_MODULE_5__.a,{id:this.divId+"-map",config:_objectSpread(_objectSpread({},this.config.map),{},{types:this.config.types,typeField:this.config.typeField,zoomControl:"simple"!=this.config.display.type}),ref:function(e){return _this5.map=e}})),simpleHTML,mobilePopupHTML)}}]),OpenStadComponentIdeasOnMap}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_6__.a),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_10__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_11__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_8__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_8__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_9__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(OpenStadComponentIdeasOnMap)},function(e,t,n){"use strict";n.d(t,"a",(function(){return C}));var r=n(1),o=n(79);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return p(this,n)}}function p(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,i=d(a);function a(){return u(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e=this,t=void 0!==e.props.ideas?e.props.ideas:e.state.ideas||[],n=React.createElement("h3",{className:"osc-title"},e.config.title," (",t.length,")");return React.createElement("div",{id:e.id,className:"osc-ideas-overview ".concat(e.props.className||"")},React.createElement(o.IdeasFilterbar,{config:e.config,showFilterbar:e.props.showFilterbar,className:"osc-ideas-filterbar"}),React.createElement(o.IdeasSort,{config:c({},e.config.sort),ideas:t,showSort:!e.props.hideSortButton,className:"osc-align-right-container",ref:function(t){return e.sorter=t}}),n,React.createElement(o.IdeasList,{config:e.config,ideas:t,className:""}))}}])&&l(t.prototype,n),r&&l(t,r),a}(o.IdeasOverview),v=n(111),g=n(136),y=n(112);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t,n){return t&&O(e.prototype,t),n&&O(e,n),e}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=P(e);if(t){var o=P(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return S(this,n)}}function S(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(n,e);var t=T(n);function n(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(r=t.call(this,e,{display:{columns:1,showFilterbar:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0},argument:{isActive:!0,ignoreReactionsForIdeaIds:""},types:[]})).config.loginUrl=r.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(r.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(r.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),r.state={currentSortOrder:r.config.defaultValue,infobarOnMobileIsOpen:e.infobarOnMobileIsOpen||!1},r}return I(n,[{key:"updateIdeas",value:function(e){!function(e){if(null==e)throw new TypeError("Cannot destructure undefined")}(e),console.log("updateIdeas moet weg")}}]),I(n,[{key:"componentDidMount",value:function(e,t){var n=this;n.setSelectedLocationListener=function(e){n.setNewIdea(e.detail)},document.addEventListener("osc-set-selected-location",n.setSelectedLocationListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-set-selected-location",this.setSelectedLocationListener)}},{key:"setNewIdea",value:function(e){console.log("DEZE MOET WEG"),this.setState(E(E({},this.state),{},{selectedIdea:null}))}},{key:"dispatchClickMobileSwitcher",value:function(e){e.stopPropagation();var t=new window.CustomEvent("osc-click-mobile-switcher",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e=this,t=this,n=E({},t.config);if(n.display.type="list",this.props.idea&&this.props.idea.extraData&&this.props.idea.extraData.type&&("Kans"==this.props.idea.extraData.type||"Knelpunt"==this.props.idea.extraData.type)&&(n.types=[{name:"Kans",label:"Dit gaat goed",value:"Kans",buttonLabel:"Ik wil een idee posten",backgroundColor:"#bed200",textColor:"black"},{name:"Knelpunt",label:"Dit kan beter",value:"Knelpunt",backgroundColor:"#ff9100",textColor:"black"}],n.typeField="extraData.type",n.showLabels=!0),"details"==t.props.displayType)return React.createElement(v.default,{config:n,idea:this.props.idea,className:t.props.className||"osc-infobar-idea-details",ref:function(t){return e.ideadetails=t}});if("form"==t.props.displayType)return React.createElement(g.a,{config:n,idea:this.props.idea,className:"osc-ideas-on-map-info",ref:function(t){return e.ideaform=t}});var r,o=t.props.ideas,i="",a="",c=!1;(t.props.currentEditIdea||t.props.selectedLocation)&&(i="in de buurt",a="Meer details en acties",c=!0),t.props.selectedIdea&&(i="in de buurt",a="Meer details",c=!0),i||(i="in dit gebied"),t.props.currentEditIdea||t.props.selectedIdea||(a="".concat(n.ideaName," in dit gebied (").concat(o&&o.length||0,")")),t.state.infobarOnMobileIsOpen&&(a="Terug naar de kaart"),r=React.createElement("div",{className:"osc-mobile-switcher",onClick:function(e){return t.dispatchClickMobileSwitcher(e)}},a);var s=n.ideaName+" "+i;return n.display.onMouseOverTileFadeOthers=!0,React.createElement("div",{id:t.props.id,className:t.props.className||"osc-infobar",ref:function(e){return t.instance=e}},r,React.createElement("div",{className:"osc-info-content"},React.createElement(y.a,{config:n,selectedIdea:t.props.selectedIdea,selectedLocation:t.props.currentEditIdea||t.props.selectedLocation}),React.createElement(m,{config:n,ideas:o,hideSortButton:c,title:s,ref:function(e){return t.list=e}})))}}]),n}(r.a)},function(e,t){!function(){if("undefined"!=typeof window)try{var e=new window.CustomEvent("test",{cancelable:!0});if(e.preventDefault(),!0!==e.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var t=function(e,t){var n,r;return(t=t||{}).bubbles=!!t.bubbles,t.cancelable=!!t.cancelable,(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};t.prototype=window.Event.prototype,window.CustomEvent=t}}()},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);n(14),n(127);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(129),n(87));n.d(t,"default",(function(){return c.a})),n.d(t,"Lightbox",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t);n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(131),n(88));n.d(t,"default",(function(){return c.a})),n.d(t,"NLMap",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";n.r(t);n(14);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(133),n(89));n.d(t,"default",(function(){return c.a})),n.d(t,"IdeaDetails",(function(){return c.a})),c.a.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(c.a,{attributes:n,config:t}),e)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Preview}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(25);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Preview=function(_OpenStadComponent){_inherits(Preview,_OpenStadComponent);var _super=_createSuper(Preview);function Preview(e){var t;return _classCallCheck(this,Preview),(t=_super.call(this,e,{display:{type:"idea-selection"},api:{},content:{noSelectionLoggedInHTML:"",noSelectionNotLoggedInHTML:"",selectionActiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {addButton}.",selectionInactiveLoggedInHTML:"Ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",selectionActiveNotLoggedInHTML:'Niet ingelogd: er is een punt geselecteerd binnen de polygon, met een adres: {address} en {loginButton} of <a href="{loginLink}">login link</a>.',selectionInactiveNotLoggedInHTML:"Niet ingelogd: er is een punt geselecteerd buiten de polygon, met een {address}",mobilePreviewLoggedInHTML:"Een locatie vlakbij <h4>{address}</h4>{addButton}",mobilePreviewNotLoggedInHTML:'Een locatie vlakbij <h4>{address}</h4><div>Wilt u een nieuw punt toevoegen? Dan moet u eerst <a href="{loginLink}">inloggen</a>.</div>',showNoSelectionOnMobile:!1},idea:{canAddNewIdeas:!0,showVoteButtons:!0}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),e.config.content=e.config.content||{},e.config.content.noSelectionHTML&&!e.config.content.noSelectionLoggedInHTML&&(t.config.content.noSelectionLoggedInHTML=e.config.content.noSelectionHTML),e.config.content.noSelectionHTML&&!e.config.content.noSelectionNotLoggedInHTML&&(t.config.content.noSelectionNotLoggedInHTML=e.config.content.noSelectionHTML),t.state={},t}return _createClass(Preview,[{key:"componentDidMount",value:function(e,t){var n=this;n.updateLocationListener=function(e){n.updateLocation(e.detail&&e.detail.location)},document.addEventListener("osc-update-location",n.updateLocationListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-update-location",this.updateLocationListener)}},{key:"updateLocation",value:function(e){e&&this.setState({location:e,address:e.address})}},{key:"dispatchOnButtonIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selection-button-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchNewIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-new-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchSelectedIdeaClick",value:function(e,t){var n=new window.CustomEvent("osc-selected-idea-click",{detail:{idea:t}});document.dispatchEvent(n)}},{key:"dispatchClosePreview",value:function(e,t){var n;e.stopPropagation(),"idea"==t&&(n=new window.CustomEvent("osc-set-selected-idea",{detail:null})),"location"==t&&(n=new window.CustomEvent("osc-set-selected-location",{detail:null})),document.dispatchEvent(n)}},{key:"render",value:function render(){var _this2=this,self=this;if("mobilePreview"==self.config.display.type){var contentHTML=this.config.api.isUserLoggedIn?this.config.content.mobilePreviewLoggedInHTML:this.config.content.mobilePreviewNotLoggedInHTML,_addButton=null,_loginButton=null,_loginLink=null;this.config.api.isUserLoggedIn?this.config.idea.canAddNewIdeas&&(_addButton=React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){_this2.onClickMobileSwitcher(e),_this2.onNewIdeaClick(e)},ref:function(e){return self.newIdeaButton=e}},"Nieuw punt toevoegen")):this.config.idea.canAddNewIdeas&&(_loginButton=React.createElement("button",{onClick:function(){document.location.href="/oauth/login?returnTo="+encodeURIComponent(document.location.href)},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),_loginLink="javascript: document.location.href = '/oauth/login?returnTo=' + encodeURIComponent(document.location.href)");var address=this.state.address||this.props.selectedLocation.address||"[adres wordt gezocht...]";return contentHTML=contentHTML.replace(/\{address\}/g,address||""),contentHTML=contentHTML.replace(/\{loginLink\}/g,_loginLink),contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:contentHTML,addButton:_addButton,loginButton:_loginButton}),React.createElement("div",{className:"osc-mobile-popup"},contentHTML)}var selectedLocationHTML=null,selectedIdeaHTML=null,titleAddition="",mobileSwitcherHTML=null,mobileTitle="",addButton=null,loginButton=null,loginLink=null;if(self.config.idea.canAddNewIdeas&&(addButton=self.config.types&&"typeId"==self.config.typeField?React.createElement("span",{className:"osc-new-idea-buttons"},self.config.types.map((function(e,t){var n=e;if(!n.auth||n.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,n.auth.createableBy)){var r=n?React.createElement("div",{className:"osc-button-background-image",dangerouslySetInnerHTML:{__html:n.buttonicon&&n.buttonicon.html||""}}):null;return React.createElement("button",{className:"osc-button osc-button-white"+(n&&n.auth&&n.auth.createableBy?" osc-button-required-role-is-".concat(n.auth.createableBy):""),onClick:function(e){return self.dispatchNewIdeaClick(e,{typeId:n.id||n.name})},key:"osc-button-".concat(t)},r,n&&n.buttonLabel||"Nieuw punt toevoegen")}return null}))):React.createElement("button",{className:"osc-button osc-button-blue",onClick:function(e){return self.dispatchNewIdeaClick(e)}},"Nieuw punt toevoegen"),loginButton=React.createElement("button",{onClick:function(){document.location.href=_this2.config.loginUrl},className:"osc-button-blue osc-not-logged-in-button"},"Inloggen"),loginLink="javascript: document.location.href = '".concat(this.config.loginUrl,"'")),self.props.selectedLocation){var _contentHTML=null;_contentHTML=self.props.selectedLocation.isPointInPolygon?self.config.api.isUserLoggedIn?self.config.content.selectionActiveLoggedInHTML:self.config.content.selectionActiveNotLoggedInHTML:self.config.api.isUserLoggedIn?self.config.content.selectionInactiveLoggedInHTML:self.config.content.selectionInactiveNotLoggedInHTML;var _address=this.state.address||this.props.selectedLocation.address||"[adres wordt gezocht...]";_contentHTML=_contentHTML.replace(/\{address\}/g,_address||""),_contentHTML=_contentHTML.replace(/\{loginLink\}/g,loginLink),_contentHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:_contentHTML,addButton:addButton,loginButton:loginButton}),selectedLocationHTML=React.createElement("div",{className:"osc-infobar-new-idea"},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"location")},ref:function(e){return self.resetButton=e}}),_contentHTML),titleAddition="in de buurt",mobileTitle="Meer details en acties"}if(self.props.selectedIdea){var idea=self.props.selectedIdea,ideaTypeValue;try{ideaTypeValue=eval("idea.".concat(self.config.typeField))}catch(e){ideaTypeValue=""}var typeDef=self.config.types.find((function(e){return e.name==ideaTypeValue||e.id==ideaTypeValue}));typeDef&&typeDef.listicon||(typeDef={listicon:{html:""}});var voteCountHTML=null;this.config.idea.showVoteButtons&&(voteCountHTML=React.createElement("div",{className:"osc-likes"},idea.yes||0));var argcountHTML=null;this.config.argument.isActive&&!this.config.argument.ignoreReactionsForIdeaIds.match(new RegExp("(?:^|\\D)".concat(idea.id,"(?:\\D|$)")))&&(argcountHTML=React.createElement("div",{className:"osc-reactions"},idea.argCount||0)),selectedIdeaHTML=React.createElement("div",{className:"osc-infobar-selected-idea",onClick:function(e){return self.dispatchSelectedIdeaClick(e,self.props.selectedIdea)}},React.createElement("button",{className:"osc-close-button-black",onClick:function(e){return self.dispatchClosePreview(e,"idea")},ref:function(e){return self.resetButton=e}}),React.createElement("h3",null,"Geselecteerd"),React.createElement("div",{className:"osc-infobar-selected-idea-idea"},React.createElement("div",{className:"osc-idea-image-container"},React.createElement(_image_index_jsx__WEBPACK_IMPORTED_MODULE_2__.IdeaImage,{config:{},idea:idea,key:"image-"+idea.id})),React.createElement("div",{className:"osc-content"},React.createElement("h4",null,eval("idea.".concat(self.config.titleField))),React.createElement("div",{className:"osc-summary"},eval("idea.".concat(self.config.summaryField))),React.createElement("div",{className:"osc-stats"},voteCountHTML,argcountHTML,React.createElement("div",{className:"osc-type"},React.createElement("div",{className:"osc-type-content",dangerouslySetInnerHTML:{__html:typeDef.listicon.html}})))),React.createElement("div",{className:"osc-clear-both"}))),titleAddition="in de buurt",mobileTitle="Meer details"}var defaultBlockHTML=null;if(!selectedLocationHTML&&!selectedIdeaHTML){var noSelectionHTML=self.config.api.isUserLoggedIn?self.config.content.noSelectionLoggedInHTML:self.config.content.noSelectionNotLoggedInHTML;noSelectionHTML=noSelectionHTML||null,noSelectionHTML&&(noSelectionHTML=noSelectionHTML.replace(/\{loginLink\}/g,loginLink),noSelectionHTML=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.reactTemplate({html:noSelectionHTML,addButton:addButton,loginButton:loginButton}),defaultBlockHTML=React.createElement("div",{className:"osc-infobar-default-block".concat(self.config.content.showNoSelectionOnMobile?" osc-visible-on-mobile":"")},noSelectionHTML)),mobileTitle="".concat(self.config.ideaName," in dit gebied (").concat(self.state.ideas&&self.state.ideas.length||0,")")}return selectedLocationHTML||selectedIdeaHTML||defaultBlockHTML?React.createElement("div",{className:"osc-selection-block"},defaultBlockHTML,selectedLocationHTML,selectedIdeaHTML):null}}]),Preview}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),i=(r=o)&&"object"==typeof r&&"default"in r?r.default:r,a=new(n(143)),c=a.getBrowser(),s=(a.getCPU(),a.getDevice()),u=a.getEngine(),l=a.getOS(),f=a.getUA(),d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none";return e||t},p=function(){return!("undefined"==typeof window||!window.navigator&&!navigator)&&(window.navigator||navigator)},h=function(e){var t=p();return t&&t.platform&&(-1!==t.platform.indexOf(e)||"MacIntel"===t.platform&&t.maxTouchPoints>1&&!window.MSStream)};function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var O="mobile",I="tablet",R="smarttv",T="console",S="wearable",P=void 0,C="Chrome",L="Firefox",D="Opera",k="Yandex",M="Safari",A="Internet Explorer",x="Edge",N="Chromium",j="IE",F="Mobile Safari",B="MIUI Browser",G="iOS",q="Android",U="Windows Phone",V="Windows",H="Mac OS",W={isMobile:!1,isTablet:!1,isBrowser:!1,isSmartTV:!1,isConsole:!1,isWearable:!1},z=function(e,t,n,r){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(n,!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,{vendor:d(t.vendor),model:d(t.model),os:d(n.name),osVersion:d(n.version),ua:d(r)})},Y=function(e){switch(e){case O:return{isMobile:!0};case I:return{isTablet:!0};case R:return{isSmartTV:!0};case T:return{isConsole:!0};case S:return{isWearable:!0};case P:return{isBrowser:!0};default:return W}}(s.type);var K,X=function(){return"string"==typeof f&&-1!==f.indexOf("Edg/")},Q=function(){return c.name===x},J=function(){return h("iPad")},$=s.type===R,Z=s.type===T,ee=s.type===S,te=c.name===F||J(),ne=c.name===N,re=function(){switch(s.type){case O:case I:return!0;default:return!1}}()||J(),oe=s.type===O,ie=s.type===I||J(),ae=s.type===P,ce=l.name===q,se=l.name===U,ue=l.name===G||J(),le=c.name===C,fe=c.name===L,de=c.name===M||c.name===F,pe=c.name===D,he=c.name===A||c.name===j,me=d(l.version),ve=d(l.name),ge=d(c.version),ye=d(c.major),be=d(c.name),_e=d(s.vendor),Ee=d(s.model),we=d(u.name),Oe=d(u.version),Ie=d(f),Re=Q()||X(),Te=c.name===k,Se=d(s.type,"browser"),Pe=(K=p())&&(/iPad|iPhone|iPod/.test(K.platform)||"MacIntel"===K.platform&&K.maxTouchPoints>1)&&!window.MSStream,Ce=J(),Le=h("iPhone"),De=h("iPod"),ke=function(){var e=p(),t=e&&e.userAgent.toLowerCase();return"string"==typeof t&&/electron/.test(t)}(),Me=X(),Ae=Q()&&!X(),xe=l.name===V,Ne=l.name===H,je=c.name===B;t.AndroidView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return ce?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.BrowserView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return ae?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.ConsoleView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return Z?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.CustomView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return e.condition?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.IEView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return he?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.IOSView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return ue?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.MobileOnlyView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return oe?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.MobileView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return re?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.SmartTVView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return $?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.TabletView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return ie?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.WearableView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return ee?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.WinPhoneView=function(e){var t=e.renderWithFragment,n=e.children,r=e.viewClassName,a=e.style;return se?t?i.createElement(o.Fragment,null,n):i.createElement("div",{className:r,style:a},n):null},t.browserName=be,t.browserVersion=ye,t.deviceDetect=function(){var e=Y.isBrowser,t=Y.isMobile,n=Y.isTablet,r=Y.isSmartTV,o=Y.isConsole,i=Y.isWearable;return e?function(e,t,n,r,o){return{isBrowser:e,browserMajorVersion:d(t.major),browserFullVersion:d(t.version),browserName:d(t.name),engineName:d(n.name),engineVersion:d(n.version),osName:d(r.name),osVersion:d(r.version),userAgent:d(o)}}(e,c,u,l,f):r?function(e,t,n,r){return{isSmartTV:e,engineName:d(t.name),engineVersion:d(t.version),osName:d(n.name),osVersion:d(n.version),userAgent:d(r)}}(r,u,l,f):o?function(e,t,n,r){return{isConsole:e,engineName:d(t.name),engineVersion:d(t.version),osName:d(n.name),osVersion:d(n.version),userAgent:d(r)}}(o,u,l,f):t||n?z(Y,s,l,f):i?function(e,t,n,r){return{isWearable:e,engineName:d(t.name),engineVersion:d(t.version),osName:d(n.name),osVersion:d(n.version),userAgent:d(r)}}(i,u,l,f):void 0},t.deviceType=Se,t.engineName=we,t.engineVersion=Oe,t.fullBrowserVersion=ge,t.getUA=Ie,t.isAndroid=ce,t.isBrowser=ae,t.isChrome=le,t.isChromium=ne,t.isConsole=Z,t.isEdge=Re,t.isEdgeChromium=Me,t.isElectron=ke,t.isFirefox=fe,t.isIE=he,t.isIOS=ue,t.isIOS13=Pe,t.isIPad13=Ce,t.isIPhone13=Le,t.isIPod13=De,t.isLegacyEdge=Ae,t.isMIUI=je,t.isMacOs=Ne,t.isMobile=re,t.isMobileOnly=oe,t.isMobileSafari=te,t.isOpera=pe,t.isSafari=de,t.isSmartTV=$,t.isTablet=ie,t.isWearable=ee,t.isWinPhone=se,t.isWindows=xe,t.isYandex=Te,t.mobileModel=Ee,t.mobileVendor=_e,t.osName=ve,t.osVersion=me,t.withOrientationChange=function(e){return function(t){function n(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=function(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?w(e):t}(this,_(n).call(this,e))).isEventListenerAdded=!1,t.handleOrientationChange=t.handleOrientationChange.bind(w(t)),t.onOrientationChange=t.onOrientationChange.bind(w(t)),t.onPageLoad=t.onPageLoad.bind(w(t)),t.state={isLandscape:!1,isPortrait:!1},t}var r,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(n,t),r=n,(o=[{key:"handleOrientationChange",value:function(){this.isEventListenerAdded||(this.isEventListenerAdded=!0);var e=window.innerWidth>window.innerHeight?90:0;this.setState({isPortrait:0===e,isLandscape:90===e})}},{key:"onOrientationChange",value:function(){this.handleOrientationChange()}},{key:"onPageLoad",value:function(){this.handleOrientationChange()}},{key:"componentDidMount",value:function(){void 0!==("undefined"==typeof window?"undefined":m(window))&&re&&(this.isEventListenerAdded?window.removeEventListener("load",this.onPageLoad,!1):(this.handleOrientationChange(),window.addEventListener("load",this.onPageLoad,!1)),window.addEventListener("resize",this.onOrientationChange,!1))}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.onOrientationChange,!1)}},{key:"render",value:function(){return i.createElement(e,y({},this.props,{isLandscape:this.state.isLandscape,isPortrait:this.state.isPortrait}))}}])&&v(r.prototype,o),a&&v(r,a),n}(i.Component)}},function(module,__webpack_exports__,__webpack_require__){"use strict";function amapsCreateClusterIcon(cluster){var self=this,count=cluster.getChildCount(),markers=cluster.getAllChildMarkers(),colors={},total=markers.length,isFaded=!1;markers.forEach((function(entry){var type=entry.data&&eval("entry.data.".concat(self.config.typeField)),tmp=self.config.types.find((function(e){return type&&(e.id==type||e.name==type)})),color=tmp&&(tmp.color||tmp.backgroundColor)||"#164995";null==type&&(type="undef"),colors[color]||(colors[color]=0),colors[color]++,entry.data&&entry.data.isFaded&&(isFaded=!0)}));var html='<svg viewBox="0 0 36 36"><circle cx="18" cy="18" r="14" fill="white"/>',soFar=0;return Object.keys(colors).forEach((function(e){var t=e,n=100*colors[e]/total;html+='  <path\n             d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"\n             fill="none"\n             transform="rotate('.concat(soFar/100*360,', 18, 18)"\n             stroke="').concat(t,'"\n             stroke-width="4"\n             stroke-dasharray="').concat(n,', 100"\n             />'),soFar+=n})),html+='<text x="18" y="21" text-anchor="middle" class="openstad-component-ideas-on-map-icon openstad-component-ideas-on-map-icon-text">'+count+"</text></svg>",L.divIcon({html:html,className:"openstad-component-ideas-on-map-icon-cluster",iconSize:L.point(36,36),iconAnchor:[18,18],isFaded:isFaded})}__webpack_require__.d(__webpack_exports__,"a",(function(){return amapsCreateClusterIcon}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(1),o=n(2);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return u(this,n)}}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(u,e);var t,n,r,i=s(u);function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e,{name:"likebutton",backgroundColor:"#164995",color:"#fff",text:"like",opinion:"yes"})).state={value:t.props.value,busy:!1},t}return t=u,(n=[{key:"componentDidMount",value:function(e,t){o.a.localStorage.get("osc-ideas-on-map-vote-pending")&&(this.doVote(),o.a.localStorage.remove("osc-ideas-on-map-vote-pending"))}},{key:"doVote",value:function(e){var t=this;if(e&&e.stopPropagation(),!this.state.busy){this.setState({busy:!0});var n=this,r="".concat(n.config.api.url,"/api/site/").concat(n.config.siteId,"/vote"),i=o.a.api.getHeaders(n.config);if(!n.config.user||!n.config.user.role){o.a.localStorage.set("osc-ideas-on-map-vote-pending",!0);var a="/oauth/login?returnTo="+encodeURIComponent(document.location.href)+"&useOauth=anonymous";return document.location.href=a}fetch(r,{method:"post",headers:i,body:JSON.stringify({ideaId:n.props.idea.id,opinion:n.config.opinion})}).then((function(e){if(!e.ok)throw Error("Stemmen is niet gelukt");return e.json()})).then((function(e){var r=e.length?1:-1,o=n.state.value+r;n.setState({value:o}),n.props.idea.userVote=e.length&&e||null,t.setState({busy:!1});var i=new window.CustomEvent("osc-idea-liked",{detail:{ideaId:n.props.idea.id,change:r}});document.dispatchEvent(i)})).catch((function(e){alert(e.message)}))}}},{key:"render",value:function(){var e=this,t=parseInt(e.state.value)||0,n=parseInt(t/100)||0,r=parseInt((t-100*n)/10)||0,o=t-100*n-10*r;return React.createElement("div",{id:e.id,className:e.props.className||"osc-vote-button osc-number-button",ref:function(t){return e.instance=t}},React.createElement("div",{className:"osc-number-plates",style:{color:this.config.color,backgroundColor:this.config.backgroundColor}},React.createElement("div",{id:"".concat(this.config.name,"-number-plate-000"),className:"osc-number-plate"},n),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-00"),className:"osc-number-plate"},r),React.createElement("div",{id:"".concat(this.config.name,"-number-plate-0"),className:"osc-number-plate"},o)),React.createElement("div",{className:"osc-number-button-text ".concat(this.config.name,"-name ").concat(this.props.idea.userVote?" osc-user-has-voted":""," ").concat(this.state.busy?" osc-busy":""),style:{color:this.config.color,backgroundColor:this.config.backgroundColor},onClick:function(t){return e.doVote(t)}},e.config.text),React.createElement("div",{className:"osc-clear-both"}))}}])&&a(t.prototype,n),r&&a(t,r),u}(r.a)},function(e,t,n){var r=n(52),o=n(48),i=n(124),a=n(51),c=n(125),s=[].push,u=function(e){var t=1==e,n=2==e,u=3==e,l=4==e,f=6==e,d=5==e||f;return function(p,h,m,v){for(var g,y,b=i(p),_=o(b),E=r(h,m,3),w=a(_.length),O=0,I=v||c,R=t?I(p,w):n?I(p,0):void 0;w>O;O++)if((d||O in _)&&(y=E(g=_[O],O,b),e))if(t)R[O]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return O;case 2:s.call(R,g)}else if(l)return!1;return f?-1:u||l?l:R}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},function(e,t,n){e.exports=n(118)()},function(e,t,n){"use strict";var r=n(119);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,_=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case s:case c:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case v:case u:return e;default:return t}}case i:return t}}}function O(e){return w(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=u,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=i,t.Profiler=s,t.StrictMode=c,t.Suspense=h,t.isAsyncMode=function(e){return O(e)||w(e)===f},t.isConcurrentMode=O,t.isContextConsumer=function(e){return w(e)===l},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===v},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===s},t.isStrictMode=function(e){return w(e)===c},t.isSuspense=function(e){return w(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===c||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===u||e.$$typeof===l||e.$$typeof===p||e.$$typeof===b||e.$$typeof===_||e.$$typeof===E||e.$$typeof===y)},t.typeOf=w},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.d(t,"a",(function(){return P}));var r=n(1),o=n(79),i=(n(3),n(0)),a=n.n(i);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return h(this,n)}}function h(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?m(e):t}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(i,e);var t,n,r,o=p(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{searchIn:["ideas","addresses"]})).config.doSearchFunction=t.config.doSearchFunction||t.doSearchx.bind(m(t)),t.state={searchValue:"",searchResult:{locations:[],ideas:[]},showSuggestions:!1},t.updateSearchResult=t.updateSearchResult.bind(m(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"handleChange",value:function(e){this.updateSearchValue(e),e.length>=3&&this.config.doSearchFunction(e,this.updateSearchResult)}},{key:"handleButtonClick",value:function(e){var t=this;t.state.searchValue&&t.setState({searchValue:""},(function(){t.inputfield.focus()}))}},{key:"updateSearchValue",value:function(e){this.setState({searchValue:e,showSuggestions:e.length>=3})}},{key:"showSuggestions",value:function(){this.setState({showSuggestions:this.state.searchValue.length>=3})}},{key:"hideSuggestions",value:function(){var e=this;setTimeout((function(){e.setState({showSuggestions:!1})}),500)}},{key:"updateSearchResult",value:function(e,t){this.setState(u(u({},this.state),{},{searchResult:t,showSuggestions:e.length>=3}))}},{key:"doSearchx",value:function(e){console.log("search function not defined")}},{key:"onSuggestionClick",value:function(e,t,n){this.updateSearchValue(e),n&&n(t)}},{key:"render",value:function(){var e=this,t=null;if(e.state.showSuggestions){var n=null;this.config.searchIn.includes("ideas")&&this.config.searchIn.includes("addresses")&&(n=a.a.createElement("div",{className:"osc-search-suggestions-hr"}));var r=null;this.config.searchIn.includes("addresses")&&(r=a.a.createElement("div",null,"Adressen:",e.state.searchResult.locations.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})}))));var o=null;this.config.searchIn.includes("ideas")&&(o=a.a.createElement("div",null,this.config.ideaName,":",e.state.searchResult.ideas.map((function(t,n){var r=t.text.replace(new RegExp(e.state.searchValue,"ig"),(function(e){return"<strong>"+e+"</strong>"}));return a.a.createElement("div",{className:"osc-search-suggestion osc-search-suggestion-idea",onClick:function(n){return e.onSuggestionClick(t.text,n,t.onClick)},key:"search-result-"+n,dangerouslySetInnerHTML:{__html:r}})})))),t=a.a.createElement("div",{className:"osc-search-suggestions",ref:function(t){return e.suggestions=t}},r,n,o)}return a.a.createElement("div",{id:e.id,className:e.props.className||"osc-search",ref:function(t){return e.instance=t}},t,a.a.createElement("input",{type:"text",value:this.state.searchValue,placeholder:e.config.placeholder,onChange:function(){return e.handleChange(e.inputfield.value)},onBlur:function(){return e.hideSuggestions()},onFocus:function(){return e.showSuggestions()},className:"osc-default-input osc-search-input",ref:function(t){return e.inputfield=t}}),a.a.createElement("button",{className:"osc-search-button".concat(this.state.searchValue?" osc-active":""),onClick:function(t){return e.handleButtonClick(t)},ref:function(t){return e.resetButton=t}}))}}])&&f(t.prototype,n),r&&f(t,r),i}(r.a);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){E(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function w(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=S(e);if(t){var o=S(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return T(this,n)}}function T(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(a,e);var t,n,r,i=R(a);function a(){return w(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"render",value:function(){var e,t=this,n=null;t.config.search&&(n=React.createElement("div",{className:"osc-search-container"},React.createElement("div",{className:"osc-search-button",onClick:function(){return t.toggleMobileActiveSelector("search")}}),React.createElement(g,{config:_({},this.config),className:"osc-search".concat("search"==t.state.mobileActiveSelector?" osc-is-active":"")}))),e=React.createElement("button",{value:"reset",onClick:function(){return t.resetAll()},className:"osc-button osc-reset-button"},"Alles tonen");var r,i=null;if(t.config.filter.length){var a=t.filters&&t.filters.find((function(e){return e.state.currentValue}));t.filters=[],i=React.createElement("div",{className:"osc-ideas-filters-and-button-container"},React.createElement("div",{className:"osc-ideas-filter-button".concat(a?" osc-active":""),onClick:function(){return t.toggleMobileActiveSelector("filters")}}),React.createElement("div",{className:"osc-ideas-filters-container".concat("filters"==t.state.mobileActiveSelector?" osc-is-active":"")},t.config.filter.map((function(e,n){return React.createElement(o.IdeasFilter,{config:e,className:"osc-align-right-container",key:"osc-ideas-filter-".concat(n),ref:function(e){return t.filters[n]=e}})}))),e)}return r=React.createElement("div",{className:"osc-ideas-filters-and-reset-button-container"},i),React.createElement("div",{className:"osc-ideas-filterbar ".concat(t.props.className||"")},n,r)}}])&&O(t.prototype,n),r&&O(t,r),a}(o.IdeasFilterbar)},function(e,t,n){var r=n(50);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(13),o=n(126),i=n(53)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(49);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){n(128);var r=n(46);e.exports=r("Array","findIndex")},function(e,t,n){"use strict";var r=n(43),o=n(116).findIndex,i=n(44),a=n(45),c="findIndex",s=!0,u=a(c);c in[]&&Array(1).findIndex((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!u},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return nt})),n.d(t,"ChoicesGuide",(function(){return nt})),n.d(t,"ChoicesGuideResult",(function(){return vt}));n(14),n(138),n(107);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=(n(141),n(3)),s=n.n(c),u=n(1),l=n(2),f=n(25),d=n(5);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=b(e);if(t){var o=b(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return g(this,n)}}function g(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?y(e):t}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(i,e);var t,n,r,o=v(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).config.aspectRatio=t.config.aspectRatio||"16x9",t.questionId=e.data.id,t.state={value:50,isAnswered:!1},t.onChangeHandler=t.onChangeHandler.bind(y(t)),t.showLightbox=t.showLightbox.bind(y(t)),t}return t=i,(n=[{key:"onChangeHandler",value:function(e){var t=this,n={value:e,isAnswered:!0,error:void 0};this.setState(n,(function(){t.liveUpdates()}))}},{key:"isValid",value:function(){return!(void 0===(this.props.data||{}).value&&!this.state.isAnswered&&(this.setState({error:"Je hebt nog geen keuze gemaakt"}),1))}},{key:"getAnswer",value:function(){if(this.state.isAnswered){var e,t=this.props.data||{},n=(t.values,t.dimensions);try{n=JSON.parse(n)}catch(e){}return n=n||["x"],"number"==typeof this.state.value||"string"==typeof this.state.value?(e={},n.includes("x")&&(e.x=this.state.value),n.includes("y")&&(e.y=this.state.value),n.includes("z")&&(e.z=this.state.value)):(e={},n.includes("x")&&(e.x=this.state.value.x),n.includes("y")&&(e.y=this.state.value.y),n.includes("z")&&(e.z=this.state.value.z)),e}}},{key:"liveUpdates",value:function(){var e=new window.CustomEvent("osc-choices-guide-live-updates");document.dispatchEvent(e)}},{key:"showLightbox",value:function(e){var t=this.props.data||{},n=t.values&&t.values.A&&t.values.A.questionImage;n&&n.length&&(Array.isArray(n)||(n=[n]),n=n[0]);var r=t.values&&t.values.B&&t.values.B.questionImage;r&&r.length&&(Array.isArray(r)||(r=[r]),r=r[0]);var o=[n,r],i=o.findIndex((function(t){return t==e})),a=new window.CustomEvent("osc-show-light-box",{detail:{images:o,startIndex:i,aspectRatio:this.config.aspectRatio}});document.dispatchEvent(a)}},{key:"render",value:function(){var e=this,t=this,n=t.props.data||{},r=!1;t.state.error&&(r=!0);var o=t.state.isAnswered,i="object"==p(n.value)?n.value.x:void 0!==n.value?n.value:"not defined";"not defined"===i?i=this.state.value:o=!0;var a=null,c=n.images||[];if(c&&c.length){Array.isArray(c)||(c=[c]);var s=c[0];a=React.createElement("div",{className:"osc-question-image-container"},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:s}))}var u=null;if(n.moreInfo&&(n.moreInfo.title||n.moreInfo.text)){var l=n.moreInfo.title||"Geen titel",h=n.moreInfo.text||"Geen tekst";u=React.createElement("div",{className:"osc-accordeon"},React.createElement("div",{className:"osc-accordeon-item osc-closed"},React.createElement("div",{className:"osc-title osc-info"},l),React.createElement("div",{className:"osc-description"},h)))}var m=n.values&&n.values.A&&n.values.A.label||"A",v=n.values&&n.values.B&&n.values.B.label||"B",g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),u),y=null;switch(n.type){case"continuous":y=React.createElement("div",{className:"osc-question-selector"},React.createElement(d.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:m}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:v}}));break;case"a-to-b":var b=n.values&&n.values.A&&n.values.A.labelBelow||"",_=n.values&&n.values.B&&n.values.B.labelBelow||"",E=n.values&&n.values.A&&n.values.A.questionText,w=n.values&&n.values.B&&n.values.B.questionText,O=null,I=null;E&&w&&(O=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},m),React.createElement("div",{className:"osc-question-description-labeled-text"},E)),I=React.createElement("div",{className:"osc-question-description-text"},React.createElement("div",{className:"osc-question-description-label"},v),React.createElement("div",{className:"osc-question-description-labeled-text"},w)),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),O,I,u));var R=n.values&&n.values.A&&n.values.A.questionImage;R&&R.length&&(Array.isArray(R)||(R=[R]),R=R[0]);var T=n.values&&n.values.B&&n.values.B.questionImage;T&&T.length&&(Array.isArray(T)||(T=[T]),T=T[0]);var S=null,P=null;R&&T&&(S=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-a"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-a"},m),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:R,onClick:function(){return t.showLightbox(R)}}))),P=React.createElement("div",{className:"osc-question-description-image-container osc-question-description-image-container-b"},React.createElement("div",{className:"osc-question-description-label osc-question-description-label-b"},v),React.createElement("div",{className:"osc-question-image-container osc-question-image-aspect-".concat(t.config.aspectRatio)},React.createElement(f.Image,{config:{aspectRatio:t.config.aspectRatio},image:T,onClick:function(){return t.showLightbox(T)}})))),g=React.createElement("div",{className:"osc-question-description"},React.createElement("div",{className:"osc-question-description-text",dangerouslySetInnerHTML:{__html:n.description}}),u,S,P,React.createElement("div",{style:{clear:"both",height:15}}),O,I),y=React.createElement("div",{className:"osc-question-selector"},React.createElement("div",{className:"osc-question-selector-label-a"},m),React.createElement("div",{className:"osc-question-selector-label-b"},v),React.createElement(d.a.Slider,{min:"0",max:"100",step:"1",value:i,className:"osc-question-selector-slider",config:{},touched:o,onChange:function(e){return t.onChangeHandler(e)},ref:function(e){return t.selector=e}}),React.createElement("div",{className:"osc-question-selector-minlabel",dangerouslySetInnerHTML:{__html:b||""}}),React.createElement("div",{className:"osc-question-selector-maxlabel",dangerouslySetInnerHTML:{__html:_||""}}));break;case"enum-radio":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(r,o){var i=parseInt(1e6*Math.random()),a=!1;return"object"==p(n.value)?(a=!0,Object.keys(n.value).forEach((function(e){n.value[e]!==r.value[e]&&(a=!1)}))):n.value===r.value&&(a=!0),"undefined"!=n.value?n.value:e.state.value,React.createElement("div",{key:"div-value-".concat(i),className:"osc-radio-container"},React.createElement("div",{className:"osc-radio-input".concat(a?" osc-radio-input-checked":"")},React.createElement("input",{name:"enum-radio-".concat(n.id),type:"radio",onChange:function(){return t.onChangeHandler(r.value)},key:"button-value-".concat(i)})),React.createElement("div",{className:"osc-radio-text"},r.text))})));break;case"enum-buttons":y=React.createElement("div",{className:"osc-question-selector"},n.values&&n.values.map((function(e,n){return React.createElement("button",{onClick:function(){return t.onChangeHandler(e.value)},key:"button-value-".concat(n)},e.text)})));break;default:y=React.createElement("div",null,"Type ",n.type," is (nog) niet geimplementeerd.")}var C=null;return r&&(C=React.createElement("div",{className:"osc-error-text"},t.state.error)),React.createElement("div",{id:t.props.config.divId,className:"osc-question osc-question-".concat(n.type).concat(r?" osc-error":"")},a,React.createElement("div",{className:"osc-question-content",id:t.props.config.divId+"-content"},React.createElement("h3",{className:"osc-question-title"}," ",n.title),g,y,C))}}])&&h(t.prototype,n),r&&h(t,r),i}(u.a);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=C(e);if(t){var o=C(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return P(this,n)}}function P(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(i,e);var t,n,r,o=S(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).noOfQuestionsToShow=t.config.noOfQuestionsToShow||1,t.questionElements=[],t.state={currentQuestion:0,values:{}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){}},{key:"isValid",value:function(){var e=this,t=!0,n=e.props.data.questions.slice(e.state.currentQuestion,e.state.currentQuestion+e.noOfQuestionsToShow),r=!1;return n.forEach((function(n,o){e.questionElements[o].isValid()||(r||setTimeout((function(){document.querySelector("#".concat(e.questionElements[o].config.divId,"-content")).scrollIntoView({behavior:"smooth"})}),250),r=!0,t=!1)})),t}},{key:"getAnswers",value:function(){var e=this,t=s()({},this.props.data&&this.props.data.values,e.state.values);return e.props.data&&e.props.data.questions.forEach((function(n,r){var o=e.questionElements.find((function(e){return e&&e.questionId==n.id}));o&&void 0!==o.getAnswer()&&(t[n.id]=o.getAnswer())})),e.setState({values:t}),t}},{key:"gotoNextQuestion",value:function(){if(this.isValid()){var e=this.state.currentQuestion+this.noOfQuestionsToShow;return e>=this.props.data.questions.length?(e=0,this.setState({currentQuestion:e}),{isReady:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isReady:!1,currentQuestion:e})}}},{key:"gotoPreviousQuestion",value:function(){var e=this.state.currentQuestion-this.noOfQuestionsToShow;return e<0?(e=0,this.setState({currentQuestion:e}),{isBeginning:!0,currentQuestion:e}):(this.setState({currentQuestion:e}),{isBeginning:!1,currentQuestion:e})}},{key:"render",value:function(){var e,t=this,n=t.props.data||{questions:[]},r=n.questions.slice(t.state.currentQuestion,t.state.currentQuestion+t.noOfQuestionsToShow),o=s()({},this.props.data&&this.props.data.values,t.state.values);return e=React.createElement("div",{className:"osc-questions"},r.map((function(e,n){return React.createElement(_,{config:O(O({},t.config),{},{divId:"osc-question-".concat(e.id)}),data:O(O({},e),{},{value:o[e.id]}),key:"question-".concat(e.id),ref:function(e){t.questionElements[n]=e}})}))),React.createElement("div",{id:this.id,className:"osc-question-group"},React.createElement("h3",{className:"osc-question-group-title"},n.title),React.createElement("div",{className:"osc-question-group-description",dangerouslySetInnerHTML:{__html:n.description}}),e)}}])&&R(t.prototype,n),r&&R(t,r),i}(u.a);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function A(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=N(e);if(t){var o=N(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return x(this,n)}}function x(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(i,e);var t,n,r,o=A(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),null==(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null,barColor:{default:"#bed200",min:"#ff9100",max:"#bed200"}})).config.barColor.min&&(t.config.barColor.min="#ff9100"),null==t.config.barColor.max&&(t.config.barColor.max="#bed200"),t.answers=e.data&&e.data.answers||{},Object.keys(t.answers).forEach((function(e){t.answers[e]==parseInt(t.answers[e])&&(t.answers[e]={x:parseInt(t.answers[e])})})),t.state={score:t.props.score||0},t}return t=i,(n=[{key:"getTitle",value:function(e,t){return this.props.data&&this.props.data.title}},{key:"calculateScore",value:function(e){var t=this,n=this.answers,r=e||{},o=(Object.keys(n).length,{});Object.keys(n).forEach((function(e){var i=n[e]||{},a=r[e]||(t.config.startWithAllQuestionsAnswered?{x:50,y:50,z:50}:{}),c=o[e]={};["x","y","z"].forEach((function(e){if(void 0!==i[e]&&void 0!==a[e])return c[e]=100-Math.abs(i[e]-a[e])}))}));var i={};return Object.keys(n).forEach((function(e){["x","y","z"].forEach((function(t){i[t]=i[t]||{score:[],noOfAnswers:0},void 0!==o[e][t]&&i[t].score.push(o[e][t]),n[e]&&void 0!==n[e][t]&&i[t].noOfAnswers++}))})),Object.keys(i).forEach((function(e){i[e]=i[e].score.length?i[e].score.reduce((function(e,t){return e+t}))/i[e].noOfAnswers:void 0})),this.setState({score:i}),i}},{key:"render",value:function(){var e=this,t=e.state.score,n=null;switch(this.config.type){case"plane":var r=null,o=this.props.data&&this.props.data.images||[];if(o&&o.length){Array.isArray(o)||(o=[o]);var i=o[0],a=i;"object"==D(i)&&(a=i.src),r=React.createElement("img",{className:"osc-choice-plane-background-image",src:a,style:{width:this.props.baseSize/2,height:this.props.baseSize/2}})}return React.createElement("div",{className:"osc-choice-plane",style:{width:this.props.baseSize/2,height:this.props.baseSize/2}},r);case"minus-to-plus-100":var c=null,s=parseInt(2*(t.x-50));e.config.withPercentage&&(c=React.createElement("div",{className:"osc-percentage"},s,"%"));var u=e.config.barColor.max.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),l=e.config.barColor.min.match(/#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i),f=parseInt(l[1],16)+(parseInt(u[1],16)-parseInt(l[1],16))*(t.x/100),d=parseInt(l[2],16)+(parseInt(u[2],16)-parseInt(l[2],16))*(t.x/100),p=parseInt(l[3],16)+(parseInt(u[3],16)-parseInt(l[3],16))*(t.x/100),h={backgroundColor:"rgb(".concat(f,",").concat(d,",").concat(p,")")};s>=0&&(h.width=s/2+"%",h.left="50%",h.right="auto"),s<0&&(h.width=-s/2+"%",h.left="auto",h.right="50%"),n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar osc-from-center".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-progress",style:h})),c);break;case"zero-to-100":default:var m=null;if(e.config.withPercentage){var v=parseInt(t.x);m=React.createElement("div",{className:"osc-percentage"},v,"%")}h={width:(t.x||0)+"%",backgroundColor:e.config.barColor.default},n=React.createElement("div",{className:"osc-choice-default"},React.createElement("h4",null,e.props.data.title),React.createElement("div",{className:"osc-choice-bar".concat(e.config.withPercentage?" osc-with-percentage":"")},React.createElement("div",{className:"osc-choice-bar-mask"}),React.createElement("div",{className:"osc-choice-bar-progress",style:h})),m)}var g=null;return(e.config.minLabel||e.config.maxLabel)&&(g=React.createElement("div",{className:"osc-minmax-labels"},React.createElement("div",{className:"osc-min-label"},e.config.minLabel),React.createElement("div",{className:"osc-max-label"},e.config.maxLabel))),React.createElement("li",{className:"osc-choice"},n,g)}}])&&k(t.prototype,n),r&&k(t,r),i}(u.a);function F(e){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function G(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){q(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function H(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=z(e);if(t){var o=z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return W(this,n)}}function W(e,t){return!t||"object"!==F(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function z(e){return(z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(i,e);var t,n,r,o=H(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",withPercentage:!1,minLabel:null,maxLabel:null})).choiceElements=[],t.state={title:"Je hebt nog geen keuze gemaakt",scores:e.scores,planePos:{x:50,y:50}},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.choicesClickListener=function(e){n.setState({random:Math.random()})},document.addEventListener("osc-choices-click",n.choicesClickListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-click",self.choicesClickListener)}},{key:"calculateScores",value:function(e){var t=this,n={};t.choiceElements.forEach((function(t){n[t.config.divId]=t.calculateScore(e)}));var r={x:50,y:50};if(t.config.type){var o=Object.keys(e);if(o.length){r={x:0,y:0};var i={x:0,y:0,z:0};o.forEach((function(t){var n=e[t];["x","y","z"].forEach((function(e){void 0!==n[e]&&(r[e]+=parseInt(n[e])||0,i[e]++)}))})),r.x=i.x?parseInt(r.x/i.x):void 0,r.y=i.y?parseInt(r.y/i.y):void 0}}return t.setState({answers:e,scores:n,planePos:r}),{answers:e,scores:n,planePos:r}}},{key:"getPreferedChoice",value:function(e){var t=e.scores,n=e.planePos,r=this;switch(t=t||r.state.scores,r.config.type){case"plane":return(n=n||r.state.planePos).x<50&&n.y<50?r.choiceElements[0]:n.x>50&&n.y<50?r.choiceElements[1]:n.x<50&&n.y>50?r.choiceElements[2]:n.x>50&&n.y>50?r.choiceElements[3]:null;default:var o=Object.keys(t).sort((function(e,n){return t[n].x-t[e].x}))[0];return r.choiceElements.find((function(e){return e&&e.config.divId==o}))}}},{key:"render",value:function(){var e=this;switch(this.config.type){case"plane":var t=document.querySelector("#".concat(this.divId))&&document.querySelector("#".concat(this.divId)).offsetWidth-1||180,n=(void 0===e.state.planePos.y?50:e.state.planePos.y)*(t/100),r=(void 0===e.state.planePos.x?50:e.state.planePos.x)*(t/100);return React.createElement("div",{id:this.divId,className:"osc-choices osc-choice-plane-plane",ref:function(t){e.planePlaneElement=t}},Object.keys(e.props.choices).map((function(n,r){var o=e.props.choices[n];return React.createElement(j,{config:G({divId:"choice-".concat(o.id)},e.config),data:o,score:e.props.scores&&e.props.scores["choice-".concat(o.id)],key:"choice-".concat(o.id),baseSize:t,ref:function(t){e.choiceElements[r]=t}})})),React.createElement("div",{className:"osc-point",style:{top:n,left:r}}),React.createElement("div",{style:{clear:"both"}}));case"zero-to-100":case"minus-to-plus-100":default:return React.createElement("ul",{className:"osc-choices"},Object.keys(e.props.choices).map((function(t,n){var r=e.props.choices[t];return React.createElement(j,{config:G({divId:"choice-".concat(r.id)},e.config),data:r,score:e.props.scores&&e.props.scores["choice-".concat(r.id)],key:"choice-".concat(r.id),ref:function(t){e.choiceElements[n]=t}})})))}}}])&&U(t.prototype,n),r&&U(t,r),i}(u.a);function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e,t){return(Q=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Z(e);if(t){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return $(this,n)}}function $(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Q(e,t)}(i,e);var t,n,r,o=J(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).state={questionEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t;e.questionId&&((t=s.a.recursive(!0,{},this.props.currentTarget.answers))[e.questionId]=t[e.questionId]||{},t[e.questionId][e.dimension]=e.value),t=t||e,console.log("=",JSON.stringify(t,null,2)),this.props.onChange({answers:t})}},{key:"toggleEditMode",value:function(e){this.setState({questionEditModeIndex:this.state.questionEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=(e.props.currentTarget.answers,React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"}),React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Vraag")),React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),e.props.currentTarget.questionGroup.answerDimensions>1&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"30px"}}))),Object.keys(e.props.currentTarget.questionGroup.questions).map((function(t,n){var r=e.props.currentTarget.questionGroup.questions[t],o=[],i=r.dimensions||["x"];return(-1!=i.indexOf("x")||e.props.currentTarget.questionGroup&&1==e.props.currentTarget.questionGroup.answerDimensions)&&o.push("x"),-1!=i.indexOf("y")&&e.props.currentTarget.questionGroup&&2==e.props.currentTarget.questionGroup.answerDimensions&&o.push("y"),-1!=i.indexOf("z")&&e.props.currentTarget.questionGroup&&3==e.props.currentTarget.questionGroup.answerDimensions&&o.push("z"),React.createElement("div",{className:"osc-overview-line",key:"question-".concat(r.id)},React.createElement("div",{className:"osc-overview-line-content"},r.title," (",r.id,")"),o.map((function(t,o){var i=e.props.currentTarget.answers&&e.props.currentTarget.answers[r.id]&&("object"==K(e.props.currentTarget.answers[r.id])?e.props.currentTarget.answers[r.id][t]:e.props.currentTarget.answers[r.id]);return e.state.questionEditModeIndex==n?React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},React.createElement(d.a.Text,{config:{},value:i,onChange:function(n){return e.handleFieldChange({questionId:r.id,dimension:t,value:n.value})},ref:function(t){return e.questionImageBField=t}})):React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field",key:"field-".concat(o)},i)})),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}})))}))))),n=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(n=React.createElement("div",null,React.createElement("h3",null,"Afbeelding"),React.createElement(d.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),n,React.createElement("h3",null,"Antwoorden"),t,React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&X(t.prototype,n),r&&X(t,r),i}(u.a);function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function oe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ae(e);if(t){var o=ae(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ie(this,n)}}function ie(e,t){return!t||"object"!==te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ae(e){return(ae=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(i,e);var t,n,r,o=oe(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;void 0!==e.isActive&&((t={choicesGuideConfig:s.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.isActive=e.isActive),void 0!==e.submissionType&&((t={choicesGuideConfig:s.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.submissionType=e.submissionType),void 0!==e.withExisting&&((t={choicesGuideConfig:s.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.withExisting=e.withExisting),void 0!==e.requiredUserRole&&((t={choicesGuideConfig:s.a.recursive({},n.props.currentTarget.choicesGuideConfig)}).choicesGuideConfig.requiredUserRole=e.requiredUserRole||null),t=t||e,n.props.onChange(t)}},{key:"render",value:function(){var e=this,t=e.props.currentTarget.choicesGuideConfig||{},n=null;if("true"==t.isActive){var r=null;if("form"==t.submissionType){var o=null;"member"==t.requiredUserRole&&(o=React.createElement("div",null,React.createElement("h4",null,"Als er al een inzending is voor deze gebruiker"),React.createElement(d.a.Select,{config:{choices:[{value:"replace",description:"Overschrijf het bestaande resultaat"},{value:"error",description:"Geef een foutmelding"}]},value:t.withExisting,onChange:function(t){return e.handleFieldChange({withExisting:t.value})},ref:function(t){return e.withExistingField=t}}))),r=React.createElement("div",null,React.createElement("h4",null,"Om te kunnnen insturen moet een gebruiker ingelogd zijn"),React.createElement(d.a.Select,{config:{choices:[{value:null,description:"Nee"},{value:"member",description:"Ja"}]},value:t.requiredUserRole,onChange:function(t){return e.handleFieldChange({requiredUserRole:t.value})},ref:function(t){return e.requiredUserRoleField=t}}),o)}n=React.createElement("div",null,React.createElement("h4",null,"Opslaan van de resultaten"),React.createElement(d.a.Select,{config:{choices:[{value:"none",description:"Niet opslaan"},{value:"auto",description:"Automatisch opslaan"},{value:"form",description:"Laat eerst een formulier invullen"}]},value:t.submissionType,onChange:function(t){return e.handleFieldChange({submissionType:t.value})},ref:function(t){return e.submissionTypeField=t}}),r)}return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Naam"),React.createElement(d.a.InputWithCounter,{key:"x1",config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.handleFieldChange({title:t.value})},ref:function(t){e.titleField=t}}),React.createElement("h4",null,"Deze keuzewijzer is actief"),React.createElement(d.a.Select,{config:{choices:[{value:"true",description:"Ja"},{value:"false",description:"Nee"}]},value:t.isActive,onChange:function(t){return e.handleFieldChange({isActive:t.value})},ref:function(t){return e.isActiveField=t}}),n)}}])&&ne(t.prototype,n),r&&ne(t,r),i}(u.a);function se(e){return(se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ue(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=he(e);if(t){var o=he(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return de(this,n)}}function de(e,t){return!t||"object"!==se(t)&&"function"!=typeof t?pe(e):t}function pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var me=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(i,e);var t,n,r,o=fe(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e)).handleFieldChange=t.handleFieldChange.bind(pe(t)),t.state={valueEditModeIndex:null},t}return t=i,(n=[{key:"handleFieldChange",value:function(e){var t,n=this;if(void 0!==e.type&&(t={type:e.type},"a-to-b"==n.props.currentTarget.type&&"enum-radio"==e.type&&(t.values=[]),"enum-radio"==n.props.currentTarget.type&&"a-to-b"==e.type&&(t.values={A:{},B:{}})),void 0!==e.moreInfoTitle&&((t={moreInfo:s.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.title=e.moreInfoTitle),void 0!==e.moreInfoText&&((t={moreInfo:s.a.recursive({},n.props.currentTarget.moreInfo)}).moreInfo.text=e.moreInfoText),void 0!==e.questionTextA&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.questionImageA){t={values:s.a.recursive({},n.props.currentTarget.values)};var r=e.questionImageA;try{r=JSON.parse(r)}catch(e){}t.values.A.questionImage=r}if(void 0!==e.questionTextA&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.A.questionText=e.questionTextA),void 0!==e.labelA&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.A.label=e.labelA),void 0!==e.labelB&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.B.label=e.labelB),void 0!==e.labelBelowA&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.A.labelBelow=e.labelBelowA),void 0!==e.labelBelowB&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.B.labelBelow=e.labelBelowB),void 0!==e.questionImageB){t={values:s.a.recursive({},n.props.currentTarget.values)};var o=e.questionImageB;try{o=JSON.parse(o)}catch(e){}t.values.B.questionImage=o}void 0!==e.questionTextB&&((t={values:s.a.recursive({},n.props.currentTarget.values)}).values.B.questionText=e.questionTextB),void 0!==e.newValue&&((t={values:n.props.currentTarget.values||[]}).values.push(e.newValue),this.setState({valueEditModeIndex:t.values.length-1})),void 0!==e.deleteIndex&&(t={values:n.props.currentTarget.values||[]}).values.splice(e.deleteIndex,1),void 0!==e.valueIndex&&((t={values:n.props.currentTarget.values||[]}).values[e.valueIndex]=t.values[e.valueIndex]||{text:"",value:{}},e.valueDimension?void 0!==e.valueValue&&("object"!=se(t.values[e.valueIndex].value)&&(t.values[e.valueIndex].value={}),t.values[e.valueIndex].value[e.valueDimension]=e.valueValue):t.values[e.valueIndex].text=e.valueText),t=t||e,n.props.onChange(t)}},{key:"toggleEditMode",value:function(e){this.setState({valueEditModeIndex:this.state.valueEditModeIndex!=e?e:null})}},{key:"render",value:function(){var e=this,t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie"),React.createElement(d.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}));e.props.currentTarget.moreInfo&&(e.props.currentTarget.moreInfo.title||e.props.currentTarget.moreInfo.text)&&(t=React.createElement("div",null,React.createElement("h3",null,"Meer informatie titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.title,onChange:function(t){return e.handleFieldChange({moreInfoTitle:t.value})},ref:function(t){return e.moreInfoField=t}}),React.createElement("h3",null,"Meer informatie text"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.moreInfo&&e.props.currentTarget.moreInfo.text,onChange:function(t){return e.handleFieldChange({moreInfoText:t.value})},ref:function(t){return e.moreInfoField=t}})));var n=null;if("continuous"==e.props.currentTarget.type&&(n=React.createElement("div",null,React.createElement("h3",null,"Label minimale waarde"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:250},value:e.props.currentTarget.minLabel,onChange:function(t){return e.props.onChange({minLabel:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Label maximale waarde"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.maxLabel,onChange:function(t){return e.props.onChange({maxLabel:t.value})},ref:function(t){return e.maxLabelField=t}}))),"a-to-b"==e.props.currentTarget.type&&(n=React.createElement("div",{className:"osc-column-container"},React.createElement("div",{className:"osc-column-50p osc-margin-right-10"},React.createElement("h3",null,"Label voor A"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.label,onChange:function(t){return e.handleFieldChange({labelA:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider A"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowA:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij A"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionText,onChange:function(t){return e.handleFieldChange({questionTextA:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij A"),React.createElement(d.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.A&&e.props.currentTarget.values.A.questionImage,onChange:function(t){return e.handleFieldChange({questionImageA:t.value})},ref:function(t){return e.questionImageAField=t}})),React.createElement("div",{className:"osc-column-50p osc-margin-left-10"},React.createElement("h3",null,"Label voor B"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.label,onChange:function(t){return e.handleFieldChange({labelB:t.value})},ref:function(t){return e.labelField=t}}),React.createElement("h3",null,"Label onder slider B"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.labelBelow,onChange:function(t){return e.handleFieldChange({labelBelowB:t.value})},ref:function(t){return e.labelBelowField=t}}),React.createElement("h3",null,"Uitleg bij B"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:0,maxLength:1e3},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionText,onChange:function(t){return e.handleFieldChange({questionTextB:t.value})},ref:function(t){return e.minLabelField=t}}),React.createElement("h3",null,"Afbeelding bij B"),React.createElement(d.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.values&&e.props.currentTarget.values.B&&e.props.currentTarget.values.B.questionImage,onChange:function(t){return e.handleFieldChange({questionImageB:t.value})},ref:function(t){return e.questionImageBField=t}})))),"enum-buttons"==e.props.currentTarget.type||"enum-radio"==e.props.currentTarget.type){var r=e.props.currentTarget.dimensions||"['x']";n=React.createElement("div",null,React.createElement("h3",null,"Opties"),React.createElement("div",{className:"osc-overview"},React.createElement("div",{className:"osc-overview-question-options"},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("strong",null,"Tekst")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"X")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},React.createElement("strong",null,"Y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("div",{style:{width:"60px"}}))),e.props.currentTarget.values&&e.props.currentTarget.values.map&&e.props.currentTarget.values.map((function(t,n){var o=function(r,o){var i=o?t[r][o]:t[r];return e.state.valueEditModeIndex==n?React.createElement(d.a.Text,{config:{},value:i,onChange:function(t){return e.handleFieldChange({valueIndex:n,valueDimension:o,valueText:t.value,valueValue:t.value})}}):i};return React.createElement("div",{className:"osc-overview-line",key:"option-".concat(n)},React.createElement("div",{className:"osc-overview-line-content"},o("text")),("['x']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","x")),("['y']"==r||"['x','y']"==r)&&React.createElement("div",{className:"osc-overview-line-content osc-overview-line-field"},o("value","y")),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.toggleEditMode(n)}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.handleFieldChange({deleteIndex:n})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(){return e.handleFieldChange({newValue:{text:"Nieuwe optie",value:{x:"50",y:"50"}}})}},"Nieuwe optie toevoegen")))))}var o=null;return e.props.currentTarget.questionGroup&&e.props.currentTarget.questionGroup.answerDimensions>1&&(o=React.createElement("div",null,React.createElement("h3",null,"Deze vraag heeft invloed in de richting"),React.createElement(d.a.Select,{config:{choices:[{value:"['x']",description:"Alleen X"},{value:"['y']",description:"Alleen Y"},{value:"['x','y']",description:"X en Y"}]},value:e.props.currentTarget.dimensions,onChange:function(t){return e.props.onChange({dimensions:t.value})},ref:function(t){return e.dimensionsField=t}}))),React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"text",minLength:0,maxLength:200},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:0,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),t,React.createElement("h3",null,"Afbeelding boven de vraag"),React.createElement(d.a.ImageUpload,{key:"i1",config:{as:"json",imageserver:e.config.imageserver},value:e.props.currentTarget.images,onChange:function(t){return e.props.onChange({images:t.value})},ref:function(t){return e.imagesField=t}}),React.createElement("h3",null,"Type vraag"),React.createElement(d.a.Select,{config:{choices:[{value:"",description:"Maak een keuze"},{value:"a-to-b",description:"van a naar b slider"},,{value:"enum-radio",description:"radio buttons"}],required:!0},value:e.props.currentTarget.type,onChange:function(t){return e.handleFieldChange({type:t.value})},ref:function(t){return e.typeField=t}}),n,o,React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&ue(t.prototype,n),r&&ue(t,r),i}(u.a);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ge(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ye(e,t){return(ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ee(e);if(t){var o=Ee(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _e(this,n)}}function _e(e,t){return!t||"object"!==ve(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ee(e){return(Ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var we=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ye(e,t)}(i,e);var t,n,r,o=be(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this;return React.createElement("div",{className:"openstad-form"},React.createElement("h3",null,"Titel"),React.createElement(d.a.InputWithCounter,{config:{inputType:"input",minLength:1,maxLength:1e3},value:e.props.currentTarget.title,onChange:function(t){return e.props.onChange({title:t.value})},ref:function(t){return e.titleField=t}}),React.createElement("h3",null,"Beschrijving"),React.createElement(d.a.InputWithCounter,{config:{inputType:"textarea",minLength:1,maxLength:1e3},value:e.props.currentTarget.description,onChange:function(t){return e.props.onChange({description:t.value})},ref:function(t){return e.descriptionField=t}}),React.createElement("h3",null,"Aantal dimensies voor antwoorden"),React.createElement(d.a.Select,{config:{choices:[{value:"1",description:"1 - liniair"},{value:"2",description:"2 - vlak"}]},value:e.props.currentTarget.answerDimensions,onChange:function(t){return e.props.onChange({answerDimensions:t.value})},ref:function(t){return e.answerDimensionsField=t}}),React.createElement("h3",null,"Volgorde nummer"),React.createElement(d.a.Text,{config:{},value:e.props.currentTarget.seqnr,onChange:function(t){return e.props.onChange({seqnr:t.value})},ref:function(t){return e.seqnrField=t}}))}}])&&ge(t.prototype,n),r&&ge(t,r),i}(u.a);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ie(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Re(e,t){return(Re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Te(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Pe(e);if(t){var o=Pe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Se(this,n)}}function Se(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pe(e){return(Pe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Re(e,t)}(i,e);var t,n,r,o=Te(i);function i(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this,e)}return t=i,(n=[{key:"render",value:function(){var e=this,t=null;return(!e.props.questionGroups||e.props.questionGroups.length<1)&&(t=React.createElement("a",{href:"#",onClick:function(t){return e.props.setCurrentForm({what:"question-group"})}},"Nieuwe vraaggroep")),React.createElement("div",{className:"osc-overview"},React.createElement("h2",null,"Vraaggroepen"),Object.keys(e.props.questionGroups).map((function(t,n){var r=e.props.questionGroups[t],o=React.createElement("div",{className:"osc-overview-questions"},React.createElement("div",{className:"osc-overview-line"},React.createElement("h4",null,"Vragen")),Object.keys(r.questions).map((function(t,n){var o=r.questions[t];return React.createElement("div",{className:"osc-overview-line",key:"question-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id,questionId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question",questionGroupId:r.id,questionId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"question",questionGroupId:r.id})}},"Nieuwe vraag"))),i=React.createElement("div",{className:"osc-overview-choices"},React.createElement("h4",null,"Keuze opties"),Object.keys(r.choices).map((function(t,n){var o=r.choices[t];return React.createElement("div",{className:"osc-overview-line",key:"choice-".concat(o.id)},React.createElement("div",{className:"osc-overview-line-content"},o.seqnr," - ",o.title),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id,choiceId:o.id})}}),React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"choice",questionGroupId:r.id,choiceId:o.id,title:o.title})}})))})),React.createElement("div",{className:"osc-overview-line",key:"choice-new"},React.createElement("a",{onClick:function(t){return e.props.setCurrentForm({what:"choice",questionGroupId:r.id})}},"Nieuwe keuze optie"))),a=React.createElement("div",{className:"osc-no-button"});return 0==Object.keys(r.choices).length&&0==Object.keys(r.questions).length&&1!=e.props.questionGroups.length&&(a=React.createElement("a",{className:"osc-delete-button",onClick:function(t){return e.props.deleteElement({what:"question-group",questionGroupId:r.id,title:r.title})}})),React.createElement("div",{className:"osc-overview-question-group",key:"questiongroup-".concat(r.id)},React.createElement("div",{className:"osc-overview-line"},React.createElement("div",{className:"osc-overview-line-content"},React.createElement("h3",null,r.title)),React.createElement("div",{className:"osc-overview-line-buttons"},React.createElement("a",{className:"osc-edit-button",onClick:function(t){return e.props.setCurrentForm({what:"question-group",questionGroupId:r.id})}}),a)),o,i)})),React.createElement("br",null),React.createElement("br",null),t)}}])&&Ie(t.prototype,n),r&&Ie(t,r),i}(u.a);function Le(e){var t=e.config,n="".concat(t.api&&t.api.url,"/api/site/").concat(t.siteId,"/choicesguide/").concat(t.choicesGuideId,"?includeChoices=1&includeQuestions=1"),r=l.a.api.getHeaders();return fetch(n,{headers:r}).then((function(e){return e.json()})).then((function(e){var t={choicesGuideId:e.id,images:e.images,choicesGuideConfig:e.config,title:e.title,description:e.description,choices:e.choices||[],questionGroups:e.questiongroups||[],status:"active"};if(t.questionGroups&&t.questionGroups.map)return t.questionGroups.map((function(e){e.questions&&e.questions.map&&e.questions.map((function(e){"continuous"==e.type&&(e.type="a-to-b"),"enum-buttons"==e.type&&(e.type="enum-radio"),"a-to-b"==e.type&&(e.values&&e.values.A&&(e.values.A.labelBelow=e.values.A.labelBelow||e.minLabel),e.values&&e.values.B&&(e.values.B.labelBelow=e.values.B.labelBelow||e.maxLabel))}))})),t}))}function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){Ae(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ae(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ne(e,t){return(Ne=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ge(e);if(t){var o=Ge(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Fe(this,n)}}function Fe(e,t){return!t||"object"!==De(t)&&"function"!=typeof t?Be(e):t}function Be(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var qe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ne(e,t)}(i,e);var t,n,r,o=je(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null}})).handleFieldChange=t.handleFieldChange.bind(Be(t)),t.setCurrentForm=t.setCurrentForm.bind(Be(t)),t.deleteElement=t.deleteElement.bind(Be(t)),t.state={choicesGuideId:t.props.data.choicesGuideId,currentTarget:{},busy:!1},t.onFinished=t.props.onFinished,t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Le({config:e.config}).then((function(t){e.setState(Me(Me({},t),{},{busy:!1}),(function(){e.setCurrentForm({what:"choices-guide"})}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"handleFieldChange",value:function(e){var t=this.state.currentTarget;Object.keys(e).forEach((function(n){t[n]=e[n]})),this.setState({currentTarget:t})}},{key:"setCurrentForm",value:function(e){var t,n,r;switch(e.what){case"choices-guide":e.title=this.state.title,e.description=this.state.description,e.images=this.state.images?this.state.images:"",e.choicesGuideConfig=this.state.choicesGuideConfig?this.state.choicesGuideConfig:{};break;case"choice":n=e.questionGroupId?(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).choices&&t.choices.find((function(t){return t.id==e.choiceId}))||{}:this.state.choices.find((function(t){return t.id==e.choicesId}))||{},e.questionGroup=t,e.title=n.title,e.description=n.description,e.images=n.images,e.answers=n.answers,e.seqnr=void 0!==n.seqnr?n.seqnr:10;break;case"question-group":t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{},e.title=t.title,e.description=t.description,e.answerDimensions=t.answerDimensions,e.seqnr=void 0!==t.seqnr?t.seqnr:10;break;case"question":r=(t=this.state.questionGroups.find((function(t){return t.id==e.questionGroupId}))||{}).questions&&t.questions.find((function(t){return t.id==e.questionId}))||{},e.questionGroup=t,e.title=r.title,e.description=r.description,e.moreInfo=r.moreInfo,e.images=r.images,e.minLabel=r.minLabel,e.maxLabel=r.maxLabel,e.type=r.type,e.dimensions=r.dimensions,e.values=r.values,e.seqnr=void 0!==r.seqnr?r.seqnr:10}this.setState({currentTarget:e})}},{key:"validate",value:function(e){var t=e.showErrors,n=e.scrollTo,r=!0,o=null,i=this.formfields;return Object.keys(this.state.currentTarget).forEach((function(e){i[e+"Field"]&&i[e+"Field"].validate&&!i[e+"Field"].validate({showErrors:t})&&(r=!1,o||(o=e))})),n&&o&&o.instance&&o.instance.scrollIntoView&&o.instance.scrollIntoView({behavior:"smooth"}),r}},{key:"canSubmit",value:function(){var e=this.config.user||{};return l.a.user.hasRole(e,"moderator")}},{key:"submitForm",value:function(){var e=this;e.setState({busy:!0,submitError:null},(function(){var t,n,r;if(!e.validate({showErrors:!0,scrollTo:!0}))return e.setState({busy:!1});if(!e.canSubmit())return alert("Je mag dit niet");switch(e.state.currentTarget.what){case"choices-guide":r=e.state.choicesGuideId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,config:e.state.currentTarget.choicesGuideConfig};break;case"choice":r=e.state.currentTarget.choiceId,t=e.state.currentTarget.questionGroupId?"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/choice"):"".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/choice"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,images:e.state.currentTarget.images,answers:e.state.currentTarget.answers,seqnr:e.state.currentTarget.seqnr};try{n.answers=JSON.parse(n.answers)}catch(e){}break;case"question-group":r=e.state.currentTarget.questionGroupId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,answerDimensions:e.state.currentTarget.answerDimensions,seqnr:e.state.currentTarget.seqnr};break;case"question":r=e.state.currentTarget.questionId,t="".concat(e.config.api&&e.config.api.url,"/api/site/").concat(e.config.siteId,"/choicesguide/").concat(e.state.choicesGuideId,"/questiongroup/").concat(e.state.currentTarget.questionGroupId,"/question"),n={title:e.state.currentTarget.title,description:e.state.currentTarget.description,moreInfo:e.state.currentTarget.moreInfo,images:e.state.currentTarget.images,minLabel:e.state.currentTarget.minLabel,maxLabel:e.state.currentTarget.maxLabel,type:e.state.currentTarget.type,dimensions:e.state.currentTarget.dimensions,values:e.state.currentTarget.values,seqnr:e.state.currentTarget.seqnr};try{n.values=JSON.parse(n.values)}catch(e){}}t+=r?"/".concat(r):"";var o=l.a.api.getHeaders(e.config);fetch(t,{method:r?"PUT":"POST",headers:o,body:JSON.stringify(n)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(t){"choices-guide"==e.state.currentTarget.what?e.onFinished():e.fetchData()})).catch((function(t){t.then((function(t){try{"object"==De(t=JSON.parse(t))&&(t=t.message)}catch(e){}return e.setState({submitError:{message:t}}),console.log(t)})),e.setState({busy:!1})}))}))}},{key:"deleteElement",value:function(e){var t=e.what,n=e.questionGroupId,r=e.choiceId,o=e.questionId,i=e.title,a=this;if(a.setState({submitError:null}),confirm("Je gaat "+t+" "+i+" verwijderen. Weet je het zeker?")){var c;switch(t){case"question-group":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n);break;case"choice":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/choice/").concat(r);break;case"question":c="".concat(a.config.api&&a.config.api.url,"/api/site/").concat(a.config.siteId,"/choicesguide/").concat(a.state.choicesGuideId,"/questiongroup/").concat(n,"/question/").concat(o)}var s=l.a.api.getHeaders(a.config);fetch(c,{method:"DELETE",headers:s}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){a.fetchData()})).catch((function(e){e.then((function(e){try{"object"==De(e=JSON.parse(e))&&(e=e.message)}catch(e){}return a.setState({submitError:{message:e}}),console.log(e)})),a.setState({busy:!1})}))}}},{key:"render",value:function(){var e=this,t=null,n=null,r=null,o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.setCurrentForm({what:"choices-guide"})}},"Terug"),i=React.createElement("button",{className:"osc-button-blue",onClick:function(t){return e.submitForm()}},"Opslaan");switch(e.state.currentTarget.what){case"choices-guide":t="Bewerk keuzewijzer",n=React.createElement(ce,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}}),r=React.createElement(Ce,{questionGroups:e.state.questionGroups,setCurrentForm:e.setCurrentForm,deleteElement:e.deleteElement,ref:function(t){e.formfields=t}}),o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug");break;case"choice":t="Bewerk Keuze",n=React.createElement(ee,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question-group":t="Bewerk Vragengroep",n=React.createElement(we,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;case"question":t="Bewerk Vraag ".concat(e.state.currentTarget.questionId),n=React.createElement(me,{config:this.config,currentTarget:e.state.currentTarget,onChange:e.handleFieldChange,ref:function(t){e.formfields=t}});break;default:o=React.createElement("button",{className:"osc-button-white",onClick:function(){e.onFinished&&e.onFinished()}},"Terug"),i=null}var a=null;return e.state.submitError&&(a=React.createElement("div",{className:"osc-message osc-error"},e.state.submitError.message)),React.createElement("div",{id:this.divId,className:"osc-form".concat(this.state.busy?" osc-busy":"")},React.createElement("h2",null,t),n,r,a,React.createElement("br",null),React.createElement("br",null),o,i)}}])&&xe(t.prototype,n),r&&xe(t,r),i}(u.a),Ue=n(109),Ve=n(98);function He(e){return(He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function We(e){return function(e){if(Array.isArray(e))return ze(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ze(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ze(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ye(Object(n),!0).forEach((function(t){Xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Je(e,t){return(Je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $e(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=tt(e);if(t){var o=tt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ze(this,n)}}function Ze(e,t){return!t||"object"!==He(t)&&"function"!=typeof t?et(e):t}function et(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tt(e){return(tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var nt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Je(e,t)}(i,e);var t,n,r,o=$e(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var n=et(t=o.call(this,e,{siteId:null,loginUrl:null,noOfQuestionsToShow:1,api:{url:null},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"<b>Jouw voorkeur:</b>{preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!1,minLabel:null,maxLabel:null}}));!n.config.aspectRatio&&n.config.choices&&n.config.choices.type&&"plane"==n.config.choices.type&&(n.config.aspectRatio="10x7");var r=l.a.localStorage.get("osc-choices-guide.values")||{},a=l.a.localStorage.get("osc-choices-guide.scores")||{};return n.state={title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,currentQuestion:void 0,status:"init",values:r[n.config.choicesGuideId],scores:a[n.config.choicesGuideId]},n.liveUpdates=n.liveUpdates.bind(et(t)),n.hideEditForm=n.hideEditForm.bind(et(t)),t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){var n=this;n.liveUpdateListener=function(e){n.liveUpdates(e.detail)},document.addEventListener("osc-choices-guide-live-updates",n.liveUpdateListener),n.fetchData()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-choices-guide-live-updates",self.liveUpdateListener)}},{key:"fetchData",value:function(){var e=this;Le({config:e.config}).then((function(t){e.setState(t,(function(){e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e=this,t={currentQuestionGroupIndex:0};e.setState(t,(function(){e.liveUpdates();var t=new window.CustomEvent("osc-choices-guide-is-ready");document.dispatchEvent(t)}))}},{key:"showEditForm",value:function(){this.setState({status:"edit"})}},{key:"hideEditForm",value:function(){var e=l.a.localStorage.get("osc-choices-guide.values")||{},t=l.a.localStorage.get("osc-choices-guide.scores")||{};this.setState({title:"Loading....",questionGroups:[],choices:[],currentQuestionGroupIndex:void 0,status:"init",values:e[this.config.choicesGuideId],scores:t[this.config.choicesGuideId]},(function(){this.fetchData()}))}},{key:"gotoNextQuestion",value:function(){var e=this,t={};t.values=s()(e.state.values||{},e.questionGroupElement.getAnswers()),e.setState(t),e.choicesElement.calculateScores(t.values),e.userPreference&&e.userPreference.calculateScores();var n=e.questionGroupElement.gotoNextQuestion(),r=n.isReady,o=n.currentQuestion;e.setState({currentQuestion:o},(function(){r?e.gotoNextGroup():window.scrollTo(0,0)}))}},{key:"gotoPreviousQuestion",value:function(){var e=this;if("result"==this.state.status)return this.gotoPreviousGroup();var t={};t.values=s()(this.state.values||{},this.questionGroupElement.getAnswers()),this.setState(t),this.choicesElement.calculateScores(t.values),self.userPreference&&self.userPreference.calculateScores();var n=this.questionGroupElement.gotoPreviousQuestion(),r=n.isBeginning,o=n.currentQuestion;this.setState({currentQuestion:o},(function(){r?e.gotoPreviousGroup():window.scrollTo(0,0)}))}},{key:"gotoNextGroup",value:function(){var e=this,t=Ke({},this.state);t.currentQuestionGroupIndex<t.questionGroups.length-1?(t.values=s()(t.values||{},this.questionGroupElement.getAnswers()),t.currentQuestionGroupIndex++,this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))):this.gotoResult()}},{key:"gotoPreviousGroup",value:function(){var e=this,t={};t.currentQuestionGroupIndex=this.state.currentQuestionGroupIndex-1,"result"==this.state.status&&(t.currentQuestionGroupIndex=this.state.questionGroups.length-1,t.status="active"),this.setState(t,(function(){e.liveUpdates(),window.scrollTo(0,0)}))}},{key:"gotoResult",value:function(){document.location.href=this.config.afterUrl}},{key:"liveUpdates",value:function(){var e,t=this,n=s()(t.state.values||{},t.questionGroupElement.getAnswers()),r=t.choicesElement.calculateScores(n);e=r.scores,t.userPreference&&t.userPreference.calculateScores(n),t.setState({scores:e,firstAnswerGiven:Object.keys(n).length>0},(function(){var r=l.a.localStorage.get("osc-choices-guide.values")||{};r[t.config.choicesGuideId]=n,l.a.localStorage.set("osc-choices-guide.values",r);var o=l.a.localStorage.get("osc-choices-guide.scores")||{};o[t.config.choicesGuideId]=e,l.a.localStorage.set("osc-choices-guide.scores",o),t.updateChoicesTitle()}))}},{key:"updateChoicesTitle",value:function(){var e=this,t=e.config.choices.title.noPreferenceYet,n=e.choicesElement&&e.choicesElement.getPreferedChoice({});e.state.firstAnswerGiven&&(t=n?e.config.choices.title.preference.replace("{preferredChoice}",n&&n.getTitle(e.state.scores[n.config.divId])||t):e.config.choices.title.inBetween),e.setState({choicesTitle:t})}},{key:"onChoicesClick",value:function(e){this.choicesAccordeon.className.match(" osc-closed")?this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-closed"," osc-open"):this.choicesAccordeon.className=this.choicesAccordeon.className.replace(" osc-open"," osc-closed");var t=new window.CustomEvent("osc-choices-click",{detail:{}});document.dispatchEvent(t)}},{key:"render",value:function(){var e,t=this,n=t.state.choices;t.state.currentQuestionGroupIndex>=0&&(e=t.state.questionGroups[t.state.currentQuestionGroupIndex])&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=null,o=t.state.images;o&&o.length&&(Array.isArray(o)||(o=[o]),r=React.createElement(f.Image,{className:"osc-top-image-spacer",width:"100%",image:o[0]}));var i=null;if("edit"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement(qe,{config:t.config,onFinished:t.hideEditForm,data:Ke({},t.state)}));else if("init"==t.state.status)i=React.createElement("div",{className:"osc-choices-guide-content"},React.createElement("div",{className:"osc-intro"},"Laden..."));else{var a=React.createElement("div",{id:"osc-choices-container-"+this.divId,className:"osc-choices-container osc-accordeon osc-closed ".concat("osc-type-"+t.config.choices.type),ref:function(e){t.choicesAccordeon=e}},React.createElement("div",{onClick:function(e){return t.onChoicesClick(e)},className:"osc-accordeon-button",dangerouslySetInnerHTML:{__html:t.state.choicesTitle}}),React.createElement("div",{className:"osc-accordeon-content"},React.createElement(Y,{config:Ke({},t.config.choices),choices:We(n),scores:Ke({},t.state.scores),firstAnswerGiven:!!t.state.firstAnswerGiven,ref:function(e){t.choicesElement=e},key:"choices"}))),c=React.createElement(L,{config:t.config,data:e,ref:function(e){t.questionGroupElement=e},key:"group".concat(t.state.currentQuestionsGroupIndex)}),s=null;t.config.user&&t.config.user.role&&"admin"==t.config.user.role&&(s=React.createElement("button",{className:"osc-editbutton osc-edit",onClick:function(e){return t.showEditForm()}},"Bewerk keuzewijzer"));var u=null,l=null,d=null;t.state.currentQuestionGroupIndex>0||t.state.currentQuestion>0?(l=function(){t.gotoPreviousQuestion()},d="Terug"):t.config.beforeUrl&&(u=t.config.beforeUrl,d="Introductie");var p=null,h=null;"init"==t.state.status?(p=null,h=null):(p=function(){t.gotoNextQuestion()},h="Volgende");var m=null;(d||h)&&(m=React.createElement(Ve.default,{previousAction:l,previousUrl:u,previousLabel:d,nextAction:p,nextUrl:null,nextLabel:h})),i=React.createElement("div",{className:"osc-choices-guide-content"},s,a,c,m)}return React.createElement("div",{id:this.divId,className:"osc-choices-guide"},React.createElement(Ue.default,null),r,i)}}])&&Qe(t.prototype,n),r&&Qe(t,r),i}(u.a),rt=n(135);function ot(e){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e){return function(e){if(Array.isArray(e))return at(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return at(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return at(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function at(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function st(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(n),!0).forEach((function(t){ut(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ut(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function dt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=mt(e);if(t){var o=mt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pt(this,n)}}function pt(e,t){return!t||"object"!==ot(t)&&"function"!=typeof t?ht(e):t}function ht(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var vt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(i,e);var t,n,r,o=dt(i);function i(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=o.call(this,e,{type:"default",submission:{type:"none",requireLoginSettings:{title:"Stemcode",description:"Om te kunnen stemmen vul je de stemcode in die je per post hebt ontvangen. Wij controleren je stemcode op geldigheid. Als dat gelukt is kun je stemmen.",buttonTextLogin:"Vul je stemcode in",buttonTextLoggedIn:"Geldige stemcode",buttonTextAlreadySubmitted:"Ongeldige stemcode",changeLoginLinkText:"Vul een andere stemcode in",loggedInMessage:"Het controleren van je stemcode is gelukt! Klik op onderstaande knop om je keuze in te sturen.",notYetLoggedInError:"Klik hierboven om je stem te valideren.",alreadySubmittedMessage:"Deze stemcode is al gebruikt om te stemmen. Een stemcode kan maar één keer gebruikt worden."}},choices:{title:{noPreferenceYet:"Je hebt nog geen keuze gemaakt",preference:"Jouw voorkeur is {preferredChoice}",inBetween:"Je staat precies tussen meerdere voorkeuren in"},withPercentage:!0,minLabel:null,maxLabel:null}})).config.loginUrl=t.config.loginUrl||"/oauth/login?returnTo="+encodeURIComponent(document.location.href),t.config.logoutUrl=t.config.logoutUrl||"/oauth/logout?returnTo="+encodeURIComponent(document.location.href);var n=l.a.localStorage.get("osc-choices-guide.values")||{};n=n[t.config.choicesGuideId]||{};var r=l.a.localStorage.get("osc-choices-guide.scores")||{};r=r[t.config.choicesGuideId]||{};var a,c=l.a.localStorage.get("osc-choices-guide.formvalues")||{};c=c[t.config.choicesGuideId]||{};var s=window.location.search.match(/(\?|\&)resultdata=([^\?\&]+)/);if(s){var u=window.atob(s[2]);try{u=JSON.parse(u)}catch(e){}a=u.result.scrollToLogin,c=u.formValues,n=u.result.answers,r=u.result.scores}if("form"==t.config.submission.type){t.onFormChange=t.onFormChange.bind(ht(t));t.config.submission.form.fields.forEach((function(e){var t=e.name||e.title.toLowerCase();void 0!==c[t]&&(e.value=c[t])}))}return t.state={title:"",answers:n,scores:r,scrollToLogin:a,questionGroupId:t.config.questionGroupId},t}return t=i,(n=[{key:"componentDidMount",value:function(e,t){this.fetchData()}},{key:"fetchData",value:function(){var e=this;Le({config:e.config}).then((function(t){var n=t.questionGroups&&t.questionGroups[0]&&t.questionGroups[0].id;e.setState(st(st({},t),{},{questionGroupId:n}),(function(){e.config.submission.type=t.choicesGuideConfig.submissionType||e.config.submission.type,e.startGuide()}))})).catch((function(e){console.log("Niet goed"),console.log(e)}))}},{key:"startGuide",value:function(){var e,t,n=this,r=n.choicesElement&&n.choicesElement.calculateScores(n.state.answers);e=r.scores,t=r.planePos;var o="";if(n.choicesElement){var i=n.choicesElement.getPreferedChoice({scores:e,planePos:t});o=i?n.config.choices.title.preference.replace("{preferredChoice}",i&&i.getTitle(n.state.scores[i.config.divId])||o):n.config.choices.title.inBetween,n.setState({title:o});var a=new window.CustomEvent("osc-choices-guide-result-is-ready",{detail:{preferredChoice:{name:void 0,title:o,preferredChoiceId:-1},answers:n.state.answers,scores:n.state.scores}});if(document.dispatchEvent(a),n.state.scrollToLogin){var c=document.querySelector(".osc-require-login");c&&c.scrollIntoView({behavior:"smooth"})}"auto"==n.config.submission.type&&n.submitResult()}}},{key:"submitResult",value:function(){var e,t,n,r=this,o=!(!r.state.choicesGuideConfig||!r.state.choicesGuideConfig.requiredUserRole);if(o&&!r.isUserLoggedIn()){var i=document.querySelector(".osc-require-login");i&&i.scrollIntoView({behavior:"smooth"}),t={submissionError:{message:r.config.submission.requireLoginSettings.notYetLoggedInError,type:"unknown"}}}"form"==r.config.submission.type&&(e=r.form.getValues(),r.form.validate({showErrors:!0,scrollTo:!0})||(n=!0)),t||n?r.setState(t,(function(){r.form.validate({showErrors:!0,scrollTo:!0})})):rt.a.load().then((function(t){t.get().then((function(t){var n=t.visitorId,i="".concat(r.config.api&&r.config.api.url,"/api/site/").concat(r.config.siteId,"/choicesguide/").concat(r.config.choicesGuideId,"/result"),a=l.a.api.getHeaders(r.config),c={result:{answers:r.state.answers,scores:r.state.scores},extraData:e,userFingerprint:n};fetch(i,{method:"POST",headers:a,body:JSON.stringify(c)}).then((function(e){if(e.ok)return e.json();throw e.text()})).then((function(e){if("form"==r.config.submission.type)return l.a.localStorage.remove("osc-choices-guide.values"),l.a.localStorage.remove("osc-choices-guide.scores"),l.a.localStorage.remove("osc-choices-guide.formvalues"),o?r.logout({afterUrl:r.config.afterUrl}):document.location.href=r.config.afterUrl})).catch((function(e){e.then((function(e){try{e=JSON.parse(e)}catch(e){}var t=Array.isArray(e)&&e[0]&&e[0].message||e[0]||e.message||e;r.setState({submissionError:{message:t.toString(),type:"Je hebt je mening al ingestuurd"==t?"alreadySubmitted":"unknown"}},(function(){return console.log(e)}))}))}))}))}))}},{key:"isUserLoggedIn",value:function(){return this.config.user&&this.config.user.role&&"anonymous"!=this.config.user.role}},{key:"gotoLoginUrl",value:function(){var e=this.config.loginUrl,t={scrollToLogin:!0,formValues:this.form.getValues(),result:{answers:this.state.answers,scores:this.state.scores}},n=e.match(/returnTo=([^\?\&]+)/);if(n){var r=decodeURIComponent(n[1]);r+=r.match(/\?/)?"&":"?",r+="resultdata="+window.btoa(JSON.stringify(t).replace(/=+$/,"")),r=encodeURIComponent(r),e=e.replace(/returnTo=[^\?\&]+/,"returnTo="+r)}else e+=e.match(/\?/)?"&":"?",e+="resultdata="+window.btoa(JSON.stringify(t)).replace(/=+$/,"");document.location.href=e}},{key:"logout",value:function(e){var t=e.afterUrl,n=void 0===t?self.config.afterUrl:t,r=self.config.logoutUrl||"/oauth/logout";fetch(r,{headers:{"Content-type":"application/json"},method:"GET"}).then((function(e){return document.location.href=n})).catch((function(e){return document.location.href=n}))}},{key:"onFormChange",value:function(){var e=this,t=l.a.localStorage.get("osc-choices-guide.formvalues")||{};t[e.config.choicesGuideId]=e.form.getValues(),l.a.localStorage.set("osc-choices-guide.formvalues",t),e.setState({random:Math.random()})}},{key:"render",value:function(){var e,t=this,n=(t.props&&t.props.data,t.state.choices);t.state.questionGroups&&(e=t.state.questionGroups.find((function(e){return e.id==t.state.questionGroupId})))&&(e.values=t.state.values||{},e&&e.choices&&(n=e.choices));var r=!(!t.state.choicesGuideConfig||!t.state.choicesGuideConfig.requiredUserRole),o=null;n&&(o=React.createElement(Y,{config:st({},t.config.choices),scores:st({},t.state.scores),choices:it(n),firstAnswerGiven:!0,ref:function(e){t.choicesElement=e},key:"choices"}));var i=null;t.config.moreInfoUrl&&t.config.moreInfoLabel&&(i=React.createElement("div",{className:"osc-more-info-link"},React.createElement("a",{href:t.config.moreInfoUrl},t.config.moreInfoLabel)));var a=null,c=null,s=null;if("form"==t.config.submission.type){if(a=React.createElement(d.a.Form,{config:t.config.submission.form,onChange:t.onFormChange,ref:function(e){t.form=e}}),r)if(t.isUserLoggedIn()){var u="osc-success",l=t.config.submission.requireLoginSettings.buttonTextLoggedIn,f=t.config.submission.requireLoginSettings.loggedInMessage;t.state.submissionError&&(u="osc-error","alreadySubmitted"==t.state.submissionError.type?(l=t.config.submission.requireLoginSettings.buttonTextAlreadySubmitted,f=t.config.submission.requireLoginSettings.alreadySubmittedMessage):f=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-logged-in osc-logged-in ".concat(u)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},l),React.createElement("div",{className:"change-login-link-text"},React.createElement("a",{onClick:function(e){return t.gotoLoginUrl()}},t.config.submission.requireLoginSettings.changeLoginLinkText)),React.createElement("div",{className:"osc-message"},f)))}else{var p="",h="";t.state.submissionError&&(p="osc-error",h=t.state.submissionError.message),c=React.createElement("div",{className:"osc-require-login osc-not-yet-logged-in ".concat(p)},React.createElement("h2",null,t.config.submission.requireLoginSettings.title),React.createElement("div",{className:"osc-gray-block"},t.config.submission.requireLoginSettings.description,React.createElement("br",null),React.createElement("br",null),React.createElement("button",{onClick:function(e){return t.gotoLoginUrl()},className:"osc-button osc-button-white"},t.config.submission.requireLoginSettings.buttonTextLogin),React.createElement("div",{className:"osc-message"},h)))}var m=null,v=null;t.config.beforeUrl&&(m=t.config.beforeUrl,v=t.config.beforeLabel||"Vorige");var g=t.config.afterLabel||"Opslaan",y="form"==t.config.submission.type&&t.form&&!t.form.validate({})||r&&!t.isUserLoggedIn();(v||g)&&(s=React.createElement(Ve.default,{previousAction:null,previousUrl:m,previousLabel:v,nextAction:function(){t.submitResult()},nextUrl:null,nextLabel:g,nextIsDisabled:y}))}var b=null;return t.state.submissionError&&!r&&(b=React.createElement("div",{className:"osc-message osc-error"},t.state.submissionError.message)),React.createElement("div",{className:"osc-choices-guide"},React.createElement("div",{className:"osc-result"},React.createElement("div",{className:"osc-result-content"},React.createElement("div",{className:"osc-choices-container ".concat("osc-type-"+t.config.choices.type)},React.createElement("h3",{dangerouslySetInnerHTML:{__html:t.state.title}}),o),i,a,c,b)),s)}}])&&lt(t.prototype,n),r&&lt(t,r),i}(u.a);nt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(nt,{attributes:n,config:t}),e)},vt.renderElement=function(e,t){var n=e.attributes;a.a.render(o.a.createElement(vt,{attributes:n,config:t}),e)}},function(e,t,n){"use strict";(function(e){var r=n(47);function o(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]+t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]+t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]+t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]+t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function i(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var n=[0,0,0,0];return n[3]+=e[3]*t[3],n[2]+=n[3]>>>16,n[3]&=65535,n[2]+=e[2]*t[3],n[1]+=n[2]>>>16,n[2]&=65535,n[2]+=e[3]*t[2],n[1]+=n[2]>>>16,n[2]&=65535,n[1]+=e[1]*t[3],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[2]*t[2],n[0]+=n[1]>>>16,n[1]&=65535,n[1]+=e[3]*t[1],n[0]+=n[1]>>>16,n[1]&=65535,n[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],n[0]&=65535,[n[0]<<16|n[1],n[2]<<16|n[3]]}function a(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])}function c(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]}function s(e,t){return[e[0]^t[0],e[1]^t[1]]}function u(e){return e=s(e,[0,e[0]>>>1]),e=s(e=i(e,[4283543511,3981806797]),[0,e[0]>>>1]),e=s(e=i(e,[3301882366,444984403]),[0,e[0]>>>1])}function l(e,t){t=t||0;var n,r=(e=e||"").length%16,l=e.length-r,f=[0,t],d=[0,t],p=[0,0],h=[0,0],m=[2277735313,289559509],v=[1291169091,658871167];for(n=0;n<l;n+=16)p=[255&e.charCodeAt(n+4)|(255&e.charCodeAt(n+5))<<8|(255&e.charCodeAt(n+6))<<16|(255&e.charCodeAt(n+7))<<24,255&e.charCodeAt(n)|(255&e.charCodeAt(n+1))<<8|(255&e.charCodeAt(n+2))<<16|(255&e.charCodeAt(n+3))<<24],h=[255&e.charCodeAt(n+12)|(255&e.charCodeAt(n+13))<<8|(255&e.charCodeAt(n+14))<<16|(255&e.charCodeAt(n+15))<<24,255&e.charCodeAt(n+8)|(255&e.charCodeAt(n+9))<<8|(255&e.charCodeAt(n+10))<<16|(255&e.charCodeAt(n+11))<<24],p=a(p=i(p,m),31),f=o(f=a(f=s(f,p=i(p,v)),27),d),f=o(i(f,[0,5]),[0,1390208809]),h=a(h=i(h,v),33),d=o(d=a(d=s(d,h=i(h,m)),31),f),d=o(i(d,[0,5]),[0,944331445]);switch(p=[0,0],h=[0,0],r){case 15:h=s(h,c([0,e.charCodeAt(n+14)],48));case 14:h=s(h,c([0,e.charCodeAt(n+13)],40));case 13:h=s(h,c([0,e.charCodeAt(n+12)],32));case 12:h=s(h,c([0,e.charCodeAt(n+11)],24));case 11:h=s(h,c([0,e.charCodeAt(n+10)],16));case 10:h=s(h,c([0,e.charCodeAt(n+9)],8));case 9:h=i(h=s(h,[0,e.charCodeAt(n+8)]),v),d=s(d,h=i(h=a(h,33),m));case 8:p=s(p,c([0,e.charCodeAt(n+7)],56));case 7:p=s(p,c([0,e.charCodeAt(n+6)],48));case 6:p=s(p,c([0,e.charCodeAt(n+5)],40));case 5:p=s(p,c([0,e.charCodeAt(n+4)],32));case 4:p=s(p,c([0,e.charCodeAt(n+3)],24));case 3:p=s(p,c([0,e.charCodeAt(n+2)],16));case 2:p=s(p,c([0,e.charCodeAt(n+1)],8));case 1:p=i(p=s(p,[0,e.charCodeAt(n)]),m),f=s(f,p=i(p=a(p,31),v))}return f=o(f=s(f,[0,e.length]),d=s(d,[0,e.length])),d=o(d,f),f=o(f=u(f),d=u(d)),d=o(d,f),("00000000"+(f[0]>>>0).toString(16)).slice(-8)+("00000000"+(f[1]>>>0).toString(16)).slice(-8)+("00000000"+(d[0]>>>0).toString(16)).slice(-8)+("00000000"+(d[1]>>>0).toString(16)).slice(-8)}var f=window;function d(e){return parseInt(e)}function p(e){return parseFloat(e)}function h(e){return e.reduce((function(e,t){return e+(t?1:0)}),0)}var m=window,v=navigator;document;function g(){return h(["MSCSSMatrix"in m,"msSetImmediate"in m,"msIndexedDB"in m,"msMaxTouchPoints"in v,"msPointerEnabled"in v])>=4}var y=window,b=document;function _(e,t,n){(function(e){return e&&"function"==typeof e.setValueAtTime})(t)&&t.setValueAtTime(n,e.currentTime)}function E(t){return new e((function(e,n){t.oncomplete=function(t){return e(t.renderedBuffer)};var r=3,o=function(){switch(t.startRendering(),t.state){case"running":setTimeout((function(){return n(O("timeout"))}),1e3);break;case"suspended":b.hidden||r--,r>0?setTimeout(o,500):n(O("suspended"))}};o()}))}function w(e){for(var t=0,n=4500;n<5e3;++n)t+=Math.abs(e[n]);return t}function O(e){var t=new Error(e);return t.name=e,t}var I=document,R=["monospace","sans-serif","serif"],T=["sans-serif-thin","ARNO PRO","Agency FB","Arabic Typesetting","Arial Unicode MS","AvantGarde Bk BT","BankGothic Md BT","Batang","Bitstream Vera Sans Mono","Calibri","Century","Century Gothic","Clarendon","EUROSTILE","Franklin Gothic","Futura Bk BT","Futura Md BT","GOTHAM","Gill Sans","HELV","Haettenschweiler","Helvetica Neue","Humanst521 BT","Leelawadee","Letter Gothic","Levenim MT","Lucida Bright","Lucida Sans","Menlo","MS Mincho","MS Outlook","MS Reference Specialty","MS UI Gothic","MT Extra","MYRIAD PRO","Marlett","Meiryo UI","Microsoft Uighur","Minion Pro","Monotype Corsiva","PMingLiU","Pristina","SCRIPTINA","Segoe UI Light","Serifa","SimHei","Small Fonts","Staccato222 BT","TRAJAN PRO","Univers CE 55 Medium","Vrinda","ZWAdobeF"],S={fontStyle:"normal",fontWeight:"normal",letterSpacing:"normal",lineBreak:"auto",lineHeight:"normal",textTransform:"none",textAlign:"left",textDecoration:"none",textShadow:"none",whiteSpace:"normal",wordBreak:"normal",wordSpacing:"normal",position:"absolute",left:"-9999px",fontSize:"48px"};function P(e){return e.toDataURL()}var C=navigator,L=window;var D=navigator;var k=window;var M=window;var A=window;var x=document;var N={osCpu:function(){return navigator.oscpu},languages:function(){var e=[],t=D.language||D.userLanguage||D.browserLanguage||D.systemLanguage;if(void 0!==t&&e.push([t]),Array.isArray(D.languages))h(["webkitPersistentStorage"in v,"webkitTemporaryStorage"in v,0===v.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in m,"BatteryManager"in m,"webkitMediaStream"in m,"webkitSpeechGrammar"in m])>=5&&h([!("MediaSettingsRange"in m),"RTCEncodedAudioFrame"in m,""+m.Intl=="[object Intl]",""+m.Reflect=="[object Reflect]"])>=3||e.push(D.languages);else if("string"==typeof D.languages){var n=D.languages;n&&e.push(n.split(","))}return e},colorDepth:function(){return window.screen.colorDepth},deviceMemory:function(){return e=p(navigator.deviceMemory),t=void 0,"number"==typeof e&&isNaN(e)?t:e;var e,t},screenResolution:function(){var e=[d(k.screen.width),d(k.screen.height)];return e.sort().reverse(),e},availableScreenResolution:function(){if(M.screen.availWidth&&M.screen.availHeight){var e=[d(M.screen.availWidth),d(M.screen.availHeight)];return e.sort().reverse(),e}},hardwareConcurrency:function(){try{var e=d(navigator.hardwareConcurrency);return isNaN(e)?1:e}catch(e){return 1}},timezoneOffset:function(){var e=(new Date).getFullYear();return Math.max(p(new Date(e,0,1).getTimezoneOffset()),p(new Date(e,6,1).getTimezoneOffset()))},timezone:function(){var e;if(null===(e=A.Intl)||void 0===e?void 0:e.DateTimeFormat)return(new A.Intl.DateTimeFormat).resolvedOptions().timeZone},sessionStorage:function(){try{return!!window.sessionStorage}catch(e){return!0}},localStorage:function(){try{return!!window.localStorage}catch(e){return!0}},indexedDB:function(){if(!(g()||h(["msWriteProfilerMark"in m,"MSStream"in m,"msLaunchUri"in v,"msSaveBlob"in v])>=3&&!g()))try{return!!window.indexedDB}catch(e){return!0}},openDatabase:function(){return!!window.openDatabase},cpuClass:function(){return navigator.cpuClass},platform:function(){return navigator.platform},plugins:function(){if(g())return[];if(navigator.plugins){for(var e=[],t=0;t<navigator.plugins.length;++t){var n=navigator.plugins[t];if(n){for(var r=[],o=0;o<n.length;++o){var i=n[o];r.push({type:i.type,suffixes:i.suffixes})}e.push({name:n.name,description:n.description,mimeTypes:r})}}return e}},canvas:function(){var e=function(){var e=document.createElement("canvas");return e.width=240,e.height=140,e.style.display="inline",[e,e.getContext("2d")]}(),t=e[0],n=e[1];if(!function(e,t){return!(!t||!e.toDataURL)}(t,n))return{winding:!1,data:""};n.rect(0,0,10,10),n.rect(2,2,6,6);var r=!n.isPointInPath(5,5,"evenodd");n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",n.font="11pt no-real-font-123";var o="Cwm fjordbank 😃 gly";return n.fillText(o,2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText(o,4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),{winding:r,data:P(t)}},touchSupport:function(){var e,t=0;void 0!==C.maxTouchPoints?t=d(C.maxTouchPoints):void 0!==C.msMaxTouchPoints&&(t=C.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return{maxTouchPoints:t,touchEvent:e,touchStart:"ontouchstart"in L}},fonts:function(){var e=I.body,t=I.createElement("div"),n=I.createElement("div"),r={},o={},i=function(){var e=I.createElement("span");e.textContent="mmMwWLliI0O&1";for(var t=0,n=Object.keys(S);t<n.length;t++){var r=n[t];e.style[r]=S[r]}return e},a=function(e){return R.some((function(t,n){return e[n].offsetWidth!==r[t]||e[n].offsetHeight!==o[t]}))},c=R.map((function(e){var n=i();return n.style.fontFamily=e,t.appendChild(n),n}));e.appendChild(t);for(var s=0,u=R.length;s<u;s++)r[R[s]]=c[s].offsetWidth,o[R[s]]=c[s].offsetHeight;var l=function(){for(var e={},t=function(t){e[t]=R.map((function(e){var r=function(e,t){var n=i();return n.style.fontFamily="'"+e+"',"+t,n}(t,e);return n.appendChild(r),r}))},r=0,o=T;r<o.length;r++){t(o[r])}return e}();e.appendChild(n);for(var f=[],d=0,p=T.length;d<p;d++)a(l[T[d]])&&f.push(T[d]);return e.removeChild(n),e.removeChild(t),f},audio:function(){return Object(r.b)(this,void 0,void 0,(function(){var e,t,n,o,i,a;return Object(r.c)(this,(function(r){switch(r.label){case 0:if(!(e=y.OfflineAudioContext||y.webkitOfflineAudioContext))return[2,-2];if(h(["ApplePayError"in m,"CSSPrimitiveValue"in m,"Counter"in m,0===v.vendor.indexOf("Apple"),"getStorageUpdates"in v,"WebKitMediaKeys"in m])>=4&&!(h(["safari"in m,!("DeviceMotionEvent"in m),!("ongestureend"in m),!("standalone"in v)])>=3)&&!(h(["DOMRectList"in m,"RTCPeerConnectionIceEvent"in m,"SVGGeometryElement"in m,"ontransitioncancel"in m])>=3))return[2,-1];t=new e(1,44100,44100),(n=t.createOscillator()).type="triangle",_(t,n.frequency,1e4),o=t.createDynamicsCompressor(),_(t,o.threshold,-50),_(t,o.knee,40),_(t,o.ratio,12),_(t,o.reduction,-20),_(t,o.attack,0),_(t,o.release,.25),n.connect(o),o.connect(t.destination),n.start(0),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,E(t)];case 2:return i=r.sent(),[3,5];case 3:if("timeout"===(a=r.sent()).name||"suspended"===a.name)return[2,-3];throw a;case 4:return n.disconnect(),o.disconnect(),[7];case 5:return[2,w(i.getChannelData(0))]}}))}))},pluginsSupport:function(){return void 0!==navigator.plugins},productSub:function(){return navigator.productSub},emptyEvalLength:function(){return eval.toString().length},errorFF:function(){try{throw"a"}catch(e){try{return e.toSource(),!0}catch(e){return!1}}},vendor:function(){return navigator.vendor},chrome:function(){return void 0!==window.chrome},cookiesEnabled:function(){try{x.cookie="cookietest=1; SameSite=Strict;";var e=-1!==x.cookie.indexOf("cookietest=");return x.cookie="cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT",e}catch(e){return!1}}};function j(){return function(e,t,n){return Object(r.b)(this,void 0,void 0,(function(){var o,i,a,c,s,u,l,f,d;return Object(r.c)(this,(function(p){switch(p.label){case 0:o=Date.now(),i={},a=0,c=Object.keys(e),p.label=1;case 1:if(!(a<c.length))return[3,7];if(s=c[a],function(e,t){for(var n=0,r=e.length;n<r;++n)if(e[n]===t)return!0;return!1}(n,s))return[3,6];u=void 0,p.label=2;case 2:return p.trys.push([2,4,,5]),d={},[4,e[s](t)];case 3:return d.value=p.sent(),u=d,[3,5];case 4:return l=p.sent(),u=l&&"object"==typeof l&&"message"in l?{error:l}:{error:{message:l}},[3,5];case 5:f=Date.now(),i[s]=Object(r.a)(Object(r.a)({},u),{duration:f-o}),o=f,p.label=6;case 6:return a++,[3,1];case 7:return[2,i]}}))}))}(N,void 0,[])}function F(e){return JSON.stringify(e,(function(e,t){return t instanceof Error?(n=t,Object(r.a)({name:n.name,message:n.message,stack:null===(o=n.stack)||void 0===o?void 0:o.split("\n")},n)):t;var n,o}),2)}function B(e){return l(function(e){for(var t="",n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o],a=i.error?"error":JSON.stringify(i.value);t+=(t?"|":"")+o.replace(/([:|\\])/g,"\\$1")+":"+a}return t}(e))}var G=function(){function e(){}return e.prototype.get=function(e){return void 0===e&&(e={}),Object(r.b)(this,void 0,void 0,(function(){var t,n;return Object(r.c)(this,(function(r){switch(r.label){case 0:return[4,j()];case 1:return t=r.sent(),n=function(e){var t;return{components:e,get visitorId(){return void 0===t&&(t=B(this.components)),t},set visitorId(e){t=e}}}(t),e.debug&&console.log("Copy the text below to get the debug data:\n\n```\nversion: 3.0.5\nuserAgent: "+navigator.userAgent+"\ngetOptions: "+JSON.stringify(e,void 0,2)+"\nvisitorId: "+n.visitorId+"\ncomponents: "+F(t)+"\n```"),[2,n]}}))}))},e}();var q={load:function(t){var n=(void 0===t?{}:t).delayFallback,o=void 0===n?50:n;return Object(r.b)(this,void 0,void 0,(function(){return Object(r.c)(this,(function(t){switch(t.label){case 0:return[4,(n=o,r=2*o,void 0===r&&(r=1/0),new e((function(e){f.requestIdleCallback?f.requestIdleCallback((function(){return e()}),{timeout:r}):setTimeout(e,Math.min(n,r))})))];case 1:return t.sent(),[2,new G]}var n,r}))}))},hashComponents:B,componentsToDebugString:F};t.a=q}).call(this,n(11))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return IdeasForm}));var _component_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2),_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(5);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var IdeasForm=function(_OpenStadComponent){_inherits(IdeasForm,_OpenStadComponent);var _super=_createSuper(IdeasForm);function IdeasForm(props){var _this;_classCallCheck(this,IdeasForm),_this=_super.call(this,props,{user:{},ideaId:null,idea:{titleMinLength:10,titleMaxLength:20,summaryMinLength:20,summaryMaxLength:140,descriptionMinLength:140,descriptionMaxLength:5e3,fields:[]}});var self=_assertThisInitialized(_this),fields=self.config.idea.fields=_toConsumableArray(self.config.idea.fields);self.props.idea.extraData||(self.props.idea.extraData={});var state={formfields:{id:self.props.idea.id||"",user:self.props.idea.user||{}},showFormErrorsWarning:!1,isBusy:!1};fields.forEach((function(field){field.name&&(state.formfields[field.name]=eval("self.props.idea."+field.name),field.value=eval("self.props.idea."+field.name))}));var titleField=fields.find((function(e){return"title"==e.name}));titleField&&(titleField.minLength=self.config.idea.titleMinLength,titleField.maxLength=self.config.idea.titleMaxLength);var summaryField=fields.find((function(e){return"summary"==e.name}));summaryField&&(summaryField.minLength=self.config.idea.summaryMinLength,summaryField.maxLength=self.config.idea.summaryMaxLength);var descriptionField=fields.find((function(e){return"description"==e.name}));descriptionField&&(descriptionField.minLength=self.config.idea.descriptionMinLength,descriptionField.maxLength=self.config.idea.descriptionMaxLength);var imageField=fields.find((function(e){return"image-upload"==e.inputType}));if(imageField&&(imageField.imageserver=self.config.imageserver),_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,"editor")){if(self.config.types&&"typeId"==self.config.typeField){var choices=[];self.config.types.forEach((function(e){var t=e;(!t.auth||t.auth.createableBy&&_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.user.hasRole(self.config.user,t.auth.createableBy))&&choices.push({title:t.name,value:t.id||t.value})})),self.config.idea.fields.push({name:"typeId",title:"Type inzending",value:self.props.idea.typeId,inputType:"multiple-choice",choices:choices}),state.formfields.typeId=self.props.idea.typeId}self.config.idea.fields.push({name:"modBreak",title:"Moderator reactie",value:self.props.idea.modBreak,inputType:"textarea-with-counter",minLength:0,maxLength:2e3}),state.formfields.modBreak=self.props.idea.modBreak}else self.config.types&&"typeId"==self.config.typeField&&(self.config.idea.fields.push({name:"typeId",value:self.props.idea.typeId,inputType:"hidden"}),state.formfields.typeId=self.props.idea.typeId);return self.state=state,_this}return _createClass(IdeasForm,[{key:"componentDidMount",value:function(e,t){var n=this;n.updateLocationListener=function(e){n.updateLocation(e.detail&&e.detail.location)},document.addEventListener("osc-update-location",n.updateLocationListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-update-location",this.updateLocationListener)}},{key:"updateLocation",value:function(e){if(e){var t=_objectSpread({},this.state);t.formfields.location={coordinates:[e.lat,e.lng]},t.formfields.address=e.address,this.setState(t)}}},{key:"validateIdea",value:function(){var e=this,t=!0;return e.state.formfields.location?e["form-warning-location"].style.display="none":(console.log("xxx"),e["form-warning-location"].style.display="block",t=!1),t}},{key:"submitIdea",value:function(){var e=this,t=this;t.setState({isBusy:!0},(function(){var n=t.form.getValues(),r=t.form.validate({showErrors:!0,scrollTo:!0});if(t.validateIdea()&&r){if(t.setState({showFormErrorsWarning:!1}),!t.config.api.isUserLoggedIn)return alert("Je bent niet ingelogd");var o=t.config.api.url+"/api/site/"+t.config.siteId+"/idea",i=_libs_index_jsx__WEBPACK_IMPORTED_MODULE_1__.a.api.getHeaders(t.config),a={location:JSON.stringify(_objectSpread({type:"Point"},t.state.formfields.location))};Object.keys(n).forEach((function(e){var t=e.match(/^extraData\.(.+)/);t?(a.extraData||(a.extraData={}),a.extraData[t[1]]=n[e]):a[e]=n[e]}));var c="POST";"number"==typeof e.state.formfields.id&&(c="PUT",o=o+"/"+e.state.formfields.id),fetch(o,{method:c,headers:i,body:JSON.stringify(a)}).then((function(e){if(!e.ok)throw e;return e.json()})).then((function(e){t.setState({isBusy:!1},(function(){var t=new window.CustomEvent("osc-idea-stored",{detail:{idea:e}});document.dispatchEvent(t)}))})).catch((function(e){console.log("Niet goed"),console.log(e),"function"==typeof e.json?e.json().then((function(e){return t.setState({isBusy:!1,showFormErrorsWarning:e.message})})):t.setState({isBusy:!1,showFormErrorsWarning:e.message||e})}))}else t.setState({isBusy:!1,showFormErrorsWarning:!0})}))}},{key:"render",value:function(){var e=this,t=this,n=null;if(t.state.showFormErrorsWarning){var r="Niet alle velden zijn correct ingevuld. Scroll naar boven om te zien wat er mis gaat.";"string"==typeof t.state.showFormErrorsWarning&&(r=t.state.showFormErrorsWarning),n=React.createElement("div",{className:"osc-form-errors-warning"},r)}var o;return o=React.createElement(_forms_index_jsx__WEBPACK_IMPORTED_MODULE_2__.a.Form,{config:{fields:t.config.idea.fields},values:{typeId:t.state.formfields.typeId},ref:function(e){t.form=e}}),React.createElement("div",{id:t.id,className:t.props.className||"osc-infobar-idea-form",ref:function(e){return t.instance=e}},React.createElement("div",{className:"osc-spacer"}),React.createElement("form",{className:"osc-form"},React.createElement("h1",null,"Nieuw punt toevoegen"),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Naam"),t.state.formfields.user&&t.state.formfields.user.fullName),React.createElement("div",{className:"osc-form-group"},React.createElement("h2",null,"Een locatie vlakbij"),t.state.formfields.address||"Adres wordt gezocht...",React.createElement("div",{className:"osc-form-warning",style:{display:"none"},ref:function(t){return e["form-warning-location"]=t}},"Geen locatie geselecteerd")),o,React.createElement("br",null),n,React.createElement("br",null),React.createElement("a",{className:"osc-button osc-button-blue".concat(t.state.isBusy?" osc-disabled":""),onClick:function(){t.state.isBusy||t.submitIdea()},ref:function(e){return t.submitButton=e}},"Versturen"),React.createElement("br",null),React.createElement("br",null),React.createElement("br",null)))}}]),IdeasForm}(_component_index_jsx__WEBPACK_IMPORTED_MODULE_0__.a)},function(module,__webpack_exports__,__webpack_require__){"use strict";var _nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(110),_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(90),redux__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(8),_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(24),react_redux__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(42);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _get(e,t,n){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_superPropBase(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Map=function(_OpenStadComponentNLM){_inherits(Map,_OpenStadComponentNLM);var _super=_createSuper(Map);function Map(e){var t;return _classCallCheck(this,Map),(t=_super.call(this,e,{clustering:{maxClusterRadius:100,showCoverageOnHover:!1},locationIcon:{html:'<svg width="39" height="50" viewBox="0 0 39 50" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.1038 0C29.6577 0 38.2075 8.46671 38.2075 18.9181C38.2075 33.1786 21.7544 47.7273 21.0432 48.3035L19.1038 50L17.1643 48.3035C16.4532 47.7273 0 33.1786 0 18.9181C0 8.46831 8.54983 0 19.1038 0ZM32.3245 18.9181C32.3083 11.6837 26.4091 5.84187 19.1038 5.82586C11.7984 5.84187 5.89922 11.6837 5.88306 18.9181C5.88306 27.3367 14.1581 37.2439 19.0876 42.1095C23.1767 38.1242 32.3245 27.993 32.3245 18.9181Z" fill="#EC0000"/><path d="M19.104 5.82568C26.4093 5.84169 32.3086 11.6836 32.3247 18.9179C32.3247 27.9928 23.1769 38.124 19.0879 42.1093C14.1584 37.2437 5.8833 27.3366 5.8833 18.9179C5.89946 11.6836 11.7987 5.84169 19.104 5.82568ZM25.5689 18.9179C25.5689 15.3807 22.6759 12.5158 19.104 12.5158C15.5322 12.5158 12.6391 15.3807 12.6391 18.9179C12.6391 22.455 15.5322 25.3199 19.104 25.3199C22.6759 25.3199 25.5689 22.455 25.5689 18.9179Z" fill="white"/><path d="M19.1038 25.3202C22.6743 25.3202 25.5687 22.4539 25.5687 18.9182C25.5687 15.3824 22.6743 12.5161 19.1038 12.5161C15.5333 12.5161 12.6389 15.3824 12.6389 18.9182C12.6389 22.4539 15.5333 25.3202 19.1038 25.3202Z" fill="#EC0000"/></svg>',className:"osc-ideas-on-map-icon",width:39,height:50,iconAnchor:[20,50]},types:[]})).config.polygon=t.config.polygon,t.config.autoZoomAndCenter=t.config.autoZoomAndCenter||"polygon",t.ideas=[],t.state={filters:{}},t}return _createClass(Map,[{key:"componentDidMount",value:function(e,t){_get(_getPrototypeOf(Map.prototype),"componentDidMount",this).call(this,e,t);var n=this;n.mapClusterAnimationEndListener=function(e){n.onMapClusterAnimationEnd(e.detail)},document.addEventListener("osc-map-cluster-animation-end",n.mapClusterAnimationEndListener),n.ideasFilterOnchangeListener=function(e){n.onChangeFilter(e.detail)},document.addEventListener("osc-ideas-filter-onchange",n.ideasFilterOnchangeListener),n.ideasFilterResetAllListener=function(e){n.onResetFilters(e.detail)},document.addEventListener("osc-ideas-filter-reset-all",n.ideasFilterResetAllListener)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("osc-map-cluster-animation-end",this.mapClusterAnimationEndListener),document.removeEventListener("osc-ideas-filter-onchange",this.ideasFilterOnchangeListener),document.removeEventListener("osc-ideas-filter-reset-all",this.ideasFilterResetAllListener)}},{key:"addIdea",value:function addIdea(idea){var self=this;self.ideas.push(idea);var typename=idea&&self.config.typeField?eval("idea.".concat(self.config.typeField)):"typeId",typeDef=self.config.types.find((function(e){return typename&&(e.id==typename||e.name==typename)}));typeDef||(typeDef={});var color=typeDef.color||typeDef.backgroundColor||"#164995",icondef=typeDef.mapicon||typeDef.icon||{html:'<svg viewBox="0 0 26 26"><circle cx="13" cy="13" r="13" fill="'.concat(color,'"/></svg>'),width:26,height:26,anchor:[13,13]},icon=L.divIcon({html:icondef.html,className:"osc-ideas-on-map-icon",iconSize:L.point(icondef.width,icondef.height),iconAnchor:icondef.anchor});self.addMarker({lat:idea.location.coordinates[0],lng:idea.location.coordinates[1],data:idea,icon:icon})}},{key:"getVisibleIdeas",value:function(){var e=this,t=e.markers.filter((function(t){return t.visible&&t.data&&e.map.getBounds().contains(t.getLatLng())})).map((function(e){return e.data}));return e.setState({visibleIdeas:t}),t}},{key:"setSelectedLocation",value:function(e){if(this.selectedLocation=e,this.selectedLocation)if(this.selectedLocationMarker)this.updateMarker(this.selectedLocationMarker,{location:e});else{var t=L.divIcon({html:this.config.locationIcon.html,className:"osc-ideas-on-map-icon",iconSize:L.point(this.config.locationIcon.width,this.config.locationIcon.height),iconAnchor:this.config.locationIcon.iconAnchor});this.selectedLocationMarker=this.addMarker(_objectSpread(_objectSpread({},e),{},{icon:t,doNotCluster:!0}))}else this.selectedLocationMarker&&this.removeMarker(this.selectedLocationMarker),this.selectedLocationMarker=null}},{key:"setBoundsAndCenter",value:function(e){_get(_getPrototypeOf(Map.prototype),"setBoundsAndCenter",this).call(this,e||"polygon"==this.config.autoZoomAndCenter&&this.config.polygon||this.markers)}},{key:"showMarkers",value:function(e){e.keepCenter;var t=this;t.markers.forEach((function(e){t.showMarker(e)}))}},{key:"hideMarkers",value:function(e){var t=e.exception,n=this;t&&t.location&&n.setBoundsAndCenter([t.location]),n.markers.forEach((function(e){t&&t.location&&t.location.lat==e._latlng.lat&&t.location.lng==e._latlng.lng||n.hideMarker(e)}))}},{key:"fadeMarkers",value:function(e){var t=this,n=e.exception,r=this;r.markers.forEach((function(e){if(n&&e.data&&e.data.id&&n.id==e.data.id)e.data&&(e.data.isFaded=!1);else if(t.selectedLocationMarker&&t.selectedLocationMarker==e)e.data&&(e.data.isFaded=!1);else{e.data&&(e.data.isFaded=!0);var o=r.markerClusterGroup&&r.markerClusterGroup.getVisibleParent(e);!(o&&o.getAllChildMarkers&&o.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded})))&&o&&o.setOpacity(.3)}}))}},{key:"updateFading",value:function(){var e=this;e.markers.forEach((function(t){var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);if(n&&t.visible){var r=n&&n.getAllChildMarkers&&n.getAllChildMarkers().find((function(e){return e.data&&!1===e.data.isFaded}));n.setOpacity(!r&&t.data&&t.data.isFaded?.3:1)}}))}},{key:"unfadeAllMarkers",value:function(){var e=this;e.markers.forEach((function(t){t.data&&(t.data.isFaded=!1);var n=e.markerClusterGroup&&e.markerClusterGroup.getVisibleParent(t);n&&n.setOpacity(1)}))}},{key:"onMapClusterAnimationEnd",value:function(){this.updateFading()}},{key:"onChangeFilter",value:function onChangeFilter(filter){var self=this,filters=self.state.filters;filters[filter.fieldName]=filter,self.setState({filters:filters},(function(){self.setFilter((function(marker){var result=!0;return Object.keys(self.state.filters).forEach((function(fieldName){var filter=self.state.filters[fieldName];filter.value&&"0"!==filter.value&&(marker.data&&!eval("marker.data.".concat(filter.fieldName))||eval("marker.data.".concat(filter.fieldName))!=filter.value)&&(result=!1)})),result}))}))}},{key:"onResetFilters",value:function(e){this.setBoundsAndCenter()}}]),Map}(_nlmap_index_jsx__WEBPACK_IMPORTED_MODULE_0__.default),mapStateToProps=function(e){return{ideas:Object(_store_src_features_ideas_selector__WEBPACK_IMPORTED_MODULE_1__.a)(e)}},mapDispatchToProps=function(e){return Object(redux__WEBPACK_IMPORTED_MODULE_2__.b)({addIdea:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.a,fetchIdeas:_store_src_features_ideas_ideasSlice__WEBPACK_IMPORTED_MODULE_3__.fetchIdeas},e)};__webpack_exports__.a=Object(react_redux__WEBPACK_IMPORTED_MODULE_4__.b)(mapStateToProps,mapDispatchToProps,null,{forwardRef:!0})(Map)},function(e,t,n){n(140);var r=n(46);e.exports=r("Array","find")},function(e,t,n){"use strict";n.r(t);n(14),n(107);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),c=n(42),s=(n(142),n(82));n.d(t,"OpenstadStore",(function(){return s.default}));var u=n(105);n.d(t,"default",(function(){return u.a})),n.d(t,"IdeasOnMap",(function(){return u.a})),u.a.renderElement=function(e,t,n){var r=e.attributes;a.a.render(o.a.createElement(c.a,{store:n}," ",o.a.createElement(u.a,{attributes:r,config:t})," "),e)}},function(e,t,n){"use strict";var r=n(43),o=n(116).find,i=n(44),a=n(45),c="find",s=!0,u=a(c);c in[]&&Array(1).find((function(){s=!1})),r({target:"Array",proto:!0,forced:s||!u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},function(e,t,n){},function(e,t,n){},function(e,t,n){var r;!function(o,i){"use strict";var a="function",c="undefined",s="object",u="model",l="name",f="type",d="vendor",p="version",h="architecture",m="console",v="mobile",g="tablet",y="smarttv",b="wearable",_={extend:function(e,t){var n={};for(var r in e)t[r]&&t[r].length%2==0?n[r]=t[r].concat(e[r]):n[r]=e[r];return n},has:function(e,t){return"string"==typeof e&&-1!==t.toLowerCase().indexOf(e.toLowerCase())},lowerize:function(e){return e.toLowerCase()},major:function(e){return"string"==typeof e?e.replace(/[^\d\.]/g,"").split(".")[0]:i},trim:function(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}},E={rgx:function(e,t){for(var n,r,o,c,u,l,f=0;f<t.length&&!u;){var d=t[f],p=t[f+1];for(n=r=0;n<d.length&&!u;)if(u=d[n++].exec(e))for(o=0;o<p.length;o++)l=u[++r],typeof(c=p[o])===s&&c.length>0?2==c.length?typeof c[1]==a?this[c[0]]=c[1].call(this,l):this[c[0]]=c[1]:3==c.length?typeof c[1]!==a||c[1].exec&&c[1].test?this[c[0]]=l?l.replace(c[1],c[2]):i:this[c[0]]=l?c[1].call(this,l,c[2]):i:4==c.length&&(this[c[0]]=l?c[3].call(this,l.replace(c[1],c[2])):i):this[c]=l||i;f+=2}},str:function(e,t){for(var n in t)if(typeof t[n]===s&&t[n].length>0){for(var r=0;r<t[n].length;r++)if(_.has(t[n][r],e))return"?"===n?i:n}else if(_.has(t[n],e))return"?"===n?i:n;return e}},w={browser:{oldsafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}}},device:{amazon:{model:{"Fire Phone":["SD","KF"]}},sprint:{model:{"Evo Shift 4G":"7373KT"},vendor:{HTC:"APA",Sprint:"Sprint"}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},O={browser:[[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]{3,6}).+version\/([\w\.-]+)/i,/(opera).+version\/([\w\.]+)/i,/(opera)[\/\s]+([\w\.]+)/i],[l,p],[/(opios)[\/\s]+([\w\.]+)/i],[[l,"Opera Mini"],p],[/\s(opr)\/([\w\.]+)/i],[[l,"Opera"],p],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,/(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i,/(bidubrowser|baidubrowser)[\/\s]?([\w\.]+)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(rekonq)\/([\w\.]*)/i,/(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i],[l,p],[/(konqueror)\/([\w\.]+)/i],[[l,"Konqueror"],p],[/(trident).+rv[:\s]([\w\.]{1,9}).+like\sgecko/i],[[l,"IE"],p],[/(edge|edgios|edga|edg)\/((\d+)?[\w\.]+)/i],[[l,"Edge"],p],[/(yabrowser)\/([\w\.]+)/i],[[l,"Yandex"],p],[/(Avast)\/([\w\.]+)/i],[[l,"Avast Secure Browser"],p],[/(AVG)\/([\w\.]+)/i],[[l,"AVG Secure Browser"],p],[/(puffin)\/([\w\.]+)/i],[[l,"Puffin"],p],[/(focus)\/([\w\.]+)/i],[[l,"Firefox Focus"],p],[/(opt)\/([\w\.]+)/i],[[l,"Opera Touch"],p],[/((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],[[l,"UCBrowser"],p],[/(comodo_dragon)\/([\w\.]+)/i],[[l,/_/g," "],p],[/(windowswechat qbcore)\/([\w\.]+)/i],[[l,"WeChat(Win) Desktop"],p],[/(micromessenger)\/([\w\.]+)/i],[[l,"WeChat"],p],[/(brave)\/([\w\.]+)/i],[[l,"Brave"],p],[/(whale)\/([\w\.]+)/i],[[l,"Whale"],p],[/(qqbrowserlite)\/([\w\.]+)/i],[l,p],[/(QQ)\/([\d\.]+)/i],[l,p],[/m?(qqbrowser)[\/\s]?([\w\.]+)/i],[l,p],[/(baiduboxapp)[\/\s]?([\w\.]+)/i],[l,p],[/(2345Explorer)[\/\s]?([\w\.]+)/i],[l,p],[/(MetaSr)[\/\s]?([\w\.]+)/i],[l],[/(LBBROWSER)/i],[l],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[p,[l,"MIUI Browser"]],[/;fbav\/([\w\.]+);/i],[p,[l,"Facebook"]],[/FBAN\/FBIOS|FB_IAB\/FB4A/i],[[l,"Facebook"]],[/safari\s(line)\/([\w\.]+)/i,/android.+(line)\/([\w\.]+)\/iab/i],[l,p],[/headlesschrome(?:\/([\w\.]+)|\s)/i],[p,[l,"Chrome Headless"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[l,/(.+)/,"$1 WebView"],p],[/((?:oculus|samsung)browser)\/([\w\.]+)/i],[[l,/(.+(?:g|us))(.+)/,"$1 $2"],p],[/android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i],[p,[l,"Android Browser"]],[/(coc_coc_browser)\/([\w\.]+)/i],[[l,"Coc Coc"],p],[/(sailfishbrowser)\/([\w\.]+)/i],[[l,"Sailfish Browser"],p],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],[l,p],[/(dolfin)\/([\w\.]+)/i],[[l,"Dolphin"],p],[/(qihu|qhbrowser|qihoobrowser|360browser)/i],[[l,"360 Browser"]],[/((?:android.+)crmo|crios)\/([\w\.]+)/i],[[l,"Chrome"],p],[/(coast)\/([\w\.]+)/i],[[l,"Opera Coast"],p],[/fxios\/([\w\.-]+)/i],[p,[l,"Firefox"]],[/version\/([\w\.]+)\s.*mobile\/\w+\s(safari)/i],[p,[l,"Mobile Safari"]],[/version\/([\w\.]+)\s.*(mobile\s?safari|safari)/i],[p,l],[/webkit.+?(gsa)\/([\w\.]+)\s.*(mobile\s?safari|safari)(\/[\w\.]+)/i],[[l,"GSA"],p],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[l,[p,E.str,w.browser.oldsafari.version]],[/(webkit|khtml)\/([\w\.]+)/i],[l,p],[/(navigator|netscape)\/([\w\.-]+)/i],[[l,"Netscape"],p],[/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,/(firefox)\/([\w\.]+)\s[\w\s\-]+\/[\w\.]+$/i,/(mozilla)\/([\w\.]+)\s.+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]*)/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[l,p]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[[h,"amd64"]],[/(ia32(?=;))/i],[[h,_.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[h,"ia32"]],[/windows\s(ce|mobile);\sppc;/i],[[h,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[[h,/ower/,"",_.lowerize]],[/(sun4\w)[;\)]/i],[[h,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+[;l]))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i],[[h,_.lowerize]]],device:[[/\((ipad|playbook);[\w\s\),;-]+(rim|apple)/i],[u,d,[f,g]],[/applecoremedia\/[\w\.]+ \((ipad)/],[u,[d,"Apple"],[f,g]],[/(apple\s{0,1}tv)/i],[[u,"Apple TV"],[d,"Apple"],[f,y]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad)/i,/(hp).+(tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i],[d,u,[f,g]],[/(kf[A-z]+)(\sbuild\/|\)).+silk\//i],[u,[d,"Amazon"],[f,g]],[/(sd|kf)[0349hijorstuw]+(\sbuild\/|\)).+silk\//i],[[u,E.str,w.device.amazon.model],[d,"Amazon"],[f,v]],[/android.+aft([\w])(\sbuild\/|\))/i],[u,[d,"Amazon"],[f,y]],[/\((ip[honed|\s\w*]+);.+(apple)/i],[u,d,[f,v]],[/\((ip[honed|\s\w*]+);/i],[u,[d,"Apple"],[f,v]],[/(blackberry)[\s-]?(\w+)/i,/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i],[d,u,[f,v]],[/\(bb10;\s(\w+)/i],[u,[d,"BlackBerry"],[f,v]],[/android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone|p00c)/i],[u,[d,"Asus"],[f,g]],[/(sony)\s(tablet\s[ps])\sbuild\//i,/(sony)?(?:sgp.+)\sbuild\//i],[[d,"Sony"],[u,"Xperia Tablet"],[f,g]],[/android.+\s([c-g]\d{4}|so[-l]\w+)(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[u,[d,"Sony"],[f,v]],[/\s(ouya)\s/i,/(nintendo)\s([wids3u]+)/i],[d,u,[f,m]],[/android.+;\s(shield)\sbuild/i],[u,[d,"Nvidia"],[f,m]],[/(playstation\s[34portablevi]+)/i],[u,[d,"Sony"],[f,m]],[/(sprint\s(\w+))/i],[[d,E.str,w.device.sprint.vendor],[u,E.str,w.device.sprint.model],[f,v]],[/(htc)[;_\s-]{1,2}([\w\s]+(?=\)|\sbuild)|\w+)/i,/(zte)-(\w*)/i,/(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],[d,[u,/_/g," "],[f,v]],[/(nexus\s9)/i],[u,[d,"HTC"],[f,g]],[/d\/huawei([\w\s-]+)[;\)]/i,/android.+\s(nexus\s6p|vog-[at]?l\d\d|ane-[at]?l[x\d]\d|eml-a?l\d\da?|lya-[at]?l\d[\dc]|clt-a?l\d\di?)/i],[u,[d,"Huawei"],[f,v]],[/android.+(bah2?-a?[lw]\d{2})/i],[u,[d,"Huawei"],[f,g]],[/(microsoft);\s(lumia[\s\w]+)/i],[d,u,[f,v]],[/[\s\(;](xbox(?:\sone)?)[\s\);]/i],[u,[d,"Microsoft"],[f,m]],[/(kin\.[onetw]{3})/i],[[u,/\./g," "],[d,"Microsoft"],[f,v]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,/mot[\s-]?(\w*)/i,/(XT\d{3,4}) build\//i,/(nexus\s6)/i],[u,[d,"Motorola"],[f,v]],[/android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[u,[d,"Motorola"],[f,g]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[d,_.trim],[u,_.trim],[f,y]],[/hbbtv.+maple;(\d+)/i],[[u,/^/,"SmartTV"],[d,"Samsung"],[f,y]],[/\(dtv[\);].+(aquos)/i],[u,[d,"Sharp"],[f,y]],[/android.+((sch-i[89]0\d|shw-m380s|SM-P605|SM-P610|SM-P587|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,/((SM-T\w+))/i],[[d,"Samsung"],u,[f,g]],[/smart-tv.+(samsung)/i],[d,[f,y],u],[/((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,/(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,/sec-((sgh\w+))/i],[[d,"Samsung"],u,[f,v]],[/sie-(\w*)/i],[u,[d,"Siemens"],[f,v]],[/(maemo|nokia).*(n900|lumia\s\d+)/i,/(nokia)[\s_-]?([\w-]*)/i],[[d,"Nokia"],u,[f,v]],[/android[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i],[u,[d,"Acer"],[f,g]],[/android.+([vl]k\-?\d{3})\s+build/i],[u,[d,"LG"],[f,g]],[/android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i],[[d,"LG"],u,[f,g]],[/linux;\snetcast.+smarttv/i,/lg\snetcast\.tv-201\d/i],[[d,"LG"],u,[f,y]],[/(nexus\s[45])/i,/lg[e;\s\/-]+(\w*)/i,/android.+lg(\-?[\d\w]+)\s+build/i],[u,[d,"LG"],[f,v]],[/(lenovo)\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+))/i],[d,u,[f,g]],[/android.+(ideatab[a-z0-9\-\s]+)/i],[u,[d,"Lenovo"],[f,g]],[/(lenovo)[_\s-]?([\w-]+)/i],[d,u,[f,v]],[/linux;.+((jolla));/i],[d,u,[f,v]],[/((pebble))app\/[\d\.]+\s/i],[d,u,[f,b]],[/android.+;\s(oppo)\s?([\w\s]+)\sbuild/i],[d,u,[f,v]],[/crkey/i],[[u,"Chromecast"],[d,"Google"],[f,y]],[/android.+;\s(glass)\s\d/i],[u,[d,"Google"],[f,b]],[/android.+;\s(pixel c)[\s)]/i],[u,[d,"Google"],[f,g]],[/android.+;\s(pixel( [2-9]a?)?( xl)?)[\s)]/i],[u,[d,"Google"],[f,v]],[/android.+;\s(\w+)\s+build\/hm\1/i,/android.+(hm[\s\-_]?note?[\s_]?(?:\d\w)?)\sbuild/i,/android.+(redmi[\s\-_]?(?:note|k)?(?:[\s_]?[\w\s]+))(?:\sbuild|\))/i,/android.+(mi[\s\-_]?(?:a\d|one|one[\s_]plus|note lte)?[\s_]?(?:\d?\w?)[\s_]?(?:plus)?)\sbuild/i],[[u,/_/g," "],[d,"Xiaomi"],[f,v]],[/android.+(mi[\s\-_]?(?:pad)(?:[\s_]?[\w\s]+))(?:\sbuild|\))/i],[[u,/_/g," "],[d,"Xiaomi"],[f,g]],[/android.+;\s(m[1-5]\snote)\sbuild/i],[u,[d,"Meizu"],[f,v]],[/(mz)-([\w-]{2,})/i],[[d,"Meizu"],u,[f,v]],[/android.+a000(1)\s+build/i,/android.+oneplus\s(a\d{4})[\s)]/i],[u,[d,"OnePlus"],[f,v]],[/android.+[;\/]\s*(RCT[\d\w]+)\s+build/i],[u,[d,"RCA"],[f,g]],[/android.+[;\/\s](Venue[\d\s]{2,7})\s+build/i],[u,[d,"Dell"],[f,g]],[/android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i],[u,[d,"Verizon"],[f,g]],[/android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(\S(?:.*\S)?)\s+build/i],[[d,"Barnes & Noble"],u,[f,g]],[/android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i],[u,[d,"NuVision"],[f,g]],[/android.+;\s(k88)\sbuild/i],[u,[d,"ZTE"],[f,g]],[/android.+[;\/]\s*(gen\d{3})\s+build.*49h/i],[u,[d,"Swiss"],[f,v]],[/android.+[;\/]\s*(zur\d{3})\s+build/i],[u,[d,"Swiss"],[f,g]],[/android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i],[u,[d,"Zeki"],[f,g]],[/(android).+[;\/]\s+([YR]\d{2})\s+build/i,/android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i],[[d,"Dragon Touch"],u,[f,g]],[/android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i],[u,[d,"Insignia"],[f,g]],[/android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i],[u,[d,"NextBook"],[f,g]],[/android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i],[[d,"Voice"],u,[f,v]],[/android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i],[[d,"LvTel"],u,[f,v]],[/android.+;\s(PH-1)\s/i],[u,[d,"Essential"],[f,v]],[/android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i],[u,[d,"Envizen"],[f,g]],[/android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i],[d,u,[f,g]],[/android.+[;\/]\s*(Trio[\s\w\-\.]+)\s+build/i],[u,[d,"MachSpeed"],[f,g]],[/android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i],[d,u,[f,g]],[/android.+[;\/]\s*TU_(1491)\s+build/i],[u,[d,"Rotor"],[f,g]],[/android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i],[d,u,[f,g]],[/android .+?; ([^;]+?)(?: build|\) applewebkit).+? mobile safari/i],[u,[f,v]],[/android .+?;\s([^;]+?)(?: build|\) applewebkit).+?(?! mobile) safari/i],[u,[f,g]],[/\s(tablet|tab)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[f,_.lowerize],d,u],[/[\s\/\(](smart-?tv)[;\)]/i],[[f,y]],[/(android[\w\.\s\-]{0,9});.+build/i],[u,[d,"Generic"]],[/(phone)/i],[[f,v]]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[p,[l,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[p,[l,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[l,p],[/rv\:([\w\.]{1,9}).+(gecko)/i],[p,l]],os:[[/(xbox);\s+xbox\s([^\);]+)/i,/microsoft\s(windows)\s(vista|xp)/i],[l,p],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],[l,[p,E.str,w.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[l,"Windows"],[p,E.str,w.os.windows.version]],[/\((bb)(10);/i],[[l,"BlackBerry"],p],[/(blackberry)\w*\/?([\w\.]*)/i,/(tizen|kaios)[\/\s]([\w\.]+)/i,/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i],[l,p],[/(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i],[[l,"Symbian"],p],[/\((series40);/i],[l],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[l,"Firefox OS"],p],[/crkey\/([\d\.]+)/i],[p,[l,"Chromecast"]],[/(nintendo|playstation)\s([wids34portablevu]+)/i,/(mint)[\/\s\(]?(\w*)/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,/(hurd|linux)\s?([\w\.]*)/i,/(gnu)\s?([\w\.]*)/i],[l,p],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[l,"Chromium OS"],p],[/(sunos)\s?([\w\.\d]*)/i],[[l,"Solaris"],p],[/\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i],[l,p],[/(haiku)\s(\w+)/i],[l,p],[/cfnetwork\/.+darwin/i,/ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i],[[p,/_/g,"."],[l,"iOS"]],[/(mac\sos\sx)\s?([\w\s\.]*)/i,/(macintosh|mac(?=_powerpc)\s)/i],[[l,"Mac OS"],[p,/_/g,"."]],[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i,/(unix)\s?([\w\.]*)/i],[l,p]]},I=function(e,t){if("object"==typeof e&&(t=e,e=i),!(this instanceof I))return new I(e,t).getResult();var n=e||(o&&o.navigator&&o.navigator.userAgent?o.navigator.userAgent:""),r=t?_.extend(O,t):O;return this.getBrowser=function(){var e={name:i,version:i};return E.rgx.call(e,n,r.browser),e.major=_.major(e.version),e},this.getCPU=function(){var e={architecture:i};return E.rgx.call(e,n,r.cpu),e},this.getDevice=function(){var e={vendor:i,model:i,type:i};return E.rgx.call(e,n,r.device),e},this.getEngine=function(){var e={name:i,version:i};return E.rgx.call(e,n,r.engine),e},this.getOS=function(){var e={name:i,version:i};return E.rgx.call(e,n,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return n},this.setUA=function(e){return n=e,this},this};I.VERSION="0.7.24",I.BROWSER={NAME:l,MAJOR:"major",VERSION:p},I.CPU={ARCHITECTURE:h},I.DEVICE={MODEL:u,VENDOR:d,TYPE:f,CONSOLE:m,MOBILE:v,SMARTTV:y,TABLET:g,WEARABLE:b,EMBEDDED:"embedded"},I.ENGINE={NAME:l,VERSION:p},I.OS={NAME:l,VERSION:p},typeof t!==c?(typeof e!==c&&e.exports&&(t=e.exports=I),t.UAParser=I):(r=function(){return I}.call(t,n,t,e))===i||(e.exports=r);var R=o&&(o.jQuery||o.Zepto);if(R&&!R.ua){var T=new I;R.ua=T.getResult(),R.ua.get=function(){return T.getUA()},R.ua.set=function(e){T.setUA(e);var t=T.getResult();for(var n in t)R.ua[n]=t[n]}}}("object"==typeof window?window:this)},function(e,t,n){"use strict";n.r(t);n(138),n(14),n(0),n(6),n(145);var r=n(82);n.d(t,"OpenstadStore",(function(){return r.default}));var o=n(1);n.d(t,"Component",(function(){return o.a}));var i=n(2);n.d(t,"Libs",(function(){return i.a}));var a=n(5);n.d(t,"Forms",(function(){return a.a}));var c=n(134);n.d(t,"ChoicesGuide",(function(){return c.ChoicesGuide})),n.d(t,"ChoicesGuideResult",(function(){return c.ChoicesGuideResult}));var s=n(110);n.d(t,"NLMap",(function(){return s.default}));var u=n(109);n.d(t,"Lightbox",(function(){return u.default}));var l=n(139);n.d(t,"IdeasOnMap",(function(){return l.default}));var f=n(111);n.d(t,"IdeaDetails",(function(){return f.default}));var d=n(79);n.d(t,"IdeasOverview",(function(){return d.default}));var p=n(25);n.d(t,"IdeasImage",(function(){return p.default}));var h=n(98);n.d(t,"PreviousNextButtonBlock",(function(){return h.default}));var m=n(100);n.d(t,"Poll",(function(){return m.default}));var v=n(99);n.d(t,"Reactions",(function(){return v.default}))},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,